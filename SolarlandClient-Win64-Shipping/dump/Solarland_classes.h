// Class Solarland.3DMeshWidget
// Size: 0x238 (Inherited: 0x228)
struct A3DMeshWidget : AActor {
	struct USceneComponent* DefaultSceneRoot; // 0x228(0x08)
	struct UStaticMeshComponent* StaticMeshComp; // 0x230(0x08)
};

// Class Solarland.3DMeshWidgetTrack
// Size: 0x2d8 (Inherited: 0x238)
struct A3DMeshWidgetTrack : A3DMeshWidget {
	char pad_238[0x8]; // 0x238(0x08)
	struct FVector BoxHalfExtent; // 0x240(0x0c)
	float PlayerNearbyAlpha; // 0x24c(0x04)
	bool bDebugCollision; // 0x250(0x01)
	char pad_251[0x3]; // 0x251(0x03)
	struct FName MaterialAlphaParamName; // 0x254(0x08)
	struct FName MaterialCountDownName; // 0x25c(0x08)
	float MaxTraceDist; // 0x264(0x04)
	float DistFromGround; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct UStaticMeshComponent* StaticMeshCountDown; // 0x270(0x08)
	struct UTextRenderComponent* DistTextComp; // 0x278(0x08)
	struct UMaterialInstanceDynamic* DynamicMaterialIcon; // 0x280(0x08)
	struct UMaterialInstanceDynamic* DynamicMaterialCountDown; // 0x288(0x08)
	struct UMaterialInstanceDynamic* DynamicMaterialDistText; // 0x290(0x08)
	char pad_298[0x40]; // 0x298(0x40)
};

// Class Solarland.AbilityTask_WaitAbilityEnd
// Size: 0x148 (Inherited: 0x80)
struct UAbilityTask_WaitAbilityEnd : UAbilityTask {
	struct FMulticastInlineDelegate OnEnd; // 0x80(0x10)
	char pad_90[0xb8]; // 0x90(0xb8)

	struct UAbilityTask_WaitAbilityEnd* WaitForAbilityEndWithTagRequirements(struct UGameplayAbility* OwningAbility, struct FGameplayTagRequirements TagRequirements, bool InIncludeTriggeredAbilities, bool InTriggerOnce); // Function Solarland.AbilityTask_WaitAbilityEnd.WaitForAbilityEndWithTagRequirements // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2644b30
	struct UAbilityTask_WaitAbilityEnd* WaitForAbilityEnd_Query(struct UGameplayAbility* OwningAbility, struct FGameplayTagQuery Query, bool InIncludeTriggeredAbilities, bool InTriggerOnce); // Function Solarland.AbilityTask_WaitAbilityEnd.WaitForAbilityEnd_Query // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2644d40
	struct UAbilityTask_WaitAbilityEnd* WaitForAbilityEnd(struct UGameplayAbility* OwningAbility, struct FGameplayTag InWithTag, struct FGameplayTag InWithoutTag, bool InIncludeTriggeredAbilities, bool InTriggerOnce); // Function Solarland.AbilityTask_WaitAbilityEnd.WaitForAbilityEnd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2644990
	void OnAbilityEnd(struct FAbilityEndedData& EndedData); // Function Solarland.AbilityTask_WaitAbilityEnd.OnAbilityEnd // (Final|Native|Protected|HasOutParms) // @ game+0x2644580
};

// Class Solarland.SolarAbilityTask
// Size: 0x80 (Inherited: 0x80)
struct USolarAbilityTask : UAbilityTask {
};

// Class Solarland.AbilityTask_WaitAttributeChangeWithOldValue
// Size: 0xf8 (Inherited: 0x80)
struct UAbilityTask_WaitAttributeChangeWithOldValue : USolarAbilityTask {
	struct FMulticastInlineDelegate OnChange; // 0x80(0x10)
	char pad_90[0x60]; // 0x90(0x60)
	struct UAbilitySystemComponent* ExternalOwner; // 0xf0(0x08)

	struct UAbilityTask_WaitAttributeChangeWithOldValue* WaitForAttributeChangeWithComparison(struct UGameplayAbility* OwningAbility, struct FGameplayAttribute InAttribute, struct FGameplayTag InWithTag, struct FGameplayTag InWithoutTag, enum class EWaitAttributeChangeComparison InComparisonType, float InComparisonValue, bool bTriggerOnce, struct AActor* OptionalExternalOwner); // Function Solarland.AbilityTask_WaitAttributeChangeWithOldValue.WaitForAttributeChangeWithComparison // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2645210
	struct UAbilityTask_WaitAttributeChangeWithOldValue* WaitForAttributeChange(struct UGameplayAbility* OwningAbility, struct FGameplayAttribute InAttribute, struct FGameplayTag InWithTag, struct FGameplayTag InWithoutTag, bool bTriggerOnce, struct AActor* OptionalExternalOwner); // Function Solarland.AbilityTask_WaitAttributeChangeWithOldValue.WaitForAttributeChange // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2644f10
};

// Class Solarland.AbilityTask_WaitDelayAndResetOnGameplayEvent
// Size: 0xc0 (Inherited: 0x80)
struct UAbilityTask_WaitDelayAndResetOnGameplayEvent : USolarAbilityTask {
	struct FMulticastInlineDelegate OnFinish; // 0x80(0x10)
	struct FDelegate OnRecalculateWaitDelayOnEventTriggered; // 0x90(0x10)
	char pad_A0[0x20]; // 0xa0(0x20)

	struct UAbilityTask_WaitDelayAndResetOnGameplayEvent* CreateTask(struct UGameplayAbility* OwningAbility, float DelayTime, struct FGameplayTag& EventTag); // Function Solarland.AbilityTask_WaitDelayAndResetOnGameplayEvent.CreateTask // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2643c20
};

// Class Solarland.AbilityTask_WaitEvaluation
// Size: 0xa8 (Inherited: 0x80)
struct UAbilityTask_WaitEvaluation : USolarAbilityTask {
	struct FMulticastInlineDelegate OnGotDesiredValue; // 0x80(0x10)
	struct FDelegate EvaluationFunction; // 0x90(0x10)
	char pad_A0[0x8]; // 0xa0(0x08)

	struct UAbilityTask_WaitEvaluation* CreateTask(struct UGameplayAbility* OwningAbility, bool bDesiredValue, bool bTriggerOnce); // Function Solarland.AbilityTask_WaitEvaluation.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2643d30
};

// Class Solarland.AbilityTask_WaitInputAction
// Size: 0xa8 (Inherited: 0x80)
struct UAbilityTask_WaitInputAction : USolarAbilityTask {
	struct FMulticastInlineDelegate OnInputAction; // 0x80(0x10)
	char pad_90[0x18]; // 0x90(0x18)

	struct UAbilityTask_WaitInputAction* CreateTask(struct UGameplayAbility* OwningAbility, struct FName ActionName, enum class EInputEvent InputEvent, bool bTriggerOnce); // Function Solarland.AbilityTask_WaitInputAction.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2643e50
};

// Class Solarland.AbilityTask_WaitTagRequirementsMetStatusChange
// Size: 0xf0 (Inherited: 0x80)
struct UAbilityTask_WaitTagRequirementsMetStatusChange : USolarAbilityTask {
	struct FMulticastInlineDelegate OnMetStatusChange; // 0x80(0x10)
	struct FGameplayTagRequirements TagRequirements; // 0x90(0x50)
	char pad_E0[0x10]; // 0xe0(0x10)

	struct UAbilityTask_WaitTagRequirementsMetStatusChange* CreateTask(struct UGameplayAbility* OwningAbility, struct FGameplayTagRequirements& TagRequirements, bool bMetInitially); // Function Solarland.AbilityTask_WaitTagRequirementsMetStatusChange.CreateTask // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2643fa0
};

// Class Solarland.ActionNode
// Size: 0x70 (Inherited: 0x28)
struct UActionNode : UObject {
	struct FMulticastInlineDelegate OnBeganCallback; // 0x28(0x10)
	struct FMulticastInlineDelegate OnEndedCallback; // 0x38(0x10)
	struct FMulticastInlineDelegate OnResetCallback; // 0x48(0x10)
	struct FMulticastInlineDelegate OnDisposedCallback; // 0x58(0x10)
	char pad_68[0x8]; // 0x68(0x08)

	void Reset(); // Function Solarland.ActionNode.Reset // (Final|Native|Public) // @ game+0x26448e0
	bool Finished(); // Function Solarland.ActionNode.Finished // (Final|Native|Public|Const) // @ game+0x2644210
	void Finish(); // Function Solarland.ActionNode.Finish // (Native|Public) // @ game+0x26441f0
	bool Execute(float DeltaTime); // Function Solarland.ActionNode.Execute // (Final|Native|Public) // @ game+0x2644160
	bool Disposed(); // Function Solarland.ActionNode.Disposed // (Final|Native|Public|Const) // @ game+0x2644140
	void Dispose(); // Function Solarland.ActionNode.Dispose // (Final|Native|Public) // @ game+0x2644120
};

// Class Solarland.ActionWheelWidgetFunctionBase
// Size: 0x38 (Inherited: 0x28)
struct UActionWheelWidgetFunctionBase : UObject {
	struct TWeakObjectPtr<struct USolarUserWidget> BindedWidget; // 0x28(0x08)
	int32_t LastSelectedIndex; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	int32_t GetSuggestActionIndex(); // Function Solarland.ActionWheelWidgetFunctionBase.GetSuggestActionIndex // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetQuickActionIndex(); // Function Solarland.ActionWheelWidgetFunctionBase.GetQuickActionIndex // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetAutoSelectedActionIndex(); // Function Solarland.ActionWheelWidgetFunctionBase.GetAutoSelectedActionIndex // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	bool ExecUseCustomItemCommand(int32_t InItemID); // Function Solarland.ActionWheelWidgetFunctionBase.ExecUseCustomItemCommand // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	bool CheckCommandCanExec(struct ASCMPlayerState* InPlayerState, int32_t InIndex, struct FActionWheelCommand InCommand); // Function Solarland.ActionWheelWidgetFunctionBase.CheckCommandCanExec // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarUserWidget
// Size: 0x400 (Inherited: 0x260)
struct USolarUserWidget : UUserWidget {
	enum class EWidgetLayerLevel WidgetLayerLevel; // 0x260(0x01)
	bool bIsPersistent; // 0x261(0x01)
	enum class EWidgetScope WidgetScope; // 0x262(0x01)
	enum class EInputCapture CaptureInput; // 0x263(0x01)
	bool bHideCursorDuringCapture; // 0x264(0x01)
	char pad_265[0x3]; // 0x265(0x03)
	int32_t MyRoot; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct FString widgetkey; // 0x270(0x10)
	bool bReceiveKeyMap; // 0x280(0x01)
	bool bReceiveShowMouse; // 0x281(0x01)
	enum class EScope ShowScope; // 0x282(0x01)
	enum class ELayoutPreviewType LayoutPreviewType; // 0x283(0x01)
	bool bShowTransBlackAnim; // 0x284(0x01)
	char pad_285[0x3]; // 0x285(0x03)
	struct UWidgetInputManager* InputManagerClass; // 0x288(0x08)
	struct UWidgetInputManager* InputManager; // 0x290(0x08)
	struct TMap<struct FName, struct UWidgetAnimation*> AnimationsMap; // 0x298(0x50)
	struct TWeakObjectPtr<struct UWidgetAnimation> PlayingAnimation; // 0x2e8(0x08)
	char pad_2F0[0x18]; // 0x2f0(0x18)
	struct TArray<struct FPlayAnimationParams> PendingPlayAnimations; // 0x308(0x10)
	bool WidgetTickEnabled; // 0x318(0x01)
	char pad_319[0x3]; // 0x319(0x03)
	bool bInterestLocalLang; // 0x31c(0x01)
	char pad_31D[0xb]; // 0x31d(0x0b)
	struct USolarInputActionContext* InputActionContext; // 0x328(0x08)
	char pad_330[0xb0]; // 0x330(0xb0)
	struct TArray<struct USolarUserWidget*> AllSolarUserWidgetChilds; // 0x3e0(0x10)
	struct TArray<struct USolarAdapterWidget*> AllSolarAdapterWidgetChilds; // 0x3f0(0x10)

	void StopListeningForInputHandle(int32_t Handle); // Function Solarland.SolarUserWidget.StopListeningForInputHandle // (Final|Native|Protected|BlueprintCallable) // @ game+0x2971350
	void StopListeningForInputActionEx(struct FName ActionName, enum class EInputEvent EventType); // Function Solarland.SolarUserWidget.StopListeningForInputActionEx // (Final|Native|Protected|BlueprintCallable) // @ game+0x2971280
	void ShowSelfPanelUI(); // Function Solarland.SolarUserWidget.ShowSelfPanelUI // (Final|Native|Public|BlueprintCallable) // @ game+0x2971260
	void ShowMouseCursor(); // Function Solarland.SolarUserWidget.ShowMouseCursor // (Final|Native|Protected|BlueprintCallable) // @ game+0x2971240
	void SetZOrder(int32_t ZOrder); // Function Solarland.SolarUserWidget.SetZOrder // (Final|Native|Public) // @ game+0x29711b0
	void SetWidgetVisible(struct UWidget* Widget, bool bVisible, bool bHitTest); // Function Solarland.SolarUserWidget.SetWidgetVisible // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29710a0
	void SetWidgetTickEnabled(bool bEnabled); // Function Solarland.SolarUserWidget.SetWidgetTickEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x2971010
	void SetWidgetScope(enum class EWidgetScope InWidgetScope); // Function Solarland.SolarUserWidget.SetWidgetScope // (Final|Native|Public) // @ game+0x2970f90
	void SetWidgetLayerLevel(enum class EWidgetLayerLevel InWidgetLayerLevel); // Function Solarland.SolarUserWidget.SetWidgetLayerLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x2970f10
	void SetWidgetKey(struct FString InWidgetKey); // Function Solarland.SolarUserWidget.SetWidgetKey // (Final|Native|Public) // @ game+0x2970e70
	void SetInputActionIsEnabled(struct FName ActionName, enum class EInputEvent EventType, bool bInIsEnabled); // Function Solarland.SolarUserWidget.SetInputActionIsEnabled // (Final|Native|Protected|BlueprintCallable) // @ game+0x2970d50
	void SetBlockInputForOneTick(); // Function Solarland.SolarUserWidget.SetBlockInputForOneTick // (Final|Native|Public) // @ game+0x2970d30
	void ReceiveTick(struct FGeometry& MyGeometry, float InDeltaTime); // Function Solarland.SolarUserWidget.ReceiveTick // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveShow(); // Function Solarland.SolarUserWidget.ReceiveShow // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveHide(); // Function Solarland.SolarUserWidget.ReceiveHide // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	bool PlayAnimationByName(struct FName& AnimationName, float StartAtTime, int32_t NumLoopsToPlay, enum class EUMGSequencePlayMode PlayMode, float PlaybackSpeed); // Function Solarland.SolarUserWidget.PlayAnimationByName // (Final|Native|Public|HasOutParms) // @ game+0x2970970
	void PlayAnimationByExclusively(struct UWidgetAnimation* InAnimation, float StartAtTime, int32_t NumLoopsToPlay, enum class EUMGSequencePlayMode PlayMode, float PlaybackSpeed, bool bRestoreState); // Function Solarland.SolarUserWidget.PlayAnimationByExclusively // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x29707a0
	void OnTouchManagerInitialized(); // Function Solarland.SolarUserWidget.OnTouchManagerInitialized // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnSynchronizeProperties(); // Function Solarland.SolarUserWidget.OnSynchronizeProperties // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnSolarUIOpened(); // Function Solarland.SolarUserWidget.OnSolarUIOpened // (Native|Event|Protected|BlueprintEvent) // @ game+0x834f80
	void OnSolarUIClosed(); // Function Solarland.SolarUserWidget.OnSolarUIClosed // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ad7000
	void OnShow(); // Function Solarland.SolarUserWidget.OnShow // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ad71e0
	void OnLocalLangChangedEx(struct FString InLang); // Function Solarland.SolarUserWidget.OnLocalLangChangedEx // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnHide(); // Function Solarland.SolarUserWidget.OnHide // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ad7180
	void OnExclusivelyAnimationFinished(); // Function Solarland.SolarUserWidget.OnExclusivelyAnimationFinished // (Final|Native|Protected) // @ game+0x2970720
	void OnDeinitialize(); // Function Solarland.SolarUserWidget.OnDeinitialize // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnBackKey(enum class EWidgetBackKeyType BackKeyType); // Function Solarland.SolarUserWidget.OnBackKey // (Native|Event|Protected|BlueprintEvent) // @ game+0x2970290
	int32_t ListenForInputActionEx(struct FName ActionName, enum class EInputEvent EventType, bool bInIsEnabled, struct FDelegate Callback); // Function Solarland.SolarUserWidget.ListenForInputActionEx // (Final|Native|Protected|BlueprintCallable) // @ game+0x29700f0
	bool IsWidgetTickEnabled(); // Function Solarland.SolarUserWidget.IsWidgetTickEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28a31a0
	bool IsSolarUserWidgetAndBindLua(struct UWidget* InWidget); // Function Solarland.SolarUserWidget.IsSolarUserWidgetAndBindLua // (Final|Native|Static|Public) // @ game+0x2970060
	bool IsPlatformSwitch(); // Function Solarland.SolarUserWidget.IsPlatformSwitch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2970030
	bool IsPlatformDesktop(); // Function Solarland.SolarUserWidget.IsPlatformDesktop // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2970000
	void HideMouseCursor(); // Function Solarland.SolarUserWidget.HideMouseCursor // (Final|Native|Protected|BlueprintCallable) // @ game+0x296fe40
	struct FString GetWidgetKeyByPanelName(enum class EUIPanelName PanelName); // Function Solarland.SolarUserWidget.GetWidgetKeyByPanelName // (Final|Native|Static|Public) // @ game+0x296fd70
	struct FString GetWidgetKey(); // Function Solarland.SolarUserWidget.GetWidgetKey // (Final|Native|Public|Const) // @ game+0x296fcf0
	struct TArray<struct FVector2D> GetTouchedLocation(); // Function Solarland.SolarUserWidget.GetTouchedLocation // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x296fc70
	enum class EScope GetShowScope(); // Function Solarland.SolarUserWidget.GetShowScope // (Final|Native|Public|Const) // @ game+0x296fc40
	struct TArray<struct FVector2D> GetPointerLocation(); // Function Solarland.SolarUserWidget.GetPointerLocation // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x296fb90
	struct ASolarPlayerState* GetOwningSolarPlayerState(); // Function Solarland.SolarUserWidget.GetOwningSolarPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x296fb60
	struct ASolarCharacter* GetOwningSolarPlayerCharacter(); // Function Solarland.SolarUserWidget.GetOwningSolarPlayerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x296fb30
	struct UWidgetAnimation* GetAnimationByName(struct FName& AnimationName); // Function Solarland.SolarUserWidget.GetAnimationByName // (Final|Native|Public|HasOutParms|Const) // @ game+0x296f8b0
	struct TArray<struct USolarUserWidget*> GetAllSolarUserWidgetChilds(); // Function Solarland.SolarUserWidget.GetAllSolarUserWidgetChilds // (Final|Native|Public) // @ game+0x296f830
	struct UWidget* FindWidgetFromName(struct FName& Name); // Function Solarland.SolarUserWidget.FindWidgetFromName // (Final|Native|Public|HasOutParms|Const) // @ game+0x296f790
	void ExecuteSolarUIShow(); // Function Solarland.SolarUserWidget.ExecuteSolarUIShow // (Final|Native|Public) // @ game+0x296f770
	void ExecuteSolarUIOpened(); // Function Solarland.SolarUserWidget.ExecuteSolarUIOpened // (Final|Native|Public) // @ game+0x296f750
	void ExecuteSolarUIHide(); // Function Solarland.SolarUserWidget.ExecuteSolarUIHide // (Final|Native|Public) // @ game+0x296f730
	void ExecuteSolarUIClosed(); // Function Solarland.SolarUserWidget.ExecuteSolarUIClosed // (Final|Native|Public) // @ game+0x296f710
	void ExecuteSolarUIClean(); // Function Solarland.SolarUserWidget.ExecuteSolarUIClean // (Final|Native|Public) // @ game+0x296f6f0
	void ExecuteBindCustomControl(); // Function Solarland.SolarUserWidget.ExecuteBindCustomControl // (Final|Native|Public) // @ game+0x296f6d0
	void CloseSelfPanelUI(); // Function Solarland.SolarUserWidget.CloseSelfPanelUI // (Final|Native|Public|BlueprintCallable) // @ game+0x296f690
	struct TArray<struct USolarUserWidget*> CacheAllSolarUserWidgetChilds(); // Function Solarland.SolarUserWidget.CacheAllSolarUserWidgetChilds // (Final|Native|Public) // @ game+0x296f610
};

// Class Solarland.ActionWheelWidget
// Size: 0x5f0 (Inherited: 0x400)
struct UActionWheelWidget : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct UOverlay* Overlay_Point; // 0x410(0x08)
	char pad_418[0x58]; // 0x418(0x58)
	int32_t SelectedIndex; // 0x470(0x04)
	int32_t WheelActionItemCount; // 0x474(0x04)
	int32_t WheelActionItemCountMax; // 0x478(0x04)
	float OperationAreaRadius; // 0x47c(0x04)
	float CancelAreaRadius; // 0x480(0x04)
	float PointMoveSensitivity; // 0x484(0x04)
	float ManualSwitchThreshold_PC; // 0x488(0x04)
	float ManualSwitchThreshold_GamePad; // 0x48c(0x04)
	float ManualSwitchThreshold_Mobile; // 0x490(0x04)
	int32_t groupid; // 0x494(0x04)
	int32_t PageCount; // 0x498(0x04)
	int32_t CurrentPage; // 0x49c(0x04)
	char pad_4A0[0x8]; // 0x4a0(0x08)
	struct FActionWheelConfig WheelConfigs; // 0x4a8(0xe0)
	struct TMap<int32_t, struct UActionWheelWidgetFunctionBase*> ActionWheelWidgetFunctionObjs; // 0x588(0x50)
	struct UDataTable* ActionWheelConfigDataTable; // 0x5d8(0x08)
	bool ActionWheelIsOpened; // 0x5e0(0x01)
	char pad_5E1[0x3]; // 0x5e1(0x03)
	float ValidEmojiUseDistance; // 0x5e4(0x04)
	int32_t ItemWheelGroupID; // 0x5e8(0x04)
	int32_t EmoteActionWheelGroupID; // 0x5ec(0x04)

	void UpdateWheelArrowAngle(float Degree); // Function Solarland.ActionWheelWidget.UpdateWheelArrowAngle // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetInputActionGroupEnable(bool InEnable); // Function Solarland.ActionWheelWidget.SetInputActionGroupEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x2644900
	void SelecteActionWheelItem(int32_t page, int32_t Index); // Function Solarland.ActionWheelWidget.SelecteActionWheelItem // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveActionWheelTouchMoved(struct FVector2D& TouchLocalPos); // Function Solarland.ActionWheelWidget.ReceiveActionWheelTouchMoved // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2644850
	void OnConsumeItemUpdated(); // Function Solarland.ActionWheelWidget.OnConsumeItemUpdated // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnCommandExec(int32_t InGroupID, int32_t InSelectedIndex); // Function Solarland.ActionWheelWidget.OnCommandExec // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnBindedInputActionReleased(int32_t InGroupID); // Function Solarland.ActionWheelWidget.OnBindedInputActionReleased // (Native|Event|Public|BlueprintEvent) // @ game+0x26447c0
	void OnBindedInputActionPressed(int32_t InGroupID); // Function Solarland.ActionWheelWidget.OnBindedInputActionPressed // (Native|Event|Public|BlueprintEvent) // @ game+0x2644730
	void OnBattleHUDVisibilityChanged(bool Visible); // Function Solarland.ActionWheelWidget.OnBattleHUDVisibilityChanged // (Final|Native|Public) // @ game+0x26446a0
	void OnActionWheelPreviousPage(); // Function Solarland.ActionWheelWidget.OnActionWheelPreviousPage // (Final|Native|Public) // @ game+0x2644680
	void OnActionWheelOpened(); // Function Solarland.ActionWheelWidget.OnActionWheelOpened // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnActionWheelNextPage(); // Function Solarland.ActionWheelWidget.OnActionWheelNextPage // (Final|Native|Public) // @ game+0x2644660
	void OnActionWheelMouseRightClicked(); // Function Solarland.ActionWheelWidget.OnActionWheelMouseRightClicked // (Final|Native|Public) // @ game+0x2644640
	void OnActionWheelMouseLeftClicked(); // Function Solarland.ActionWheelWidget.OnActionWheelMouseLeftClicked // (Final|Native|Public) // @ game+0x2644620
	void OnActionWheelConfigInit(); // Function Solarland.ActionWheelWidget.OnActionWheelConfigInit // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnActionWheelClosed(); // Function Solarland.ActionWheelWidget.OnActionWheelClosed // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void LoadCustomActionCommandInfo(struct FActionWheelConfig& ActionWheelConfig); // Function Solarland.ActionWheelWidget.LoadCustomActionCommandInfo // (Final|Native|Public|HasOutParms) // @ game+0x2644440
	void InitActionWheelConfigByGroupID(int32_t InGroupID, int32_t InPage); // Function Solarland.ActionWheelWidget.InitActionWheelConfigByGroupID // (Final|Native|Public|BlueprintCallable) // @ game+0x2644370
	int32_t GetItemNumById(int32_t InItemID); // Function Solarland.ActionWheelWidget.GetItemNumById // (Final|Native|Public|BlueprintCallable) // @ game+0x26442d0
	struct UActionWheelWidgetFunctionBase* GetActionWheelWidgetFunctionObj(int32_t InGroupID); // Function Solarland.ActionWheelWidget.GetActionWheelWidgetFunctionObj // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2644230
	void CommandExec(int32_t InGroupID, int32_t InSelectedIndex); // Function Solarland.ActionWheelWidget.CommandExec // (Final|Native|Public|BlueprintCallable) // @ game+0x2643b50
	void ChangeWheelVisibility(bool Visible, bool IsProactivelyCancel); // Function Solarland.ActionWheelWidget.ChangeWheelVisibility // (Final|Native|Public) // @ game+0x2643a80
	void ActionWheelYAxis(float Movement); // Function Solarland.ActionWheelWidget.ActionWheelYAxis // (Final|Native|Protected) // @ game+0x2643a00
	void ActionWheelXAxis(float Movement); // Function Solarland.ActionWheelWidget.ActionWheelXAxis // (Final|Native|Protected) // @ game+0x2643980
};

// Class Solarland.ActorEffect
// Size: 0x50 (Inherited: 0x28)
struct UActorEffect : UObject {
	struct UActorEffectController* ControllerClass; // 0x28(0x08)
	struct UActorEffectController* Controller; // 0x30(0x08)
	char pad_38[0x18]; // 0x38(0x18)
};

// Class Solarland.ActorEffectController
// Size: 0x28 (Inherited: 0x28)
struct UActorEffectController : UObject {
};

// Class Solarland.ActorEffectSubsystem
// Size: 0xf0 (Inherited: 0x30)
struct UActorEffectSubsystem : UWorldSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct UActorEffect*> Effects; // 0x40(0x10)
	struct TMap<struct UActorEffect*, struct FActorEffectPool> EffectPools; // 0x50(0x50)
	struct TMap<struct UActorEffectController*, struct FActorEffectControllerPool> ControllerPools; // 0xa0(0x50)

	bool Stop(struct UActorEffect* EffectInstance); // Function Solarland.ActorEffectSubsystem.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x264bdf0
	struct UActorEffect* Start(struct UActorEffect* EffectClass, struct AActor* AffectedActor); // Function Solarland.ActorEffectSubsystem.Start // (Final|Native|Public|BlueprintCallable) // @ game+0x264bd20
	bool Finish(struct UActorEffect* EffectInstance); // Function Solarland.ActorEffectSubsystem.Finish // (Final|Native|Public|BlueprintCallable) // @ game+0x26499e0
};

// Class Solarland.ActorMarkBase
// Size: 0x480 (Inherited: 0x400)
struct UActorMarkBase : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	bool bEnableWeltDetection; // 0x410(0x01)
	char pad_411[0xb]; // 0x411(0x0b)
	float LerpAlpha; // 0x41c(0x04)
	float AngleForArrow; // 0x420(0x04)
	char pad_424[0x10]; // 0x424(0x10)
	struct FVector2D RectangleOffset; // 0x434(0x08)
	float Radius; // 0x43c(0x04)
	struct AActor* CurrentFollowActor; // 0x440(0x08)
	struct APlayerController* CurrentPlayerController; // 0x448(0x08)
	struct FVector2D MarkIconAlignment; // 0x450(0x08)
	struct FVector2D MarkPanelSize; // 0x458(0x08)
	char pad_460[0x18]; // 0x460(0x18)
	float MaxVisibleDis; // 0x478(0x04)
	char pad_47C[0x4]; // 0x47c(0x04)

	void SetUpdateState(bool InShouldUpdateLocation); // Function Solarland.ActorMarkBase.SetUpdateState // (Final|Native|Public|BlueprintCallable) // @ game+0x264bc90
	void InitActorMarkBaseByFixedPos(struct FVector Pos, struct APlayerController* Controller); // Function Solarland.ActorMarkBase.InitActorMarkBaseByFixedPos // (Final|Native|Public|HasDefaults) // @ game+0x2649c60
	void InitActorMarkBase(struct AActor* InActor, struct APlayerController* Controller); // Function Solarland.ActorMarkBase.InitActorMarkBase // (Final|Native|Public) // @ game+0x2649b90
	struct FVector GetFollowActorLocation(); // Function Solarland.ActorMarkBase.GetFollowActorLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2649b50
	float GetDistance(bool bIncludeZ); // Function Solarland.ActorMarkBase.GetDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2649ab0
	struct AActor* GetCurrentFollowActor(); // Function Solarland.ActorMarkBase.GetCurrentFollowActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2649a80
};

// Class Solarland.ActorMaterialSubsystemDataAsset
// Size: 0xc8 (Inherited: 0x30)
struct UActorMaterialSubsystemDataAsset : UDataAsset {
	struct FGameplayTag DefaultMaterialChangePriorityTag; // 0x30(0x08)
	struct TArray<struct FMaterialChangePriorityGroup> OrderedMaterialChangePriorityGroups; // 0x38(0x10)
	struct TSet<struct FSoftObjectPath> GlobalNoChangeMaterials; // 0x48(0x50)
	struct TArray<struct FForceChangeMaterialInfos> GlobalForceChangeMaterials; // 0x98(0x10)
	char pad_A8[0x20]; // 0xa8(0x20)
};

// Class Solarland.ActorMaterialSubsystemSettings
// Size: 0x60 (Inherited: 0x38)
struct UActorMaterialSubsystemSettings : UDeveloperSettings {
	struct TSoftObjectPtr<UActorMaterialSubsystemDataAsset> ActorMaterialSubsystemDataAsset; // 0x38(0x28)
};

// Class Solarland.ActorMaterialSubsystem
// Size: 0x98 (Inherited: 0x30)
struct UActorMaterialSubsystem : UWorldSubsystem {
	struct UActorMaterialSubsystemDataAsset* Settings; // 0x30(0x08)
	struct TMap<struct AActor*, struct FActorMaterialInfo> ActorMaterialsMap; // 0x38(0x50)
	char pad_88[0x10]; // 0x88(0x10)

	bool SetStaticMesh(struct AActor* Actor, struct UStaticMeshComponent* MeshComp, struct UStaticMesh* NewMesh); // Function Solarland.ActorMaterialSubsystem.SetStaticMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x264bb80
	bool SetSkeletalMesh(struct AActor* Actor, struct USkeletalMeshComponent* MeshComp, struct USkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation); // Function Solarland.ActorMaterialSubsystem.SetSkeletalMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x264b9c0
	bool SetOriginalMultiplePassMaterial(struct AActor* Actor, struct UMeshComponent* MeshComp, struct UMaterialInterface* Material, bool bNeedMultiplePass); // Function Solarland.ActorMaterialSubsystem.SetOriginalMultiplePassMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x264b860
	bool SetOriginalMaterials(struct AActor* Actor, struct UMeshComponent* MeshComp, struct TArray<struct UMaterialInterface*>& Materials); // Function Solarland.ActorMaterialSubsystem.SetOriginalMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x264b730
	bool SetOriginalMaterial(struct AActor* Actor, struct UMeshComponent* MeshComp, int32_t MaterialIndex, struct UMaterialInterface* Material); // Function Solarland.ActorMaterialSubsystem.SetOriginalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x264b5d0
	void RemoveNoChangeMaterials(struct TArray<struct FSoftObjectPath>& Materials); // Function Solarland.ActorMaterialSubsystem.RemoveNoChangeMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x264b500
	bool RemoveMaterialChange(struct AActor* Actor, struct FMaterialChangeHandle Handle); // Function Solarland.ActorMaterialSubsystem.RemoveMaterialChange // (Final|Native|Public|BlueprintCallable) // @ game+0x264b430
	bool RemoveAllMaterialChanges(struct AActor* Actor); // Function Solarland.ActorMaterialSubsystem.RemoveAllMaterialChanges // (Final|Native|Public|BlueprintCallable) // @ game+0x264b390
	void RebuildMaterialChangesOnMeshAddedOrRemoved(struct AActor* Actor); // Function Solarland.ActorMaterialSubsystem.RebuildMaterialChangesOnMeshAddedOrRemoved // (Final|Native|Public|BlueprintCallable) // @ game+0x264b300
	void RebuildMaterialChangesOnAllOriginalMaterialsChanged(struct AActor* Actor); // Function Solarland.ActorMaterialSubsystem.RebuildMaterialChangesOnAllOriginalMaterialsChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x264b270
	struct UMaterialInstanceDynamic* OverrideDynamicMaterialInstanceParameterByIndex(struct UMaterialInstanceDynamic* TargetMaterial, struct UPrimitiveComponent* SourcePrimitiveComponent, int32_t SourceElementIndex, struct FName ParameterName, enum class EMaterialParameterType2 ParameterType, bool bOverridenOnly); // Function Solarland.ActorMaterialSubsystem.OverrideDynamicMaterialInstanceParameterByIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x264b0a0
	struct UMaterialInstanceDynamic* OverrideDynamicMaterialInstanceParameter(struct UMaterialInstanceDynamic* TargetMaterial, struct UMaterialInterface* SourceMaterial, struct FName ParameterName, enum class EMaterialParameterType2 ParameterType, bool bOverridenOnly); // Function Solarland.ActorMaterialSubsystem.OverrideDynamicMaterialInstanceParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x264af10
	void OnActorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.ActorMaterialSubsystem.OnActorEndPlay // (Final|Native|Private) // @ game+0x264ae40
	bool K2_SetVectorMaterialParameter(struct AActor* Actor, struct FMaterialChangeHandle Handle, struct FName ParameterName, struct FVector ParameterValue, struct FMaterialFilter Filter); // Function Solarland.ActorMaterialSubsystem.K2_SetVectorMaterialParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x264ab40
	bool K2_SetScalarMaterialParameter(struct AActor* Actor, struct FMaterialChangeHandle Handle, struct FName ParameterName, float ParameterValue, struct FMaterialFilter Filter); // Function Solarland.ActorMaterialSubsystem.K2_SetScalarMaterialParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x264a850
	void K2_RebuildMaterialChangesOnOriginalMaterialChanged(struct AActor* Actor, struct TArray<struct UMeshComponent*> ChangedMeshes); // Function Solarland.ActorMaterialSubsystem.K2_RebuildMaterialChangesOnOriginalMaterialChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x264a720
	struct UMaterialInstanceDynamic* K2_OverrideDynamicMaterialInstanceAllParametersByIndex(struct UMaterialInstanceDynamic* TargetMaterial, struct UPrimitiveComponent* PrimitiveComponent, int32_t SourceElementIndex, int32_t ParameterTypeFlags, struct FMaterialParameterFilter& ParameterFilter, bool bOverridenOnly); // Function Solarland.ActorMaterialSubsystem.K2_OverrideDynamicMaterialInstanceAllParametersByIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x264a520
	struct UMaterialInstanceDynamic* K2_OverrideDynamicMaterialInstanceAllParameters(struct UMaterialInstanceDynamic* TargetMaterial, struct UMaterialInterface* SourceMaterial, int32_t ParameterTypeFlags, struct FMaterialParameterFilter& ParameterFilter, bool bOverridenOnly); // Function Solarland.ActorMaterialSubsystem.K2_OverrideDynamicMaterialInstanceAllParameters // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x264a360
	struct UMaterialInstanceDynamic* K2_CreateDynamicMaterialInstanceOverrideAllParameters(struct UPrimitiveComponent* TargetPrimitiveComponent, struct UMaterialInterface* SourceMaterial, int32_t ParameterTypeFlags, struct FMaterialParameterFilter& ParameterFilter, int32_t TargetElementIndex, bool bOverridenOnly, struct FName OptionalMaterialName); // Function Solarland.ActorMaterialSubsystem.K2_CreateDynamicMaterialInstanceOverrideAllParameters // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x264a100
	struct FMaterialChangeHandle K2_AddMaterialChangeByPath(struct AActor* Actor, struct FSoftObjectPath& MaterialPath, struct FAddMaterialChangeParams Params); // Function Solarland.ActorMaterialSubsystem.K2_AddMaterialChangeByPath // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2649f10
	struct FMaterialChangeHandle K2_AddMaterialChange(struct AActor* Actor, struct UMaterialInterface* SourceMaterial, struct FAddMaterialChangeParams Params); // Function Solarland.ActorMaterialSubsystem.K2_AddMaterialChange // (Final|Native|Public|BlueprintCallable) // @ game+0x2649d40
	bool EmptyOriginalOverrideMaterials(struct AActor* Actor, struct UMeshComponent* MeshComp); // Function Solarland.ActorMaterialSubsystem.EmptyOriginalOverrideMaterials // (Final|Native|Public|BlueprintCallable) // @ game+0x2649910
	bool ContainsMaterialChangeByPriority(struct AActor* Actor, int32_t Priority); // Function Solarland.ActorMaterialSubsystem.ContainsMaterialChangeByPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2649840
	bool ContainsMaterialChange(struct AActor* Actor, struct FMaterialChangeHandle Handle); // Function Solarland.ActorMaterialSubsystem.ContainsMaterialChange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2649770
	bool ContainsAnyMaterialChange(struct AActor* Actor); // Function Solarland.ActorMaterialSubsystem.ContainsAnyMaterialChange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26496d0
	void AddNoChangeMaterials(struct TArray<struct FSoftObjectPath>& Materials); // Function Solarland.ActorMaterialSubsystem.AddNoChangeMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2649600
};

// Class Solarland.ActorMaterialSubsystemAgentInterface
// Size: 0x28 (Inherited: 0x28)
struct UActorMaterialSubsystemAgentInterface : UInterface {
};

// Class Solarland.ActorMaterialSubsystemAgentComponentInterface
// Size: 0x28 (Inherited: 0x28)
struct UActorMaterialSubsystemAgentComponentInterface : UInterface {

	struct UMaterialInterface* AMS_GetAlternativeSourceMaterial(struct UMaterialInterface* OriginalSourceMaterial); // Function Solarland.ActorMaterialSubsystemAgentComponentInterface.AMS_GetAlternativeSourceMaterial // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x264f490
};

// Class Solarland.ActorParticleEffectSpawner
// Size: 0xb0 (Inherited: 0x28)
struct UActorParticleEffectSpawner : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct FActorParticleEffectSpawnInfo Info; // 0x38(0x70)
	char pad_A8[0x8]; // 0xa8(0x08)
};

// Class Solarland.ActorParticleEffectSubsystem
// Size: 0x50 (Inherited: 0x30)
struct UActorParticleEffectSubsystem : UWorldSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct UActorParticleEffectSpawner*> Spawners; // 0x40(0x10)

	struct FActorParticleEffectSpawnHandle K2_RequestParticleEffectSpawn(struct AActor* Actor, struct FActorParticleEffectSpawnInfo SpawnInfo); // Function Solarland.ActorParticleEffectSubsystem.K2_RequestParticleEffectSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0x264fbe0
	void CancelParticleEffectSpawn(struct FActorParticleEffectSpawnHandle Handle); // Function Solarland.ActorParticleEffectSubsystem.CancelParticleEffectSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0x264f660
};

// Class Solarland.ActorReadySubsystem
// Size: 0xc0 (Inherited: 0x30)
struct UActorReadySubsystem : UWorldSubsystem {
	char pad_30[0x90]; // 0x30(0x90)

	void OnGameStateSet(struct AGameStateBase* GameState); // Function Solarland.ActorReadySubsystem.OnGameStateSet // (Final|Native|Private) // @ game+0x264fee0
	void OnActorPropertyChanged(struct UObject* InObject); // Function Solarland.ActorReadySubsystem.OnActorPropertyChanged // (Final|Native|Private) // @ game+0x264fe50
	void OnActorEndPlay(struct AActor* TargetActor); // Function Solarland.ActorReadySubsystem.OnActorEndPlay // (Final|Native|Private) // @ game+0x264fdc0
	void HasDataWaitTooLong(); // Function Solarland.ActorReadySubsystem.HasDataWaitTooLong // (Final|Native|Private) // @ game+0x264f920
};

// Class Solarland.AdvProgressBase
// Size: 0x310 (Inherited: 0x260)
struct UAdvProgressBase : UUserWidget {
	struct UImage* Progress; // 0x260(0x08)
	struct UMaterialInstance* ProgressShader; // 0x268(0x08)
	float Speed; // 0x270(0x04)
	float CurrentHP; // 0x274(0x04)
	float MaxHP; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct TMap<int32_t, float> ActionMap; // 0x280(0x50)
	float AnimCurrentHP; // 0x2d0(0x04)
	float ProgressAdd; // 0x2d4(0x04)
	float ProgressMinus; // 0x2d8(0x04)
	char pad_2DC[0x34]; // 0x2dc(0x34)

	void UpdateMaxHPLength(float NewHPMax, float NewCurrentHP); // Function Solarland.AdvProgressBase.UpdateMaxHPLength // (Final|Native|Public|BlueprintCallable) // @ game+0x2650470
	void SetProgress(float _PreMinus, float _CurrentHP, float _PreAdd); // Function Solarland.AdvProgressBase.SetProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x2650350
	int32_t PreAction(float Number); // Function Solarland.AdvProgressBase.PreAction // (Final|Native|Public|BlueprintCallable) // @ game+0x26502c0
	void Init(float _DefaultHP, float _MaxHP); // Function Solarland.AdvProgressBase.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x264f940
	float GetMaxHP(); // Function Solarland.AdvProgressBase.GetMaxHP // (Final|Native|Public|Const) // @ game+0x264f900
	float GetCurrentHPPercent(); // Function Solarland.AdvProgressBase.GetCurrentHPPercent // (Final|Native|Public|Const) // @ game+0x264f8e0
	void DoActionSmoothly(float Number); // Function Solarland.AdvProgressBase.DoActionSmoothly // (Final|Native|Public|BlueprintCallable) // @ game+0x264f860
	void DoActionDirectly(float Number); // Function Solarland.AdvProgressBase.DoActionDirectly // (Final|Native|Public|BlueprintCallable) // @ game+0x264f7e0
	void DoAction(int32_t ID); // Function Solarland.AdvProgressBase.DoAction // (Final|Native|Public|BlueprintCallable) // @ game+0x264f750
	struct FLinearColor Debug(); // Function Solarland.AdvProgressBase.Debug // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x264f710
	void CleanPreActions(); // Function Solarland.AdvProgressBase.CleanPreActions // (Final|Native|Public|BlueprintCallable) // @ game+0x264f6f0
	void CancelAction(int32_t ID); // Function Solarland.AdvProgressBase.CancelAction // (Final|Native|Public|BlueprintCallable) // @ game+0x264f530
};

// Class Solarland.AerialReconnaissanceMarkWidget
// Size: 0x400 (Inherited: 0x400)
struct UAerialReconnaissanceMarkWidget : USolarUserWidget {

	void K2_MarkStateChanged(bool bInStart); // Function Solarland.AerialReconnaissanceMarkWidget.K2_MarkStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.AirDropAudioActor
// Size: 0x260 (Inherited: 0x228)
struct AAirDropAudioActor : AActor {
	char pad_228[0x10]; // 0x228(0x10)
	int32_t ThisID; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
	bool bSummonedByCharacter; // 0x240(0x01)
	char pad_241[0x7]; // 0x241(0x07)
	struct UAkComponent* AkAudioComponent; // 0x248(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x250(0x08)
	bool bHasLanded; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)

	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.AirDropAudioActor.InitSolarAkGameObject // (Final|Native|Public) // @ game+0x264fa10
	void DisappearAirDropArrow(); // Function Solarland.AirDropAudioActor.DisappearAirDropArrow // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.AirDropOutcomeConfig
// Size: 0x110 (Inherited: 0x30)
struct UAirDropOutcomeConfig : UDataAsset {
	int32_t OutcomeID; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct FAirDropSkillDatas> AirDropSkillSetting; // 0x38(0x10)
	struct FWrappedLevelToIdMap ShieldIdConfig; // 0x48(0x50)
	int32_t SniperScopePartOutcomeId; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct TMap<enum class EWeaponPartType, struct FWrappedLevelToIdMap> WeaponPartIdConfig; // 0xa0(0x50)
	struct TArray<struct FWrappedIdCount> SupplyItemArray; // 0xf0(0x10)
	struct TArray<struct FAirDropAllOutcomeConfigArray> OutcomeSeries; // 0x100(0x10)
};

// Class Solarland.SolarDormantActor
// Size: 0x228 (Inherited: 0x228)
struct ASolarDormantActor : AActor {
};

// Class Solarland.SolarItemActor
// Size: 0x408 (Inherited: 0x228)
struct ASolarItemActor : ASolarDormantActor {
	char pad_228[0x48]; // 0x228(0x48)
	struct FSolarItemData ItemData; // 0x270(0xb8)
	struct FVector_NetQuantize DroppedLocation; // 0x328(0x0c)
	float SpawnOffset; // 0x334(0x04)
	struct TArray<struct FSoftObjectPath> DiscardMatPath; // 0x338(0x10)
	struct FSoftObjectPath OutlineMatPath; // 0x348(0x18)
	struct FSoftObjectPath FXPath; // 0x360(0x18)
	float NoneMeshFxOffset; // 0x378(0x04)
	float PositionTolerance; // 0x37c(0x04)
	struct FString FXBPPath; // 0x380(0x10)
	struct USphereComponent* SphereComponent; // 0x390(0x08)
	char pad_398[0x4]; // 0x398(0x04)
	struct TWeakObjectPtr<struct AActor> FXActor; // 0x39c(0x08)
	enum class EItemState ItemCurrentState; // 0x3a4(0x01)
	char pad_3A5[0xb]; // 0x3a5(0x0b)
	struct TArray<char> MarkedTeamIdList; // 0x3b0(0x10)
	char pad_3C0[0x8]; // 0x3c0(0x08)
	struct UStaticMeshComponent* StaticMeshComp; // 0x3c8(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> NormalMats; // 0x3d0(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> OutlineMats; // 0x3e0(0x10)
	bool bAdjustDroppedLocationByLandscape; // 0x3f0(0x01)
	char pad_3F1[0x3]; // 0x3f1(0x03)
	struct FSolarLandscapeListenerConfig LandscapeListenerConfig; // 0x3f4(0x10)
	char pad_404[0x4]; // 0x404(0x04)

	void UnMarkThisItem(char TeamID); // Function Solarland.SolarItemActor.UnMarkThisItem // (Native|Public) // @ game+0x27f3f70
	void SwitchDiscardMaterials(); // Function Solarland.SolarItemActor.SwitchDiscardMaterials // (Final|Native|Protected) // @ game+0x2815b20
	void SetOutlineMeshVisible(bool Visible); // Function Solarland.SolarItemActor.SetOutlineMeshVisible // (Native|Public) // @ game+0x2815970
	void SetItemData(struct FSolarItemData& _ItemData); // Function Solarland.SolarItemActor.SetItemData // (Native|Public|HasOutParms) // @ game+0x27f3c90
	void OnServerPawned(); // Function Solarland.SolarItemActor.OnServerPawned // (Native|Public) // @ game+0x28155f0
	void OnRep_ItemDataChange(); // Function Solarland.SolarItemActor.OnRep_ItemDataChange // (Native|Public) // @ game+0x1ae6410
	void OnRep_ItemCurrentStateChanged(); // Function Solarland.SolarItemActor.OnRep_ItemCurrentStateChanged // (Native|Protected) // @ game+0x7ec190
	void OnRep_DroppedLocation(); // Function Solarland.SolarItemActor.OnRep_DroppedLocation // (Native|Public) // @ game+0x7ec1b0
	void NotifyThisItemWasPickedUp(); // Function Solarland.SolarItemActor.NotifyThisItemWasPickedUp // (Final|Native|Public) // @ game+0x2814d70
	void MarkThisItem(char TeamID); // Function Solarland.SolarItemActor.MarkThisItem // (Native|Public) // @ game+0x27f3980
	struct UStaticMeshComponent* GetStaticMeshComp(); // Function Solarland.SolarItemActor.GetStaticMeshComp // (Final|Native|Public) // @ game+0x2814cc0
	int32_t GetQuality(); // Function Solarland.SolarItemActor.GetQuality // (Native|Public) // @ game+0x27f3940
};

// Class Solarland.SolarTreasureBoxActor
// Size: 0x608 (Inherited: 0x408)
struct ASolarTreasureBoxActor : ASolarItemActor {
	enum class ETreasureBoxState CurrentState; // 0x408(0x01)
	char pad_409[0x7]; // 0x409(0x07)
	struct FSolarItemDataArray ItemDataList; // 0x410(0x118)
	struct TArray<struct FSolarItemData> SortedGameItemDatas; // 0x528(0x10)
	char pad_538[0x20]; // 0x538(0x20)
	int32_t DataLeng; // 0x558(0x04)
	enum class ECostType CostType; // 0x55c(0x01)
	char pad_55D[0x3]; // 0x55d(0x03)
	int32_t CostNum; // 0x560(0x04)
	char pad_564[0x54]; // 0x564(0x54)
	int32_t HighestItemQuality; // 0x5b8(0x04)
	float BurstRadius; // 0x5bc(0x04)
	float BurstRadiusRandScale; // 0x5c0(0x04)
	float BurstLocalHeight; // 0x5c4(0x04)
	float BurstEulerAngle; // 0x5c8(0x04)
	bool bBurstSplitItem; // 0x5cc(0x01)
	enum class EBurstMethod BurstMethod; // 0x5cd(0x01)
	char pad_5CE[0x2]; // 0x5ce(0x02)
	float RadSafeSlopeToBurstOn; // 0x5d0(0x04)
	float GoldenSpiralMinRadiusSquared; // 0x5d4(0x04)
	struct TArray<struct ASolarBurstItemActor*> BurstItemActors; // 0x5d8(0x10)
	struct FVector MeshBoxExtent; // 0x5e8(0x0c)
	char pad_5F4[0x4]; // 0x5f4(0x04)
	struct UAkComponent* AkAudioComponent; // 0x5f8(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x600(0x08)

	void UpdateTreasureBoxInternal(); // Function Solarland.SolarTreasureBoxActor.UpdateTreasureBoxInternal // (Native|Public) // @ game+0x1ae49f0
	void UpdateOpenBoxUIByState(enum class ETreasureBoxState NewState); // Function Solarland.SolarTreasureBoxActor.UpdateOpenBoxUIByState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void UpdateItemDataListInternal(); // Function Solarland.SolarTreasureBoxActor.UpdateItemDataListInternal // (Final|Native|Public) // @ game+0x2965930
	void ServerSetState(enum class ETreasureBoxState NewState, struct ASolarCharacter* RequestCharacter); // Function Solarland.SolarTreasureBoxActor.ServerSetState // (Final|Native|Public) // @ game+0x2965560
	void ServerNotifyPlayerOpen(struct ASolarCharacter* RequestCharacter, enum class EItemType InItemType); // Function Solarland.SolarTreasureBoxActor.ServerNotifyPlayerOpen // (Final|Native|Public) // @ game+0x29652a0
	void PlayOpenAnimation(); // Function Solarland.SolarTreasureBoxActor.PlayOpenAnimation // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnRep_ItemDataList(); // Function Solarland.SolarTreasureBoxActor.OnRep_ItemDataList // (Final|Native|Public) // @ game+0x2965280
	void OnRep_CurrentState(); // Function Solarland.SolarTreasureBoxActor.OnRep_CurrentState // (Final|Native|Public) // @ game+0x29651c0
	void OnClientItemHighestQualityChanged(int32_t NewQuality, int32_t PrevQuality); // Function Solarland.SolarTreasureBoxActor.OnClientItemHighestQualityChanged // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x29650f0
	bool IsEmpty(); // Function Solarland.SolarTreasureBoxActor.IsEmpty // (Final|Native|Public) // @ game+0x2965060
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarTreasureBoxActor.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x2964f60
	int32_t GetNumCost(); // Function Solarland.SolarTreasureBoxActor.GetNumCost // (Final|Native|Public|Const) // @ game+0x2964b40
	struct TArray<struct FSolarItemData> GetItemList(); // Function Solarland.SolarTreasureBoxActor.GetItemList // (Final|Native|Public) // @ game+0x29649e0
	enum class ECostType GetCostType(); // Function Solarland.SolarTreasureBoxActor.GetCostType // (Final|Native|Public|Const) // @ game+0x29649c0
	void ConstructTreasureBoxTest(struct TArray<int32_t>& itemIdList); // Function Solarland.SolarTreasureBoxActor.ConstructTreasureBoxTest // (Final|Native|Public|HasOutParms) // @ game+0xb67640
	void ConstructTreasureBox(int32_t dropId); // Function Solarland.SolarTreasureBoxActor.ConstructTreasureBox // (Final|Native|Public) // @ game+0x1ae6850
	bool BOpened(); // Function Solarland.SolarTreasureBoxActor.BOpened // (Native|Public) // @ game+0x2964850
};

// Class Solarland.AirDropTreasureBox
// Size: 0xc90 (Inherited: 0x608)
struct AAirDropTreasureBox : ASolarTreasureBoxActor {
	bool bPendingDestroy; // 0x608(0x01)
	char pad_609[0x3]; // 0x609(0x03)
	float openProgress; // 0x60c(0x04)
	struct ASolarCharacter* OpeningCharacter; // 0x610(0x08)
	float OpenTime; // 0x618(0x04)
	float ProtectionTime; // 0x61c(0x04)
	char pad_620[0x10]; // 0x620(0x10)
	float StartDropHeight; // 0x630(0x04)
	struct FVector TargetLocation; // 0x634(0x0c)
	struct FRotator TargetRotation; // 0x640(0x0c)
	struct FVector SummonCharLocation; // 0x64c(0x0c)
	float RecordDropTime; // 0x658(0x04)
	char pad_65C[0x4]; // 0x65c(0x04)
	enum class EAirDropMovementState MovementState; // 0x660(0x01)
	char pad_661[0x3]; // 0x661(0x03)
	float InitialHeight; // 0x664(0x04)
	float DropGravity; // 0x668(0x04)
	float MaxDropSpeed; // 0x66c(0x04)
	float DecelerateHeight; // 0x670(0x04)
	float ApplyDamageHeight; // 0x674(0x04)
	float DecelerateTime; // 0x678(0x04)
	char pad_67C[0x4]; // 0x67c(0x04)
	struct UCurveFloat* DecelerateCurve; // 0x680(0x08)
	float SqueezePawnRadius; // 0x688(0x04)
	float ThrustPawnStrength; // 0x68c(0x04)
	float CollideUpBoundingRatio; // 0x690(0x04)
	float CollidePushUpAngle; // 0x694(0x04)
	struct UCurveFloat* CollidePushSpeedCurve; // 0x698(0x08)
	char pad_6A0[0x38]; // 0x6a0(0x38)
	float ApplyDamageRate; // 0x6d8(0x04)
	char pad_6DC[0x4]; // 0x6dc(0x04)
	struct FSolarDamageInfo DamageInfo; // 0x6e0(0x40)
	char pad_720[0x8]; // 0x720(0x08)
	enum class EAirDropOpenState OpenState; // 0x728(0x01)
	char pad_729[0x7]; // 0x729(0x07)
	struct FString SummonPlayerID; // 0x730(0x10)
	struct TSoftObjectPtr<UParticleSystem> OpenAirdropEffect; // 0x740(0x28)
	struct TSoftObjectPtr<UParticleSystem> LandHitEffect; // 0x768(0x28)
	struct TSoftObjectPtr<UParticleSystem> LandSmokeEffect; // 0x790(0x28)
	struct TSoftObjectPtr<UParticleSystem> PendingDestroyEffect; // 0x7b8(0x28)
	struct TSoftObjectPtr<UParticleSystem> DestroyEffect; // 0x7e0(0x28)
	struct TSoftObjectPtr<UParticleSystem> FallingEffect; // 0x808(0x28)
	struct TSoftObjectPtr<UParticleSystem> FallingImpulseEffect; // 0x830(0x28)
	struct TSoftObjectPtr<UParticleSystem> LightBeamEffect; // 0x858(0x28)
	struct FTransform FallingEffectOffset; // 0x880(0x30)
	struct FTransform FallingImpulseEffectOffset; // 0x8b0(0x30)
	struct FTransform LightBeamEffectOffset; // 0x8e0(0x30)
	struct FTransform PendingDestroyEffectOffset; // 0x910(0x30)
	struct UAnimationAsset* LandAnimation; // 0x940(0x08)
	struct UAnimationAsset* OpenAnimation; // 0x948(0x08)
	float ShowLandSmokeHeight; // 0x950(0x04)
	float AirDropSpawnDelay; // 0x954(0x04)
	float FallingEffectDelay; // 0x958(0x04)
	bool bSummonBySkill; // 0x95c(0x01)
	char pad_95D[0x3]; // 0x95d(0x03)
	float YawOffset; // 0x960(0x04)
	char pad_964[0x4]; // 0x964(0x04)
	struct USkeletalMeshComponent* SkeletalMeshComp; // 0x968(0x08)
	char pad_970[0x8]; // 0x970(0x08)
	struct UParticleSystemComponent* LandSmokePSC; // 0x978(0x08)
	struct UParticleSystemComponent* PendingDestroyPSC; // 0x980(0x08)
	struct UParticleSystemComponent* FallingPSC; // 0x988(0x08)
	struct UParticleSystemComponent* FallingImpulsePSC; // 0x990(0x08)
	struct UParticleSystemComponent* LightBeamPSC; // 0x998(0x08)
	char pad_9A0[0x8]; // 0x9a0(0x08)
	struct FSoftClassPath AirDropGuideMeshBPClassPath; // 0x9a8(0x18)
	float GuideArrowDisappearHeight; // 0x9c0(0x04)
	char pad_9C4[0x4]; // 0x9c4(0x04)
	struct FString SNameAirDropOpen; // 0x9c8(0x10)
	struct FString SNameLandHit; // 0x9d8(0x10)
	struct FString SNameAirDropSpawn; // 0x9e8(0x10)
	struct FString SNameStartDrop; // 0x9f8(0x10)
	struct FString SNameStopDrop; // 0xa08(0x10)
	struct FString SNameDecelerateAudio; // 0xa18(0x10)
	struct FString SNamePlayLandedLoopAudio; // 0xa28(0x10)
	struct FString SNameStopLandedLoopAudio; // 0xa38(0x10)
	struct FString SNamePlayOnGroundBroadcastLoopAudio; // 0xa48(0x10)
	struct FString SNameStopOnGroundBroadcastLoopAudio; // 0xa58(0x10)
	struct FString SNamePlayStartHackAudio; // 0xa68(0x10)
	struct FString SNameStopStartHackAudio; // 0xa78(0x10)
	struct FString SNamePlayHackingLoopAudio; // 0xa88(0x10)
	struct FString SNameStopHackingLoopAudio; // 0xa98(0x10)
	struct FString SNameStopHackingLoopAudioAux; // 0xaa8(0x10)
	struct FString PendingDestroyLoopStart; // 0xab8(0x10)
	struct FString PendingDestroyLoopEnd; // 0xac8(0x10)
	struct FString SNameDestroySound; // 0xad8(0x10)
	char pad_AE8[0x68]; // 0xae8(0x68)
	struct FName ColorKeyTag1; // 0xb50(0x08)
	struct FName ColorKeyTag2; // 0xb58(0x08)
	struct FName ColorKeyGlow; // 0xb60(0x08)
	struct FName ColorKeyMesh; // 0xb68(0x08)
	struct FName AlphaKey; // 0xb70(0x08)
	struct FName LightBeamAlphaKey; // 0xb78(0x08)
	struct FName ColorKeyTagFlow1; // 0xb80(0x08)
	struct FName ColorKeyTagFlow2; // 0xb88(0x08)
	struct FName ColorKeyLightEffect; // 0xb90(0x08)
	float FadeTweenDuration; // 0xb98(0x04)
	float RedTweenDuration; // 0xb9c(0x04)
	struct FLinearColor BlueColorTag1; // 0xba0(0x10)
	struct FLinearColor RedColorTag1; // 0xbb0(0x10)
	struct FLinearColor BlueColorTag2; // 0xbc0(0x10)
	struct FLinearColor RedColorTag2; // 0xbd0(0x10)
	struct FLinearColor BlueColorGlow; // 0xbe0(0x10)
	struct FLinearColor RedColorGlow; // 0xbf0(0x10)
	struct FLinearColor BlueColorMesh; // 0xc00(0x10)
	struct FLinearColor RedColorMesh; // 0xc10(0x10)
	struct FLinearColor RedColorTagFlow1; // 0xc20(0x10)
	struct FLinearColor RedColorTagFlow2; // 0xc30(0x10)
	struct FLinearColor BlueColorTagFlow1; // 0xc40(0x10)
	struct FLinearColor BlueColorTagFlow2; // 0xc50(0x10)
	struct FLinearColor RedColorLightEffect; // 0xc60(0x10)
	struct FLinearColor BlueColorLightEffect; // 0xc70(0x10)
	char pad_C80[0x10]; // 0xc80(0x10)

	void ReceiveOnOpenStateChanged(enum class EAirDropOpenState InPrevOpenState, enum class EAirDropOpenState InCurrOpenState); // Function Solarland.AirDropTreasureBox.ReceiveOnOpenStateChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void PlayLandingAnimation(); // Function Solarland.AirDropTreasureBox.PlayLandingAnimation // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	bool OpenAirDropTreasureBox(struct ASolarCharacter* _OpeningCharacter); // Function Solarland.AirDropTreasureBox.OpenAirDropTreasureBox // (Final|Native|Public) // @ game+0x2650220
	void OnStateChanged(); // Function Solarland.AirDropTreasureBox.OnStateChanged // (Native|Public) // @ game+0x7cf0d0
	void OnRep_TargetLocation(struct FVector PreTargetLocation); // Function Solarland.AirDropTreasureBox.OnRep_TargetLocation // (Final|Native|Private|HasDefaults) // @ game+0x2650190
	void OnRep_SummonPlayerID(); // Function Solarland.AirDropTreasureBox.OnRep_SummonPlayerID // (Final|Native|Private) // @ game+0x2650170
	void OnRep_SummonCharLocation(); // Function Solarland.AirDropTreasureBox.OnRep_SummonCharLocation // (Final|Native|Private) // @ game+0x9043b0
	void OnRep_StartDropHeight(); // Function Solarland.AirDropTreasureBox.OnRep_StartDropHeight // (Final|Native|Private) // @ game+0x2650150
	void OnRep_RecordDropTime(float PreDropTime); // Function Solarland.AirDropTreasureBox.OnRep_RecordDropTime // (Final|Native|Private) // @ game+0x26500d0
	void OnRep_PendingDestroy(); // Function Solarland.AirDropTreasureBox.OnRep_PendingDestroy // (Final|Native|Public) // @ game+0x26500b0
	void OnRep_OpenState(enum class EAirDropOpenState PreOpenState); // Function Solarland.AirDropTreasureBox.OnRep_OpenState // (Final|Native|Private) // @ game+0x2650030
	void OnRep_OpenProgressChange(); // Function Solarland.AirDropTreasureBox.OnRep_OpenProgressChange // (Final|Native|Private) // @ game+0x2650010
	void OnRep_OpenCharacterChange(); // Function Solarland.AirDropTreasureBox.OnRep_OpenCharacterChange // (Final|Native|Private) // @ game+0x264fff0
	void OnRep_MovementState(enum class EAirDropMovementState PreMovementState); // Function Solarland.AirDropTreasureBox.OnRep_MovementState // (Final|Native|Private) // @ game+0x264ff70
	void OnMovementStateChanged(enum class EAirDropMovementState InPrevMovementState, enum class EAirDropMovementState InCurrMovementState); // Function Solarland.AirDropTreasureBox.OnMovementStateChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnFadeOutFallingEffect(); // Function Solarland.AirDropTreasureBox.OnFadeOutFallingEffect // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	bool IsSummonedByCharacter(); // Function Solarland.AirDropTreasureBox.IsSummonedByCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x264fbb0
	bool IsOpenningCharacterOffline(); // Function Solarland.AirDropTreasureBox.IsOpenningCharacterOffline // (Final|Native|Protected) // @ game+0x264fb80
	bool IsCharacterInRange(struct ASolarCharacter* InCheckCharacter); // Function Solarland.AirDropTreasureBox.IsCharacterInRange // (Final|Native|Protected) // @ game+0x264fae0
	bool CancelOpenAirDropTreasureBox(struct ASolarCharacter* _OpeningCharacter); // Function Solarland.AirDropTreasureBox.CancelOpenAirDropTreasureBox // (Final|Native|Public) // @ game+0x264f5c0
};

// Class Solarland.AirlineCruiseCompInterface
// Size: 0x28 (Inherited: 0x28)
struct UAirlineCruiseCompInterface : UInterface {

	struct UAirlineCruiseComponent* GetAirlineCruiseComponent(); // Function Solarland.AirlineCruiseCompInterface.GetAirlineCruiseComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x26525f0
};

// Class Solarland.GameModeCompBase
// Size: 0xd0 (Inherited: 0xb0)
struct UGameModeCompBase : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	bool bPreStartPlay; // 0xb8(0x01)
	bool bTakeChargeStartPlay; // 0xb9(0x01)
	bool bPostStartPlay; // 0xba(0x01)
	char pad_BB[0x2]; // 0xbb(0x02)
	bool bPreHandleMatchHasStarted; // 0xbd(0x01)
	bool bTakeChargeHandleMatchHasStarted; // 0xbe(0x01)
	bool bPostHandleMatchHasStarted; // 0xbf(0x01)
	char pad_C0[0x2]; // 0xc0(0x02)
	bool bPreRestartPlayer; // 0xc2(0x01)
	bool bTakeChargeRestartPlayer; // 0xc3(0x01)
	bool bPostRestartPlayer; // 0xc4(0x01)
	char pad_C5[0x2]; // 0xc5(0x02)
	bool bPreEndPlay; // 0xc7(0x01)
	bool bTakeChargeEndPlay; // 0xc8(0x01)
	bool bPostEndPlay; // 0xc9(0x01)
	char pad_CA[0x6]; // 0xca(0x06)

	void PreStartPlayBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PreStartPlayBind // (Final|Native|Protected|HasOutParms) // @ game+0x26afd10
	void PreRestartPlayerBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.PreRestartPlayerBind // (Final|Native|Protected|HasOutParms) // @ game+0x26afc10
	void PreHandleMatchHasStartedBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PreHandleMatchHasStartedBind // (Final|Native|Protected|HasOutParms) // @ game+0x26afb60
	void PreGameModeStartPlay(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PreGameModeStartPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x26afab0
	void PreGameModeRestartPlayer(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.PreGameModeRestartPlayer // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x26af9b0
	void PreGameModeHandleMatchHasStarted(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PreGameModeHandleMatchHasStarted // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x26af900
	void PreGameModeEndPlay(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.PreGameModeEndPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x26af800
	void PreEndPlayBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.PreEndPlayBind // (Final|Native|Protected|HasOutParms) // @ game+0x26af700
	void PostStartPlayBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PostStartPlayBind // (Final|Native|Protected|HasOutParms) // @ game+0x26af650
	void PostRestartPlayerBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.PostRestartPlayerBind // (Final|Native|Protected|HasOutParms) // @ game+0x26af550
	void PostHandleMatchHasStartedBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PostHandleMatchHasStartedBind // (Final|Native|Protected|HasOutParms) // @ game+0x26af4a0
	void PostGameModeStartPlay(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PostGameModeStartPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x26af3f0
	void PostGameModeRestartPlayer(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.PostGameModeRestartPlayer // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x26af2f0
	void PostGameModeHandleMatchHasStarted(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PostGameModeHandleMatchHasStarted // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x26af240
	void PostGameModeEndPlay(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.PostGameModeEndPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x26af140
	void PostEndPlayBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.PostEndPlayBind // (Final|Native|Protected|HasOutParms) // @ game+0x26af040
	void OnGameModeStartPlay(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.OnGameModeStartPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x26aed10
	void OnGameModeRestartPlayer(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.OnGameModeRestartPlayer // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x26aebc0
	void OnGameModeHandleMatchHasStarted(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.OnGameModeHandleMatchHasStarted // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x26aeab0
	void OnGameModeEndPlay(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.OnGameModeEndPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x26ae960
	struct ASolarGameMode* GetGameModeOwner(); // Function Solarland.GameModeCompBase.GetGameModeOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26ae600
};

// Class Solarland.AirlineCruiseComponent
// Size: 0x148 (Inherited: 0xd0)
struct UAirlineCruiseComponent : UGameModeCompBase {
	int32_t UsedAirlineID; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
	struct ASolarCapsuleRoot* CapsuleRootClass; // 0xd8(0x08)
	struct ASolarCapsuleRoot* CapsuleRoot; // 0xe0(0x08)
	struct TMap<int32_t, struct FAirlineData> AirlineDataList; // 0xe8(0x50)
	struct ASolarCharacter* CruiseTemplate; // 0x138(0x08)
	char pad_140[0x8]; // 0x140(0x08)

	void OnPlayerJoin(struct ASCMPlayerState* PlayerState); // Function Solarland.AirlineCruiseComponent.OnPlayerJoin // (Final|Native|Protected) // @ game+0x26538e0
	void OnCruiseCompleted(struct AActor* DestroyedRoot); // Function Solarland.AirlineCruiseComponent.OnCruiseCompleted // (Final|Native|Protected) // @ game+0x2653970
	void OnAIJoin(struct ASCMPlayerState* PlayerState); // Function Solarland.AirlineCruiseComponent.OnAIJoin // (Final|Native|Protected) // @ game+0x26538e0
	int32_t GetUsedAirlineData(struct FAirlineData& OutData); // Function Solarland.AirlineCruiseComponent.GetUsedAirlineData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2652620
};

// Class Solarland.AirPlaneVehicleDataAsset
// Size: 0x4d0 (Inherited: 0x30)
struct UAirPlaneVehicleDataAsset : UDataAsset {
	struct FRuntimeFloatCurve AdditionalLiftCurveBasedOnVelocity; // 0x30(0x88)
	struct FRuntimeFloatCurve AdditionalLiftCurveBasedOnVelocityZ; // 0xb8(0x88)
	struct FRuntimeFloatCurve AdditionalLiftCurveBasedOnPitch; // 0x140(0x88)
	struct FRuntimeFloatCurve AdditionalLiftForPitchUpFactorCurve; // 0x1c8(0x88)
	float AdditionalLiftForClampGravity; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)
	struct FRuntimeFloatCurve AdditionalLiftCurveForPitchUp; // 0x258(0x88)
	struct FRuntimeFloatCurve CruisingSpeedMultiplier; // 0x2e0(0x88)
	struct FGameplayTag RollingCostTag; // 0x368(0x08)
	float CruisingRotateAccelaration; // 0x370(0x04)
	float CruisingRotateDecelaration; // 0x374(0x04)
	float CruisingMaxAngularSpeed; // 0x378(0x04)
	float CruisingClampMaxSpeedMultiplier; // 0x37c(0x04)
	struct FGameplayTagContainer CancelCruisingTags; // 0x380(0x20)
	float RollBackEndSpeed; // 0x3a0(0x04)
	float RollBackCameraDuration; // 0x3a4(0x04)
	struct TArray<struct FVehicleVFX> ThrusterParticles; // 0x3a8(0x10)
	float ThrusterParticleWithThrottle; // 0x3b8(0x04)
	float ThrusterParticleWithoutThrottle; // 0x3bc(0x04)
	float ThrusterParticleSpeed; // 0x3c0(0x04)
	float ThrusterParticleDeactivateSpeed; // 0x3c4(0x04)
	struct TArray<struct FVehicleVFX> WingParticles; // 0x3c8(0x10)
	float WingParticleSpeed; // 0x3d8(0x04)
	float WingParticleDeactivateSpeed; // 0x3dc(0x04)
	float PreTakeOffDuration; // 0x3e0(0x04)
	float PreTakeOffHoverForceMultiplier; // 0x3e4(0x04)
	float TakingOffPitchOffset; // 0x3e8(0x04)
	char pad_3EC[0x4]; // 0x3ec(0x04)
	struct FRuntimeFloatCurve TakingOffStabilizeSpeedCurve; // 0x3f0(0x88)
	int32_t AmmoMaterialIndex; // 0x478(0x04)
	struct FName MataterialProgressParam; // 0x47c(0x08)
	struct FName MataterialColorParam; // 0x484(0x08)
	struct FLinearColor NormalColor; // 0x48c(0x10)
	struct FLinearColor ReloadingColor; // 0x49c(0x10)
	struct FFloatRange MataterialProgressRange; // 0x4ac(0x10)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct TArray<struct FVehicleVFX> BulletSocketParticles; // 0x4c0(0x10)
};

// Class Solarland.AmmoConfig
// Size: 0x750 (Inherited: 0x30)
struct UAmmoConfig : UDataAsset {
	enum class EHoldActionType HoldAction; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct FFireChargeData> FireChargeDatas; // 0x38(0x10)
	struct FString FireChargeStopSoundName; // 0x48(0x10)
	float ChargingToleranceEndTime; // 0x58(0x04)
	float ChargingWorkingEndTime; // 0x5c(0x04)
	float ChargingHoldingEndTime; // 0x60(0x04)
	float ChargingTrajectoryTime; // 0x64(0x04)
	bool bScaleHitEffectByChargingTime; // 0x68(0x01)
	bool bCostToChargeScale; // 0x69(0x01)
	char pad_6A[0x2]; // 0x6a(0x02)
	int32_t FireCostFullShot; // 0x6c(0x04)
	bool bForceFullShot; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	float MaxChargingDamageScale; // 0x74(0x04)
	float DeltaAngle; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FString Name; // 0x80(0x10)
	struct FString Des; // 0x90(0x10)
	int32_t PropID; // 0xa0(0x04)
	float LifeTime; // 0xa4(0x04)
	enum class EFireMethodType FireMethodType; // 0xa8(0x01)
	enum class ETrajectoryType TrajectoryType; // 0xa9(0x01)
	char pad_AA[0x2]; // 0xaa(0x02)
	float CustomValue; // 0xac(0x04)
	struct ASolarBullet* BulletClass; // 0xb0(0x08)
	struct FSoftClassPath BulletClassPath; // 0xb8(0x18)
	enum class ETriggerType TriggerType; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	float MaxRange; // 0xd4(0x04)
	float EffRange; // 0xd8(0x04)
	float Radius; // 0xdc(0x04)
	float InitSpeed; // 0xe0(0x04)
	enum class ECostFireType FireCostType; // 0xe4(0x01)
	char pad_E5[0x3]; // 0xe5(0x03)
	int32_t FireCostPerAttack; // 0xe8(0x04)
	int32_t FireSpeedChangeTime; // 0xec(0x04)
	float FireSpeedChangeCOP; // 0xf0(0x04)
	float FastestFireInterval; // 0xf4(0x04)
	float SlowestFireInterval; // 0xf8(0x04)
	float BaseFireInterval; // 0xfc(0x04)
	float FireIntervalRevertPreTime; // 0x100(0x04)
	float FireIntervalReavertSpeed; // 0x104(0x04)
	float BoltActionTime; // 0x108(0x04)
	float StartBoltDuration; // 0x10c(0x04)
	float FirePrepareTime; // 0x110(0x04)
	float FireStateBreakTime; // 0x114(0x04)
	float FireStreakBreakTime; // 0x118(0x04)
	float BaseReloadTime; // 0x11c(0x04)
	float ReloadBoltTime; // 0x120(0x04)
	float PostFireOverload; // 0x124(0x04)
	bool bPlayHitSound; // 0x128(0x01)
	bool bPlayExplodeSound; // 0x129(0x01)
	char pad_12A[0x2]; // 0x12a(0x02)
	float FlySoundReceiveRadius; // 0x12c(0x04)
	float FlySoundIgnoreDistance; // 0x130(0x04)
	int32_t SingleSoundCount; // 0x134(0x04)
	struct FString Play_Land_Common_Hit_1P; // 0x138(0x10)
	struct FString Play_Land_Common_Hit_3P; // 0x148(0x10)
	struct FString Play_Land_Common_Hit_3P_Enemy; // 0x158(0x10)
	struct FString Play_Land_Fly_Once_3P; // 0x168(0x10)
	struct FString Play_Land_Fly_Once_3P_Enemy; // 0x178(0x10)
	struct FString Play_Land_Fly_Loop_1P; // 0x188(0x10)
	struct FString Play_Land_Fly_Loop_3P; // 0x198(0x10)
	struct FString Play_Land_Fly_Loop_3P_Enemy; // 0x1a8(0x10)
	struct FString Stop_Land_Fly_Loop_1P; // 0x1b8(0x10)
	struct FString Stop_Land_Fly_Loop_3P; // 0x1c8(0x10)
	struct FString Stop_Land_Fly_Loop_3P_Enemy; // 0x1d8(0x10)
	struct FString Play_Fire_Empty_1p; // 0x1e8(0x10)
	struct FString Play_Fire_Empty_3p; // 0x1f8(0x10)
	struct FString Play_Fire_Empty_3p_Enemy; // 0x208(0x10)
	struct UCurveFloat* PostFireSpreadCurveStruct; // 0x218(0x08)
	float VhADSSpreadCOP; // 0x220(0x04)
	float ADSSpreadCOP; // 0x224(0x04)
	float SpreadFirePreTime; // 0x228(0x04)
	float SpreadPostFireSpeed; // 0x22c(0x04)
	float SpreadRestorePreTime; // 0x230(0x04)
	float SpreadRestoreSpeed; // 0x234(0x04)
	struct FWeaponFireTPPAnimConfig TPPRecoilConfig; // 0x238(0x28)
	struct FWeaponFireFPPAnimConfig FPPRecoilConfigNoScope; // 0x260(0x70)
	struct FWeaponFireFPPAnimConfig FPPRecoilConfigWithScope; // 0x2d0(0x70)
	struct FAmmonVerticalRecoilStruct PitchRecoilStruct; // 0x340(0x30)
	struct FAmmonHorizontalRecoilStruct YawRecoilStruct; // 0x370(0x30)
	struct FAmmonRecoilRollStruct RollRecoilStruct; // 0x3a0(0x40)
	struct FAmmonRecoilScope ScopeRecoil; // 0x3e0(0xb8)
	float ADSRecoilCOP; // 0x498(0x04)
	char pad_49C[0x4]; // 0x49c(0x04)
	struct TMap<struct FString, float> RecoilCOPMap; // 0x4a0(0x50)
	struct TArray<enum class EPhysicalSurface> IgnoreEPhysicalSurface; // 0x4f0(0x10)
	float ProjectileMaxGravity; // 0x500(0x04)
	float ParticleStartDistance; // 0x504(0x04)
	float TrajectoryStartDistance; // 0x508(0x04)
	bool bPenetrable; // 0x50c(0x01)
	bool bTakeDamageAfterDeathVerge; // 0x50d(0x01)
	char pad_50E[0x2]; // 0x50e(0x02)
	struct UCurveFloat* PenetrationDamageMultiplierCurve; // 0x510(0x08)
	struct UCurveFloat* CylinderDamageMultiplierCurve; // 0x518(0x08)
	struct FSlateBrush TriggerIcon; // 0x520(0xe0)
	enum class EVirtualBulletType VirtualBulletType; // 0x600(0x01)
	bool bStepOnServer; // 0x601(0x01)
	bool bUseSubStepping; // 0x602(0x01)
	char pad_603[0x1]; // 0x603(0x01)
	float MaxSimulationTimeStep; // 0x604(0x04)
	int32_t MaxSimulationIterations; // 0x608(0x04)
	char pad_60C[0x4]; // 0x60c(0x04)
	struct UAmmoConfig* TraceOverrideAmmo; // 0x610(0x08)
	char TraceTargetFlag; // 0x618(0x01)
	char pad_619[0x7]; // 0x619(0x07)
	struct FTracerBulletData TracerData; // 0x620(0x40)
	struct UCurveFloat* BulletOffsetCurve; // 0x660(0x08)
	struct TArray<struct FVector2D> BulletOffsetAngles; // 0x668(0x10)
	struct UCurveFloat* BulletDamageCurve; // 0x678(0x08)
	struct UCurveFloat* BulletScaleCurve; // 0x680(0x08)
	struct UCurveFloat* BulletMovementCurve; // 0x688(0x08)
	bool bThirdPesonViewXScaledByDistance; // 0x690(0x01)
	bool bForceApplyAbility; // 0x691(0x01)
	char pad_692[0x6]; // 0x692(0x06)
	struct TArray<struct ASolarAbility*> AmmoAbilityClasses; // 0x698(0x10)
	struct TArray<struct ASolarAbility*> AmmoAbilityClassesOnDestroyed; // 0x6a8(0x10)
	struct ASolarAbility* AmmoAbilityClassesOnSelf; // 0x6b8(0x08)
	int32_t NameLocalTextIDNumber; // 0x6c0(0x04)
	int32_t DescriptionLocalTextIDNumber; // 0x6c4(0x04)
	int32_t RangeLocalTextID; // 0x6c8(0x04)
	int32_t DifficultyLocalTextID; // 0x6cc(0x04)
	struct FSolarDamageInfo DamageInfo; // 0x6d0(0x40)
	struct FSolarDamageInfo DestroyDamageInfo; // 0x710(0x40)

	void InitVerticalRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax); // Function Solarland.AmmoConfig.InitVerticalRecoilStruct // (Final|Native|Public|Const) // @ game+0x26536c0
	void InitSpreadData(float adscop, float vhadscop, float firepre, float changespeed, float restorepre, float restorespeed); // Function Solarland.AmmoConfig.InitSpreadData // (Final|Native|Public|Const) // @ game+0x26534c0
	void InitScopeRollRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax, float adscop); // Function Solarland.AmmoConfig.InitScopeRollRecoilStruct // (Final|Native|Public|Const) // @ game+0x2653260
	void InitScopeAndCrossHairVibration(float ScopeVMaxDistanceOffSet, float ScopeVVibrationDuration, float ScopeHMaxDistanceOffSet, float ScopeHVibrationDuration, float ScopeVContinuousFallingDuration, float ScopeVContinuousFallingPointIndex, float VMaxDistanceOffSetScale, float VVibrationDurationScale, float VSingleOffSetScale, float VContinuousOffSetScale, float HMaxDistanceOffSetScale, float HVibrationDurationScale, float HSingleOffSetScale, float HContinuousOffSetScale, float HOffSetProbabilityScale); // Function Solarland.AmmoConfig.InitScopeAndCrossHairVibration // (Final|Native|Public|Const) // @ game+0x2652dc0
	void InitRollRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax, float adscop); // Function Solarland.AmmoConfig.InitRollRecoilStruct // (Final|Native|Public|Const) // @ game+0x2652b60
	void InitRecoilCOPMap(struct TArray<struct FString>& Keys, struct TArray<float>& Values); // Function Solarland.AmmoConfig.InitRecoilCOPMap // (Final|Native|Public|HasOutParms|Const) // @ game+0x2652a20
	void InitPostFireSpreadCurveStruct(struct FString Path); // Function Solarland.AmmoConfig.InitPostFireSpreadCurveStruct // (Final|Native|Public|Const) // @ game+0x2652980
	void InitHorizontalRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax); // Function Solarland.AmmoConfig.InitHorizontalRecoilStruct // (Final|Native|Public|Const) // @ game+0x2652760
	void InitBaseData(int32_t Trigger); // Function Solarland.AmmoConfig.InitBaseData // (Final|Native|Public|Const) // @ game+0x26526d0
};

// Class Solarland.AmmoCanisterConfig
// Size: 0x760 (Inherited: 0x750)
struct UAmmoCanisterConfig : UAmmoConfig {
	int32_t ShrapnelSum; // 0x750(0x04)
	int32_t MaxShrapnelEffectSum; // 0x754(0x04)
	char pad_758[0x8]; // 0x758(0x08)
};

// Class Solarland.AmmoGravityLineConfig
// Size: 0x750 (Inherited: 0x750)
struct UAmmoGravityLineConfig : UAmmoConfig {
};

// Class Solarland.AndroidInputManager
// Size: 0x38 (Inherited: 0x28)
struct UAndroidInputManager : UObject {
	struct FMulticastInlineDelegate OnAndroidBackPressed; // 0x28(0x10)
};

// Class Solarland.AnimNotify_ChangeWeaponAttachState
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_ChangeWeaponAttachState : UAnimNotify {
	enum class EWeaponSlotType EWeaponSlot; // 0x38(0x01)
	enum class EWeaponAttachState AttachState; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
};

// Class Solarland.AnimNotify_CharacterFootEffect
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_CharacterFootEffect : UAnimNotify {
	struct TArray<struct FFootEffect> FootEffectList; // 0x38(0x10)

	void AddNewFootEffect(struct FFootEffect& NewEffect); // Function Solarland.AnimNotify_CharacterFootEffect.AddNewFootEffect // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2659400
};

// Class Solarland.AnimNotify_CharacterPlaySoundGroup
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_CharacterPlaySoundGroup : UAnimNotify {
	struct FName SoundGroupName; // 0x38(0x08)
};

// Class Solarland.AnimNotify_CharacterPlaySoundGroups
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_CharacterPlaySoundGroups : UAnimNotify {
	struct TArray<struct FName> SoundGroupNames; // 0x38(0x10)
};

// Class Solarland.SolarAnimNotify
// Size: 0x40 (Inherited: 0x38)
struct USolarAnimNotify : UAnimNotify {
	bool bDynamic; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Solarland.AnimNotify_CharacterStartSound
// Size: 0x80 (Inherited: 0x40)
struct UAnimNotify_CharacterStartSound : USolarAnimNotify {
	struct TArray<struct FCharacterSound> SoundList; // 0x40(0x10)
	bool bUseSwitch; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct TArray<struct FString> SwitchGroupNames; // 0x58(0x10)
	bool bUseRTPC; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct TArray<struct FString> RPTCNames; // 0x70(0x10)

	int32_t RemoveAllSwitches(); // Function Solarland.AnimNotify_CharacterStartSound.RemoveAllSwitches // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x2659c80
	int32_t RemoveAllRPTCs(); // Function Solarland.AnimNotify_CharacterStartSound.RemoveAllRPTCs // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x2659c50
	int32_t RemoveAllCharacterSounds(); // Function Solarland.AnimNotify_CharacterStartSound.RemoveAllCharacterSounds // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x2659c20
	void AddNewSwitch(struct FString NewSwitch); // Function Solarland.AnimNotify_CharacterStartSound.AddNewSwitch // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x2659560
	void AddNewRPTC(struct FString NewRTPC); // Function Solarland.AnimNotify_CharacterStartSound.AddNewRPTC // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x26594c0
	void AddNewCharacterSound(struct FCharacterSound& NewSound); // Function Solarland.AnimNotify_CharacterStartSound.AddNewCharacterSound // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2659260
};

// Class Solarland.AnimNotify_CharacterStopSound
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_CharacterStopSound : UAnimNotify {
	struct TArray<struct FCharacterSound> StopList; // 0x38(0x10)

	int32_t RemoveAllCharacterSoundStops(); // Function Solarland.AnimNotify_CharacterStopSound.RemoveAllCharacterSoundStops // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x2659bf0
	void AddNewCharacterSoundStop(struct FCharacterSound& NewStop); // Function Solarland.AnimNotify_CharacterStopSound.AddNewCharacterSoundStop // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2659330
};

// Class Solarland.AnimNotify_ExecuteGameplayCueLocal
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_ExecuteGameplayCueLocal : UAnimNotify {
	struct FGameplayCueTag GameplayCueTag; // 0x38(0x08)
};

// Class Solarland.AnimNotify_FlyWaterEffect
// Size: 0x88 (Inherited: 0x38)
struct UAnimNotify_FlyWaterEffect : UAnimNotify {
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct TSoftObjectPtr<UParticleSystem> PSTemplateSoft; // 0x40(0x28)
	struct FName SocketName; // 0x68(0x08)
	struct FVector LocationOffset; // 0x70(0x0c)
	struct FRotator RotationOffset; // 0x7c(0x0c)
};

// Class Solarland.AnimNotify_LegVehicleRiseDust
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_LegVehicleRiseDust : UAnimNotify {
	struct TArray<int32_t> NotifyFootIndex; // 0x38(0x10)
};

// Class Solarland.AnimNotify_PlayParticleAsync
// Size: 0x120 (Inherited: 0x38)
struct UAnimNotify_PlayParticleAsync : UAnimNotify {
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct TSoftObjectPtr<UParticleSystem> PSTemplateSoft; // 0x40(0x28)
	struct FSolarSkinnedParticleSystem SkinnedPSTemplate; // 0x68(0x70)
	struct FVector LocationOffset; // 0xd8(0x0c)
	struct FRotator RotationOffset; // 0xe4(0x0c)
	struct FVector Scale; // 0xf0(0x0c)
	char pad_FC[0x14]; // 0xfc(0x14)
	char Attached : 1; // 0x110(0x01)
	char pad_110_1 : 7; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	struct FName SocketName; // 0x114(0x08)
	char pad_11C[0x4]; // 0x11c(0x04)
};

// Class Solarland.AnimNotify_PlayPickupSound
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_PlayPickupSound : UAnimNotify {
	struct FString DefaultSoundEventName; // 0x38(0x10)

	struct FString GetDefaultSoundEventName(); // Function Solarland.AnimNotify_PlayPickupSound.GetDefaultSoundEventName // (Final|Native|Public|Const) // @ game+0x26596d0
};

// Class Solarland.AnimNotify_ReloadClip
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_ReloadClip : UAnimNotify {
	enum class EAnimReloadNotifyType StepType; // 0x38(0x01)
	enum class EClipAttachType ClipAttachType; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
};

// Class Solarland.AnimNotify_ServerRefreshBones
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ServerRefreshBones : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldEndRecharge
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldEndRecharge : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldHideRechargeFX
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldHideRechargeFX : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldOperatorSet
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldOperatorSet : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldShowRechargeFX
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldShowRechargeFX : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldStartRecharge
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldStartRecharge : UAnimNotify {
};

// Class Solarland.AnimNotify_ThrowThrown
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ThrowThrown : UAnimNotify {
};

// Class Solarland.AnimNotify_VehicleCameraShake
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_VehicleCameraShake : UAnimNotify {
	struct UCameraShake* VehicleCameraShake; // 0x38(0x08)
};

// Class Solarland.AnimNotify_VehiclePlaySound
// Size: 0x60 (Inherited: 0x38)
struct UAnimNotify_VehiclePlaySound : UAnimNotify {
	bool bCheckEnemy; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FString SameTeamSound; // 0x40(0x10)
	struct FString EnemySound; // 0x50(0x10)
};

// Class Solarland.AnimNotify_VehiclePreviewSound
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_VehiclePreviewSound : UAnimNotify {
	struct FString Sound; // 0x38(0x10)
};

// Class Solarland.AnimNotify_VehicleVFX
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_VehicleVFX : UAnimNotify {
	struct TArray<struct FVehicleVFX> VehicleVFXes; // 0x38(0x10)
};

// Class Solarland.AnimNotify_WeaponBolt
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_WeaponBolt : UAnimNotify {
};

// Class Solarland.AnimNotify_WeaponPlaySoundGroup
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_WeaponPlaySoundGroup : UAnimNotify {
	bool bLastWeapon; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FName SoundGroupName; // 0x3c(0x08)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Solarland.AnimNotifyState_AddLooseGameplayTag
// Size: 0x50 (Inherited: 0x30)
struct UAnimNotifyState_AddLooseGameplayTag : UAnimNotifyState {
	struct FGameplayTagContainer GameplayTags; // 0x30(0x20)
};

// Class Solarland.AnimNotifyState_AllowPhysicsRotationDuringAnimRootMotion
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_AllowPhysicsRotationDuringAnimRootMotion : UAnimNotifyState {
};

// Class Solarland.AnimNotifyState_AutoCancelOnInputReleased
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_AutoCancelOnInputReleased : UAnimNotifyState {
};

// Class Solarland.SolarAnimNotifyState
// Size: 0x38 (Inherited: 0x30)
struct USolarAnimNotifyState : UAnimNotifyState {
	bool bDynamic; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Solarland.AnimNotifyState_CharacterLoopedSound
// Size: 0x58 (Inherited: 0x38)
struct UAnimNotifyState_CharacterLoopedSound : USolarAnimNotifyState {
	struct TArray<struct FCharacterSound> EventListToPlay; // 0x38(0x10)
	struct TArray<struct FCharacterSound> EventListToStop; // 0x48(0x10)
};

// Class Solarland.AnimNotifyState_HideCharacterMesh
// Size: 0x48 (Inherited: 0x30)
struct UAnimNotifyState_HideCharacterMesh : UAnimNotifyState {
	struct FGameplayTag VisibilityTag; // 0x30(0x08)
	bool bPropagateToChildren; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct USceneComponent* ChildrenExceptClass; // 0x40(0x08)
};

// Class Solarland.AnimNotifyState_InhibitAimOffset
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_InhibitAimOffset : UAnimNotifyState {
	float InhibitSmoothTime; // 0x30(0x04)
	float RecoverSmoothTime; // 0x34(0x04)
	bool bCalcRecoverSmoothTimeByRemainingTime; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Solarland.AnimNotifyState_InhibitLeftHandWeaponAttach
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_InhibitLeftHandWeaponAttach : UAnimNotifyState {
	float InhibitSmoothTime; // 0x30(0x04)
	float RecoverSmoothTime; // 0x34(0x04)
	bool bCalcRecoverSmoothTimeByRemainingTime; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Solarland.AnimNotifyState_OpenTreasureBox
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_OpenTreasureBox : UAnimNotifyState {
};

// Class Solarland.AnimNotifyState_OverrideHitEffectSurfaceType
// Size: 0x38 (Inherited: 0x30)
struct UAnimNotifyState_OverrideHitEffectSurfaceType : UAnimNotifyState {
	enum class EPhysicalSurface SurfaceType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Solarland.AnimNotifyState_PlayGameplayCueLocal
// Size: 0x38 (Inherited: 0x30)
struct UAnimNotifyState_PlayGameplayCueLocal : UAnimNotifyState {
	struct FGameplayCueTag GameplayCueTag; // 0x30(0x08)
};

// Class Solarland.AnimNotifyState_RechargeShield
// Size: 0x58 (Inherited: 0x30)
struct UAnimNotifyState_RechargeShield : UAnimNotifyState {
	struct FGameplayTagContainer GameplayTags; // 0x30(0x20)
	bool bFXorMesh; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Solarland.AnimNotifyState_RepairVehicleWeakPoints
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_RepairVehicleWeakPoints : UAnimNotifyState {
};

// Class Solarland.AnimNotifyState_ShieldUpgradeFX
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_ShieldUpgradeFX : UAnimNotifyState {
};

// Class Solarland.AnimNotifyState_SimulatedWeaponAttach
// Size: 0x38 (Inherited: 0x30)
struct UAnimNotifyState_SimulatedWeaponAttach : UAnimNotifyState {
	enum class EWeaponSlotType Slot; // 0x30(0x01)
	enum class EWeaponAttachState AttachState; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)
};

// Class Solarland.AnimNotifyState_SolarSpawnMeshAndAttach
// Size: 0x50 (Inherited: 0x30)
struct UAnimNotifyState_SolarSpawnMeshAndAttach : UAnimNotifyState {
	struct TArray<struct FAttachedMeshInfo> MeshesInfo; // 0x30(0x10)
	struct TArray<struct UStaticMeshComponent*> SpawnedMeshComps; // 0x40(0x10)
};

// Class Solarland.AnimNotifyState_SolarTimedParticleEffect
// Size: 0x120 (Inherited: 0x30)
struct UAnimNotifyState_SolarTimedParticleEffect : UAnimNotifyState {
	bool bAsyncLoad; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct TSoftObjectPtr<UParticleSystem> PSTemplateSoft; // 0x40(0x28)
	struct FSolarSkinnedParticleSystem SkinnedPSTemplate; // 0x68(0x70)
	bool Attached; // 0xd8(0x01)
	char pad_D9[0x3]; // 0xd9(0x03)
	struct FName SocketName; // 0xdc(0x08)
	struct FVector LocationOffset; // 0xe4(0x0c)
	struct FRotator RotationOffset; // 0xf0(0x0c)
	struct FVector Scale; // 0xfc(0x0c)
	bool bDestroyAtEnd; // 0x108(0x01)
	bool bLockRelativeRotation; // 0x109(0x01)
	char pad_10A[0x16]; // 0x10a(0x16)
};

// Class Solarland.AnimNotifyState_UpgradeShield
// Size: 0x50 (Inherited: 0x30)
struct UAnimNotifyState_UpgradeShield : UAnimNotifyState {
	struct FGameplayTagContainer GameplayTags; // 0x30(0x20)
};

// Class Solarland.SolarMeerkatScheduleComponent
// Size: 0xf8 (Inherited: 0xb0)
struct USolarMeerkatScheduleComponent : UActorComponent {
	char pad_B0[0xc]; // 0xb0(0x0c)
	struct FMeerkatConfig MeerkatData; // 0xbc(0x14)
	char pad_D0[0x28]; // 0xd0(0x28)

	void ServerReportRPC(struct FString Key, struct FString Value); // Function Solarland.SolarMeerkatScheduleComponent.ServerReportRPC // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2748890
	void ClientUpdateScheduleConfig(struct FMeerkatConfig AntiCheatConfig); // Function Solarland.SolarMeerkatScheduleComponent.ClientUpdateScheduleConfig // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2747d50
};

// Class Solarland.MeerkatSubScheduleAE
// Size: 0x120 (Inherited: 0xf8)
struct UMeerkatSubScheduleAE : USolarMeerkatScheduleComponent {
	char pad_F8[0x28]; // 0xf8(0x28)
};

// Class Solarland.MeerkatSubScheduleAR
// Size: 0x128 (Inherited: 0xf8)
struct UMeerkatSubScheduleAR : USolarMeerkatScheduleComponent {
	char pad_F8[0x30]; // 0xf8(0x30)
};

// Class Solarland.MeerkatSubScheduleCC
// Size: 0x108 (Inherited: 0xf8)
struct UMeerkatSubScheduleCC : USolarMeerkatScheduleComponent {
	char pad_F8[0x10]; // 0xf8(0x10)
};

// Class Solarland.MeerkatSubScheduleHp
// Size: 0x118 (Inherited: 0xf8)
struct UMeerkatSubScheduleHp : USolarMeerkatScheduleComponent {
	char pad_F8[0x20]; // 0xf8(0x20)

	void ClientNotifySeverHpExceptionOccur(); // Function Solarland.MeerkatSubScheduleHp.ClientNotifySeverHpExceptionOccur // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x7e1650
};

// Class Solarland.MeerkatSubScheduleMB
// Size: 0x1d0 (Inherited: 0xf8)
struct UMeerkatSubScheduleMB : USolarMeerkatScheduleComponent {
	char pad_F8[0xd8]; // 0xf8(0xd8)
};

// Class Solarland.AttributeSubExecCalc
// Size: 0x68 (Inherited: 0x40)
struct UAttributeSubExecCalc : UGameplayEffectExecutionCalculation {
	struct UAttributeSubExecProxy* CDOProxyClass; // 0x40(0x08)
	struct UAttributeSubExecProxy* CDOProxy; // 0x48(0x08)
	char pad_50[0x18]; // 0x50(0x18)
};

// Class Solarland.AttributeSubExecProxy
// Size: 0x30 (Inherited: 0x28)
struct UAttributeSubExecProxy : UObject {
	struct TWeakObjectPtr<struct UAttributeSubExecCalc> CDOOwner; // 0x28(0x08)

	void ModifyAttributeSub(struct USolarAttributeSubComponent* AttrSubComp, enum class EAttributeSubBehavior Behavior, int32_t AttributeSubID, struct FName AttrSubTag, float ModifyValue); // Function Solarland.AttributeSubExecProxy.ModifyAttributeSub // (Final|Native|Protected|BlueprintCallable) // @ game+0x2659a40
	struct FGameplayModifierEvaluatedData MakeExecProxyEvaluated(struct FGameplayAttribute InAttribute, float InMagnitud); // Function Solarland.AttributeSubExecProxy.MakeExecProxyEvaluated // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2659750
	void ExecutePureAttributeSub(struct USolarAttributeSubComponent* AttrSubComp, struct TArray<struct FAttributeSubSetting>& InAttributeSubs); // Function Solarland.AttributeSubExecProxy.ExecutePureAttributeSub // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ExecuteAttributeCalculation(struct USolarAttributeSubComponent* AttrSubComp, struct TArray<struct FAttributeSubSetting>& InAttributeSubs, struct TArray<struct FGameplayAttribute>& InAttribute, struct TArray<struct FGameplayModifierEvaluatedData>& OutModResults); // Function Solarland.AttributeSubExecProxy.ExecuteAttributeCalculation // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	struct UAttributeSubExecProxy* CreateProxy(struct UAttributeSubExecCalc* InCDOOwner, struct UAttributeSubExecProxy* ProxyClass); // Function Solarland.AttributeSubExecProxy.CreateProxy // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2659600
};

// Class Solarland.AttributeSubGameplayEffect
// Size: 0x868 (Inherited: 0x848)
struct UAttributeSubGameplayEffect : UGameplayEffect {
	struct TArray<struct FAttributeSubSetting> AttributeSubMods; // 0x848(0x10)
	struct TArray<struct FAttributeSubSetting> PureAttributeSubs; // 0x858(0x10)

	void UpdateAttributeBySub(struct FGameplayAttribute Attribute); // Function Solarland.AttributeSubGameplayEffect.UpdateAttributeBySub // (Final|Native|Public|BlueprintCallable) // @ game+0x265e120
	struct UAttributeSubGameplayEffect* CreateAttributeSubEffectInstance(struct UObject* Outer, struct UAttributeSubExecCalc* AttributeSubCalcClass, struct UAttributeSubGameplayEffect* Class); // Function Solarland.AttributeSubGameplayEffect.CreateAttributeSubEffectInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x265cfb0
	void CancelPureAttributeSub(int32_t AttributeSubID); // Function Solarland.AttributeSubGameplayEffect.CancelPureAttributeSub // (Final|Native|Public|BlueprintCallable) // @ game+0x265ce50
	void CancelAttributeSubModify(struct FGameplayAttribute Attribute, int32_t AttributeSubID); // Function Solarland.AttributeSubGameplayEffect.CancelAttributeSubModify // (Final|Native|Public|BlueprintCallable) // @ game+0x265cc40
	void AddPureAttributeSub(int32_t AttributeSubID, float Value); // Function Solarland.AttributeSubGameplayEffect.AddPureAttributeSub // (Final|Native|Public|BlueprintCallable) // @ game+0x265cb70
	void AddAttributeSubModify(struct FGameplayAttribute Attribute, int32_t AttributeSubID, float Value); // Function Solarland.AttributeSubGameplayEffect.AddAttributeSubModify // (Final|Native|Public|BlueprintCallable) // @ game+0x265c900
};

// Class Solarland.AttributeSubInterface
// Size: 0x28 (Inherited: 0x28)
struct UAttributeSubInterface : UInterface {

	struct USolarAttributeSubComponent* GetAttributeSubComponent(); // Function Solarland.AttributeSubInterface.GetAttributeSubComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x26525f0
};

// Class Solarland.VertAnimMeshComponent
// Size: 0x630 (Inherited: 0x600)
struct UVertAnimMeshComponent : UStaticMeshComponent {
	char pad_600[0x30]; // 0x600(0x30)

	void PlayInfo(struct FVertexAnimInfo& InAnimInfo); // Function Solarland.VertAnimMeshComponent.PlayInfo // (Final|Native|Public|HasOutParms) // @ game+0x29d0f50
	void Play(int32_t InStartFrame, int32_t InEndFrame, float InLength, bool InLoop); // Function Solarland.VertAnimMeshComponent.Play // (Final|Native|Public) // @ game+0x29d0df0
};

// Class Solarland.BackpackVertAnimMeshComponent
// Size: 0x710 (Inherited: 0x630)
struct UBackpackVertAnimMeshComponent : UVertAnimMeshComponent {
	struct FVertexAnimInfo DefaultAnimInfo; // 0x630(0x10)
	struct TMap<enum class EBackPackAnimSubType, struct FVertexAnimInfo> BackPackAnimInfoMap; // 0x640(0x50)
	struct ASolarCharacter* SolarCharacter; // 0x690(0x08)
	struct ASolarBackpackActor* BackPackActor; // 0x698(0x08)
	char pad_6A0[0x70]; // 0x6a0(0x70)
};

// Class Solarland.SolarAttributeSet
// Size: 0x30 (Inherited: 0x30)
struct USolarAttributeSet : UAttributeSet {

	void K2_SetAttributeValue(struct FName AttributeName, float NewVal); // Function Solarland.SolarAttributeSet.K2_SetAttributeValue // (Final|Native|Protected|BlueprintCallable) // @ game+0x2748420
	void K2_OnReplicationAttribute(struct FGameplayAttributeData& OldValue, struct FGameplayAttributeData& ReplicatedAttribute, struct FName AttributeName); // Function Solarland.SolarAttributeSet.K2_OnReplicationAttribute // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x27482d0
	void K2_InitAttributeValue(struct FGameplayAttributeData& OriginAttribute, float NewVal); // Function Solarland.SolarAttributeSet.K2_InitAttributeValue // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x27481e0
	float K2_GetAttributeValue(struct FGameplayAttributeData& OriginAttribute); // Function Solarland.SolarAttributeSet.K2_GetAttributeValue // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2733060
	struct FGameplayAttribute K2_GetAttribute(struct FName AttributeName); // Function Solarland.SolarAttributeSet.K2_GetAttribute // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2748080
};

// Class Solarland.BasalAttributeSet
// Size: 0x68 (Inherited: 0x30)
struct UBasalAttributeSet : USolarAttributeSet {
	float MaxHealthCustomScale; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FGameplayAttributeData MaxHealth; // 0x38(0x10)
	struct FGameplayAttributeData CurrentHealth; // 0x48(0x10)
	struct FGameplayAttributeData LockHealth; // 0x58(0x10)

	void OnRep_MaxHealth(struct FGameplayAttributeData& Previous); // Function Solarland.BasalAttributeSet.OnRep_MaxHealth // (Native|Protected|HasOutParms) // @ game+0x265d9e0
	void OnRep_LockHealth(struct FGameplayAttributeData& Previous); // Function Solarland.BasalAttributeSet.OnRep_LockHealth // (Native|Protected|HasOutParms) // @ game+0x265d930
	void OnRep_CurrentHealth(struct FGameplayAttributeData& Previous); // Function Solarland.BasalAttributeSet.OnRep_CurrentHealth // (Native|Protected|HasOutParms) // @ game+0x265d880
};

// Class Solarland.BattleChat
// Size: 0x390 (Inherited: 0x260)
struct UBattleChat : UUserWidget {
	struct UGaugeImage* ChatCDMask; // 0x260(0x08)
	struct UImage* ImgBG; // 0x268(0x08)
	struct UCheckBoxGroup* CBGroupOperation; // 0x270(0x08)
	struct UScrollBox* PanelChatOptions; // 0x278(0x08)
	struct USolarCheckBox* CBoxChatSwitch; // 0x280(0x08)
	struct UWidgetAnimation* AnimChatCooldown; // 0x288(0x08)
	struct UQuickChatUnit* ChatButtonClass; // 0x290(0x08)
	char pad_298[0x8]; // 0x298(0x08)
	struct FSlateBrush SeparatorBrush; // 0x2a0(0xe0)
	char pad_380[0x10]; // 0x380(0x10)

	void SetLogDisplay(bool bDisplay); // Function Solarland.BattleChat.SetLogDisplay // (Final|Native|Protected) // @ game+0x265dec0
	void ReceiveQuickMessage(struct FString InName, struct FString InMessage1, bool bLocalPlayer, bool bSound, int32_t PosInTeam, struct FString InMessage2); // Function Solarland.BattleChat.ReceiveQuickMessage // (Final|Native|Protected) // @ game+0x265dc10
	void ReceiveQuickChatSending(); // Function Solarland.BattleChat.ReceiveQuickChatSending // (Final|Native|Protected) // @ game+0x265dbf0
	void OnGroupOperationStateChanged(struct TArray<struct UCheckBox*>& ChildChangedArray, int32_t CheckedChildIndex); // Function Solarland.BattleChat.OnGroupOperationStateChanged // (Final|Native|Protected|HasOutParms) // @ game+0x265d600
};

// Class Solarland.BattlegroundMapElementActor
// Size: 0x240 (Inherited: 0x228)
struct ABattlegroundMapElementActor : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct FBattlegroundMapElementData MapElementData; // 0x230(0x0c)
	char pad_23C[0x4]; // 0x23c(0x04)

	struct FBattlegroundMapElementData GetMapElementData(); // Function Solarland.BattlegroundMapElementActor.GetMapElementData // (Native|Public|BlueprintCallable) // @ game+0x26617e0
	enum class EFactionType GetCurrentOwnerFaction(); // Function Solarland.BattlegroundMapElementActor.GetCurrentOwnerFaction // (Native|Public|BlueprintCallable) // @ game+0x26615d0
};

// Class Solarland.BattlegroundControlPoint
// Size: 0x290 (Inherited: 0x240)
struct ABattlegroundControlPoint : ABattlegroundMapElementActor {
	struct FControlPointData ControlPointData; // 0x240(0x14)
	char pad_254[0x4]; // 0x254(0x04)
	struct UBoxComponent* BoxComp; // 0x258(0x08)
	char pad_260[0x10]; // 0x260(0x10)
	enum class EFactionType ProgressOwnerFaction; // 0x270(0x01)
	enum class EFactionType OccupiedFaction; // 0x271(0x01)
	char pad_272[0x6]; // 0x272(0x06)
	struct TArray<struct ABattlegroundPlayerState*> PlayersInside; // 0x278(0x10)
	char OccupyingProgress; // 0x288(0x01)
	enum class EProgressStatus ProgressStatus; // 0x289(0x01)
	char pad_28A[0x6]; // 0x28a(0x06)

	void OnRep_ProgressStatus(); // Function Solarland.BattlegroundControlPoint.OnRep_ProgressStatus // (Final|Native|Protected) // @ game+0x265daf0
	void OnRep_ProgressOwnerFaction(); // Function Solarland.BattlegroundControlPoint.OnRep_ProgressOwnerFaction // (Final|Native|Protected) // @ game+0x265dad0
	void OnRep_OccupyingProgress(); // Function Solarland.BattlegroundControlPoint.OnRep_OccupyingProgress // (Final|Native|Protected) // @ game+0x265dab0
	void OnRep_OccupiedFaction(); // Function Solarland.BattlegroundControlPoint.OnRep_OccupiedFaction // (Final|Native|Protected) // @ game+0x265da90
	void OnRep_CharactersInside(); // Function Solarland.BattlegroundControlPoint.OnRep_CharactersInside // (Final|Native|Protected) // @ game+0x265d860
	void K2_OnProgressStatusChanged(); // Function Solarland.BattlegroundControlPoint.K2_OnProgressStatusChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnProgressOwnerFactionChanged(); // Function Solarland.BattlegroundControlPoint.K2_OnProgressOwnerFactionChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnOccupyingProgressChanged(); // Function Solarland.BattlegroundControlPoint.K2_OnOccupyingProgressChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnOccupiedFactionChanged(); // Function Solarland.BattlegroundControlPoint.K2_OnOccupiedFactionChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnCharactersInsideChanged(); // Function Solarland.BattlegroundControlPoint.K2_OnCharactersInsideChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	bool IsPlayerInSide(struct ABattlegroundPlayerState* InPlayerState); // Function Solarland.BattlegroundControlPoint.IsPlayerInSide // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x265d4f0
	enum class EBattlegroundPlayerStartRegion GetPlayerStartRegion(struct ABattlegroundPlayerState* InPlayerState); // Function Solarland.BattlegroundControlPoint.GetPlayerStartRegion // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x265d2a0
	struct FControlPointData GetControlPointData(); // Function Solarland.BattlegroundControlPoint.GetControlPointData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x265d0b0
	void AddOccupyingPersonalScore(); // Function Solarland.BattlegroundControlPoint.AddOccupyingPersonalScore // (Final|Native|Private) // @ game+0x265cb50
};

// Class Solarland.BattlegroundDeployWidget
// Size: 0x400 (Inherited: 0x400)
struct UBattlegroundDeployWidget : USolarUserWidget {
};

// Class Solarland.SolarGameMode
// Size: 0x5a8 (Inherited: 0x310)
struct ASolarGameMode : AGameMode {
	struct FMulticastInlineDelegate PreStartPlay; // 0x310(0x10)
	struct FDelegate CalledStartPlay; // 0x320(0x10)
	struct FMulticastInlineDelegate PostStartPlay; // 0x330(0x10)
	struct FMulticastInlineDelegate PreHandleMatchHasStarted; // 0x340(0x10)
	struct FDelegate CalledHandleMatchHasStarted; // 0x350(0x10)
	struct FMulticastInlineDelegate PostHandleMatchHasStarted; // 0x360(0x10)
	struct FMulticastInlineDelegate PreRestartPlayer; // 0x370(0x10)
	struct FDelegate CalledRestartPlayer; // 0x380(0x10)
	struct FMulticastInlineDelegate PostRestartPlayer; // 0x390(0x10)
	struct FMulticastInlineDelegate PreEndPlay; // 0x3a0(0x10)
	struct FDelegate CalledEndPlay; // 0x3b0(0x10)
	struct FMulticastInlineDelegate PostEndPlay; // 0x3c0(0x10)
	struct TArray<struct UGameModeCompBase*> GameModeComponents; // 0x3d0(0x10)
	char pad_3E0[0x4]; // 0x3e0(0x04)
	int32_t GamePlayMode; // 0x3e4(0x04)
	struct TArray<struct AActor*> ManagerClasses; // 0x3e8(0x10)
	struct FString CharacterClassPath; // 0x3f8(0x10)
	int32_t CharacterIdInTrainningCourse; // 0x408(0x04)
	int32_t SkinIdInTrainningCourse; // 0x40c(0x04)
	int32_t BagIdInTrainingCourse; // 0x410(0x04)
	bool bManuallyModifyCharacter; // 0x414(0x01)
	char pad_415[0x3]; // 0x415(0x03)
	int32_t SpecifiedCharacterSkinID; // 0x418(0x04)
	bool bManuallyModifyCharacterBagId; // 0x41c(0x01)
	char pad_41D[0x3]; // 0x41d(0x03)
	int32_t SpecifiedCharacterBagID; // 0x420(0x04)
	bool bManuallyModifyCharacterBagTrailId; // 0x424(0x01)
	char pad_425[0x3]; // 0x425(0x03)
	int32_t SpecifiedCharacterBagTrailID; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)
	struct FMulticastInlineDelegate OnPostSpawnDefaultSolarCharacterAtTransform; // 0x430(0x10)
	struct USolarGameModeAIComponent* AIMgrComponent; // 0x440(0x08)
	struct USolarGameModeStatisticsComponent* StatComponent; // 0x448(0x08)
	struct TArray<struct ASolarTeamInfo*> Teams; // 0x450(0x10)
	struct TArray<struct ASolarTeamInfo*> AliveTeams; // 0x460(0x10)
	struct TArray<struct ASolarPlayerState*> AlivePlayers; // 0x470(0x10)
	struct ASolarTeamInfo* TeamClass; // 0x480(0x08)
	struct UDataTable* TeamDataTable; // 0x488(0x08)
	char pad_490[0xb8]; // 0x490(0xb8)
	struct ASolarFlyTrail* FlyTrailActor; // 0x548(0x08)
	char pad_550[0x40]; // 0x550(0x40)
	struct TArray<struct FString> BannedPlayerIDList; // 0x590(0x10)
	struct USolarCharacterDataCollector* CharacterDataCollector; // 0x5a0(0x08)

	void UpdatePlayerData(int32_t CharacterSkinID, int32_t CharacterBagID, int32_t CharacterBagTrailID, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarGameMode.UpdatePlayerData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void UpdateDeserterTag(struct ASolarPlayerState* PlayerState); // Function Solarland.SolarGameMode.UpdateDeserterTag // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x27c9260
	void UpdateBotPlayerData(struct ASolarPlayerState* PlayerState); // Function Solarland.SolarGameMode.UpdateBotPlayerData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void UpdateAliveTeamsAndPlayers(); // Function Solarland.SolarGameMode.UpdateAliveTeamsAndPlayers // (Native|Public|BlueprintCallable) // @ game+0x1ae63f0
	struct FString TryKickOutOnlinePlayer(struct FString PlayerId, bool IsAllowReconnect); // Function Solarland.SolarGameMode.TryKickOutOnlinePlayer // (Final|Native|Public) // @ game+0x27c9130
	void SolarGM_SetAntiCheatData(struct FString InVariableName, float InMin, float InMax, float InThreshold, bool bInBanPlayer); // Function Solarland.SolarGameMode.SolarGM_SetAntiCheatData // (Final|Exec|Native|Protected) // @ game+0x27c8e80
	void SetGamePlayMode(int32_t InGamePlayMode); // Function Solarland.SolarGameMode.SetGamePlayMode // (Native|Public|BlueprintCallable) // @ game+0x27c8df0
	void SendHitMsgWithBool(struct ASolarCharacterBase* HitedPlayer, struct TScriptInterface<ISolarCharacterController>& PC, enum class ESolarHitType MsgType, float Damage, bool bo); // Function Solarland.SolarGameMode.SendHitMsgWithBool // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27c8c30
	void SendHitMsg(struct ASolarCharacterBase* HitedPlayer, struct TScriptInterface<ISolarCharacterController>& PC, enum class ESolarHitType MsgType, float Damage, struct FString Params); // Function Solarland.SolarGameMode.SendHitMsg // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27c8a50
	void RestartPlayerTakeChargeEvent__DelegateSignature(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // DelegateFunction Solarland.SolarGameMode.RestartPlayerTakeChargeEvent__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void RestartPlayerEvent__DelegateSignature(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // DelegateFunction Solarland.SolarGameMode.RestartPlayerEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void PresettleAll(); // Function Solarland.SolarGameMode.PresettleAll // (Native|Public|BlueprintCallable) // @ game+0x1ae5e90
	void PreAssignTeam(char DesiredTeamID, struct TArray<struct FString> Players); // Function Solarland.SolarGameMode.PreAssignTeam // (Native|Public) // @ game+0x27c8880
	void PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature(struct ASolarPlayerState* NewPlayer, struct ASolarCharacter* NewCharacter); // DelegateFunction Solarland.SolarGameMode.PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnStartBattleresponded(); // Function Solarland.SolarGameMode.OnStartBattleresponded // (Final|Native|Public) // @ game+0x27c8860
	bool OnPlayerReJoinRequest(struct FString PlayerId, struct FString& ErrorMsg); // Function Solarland.SolarGameMode.OnPlayerReJoinRequest // (Native|Public|HasOutParms) // @ game+0x27c8720
	void NotifyItemStateChanged(struct AActor* Item, int32_t State); // Function Solarland.SolarGameMode.NotifyItemStateChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void KickOutPlayerToLobby(struct FString InPlayerID); // Function Solarland.SolarGameMode.KickOutPlayerToLobby // (Final|Native|Public) // @ game+0x27c8680
	void KickOutAllPlayerToLobby(); // Function Solarland.SolarGameMode.KickOutAllPlayerToLobby // (Final|Native|Public) // @ game+0x27c8660
	bool IsCustomRoom(int32_t InRuleID); // Function Solarland.SolarGameMode.IsCustomRoom // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool IsBannedForCheating(struct FString PlayerId); // Function Solarland.SolarGameMode.IsBannedForCheating // (Final|Native|Public|Const) // @ game+0x27c85b0
	void InitCharacterClassPath(int32_t CharacterId); // Function Solarland.SolarGameMode.InitCharacterClassPath // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void GetTeams(struct TArray<struct ASolarTeamInfo*>& OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled); // Function Solarland.SolarGameMode.GetTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27c8470
	int32_t GetRandomCharacterID(); // Function Solarland.SolarGameMode.GetRandomCharacterID // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<int32_t> GetRandomAISkinIDByEliminateIDs(struct TArray<int32_t>& EliminateIDs); // Function Solarland.SolarGameMode.GetRandomAISkinIDByEliminateIDs // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<int32_t> GetRandomAISkinID(struct ASolarPlayerState* InPS, bool bOnlyLowerPos); // Function Solarland.SolarGameMode.GetRandomAISkinID // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetMatchTeammateCount(); // Function Solarland.SolarGameMode.GetMatchTeammateCount // (Final|Native|Public|BlueprintCallable) // @ game+0x27c8340
	int32_t GetGamePlayMode(); // Function Solarland.SolarGameMode.GetGamePlayMode // (Native|Public|BlueprintCallable) // @ game+0x27c8310
	struct UGameModeGlobalSetting* GetGameModeSetting(struct UObject* WorldContextObject); // Function Solarland.SolarGameMode.GetGameModeSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27c8280
	void GetEmptyTeams(struct TArray<struct ASolarTeamInfo*>& OutTeams, bool Reverse); // Function Solarland.SolarGameMode.GetEmptyTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27c8180
	void GameModeComponentTakeChargeEvent__DelegateSignature(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection); // DelegateFunction Solarland.SolarGameMode.GameModeComponentTakeChargeEvent__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void GameModeComponentEvent__DelegateSignature(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // DelegateFunction Solarland.SolarGameMode.GameModeComponentEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void EndPlayTakeChargeEvent__DelegateSignature(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // DelegateFunction Solarland.SolarGameMode.EndPlayTakeChargeEvent__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void EndPlayEvent__DelegateSignature(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // DelegateFunction Solarland.SolarGameMode.EndPlayEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void EnableActorChannelCloseDelayForCharacters(); // Function Solarland.SolarGameMode.EnableActorChannelCloseDelayForCharacters // (Final|Native|Private) // @ game+0x27c7e90
	void DisableActorChannelCloseDelayForCharacters(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarGameMode.DisableActorChannelCloseDelayForCharacters // (Final|Native|Private) // @ game+0x27c7dc0
	struct ASolarPlayerState* CreateBotAISingle(int32_t CharacterId, struct FVector& Location, struct TArray<enum class ETeamType> JoinPolicies, struct ASolarBotAIController* ControllerClass, int32_t Difficultly); // Function Solarland.SolarGameMode.CreateBotAISingle // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27c7bc0
	struct ASolarPlayerState* CreateBotAIAndJoinTeamByName(int32_t CharacterId, struct FVector& Location, struct FString TeamName, struct ASolarBotAIController* ControllerClass, int32_t Difficultly); // Function Solarland.SolarGameMode.CreateBotAIAndJoinTeamByName // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27c79e0
	struct ASolarPlayerState* CreateBotAIAndJoinTeamByID(int32_t CharacterId, struct FVector& Location, char TeamID, struct ASolarBotAIController* ControllerClass, int32_t Difficultly); // Function Solarland.SolarGameMode.CreateBotAIAndJoinTeamByID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27c7810
	struct ASolarPlayerState* CreateBotAIAndJoinTeam(int32_t CharacterId, struct FVector& Location, struct ASolarTeamInfo* TeamInfo, struct ASolarBotAIController* ControllerClass, int32_t Difficultly); // Function Solarland.SolarGameMode.CreateBotAIAndJoinTeam // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27c7640
	struct ASolarPlayerState* CreateBotAI(int32_t CharacterId, struct FVector& Location, int32_t Difficultly); // Function Solarland.SolarGameMode.CreateBotAI // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27c7510
	bool CanPlayerBattle(struct ASolarPlayerState* PlayerState); // Function Solarland.SolarGameMode.CanPlayerBattle // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x27c7470
};

// Class Solarland.SBattleGameMode
// Size: 0x5d8 (Inherited: 0x5a8)
struct ASBattleGameMode : ASolarGameMode {
	struct FMulticastInlineDelegate OnPlayerDisconnectedGame; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnPlayerReconnectedGame; // 0x5b8(0x10)
	char pad_5C8[0x8]; // 0x5c8(0x08)
	int32_t SettlementStageConfigID; // 0x5d0(0x04)
	char pad_5D4[0x4]; // 0x5d4(0x04)

	void SettlePlayerBattleData(struct ASolarPlayerState* Player); // Function Solarland.SBattleGameMode.SettlePlayerBattleData // (Native|Public|BlueprintCallable) // @ game+0x2708f90
	void ReceiveBattleSettlement(); // Function Solarland.SBattleGameMode.ReceiveBattleSettlement // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveBattleOver(); // Function Solarland.SBattleGameMode.ReceiveBattleOver // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerLeaveDSTimeOut(struct ASolarPlayerState* PlayerState); // Function Solarland.SBattleGameMode.OnPlayerLeaveDSTimeOut // (Native|Public) // @ game+0x2708a60
	bool IsAutoSettlementWhenKilled(); // Function Solarland.SBattleGameMode.IsAutoSettlementWhenKilled // (Native|Event|Public|BlueprintEvent) // @ game+0x2708780
	bool IsAllowReconnectGame(struct ASolarPlayerState* Player); // Function Solarland.SBattleGameMode.IsAllowReconnectGame // (Native|Public|BlueprintCallable) // @ game+0x27086e0
};

// Class Solarland.SCustomGameMode
// Size: 0x790 (Inherited: 0x5d8)
struct ASCustomGameMode : ASBattleGameMode {
	char pad_5D8[0x8]; // 0x5d8(0x08)
	float TimeOutSeconds; // 0x5e0(0x04)
	char pad_5E4[0xb4]; // 0x5e4(0xb4)
	struct UCGMLogicComponent* LogicComponent; // 0x698(0x08)
	struct UCGMDeathComponent* DeathComponent; // 0x6a0(0x08)
	char pad_6A8[0x10]; // 0x6a8(0x10)
	struct TArray<struct ASCMPlayerController*> WaitingPlayers; // 0x6b8(0x10)
	char pad_6C8[0x10]; // 0x6c8(0x10)
	struct FMulticastInlineDelegate OnPlayerJoin; // 0x6d8(0x10)
	struct FMulticastInlineDelegate OnAIJoin; // 0x6e8(0x10)
	struct FMulticastInlineDelegate OnPlayerOutEvent; // 0x6f8(0x10)
	struct TArray<struct AGameManagerBase*> GameManagerClasses; // 0x708(0x10)
	struct UCGMLogicComponent* LogicComponentClass; // 0x718(0x08)
	struct UCGMDeathComponent* DeathComponentClass; // 0x720(0x08)
	struct USCMPlayerRPCComponent* PlayerRPCComponentClass; // 0x728(0x08)
	char pad_730[0x60]; // 0x730(0x60)

	void TimerStartGame(); // Function Solarland.SCustomGameMode.TimerStartGame // (Final|Native|Public) // @ game+0x270efa0
	void StartBattle(); // Function Solarland.SCustomGameMode.StartBattle // (Final|Native|Public|BlueprintCallable) // @ game+0x270ef80
	void ResendResurrectCoin(struct ASolarCharacter* ResurrectCharacter, struct ASCMPlayerState* ResurrectPlayer); // Function Solarland.SCustomGameMode.ResendResurrectCoin // (Final|Native|Public|BlueprintCallable) // @ game+0x270eb40
	bool RequestAllowReconnectGame(struct ASCMPlayerState* InPC); // Function Solarland.SCustomGameMode.RequestAllowReconnectGame // (Native|Event|Public|BlueprintEvent) // @ game+0x270d6d0
	void ReceiveSpectatorJoinData(struct ASCMPlayerState* Player); // Function Solarland.SCustomGameMode.ReceiveSpectatorJoinData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveServerLevelLoaded(struct FString LevelName); // Function Solarland.SCustomGameMode.ReceiveServerLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool ReceivePlayerReJoinRequest(struct FString PlayerId, struct FString& ErrorMsg); // Function Solarland.SCustomGameMode.ReceivePlayerReJoinRequest // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x270d520
	void ReceivePlayerReJoin(struct ASCMPlayerState* NewPlayer); // Function Solarland.SCustomGameMode.ReceivePlayerReJoin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerPreLogin(struct FString PlayerId, struct ASCMPlayerState* OfflinePlayer, struct FString& ErrorMsg); // Function Solarland.SCustomGameMode.ReceivePlayerPreLogin // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerNonSpectatorJoinData(struct ASCMPlayerState* Player); // Function Solarland.SCustomGameMode.ReceivePlayerNonSpectatorJoinData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerLevelLoaded(struct ASCMPlayerController* Player, struct FString LevelName); // Function Solarland.SCustomGameMode.ReceivePlayerLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerJoinData(struct FString PlayerId); // Function Solarland.SCustomGameMode.ReceivePlayerJoinData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerJoinBattle(struct ASCMPlayerState* NewPlayer, bool IsAI); // Function Solarland.SCustomGameMode.ReceivePlayerJoinBattle // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerJoin(struct ASCMPlayerState* NewPlayer, bool IsAI); // Function Solarland.SCustomGameMode.ReceivePlayerJoin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerCheat(struct ASolarPlayerState* InCheater); // Function Solarland.SCustomGameMode.ReceivePlayerCheat // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerCancelJoin(struct FString PlayerId); // Function Solarland.SCustomGameMode.ReceivePlayerCancelJoin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerBattleEnd(struct ASCMPlayerState* Player, enum class ESCMPlayerOutType OutType); // Function Solarland.SCustomGameMode.ReceivePlayerBattleEnd // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerAbnormal(struct ASolarPlayerState* InAbnormalPlayer); // Function Solarland.SCustomGameMode.ReceivePlayerAbnormal // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveOBPlayersChanged(); // Function Solarland.SCustomGameMode.ReceiveOBPlayersChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveGameModeInit(); // Function Solarland.SCustomGameMode.ReceiveGameModeInit // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveBattleTick(float InBattleTime, float DeltaTime); // Function Solarland.SCustomGameMode.ReceiveBattleTick // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveBattleEnd(); // Function Solarland.SCustomGameMode.ReceiveBattleEnd // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveBattleBegin(); // Function Solarland.SCustomGameMode.ReceiveBattleBegin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnTeamInTournamentSettled(struct FString Side, char TeamID); // Function Solarland.SCustomGameMode.OnTeamInTournamentSettled // (Final|Native|Public) // @ game+0x270d3d0
	void OnReceivePlayerLogin(struct APlayerController* PlayerController); // Function Solarland.SCustomGameMode.OnReceivePlayerLogin // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnReceivePlayerBattleStart(struct APlayerController* PlayerController); // Function Solarland.SCustomGameMode.OnReceivePlayerBattleStart // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnReceiveBattleStart(); // Function Solarland.SCustomGameMode.OnReceiveBattleStart // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerSettled(struct ASCMPlayerState* Player); // Function Solarland.SCustomGameMode.OnPlayerSettled // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerOut__DelegateSignature(struct ASCMPlayerState* Player, enum class ESCMPlayerOutType OutType); // DelegateFunction Solarland.SCustomGameMode.OnPlayerOut__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnPlayerOfflineTimeOut(struct ASCMPlayerState* OfflineTimeoutPlayer); // Function Solarland.SCustomGameMode.OnPlayerOfflineTimeOut // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerJoin__DelegateSignature(struct ASCMPlayerState* Player); // DelegateFunction Solarland.SCustomGameMode.OnPlayerJoin__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnPlayerGiveUp(struct ASCMPlayerState* OfflineTimeoutPlayer); // Function Solarland.SCustomGameMode.OnPlayerGiveUp // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnMatchEnd(int32_t RPCID); // Function Solarland.SCustomGameMode.OnMatchEnd // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnDSClose(); // Function Solarland.SCustomGameMode.OnDSClose // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnBotAIDataReady(int32_t AICount); // Function Solarland.SCustomGameMode.OnBotAIDataReady // (Final|Native|Public) // @ game+0x270d290
	void OnAIJoin__DelegateSignature(struct ASCMPlayerState* BotAI); // DelegateFunction Solarland.SCustomGameMode.OnAIJoin__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void NotifyDSBattleOver(); // Function Solarland.SCustomGameMode.NotifyDSBattleOver // (Final|Native|Public) // @ game+0x270d1d0
	void NotifyBotAIDataReady(int32_t AICount); // Function Solarland.SCustomGameMode.NotifyBotAIDataReady // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool IsKillWhenPlayerOut(struct ASolarPlayerState* PlayerState); // Function Solarland.SCustomGameMode.IsKillWhenPlayerOut // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x270d030
	bool IsEnableLogicComp(); // Function Solarland.SCustomGameMode.IsEnableLogicComp // (Native|Public|Const) // @ game+0x270d000
	int32_t GetCurMapID(); // Function Solarland.SCustomGameMode.GetCurMapID // (Final|Native|Public) // @ game+0x270ce70
	void CreateHomeActor(struct FString Path); // Function Solarland.SCustomGameMode.CreateHomeActor // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	bool CheckLogicComponentIsA(struct TSoftClassPtr<UObject> ClassPath); // Function Solarland.SCustomGameMode.CheckLogicComponentIsA // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x270cd60
	bool ChangePlayerCharacter(struct ASCMPlayerState* Player, int32_t CharacterId, int32_t SkinId); // Function Solarland.SCustomGameMode.ChangePlayerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x270cc50
	bool ChangeBotAICharacter(struct ASolarPlayerState* Player, int32_t CharacterId, int32_t SkinId); // Function Solarland.SCustomGameMode.ChangeBotAICharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x270cb40
};

// Class Solarland.BattlegroundGameMode
// Size: 0x960 (Inherited: 0x790)
struct ABattlegroundGameMode : ASCustomGameMode {
	struct AFactionInfo* FactionClass; // 0x790(0x08)
	struct AFactionInfo* BlueFaction; // 0x798(0x08)
	struct AFactionInfo* RedFaction; // 0x7a0(0x08)
	struct TMap<enum class EFactionType, struct FText> FactionNameMap; // 0x7a8(0x50)
	int32_t MinPlayerLimit; // 0x7f8(0x04)
	int32_t MaxPlayerLimit; // 0x7fc(0x04)
	struct FBattlegroundGlobalData GlobalDataConfig; // 0x800(0x40)
	int32_t DefaultSubModeID; // 0x840(0x04)
	struct FBattlegroundSubModeData DefaultSubModeData; // 0x844(0x1c)
	struct TMap<int32_t, struct FBattlegroundSubModeData> MapDataConfig; // 0x860(0x50)
	char pad_8B0[0x8]; // 0x8b0(0x08)
	struct TArray<int32_t> BotCharacterIDs; // 0x8b8(0x10)
	int32_t BotDifficultly; // 0x8c8(0x04)
	int32_t MaxBots; // 0x8cc(0x04)
	float SpawnBotInterval; // 0x8d0(0x04)
	bool bEnableBot; // 0x8d4(0x01)
	char pad_8D5[0x3]; // 0x8d5(0x03)
	struct FTimerHandle SpawnBotsTimerHandle; // 0x8d8(0x08)
	struct TArray<struct AActor*> PreStarts; // 0x8e0(0x10)
	char pad_8F0[0x8]; // 0x8f0(0x08)
	struct FTimerHandle StartMatchTimeoutTimerHandle; // 0x8f8(0x08)
	char pad_900[0x58]; // 0x900(0x58)
	struct FTimerHandle EndMatchTimerHandle; // 0x958(0x08)

	void SpawnBotTick(); // Function Solarland.BattlegroundGameMode.SpawnBotTick // (Final|Native|Protected) // @ game+0x265e070
	void SetMinPlayerLimit(int32_t NewCount); // Function Solarland.BattlegroundGameMode.SetMinPlayerLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x265dfe0
	void SetMaxPlayerLimit(int32_t NewCount); // Function Solarland.BattlegroundGameMode.SetMaxPlayerLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x265df50
	void OnBotSpawned(struct ASolarPlayerState* Bot); // Function Solarland.BattlegroundGameMode.OnBotSpawned // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void NotifyBattleOver(); // Function Solarland.BattlegroundGameMode.NotifyBattleOver // (Final|Native|Protected) // @ game+0x265d5c0
	struct FBattlegroundSubModeData GetSubModeData(); // Function Solarland.BattlegroundGameMode.GetSubModeData // (Final|Native|Public|BlueprintCallable) // @ game+0x265d450
	bool GetPreStartTransform(struct FTransform& OutTransform); // Function Solarland.BattlegroundGameMode.GetPreStartTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x265d340
	struct FBattlegroundGlobalData GetGlobalData(); // Function Solarland.BattlegroundGameMode.GetGlobalData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x265d0e0
	struct AActor* ChooseBestPlayerStart(struct ABattlegroundPlayerState* InPlayerState, enum class EDeploymentType InType); // Function Solarland.BattlegroundGameMode.ChooseBestPlayerStart // (Final|Native|Public|BlueprintCallable) // @ game+0x265cee0
};

// Class Solarland.SolarGameState
// Size: 0x4c0 (Inherited: 0x2b8)
struct ASolarGameState : AGameState {
	char pad_2B8[0x20]; // 0x2b8(0x20)
	struct ASolarCharacter* LatestKillerCharacter; // 0x2d8(0x08)
	struct ASolarCharacter* LatestDeathCharacter; // 0x2e0(0x08)
	char pad_2E8[0x20]; // 0x2e8(0x20)
	struct TArray<struct ASolarPlayerState*> SolarPlayerStateArray; // 0x308(0x10)
	struct TArray<struct ASolarPlayerState*> RealPlayerStateArray; // 0x318(0x10)
	char bShowBattlePrompt : 1; // 0x328(0x01)
	char pad_328_1 : 7; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)
	struct TArray<int32_t> MapVehicleSpawnTypes; // 0x330(0x10)
	char pad_340[0x10]; // 0x340(0x10)
	struct TArray<struct FPrePooledBundle> PrePooledBundles; // 0x350(0x10)
	int32_t RemainingPlayersCount; // 0x360(0x04)
	int32_t AlivePlayersCount; // 0x364(0x04)
	int32_t RemainingTeamCount; // 0x368(0x04)
	int32_t PlayersCount; // 0x36c(0x04)
	char TeamCount; // 0x370(0x01)
	char pad_371[0x3]; // 0x371(0x03)
	int32_t TotalBoardingNum; // 0x374(0x04)
	int32_t CapsulePlayerNum; // 0x378(0x04)
	int32_t SettlementStageConfigID; // 0x37c(0x04)
	struct TSet<struct UObject*> LimitMaxReplicatedNumClasses; // 0x380(0x50)
	float StartTime; // 0x3d0(0x04)
	int32_t NumPlayers; // 0x3d4(0x04)
	struct TArray<struct ASolarPlayerState*> OBPlayerList; // 0x3d8(0x10)
	int32_t GameWarmID; // 0x3e8(0x04)
	int32_t TeammateNumMode; // 0x3ec(0x04)
	struct FGameStartConditionList GameStartConditions; // 0x3f0(0x58)
	struct USolarGameplayConfigComponent* GameplayConfigComponent; // 0x448(0x08)
	struct TArray<struct ASolarTeamInfo*> Teams; // 0x450(0x10)
	char NumReplicatedTeams; // 0x460(0x01)
	char pad_461[0x4f]; // 0x461(0x4f)
	struct USolarPlayerActivityHeatComponent* SolarPlayerActivityHeatComponent; // 0x4b0(0x08)
	char Countdown; // 0x4b8(0x01)
	char pad_4B9[0x3]; // 0x4b9(0x03)
	int32_t EndMatchCountdown; // 0x4bc(0x04)

	void SetTeamLastVehicleLocation(char InTeamId, struct FVector& InVehiclePosition); // Function Solarland.SolarGameState.SetTeamLastVehicleLocation // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x27dba10
	void SetSettlementStageConfigID(int32_t InConfigID); // Function Solarland.SolarGameState.SetSettlementStageConfigID // (Final|Native|Public|BlueprintCallable) // @ game+0x27db880
	void SetCustomConfigValue(enum class ECustomParamType InType, float InValue); // Function Solarland.SolarGameState.SetCustomConfigValue // (Final|Native|Public) // @ game+0x27db110
	void ServerUpdateMapVehicleSpawnTypes(struct TArray<int32_t>& InSpawnTargetVehicleTypes); // Function Solarland.SolarGameState.ServerUpdateMapVehicleSpawnTypes // (Final|Native|Public|HasOutParms) // @ game+0x27db060
	void PlayTeamVictoryVoice(); // Function Solarland.SolarGameState.PlayTeamVictoryVoice // (Final|Native|Public|BlueprintCallable) // @ game+0x27db040
	void OnSafeAreaIndexChanged(int32_t NewIndex); // Function Solarland.SolarGameState.OnSafeAreaIndexChanged // (Final|Native|Public) // @ game+0x27dafb0
	void OnRep_SettlementStageConfigID(); // Function Solarland.SolarGameState.OnRep_SettlementStageConfigID // (Final|Native|Protected) // @ game+0x27daf90
	void OnRep_RemainingTeamCountChange(); // Function Solarland.SolarGameState.OnRep_RemainingTeamCountChange // (Final|Native|Protected) // @ game+0x27daf70
	void OnRep_PlayersCountChange(); // Function Solarland.SolarGameState.OnRep_PlayersCountChange // (Final|Native|Protected) // @ game+0x27daf50
	void OnRep_OnPlayersCountChange(); // Function Solarland.SolarGameState.OnRep_OnPlayersCountChange // (Final|Native|Protected) // @ game+0x27daf30
	void OnRep_OnAlivePlayersCountChange(); // Function Solarland.SolarGameState.OnRep_OnAlivePlayersCountChange // (Final|Native|Protected|Const) // @ game+0x27daf10
	void OnRep_OBPlayerList(); // Function Solarland.SolarGameState.OnRep_OBPlayerList // (Final|Native|Protected) // @ game+0x27daef0
	void OnRep_NumReplicatedTeams(); // Function Solarland.SolarGameState.OnRep_NumReplicatedTeams // (Final|Native|Public) // @ game+0x27daed0
	void OnRep_NumPlayers(int32_t PreviousNumPlayers); // Function Solarland.SolarGameState.OnRep_NumPlayers // (Final|Native|Protected) // @ game+0x27dae40
	void OnRep_EndMatchCountdown(); // Function Solarland.SolarGameState.OnRep_EndMatchCountdown // (Native|Public) // @ game+0x7cf110
	void OnRep_Countdown(); // Function Solarland.SolarGameState.OnRep_Countdown // (Native|Public) // @ game+0x1ae53d0
	void OnRep_CapsulePlayerNum(); // Function Solarland.SolarGameState.OnRep_CapsulePlayerNum // (Final|Native|Protected) // @ game+0x27dae20
	void OnRecordingConnectionChanged(); // Function Solarland.SolarGameState.OnRecordingConnectionChanged // (Final|Native|Public) // @ game+0x27dae00
	void OnPlayerStateEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarGameState.OnPlayerStateEndPlay // (Final|Native|Public) // @ game+0x27dad30
	void OnOBPlayerListChange(); // Function Solarland.SolarGameState.OnOBPlayerListChange // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnLocalSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarGameState.OnLocalSpectateTargetChanged // (Final|Native|Protected) // @ game+0x27dac60
	void OnLiveWatchPlayerCountChanged(struct FString PlayerId, uint32_t count); // Function Solarland.SolarGameState.OnLiveWatchPlayerCountChanged // (Final|Native|Public) // @ game+0x27dab80
	void OnLiveWatchOnlyMsgReceived(struct FLiveWatchOnlyMsg& Msg); // Function Solarland.SolarGameState.OnLiveWatchOnlyMsgReceived // (Final|Native|Public|HasOutParms) // @ game+0x27daa90
	void NotifyCheatedPlayer(struct ASolarPlayerState* CheatedPlayerState, struct FText& OutReason); // Function Solarland.SolarGameState.NotifyCheatedPlayer // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void NotifyBombingEnd(int32_t BombId); // Function Solarland.SolarGameState.NotifyBombingEnd // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x27daa00
	void NotifyBombingBegin(int32_t BombId, struct FVector Location, float Radius); // Function Solarland.SolarGameState.NotifyBombingBegin // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x27da8f0
	void NotifyAbnormalPlayer(struct ASolarPlayerState* AbnormalPlayerState, struct FText& OutReason); // Function Solarland.SolarGameState.NotifyAbnormalPlayer // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void NetMulticastVictoryAction(struct FString WinTeamName, struct ASolarCharacter* LastKiller, struct ASolarCharacter* LastDeath); // Function Solarland.SolarGameState.NetMulticastVictoryAction // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x27da700
	void NetMulticastNotifyDebugMessage(int32_t DebugIndex, struct FVector SpawnerLocation, struct FString DebugString); // Function Solarland.SolarGameState.NetMulticastNotifyDebugMessage // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x27da5e0
	void NetMulticastNotifyCheatedPlayer(struct ASolarPlayerState* CheatedPlayerState, struct FText BanReason); // Function Solarland.SolarGameState.NetMulticastNotifyCheatedPlayer // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x27da4d0
	void K2_SetCanShowBattlePrompt(bool NewValue); // Function Solarland.SolarGameState.K2_SetCanShowBattlePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0x27da110
	bool IsSupportWeaponUpgrade(); // Function Solarland.SolarGameState.IsSupportWeaponUpgrade // (Final|Native|Public|BlueprintCallable) // @ game+0x27da0e0
	bool IsSupportCharacterTacticalAbility(); // Function Solarland.SolarGameState.IsSupportCharacterTacticalAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x27da0b0
	bool IsSupportCharacterSuperAbility(); // Function Solarland.SolarGameState.IsSupportCharacterSuperAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x27da080
	bool IsSupportCharacterRole(); // Function Solarland.SolarGameState.IsSupportCharacterRole // (Final|Native|Public|BlueprintCallable) // @ game+0x27da050
	bool IsSupportCharacterInGameLeveling(); // Function Solarland.SolarGameState.IsSupportCharacterInGameLeveling // (Native|Event|Public|BlueprintEvent) // @ game+0x27da020
	float GetWorldStartTimeSeconds(); // Function Solarland.SolarGameState.GetWorldStartTimeSeconds // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8c80
	int32_t GetWatchingPlayerCount(bool IgnoreOffline); // Function Solarland.SolarGameState.GetWatchingPlayerCount // (Final|Native|Public) // @ game+0x27d9f80
	void GetTeams(struct TArray<struct ASolarTeamInfo*>& OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled); // Function Solarland.SolarGameState.GetTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27c8470
	struct ASolarPlayerState* GetTeamPlayerState(char InTeamId, char InPosInTeam); // Function Solarland.SolarGameState.GetTeamPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27d9e10
	int32_t GetTeamNumCount(); // Function Solarland.SolarGameState.GetTeamNumCount // (Native|Public) // @ game+0x27d9de0
	char GetTeammateNum(char InTeamId); // Function Solarland.SolarGameState.GetTeammateNum // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27d9ef0
	struct ASolarTeamInfo* GetTeamByName(struct FString InTeamName); // Function Solarland.SolarGameState.GetTeamByName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27d9ce0
	struct ASolarTeamInfo* GetTeam(char InTeamId); // Function Solarland.SolarGameState.GetTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27d9c50
	enum class ERoleSkillOperation GetTacticalSkillStateOperationOnInit(); // Function Solarland.SolarGameState.GetTacticalSkillStateOperationOnInit // (Final|Native|Public|BlueprintCallable) // @ game+0x27d9c20
	enum class ERoleSkillOperation GetSuperSkillStateOperationOnInit(); // Function Solarland.SolarGameState.GetSuperSkillStateOperationOnInit // (Final|Native|Public|BlueprintCallable) // @ game+0x27d9bb0
	struct ASolarPlayerState* GetSpecTargetOrLocalPlayerState(); // Function Solarland.SolarGameState.GetSpecTargetOrLocalPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27d9b80
	struct ASolarSafeArea* GetSolarSafeArea(); // Function Solarland.SolarGameState.GetSolarSafeArea // (Final|Native|Public|Const) // @ game+0x27d9b50
	int32_t GetSettlementStageConfigID(); // Function Solarland.SolarGameState.GetSettlementStageConfigID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27d9b30
	int32_t GetRemainingTeamCount(); // Function Solarland.SolarGameState.GetRemainingTeamCount // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x27d9b00
	int32_t GetRemainingPlayersCount(); // Function Solarland.SolarGameState.GetRemainingPlayersCount // (Native|Public) // @ game+0x27d9ad0
	void GetPlayerTeams(struct TArray<struct ASolarTeamInfo*>& OutTeams, bool FilterAlreadySettled); // Function Solarland.SolarGameState.GetPlayerTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27d9870
	struct ASolarPlayerState* GetPlayerStateByPlayerId(struct FString InPlayerID); // Function Solarland.SolarGameState.GetPlayerStateByPlayerId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27d97c0
	struct ASolarPlayerState* GetPlayerStateByNickName(struct FString InNickName); // Function Solarland.SolarGameState.GetPlayerStateByNickName // (Final|Native|Public|Const) // @ game+0x27d9710
	int32_t GetPlayersCount(); // Function Solarland.SolarGameState.GetPlayersCount // (Native|Public) // @ game+0x27d9970
	struct ASolarCharacter* GetPlayerByPlayerId(struct FString InPlayerID); // Function Solarland.SolarGameState.GetPlayerByPlayerId // (Final|Native|Public) // @ game+0x27d9660
	void GetOnlyPlayerTeams(struct TArray<struct ASolarTeamInfo*>& OutTeams, bool FilterAlreadySettled); // Function Solarland.SolarGameState.GetOnlyPlayerTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27d9560
	void GetOnlyBotTeams(struct TArray<struct ASolarTeamInfo*>& OutTeams, bool FilterAlreadySettled); // Function Solarland.SolarGameState.GetOnlyBotTeams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27d9460
	struct ASolarPlayerState* GetOfflinePlayerState(struct FString OfflinePlayerId); // Function Solarland.SolarGameState.GetOfflinePlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x27d93b0
	bool GetOBPlayerList(struct TArray<struct ASolarPlayerState*>& OutPlayerList); // Function Solarland.SolarGameState.GetOBPlayerList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27d92f0
	struct ASolarPlayerState* GetLocalSolarPlayerState(); // Function Solarland.SolarGameState.GetLocalSolarPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27d8d00
	int32_t GetEndMatchCountdown(); // Function Solarland.SolarGameState.GetEndMatchCountdown // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x27d8ce0
	bool GetCanShowBattlePrompt(); // Function Solarland.SolarGameState.GetCanShowBattlePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8cb0
	float GetBattleStartTimeSeconds(); // Function Solarland.SolarGameState.GetBattleStartTimeSeconds // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8c80
	void GetAllCharactersExceptTeammate(struct TArray<struct ASolarCharacter*>& CharacterArray); // Function Solarland.SolarGameState.GetAllCharactersExceptTeammate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27d8bd0
	int32_t GetAliveSolarPlayersCount(bool IgnoreOffline); // Function Solarland.SolarGameState.GetAliveSolarPlayersCount // (Final|Native|Public) // @ game+0x27d8b30
	int32_t GetAlivePlayersCount(); // Function Solarland.SolarGameState.GetAlivePlayersCount // (Final|Native|Public|Const) // @ game+0x27d8b10
	char GetAlivePlayerNumInTeamExceptDying(char InTeamId, bool bExceptCheater); // Function Solarland.SolarGameState.GetAlivePlayerNumInTeamExceptDying // (Native|Public|BlueprintCallable) // @ game+0x27d8a30
	void DoVictoryActionOnServer(struct FString InWinTeamName); // Function Solarland.SolarGameState.DoVictoryActionOnServer // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8990
	void DoSlomoOnLocalFromConfig(); // Function Solarland.SolarGameState.DoSlomoOnLocalFromConfig // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8970
	void DoSlomoOnLocal(float TimeDilation, float TimeDuration, float DelayTime); // Function Solarland.SolarGameState.DoSlomoOnLocal // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8850
	void DelayPlayVictoryMusic(); // Function Solarland.SolarGameState.DelayPlayVictoryMusic // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8830
	void CelebrateBattleEnd(struct FVector Location); // Function Solarland.SolarGameState.CelebrateBattleEnd // (BlueprintAuthorityOnly|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	char CalculateTeamNum(); // Function Solarland.SolarGameState.CalculateTeamNum // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8800
	void CacheSafeArea(struct ASolarSafeArea* SafeArea); // Function Solarland.SolarGameState.CacheSafeArea // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8770
};

// Class Solarland.SBattleGameState
// Size: 0x4e0 (Inherited: 0x4c0)
struct ASBattleGameState : ASolarGameState {
	char pad_4C0[0x18]; // 0x4c0(0x18)
	bool IsBattleEnd; // 0x4d8(0x01)
	bool IsBattleSettlement; // 0x4d9(0x01)
	enum class EBattleEndType BattleEndType; // 0x4da(0x01)
	char pad_4DB[0x5]; // 0x4db(0x05)

	bool IsBattleOver(); // Function Solarland.SBattleGameState.IsBattleOver // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x27087b0
	bool GetIsBattleSettlement(); // Function Solarland.SBattleGameState.GetIsBattleSettlement // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x27084b0
	enum class EBattleEndType GetBattleEndType(); // Function Solarland.SBattleGameState.GetBattleEndType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2708490
};

// Class Solarland.SCustomGameState
// Size: 0x688 (Inherited: 0x4e0)
struct ASCustomGameState : ASBattleGameState {
	char pad_4E0[0x8]; // 0x4e0(0x08)
	enum class ESCMInGameState InGameState; // 0x4e8(0x01)
	bool bInSelectHero; // 0x4e9(0x01)
	char pad_4EA[0x3e]; // 0x4ea(0x3e)
	struct FCustomRoomData CustomRoomData; // 0x528(0xd8)
	bool bCustomRoomMode; // 0x600(0x01)
	char pad_601[0x7]; // 0x601(0x07)
	struct TArray<struct AGameManagerBase*> GameManagers; // 0x608(0x10)
	struct AGameDataManager* GameDataManager; // 0x618(0x08)
	struct ACustomSettlementManager* SettlementManager; // 0x620(0x08)
	char pad_628[0x10]; // 0x628(0x10)
	struct UCGMManagerConfigComponent* ManagerConfigComponent; // 0x638(0x08)
	struct ACGFormula* InsFormula; // 0x640(0x08)
	struct TArray<struct ASolarPlayerState*> PlayersWithTrackingAbility; // 0x648(0x10)
	struct TArray<struct ASpatializeInfoTrack*> TrackInfos; // 0x658(0x10)
	char pad_668[0xb]; // 0x668(0x0b)
	bool bBasicSystemReady; // 0x673(0x01)
	char pad_674[0x4]; // 0x674(0x04)
	struct FMulticastInlineDelegate OnBasicSystemReady; // 0x678(0x10)

	void SetRoomPoolPrizeType(int32_t TypeID); // Function Solarland.SCustomGameState.SetRoomPoolPrizeType // (Final|Native|Public) // @ game+0x2725f30
	void SetRoomPasssd(struct FString Passwd); // Function Solarland.SCustomGameState.SetRoomPasssd // (Final|Native|Public) // @ game+0x2725e40
	void SetRoomName(struct FString Name); // Function Solarland.SCustomGameState.SetRoomName // (Final|Native|Public) // @ game+0x2725d50
	void SetRoomLevelLimit(int32_t Level); // Function Solarland.SCustomGameState.SetRoomLevelLimit // (Final|Native|Public) // @ game+0x2725cc0
	void SetRoomEnableSwapPos(bool bIsEnabled); // Function Solarland.SCustomGameState.SetRoomEnableSwapPos // (Final|Native|Public|BlueprintCallable) // @ game+0x2725c30
	void SetRoomEnableInvite(bool bIsEnabled); // Function Solarland.SCustomGameState.SetRoomEnableInvite // (Final|Native|Public|BlueprintCallable) // @ game+0x2725ba0
	void OnTournamentBattleEnd(); // Function Solarland.SCustomGameState.OnTournamentBattleEnd // (Final|Native|Public) // @ game+0x27257b0
	void OnServerCustomRoomDataReady(); // Function Solarland.SCustomGameState.OnServerCustomRoomDataReady // (Native|Public) // @ game+0x1ae6090
	void OnRep_InGameState(); // Function Solarland.SCustomGameState.OnRep_InGameState // (Final|Native|Public) // @ game+0x2725770
	void OnRep_GameManagerList(); // Function Solarland.SCustomGameState.OnRep_GameManagerList // (Final|Native|Private) // @ game+0x9043b0
	void OnRep_GameDataManager(); // Function Solarland.SCustomGameState.OnRep_GameDataManager // (Final|Native|Public) // @ game+0x2725750
	void OnRep_CustomRoomData(); // Function Solarland.SCustomGameState.OnRep_CustomRoomData // (Final|Native|Public) // @ game+0x2725730
	void OnRep_bInSelectHero(); // Function Solarland.SCustomGameState.OnRep_bInSelectHero // (Final|Native|Public) // @ game+0x2725790
	void OnPlayerBattleStateChange(struct ASCMPlayerState* PlayerState); // Function Solarland.SCustomGameState.OnPlayerBattleStateChange // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnDataManagerPrepare(); // Function Solarland.SCustomGameState.OnDataManagerPrepare // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnCustomRoomDataChange(struct FCustomRoomData& InCustomRoomData); // Function Solarland.SCustomGameState.OnCustomRoomDataChange // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void NotifyVipPlayerJoin(int32_t FlagID, char VipType, enum class ECommonInputType InputType, struct FString NickName, bool bCustomRoom, bool bInTournament); // Function Solarland.SCustomGameState.NotifyVipPlayerJoin // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x2724e40
	void NotifyRoomDataChanged(); // Function Solarland.SCustomGameState.NotifyRoomDataChanged // (Final|Native|Public) // @ game+0x2724e20
	void MultiClientAllManagersOnRepDelegate__DelegateSignature(); // DelegateFunction Solarland.SCustomGameState.MultiClientAllManagersOnRepDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	bool IsNeedCalculateTournamentPoints(); // Function Solarland.SCustomGameState.IsNeedCalculateTournamentPoints // (Final|Native|Public) // @ game+0x2724d50
	bool IsInTournament(); // Function Solarland.SCustomGameState.IsInTournament // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2724d10
	bool IsInCustomServer(); // Function Solarland.SCustomGameState.IsInCustomServer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2724cd0
	bool IsCustomRoomMode(); // Function Solarland.SCustomGameState.IsCustomRoomMode // (Final|Native|Public|Const) // @ game+0x904000
	bool IsAtNonSettlementStage(); // Function Solarland.SCustomGameState.IsAtNonSettlementStage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2724ca0
	void InitKnockoutPointParams(struct FKnockoutParams& InParams); // Function Solarland.SCustomGameState.InitKnockoutPointParams // (Final|Native|Public|HasOutParms) // @ game+0x2724bc0
	struct FTournamentData GetTournamentData(); // Function Solarland.SCustomGameState.GetTournamentData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2724b90
	bool GetOBSCMPlayerList(struct TArray<struct ASCMPlayerState*>& OutPlayerList); // Function Solarland.SCustomGameState.GetOBSCMPlayerList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27249c0
	struct UCGMManagerConfigComponent* GetManagerConfigComponent(); // Function Solarland.SCustomGameState.GetManagerConfigComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27249a0
	struct ACGFormula* GetFormula(); // Function Solarland.SCustomGameState.GetFormula // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2724940
	struct FCustomRoomData GetCustomRoomData(); // Function Solarland.SCustomGameState.GetCustomRoomData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27247c0
	struct UCGMGameplayConfig* GetCGMGameplayConfig(); // Function Solarland.SCustomGameState.GetCGMGameplayConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x27246b0
	void ClearCustomRoomData(); // Function Solarland.SCustomGameState.ClearCustomRoomData // (Final|Native|Public) // @ game+0x2724380
	void CallOnBasicSystemReady(); // Function Solarland.SCustomGameState.CallOnBasicSystemReady // (Final|Native|Protected|BlueprintCallable) // @ game+0x2724340
	int32_t CalculateKnockoutPoints(int32_t InTeamRank, int32_t InKillNum, float InTotalDamage, float InTotalDamageTaken); // Function Solarland.SCustomGameState.CalculateKnockoutPoints // (Final|Native|Public) // @ game+0x27241e0
};

// Class Solarland.BattlegroundGameState
// Size: 0x750 (Inherited: 0x688)
struct ABattlegroundGameState : ASCustomGameState {
	int32_t MinPlayerLimit; // 0x688(0x04)
	int32_t MaxPlayerLimit; // 0x68c(0x04)
	struct FBattlegroundGlobalData GlobalData; // 0x690(0x40)
	int32_t SubModeID; // 0x6d0(0x04)
	struct FBattlegroundSubModeData SubModeData; // 0x6d4(0x1c)
	struct TArray<struct FBattlegroundScoreData> ScoreData; // 0x6f0(0x10)
	char pad_700[0x8]; // 0x700(0x08)
	struct TArray<struct ABattlegroundMapElementActor*> AllMapElementsActors; // 0x708(0x10)
	struct TArray<struct ABattlegroundControlPoint*> AllControlPoints; // 0x718(0x10)
	int32_t AllMapElementsActorCount; // 0x728(0x04)
	bool AllMapElementsActorReady; // 0x72c(0x01)
	bool SubModeDataSet; // 0x72d(0x01)
	char pad_72E[0x22]; // 0x72e(0x22)

	void UnregisterMapElement(struct ABattlegroundMapElementActor* InActor); // Function Solarland.BattlegroundGameState.UnregisterMapElement // (Final|Native|Public) // @ game+0x265e090
	void RegisterMapElement(struct ABattlegroundMapElementActor* InActor); // Function Solarland.BattlegroundGameState.RegisterMapElement // (Final|Native|Public) // @ game+0x265de30
	void OnSetMatchState__DelegateSignature(struct FName& NewState); // DelegateFunction Solarland.BattlegroundGameState.OnSetMatchState__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnServerLevelLoaded(struct FString LevelName); // Function Solarland.BattlegroundGameState.OnServerLevelLoaded // (Final|Native|Public) // @ game+0x265db50
	void OnRep_SubModeData(); // Function Solarland.BattlegroundGameState.OnRep_SubModeData // (Final|Native|Protected) // @ game+0x265db30
	void OnRep_ScoreData(); // Function Solarland.BattlegroundGameState.OnRep_ScoreData // (Final|Native|Protected) // @ game+0x265db10
	void OnReceivedScoreDataChanged(struct TArray<struct FBattlegroundScoreData>& InData); // Function Solarland.BattlegroundGameState.OnReceivedScoreDataChanged // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerJoinTeam(struct ASolarTeamInfo* TeamInfo, struct ASolarPlayerState* PlayerState); // Function Solarland.BattlegroundGameState.OnPlayerJoinTeam // (Final|Native|Protected) // @ game+0x265d790
	void OnOccupiedFactionChanged(struct ABattlegroundControlPoint* BattlegroundControlPoint); // Function Solarland.BattlegroundGameState.OnOccupiedFactionChanged // (Final|Native|Public) // @ game+0x265d700
	void OnCountdownChangeDelegate__DelegateSignature(char InValue); // DelegateFunction Solarland.BattlegroundGameState.OnCountdownChangeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnAddBonusScore(); // Function Solarland.BattlegroundGameState.OnAddBonusScore // (Final|Native|Protected) // @ game+0x265d5e0
	bool K2_HasMatchEnded(); // Function Solarland.BattlegroundGameState.K2_HasMatchEnded // (Final|Native|Protected|BlueprintCallable) // @ game+0x265d590
	void HideAllAirWall(); // Function Solarland.BattlegroundGameState.HideAllAirWall // (Final|Native|Public|BlueprintCallable) // @ game+0x265d4d0
	struct FBattlegroundSubModeData GetSubModeData(); // Function Solarland.BattlegroundGameState.GetSubModeData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x265d490
	struct TArray<struct FBattlegroundScoreData> GetScoreData(); // Function Solarland.BattlegroundGameState.GetScoreData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x265d420
	int32_t GetPersonalScoreByType(enum class EPersonalScoreType InType); // Function Solarland.BattlegroundGameState.GetPersonalScoreByType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x265d210
	int32_t GetMinPlayerLimit(); // Function Solarland.BattlegroundGameState.GetMinPlayerLimit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x265d1f0
	int32_t GetMaxPlayerLimit(); // Function Solarland.BattlegroundGameState.GetMaxPlayerLimit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x265d1d0
	struct ABattlegroundMapElementActor* GetMapElementByType(enum class EDeploymentType InType); // Function Solarland.BattlegroundGameState.GetMapElementByType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x265d140
	struct FBattlegroundGlobalData GetGlobalData(); // Function Solarland.BattlegroundGameState.GetGlobalData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x265d110
};

// Class Solarland.SolarHUD
// Size: 0x318 (Inherited: 0x318)
struct ASolarHUD : AHUD {
};

// Class Solarland.BattleHUDBase
// Size: 0x3b0 (Inherited: 0x318)
struct ABattleHUDBase : ASolarHUD {
	struct UHUDDispatcherBase* Dispatcher; // 0x318(0x08)
	struct UHUDDispatcherBase* WidgetEventDispatcher; // 0x320(0x08)
	struct FSoftObjectPath TeammateUI; // 0x328(0x18)
	bool bSingle; // 0x340(0x01)
	bool bUseBattleDeathView; // 0x341(0x01)
	char pad_342[0x6]; // 0x342(0x06)
	struct USolarPlayersHPModel* PlayersHPModel; // 0x348(0x08)
	struct USolarPlayersShieldModel* PlayersShieldModel; // 0x350(0x08)
	struct USolarTeamInfoModel* TeamInfoModelModel; // 0x358(0x08)
	char pad_360[0x50]; // 0x360(0x50)

	void ShowDiePage_Deprecated(); // Function Solarland.BattleHUDBase.ShowDiePage_Deprecated // (Final|Native|Public|BlueprintCallable) // @ game+0x2662680
	void OnPlayerStateRepInController(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.BattleHUDBase.OnPlayerStateRepInController // (Native|Protected) // @ game+0x2661fd0
	void OnPlayerStateRepInCharacter(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.BattleHUDBase.OnPlayerStateRepInCharacter // (Native|Protected) // @ game+0x2661f00
	void OnNewTeamInfo(struct ASolarTeamInfo* TeamInfo); // Function Solarland.BattleHUDBase.OnNewTeamInfo // (Native|Protected) // @ game+0x2661c60
	void OnCharacterEndPlay(struct ASolarCharacter* Character); // Function Solarland.BattleHUDBase.OnCharacterEndPlay // (Native|Protected) // @ game+0x26619d0
	struct UUISubsystem* GetUISubSystem(); // Function Solarland.BattleHUDBase.GetUISubSystem // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x26618b0
	void CloseDiePage_Deprecated(struct UUserWidget* InDiePageClass); // Function Solarland.BattleHUDBase.CloseDiePage_Deprecated // (Final|Native|Public|BlueprintCallable) // @ game+0x2661470
};

// Class Solarland.BattlegroundHUD
// Size: 0x3b8 (Inherited: 0x3b0)
struct ABattlegroundHUD : ABattleHUDBase {
	char pad_3B0[0x8]; // 0x3b0(0x08)

	void OnPlayerStatusChanged(enum class EBattlegroundPlayerStatus InStatus); // Function Solarland.BattlegroundHUD.OnPlayerStatusChanged // (Final|Native|Private) // @ game+0x26620a0
	void OnPersonalScoreChanged(enum class EPersonalScoreType InType, struct FString Param); // Function Solarland.BattlegroundHUD.OnPersonalScoreChanged // (Final|Native|Private) // @ game+0x2661d80
	void OnMatchStateChanged(struct FName& InState); // Function Solarland.BattlegroundHUD.OnMatchStateChanged // (Final|Native|Private|HasOutParms) // @ game+0x2661bd0
	void OnCountdownChanged(char InValue); // Function Solarland.BattlegroundHUD.OnCountdownChanged // (Final|Native|Private) // @ game+0x2661b30
	void K2_OnPlayerStatusChanged(enum class EBattlegroundPlayerStatus InStatus); // Function Solarland.BattlegroundHUD.K2_OnPlayerStatusChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnPersonalScoreChanged(enum class EPersonalScoreType InType, struct FString Param); // Function Solarland.BattlegroundHUD.K2_OnPersonalScoreChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnCountdownChanged(char InValue); // Function Solarland.BattlegroundHUD.K2_OnCountdownChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_HandleCountDownToBegin(); // Function Solarland.BattlegroundHUD.K2_HandleCountDownToBegin // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void InitBattlegroundHUD(enum class EBattlegroundPlayerStatus InStatus); // Function Solarland.BattlegroundHUD.InitBattlegroundHUD // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.BattlegroundMapElementInterface
// Size: 0x28 (Inherited: 0x28)
struct UBattlegroundMapElementInterface : UInterface {
};

// Class Solarland.BattlegroundPlayerStart
// Size: 0x270 (Inherited: 0x258)
struct ABattlegroundPlayerStart : APlayerStart {
	char pad_258[0x8]; // 0x258(0x08)
	struct FBattlegroundMapElementData MapElementData; // 0x260(0x0c)
	char pad_26C[0x4]; // 0x26c(0x04)
};

// Class Solarland.SolarPlayerState
// Size: 0xc48 (Inherited: 0x330)
struct ASolarPlayerState : APlayerState {
	struct FMulticastInlineDelegate OnTeammatePlayerStateRepDelegate; // 0x330(0x10)
	struct FMulticastInlineDelegate OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate; // 0x340(0x10)
	struct FMulticastInlineDelegate OnTeammatePlayerStateRemovedInBattlePhaseDelegate; // 0x350(0x10)
	struct FMulticastInlineDelegate OnPlayerChangedGoldsDelegate; // 0x360(0x10)
	struct FMulticastInlineDelegate OnOBPlayerRepDelegate; // 0x370(0x10)
	int32_t Gold; // 0x380(0x04)
	char pad_384[0x4]; // 0x384(0x04)
	struct TArray<int32_t> CostedGolds; // 0x388(0x10)
	struct TArray<int32_t> ReceivedGolds; // 0x398(0x10)
	int32_t CharacterId; // 0x3a8(0x04)
	int32_t SkinId; // 0x3ac(0x04)
	struct FString ClanId; // 0x3b0(0x10)
	struct FString ClanName; // 0x3c0(0x10)
	struct FString ClanShortName; // 0x3d0(0x10)
	int32_t BagId; // 0x3e0(0x04)
	int32_t CapsuleID; // 0x3e4(0x04)
	struct FString SolarPlayerID; // 0x3e8(0x10)
	struct FString NickName; // 0x3f8(0x10)
	uint32_t BattleVoiceId; // 0x408(0x04)
	char pad_40C[0x4]; // 0x40c(0x04)
	int64_t RTCType; // 0x410(0x08)
	uint64_t UserId; // 0x418(0x08)
	char PosInTeam; // 0x420(0x01)
	char pad_421[0x3]; // 0x421(0x03)
	int32_t CharacterLevel; // 0x424(0x04)
	int32_t AvatarID; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)
	struct FString AvatarUrl; // 0x430(0x10)
	int32_t AvatarFrameID; // 0x440(0x04)
	int32_t Gender; // 0x444(0x04)
	int32_t AccountLevel; // 0x448(0x04)
	int32_t FriendNum; // 0x44c(0x04)
	int32_t RoleID; // 0x450(0x04)
	char pad_454[0x4]; // 0x454(0x04)
	struct TArray<struct FMedalInfo> Medals; // 0x458(0x10)
	struct TArray<struct FBattleCharacterData> AllCharacterData; // 0x468(0x10)
	struct TArray<struct FCharacterSkin> AllSkins; // 0x478(0x10)
	struct TArray<int32_t> AllVoices; // 0x488(0x10)
	struct FBattleCharacterData CurUsedCharacterData; // 0x498(0x60)
	struct TArray<int32_t> KillReports; // 0x4f8(0x10)
	struct TArray<struct FExpRankMedalData> AllExpRankMedalData; // 0x508(0x10)
	struct FLastBattleInfo LastBattleInfo; // 0x518(0x1c)
	char pad_534[0x4]; // 0x534(0x04)
	struct TArray<struct FString> ReCombatLimitPlayer; // 0x538(0x10)
	int32_t RoleUltimateSkillCDState; // 0x548(0x04)
	char pad_54C[0x4]; // 0x54c(0x04)
	struct TArray<struct FSettlementParam_ExtraRewardInfo> ExtraRewards; // 0x550(0x10)
	struct TArray<struct FSettlementReward> SettlementRewards; // 0x560(0x10)
	struct TArray<struct FSettlementCrateReward> CrateRewards; // 0x570(0x10)
	uint32_t PlayerNumber; // 0x580(0x04)
	char pad_584[0x4]; // 0x584(0x04)
	struct TMap<int32_t, int32_t> VehicleSkinData; // 0x588(0x50)
	float CurrentHealth; // 0x5d8(0x04)
	float MaxHealth; // 0x5dc(0x04)
	struct FShieldInfo CurShieldInfo; // 0x5e0(0x08)
	char ReviveItemNum; // 0x5e8(0x01)
	char ReviveCountByItem; // 0x5e9(0x01)
	char pad_5EA[0x2]; // 0x5ea(0x02)
	int32_t TalentID; // 0x5ec(0x04)
	int32_t LikeValue; // 0x5f0(0x04)
	int32_t ReceivedGiftNum; // 0x5f4(0x04)
	char pad_5F8[0x8]; // 0x5f8(0x08)
	struct FMulticastInlineDelegate OnWatchingFriendCountChanged; // 0x600(0x10)
	int32_t SpectatorNum; // 0x610(0x04)
	enum class ETalentState TalentState; // 0x614(0x01)
	bool HasBackendVerified; // 0x615(0x01)
	bool HasGroupBackendVerified; // 0x616(0x01)
	char pad_617[0x1]; // 0x617(0x01)
	struct FVector2D MarkedPointInNavMap; // 0x618(0x08)
	struct FVector SelfLastVehicleLocation; // 0x620(0x0c)
	struct FVector TeamLastVehicleLocation; // 0x62c(0x0c)
	char CurrentPlayerStateInGame; // 0x638(0x01)
	char CurrentCharacterStateInGame; // 0x639(0x01)
	char pad_63A[0x2]; // 0x63a(0x02)
	int32_t AccountFlag; // 0x63c(0x04)
	int32_t ClanFlag; // 0x640(0x04)
	char pad_644[0x4]; // 0x644(0x04)
	struct TArray<int32_t> EquippedEmotes; // 0x648(0x10)
	struct TMap<int32_t, struct FEquippedEmotesData> AllCharacterEquippedEmotes; // 0x658(0x50)
	struct FString OS; // 0x6a8(0x10)
	struct FString OsType; // 0x6b8(0x10)
	struct FString DeviceModel; // 0x6c8(0x10)
	enum class ECommonInputType InputType; // 0x6d8(0x01)
	bool bUsedGamePad; // 0x6d9(0x01)
	bool bIsSameTeamWithLocalPlayer; // 0x6da(0x01)
	bool HasReconnection; // 0x6db(0x01)
	char pad_6DC[0x4]; // 0x6dc(0x04)
	bool bHasHangUpBehavior; // 0x6e0(0x01)
	char pad_6E1[0x3]; // 0x6e1(0x03)
	float HangUpTime; // 0x6e4(0x04)
	float OfflineBattleTime; // 0x6e8(0x04)
	int32_t Elo; // 0x6ec(0x04)
	int32_t RankLevel; // 0x6f0(0x04)
	int32_t RankLevel2; // 0x6f4(0x04)
	int32_t LegendRank; // 0x6f8(0x04)
	float StartWaitTime; // 0x6fc(0x04)
	float ReportedWaitTime; // 0x700(0x04)
	char VipType; // 0x704(0x01)
	char pad_705[0x3]; // 0x705(0x03)
	int32_t WarmupTag; // 0x708(0x04)
	float Frustration; // 0x70c(0x04)
	bool bMonitor; // 0x710(0x01)
	char LobbyTeamMemberNum; // 0x711(0x01)
	char pad_712[0x16]; // 0x712(0x16)
	bool bTeamIDHasChanged; // 0x728(0x01)
	char pad_729[0x3]; // 0x729(0x03)
	int32_t RepliableMessageID; // 0x72c(0x04)
	float RepliableMessageStartTime; // 0x730(0x04)
	char pad_734[0xc]; // 0x734(0x0c)
	bool bIsOBPlayer; // 0x740(0x01)
	char pad_741[0x3]; // 0x741(0x03)
	int32_t WarmId; // 0x744(0x04)
	int32_t WarmType; // 0x748(0x04)
	bool AllowOtherJoin; // 0x74c(0x01)
	char pad_74D[0x3]; // 0x74d(0x03)
	struct FString SocialTeamID; // 0x750(0x10)
	float WaitTimeBeforeEnterSpectateMode; // 0x760(0x04)
	char pad_764[0x4]; // 0x764(0x04)
	struct FMulticastInlineDelegate OnSpectateInfoRep; // 0x768(0x10)
	struct ASolarPlayerState* KillerPlayerState; // 0x778(0x08)
	struct ASolarPlayerState* RevengePlayerState; // 0x780(0x08)
	struct TArray<struct FKillEnemySnapshot> KilledEnemysRecord; // 0x788(0x10)
	struct ASolarSpectateInfo* SpectateInfo; // 0x798(0x08)
	enum class EPlayerNetStateInGame NetStateInGame; // 0x7a0(0x01)
	bool bHasLogin; // 0x7a1(0x01)
	char pad_7A2[0xe]; // 0x7a2(0x0e)
	bool bHasUpdateByServerData; // 0x7b0(0x01)
	char pad_7B1[0x7]; // 0x7b1(0x07)
	struct USolarReplayHighlightComponent* ReplayHightlightComp; // 0x7b8(0x08)
	int32_t KillNum; // 0x7c0(0x04)
	char pad_7C4[0x1c]; // 0x7c4(0x1c)
	int32_t AssistNum; // 0x7e0(0x04)
	char pad_7E4[0x1c]; // 0x7e4(0x1c)
	struct FVector DeathPos; // 0x800(0x0c)
	int32_t ReconnectNum; // 0x80c(0x04)
	char pad_810[0x10]; // 0x810(0x10)
	float MultiKillDurationTime; // 0x820(0x04)
	char pad_824[0x14]; // 0x824(0x14)
	float TotalReceivedDamage; // 0x838(0x04)
	float HealSelf; // 0x83c(0x04)
	float ReceivedHeal; // 0x840(0x04)
	float LifeTime; // 0x844(0x04)
	struct FSettlementTempData SettleSyncData; // 0x848(0xd8)
	int32_t PlayerRank; // 0x920(0x04)
	bool IsAce; // 0x924(0x01)
	bool bMVP; // 0x925(0x01)
	char pad_926[0x1]; // 0x926(0x01)
	bool IsVictory; // 0x927(0x01)
	float MvpScore; // 0x928(0x04)
	float KDA; // 0x92c(0x04)
	int32_t ResurrectionTimes; // 0x930(0x04)
	int32_t CharacterExp; // 0x934(0x04)
	struct TArray<int32_t> CharacterExpReason; // 0x938(0x10)
	int32_t GainCombatScore; // 0x948(0x04)
	int32_t AccountExp; // 0x94c(0x04)
	struct TMap<int32_t, int32_t> WeaponExps; // 0x950(0x50)
	int32_t Zomborg; // 0x9a0(0x04)
	int32_t ZomborgExtra; // 0x9a4(0x04)
	struct TArray<enum class ESCMPlayerPunishType> SettlePunishTypes; // 0x9a8(0x10)
	struct TMap<int32_t, int32_t> CollectionItemRewards; // 0x9b8(0x50)
	struct TArray<int32_t> StrategyConditionIDs; // 0xa08(0x10)
	int32_t SettlementDisplayStrategyID; // 0xa18(0x04)
	char pad_A1C[0x1c]; // 0xa1c(0x1c)
	enum class ESCMPlayerOutPath PlayerOutPath; // 0xa38(0x01)
	char pad_A39[0x7]; // 0xa39(0x07)
	struct TArray<int32_t> UsedCharacterIDs; // 0xa40(0x10)
	bool bPresettling; // 0xa50(0x01)
	bool bHasSettled; // 0xa51(0x01)
	bool bIsPlayerBattleEnd; // 0xa52(0x01)
	char pad_A53[0x1]; // 0xa53(0x01)
	int32_t InteractValue; // 0xa54(0x04)
	float LastInteractTime; // 0xa58(0x04)
	float DamageFactor; // 0xa5c(0x04)
	float VehicleProbability; // 0xa60(0x04)
	bool bIsTimeoutPlayer; // 0xa64(0x01)
	char bShowBattlePrompt : 1; // 0xa65(0x01)
	char pad_A65_1 : 7; // 0xa65(0x01)
	char pad_A66[0x22]; // 0xa66(0x22)
	struct FExposeLocationMap ExposeLocationMap; // 0xa88(0x58)
	struct TArray<struct ASolarPlayerState*> ExposeLocationArray; // 0xae0(0x10)
	struct FVector PlayerLocation; // 0xaf0(0x0c)
	char pad_AFC[0x4]; // 0xafc(0x04)
	struct ASolarPlayerState* ExposeTo; // 0xb00(0x08)
	char pad_B08[0x8]; // 0xb08(0x08)
	int32_t SkydivingLeaderPosInTeam; // 0xb10(0x04)
	char SkydivingFollowFormationPos; // 0xb14(0x01)
	char pad_B15[0x7]; // 0xb15(0x07)
	enum class ESkydivingState SkydivingState; // 0xb1c(0x01)
	char pad_B1D[0x3]; // 0xb1d(0x03)
	struct USolarAchievementComponent* AchievementComponent; // 0xb20(0x08)
	char pad_B28[0x8]; // 0xb28(0x08)
	struct TArray<int32_t> PreCompletedAchievementIDs; // 0xb30(0x10)
	char pad_B40[0x18]; // 0xb40(0x18)
	int32_t PlayerLevel; // 0xb58(0x04)
	int32_t PlayerExperience; // 0xb5c(0x04)
	int32_t HistoryShieldUpgradeItemNum; // 0xb60(0x04)
	char pad_B64[0x1c]; // 0xb64(0x1c)
	struct ASpatializeInfoTrack* TrackInfo; // 0xb80(0x08)
	float TrackMaxRevealDistance; // 0xb88(0x04)
	enum class EAppLifetimeState AppLifetimeState; // 0xb8c(0x01)
	char pad_B8D[0x3]; // 0xb8d(0x03)
	int32_t TailFlameId; // 0xb90(0x04)
	char pad_B94[0x4]; // 0xb94(0x04)
	struct ASolarTeamInfo* Team; // 0xb98(0x08)
	char pad_BA0[0x28]; // 0xba0(0x28)
	struct TArray<struct FSolarBattleWeaponData> BattleWeaponDataArray; // 0xbc8(0x10)
	struct AHeroPickInfo* HeroPickInfo; // 0xbd8(0x08)
	char pad_BE0[0x68]; // 0xbe0(0x68)

	bool WillFollowMovementOfSkydivingLeader(); // Function Solarland.SolarPlayerState.WillFollowMovementOfSkydivingLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2876020
	void UpgradePlayerLevel(int32_t LevelAdded); // Function Solarland.SolarPlayerState.UpgradePlayerLevel // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2875f90
	void UpdateCurUseCharacterData(int32_t InCharacterId); // Function Solarland.SolarPlayerState.UpdateCurUseCharacterData // (Final|Native|Public) // @ game+0x2875f00
	void UpdateCurUseCharacterAndSkinData(int32_t InCharacterId, int32_t InSkinID); // Function Solarland.SolarPlayerState.UpdateCurUseCharacterAndSkinData // (Final|Native|Public) // @ game+0x2875e30
	void UpdateAICharacterDataList(struct FBattleCharacterData& InCharacterData); // Function Solarland.SolarPlayerState.UpdateAICharacterDataList // (Final|Native|Public|HasOutParms) // @ game+0x2875d30
	bool TryGetVehicleDamageInfo(struct TArray<int32_t>& OutVehicleDamageInfo); // Function Solarland.SolarPlayerState.TryGetVehicleDamageInfo // (Final|Native|Public|HasOutParms|Const) // @ game+0x2875c70
	bool TryGetSafeAreaInfo(struct TArray<int32_t>& OutSafeZoneInfo); // Function Solarland.SolarPlayerState.TryGetSafeAreaInfo // (Final|Native|Public|HasOutParms|Const) // @ game+0x2875bb0
	bool TryGetPlayerBackpackItems(struct TArray<int32_t>& OutWeaponIds); // Function Solarland.SolarPlayerState.TryGetPlayerBackpackItems // (Final|Native|Public|HasOutParms|Const) // @ game+0x2875af0
	void SyncMarkedWorldData(struct FWorldMarkData InMarkData); // Function Solarland.SolarPlayerState.SyncMarkedWorldData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2875820
	void SynchronizePlayerStateInGame(enum class EPlayerStateInGame InEPlayerStateInGame, bool InIfOrNot); // Function Solarland.SolarPlayerState.SynchronizePlayerStateInGame // (Final|Native|Public) // @ game+0x2875a20
	void SynchronizeCharacterStateInGame(enum class ECharacterStateInGame InECharacterStateInGame, bool InIfOrNot); // Function Solarland.SolarPlayerState.SynchronizeCharacterStateInGame // (Final|Native|Public) // @ game+0x2875950
	void StatWeaponLevelAndTime(); // Function Solarland.SolarPlayerState.StatWeaponLevelAndTime // (Final|Native|Public) // @ game+0x2875800
	void StatWeaponBattleDetailInfo(); // Function Solarland.SolarPlayerState.StatWeaponBattleDetailInfo // (Final|Native|Public) // @ game+0x28757e0
	void StatVehicleDriveTypeLuaCall(int32_t DriveType); // Function Solarland.SolarPlayerState.StatVehicleDriveTypeLuaCall // (Final|Native|Public|BlueprintCallable) // @ game+0x2875750
	void StatVehicleDriveType(int32_t DriveType); // Function Solarland.SolarPlayerState.StatVehicleDriveType // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28756c0
	void ShowTeammatesHUD(struct TArray<struct ASolarPlayerState*>& TeammateStates, struct ASolarPlayerState* InSpectateTargetPlayerState); // Function Solarland.SolarPlayerState.ShowTeammatesHUD // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28755c0
	void SetRoleUltimateSkillCDState(int32_t NewState); // Function Solarland.SolarPlayerState.SetRoleUltimateSkillCDState // (Final|Native|Public) // @ game+0x28751e0
	void SetRoleID(int32_t InRoleID); // Function Solarland.SolarPlayerState.SetRoleID // (Final|Native|Public) // @ game+0x2875150
	void SetPlayerNetStateInGame(enum class EPlayerNetStateInGame InPlayerNetStateInGame); // Function Solarland.SolarPlayerState.SetPlayerNetStateInGame // (Final|Native|Public) // @ game+0x28750d0
	void SetIsTimeoutPlayer(bool InValue); // Function Solarland.SolarPlayerState.SetIsTimeoutPlayer // (Final|Native|Public) // @ game+0x2875040
	void SetIsPlayerBattleEnd(bool bPlayerBattleEnd); // Function Solarland.SolarPlayerState.SetIsPlayerBattleEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x2874fb0
	void SetDeserter(bool InIsDeserter); // Function Solarland.SolarPlayerState.SetDeserter // (Final|Native|Public|BlueprintCallable) // @ game+0x2874ea0
	void SetDeathboxSkinId(struct TArray<int32_t>& InOwnedDeathboxSkinIds); // Function Solarland.SolarPlayerState.SetDeathboxSkinId // (Final|Native|Public|HasOutParms) // @ game+0x2874df0
	void ServerUpdateInputType(enum class ECommonInputType NowInputType); // Function Solarland.SolarPlayerState.ServerUpdateInputType // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2874d70
	void ServerUnexposeLocationToOtherOnce(struct ASolarPlayerState* OtherPS); // Function Solarland.SolarPlayerState.ServerUnexposeLocationToOtherOnce // (Final|Native|Public|BlueprintCallable) // @ game+0x2874ce0
	void ServerUnexposeLocationToOther(struct ASolarPlayerState* OtherPS); // Function Solarland.SolarPlayerState.ServerUnexposeLocationToOther // (Final|Native|Public|BlueprintCallable) // @ game+0x2874c50
	void ServerReportWaitTime(); // Function Solarland.SolarPlayerState.ServerReportWaitTime // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ae4810
	void ServerPlayerSelectSkin(int32_t InCharacterId, int32_t InSkinID); // Function Solarland.SolarPlayerState.ServerPlayerSelectSkin // (Final|Native|Public) // @ game+0x2874b80
	void ServerHeroRequest(int32_t InCharacterId); // Function Solarland.SolarPlayerState.ServerHeroRequest // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2874af0
	void ServerExposeLocationToOther(struct ASolarPlayerState* OtherPS); // Function Solarland.SolarPlayerState.ServerExposeLocationToOther // (Final|Native|Public|BlueprintCallable) // @ game+0x2874a60
	void ServerChangeRoleID(int32_t InRoleID); // Function Solarland.SolarPlayerState.ServerChangeRoleID // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28749d0
	void ReviseWeaponExp(int32_t weaponid, int32_t WeaponExp, int32_t CurLevel, int32_t CurExp); // Function Solarland.SolarPlayerState.ReviseWeaponExp // (Final|Native|Protected|BlueprintCallable) // @ game+0x2874880
	void RequestServerUpdateInputType(enum class ECommonInputType NowInputType); // Function Solarland.SolarPlayerState.RequestServerUpdateInputType // (Final|Native|Public|BlueprintCallable) // @ game+0x2872ea0
	void ReportWaitTime(); // Function Solarland.SolarPlayerState.ReportWaitTime // (Final|Native|Public|BlueprintCallable) // @ game+0x2874860
	void RemoveMarkedWorldDataFromLua(struct FWorldMarkData& InMarkData); // Function Solarland.SolarPlayerState.RemoveMarkedWorldDataFromLua // (Final|Native|Public|HasOutParms) // @ game+0x2874730
	void RemoveMarkedWorldData(struct FWorldMarkData InMarkData); // Function Solarland.SolarPlayerState.RemoveMarkedWorldData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2874600
	void ReceiveTeamIdReplicated(bool bRelatedToSelf); // Function Solarland.SolarPlayerState.ReceiveTeamIdReplicated // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveTalentStateSet(enum class ETalentState InState); // Function Solarland.SolarPlayerState.ReceiveTalentStateSet // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveTalentIDReplication(enum class EPlayerStateRepType RepType, struct APlayerState* ClientOwnerPS); // Function Solarland.SolarPlayerState.ReceiveTalentIDReplication // (Final|Native|Protected) // @ game+0x2874530
	void ReceiveSideReplicatedAfter(); // Function Solarland.SolarPlayerState.ReceiveSideReplicatedAfter // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePostInitializeComponents(); // Function Solarland.SolarPlayerState.ReceivePostInitializeComponents // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool ReceiveGold(int32_t InReceivedGold, bool NeedSyncToServer, bool NeedSyncToDS); // Function Solarland.SolarPlayerState.ReceiveGold // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2874420
	void ReceiveClientInitialize(struct AController* C); // Function Solarland.SolarPlayerState.ReceiveClientInitialize // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void PlayerSelectSkin(int32_t InCharacterId, int32_t InSkinID); // Function Solarland.SolarPlayerState.PlayerSelectSkin // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2874280
	void PlayerSelectHero(int32_t InCharacterId, int32_t InSkinID, bool bConfirm); // Function Solarland.SolarPlayerState.PlayerSelectHero // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2874170
	bool PlayerIsResurrecting(); // Function Solarland.SolarPlayerState.PlayerIsResurrecting // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	bool PlayerHasLogin(); // Function Solarland.SolarPlayerState.PlayerHasLogin // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2874150
	bool PlayerCanRebirthByReviveItem(bool bCheckItemNum, bool bIncludingReviving); // Function Solarland.SolarPlayerState.PlayerCanRebirthByReviveItem // (Final|Native|Public|Const) // @ game+0x2874070
	bool PlayerCanRebirthByBuyResurrection(); // Function Solarland.SolarPlayerState.PlayerCanRebirthByBuyResurrection // (Final|Native|Public|BlueprintCallable) // @ game+0x2874040
	bool PlayerCanRebirthByAllMeans(); // Function Solarland.SolarPlayerState.PlayerCanRebirthByAllMeans // (Final|Native|Public|BlueprintCallable) // @ game+0x2874010
	bool PlayerCanRebirthBlueprint(); // Function Solarland.SolarPlayerState.PlayerCanRebirthBlueprint // (Native|Event|Protected|BlueprintEvent) // @ game+0x2873fe0
	bool PlayerCanRebirth(); // Function Solarland.SolarPlayerState.PlayerCanRebirth // (Native|Public|BlueprintCallable) // @ game+0x27087b0
	bool PlayerCanBuyRescue(); // Function Solarland.SolarPlayerState.PlayerCanBuyRescue // (Native|Public|BlueprintCallable) // @ game+0x27084b0
	void OnWatchingFriendCountChanged__DelegateSignature(int32_t WatchingFriendCount); // DelegateFunction Solarland.SolarPlayerState.OnWatchingFriendCountChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnUpdatedPlayerStateLoginData(); // Function Solarland.SolarPlayerState.OnUpdatedPlayerStateLoginData // (Final|Native|Public) // @ game+0x2873fc0
	void OnTeammatePlayerStateRepDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarPlayerState.OnTeammatePlayerStateRepDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammatePlayerStateRemovedDelegate__DelegateSignature(char& InPosInTeam, bool InIsLastOne); // DelegateFunction Solarland.SolarPlayerState.OnTeammatePlayerStateRemovedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnTeamInfoChanged__DelegateSignature(struct ASolarTeamInfo* PreviousTeam, struct ASolarTeamInfo* NowTeam); // DelegateFunction Solarland.SolarPlayerState.OnTeamInfoChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnStopReceiveExposedLocation(struct ASolarPlayerState* OtherPS); // Function Solarland.SolarPlayerState.OnStopReceiveExposedLocation // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnStartResurrectProgress(int32_t InTextId, float InDuration, float InRemaining, bool bShowCancel); // Function Solarland.SolarPlayerState.OnStartResurrectProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x2873e60
	void OnSpectateTargetChanged(struct ASolarPlayerState* InOldTarget, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x2873d90
	void OnSpectateInfoRep__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarPlayerState.OnSpectateInfoRep__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRequestStartResurrect(struct ADeathTreasureBox* InDeatbox); // Function Solarland.SolarPlayerState.OnRequestStartResurrect // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnRequestCancelResurrect(struct ADeathTreasureBox* InDeatbox); // Function Solarland.SolarPlayerState.OnRequestCancelResurrect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnReplayRecordingStarted(); // Function Solarland.SolarPlayerState.OnReplayRecordingStarted // (Final|Native|Private) // @ game+0x2873cf0
	void OnRep_UserId(); // Function Solarland.SolarPlayerState.OnRep_UserId // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnRep_TotalReceivedDamage(); // Function Solarland.SolarPlayerState.OnRep_TotalReceivedDamage // (Final|Native|Private) // @ game+0x2873cd0
	void OnRep_TeammatesState(); // Function Solarland.SolarPlayerState.OnRep_TeammatesState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnRep_TeamLastVehicleLocation(); // Function Solarland.SolarPlayerState.OnRep_TeamLastVehicleLocation // (Native|Public) // @ game+0x1ae6450
	void OnRep_TeamChanged(struct ASolarTeamInfo* PreviousTeam); // Function Solarland.SolarPlayerState.OnRep_TeamChanged // (Final|Native|Public) // @ game+0x2873c40
	void OnRep_TalentID(); // Function Solarland.SolarPlayerState.OnRep_TalentID // (Final|Native|Public) // @ game+0x2873c20
	void OnRep_TailFlameId(); // Function Solarland.SolarPlayerState.OnRep_TailFlameId // (Final|Native|Public) // @ game+0x2873c00
	void OnRep_SpectateInfo(); // Function Solarland.SolarPlayerState.OnRep_SpectateInfo // (Final|Native|Private) // @ game+0x2873be0
	void OnRep_SkydivingState(); // Function Solarland.SolarPlayerState.OnRep_SkydivingState // (Final|Native|Public) // @ game+0x2873bc0
	void OnRep_SkydivingLeaderPosInTeam(int32_t OldValue); // Function Solarland.SolarPlayerState.OnRep_SkydivingLeaderPosInTeam // (Final|Native|Public) // @ game+0x2873b30
	void OnRep_SkinId(); // Function Solarland.SolarPlayerState.OnRep_SkinId // (Native|Public) // @ game+0x1ae5e70
	void OnRep_Side(struct FString OldSide); // Function Solarland.SolarPlayerState.OnRep_Side // (Native|Public) // @ game+0x2873a90
	void OnRep_SelfLastVehicleLocation(); // Function Solarland.SolarPlayerState.OnRep_SelfLastVehicleLocation // (Native|Public) // @ game+0x1ae61d0
	void OnRep_RTCType(); // Function Solarland.SolarPlayerState.OnRep_RTCType // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnRep_RoleID(); // Function Solarland.SolarPlayerState.OnRep_RoleID // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnRep_ReviveItemNum(); // Function Solarland.SolarPlayerState.OnRep_ReviveItemNum // (Native|Public) // @ game+0x1ae64b0
	void OnRep_ReviveCountByItem(); // Function Solarland.SolarPlayerState.OnRep_ReviveCountByItem // (Native|Public) // @ game+0x1ae5870
	void OnRep_RepliableMsg(); // Function Solarland.SolarPlayerState.OnRep_RepliableMsg // (Final|Native|Public) // @ game+0x2873a70
	void OnRep_ReceivedGiftNum(); // Function Solarland.SolarPlayerState.OnRep_ReceivedGiftNum // (Final|Native|Private) // @ game+0x2873a50
	void OnRep_PosInTeam(char& InLastPosInTeam); // Function Solarland.SolarPlayerState.OnRep_PosInTeam // (Native|Public|HasOutParms) // @ game+0x28739b0
	void OnRep_PlayerLocation(); // Function Solarland.SolarPlayerState.OnRep_PlayerLocation // (Native|Protected) // @ game+0x1ae6650
	void OnRep_PlayerLevel(); // Function Solarland.SolarPlayerState.OnRep_PlayerLevel // (Native|Public) // @ game+0x1ae65b0
	void OnRep_PlayerExp(); // Function Solarland.SolarPlayerState.OnRep_PlayerExp // (Native|Public) // @ game+0x1ae67d0
	void OnRep_NickName(struct FString OldNickName); // Function Solarland.SolarPlayerState.OnRep_NickName // (Final|Native|Public) // @ game+0x2873910
	void OnRep_NetStateInGame(); // Function Solarland.SolarPlayerState.OnRep_NetStateInGame // (Native|Public) // @ game+0x1ae5eb0
	void OnRep_MaxHealth(); // Function Solarland.SolarPlayerState.OnRep_MaxHealth // (Native|Public) // @ game+0x1ae6570
	void OnRep_MarkedPointInNavMap(); // Function Solarland.SolarPlayerState.OnRep_MarkedPointInNavMap // (Native|Public) // @ game+0x1ae6250
	void OnRep_KillNum(); // Function Solarland.SolarPlayerState.OnRep_KillNum // (Final|Native|Public) // @ game+0x28738f0
	void OnRep_Job(); // Function Solarland.SolarPlayerState.OnRep_Job // (Final|Native|Public) // @ game+0x9043b0
	void OnRep_IsOBPlayer(); // Function Solarland.SolarPlayerState.OnRep_IsOBPlayer // (Final|Native|Public) // @ game+0x28738d0
	void OnRep_InputType(); // Function Solarland.SolarPlayerState.OnRep_InputType // (Final|Native|Public) // @ game+0x28738b0
	void OnRep_HeroPickInfo(); // Function Solarland.SolarPlayerState.OnRep_HeroPickInfo // (Final|Native|Public) // @ game+0x2873890
	void OnRep_HasSettled(); // Function Solarland.SolarPlayerState.OnRep_HasSettled // (Final|Native|Public) // @ game+0x2873870
	void OnRep_Gold(); // Function Solarland.SolarPlayerState.OnRep_Gold // (Final|Native|Public) // @ game+0x2873850
	void OnRep_ExposeLocationArray(); // Function Solarland.SolarPlayerState.OnRep_ExposeLocationArray // (Native|Protected) // @ game+0x1ae5b90
	void OnRep_EquippedEmotes(); // Function Solarland.SolarPlayerState.OnRep_EquippedEmotes // (Final|Native|Public) // @ game+0x2873830
	void OnRep_CurShieldInfo(struct FShieldInfo& InLastShieldInfo); // Function Solarland.SolarPlayerState.OnRep_CurShieldInfo // (Native|Public|HasOutParms) // @ game+0x2873650
	void OnRep_CurrentPlayerStateInGame(char& InLastPlayerStateInGame); // Function Solarland.SolarPlayerState.OnRep_CurrentPlayerStateInGame // (Native|Public|HasOutParms) // @ game+0x2873790
	void OnRep_CurrentHealth(); // Function Solarland.SolarPlayerState.OnRep_CurrentHealth // (Native|Public) // @ game+0x1ae6110
	void OnRep_CurrentCharacterStateInGame(char& InLastCharacterStateInGame); // Function Solarland.SolarPlayerState.OnRep_CurrentCharacterStateInGame // (Native|Public|HasOutParms) // @ game+0x28736f0
	void OnRep_ClanId(); // Function Solarland.SolarPlayerState.OnRep_ClanId // (Native|Public) // @ game+0x1ae5d10
	void OnRep_ClanFlag(); // Function Solarland.SolarPlayerState.OnRep_ClanFlag // (Final|Native|Public) // @ game+0x2873630
	void OnRep_CharacterId(int32_t OldCharacterId); // Function Solarland.SolarPlayerState.OnRep_CharacterId // (Native|Public) // @ game+0x28735a0
	void OnRep_BattleVoiceId(); // Function Solarland.SolarPlayerState.OnRep_BattleVoiceId // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnRep_BagId(); // Function Solarland.SolarPlayerState.OnRep_BagId // (Final|Native|Public) // @ game+0x2873580
	void OnRep_AssistNum(); // Function Solarland.SolarPlayerState.OnRep_AssistNum // (Final|Native|Public) // @ game+0x2873560
	void OnRep_AccountFlag(); // Function Solarland.SolarPlayerState.OnRep_AccountFlag // (Final|Native|Public) // @ game+0x2873540
	void OnRefreshReviveInfo(); // Function Solarland.SolarPlayerState.OnRefreshReviveInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x2873520
	void OnReceiveExposedLocation(struct ASolarPlayerState* OtherPS, struct FVector& Location); // Function Solarland.SolarPlayerState.OnReceiveExposedLocation // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	struct FString OnPlayerUpgrade(int32_t NewLevel, bool bFromServer); // Function Solarland.SolarPlayerState.OnPlayerUpgrade // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerUpdateStatData(enum class EStatisticsType InType); // Function Solarland.SolarPlayerState.OnPlayerUpdateStatData // (Final|Native|Public) // @ game+0x28734a0
	void OnPlayerGainExperience(int32_t GainedExp, int32_t CurrentExp, int32_t TotalExp, enum class EExpBehaviorType BehaviorType); // Function Solarland.SolarPlayerState.OnPlayerGainExperience // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerChangedGolds(enum class EPlayerChangedGoldType ChangedGoldType, int32_t CostGoldNum, enum class EPlayerChangedGoldResult CostResult); // Function Solarland.SolarPlayerState.OnPlayerChangedGolds // (Net|Native|Event|Public|NetClient) // @ game+0x2873390
	void OnOtherPlayerStopSpectateMyTeam(struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnOtherPlayerStopSpectateMyTeam // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnOtherPlayerStopSpectateMe(struct ASolarPlayerState* InSpectatorPlayerState, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnOtherPlayerStopSpectateMe // (Final|Native|Private) // @ game+0x28732c0
	void OnOtherPlayerBeginSpectateMe(struct ASolarPlayerState* InSpectatorPlayerState, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnOtherPlayerBeginSpectateMe // (Final|Native|Private) // @ game+0x28731f0
	void OnOBPlayerRepDelegate__DelegateSignature(bool bIsOBPlayer); // DelegateFunction Solarland.SolarPlayerState.OnOBPlayerRepDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnLiveWatchPlayerCountChanged(int32_t count); // Function Solarland.SolarPlayerState.OnLiveWatchPlayerCountChanged // (Final|Native|Public) // @ game+0x2873160
	void OnLiveWatchOnlyMsgReceived(struct FString Content); // Function Solarland.SolarPlayerState.OnLiveWatchOnlyMsgReceived // (Native|Public) // @ game+0x28730c0
	void OnLeaveLocalPlayerTeam(struct ASolarTeamInfo* TeamInfo, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarPlayerState.OnLeaveLocalPlayerTeam // (Final|Native|Public) // @ game+0x2872ff0
	void OnJoinLocalPlayerTeam(struct ASolarTeamInfo* TeamInfo, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarPlayerState.OnJoinLocalPlayerTeam // (Final|Native|Public) // @ game+0x2872f20
	void OnInputTypeChanged(enum class ECommonInputType NowInputType); // Function Solarland.SolarPlayerState.OnInputTypeChanged // (Final|Native|Public) // @ game+0x2872ea0
	void OnEnterHeroPick(); // Function Solarland.SolarPlayerState.OnEnterHeroPick // (Final|Native|Public|BlueprintCallable) // @ game+0x2872df0
	void OnDamageChanged__DelegateSignature(float Damage); // DelegateFunction Solarland.SolarPlayerState.OnDamageChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnClientSpectateTargetChanged(struct ASolarPlayerState* InOldTarget, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnClientSpectateTargetChanged // (Final|Native|Private) // @ game+0x2872d20
	void OnCancelResurrectProgress(int32_t InTextId); // Function Solarland.SolarPlayerState.OnCancelResurrectProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x2872c90
	void NotifyUpdateTeamMateLevelUI(); // Function Solarland.SolarPlayerState.NotifyUpdateTeamMateLevelUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void NotifyAddExperience(int32_t ExpAdded); // Function Solarland.SolarPlayerState.NotifyAddExperience // (Net|Native|Event|Public|NetClient) // @ game+0x2872c00
	bool NeedPerformSpectateInfoOnSimulate(); // Function Solarland.SolarPlayerState.NeedPerformSpectateInfoOnSimulate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872bd0
	int32_t LuaGetExpFromWeaponImplementation(enum class EExpBehaviorType InBehaviorType, int32_t InParamOne, int32_t InParamTwo, float InDamage); // Function Solarland.SolarPlayerState.LuaGetExpFromWeaponImplementation // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void LeaveTeam(); // Function Solarland.SolarPlayerState.LeaveTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x2872bb0
	void JoinTeamByPolicy(enum class ETeamType TeamType, bool AutoBalance); // Function Solarland.SolarPlayerState.JoinTeamByPolicy // (Final|Native|Public|BlueprintCallable) // @ game+0x2872ae0
	void JoinTeamByPolicies(struct TArray<enum class ETeamType> JoinPolicies, bool AutoBalance); // Function Solarland.SolarPlayerState.JoinTeamByPolicies // (Final|Native|Public|BlueprintCallable) // @ game+0x28729b0
	void JoinTeamByName(struct FString InTeamName); // Function Solarland.SolarPlayerState.JoinTeamByName // (Final|Native|Public|BlueprintCallable) // @ game+0x2872910
	void JoinTeamByID(char InTeamId); // Function Solarland.SolarPlayerState.JoinTeamByID // (Final|Native|Public|BlueprintCallable) // @ game+0x2872890
	void JoinTeam(struct ASolarTeamInfo* InTeam); // Function Solarland.SolarPlayerState.JoinTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x2872800
	bool IsWaitingLogin(); // Function Solarland.SolarPlayerState.IsWaitingLogin // (Native|Public|Const) // @ game+0x28727d0
	bool IsUsingClanForFlag(); // Function Solarland.SolarPlayerState.IsUsingClanForFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28727a0
	bool IsUnfollowShortcutEnabled(); // Function Solarland.SolarPlayerState.IsUnfollowShortcutEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872770
	bool IsTimeOutPlayer(); // Function Solarland.SolarPlayerState.IsTimeOutPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872750
	bool IsTeammateWithLocalOrSpecTargetPlayer(); // Function Solarland.SolarPlayerState.IsTeammateWithLocalOrSpecTargetPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872720
	bool IsTeammateWith(struct ASolarPlayerState* Other); // Function Solarland.SolarPlayerState.IsTeammateWith // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872680
	bool IsSpectatingOtherPlayer(); // Function Solarland.SolarPlayerState.IsSpectatingOtherPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872640
	bool IsSkydivingLeader(); // Function Solarland.SolarPlayerState.IsSkydivingLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872610
	bool IsSkydivingCompleted(); // Function Solarland.SolarPlayerState.IsSkydivingCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28725e0
	bool IsSkydiving(); // Function Solarland.SolarPlayerState.IsSkydiving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28725b0
	bool IsSameTeamWithLocalPlayer(); // Function Solarland.SolarPlayerState.IsSameTeamWithLocalPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872580
	bool IsReconnecting(); // Function Solarland.SolarPlayerState.IsReconnecting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872550
	bool IsPreStartSkydiving(); // Function Solarland.SolarPlayerState.IsPreStartSkydiving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872520
	bool IsPlayerWaitingForTeammatesHelp(); // Function Solarland.SolarPlayerState.IsPlayerWaitingForTeammatesHelp // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	bool IsPlayerTeam(); // Function Solarland.SolarPlayerState.IsPlayerTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x28724f0
	bool IsPlayerSameTeam(struct FString TargetPlayerID); // Function Solarland.SolarPlayerState.IsPlayerSameTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x2872440
	bool IsPlayerOnline(); // Function Solarland.SolarPlayerState.IsPlayerOnline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872410
	bool IsPlayerOffline(); // Function Solarland.SolarPlayerState.IsPlayerOffline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28723e0
	bool IsPlayer(); // Function Solarland.SolarPlayerState.IsPlayer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28723b0
	bool IsOutBySelf(); // Function Solarland.SolarPlayerState.IsOutBySelf // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872380
	bool IsOfflinePlayer(); // Function Solarland.SolarPlayerState.IsOfflinePlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872350
	bool IsOBPlayer(); // Function Solarland.SolarPlayerState.IsOBPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872330
	bool IsMySkydivingLeader(int32_t LeaderPosInTeam); // Function Solarland.SolarPlayerState.IsMySkydivingLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872290
	bool IsMVP(); // Function Solarland.SolarPlayerState.IsMVP // (Final|Native|Protected|BlueprintCallable) // @ game+0x2872230
	bool IsMaxLevelInGame(); // Function Solarland.SolarPlayerState.IsMaxLevelInGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872260
	bool IsLocalPlayerCameraFocusingMe(); // Function Solarland.SolarPlayerState.IsLocalPlayerCameraFocusingMe // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872200
	bool IsKickOutByServer(); // Function Solarland.SolarPlayerState.IsKickOutByServer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28721d0
	bool IsDeserter(); // Function Solarland.SolarPlayerState.IsDeserter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x28721a0
	bool IsBuyingResurrection(); // Function Solarland.SolarPlayerState.IsBuyingResurrection // (Event|Public|BlueprintEvent|Const) // @ game+0x2d0d160
	bool IsBeingSpectated(); // Function Solarland.SolarPlayerState.IsBeingSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872170
	bool IsAllyWithLocalPlayer(); // Function Solarland.SolarPlayerState.IsAllyWithLocalPlayer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872140
	bool IsAllyWithLocalOrSpecTargetPlayer(); // Function Solarland.SolarPlayerState.IsAllyWithLocalOrSpecTargetPlayer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872110
	bool IsAllyWith(struct ASolarPlayerState* Other); // Function Solarland.SolarPlayerState.IsAllyWith // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872070
	bool IsAIPlayer(); // Function Solarland.SolarPlayerState.IsAIPlayer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872040
	bool IsACheater(); // Function Solarland.SolarPlayerState.IsACheater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2872010
	void InitInputType(); // Function Solarland.SolarPlayerState.InitInputType // (Final|Native|Public) // @ game+0x2871fd0
	void IncreaseReviveCount(); // Function Solarland.SolarPlayerState.IncreaseReviveCount // (Native|Public|BlueprintCallable) // @ game+0x1ae5970
	void HideTeammatesHUD(struct TArray<struct ASolarPlayerState*>& TeammateStates); // Function Solarland.SolarPlayerState.HideTeammatesHUD // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2871f20
	bool HasSkydivingLeader(); // Function Solarland.SolarPlayerState.HasSkydivingLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871ef0
	bool HasSettled(); // Function Solarland.SolarPlayerState.HasSettled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871ed0
	bool HasCheatSelf(); // Function Solarland.SolarPlayerState.HasCheatSelf // (Final|Native|Public) // @ game+0x2871ea0
	int32_t GetWeaponSettlmentExp(int32_t weaponid); // Function Solarland.SolarPlayerState.GetWeaponSettlmentExp // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetVehicleSkinID(int32_t VehicleID); // Function Solarland.SolarPlayerState.GetVehicleSkinID // (Final|Native|Public) // @ game+0x2871e00
	struct FString GetUserID(); // Function Solarland.SolarPlayerState.GetUserID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871d70
	struct TArray<int32_t> GetUsableTailFlameIds(); // Function Solarland.SolarPlayerState.GetUsableTailFlameIds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871cf0
	void GetUsableSkinsForCharacter(int32_t InCharacterId, struct TArray<int32_t>& Result, bool& bCharacterUsable); // Function Solarland.SolarPlayerState.GetUsableSkinsForCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871bc0
	struct TArray<int32_t> GetUsableJetpackIds(); // Function Solarland.SolarPlayerState.GetUsableJetpackIds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871b40
	float GetTotalReceivedDamage(); // Function Solarland.SolarPlayerState.GetTotalReceivedDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x2871b20
	float GetTotalCausedDamage(); // Function Solarland.SolarPlayerState.GetTotalCausedDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x2871ae0
	char GetTeamRank(); // Function Solarland.SolarPlayerState.GetTeamRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871870
	struct FString GetTeamName(); // Function Solarland.SolarPlayerState.GetTeamName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28717f0
	void GetTeammatePlayers(bool bIncludingSelf, struct TArray<struct ASolarPlayerState*>& OutTeammates); // Function Solarland.SolarPlayerState.GetTeammatePlayers // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28719e0
	struct ASolarPlayerState* GetTeammatePlayerByPosInTeam(int32_t InPosInTeam); // Function Solarland.SolarPlayerState.GetTeammatePlayerByPosInTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871940
	int32_t GetTeammateNum(bool bIncludeSelf); // Function Solarland.SolarPlayerState.GetTeammateNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28718a0
	char GetTeamID(); // Function Solarland.SolarPlayerState.GetTeamID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28717c0
	struct USolarGameModeStatisticsComponent* GetStatComponent(); // Function Solarland.SolarPlayerState.GetStatComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871790
	struct ASolarSpectateInfo* GetSpectateTargetSpectateInfo(); // Function Solarland.SolarPlayerState.GetSpectateTargetSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871750
	struct ASolarPlayerState* GetSpectateTargetPlayerState(); // Function Solarland.SolarPlayerState.GetSpectateTargetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871710
	struct ASolarCharacter* GetSpectateTargetCharacter(); // Function Solarland.SolarPlayerState.GetSpectateTargetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28716c0
	struct ASolarSpectateInfo* GetSpectateInfo(); // Function Solarland.SolarPlayerState.GetSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28716a0
	struct ASolarReplayPlayerController* GetSolarReplayPlayerController(); // Function Solarland.SolarPlayerState.GetSolarReplayPlayerController // (Final|Native|Public|Const) // @ game+0x2871670
	struct ASolarPlayerController* GetSolarPlayerController(); // Function Solarland.SolarPlayerState.GetSolarPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871640
	struct ASolarCharacter* GetSolarCharacter(); // Function Solarland.SolarPlayerState.GetSolarCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871610
	struct ASolarBotAIController* GetSolarBotAIController(); // Function Solarland.SolarPlayerState.GetSolarBotAIController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28715e0
	void GetSkinInfo(int32_t InSkinID, struct FCharacterSkin& ResultInfo); // Function Solarland.SolarPlayerState.GetSkinInfo // (Final|Native|Public|HasOutParms) // @ game+0x2871510
	int32_t GetRankScore(); // Function Solarland.SolarPlayerState.GetRankScore // (Final|Native|Public) // @ game+0x28714f0
	int32_t GetRankLevelID(); // Function Solarland.SolarPlayerState.GetRankLevelID // (Final|Native|Public) // @ game+0x28714d0
	struct ASolarCharacter* GetPossessedCharacter(); // Function Solarland.SolarPlayerState.GetPossessedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28714a0
	struct UPlayerStatisticsData* GetPlayerStatData(); // Function Solarland.SolarPlayerState.GetPlayerStatData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871470
	enum class EPlayerNetStateInGame GetPlayerNetState(); // Function Solarland.SolarPlayerState.GetPlayerNetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871450
	struct FString GetPlayerNameWithoutUID(); // Function Solarland.SolarPlayerState.GetPlayerNameWithoutUID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28713d0
	struct TArray<struct FMedalInfo> GetMedalInfo(); // Function Solarland.SolarPlayerState.GetMedalInfo // (Final|Native|Public|Const) // @ game+0x2871350
	int32_t GetMaxShieldMatCountToDeathbox(); // Function Solarland.SolarPlayerState.GetMaxShieldMatCountToDeathbox // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871320
	struct ASolarPlayerState* GetLocalPlayerState(); // Function Solarland.SolarPlayerState.GetLocalPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28712f0
	struct ASolarPlayerState* GetLocalOrSpecTargetPlayerState(); // Function Solarland.SolarPlayerState.GetLocalOrSpecTargetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28712c0
	struct ASolarCharacter* GetLocalOrSpecTargetCharacter(); // Function Solarland.SolarPlayerState.GetLocalOrSpecTargetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871290
	struct ASolarCharacter* GetLocalCharacter(); // Function Solarland.SolarPlayerState.GetLocalCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871260
	int32_t GetLegendRank(); // Function Solarland.SolarPlayerState.GetLegendRank // (Final|Native|Public) // @ game+0x2871240
	struct ASolarPlayerState* GetKillerPlayerState(); // Function Solarland.SolarPlayerState.GetKillerPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2871220
	bool GetIsPlayerBattleEnd(); // Function Solarland.SolarPlayerState.GetIsPlayerBattleEnd // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28711f0
	float GetExpSettleModePunishRatio(); // Function Solarland.SolarPlayerState.GetExpSettleModePunishRatio // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetExpItemCount(int32_t InLevelGap); // Function Solarland.SolarPlayerState.GetExpItemCount // (Final|Native|Public|BlueprintCallable) // @ game+0x2871150
	int32_t GetExpByBehavior(enum class EExpBehaviorType InBehaviorType, int32_t InParamOne, int32_t InParamTwo, float InDamage); // Function Solarland.SolarPlayerState.GetExpByBehavior // (Native|Event|Public|BlueprintEvent) // @ game+0x2870ff0
	int32_t GetExpAddValueFromItem(int32_t ItemID); // Function Solarland.SolarPlayerState.GetExpAddValueFromItem // (Event|Public|BlueprintEvent|Const) // @ game+0x2d0d160
	int32_t GetDriveVehicleID(); // Function Solarland.SolarPlayerState.GetDriveVehicleID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2870e30
	struct FVector GetDeathBoxLocation(); // Function Solarland.SolarPlayerState.GetDeathBoxLocation // (Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x2d0d160
	float GetCurrentTalentCDDuration(); // Function Solarland.SolarPlayerState.GetCurrentTalentCDDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2870e00
	float GetCurrentTalentActiveDuration(); // Function Solarland.SolarPlayerState.GetCurrentTalentActiveDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2870dd0
	void GetCurrentSkinForCharacter(int32_t InCharacterId, bool& bCharacterUsable, int32_t& OutSkinId); // Function Solarland.SolarPlayerState.GetCurrentSkinForCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2870cb0
	struct FString GetClanShortName(); // Function Solarland.SolarPlayerState.GetClanShortName // (Final|Native|Public|BlueprintCallable) // @ game+0x2870c30
	int32_t GetCharacterRandomEquippedVoiceByType(enum class EPassiveTriggeredVoice VoiceType); // Function Solarland.SolarPlayerState.GetCharacterRandomEquippedVoiceByType // (Final|Native|Public|Const) // @ game+0x2870b90
	struct FVector GetCharacterLocation(); // Function Solarland.SolarPlayerState.GetCharacterLocation // (Final|Native|Public|HasDefaults|Const) // @ game+0x2870b50
	struct TArray<struct FString> GetBuyResurrectionSavedTeammateIDArr(); // Function Solarland.SolarPlayerState.GetBuyResurrectionSavedTeammateIDArr // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<int32_t> GetBuyResurrectionSavedTeammateBonusArr(); // Function Solarland.SolarPlayerState.GetBuyResurrectionSavedTeammateBonusArr // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void GetAlliesPlayers(bool bIncludingSelf, struct TArray<struct ASolarPlayerState*>& OutAllies); // Function Solarland.SolarPlayerState.GetAlliesPlayers // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2870a50
	bool CostGold(int32_t InCostedGold, bool NeedSyncToServer); // Function Solarland.SolarPlayerState.CostGold // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x28707d0
	void ClientNotifyKillNumChanged(int32_t KillNumber, int32_t SpreesNum); // Function Solarland.SolarPlayerState.ClientNotifyKillNumChanged // (Net|Native|Event|Public|NetClient) // @ game+0x2870700
	void ClientImmediatelyTeammatesSkinID(struct TArray<struct ASolarPlayerState*> InTeammates, struct TArray<int32_t> InSkinID); // Function Solarland.SolarPlayerState.ClientImmediatelyTeammatesSkinID // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2870600
	void ClearTeammatesMark(); // Function Solarland.SolarPlayerState.ClearTeammatesMark // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1ae5630
	bool CheckIfTeamLastVehicleLocationValid(); // Function Solarland.SolarPlayerState.CheckIfTeamLastVehicleLocationValid // (Final|Native|Public|Const) // @ game+0x28705d0
	bool CheckIfTeamIdValid(); // Function Solarland.SolarPlayerState.CheckIfTeamIdValid // (Final|Native|Public|Const) // @ game+0x28705a0
	bool CheckIfSelfLastVehicleLocationValid(); // Function Solarland.SolarPlayerState.CheckIfSelfLastVehicleLocationValid // (Final|Native|Public|Const) // @ game+0x2870570
	bool CheckIfPosInTeamValid(); // Function Solarland.SolarPlayerState.CheckIfPosInTeamValid // (Final|Native|Public|Const) // @ game+0x2870540
	bool CheckIfMarkedPointInNavMapValid(); // Function Solarland.SolarPlayerState.CheckIfMarkedPointInNavMapValid // (Final|Native|Public|Const) // @ game+0x2870510
	bool CheckIfInactive(); // Function Solarland.SolarPlayerState.CheckIfInactive // (Final|Native|Public|Const) // @ game+0x28704e0
	bool CheckIfDataValid(); // Function Solarland.SolarPlayerState.CheckIfDataValid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28704b0
	bool CheckIfBeInSpecifiedPlayerState(enum class EPlayerStateInGame InEPlayerStateInGame); // Function Solarland.SolarPlayerState.CheckIfBeInSpecifiedPlayerState // (Final|Native|Public) // @ game+0x2870420
	bool CheckIfBeInSpecifiedCharacterState(enum class ECharacterStateInGame InECharacterStateInGame); // Function Solarland.SolarPlayerState.CheckIfBeInSpecifiedCharacterState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2870390
	bool CheckIfBattleVoiceIdValid(); // Function Solarland.SolarPlayerState.CheckIfBattleVoiceIdValid // (Final|Native|Public|Const) // @ game+0x2870360
	bool CheckGoldIsEnough(int32_t InCostedGold); // Function Solarland.SolarPlayerState.CheckGoldIsEnough // (Final|Native|Public) // @ game+0x28702c0
	void ChangeTailFlameId(int32_t InTailFlameId); // Function Solarland.SolarPlayerState.ChangeTailFlameId // (Final|Native|Public|BlueprintCallable) // @ game+0x2870230
	void ChangeBagById(int32_t InBagId); // Function Solarland.SolarPlayerState.ChangeBagById // (Final|Native|Public|BlueprintCallable) // @ game+0x28701a0
	bool CanReviveItemPutInDeathBox(); // Function Solarland.SolarPlayerState.CanReviveItemPutInDeathBox // (Final|Native|Public) // @ game+0x2783600
	bool CanAcceptSkydivingLeaderTransferRequest(struct ASolarPlayerState* RequesterPlayerState); // Function Solarland.SolarPlayerState.CanAcceptSkydivingLeaderTransferRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2870070
	bool CanAcceptSkydivingFollowRequest(struct ASolarPlayerState* RequesterPlayerState); // Function Solarland.SolarPlayerState.CanAcceptSkydivingFollowRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x286ffd0
	bool CanAcceptSkydivingFollowInvitation(struct ASolarPlayerState* InviterPlayerState); // Function Solarland.SolarPlayerState.CanAcceptSkydivingFollowInvitation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x286ff30
	int32_t CalculateZomborg(); // Function Solarland.SolarPlayerState.CalculateZomborg // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	float CalculateCharacterExp(); // Function Solarland.SolarPlayerState.CalculateCharacterExp // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	float CalculateAccountExp(); // Function Solarland.SolarPlayerState.CalculateAccountExp // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void AddExperience(int32_t InExp, enum class EExpBehaviorType InType); // Function Solarland.SolarPlayerState.AddExperience // (Final|Native|Public|BlueprintCallable) // @ game+0x286fe60
};

// Class Solarland.SCMPlayerState
// Size: 0xcc8 (Inherited: 0xc48)
struct ASCMPlayerState : ASolarPlayerState {
	enum class ESCMPlayerState BattleState; // 0xc48(0x01)
	enum class ESCMPlayerOutType PlayerOutType; // 0xc49(0x01)
	enum class ESCMPlayerType PlayerType; // 0xc4a(0x01)
	enum class ESCMPlayerGameRole PlayerGameRole; // 0xc4b(0x01)
	char pad_C4C[0x14]; // 0xc4c(0x14)
	struct TArray<struct FSCMReplicateHostData> ReplicateData; // 0xc60(0x10)
	char pad_C70[0x10]; // 0xc70(0x10)
	float ReviveStartTime; // 0xc80(0x04)
	char pad_C84[0x4]; // 0xc84(0x04)
	struct ASolarPlayerState* RevivingTeammatePS; // 0xc88(0x08)
	char pad_C90[0x10]; // 0xc90(0x10)
	struct USolarTaskComponent* TaskSystem; // 0xca0(0x08)
	struct TArray<struct TSoftClassPtr<UObject>> GMComponentClasses; // 0xca8(0x10)
	struct TArray<struct UActorComponent*> SpawnedGMComps; // 0xcb8(0x10)

	void UpdateTaskInfo(struct FTaskUpdateInfo& InTaskInfo); // Function Solarland.SCMPlayerState.UpdateTaskInfo // (Final|Native|Public|HasOutParms) // @ game+0x270f0f0
	void UpDateDataManager(struct TArray<struct FSCMReplicateHostData> InReplicateData, bool bInit); // Function Solarland.SCMPlayerState.UpDateDataManager // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x270efc0
	void ServerChangePlayerCharacter(int32_t NewCharacterID, int32_t NewSkinID); // Function Solarland.SCMPlayerState.ServerChangePlayerCharacter // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x270ed90
	void ServerBeginSpectate(struct ASCMPlayerState* TargetPlayer); // Function Solarland.SCMPlayerState.ServerBeginSpectate // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270ed00
	void ReviveSelfAsWinner(bool bOverrideLocation, struct FVector& ReviveLocation); // Function Solarland.SCMPlayerState.ReviveSelfAsWinner // (BlueprintAuthorityOnly|Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x270ec10
	void RequestStartGame(); // Function Solarland.SCMPlayerState.RequestStartGame // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1ae6550
	void RequestSetWeaponTypeAvailableLuaCall(enum class EWeaponUIType WeaponUIType, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetWeaponTypeAvailableLuaCall // (Final|Native|Public) // @ game+0x270ea70
	void RequestSetWeaponTypeAvailable(enum class EWeaponUIType WeaponUIType, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetWeaponTypeAvailable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270e990
	void RequestSetWeaponAvailableLuaCall(int32_t weaponid, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetWeaponAvailableLuaCall // (Final|Native|Public) // @ game+0x270e8c0
	void RequestSetWeaponAvailable(int32_t weaponid, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetWeaponAvailable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270e7f0
	void RequestSetVehicleTypeAvailableLuaCall(int32_t VehicleTypeID, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetVehicleTypeAvailableLuaCall // (Final|Native|Public) // @ game+0x270e720
	void RequestSetVehicleTypeAvailable(int32_t VehicleTypeID, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetVehicleTypeAvailable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270e650
	void RequestSetVehicleClassAvailableLuaCall(enum class EVehicleClass VehicleClass, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetVehicleClassAvailableLuaCall // (Final|Native|Public) // @ game+0x270e580
	void RequestSetVehicleClassAvailable(enum class EVehicleClass VehicleClass, bool bIsAvailable); // Function Solarland.SCMPlayerState.RequestSetVehicleClassAvailable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270e4a0
	void RequestSetUserSettingLuaCall(int32_t& Category, int32_t& Name, enum class ECustomParamType ParamType, int32_t& Value); // Function Solarland.SCMPlayerState.RequestSetUserSettingLuaCall // (Final|Native|Public|HasOutParms) // @ game+0x270e320
	void RequestSetUserSetting(int32_t Category, int32_t Name, enum class ECustomParamType ParamType, int32_t Value); // Function Solarland.SCMPlayerState.RequestSetUserSetting // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270e1d0
	void RequestSetRoomPoolPrizeTypeLuaCall(int32_t TypeID); // Function Solarland.SCMPlayerState.RequestSetRoomPoolPrizeTypeLuaCall // (Final|Native|Public) // @ game+0x270e140
	void RequestSetRoomPoolPrizeType(int32_t TypeID); // Function Solarland.SCMPlayerState.RequestSetRoomPoolPrizeType // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270e0b0
	void RequestSetRoomPasswdLuaCall(struct FString Passwd); // Function Solarland.SCMPlayerState.RequestSetRoomPasswdLuaCall // (Final|Native|Public) // @ game+0x270e010
	void RequestSetRoomPasswd(struct FString Passwd); // Function Solarland.SCMPlayerState.RequestSetRoomPasswd // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270df70
	void RequestSetRoomNameLuaCall(struct FString Name); // Function Solarland.SCMPlayerState.RequestSetRoomNameLuaCall // (Final|Native|Public) // @ game+0x270ded0
	void RequestSetRoomName(struct FString Name); // Function Solarland.SCMPlayerState.RequestSetRoomName // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270de30
	void RequestSetRoomLevelLimitLuaCall(int32_t Level); // Function Solarland.SCMPlayerState.RequestSetRoomLevelLimitLuaCall // (Final|Native|Public) // @ game+0x270dda0
	void RequestSetRoomLevelLimit(int32_t Level); // Function Solarland.SCMPlayerState.RequestSetRoomLevelLimit // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270dd10
	void RequestSetInviteEnableLuaCall(bool bEnable); // Function Solarland.SCMPlayerState.RequestSetInviteEnableLuaCall // (Final|Native|Public) // @ game+0x270dc80
	void RequestSetInviteEnable(bool bEnable); // Function Solarland.SCMPlayerState.RequestSetInviteEnable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270dbf0
	void RequestSetExchangeEnableLuaCall(bool bEnable); // Function Solarland.SCMPlayerState.RequestSetExchangeEnableLuaCall // (Final|Native|Public) // @ game+0x270db60
	void RequestSetExchangeEnable(bool bEnable); // Function Solarland.SCMPlayerState.RequestSetExchangeEnable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270dad0
	void RequestPlayersRandomToTeamLuaCall(); // Function Solarland.SCMPlayerState.RequestPlayersRandomToTeamLuaCall // (Final|Native|Public) // @ game+0x270dab0
	void RequestPlayersRandomToTeam(); // Function Solarland.SCMPlayerState.RequestPlayersRandomToTeam // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1ae60f0
	void RequestPlayersFillTeamLuaCall(); // Function Solarland.SCMPlayerState.RequestPlayersFillTeamLuaCall // (Final|Native|Public) // @ game+0x270da90
	void RequestPlayersFillTeam(); // Function Solarland.SCMPlayerState.RequestPlayersFillTeam // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1ae5e50
	void RequestKickPlayerOutLuaCall(struct ASCMPlayerState* Player); // Function Solarland.SCMPlayerState.RequestKickPlayerOutLuaCall // (Final|Native|Public) // @ game+0x270da00
	void RequestKickPlayerOut(struct ASCMPlayerState* Player); // Function Solarland.SCMPlayerState.RequestKickPlayerOut // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270d970
	void RequestExchangeTeamsAndPos(struct ASCMPlayerState* PlayerA, struct ASCMPlayerState* PlayerB); // Function Solarland.SCMPlayerState.RequestExchangeTeamsAndPos // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270d8a0
	void RequestChangeTeam(struct ASCMPlayerState* Player, struct FString TeamName, int32_t NewPosInTeam); // Function Solarland.SCMPlayerState.RequestChangeTeam // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270d770
	void RequesJoinOB(struct ASCMPlayerState* Player); // Function Solarland.SCMPlayerState.RequesJoinOB // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x270d640
	void OnUpdateLifeTime(); // Function Solarland.SCMPlayerState.OnUpdateLifeTime // (Final|Native|Public) // @ game+0x270d500
	void OnRep_RevivingTeammatePS(struct ASolarPlayerState* LastRevivingTeammatePS); // Function Solarland.SCMPlayerState.OnRep_RevivingTeammatePS // (Final|Native|Public) // @ game+0x270d340
	void OnRep_BattleState(); // Function Solarland.SCMPlayerState.OnRep_BattleState // (Final|Native|Private) // @ game+0x270d320
	void OnPlayerKilled(struct ASCMPlayerState* KillerPlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.SCMPlayerState.OnPlayerKilled // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerKill(struct ASCMPlayerState* KilledPlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.SCMPlayerState.OnPlayerKill // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void NotifyUpdateCGMData(struct FString InDataName); // Function Solarland.SCMPlayerState.NotifyUpdateCGMData // (Final|Native|Private) // @ game+0x270d1f0
	void NotifyClientUpdateDataManager(bool bInit); // Function Solarland.SCMPlayerState.NotifyClientUpdateDataManager // (Final|Native|Private) // @ game+0x270d140
	bool NeedConsiderRepData(); // Function Solarland.SCMPlayerState.NeedConsiderRepData // (Final|Native|Public|Const) // @ game+0x270d100
	bool IsPreJoinPlayer(); // Function Solarland.SCMPlayerState.IsPreJoinPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x270d0d0
	void InitTaskInfo(struct FBattlePassInfo& InTaskInfo); // Function Solarland.SCMPlayerState.InitTaskInfo // (Final|Native|Public|HasOutParms) // @ game+0x270cf50
	struct TArray<struct FSCMReplicateHostData> GetReplicateDataArray(); // Function Solarland.SCMPlayerState.GetReplicateDataArray // (Final|Native|Private) // @ game+0x270cf20
	struct TArray<struct ASCMPlayerState*> GetMyTeamPlayerList(); // Function Solarland.SCMPlayerState.GetMyTeamPlayerList // (Final|Native|Public|BlueprintCallable) // @ game+0x270cea0
	void CanPlayerBattle(); // Function Solarland.SCMPlayerState.CanPlayerBattle // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.BattlegroundPlayerState
// Size: 0xd50 (Inherited: 0xcc8)
struct ABattlegroundPlayerState : ASCMPlayerState {
	char pad_CC8[0x20]; // 0xcc8(0x20)
	enum class EBattlegroundPlayerStatus PlayerStatus; // 0xce8(0x01)
	char pad_CE9[0x3]; // 0xce9(0x03)
	int32_t PersonalScore; // 0xcec(0x04)
	char pad_CF0[0x60]; // 0xcf0(0x60)

	void SetPlayerWeaponData(enum class EWeaponSlotType InSlot, int32_t InWeaponID, struct FWeaponPartsData& InWeaponPartsData); // Function Solarland.BattlegroundPlayerState.SetPlayerWeaponData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2662560
	void SetPlayerStatus(enum class EBattlegroundPlayerStatus InPlayerStatus); // Function Solarland.BattlegroundPlayerState.SetPlayerStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x26624e0
	void ServerSetPlayerWeaponData(enum class EWeaponSlotType InSlot, int32_t InWeaponID, struct FWeaponPartsData InWeaponPartsData); // Function Solarland.BattlegroundPlayerState.ServerSetPlayerWeaponData // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2662330
	void ServerSetPlayerStatus(enum class EBattlegroundPlayerStatus InPlayerStatus); // Function Solarland.BattlegroundPlayerState.ServerSetPlayerStatus // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x26622b0
	void ServerOnPlayerConfirmDeploy(enum class EDeploymentType InType); // Function Solarland.BattlegroundPlayerState.ServerOnPlayerConfirmDeploy // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2662230
	void OnServerReceivedPlayerConfirmDeploy(struct FTransform& InTransform); // Function Solarland.BattlegroundPlayerState.OnServerReceivedPlayerConfirmDeploy // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	void OnRep_PlayerStatus(); // Function Solarland.BattlegroundPlayerState.OnRep_PlayerStatus // (Final|Native|Protected) // @ game+0x2662120
	void OnRep_PersonalScore(int32_t OldValue); // Function Solarland.BattlegroundPlayerState.OnRep_PersonalScore // (Final|Native|Protected) // @ game+0x1ae6850
	void OnReceivedPlayerStatusChanged(enum class EBattlegroundPlayerStatus InPlayerStatus); // Function Solarland.BattlegroundPlayerState.OnReceivedPlayerStatusChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnReceivedCreateMapElementMark(struct UMapMarkBase* MapMarkClass, struct AActor* InActor, bool bSupportEdge, bool bSupportEdgeInBigMap, int32_t ZOrder); // Function Solarland.BattlegroundPlayerState.OnReceivedCreateMapElementMark // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerStatusChangeDelegate__DelegateSignature(enum class EBattlegroundPlayerStatus NewStatus); // DelegateFunction Solarland.BattlegroundPlayerState.OnPlayerStatusChangeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnPlayerGoDeploying(); // Function Solarland.BattlegroundPlayerState.OnPlayerGoDeploying // (Final|Native|Private) // @ game+0x2661ee0
	void OnPlayerConfirmDeploy(enum class EDeploymentType InType); // Function Solarland.BattlegroundPlayerState.OnPlayerConfirmDeploy // (Final|Native|Public|BlueprintCallable) // @ game+0x2661e60
	void OnPersonalScoreChangeDelegate__DelegateSignature(enum class EPersonalScoreType InType, struct FString Param); // DelegateFunction Solarland.BattlegroundPlayerState.OnPersonalScoreChangeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	enum class EBattlegroundPlayerStatus GetPlayerStatus(); // Function Solarland.BattlegroundPlayerState.GetPlayerStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2661890
	float GetPlayerRebirthWaitTime(); // Function Solarland.BattlegroundPlayerState.GetPlayerRebirthWaitTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2661860
	struct AFactionInfo* GetFaction(); // Function Solarland.BattlegroundPlayerState.GetFaction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26616e0
	void ClientPersonalScoreChanged(enum class EPersonalScoreType InType, struct FString Param); // Function Solarland.BattlegroundPlayerState.ClientPersonalScoreChanged // (Net|Native|Event|Public|NetClient) // @ game+0x2661380
	void ChangePlayerWeapons(enum class EWeaponSlotType InSlot, int32_t InWeaponID, struct FWeaponPartsData& InWeaponPartsData); // Function Solarland.BattlegroundPlayerState.ChangePlayerWeapons // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarTeamInfo
// Size: 0x2a8 (Inherited: 0x228)
struct ASolarTeamInfo : AInfo {
	char pad_228[0x18]; // 0x228(0x18)
	char TeamID; // 0x240(0x01)
	char TeamRank; // 0x241(0x01)
	char KillCount; // 0x242(0x01)
	char MemberLimit; // 0x243(0x01)
	char pad_244[0x4]; // 0x244(0x04)
	struct FText TeamName; // 0x248(0x18)
	char MatchCount; // 0x260(0x01)
	char bHasSettled : 1; // 0x261(0x01)
	char pad_261_1 : 7; // 0x261(0x01)
	struct FMulticastSparseDelegate OnJoinTeam; // 0x262(0x01)
	struct FMulticastSparseDelegate OnLeaveTeam; // 0x263(0x01)
	char pad_264[0x4]; // 0x264(0x04)
	struct TArray<struct ASolarPlayerState*> BotMembers; // 0x268(0x10)
	struct TArray<struct ASolarPlayerState*> PlayerMembers; // 0x278(0x10)
	struct TArray<struct ASolarPlayerState*> TeamMembers; // 0x288(0x10)
	struct USolarTeamInfoComponent* TeamInfoDetails; // 0x298(0x08)
	char pad_2A0[0x1]; // 0x2a0(0x01)
	enum class EMatchResult MatchResult; // 0x2a1(0x01)
	char pad_2A2[0x6]; // 0x2a2(0x06)

	void Settle(char Rank); // Function Solarland.SolarTeamInfo.Settle // (Final|Native|Public|BlueprintCallable) // @ game+0x2960e60
	void RemoveFromTeam(struct ASolarPlayerState* ps); // Function Solarland.SolarTeamInfo.RemoveFromTeam // (Native|Public|BlueprintCallable) // @ game+0x27b3fa0
	void ReceivedTeamID(); // Function Solarland.SolarTeamInfo.ReceivedTeamID // (Native|Public) // @ game+0x1ae6410
	void ReceivedKillCount(); // Function Solarland.SolarTeamInfo.ReceivedKillCount // (Native|Public) // @ game+0x7ec1b0
	void ReceivedHasSettled(); // Function Solarland.SolarTeamInfo.ReceivedHasSettled // (Native|Public) // @ game+0x7ec190
	void RearrangeMembersPos(); // Function Solarland.SolarTeamInfo.RearrangeMembersPos // (Final|Native|Public|BlueprintCallable) // @ game+0x295fec0
	void OnPlayerStateEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarTeamInfo.OnPlayerStateEndPlay // (Final|Native|Private) // @ game+0x295fb00
	bool IsInTeam(struct ASolarPlayerState* ps); // Function Solarland.SolarTeamInfo.IsInTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x295f590
	bool IsAPlayerTeam(); // Function Solarland.SolarTeamInfo.IsAPlayerTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x295f560
	bool IsAOnlyPlayerTeam(); // Function Solarland.SolarTeamInfo.IsAOnlyPlayerTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x295f530
	bool IsAOnlyBotTeam(); // Function Solarland.SolarTeamInfo.IsAOnlyBotTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x295f500
	bool IsA(enum class ETeamType TeamType); // Function Solarland.SolarTeamInfo.IsA // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x295f470
	void InitFromGameModeConfig(); // Function Solarland.SolarTeamInfo.InitFromGameModeConfig // (Native|Public) // @ game+0x1ae65d0
	bool HasBeenEliminated(); // Function Solarland.SolarTeamInfo.HasBeenEliminated // (Final|Native|Public|BlueprintCallable) // @ game+0x295f440
	struct ASolarPlayerState* GetTeammatePlayerByPosInTeam(int32_t InPosInTeam); // Function Solarland.SolarTeamInfo.GetTeammatePlayerByPosInTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x295f2c0
	int32_t GetSize(); // Function Solarland.SolarTeamInfo.GetSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x295f2a0
	void GetSCMPlayerStateTeamMembers(struct TArray<struct ASCMPlayerState*>& OutTeamMembers); // Function Solarland.SolarTeamInfo.GetSCMPlayerStateTeamMembers // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x295f1f0
	int32_t GetAliveTeammateNum(); // Function Solarland.SolarTeamInfo.GetAliveTeammateNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x295f160
	void AddToTeam(struct ASolarPlayerState* ps); // Function Solarland.SolarTeamInfo.AddToTeam // (Native|Public|BlueprintCallable) // @ game+0x295eef0
};

// Class Solarland.BattlegroundTeamInfo
// Size: 0x2b0 (Inherited: 0x2a8)
struct ABattlegroundTeamInfo : ASolarTeamInfo {
	struct AFactionInfo* MyFaction; // 0x2a8(0x08)

	void OnRep_Faction(); // Function Solarland.BattlegroundTeamInfo.OnRep_Faction // (Native|Public) // @ game+0x1ae4fd0
};

// Class Solarland.BattleHUDForTechDesign
// Size: 0x3b0 (Inherited: 0x3b0)
struct ABattleHUDForTechDesign : ABattleHUDBase {
};

// Class Solarland.UINoticeBase
// Size: 0x428 (Inherited: 0x400)
struct UUINoticeBase : USolarUserWidget {
	struct USolarRichTextBlock* TextWidget; // 0x400(0x08)
	struct UImage* TxtBg; // 0x408(0x08)
	struct UImage* Icon; // 0x410(0x08)
	struct UImage* IconBg; // 0x418(0x08)
	char pad_420[0x8]; // 0x420(0x08)

	void ShowEnterAnimation(); // Function Solarland.UINoticeBase.ShowEnterAnimation // (Native|Public|BlueprintCallable) // @ game+0xbd9710
	void SetIconBrush(struct FString IconPath); // Function Solarland.UINoticeBase.SetIconBrush // (Final|Native|Public|BlueprintCallable) // @ game+0x29c8fe0
	void SetColor(struct FNoticeColorData& InColorData); // Function Solarland.UINoticeBase.SetColor // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x29c8e80
	void ResetIsPlayingVoice(enum class EAkCallbackType CallbackType, struct UAkCallbackInfo* CallbackInfo); // Function Solarland.UINoticeBase.ResetIsPlayingVoice // (Final|Native|Public) // @ game+0x29c8db0
	void ResetIsPlayingBeKillLeaderVoice(enum class EAkCallbackType CallbackType, struct UAkCallbackInfo* CallbackInfo); // Function Solarland.UINoticeBase.ResetIsPlayingBeKillLeaderVoice // (Final|Native|Public) // @ game+0x29c8ce0
	struct UWidgetAnimation* GetExitAnimation(); // Function Solarland.UINoticeBase.GetExitAnimation // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x29c8540
	struct UWidgetAnimation* GetEnterAnimation(); // Function Solarland.UINoticeBase.GetEnterAnimation // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x29c8510
	void DefaultClose(); // Function Solarland.UINoticeBase.DefaultClose // (Final|Native|Public|BlueprintCallable) // @ game+0x29c84f0
	void CloseNotice(); // Function Solarland.UINoticeBase.CloseNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x29c8440
};

// Class Solarland.BattleNoticeEquipReplace
// Size: 0x510 (Inherited: 0x428)
struct UBattleNoticeEquipReplace : UUINoticeBase {
	struct UImage* Img_Item1; // 0x428(0x08)
	struct UImage* Img_Item2; // 0x430(0x08)
	struct UImage* Img_Item1_BG; // 0x438(0x08)
	struct UImage* Img_Item2_BG; // 0x440(0x08)
	struct UTextBlock* Quality1; // 0x448(0x08)
	struct UTextBlock* Quality2; // 0x450(0x08)
	struct UWidgetAnimation* Enter_Animation_1; // 0x458(0x08)
	struct UWidgetAnimation* Enter_Animation_2; // 0x460(0x08)
	struct UWidgetAnimation* Enter_Animation_3; // 0x468(0x08)
	struct TMap<enum class EItemType, struct TSoftObjectPtr<UTexture2D>> DefaultEquipIcons; // 0x470(0x50)
	struct TMap<enum class EWeaponPartType, struct TSoftObjectPtr<UTexture2D>> DefaultWeaponPartIcons; // 0x4c0(0x50)

	void OnEquipReplaceAnimFinished(); // Function Solarland.BattleNoticeEquipReplace.OnEquipReplaceAnimFinished // (Final|Native|Public) // @ game+0x2661bb0
};

// Class Solarland.BattleNoticePickup
// Size: 0x458 (Inherited: 0x428)
struct UBattleNoticePickup : UUINoticeBase {
	struct USolarTextBlock* Txt_PickupNotice_ItemName; // 0x428(0x08)
	struct USolarTextBlock* Txt_PickupNotice_Head; // 0x430(0x08)
	struct USolarTextBlock* Txt_PickupNotice_Tail; // 0x438(0x08)
	struct UImage* Img_Txt_bg; // 0x440(0x08)
	struct TArray<struct FLinearColor> QualityColor; // 0x448(0x10)
};

// Class Solarland.BattleOBHUD
// Size: 0x3c0 (Inherited: 0x3b0)
struct ABattleOBHUD : ABattleHUDBase {
	char pad_3B0[0x8]; // 0x3b0(0x08)
	struct USolarOBUIModel* SolarOBUIModel; // 0x3b8(0x08)

	void SetBattleOBHUDType(enum class EBattleOBHUDType& Type); // Function Solarland.BattleOBHUD.SetBattleOBHUDType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2662450
	void OpenShortCutKeyboard(); // Function Solarland.BattleOBHUD.OpenShortCutKeyboard // (Final|Native|Public|BlueprintCallable) // @ game+0x2662210
	struct UOBHUDDispatcher* GetOBHUDDispatcher(); // Function Solarland.BattleOBHUD.GetOBHUDDispatcher // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2661830
	enum class EBattleOBHUDType GetBattleOBHUDType(); // Function Solarland.BattleOBHUD.GetBattleOBHUDType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2661500
	void AddWidgetToOBRoot(struct UPanelSlot*& ResultSlot, struct UWidget* InChildWidget, struct FName& PanelName, bool bReplaceOld); // Function Solarland.BattleOBHUD.AddWidgetToOBRoot // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2661200
};

// Class Solarland.BattlePassConfigInfo
// Size: 0x38 (Inherited: 0x28)
struct UBattlePassConfigInfo : UObject {
	struct TArray<struct FBattlePassLevelInfo> BattlePassLevel; // 0x28(0x10)

	bool IsMaxLevelWithExp(int32_t BattlePassID, int32_t TotalExp); // Function Solarland.BattlePassConfigInfo.IsMaxLevelWithExp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2661900
	void Initialize(); // Function Solarland.BattlePassConfigInfo.Initialize // (Final|Native|Public) // @ game+0x26618e0
	int32_t GetLevelByTestExp(int32_t BattlePassID, int32_t InTestExp); // Function Solarland.BattlePassConfigInfo.GetLevelByTestExp // (Final|Native|Public) // @ game+0x2661710
	int32_t GetExpNeedForLv(int32_t BattlePassID, int32_t Level); // Function Solarland.BattlePassConfigInfo.GetExpNeedForLv // (Final|Native|Public) // @ game+0x2661610
	int32_t GetBattllePassMaxLevel(int32_t BattlePassID); // Function Solarland.BattlePassConfigInfo.GetBattllePassMaxLevel // (Final|Native|Public) // @ game+0x2661530
};

// Class Solarland.BattlePromptWidget
// Size: 0x7b8 (Inherited: 0x400)
struct UBattlePromptWidget : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct UCanvasPanel* EnterAnimPanel; // 0x410(0x08)
	struct UMeshRectangleWidget* MeshWidget_Arrow; // 0x418(0x08)
	struct UMeshRectangleWidget* MeshWidget_Detail; // 0x420(0x08)
	struct FGameplayTag InhibitTag; // 0x428(0x08)
	struct TMap<enum class EBattlePromptType, enum class EBattlePromptType> DisplayTypeMap; // 0x430(0x50)
	struct TMap<enum class EBattlePromptType, int32_t> TypeUVMap; // 0x480(0x50)
	float ElemIconDifference; // 0x4d0(0x04)
	char pad_4D4[0x4]; // 0x4d4(0x04)
	struct TMap<enum class EBattlePromptType, float> ElemRadiusMap; // 0x4d8(0x50)
	int32_t ThreatFactorDefault; // 0x528(0x04)
	char pad_52C[0x4]; // 0x52c(0x04)
	struct TMap<enum class EBattlePromptType, struct UCurveFloat*> ElemArrowColorCurveMap; // 0x530(0x50)
	struct TMap<enum class EBattlePromptType, struct UCurveFloat*> ElemArrowLengthCurveMap; // 0x580(0x50)
	struct TMap<enum class EBattlePromptType, struct UCurveFloat*> ElemIconScaleCurveMap; // 0x5d0(0x50)
	struct TMap<enum class EBattlePromptType, struct UCurveFloat*> ElemTransparencyCurveMap; // 0x620(0x50)
	int32_t CloseCheckAngleDefault; // 0x670(0x04)
	char pad_674[0x4]; // 0x674(0x04)
	struct UCurveFloat* CloseCheckAngleCurve; // 0x678(0x08)
	float ElemLerpSpeed; // 0x680(0x04)
	int32_t EditorTestColorFactor; // 0x684(0x04)
	int32_t EditorTestLengthFactor; // 0x688(0x04)
	int32_t EditorTestAngle; // 0x68c(0x04)
	struct TSet<struct AActor*> EffectedNightmareActors; // 0x690(0x50)
	char pad_6E0[0x70]; // 0x6e0(0x70)
	struct TArray<struct FPromptElemInfo> Datas; // 0x750(0x10)
	char pad_760[0x58]; // 0x760(0x58)

	void PlayForbidAnim(bool bQuickEnter); // Function Solarland.BattlePromptWidget.PlayForbidAnim // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.BattlePromptWidget.OnSpecTargetChanged // (Final|Native|Public) // @ game+0x2662140
	void OnNightComesActorChanged(struct AActor* InActor); // Function Solarland.BattlePromptWidget.OnNightComesActorChanged // (Final|Native|Public) // @ game+0x2661cf0
	void OnCharacterInhibitTagChanged(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.BattlePromptWidget.OnCharacterInhibitTagChanged // (Final|Native|Public) // @ game+0x2661a60
};

// Class Solarland.BattleSubSundry
// Size: 0x458 (Inherited: 0x400)
struct UBattleSubSundry : USolarUserWidget {
	struct UScrollBox* PanelInformation; // 0x400(0x08)
	struct UCanvasPanel* Panel_BattleChatInfoSetting; // 0x408(0x08)
	struct USolarRichTextBlock* TxtInformation03; // 0x410(0x08)
	struct USolarRichTextBlock* TxtInformation02; // 0x418(0x08)
	struct USolarRichTextBlock* TxtInformation01; // 0x420(0x08)
	struct UWidgetAnimation* AnimInformationDisappear; // 0x428(0x08)
	int32_t MaxMessageStock; // 0x430(0x04)
	float ChatCoolDown; // 0x434(0x04)
	float InfoKeepDuration; // 0x438(0x04)
	char pad_43C[0x1c]; // 0x43c(0x1c)

	void ReceiveQuickMessage(struct FString InName, struct FString InMessage, bool bLocalPlayer, bool bSound, int32_t PosInTeam, struct FString InMessage2); // Function Solarland.BattleSubSundry.ReceiveQuickMessage // (Final|Native|Protected) // @ game+0x26684f0
	void OnPlayerStateRep(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.BattleSubSundry.OnPlayerStateRep // (Final|Native|Protected) // @ game+0x26683a0
};

// Class Solarland.BattleUpgradeEffectCategoryData
// Size: 0x80 (Inherited: 0x30)
struct UBattleUpgradeEffectCategoryData : UDataAsset {
	struct TMap<enum class EBattleUpgradeEffectCategory, struct FBattleUpgradeEffectCategoryConfig> CategoryConfigMap; // 0x30(0x50)

	void BreakBattleUpgradeEffectCategoryColorSet(struct FBattleUpgradeEffectCategoryColorSet& ColorSet, struct FLinearColor& BannerCategoryTextColor, struct FLinearColor& BannerIconColor, struct FLinearColor& BannerBorderColor, struct FLinearColor& BannerBackgroundColor, struct FLinearColor& BadgeIconColor, struct FLinearColor& BadgeBackgroundColor); // Function Solarland.BattleUpgradeEffectCategoryData.BreakBattleUpgradeEffectCategoryColorSet // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2667f10
};

// Class Solarland.BattleUpgradeEffectSettings
// Size: 0x90 (Inherited: 0x38)
struct UBattleUpgradeEffectSettings : UDeveloperSettings {
	struct TSoftObjectPtr<UDataTable> EffectTypeConfig; // 0x38(0x28)
	int32_t SelectEffectHintLocalTextID; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct TSoftObjectPtr<UBattleUpgradeEffectCategoryData> EffectCategoryData; // 0x68(0x28)
};

// Class Solarland.BigWaterGun
// Size: 0x390 (Inherited: 0x228)
struct ABigWaterGun : AActor {
	float CylinderRadius; // 0x228(0x04)
	float CylinderLength; // 0x22c(0x04)
	float TraceInterval; // 0x230(0x04)
	float DamageChaPerInterval; // 0x234(0x04)
	float DamageVehPerInterval; // 0x238(0x04)
	float DamageDecayFirst; // 0x23c(0x04)
	float DamageDecaySecond; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)
	struct FSoftObjectPath MeshPath; // 0x248(0x18)
	struct FName MeshSocket; // 0x260(0x08)
	struct FRotator WaterColumnEffectRotator; // 0x268(0x0c)
	char pad_274[0x4]; // 0x274(0x04)
	struct UParticleSystem* WaterColumnEffect; // 0x278(0x08)
	struct FName InstigatorEffectID; // 0x280(0x08)
	struct UCameraShake* CameraShakeClass; // 0x288(0x08)
	struct UUserWidget* InCrossHairClass; // 0x290(0x08)
	float NearlyEndTime; // 0x298(0x04)
	bool bShowDebug; // 0x29c(0x01)
	char pad_29D[0x3]; // 0x29d(0x03)
	struct FVector TraceStartRelativeLocation; // 0x2a0(0x0c)
	struct FVector TraceStartRelativeLocation_Crouch; // 0x2ac(0x0c)
	float MuzzleTraceOffset; // 0x2b8(0x04)
	struct FName ShotAnimNotifyName; // 0x2bc(0x08)
	struct FName UnequipAnimNotifyName; // 0x2c4(0x08)
	struct FName UnequipAnimNotifyName_Gatling; // 0x2cc(0x08)
	char pad_2D4[0x4]; // 0x2d4(0x04)
	struct UCurveFloat* DamageDecayCurve; // 0x2d8(0x08)
	struct FGameplayTag ChaSlowDownDecayDataTag; // 0x2e0(0x08)
	struct UCurveFloat* ChaSlowDownDecayCurve; // 0x2e8(0x08)
	struct FGameplayTag VehSlowDownDecayDataTag; // 0x2f0(0x08)
	struct UCurveFloat* VehSlowDownDecayCurve; // 0x2f8(0x08)
	float OcclusionCheckZOffset; // 0x300(0x04)
	char pad_304[0x4]; // 0x304(0x04)
	struct TArray<struct ASummonItemBase*> BlockDamageItemClasses; // 0x308(0x10)
	struct USkeletalMeshComponent* Mesh; // 0x318(0x08)
	bool bInFire; // 0x320(0x01)
	bool bHitOther; // 0x321(0x01)
	char pad_322[0x6]; // 0x322(0x06)
	struct UParticleSystemComponent* ClientWaterColumnEffectHandle; // 0x328(0x08)
	int32_t InstigatorEffectHandle; // 0x330(0x04)
	char pad_334[0x4]; // 0x334(0x04)
	struct UCameraShake* CameraShakeInstance; // 0x338(0x08)
	char pad_340[0x8]; // 0x340(0x08)
	struct UCrossHairWidget* CrossHairWidget; // 0x348(0x08)
	struct FGameplayEffectSpecHandle SlowDownEffectHandle; // 0x350(0x10)
	char pad_360[0x20]; // 0x360(0x20)
	struct FName LeftHandIKGripSocketName; // 0x380(0x08)
	struct FGameplayTag BigWaterGunOrnamentTag; // 0x388(0x08)

	void PlayNearlyEndSound(); // Function Solarland.BigWaterGun.PlayNearlyEndSound // (Final|Native|Private) // @ game+0x26684d0
	void OnRep_InFire(); // Function Solarland.BigWaterGun.OnRep_InFire // (Final|Native|Private) // @ game+0x26684b0
	void OnRep_HitOther(); // Function Solarland.BigWaterGun.OnRep_HitOther // (Final|Native|Private) // @ game+0x2668490
	void OnMontageNotifyCallBack(struct FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload); // Function Solarland.BigWaterGun.OnMontageNotifyCallBack // (Final|Native|Private|HasOutParms) // @ game+0x26682b0
};

// Class Solarland.GameManagerBase
// Size: 0x228 (Inherited: 0x228)
struct AGameManagerBase : AInfo {
};

// Class Solarland.BlueCircleManager
// Size: 0x280 (Inherited: 0x228)
struct ABlueCircleManager : AGameManagerBase {
	struct TArray<struct FBlueCircleInfo> BlueCircleInfoList; // 0x228(0x10)
	struct ASolarBlueCircle* BlueCircle; // 0x238(0x08)
	struct AActor* BlueCircleClass; // 0x240(0x08)
	struct TArray<int32_t> LevelToOutcomIDs; // 0x248(0x10)
	struct TArray<int32_t> ExtraOutcomeIDs; // 0x258(0x10)
	struct FBlueCircleInfo ActiveBlueCircleInfo; // 0x268(0x14)
	char pad_27C[0x4]; // 0x27c(0x04)

	void OnRep_ActiveBlueCircleInfo(); // Function Solarland.BlueCircleManager.OnRep_ActiveBlueCircleInfo // (Final|Native|Public) // @ game+0x2668470
	void OnLevelLoaded(struct FString LevelName); // Function Solarland.BlueCircleManager.OnLevelLoaded // (Final|Native|Public) // @ game+0x2668210
	struct TArray<int32_t> GetExtraOutcomeIDs(); // Function Solarland.BlueCircleManager.GetExtraOutcomeIDs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26681e0
	struct FBlueCircleInfo GetActiveBlueCircleInfo(); // Function Solarland.BlueCircleManager.GetActiveBlueCircleInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26681b0
};

// Class Solarland.SpawnerInGuide
// Size: 0x278 (Inherited: 0x228)
struct ASpawnerInGuide : AActor {
	int32_t BotAISpawnerId; // 0x228(0x04)
	int32_t BotAICharacterId; // 0x22c(0x04)
	int32_t TeamID; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct FString AIName; // 0x238(0x10)
	bool bSpawnDeathBox; // 0x248(0x01)
	bool bSpawnBeginPlay; // 0x249(0x01)
	char pad_24A[0x2]; // 0x24a(0x02)
	float DelaySec; // 0x24c(0x04)
	struct FVector SpawnLocationOffset; // 0x250(0x0c)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct ASolarBotAIController* BotAIControllerClass; // 0x260(0x08)
	char pad_268[0x10]; // 0x268(0x10)

	struct ASolarBotAIController* SpawnBotAI(); // Function Solarland.SpawnerInGuide.SpawnBotAI // (Final|Native|Public|BlueprintCallable) // @ game+0x29b1210
	void SetBotAIConfig(struct ASolarBotAIController* Ctrl); // Function Solarland.SpawnerInGuide.SetBotAIConfig // (Native|Public) // @ game+0x295eef0
	struct ASolarBotAIController* GetSpawnedAIController(); // Function Solarland.SpawnerInGuide.GetSpawnedAIController // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29b0470
};

// Class Solarland.BotAISpawnerInGuide
// Size: 0x2b8 (Inherited: 0x278)
struct ABotAISpawnerInGuide : ASpawnerInGuide {
	struct UBehaviorTree* BehaviorTree; // 0x278(0x08)
	struct TArray<struct FDeathBoxItemData> DeathBoxItems; // 0x280(0x10)
	int32_t BotDefaultWeaponId; // 0x290(0x04)
	uint32_t BotShootDisperse; // 0x294(0x04)
	float HitRate; // 0x298(0x04)
	float ActiveDamageRate; // 0x29c(0x04)
	float NoDamageLeftHP; // 0x2a0(0x04)
	float BotAttackRange; // 0x2a4(0x04)
	struct FVector MoveTarget; // 0x2a8(0x0c)
	char pad_2B4[0x4]; // 0x2b4(0x04)
};

// Class Solarland.BTDecorator_BlackboardDelay
// Size: 0xc8 (Inherited: 0xc0)
struct UBTDecorator_BlackboardDelay : UBTDecorator_Blackboard {
	float DelaySeconds; // 0xc0(0x04)
	bool bOnlyDelayLowerPri; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
};

// Class Solarland.BTDecorator_TickFlow
// Size: 0x98 (Inherited: 0x90)
struct UBTDecorator_TickFlow : UBTDecorator_BlackboardBase {
	float TickInterval; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class Solarland.BTDecorator_BotAttributeCompare
// Size: 0xa8 (Inherited: 0x98)
struct UBTDecorator_BotAttributeCompare : UBTDecorator_TickFlow {
	enum class EBotAttrType AttrType; // 0x98(0x01)
	enum class EBotAttrValueType ValueType; // 0x99(0x01)
	enum class EBotAttrOperator Operator; // 0x9a(0x01)
	char pad_9B[0x1]; // 0x9b(0x01)
	float CompareValue; // 0x9c(0x04)
	bool bCheckVehicle; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	float EqualThreshold; // 0xa4(0x04)
};

// Class Solarland.BTDecorator_BotCheck
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheck : UBTDecorator_TickFlow {
	enum class EBotCheckCondition Condition; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	int32_t BulletThreshold; // 0x9c(0x04)
};

// Class Solarland.BTDecorator_BotCheckAIServer
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckAIServer : UBTDecorator_TickFlow {
	enum class EBotCheckAIServer Action; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.BTDecorator_BotCheckGameplayTags
// Size: 0xb8 (Inherited: 0x98)
struct UBTDecorator_BotCheckGameplayTags : UBTDecorator_TickFlow {
	struct FGameplayTagContainer AbilityTags; // 0x98(0x20)
};

// Class Solarland.BTDecorator_BotCheckInEffectArea
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckInEffectArea : UBTDecorator_TickFlow {
	enum class EPerceivableEffectAreaType CheckInAreaType; // 0x98(0x01)
	bool bCheckAreaTendency; // 0x99(0x01)
	enum class EPerceivableEffectAreaTendency AreaTendency; // 0x9a(0x01)
	char pad_9B[0x5]; // 0x9b(0x05)
};

// Class Solarland.BTDecorator_BotCheckNgaiMLAction
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckNgaiMLAction : UBTDecorator_TickFlow {
	enum class EBotCheckNgaiMLAction Action; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.BTDecorator_BotCheckRoleAbility
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_BotCheckRoleAbility : UBTDecorator {
	struct FGameplayTag AbilityTag; // 0x68(0x08)
};

// Class Solarland.BTDecorator_BotCheckShieldUpgradeItem
// Size: 0x68 (Inherited: 0x68)
struct UBTDecorator_BotCheckShieldUpgradeItem : UBTDecorator {
};

// Class Solarland.BTDecorator_BotCheckState
// Size: 0xa8 (Inherited: 0x98)
struct UBTDecorator_BotCheckState : UBTDecorator_TickFlow {
	enum class EBotCheckState CheckState; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	struct FGameplayTag CheckTag; // 0x9c(0x08)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Solarland.BTDecorator_BotCheckTeamMemberState
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckTeamMemberState : UBTDecorator_TickFlow {
	enum class ESolarBotMemberState CheckState; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.BTDecorator_BotCheckWeaponType
// Size: 0x98 (Inherited: 0x90)
struct UBTDecorator_BotCheckWeaponType : UBTDecorator_BlackboardBase {
	enum class EWeaponType WeaponType; // 0x90(0x01)
	bool bCheckById; // 0x91(0x01)
	char pad_92[0x2]; // 0x92(0x02)
	int32_t weaponid; // 0x94(0x04)
};

// Class Solarland.BTDecorator_BotWasRecentlyDetectArea
// Size: 0xb0 (Inherited: 0x98)
struct UBTDecorator_BotWasRecentlyDetectArea : UBTDecorator_TickFlow {
	float TimeThresholdMax; // 0x98(0x04)
	float TimeThresholdMin; // 0x9c(0x04)
	float TimeThresholdMinDeviation; // 0xa0(0x04)
	bool bSpecifyAreaType; // 0xa4(0x01)
	enum class EPerceivableEffectAreaType SpecifiedAreaType; // 0xa5(0x01)
	bool bSpecifyAreaTendency; // 0xa6(0x01)
	enum class EPerceivableEffectAreaTendency SpecifiedAreaTendency; // 0xa7(0x01)
	float MinInfluenceValue; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.BTDecorator_BotWasRecentlyHit
// Size: 0xb0 (Inherited: 0x98)
struct UBTDecorator_BotWasRecentlyHit : UBTDecorator_TickFlow {
	float TimeThresholdMax; // 0x98(0x04)
	bool bIncludeHearingHit; // 0x9c(0x01)
	bool bTriggerDelay; // 0x9d(0x01)
	char pad_9E[0x2]; // 0x9e(0x02)
	float TriggerDelaySeconds; // 0xa0(0x04)
	float TriggerDelaySecondsDeviation; // 0xa4(0x04)
	float TriggerExpiredSeconds; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.BTDecorator_CheckGetOnPlayerVehicle
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_CheckGetOnPlayerVehicle : UBTDecorator_TickFlow {
	float AcceptableRadius; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.BTDecorator_CheckTagState
// Size: 0xc8 (Inherited: 0xc0)
struct UBTDecorator_CheckTagState : UBTDecorator_Blackboard {
	struct FGameplayTag CheckStateTag; // 0xc0(0x08)
};

// Class Solarland.BTDecorator_DistanceCompare
// Size: 0x128 (Inherited: 0x98)
struct UBTDecorator_DistanceCompare : UBTDecorator_TickFlow {
	enum class EDistanceComparison Operator; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct FBlackboardKeySelector BlackboardKeyFrom; // 0xa0(0x28)
	struct FBlackboardKeySelector BlackboardKeyTo; // 0xc8(0x28)
	float DistanceToCompare; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct FBlackboardKeySelector BBK_DistanceToCompare; // 0xf8(0x28)
	bool bDistance2D; // 0x120(0x01)
	char pad_121[0x3]; // 0x121(0x03)
	float EqualThreshold; // 0x124(0x04)
};

// Class Solarland.BTDecorator_TimeLimitRand
// Size: 0x78 (Inherited: 0x70)
struct UBTDecorator_TimeLimitRand : UBTDecorator_TimeLimit {
	float RandDeviation; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class Solarland.BTDecorator_VehicleCheck
// Size: 0xa8 (Inherited: 0x98)
struct UBTDecorator_VehicleCheck : UBTDecorator_TickFlow {
	struct TArray<int32_t> VehicleIDs; // 0x98(0x10)
};

// Class Solarland.BuffEffectActorElem
// Size: 0x48 (Inherited: 0x28)
struct UBuffEffectActorElem : UObject {
	char pad_28[0x20]; // 0x28(0x20)
};

// Class Solarland.BuffEffectLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBuffEffectLibrary : UBlueprintFunctionLibrary {

	void StopScreenEffect(struct UObject* WorldContextObject, int32_t InHandle); // Function Solarland.BuffEffectLibrary.StopScreenEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x266e750
	void StopActorEffect(struct UObject* WorldContextObject, int32_t InHandle); // Function Solarland.BuffEffectLibrary.StopActorEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x266e600
	int32_t StartScreenEffect(struct UObject* WorldContextObject, struct FString RowName); // Function Solarland.BuffEffectLibrary.StartScreenEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x266e3d0
	int32_t StartActorEffect(struct UObject* WorldContextObject, struct FString RowName, struct USceneComponent* AttachToComponent); // Function Solarland.BuffEffectLibrary.StartActorEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x266e0d0
	bool IsDamageScreenEffectEnabled(struct UObject* WorldContextObject); // Function Solarland.BuffEffectLibrary.IsDamageScreenEffectEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x266de70
	struct TArray<struct UParticleSystemComponent*> GetActorEffectPSComponents(struct UObject* WorldContextObject, int32_t InHandle); // Function Solarland.BuffEffectLibrary.GetActorEffectPSComponents // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x266dc80
};

// Class Solarland.BuffEffectScreenPanel
// Size: 0x5b0 (Inherited: 0x400)
struct UBuffEffectScreenPanel : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct UCanvasPanel* LayerDurationGroup; // 0x410(0x08)
	struct UCanvasPanel* LayerDurationTwoSidePart; // 0x418(0x08)
	struct UCanvasPanel* LayerDurationBottomHalfPart; // 0x420(0x08)
	struct UCanvasPanel* LayerDurationBorderPart; // 0x428(0x08)
	struct UCanvasPanel* LayerDurationTopHalfPart; // 0x430(0x08)
	struct UCanvasPanel* LayerDurationFullPart; // 0x438(0x08)
	struct UCanvasPanel* LayerInstantGroup; // 0x440(0x08)
	struct UCanvasPanel* LayerInstantTwoSidePart; // 0x448(0x08)
	struct UCanvasPanel* LayerInstantBottomHalfPart; // 0x450(0x08)
	struct UCanvasPanel* LayerInstantBorderPart; // 0x458(0x08)
	struct UCanvasPanel* LayerInstantTopHalfPart; // 0x460(0x08)
	struct UCanvasPanel* LayerInstantFullPart; // 0x468(0x08)
	char pad_470[0xa0]; // 0x470(0xa0)
	struct TMap<int32_t, struct USolarScreenEffectWidget*> HandleToWidget; // 0x510(0x50)
	struct TMap<struct USolarScreenEffectWidget*, struct FScreenEffectWidgetCacheInfo> WidgetsCanBeReused; // 0x560(0x50)
};

// Class Solarland.BuffEffectSubsystem
// Size: 0x258 (Inherited: 0x30)
struct UBuffEffectSubsystem : UWorldSubsystem {
	char pad_30[0x20]; // 0x30(0x20)
	struct TMap<uint32_t, struct FBuffParticleEffectGroup> BuffEffectActorGroupMap; // 0x50(0x50)
	struct TMap<uint32_t, struct UBuffEffectActorElem*> BuffEffectActorElemMap; // 0xa0(0x50)
	struct TMap<int32_t, struct FBuffParticleEffectInstance> BuffEffectActorHandleMap; // 0xf0(0x50)
	struct FBuffEffectActorElemPool BuffEffectActorElemPool; // 0x140(0x10)
	struct FMulticastInlineDelegate OnDamageScreenEffectEnableChangedDelegate; // 0x150(0x10)
	struct TMap<enum class EBuffEffectTagType, struct FScreenEffectGroup> ScreenEffectGroups; // 0x160(0x50)
	char pad_1B0[0xa8]; // 0x1b0(0xa8)

	void StopScreenEffect(int32_t InHandle); // Function Solarland.BuffEffectSubsystem.StopScreenEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x266e810
	void StopActorEffect(int32_t InHandle); // Function Solarland.BuffEffectSubsystem.StopActorEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x266e6c0
	int32_t StartScreenEffectSafe(struct FName& RowName); // Function Solarland.BuffEffectSubsystem.StartScreenEffectSafe // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x266e560
	int32_t StartScreenEffect(struct FString RowName); // Function Solarland.BuffEffectSubsystem.StartScreenEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x266e4b0
	int32_t StartActorEffectSafe(struct FName& RowName, struct USceneComponent* AttachToComponent); // Function Solarland.BuffEffectSubsystem.StartActorEffectSafe // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x266e2e0
	int32_t StartActorEffect(struct FString RowName, struct USceneComponent* AttachToComponent); // Function Solarland.BuffEffectSubsystem.StartActorEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x266e1f0
	void OnPSCompFinish(struct UParticleSystemComponent* PSComponent); // Function Solarland.BuffEffectSubsystem.OnPSCompFinish // (Final|Native|Private) // @ game+0x266df30
	void OnDamageScreenEffectEnableChangedDelegate__DelegateSignature(bool bEnabled); // DelegateFunction Solarland.BuffEffectSubsystem.OnDamageScreenEffectEnableChangedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	bool IsDamageScreenEffectEnabled(); // Function Solarland.BuffEffectSubsystem.IsDamageScreenEffectEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x266df00
	struct TArray<struct UParticleSystemComponent*> GetActorEffectPSComponents(int32_t InHandle); // Function Solarland.BuffEffectSubsystem.GetActorEffectPSComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x266dd90
};

// Class Solarland.CameraAnimationSequenceCameraStandIn
// Size: 0x700 (Inherited: 0x60)
struct UCameraAnimationSequenceCameraStandIn : USceneComponentTransformStandIn {
	float FieldOfView; // 0x60(0x04)
	char bConstrainAspectRatio : 1; // 0x64(0x01)
	char pad_64_1 : 7; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	float AspectRatio; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct FPostProcessSettings PostProcessSettings; // 0x70(0x5c0)
	float PostProcessBlendWeight; // 0x630(0x04)
	struct FCameraFilmbackSettings Filmback; // 0x634(0x0c)
	struct FCameraLensSettings LensSettings; // 0x640(0x18)
	struct FCameraFocusSettings FocusSettings; // 0x658(0x58)
	float CurrentFocalLength; // 0x6b0(0x04)
	float CurrentAperture; // 0x6b4(0x04)
	float CurrentFocusDistance; // 0x6b8(0x04)
	char pad_6BC[0x44]; // 0x6bc(0x44)
};

// Class Solarland.CameraAnimationSequencePlayer
// Size: 0x808 (Inherited: 0x28)
struct UCameraAnimationSequencePlayer : UObject {
	char pad_28[0x450]; // 0x28(0x450)
	struct UObject* BoundObjectOverride; // 0x478(0x08)
	struct UMovieSceneSequence* Sequence; // 0x480(0x08)
	struct FMovieSceneRootEvaluationTemplateInstance RootTemplateInstance; // 0x488(0x320)
	char pad_7A8[0x60]; // 0x7a8(0x60)
};

// Class Solarland.CameraModifier_CameraShakeWithCurve
// Size: 0xb8 (Inherited: 0x48)
struct UCameraModifier_CameraShakeWithCurve : UCameraModifier {
	struct TMap<struct UCameraShakeWithCurve*, struct FCameraShakeWithCurvePool> ShakePoolByClass; // 0x48(0x50)
	struct TArray<struct FCameraShakeWithCurveTemplatePool> ShakePoolByTemplate; // 0x98(0x10)
	struct TArray<struct FActiveCameraShakeWithCurve> ActiveShakes; // 0xa8(0x10)
};

// Class Solarland.CameraShakeWithCurve
// Size: 0xe0 (Inherited: 0x28)
struct UCameraShakeWithCurve : UObject {
	bool bSingleInstance; // 0x28(0x01)
	bool bDisableObjectPool; // 0x29(0x01)
	char pad_2A[0x6]; // 0x2a(0x06)
	struct UCameraModifier_CameraShakeWithCurve* Modifier; // 0x30(0x08)
	float ShakeTime; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRuntimeFloatCurve ShakeCurve; // 0x40(0x88)
	struct TArray<struct UCameraShakeWithCurve_Element*> ShakeElements; // 0xc8(0x10)
	char pad_D8[0x8]; // 0xd8(0x08)
};

// Class Solarland.CameraShakeWithCurve_Element
// Size: 0x28 (Inherited: 0x28)
struct UCameraShakeWithCurve_Element : UObject {
};

// Class Solarland.CameraShakeWithCurve_Location
// Size: 0x60 (Inherited: 0x28)
struct UCameraShakeWithCurve_Location : UCameraShakeWithCurve_Element {
	struct FSymmetricRangeFloat XRange; // 0x28(0x0c)
	struct FSymmetricRangeFloat YRange; // 0x34(0x0c)
	struct FSymmetricRangeFloat ZRange; // 0x40(0x0c)
	bool bLocalSpace; // 0x4c(0x01)
	char pad_4D[0x13]; // 0x4d(0x13)
};

// Class Solarland.CameraShakeWithCurve_Rotation
// Size: 0x58 (Inherited: 0x28)
struct UCameraShakeWithCurve_Rotation : UCameraShakeWithCurve_Element {
	struct FSymmetricRangeFloat PitchRange; // 0x28(0x0c)
	struct FSymmetricRangeFloat YawRange; // 0x34(0x0c)
	struct FSymmetricRangeFloat RollRange; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Solarland.CameraShakeWithCurve_FOV
// Size: 0x38 (Inherited: 0x28)
struct UCameraShakeWithCurve_FOV : UCameraShakeWithCurve_Element {
	struct FRangeFloat FOVRange; // 0x28(0x08)
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.CapsuleFormationData
// Size: 0x90 (Inherited: 0x30)
struct UCapsuleFormationData : UDataAsset {
	struct TMap<char, struct FEchelonFormation> TeamFormation; // 0x30(0x50)
	struct FCruiseFormation CruiseFormation; // 0x80(0x10)

	void OverrideTeamFormation(struct TMap<char, struct FEchelonFormation>& InNewFormation); // Function Solarland.CapsuleFormationData.OverrideTeamFormation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x266dfc0
	void ClearTeamFormationData(); // Function Solarland.CapsuleFormationData.ClearTeamFormationData // (Final|Native|Public|BlueprintCallable) // @ game+0x266dc60
	void ClearCruiseFormationData(); // Function Solarland.CapsuleFormationData.ClearCruiseFormationData // (Final|Native|Public|BlueprintCallable) // @ game+0x266dc40
	void AddTeamFormationLocation(char InEchelon, struct FVector& InLocation); // Function Solarland.CapsuleFormationData.AddTeamFormationLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x266db70
	void AddLocationToTeamFormation(struct TMap<char, struct FEchelonFormation>& InFormation, char InEchelon, struct FVector& InLocation); // Function Solarland.CapsuleFormationData.AddLocationToTeamFormation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x266d9e0
	void AddEchelonFormation(char InEchelon, struct FEchelonFormation& InFormation); // Function Solarland.CapsuleFormationData.AddEchelonFormation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x266d8f0
	void AddCruiseFormation(struct FCruiseFormation& InFormation); // Function Solarland.CapsuleFormationData.AddCruiseFormation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x266d840
};

// Class Solarland.CardView
// Size: 0x228 (Inherited: 0x138)
struct UCardView : UWidget {
	struct UUserWidget* EntryWidgetClass; // 0x138(0x08)
	struct FUserWidgetPool EntryWidgetPool; // 0x140(0x80)
	float CenterScale; // 0x1c0(0x04)
	float CenterOffset; // 0x1c4(0x04)
	float PageSpacing; // 0x1c8(0x04)
	float AlignmentPercent; // 0x1cc(0x04)
	enum class EOrientation Orientation; // 0x1d0(0x01)
	char pad_1D1[0x7]; // 0x1d1(0x07)
	struct TArray<struct UObject*> ListItems; // 0x1d8(0x10)
	char pad_1E8[0x10]; // 0x1e8(0x10)
	struct FMulticastInlineDelegate BP_OnItemClicked; // 0x1f8(0x10)
	struct FMulticastInlineDelegate BP_OnSelectedItemChanged; // 0x208(0x10)
	struct FMulticastInlineDelegate BP_OnSelectedIndexChanged; // 0x218(0x10)

	void SetListItems(struct TArray<struct UObject*>& InListItems); // Function Solarland.CardView.SetListItems // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x26722f0
	void RemoveItem(struct UObject* InItem); // Function Solarland.CardView.RemoveItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x2673500
	struct TArray<struct UObject*> GetListItems(); // Function Solarland.CardView.GetListItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2673070
	struct TArray<struct UUserWidget*> GetDisplayedEntryWidgets(); // Function Solarland.CardView.GetDisplayedEntryWidgets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2672e70
	void ClearListItems(); // Function Solarland.CardView.ClearListItems // (Final|Native|Protected|BlueprintCallable) // @ game+0x2672880
	void BP_SetSelectedItem(struct UObject* Item); // Function Solarland.CardView.BP_SetSelectedItem // (Final|Native|Private|BlueprintCallable) // @ game+0x2672470
	void BP_SetSelectedIndex(int32_t Index, bool bFromFirst); // Function Solarland.CardView.BP_SetSelectedIndex // (Final|Native|Private|BlueprintCallable) // @ game+0x26723a0
	void BP_SetListItems(struct TArray<struct UObject*>& InListItems); // Function Solarland.CardView.BP_SetListItems // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x26722f0
	struct UObject* BP_GetSelectedItem(); // Function Solarland.CardView.BP_GetSelectedItem // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x26722c0
	int32_t BP_GetSelectedIndex(); // Function Solarland.CardView.BP_GetSelectedIndex // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x2672290
	void AddItem(struct UObject* InItem); // Function Solarland.CardView.AddItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x2672200
};

// Class Solarland.CardViewDesignerPreviewItem
// Size: 0x28 (Inherited: 0x28)
struct UCardViewDesignerPreviewItem : UObject {
};

// Class Solarland.CGCustomeBattleRoyaleComponent
// Size: 0xd8 (Inherited: 0xd0)
struct UCGCustomeBattleRoyaleComponent : UGameModeCompBase {
	char pad_D0[0x8]; // 0xd0(0x08)

	void ChangeEnvironmentTime(struct ASolarTimeLineManager* SolarTimeLineManager, int32_t DaylightChange); // Function Solarland.CGCustomeBattleRoyaleComponent.ChangeEnvironmentTime // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.CGFormula
// Size: 0x258 (Inherited: 0x228)
struct ACGFormula : AInfo {
	struct FKnockoutParams KnockoutParams; // 0x228(0x28)
	bool bInitKnockParams; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)

	struct TArray<struct FString> MakeStringForLuaByAnyStruct(struct UObject* AnyStruct); // Function Solarland.CGFormula.MakeStringForLuaByAnyStruct // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26732f0
	bool IsSettlementBagItem(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.IsSettlementBagItem // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void InitKnockoutPointParams(struct FKnockoutParams& InParams); // Function Solarland.CGFormula.InitKnockoutPointParams // (Final|Native|Public|HasOutParms) // @ game+0x2673210
	int32_t GetZomborg(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetZomborg // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x2d0d160
	void GetWeeklyChallenge(struct FString InSolarPlayerID, struct TArray<struct FString>& OutChallengeName, struct TArray<int32_t>& OutChallengeValue); // Function Solarland.CGFormula.GetWeeklyChallenge // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetWeaponExp(struct ASolarPlayerState* InPS, int32_t InWeaponID); // Function Solarland.CGFormula.GetWeaponExp // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void GetTeamScoreComparison(struct ASolarPlayerState* InPS, struct FString& OutTeamScore); // Function Solarland.CGFormula.GetTeamScoreComparison // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void GetStrategyGuideConditions(struct ASolarPlayerState* InPS, struct TArray<int32_t>& OutResult); // Function Solarland.CGFormula.GetStrategyGuideConditions // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void GetShowPageIndexs(struct ASolarPlayerState* InPS, struct FSettlePageParam& InParam, struct TArray<int32_t>& OutResult); // Function Solarland.CGFormula.GetShowPageIndexs // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<struct FSettlementReward> GetSettlementRewards(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetSettlementRewards // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<struct FString> GetPersonalResultPlayerExData(struct FString SolarPlayerID, struct FString& InPBName); // Function Solarland.CGFormula.GetPersonalResultPlayerExData // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	float GetKDA(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetKDA // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<struct FString> GetGroupResultPlayerExData(struct FString SolarPlayerID, struct FString& InPBName); // Function Solarland.CGFormula.GetGroupResultPlayerExData // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<struct FSettlementParam_ExtraRewardInfo> GetExtraRewards(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetExtraRewards // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetCombatScore(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetCombatScore // (Native|Event|Public|BlueprintEvent) // @ game+0x2672c30
	struct TMap<int32_t, int32_t> GetCollectionItemRewards(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetCollectionItemRewards // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void GetCharacterExp(struct ASolarPlayerState* InPS, int32_t& OutGetExp, struct TArray<int32_t>& OutReason); // Function Solarland.CGFormula.GetCharacterExp // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetAccountExp(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetAccountExp // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x2d0d160
	int32_t CalculateTeamRank(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.CalculateTeamRank // (Native|Event|Public|BlueprintEvent) // @ game+0x26727e0
	struct TArray<enum class ESCMPlayerPunishType> CalculatePunish(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.CalculatePunish // (Native|Event|Public|BlueprintEvent) // @ game+0x2672700
	int32_t CalculatePlayerRank(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.CalculatePlayerRank // (Native|Event|Public|BlueprintEvent) // @ game+0x2672660
	float CalculateMVPScore(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.CalculateMVPScore // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	int32_t CalculateKnockoutPoints(int32_t InTeamRank, int32_t InKillNum, float InTotalDamage, float InTotalDamageTaken); // Function Solarland.CGFormula.CalculateKnockoutPoints // (Final|Native|Public) // @ game+0x2672500
};

// Class Solarland.CGMCrossLevelDataMgr
// Size: 0x80 (Inherited: 0x28)
struct UCGMCrossLevelDataMgr : UObject {
	struct TMap<struct FString, struct UObject*> CrossLevelData; // 0x28(0x50)
	char pad_78[0x8]; // 0x78(0x08)

	void SkipNextClear(); // Function Solarland.CGMCrossLevelDataMgr.SkipNextClear // (Final|Native|Public|BlueprintCallable) // @ game+0x2673660
	void RegistryCrossLevelData(struct FString InSoltName, struct UObject* InDataObj); // Function Solarland.CGMCrossLevelDataMgr.RegistryCrossLevelData // (Final|Native|Public|BlueprintCallable) // @ game+0x2673420
	struct UObject* GetCrossLevelData(struct FString InSoltName); // Function Solarland.CGMCrossLevelDataMgr.GetCrossLevelData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2672cd0
};

// Class Solarland.CustomGameModeComponent
// Size: 0xd0 (Inherited: 0xd0)
struct UCustomGameModeComponent : UGameModeCompBase {
};

// Class Solarland.CGMDataComponent
// Size: 0xe8 (Inherited: 0xd0)
struct UCGMDataComponent : UCustomGameModeComponent {
	struct AGameDataManager* DataManager; // 0xd0(0x08)
	struct UDataTable* DataTable; // 0xd8(0x08)
	float ConfigRepDeltaTime; // 0xe0(0x04)
	float ConfigRepMaxNum; // 0xe4(0x04)
};

// Class Solarland.CGMDeathComponent
// Size: 0xd0 (Inherited: 0xd0)
struct UCGMDeathComponent : UCustomGameModeComponent {

	void ReceivePlayerResurrect(struct ASolarCharacter* ResurrectCharacter, struct ASCMPlayerState* ResurrectPlayer); // Function Solarland.CGMDeathComponent.ReceivePlayerResurrect // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerKill(struct ASCMPlayerState* Killer, struct ASCMPlayerState* Killed, struct TArray<struct ASCMPlayerState*>& Assists, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.CGMDeathComponent.ReceivePlayerKill // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerDeathVerge(struct ASCMPlayerState* InAttacker, struct ASCMPlayerState* InDeathVergePlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.CGMDeathComponent.ReceivePlayerDeathVerge // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.GameplayConfigBase
// Size: 0x38 (Inherited: 0x30)
struct UGameplayConfigBase : UDataAsset {
	struct UGameModeGlobalSetting* GameModeSettingTemplate; // 0x30(0x08)
};

// Class Solarland.CGMGameplayConfig
// Size: 0x420 (Inherited: 0x38)
struct UCGMGameplayConfig : UGameplayConfigBase {
	struct ACGFormula* Formula; // 0x38(0x08)
	bool bAllowChangePlayer; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct USettlementPageConfig* SettlePageConfig; // 0x48(0x08)
	struct TMap<struct FString, struct FSCMMapConfig> MapConfig; // 0x50(0x50)
	float VictorySlomoDelay; // 0xa0(0x04)
	float VictorySlomoDilation; // 0xa4(0x04)
	float VictorySlomoDuration; // 0xa8(0x04)
	struct FCharacterMovementNetworkOptions VictoryMovementNetworkOptions; // 0xac(0x0c)
	struct TMap<struct FString, float> VictorySFXAndVOMap; // 0xb8(0x50)
	float VictoryMusicDelayTime; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct FString VictoryMusicName; // 0x110(0x10)
	float VictoryUIWaittime; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct FSoftObjectPath VictoryHitEffect; // 0x128(0x18)
	struct FName VictoryHitSocketName; // 0x140(0x08)
	float VictoryHitEffectDelayTime; // 0x148(0x04)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct FSoftObjectPath VictoryDeathEffect; // 0x150(0x18)
	float VictoryDeathEffectDelayTime; // 0x168(0x04)
	char pad_16C[0x4]; // 0x16c(0x04)
	struct FDataManagerConfig DataManagerConfig; // 0x170(0x10)
	bool EnableUltimateSkill; // 0x180(0x01)
	enum class ERoleSkillOperation UltimateSkillStateOperationOnInit; // 0x181(0x01)
	bool EnableTacticalSkill; // 0x182(0x01)
	enum class ERoleSkillOperation TacticalSkillStateOperationOnInit; // 0x183(0x01)
	int32_t AirDropSkillMode; // 0x184(0x04)
	struct TArray<struct UGameplayAbility*> CharacterExtraAbilities; // 0x188(0x10)
	bool EnableWeaponUpgrade; // 0x198(0x01)
	char pad_199[0x3]; // 0x199(0x03)
	int32_t InitInGamePlayerLevel; // 0x19c(0x04)
	bool EnablePlayerUpgrade; // 0x1a0(0x01)
	char pad_1A1[0x7]; // 0x1a1(0x07)
	struct FInGameLevelingConfig InGameLevelingConfig; // 0x1a8(0x08)
	struct TArray<enum class ESolarTablesEnum_BattleUpgradeEffectType> CharacterDamageUpgradeTypes; // 0x1b0(0x10)
	struct FExpItemConfig ExpItemConfig; // 0x1c0(0x10)
	struct FExpItemReduceRate ExpItemReduceRateConfig; // 0x1d0(0x08)
	struct FBoxBurstItemConfig BoxBurstItemConfig; // 0x1d8(0x08)
	bool bIfShouldSpawnDeathBox; // 0x1e0(0x01)
	bool bIfSupportDeathverge; // 0x1e1(0x01)
	char pad_1E2[0x6]; // 0x1e2(0x06)
	struct TMap<int32_t, int32_t> DeathBoxEnergyLimitConfig; // 0x1e8(0x50)
	bool bAutoMarkDamagedEnemy; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)
	struct TMap<enum class ECustomParamType, float> CustomParams; // 0x240(0x50)
	float MoveSpeedScale; // 0x290(0x04)
	float ShieldScale; // 0x294(0x04)
	float HealthScale; // 0x298(0x04)
	int32_t Resurgence; // 0x29c(0x04)
	bool EnableSect; // 0x2a0(0x01)
	char pad_2A1[0x7]; // 0x2a1(0x07)
	struct FCustomRoomData CustomRoomData; // 0x2a8(0xd8)
	bool bIsCustomRoomMode; // 0x380(0x01)
	bool bEnableTracking; // 0x381(0x01)
	char pad_382[0x2]; // 0x382(0x02)
	float InitTrackingDelay; // 0x384(0x04)
	float TrackingTimeInterval; // 0x388(0x04)
	float DefaultTrackMaxRevealDistance; // 0x38c(0x04)
	float TrackReplaceDistance; // 0x390(0x04)
	float MinRevealDistance; // 0x394(0x04)
	float TrackTimeout; // 0x398(0x04)
	int32_t MaxTrackNum; // 0x39c(0x04)
	struct FFinalsBGMData FinalsBGMData; // 0x3a0(0x28)
	bool bEnableSkydivingTrail; // 0x3c8(0x01)
	char pad_3C9[0x7]; // 0x3c9(0x07)
	struct TSoftClassPtr<UObject> FlyTrailClass; // 0x3d0(0x28)
	struct TSoftClassPtr<UObject> DebugTrailEffectClass; // 0x3f8(0x28)

	bool TryGetCustomParam(enum class ECustomParamType InType, float& OutValue); // Function Solarland.CGMGameplayConfig.TryGetCustomParam // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2673680
	void SetCustomParam(enum class ECustomParamType InType, float InValue); // Function Solarland.CGMGameplayConfig.SetCustomParam // (Final|Native|Public|BlueprintCallable) // @ game+0x2673590
	void OnRep_MoveSpeedScale(); // Function Solarland.CGMGameplayConfig.OnRep_MoveSpeedScale // (Final|Native|Public) // @ game+0x2673400
	bool IsEnableSect(); // Function Solarland.CGMGameplayConfig.IsEnableSect // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26732d0
	bool IsCustomRoomMode(); // Function Solarland.CGMGameplayConfig.IsCustomRoomMode // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0xcb4e00
	int32_t GetRequiredExpForLevel(int32_t InLevel); // Function Solarland.CGMGameplayConfig.GetRequiredExpForLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2673170
	int32_t GetMaxShieldMatCountToDeathbox(int32_t InLevel); // Function Solarland.CGMGameplayConfig.GetMaxShieldMatCountToDeathbox // (Final|Native|Public|Const) // @ game+0x26730d0
	int32_t GetMaxInGameLevel(); // Function Solarland.CGMGameplayConfig.GetMaxInGameLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26730a0
	float GetExpItemReduceRate(int32_t DeathCount); // Function Solarland.CGMGameplayConfig.GetExpItemReduceRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2672fd0
	int32_t GetExpItemCountByLevel(int32_t InLevel, int32_t InLevelGap); // Function Solarland.CGMGameplayConfig.GetExpItemCountByLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2672f00
	struct FCustomRoomData GetCustomRoomData(); // Function Solarland.CGMGameplayConfig.GetCustomRoomData // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x2672d80
	struct TArray<int32_t> GetBurstItemSplitPiles(int32_t ItemID); // Function Solarland.CGMGameplayConfig.GetBurstItemSplitPiles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2672b50
	struct FRotator GetBurstItemRotator(int32_t ItemID); // Function Solarland.CGMGameplayConfig.GetBurstItemRotator // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2672aa0
	struct TArray<float> GetBurstItemModelScale(int32_t ItemID); // Function Solarland.CGMGameplayConfig.GetBurstItemModelScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26729c0
	int32_t GetBurstItemMaxPileNum(int32_t ItemID); // Function Solarland.CGMGameplayConfig.GetBurstItemMaxPileNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2672920
	struct TArray<int32_t> GetBurstItemIDs(); // Function Solarland.CGMGameplayConfig.GetBurstItemIDs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26728a0
};

// Class Solarland.CGMLogicComponent
// Size: 0x180 (Inherited: 0xd0)
struct UCGMLogicComponent : UCustomGameModeComponent {
	float TimeOutSeconds; // 0xd0(0x04)
	char pad_D4[0x64]; // 0xd4(0x64)
	bool bUseNewAiComp; // 0x138(0x01)
	char pad_139[0x7]; // 0x139(0x07)
	struct FMulticastInlineDelegate OnConfigInitiated; // 0x140(0x10)
	struct FMulticastInlineDelegate OnBattleStart; // 0x150(0x10)
	struct FMulticastInlineDelegate OnPlayerOut; // 0x160(0x10)
	struct FMulticastInlineDelegate OnPlayerReconnected; // 0x170(0x10)

	void UpdateAliveTeamsAndPlayers(); // Function Solarland.CGMLogicComponent.UpdateAliveTeamsAndPlayers // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ad6f40
	void ReceiveSpectatorJoinData(struct ASCMPlayerState* Player); // Function Solarland.CGMLogicComponent.ReceiveSpectatorJoinData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveServerLevelLoaded(struct FString LevelName); // Function Solarland.CGMLogicComponent.ReceiveServerLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool ReceivePlayerTeamPreJoinRequest(struct TArray<struct ASCMPlayerState*>& PreJoinPlayers, int32_t TeamID); // Function Solarland.CGMLogicComponent.ReceivePlayerTeamPreJoinRequest // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2677cd0
	bool ReceivePlayerReJoinRequest(struct FString PlayerId, struct FString& ErrorMsg); // Function Solarland.CGMLogicComponent.ReceivePlayerReJoinRequest // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2677bb0
	void ReceivePlayerReJoin(struct ASCMPlayerState* NewPlayer); // Function Solarland.CGMLogicComponent.ReceivePlayerReJoin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerPreLogin(struct FString PlayerId, struct ASCMPlayerState* OfflinePlayer, struct FString& ErrorMsg); // Function Solarland.CGMLogicComponent.ReceivePlayerPreLogin // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerNonSpectatorJoinData(struct ASCMPlayerState* Player); // Function Solarland.CGMLogicComponent.ReceivePlayerNonSpectatorJoinData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerLevelLoaded(struct ASCMPlayerController* Player, struct FString LevelName); // Function Solarland.CGMLogicComponent.ReceivePlayerLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerJoinData(struct FString PlayerId); // Function Solarland.CGMLogicComponent.ReceivePlayerJoinData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerJoinBattle(struct ASCMPlayerState* NewPlayer, bool IsAI); // Function Solarland.CGMLogicComponent.ReceivePlayerJoinBattle // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerJoin(struct ASCMPlayerState* NewPlayer, bool IsAI); // Function Solarland.CGMLogicComponent.ReceivePlayerJoin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerCancelJoin(struct FString PlayerId); // Function Solarland.CGMLogicComponent.ReceivePlayerCancelJoin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerBattleEnd(struct ASCMPlayerState* Player, enum class ESCMPlayerOutType OutType); // Function Solarland.CGMLogicComponent.ReceivePlayerBattleEnd // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveOBPlayersChanged(); // Function Solarland.CGMLogicComponent.ReceiveOBPlayersChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveGameModeInit(); // Function Solarland.CGMLogicComponent.ReceiveGameModeInit // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveBattleTick(float BattleTime, float DeltaTime); // Function Solarland.CGMLogicComponent.ReceiveBattleTick // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveBattleEnd(); // Function Solarland.CGMLogicComponent.ReceiveBattleEnd // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveBattleBegin(); // Function Solarland.CGMLogicComponent.ReceiveBattleBegin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnStartBattle(); // Function Solarland.CGMLogicComponent.OnStartBattle // (Final|Native|Public|BlueprintCallable) // @ game+0x2677b90
	void OnPlayerSettled(struct ASCMPlayerState* Player); // Function Solarland.CGMLogicComponent.OnPlayerSettled // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerReconnect(struct ASCMPlayerState* Player); // Function Solarland.CGMLogicComponent.OnPlayerReconnect // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerOfflineTimeOut(struct ASCMPlayerState* OfflineTimeoutPlayer); // Function Solarland.CGMLogicComponent.OnPlayerOfflineTimeOut // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerGiveUp(struct ASCMPlayerState* OfflineTimeoutPlayer); // Function Solarland.CGMLogicComponent.OnPlayerGiveUp // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerDisconnect(struct ASCMPlayerState* OfflinePlayer); // Function Solarland.CGMLogicComponent.OnPlayerDisconnect // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerCheat(struct ASCMPlayerState* CheatPlayer); // Function Solarland.CGMLogicComponent.OnPlayerCheat // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerAbnormal(struct ASCMPlayerState* CheatPlayer); // Function Solarland.CGMLogicComponent.OnPlayerAbnormal // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnMatchEnd(int32_t RPCID); // Function Solarland.CGMLogicComponent.OnMatchEnd // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnDSClose(); // Function Solarland.CGMLogicComponent.OnDSClose // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnBotAIDataReady(int32_t AICount); // Function Solarland.CGMLogicComponent.OnBotAIDataReady // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool IsAllowReconnectGame(struct ASCMPlayerState* InPC); // Function Solarland.CGMLogicComponent.IsAllowReconnectGame // (Native|Event|Public|BlueprintEvent) // @ game+0x26775d0
	void CallOnPlayerReconnected(struct ASCMPlayerState* InPlayerState); // Function Solarland.CGMLogicComponent.CallOnPlayerReconnected // (Final|Native|Protected|BlueprintCallable) // @ game+0x2676db0
	void CallOnPlayerOut(struct ASCMPlayerState* InPlayerState); // Function Solarland.CGMLogicComponent.CallOnPlayerOut // (Final|Native|Protected|BlueprintCallable) // @ game+0x2676d20
	void CallOnConfigInitiated(); // Function Solarland.CGMLogicComponent.CallOnConfigInitiated // (Final|Native|Protected|BlueprintCallable) // @ game+0x2676d00
	void CallOnBattleStart(); // Function Solarland.CGMLogicComponent.CallOnBattleStart // (Final|Native|Protected|BlueprintCallable) // @ game+0x2676ce0
};

// Class Solarland.SolarGameplayConfigComponent
// Size: 0xd8 (Inherited: 0xb0)
struct USolarGameplayConfigComponent : UActorComponent {
	bool EnableTestGameplayConfig; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct UGameplayConfigBase* CGMConfig; // 0xb8(0x08)
	struct UGameplayConfigBase* TestCGMConfig; // 0xc0(0x08)
	struct UGameplayConfigBase* InstGameplayConfig; // 0xc8(0x08)
	struct UGameplayConfigBase* InstTestGameplayConfig; // 0xd0(0x08)

	struct UGameplayConfigBase* GetConfigs(); // Function Solarland.SolarGameplayConfigComponent.GetConfigs // (Native|Public|BlueprintCallable) // @ game+0x27d3a10
};

// Class Solarland.CGMManagerConfigComponent
// Size: 0xd8 (Inherited: 0xd8)
struct UCGMManagerConfigComponent : USolarGameplayConfigComponent {
};

// Class Solarland.CGMMapInfo
// Size: 0x180 (Inherited: 0xd0)
struct UCGMMapInfo : UGameModeCompBase {
	struct TArray<struct FVector> AreaPosArray; // 0xd0(0x10)
	int32_t MapID; // 0xe0(0x04)
	int32_t UsedAirlineID; // 0xe4(0x04)
	struct FAirlineData UsedAirlineData; // 0xe8(0x28)
	char pad_110[0x10]; // 0x110(0x10)
	struct TMap<int32_t, struct FAirlineData> AirlineDataList; // 0x120(0x50)
	int32_t MaskWidth; // 0x170(0x04)
	float MaskScale; // 0x174(0x04)
	int32_t MapWidth; // 0x178(0x04)
	int32_t MapHeight; // 0x17c(0x04)

	void LoadAirlineData(); // Function Solarland.CGMMapInfo.LoadAirlineData // (Final|Native|Protected|BlueprintCallable) // @ game+0x2677670
	void InitInfo(int32_t InMapID); // Function Solarland.CGMMapInfo.InitInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x2677540
	int32_t GetUsedAirlineData(struct FAirlineData& OutData); // Function Solarland.CGMMapInfo.GetUsedAirlineData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2677490
	int32_t GetMapIDByName(struct ASCustomGameState* InGameState, struct FString Name); // Function Solarland.CGMMapInfo.GetMapIDByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2677360
};

// Class Solarland.CGMSettlementComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UCGMSettlementComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct USettlementPageConfig* PageConfig; // 0xb8(0x08)
	struct TArray<int32_t> PageIndexs; // 0xc0(0x10)
	bool IsCustomRoom; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)

	bool SkipToTarget(); // Function Solarland.CGMSettlementComponent.SkipToTarget // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	bool ShowNextStage(); // Function Solarland.CGMSettlementComponent.ShowNextStage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void PlayHighlight(); // Function Solarland.CGMSettlementComponent.PlayHighlight // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.ChaAT_AddSynchronizedForce
// Size: 0xe0 (Inherited: 0x80)
struct UChaAT_AddSynchronizedForce : UAbilityTask {
	char pad_80[0x60]; // 0x80(0x60)
};

// Class Solarland.ChaAT_AltitudeQuery
// Size: 0x130 (Inherited: 0x80)
struct UChaAT_AltitudeQuery : UAbilityTask {
	struct FMulticastInlineDelegate OnResponsed; // 0x80(0x10)
	char pad_90[0xa0]; // 0x90(0xa0)

	struct UChaAT_AltitudeQuery* StartSphereAltitudeQuery(struct UGameplayAbility* OwningAbility, float InAltitude, float Radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, bool bIgnoreSelf, bool bUsingAsyncQuery, bool bInTriggerOnce); // Function Solarland.ChaAT_AltitudeQuery.StartSphereAltitudeQuery // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable) // @ game+0x2678090
	struct UChaAT_AltitudeQuery* StartLineAltitudeQuery(struct UGameplayAbility* OwningAbility, float InAltitude, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, bool bIgnoreSelf, bool bUsingAsyncQuery, bool bInTriggerOnce); // Function Solarland.ChaAT_AltitudeQuery.StartLineAltitudeQuery // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable) // @ game+0x2677dd0
};

// Class Solarland.ChaAT_Blink
// Size: 0xc0 (Inherited: 0x80)
struct UChaAT_Blink : USolarAbilityTask {
	char pad_80[0x40]; // 0x80(0x40)

	struct UChaAT_Blink* CreateTask(struct UGameplayAbility* OwningAbility, struct FVector InTargetLocation); // Function Solarland.ChaAT_Blink.CreateTask // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2676e40
};

// Class Solarland.ChaAT_ControlDoppelganger
// Size: 0x118 (Inherited: 0x80)
struct UChaAT_ControlDoppelganger : USolarAbilityTask {
	struct ASolarCharacter* OwnerCharacter; // 0x80(0x08)
	struct ASolarCharacter* Doppelganger; // 0x88(0x08)
	char pad_90[0x88]; // 0x90(0x88)

	void OnOwnerJetFlyStart(enum class EJetFlyType& Type); // Function Solarland.ChaAT_ControlDoppelganger.OnOwnerJetFlyStart // (Final|Native|Protected|HasOutParms) // @ game+0x26779f0
	void OnDGInBattleTagChanged(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.ChaAT_ControlDoppelganger.OnDGInBattleTagChanged // (Final|Native|Protected) // @ game+0x2677830
};

// Class Solarland.ChaAT_HighAlert
// Size: 0x1b8 (Inherited: 0x80)
struct UChaAT_HighAlert : USolarAbilityTask {
	struct FMulticastInlineDelegate OnHighAlertDelegate; // 0x80(0x10)
	char pad_90[0x128]; // 0x90(0x128)
};

// Class Solarland.ChaAT_LimitCameraOnStickingOutOfVehicle
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_LimitCameraOnStickingOutOfVehicle : USolarAbilityTask {
	char pad_80[0x20]; // 0x80(0x20)

	struct UChaAT_LimitCameraOnStickingOutOfVehicle* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_LimitCameraOnStickingOutOfVehicle.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2676f20
};

// Class Solarland.ChaAT_ListenChaTakeDamage
// Size: 0x90 (Inherited: 0x80)
struct UChaAT_ListenChaTakeDamage : UAbilityTask {
	struct FMulticastInlineDelegate OnTakeDamageDelegate; // 0x80(0x10)

	void OnCharacterTakeDamage(struct ASolarCharacter* Character, struct ASolarCharacter* InstigatorCharacter, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaAT_ListenChaTakeDamage.OnCharacterTakeDamage // (Final|Native|Private|HasOutParms) // @ game+0x2677690
	struct UChaAT_ListenChaTakeDamage* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_ListenChaTakeDamage.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2676fb0
};

// Class Solarland.ChaAT_ListenScopeOpeningAction
// Size: 0x98 (Inherited: 0x80)
struct UChaAT_ListenScopeOpeningAction : USolarAbilityTask {
	struct UGameplayAbility* OwnerAbility; // 0x80(0x08)
	struct ASolarCharacter* TaskCharacter; // 0x88(0x08)
	char pad_90[0x8]; // 0x90(0x08)

	struct UChaAT_ListenScopeOpeningAction* CreateTask(struct UGameplayAbility* OwningAbility, struct ASolarCharacter* InCharacter, float MaxWaitTime); // Function Solarland.ChaAT_ListenScopeOpeningAction.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2677040
};

// Class Solarland.ChaAT_ListenSkydive
// Size: 0x90 (Inherited: 0x80)
struct UChaAT_ListenSkydive : USolarAbilityTask {
	char pad_80[0x10]; // 0x80(0x10)

	void OnSkydiveStageChanged(struct ASolarCharacter* InCharacter, enum class ESkydiveStage InOldStage, enum class ESkydiveStage InNewStage); // Function Solarland.ChaAT_ListenSkydive.OnSkydiveStageChanged // (Final|Native|Private) // @ game+0x2677a80
};

// Class Solarland.ChaAT_PlayMontageAndWaitForNotify
// Size: 0x118 (Inherited: 0x108)
struct UChaAT_PlayMontageAndWaitForNotify : UAbilityTask_PlayMontageAndWait {
	struct FMulticastInlineDelegate OnMontageNotify; // 0x108(0x10)

	void OnMontageNotifyCallBack(struct FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointPayload); // Function Solarland.ChaAT_PlayMontageAndWaitForNotify.OnMontageNotifyCallBack // (Final|Native|Private|HasOutParms) // @ game+0x2677900
	struct UChaAT_PlayMontageAndWaitForNotify* CreateTask(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct UAnimMontage* InMontageToPlay, float InRate, struct FName InStartSection, bool bInStopWhenAbilityEnds, float InAnimRootMotionTranslationScale); // Function Solarland.ChaAT_PlayMontageAndWaitForNotify.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2677150
};

// Class Solarland.ChaAT_PlayMontageForMeshAndWaitForEvent
// Size: 0x150 (Inherited: 0x80)
struct UChaAT_PlayMontageForMeshAndWaitForEvent : UAbilityTask {
	struct FMulticastInlineDelegate OnCompleted; // 0x80(0x10)
	struct FMulticastInlineDelegate OnBlendOut; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xb0(0x10)
	struct FMulticastInlineDelegate EventReceived; // 0xc0(0x10)
	struct USkeletalMeshComponent* Mesh; // 0xd0(0x08)
	struct UAnimMontage* MontageToPlay; // 0xd8(0x08)
	struct FGameplayTagContainer EventTags; // 0xe0(0x20)
	float Rate; // 0x100(0x04)
	struct FName StartSection; // 0x104(0x08)
	float AnimRootMotionTranslationScale; // 0x10c(0x04)
	bool bStopWhenAbilityEnds; // 0x110(0x01)
	bool bReplicateMontage; // 0x111(0x01)
	char pad_112[0x2]; // 0x112(0x02)
	float OverrideBlendOutTimeForCancelAbility; // 0x114(0x04)
	float OverrideBlendOutTimeForStopWhenEndAbility; // 0x118(0x04)
	bool bInterruptedCalledBeforeBlendingOut; // 0x11c(0x01)
	char pad_11D[0x33]; // 0x11d(0x33)

	struct UChaAT_PlayMontageForMeshAndWaitForEvent* PlayMontageForMeshAndWaitForEvent(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct USkeletalMeshComponent* Mesh, struct UAnimMontage* MontageToPlay, float Rate, struct FName StartSection, bool bStopWhenAbilityEnds, float AnimRootMotionTranslationScale, bool bReplicateMontage, float OverrideBlendOutTimeForCancelAbility, float OverrideBlendOutTimeForStopWhenEndAbility); // Function Solarland.ChaAT_PlayMontageForMeshAndWaitForEvent.PlayMontageForMeshAndWaitForEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x267d040
};

// Class Solarland.ChaAT_SkywardDiveTask
// Size: 0xc0 (Inherited: 0x80)
struct UChaAT_SkywardDiveTask : USolarAbilityTask {
	char pad_80[0x10]; // 0x80(0x10)
	struct USkywardDiveConfig* SkillConfig; // 0x90(0x08)
	struct ASolarCharacter* Character; // 0x98(0x08)
	struct ASkywardDiveLauncher* Launcher; // 0xa0(0x08)
	char pad_A8[0x18]; // 0xa8(0x18)

	struct UChaAT_SkywardDiveTask* CreateTask(struct UGameplayAbility* OwningAbility, struct ASkywardDiveLauncher* InLauncher, int32_t InOccupyLaunchDeviceIndex); // Function Solarland.ChaAT_SkywardDiveTask.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x267bd70
};

// Class Solarland.ChaAT_StayRecovery
// Size: 0x130 (Inherited: 0x80)
struct UChaAT_StayRecovery : USolarAbilityTask {
	struct FMulticastInlineDelegate StartStayRecoveryDelegate; // 0x80(0x10)
	struct FMulticastInlineDelegate EndStayRecoveryDelegate; // 0x90(0x10)
	struct FMulticastInlineDelegate BattleStatusChangedDelegate; // 0xa0(0x10)
	struct FMulticastInlineDelegate RecoverHealthDelegate; // 0xb0(0x10)
	struct FMulticastInlineDelegate RecoverShieldDelegate; // 0xc0(0x10)
	char pad_D0[0x10]; // 0xd0(0x10)
	struct ASolarCharacter* OwnerCharacter; // 0xe0(0x08)
	char pad_E8[0x48]; // 0xe8(0x48)
};

// Class Solarland.ChaAT_SyncGrapplingHook
// Size: 0x108 (Inherited: 0x80)
struct UChaAT_SyncGrapplingHook : UAbilityTask {
	char pad_80[0x88]; // 0x80(0x88)
};

// Class Solarland.ChaAT_UpdateSkydiveTrail
// Size: 0x88 (Inherited: 0x80)
struct UChaAT_UpdateSkydiveTrail : USolarAbilityTask {
	char pad_80[0x8]; // 0x80(0x08)

	struct UChaAT_UpdateSkydiveTrail* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_UpdateSkydiveTrail.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x267be70
};

// Class Solarland.ChaAT_UpdateZipline
// Size: 0xc0 (Inherited: 0x80)
struct UChaAT_UpdateZipline : USolarAbilityTask {
	char pad_80[0x40]; // 0x80(0x40)

	struct UChaAT_UpdateZipline* CreateTask(struct UGameplayAbility* OwningAbility, struct FVector& InStartLoc, struct FVector& InEndLoc, float InSpeed, float InCheckDis); // Function Solarland.ChaAT_UpdateZipline.CreateTask // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x267bf00
};

// Class Solarland.ChaAT_WaitCharacterDeathEnd
// Size: 0x90 (Inherited: 0x80)
struct UChaAT_WaitCharacterDeathEnd : USolarAbilityTask {
	struct FMulticastInlineDelegate OnCharacterDeathEnd; // 0x80(0x10)

	struct UChaAT_WaitCharacterDeathEnd* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_WaitCharacterDeathEnd.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x267c0d0
};

// Class Solarland.ChaAT_WaitCharacterLaunchEnd
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitCharacterLaunchEnd : USolarAbilityTask {
	struct FMulticastInlineDelegate OnCharacterLaunchEnd; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	float MoveModeCheckDelayTime; // 0x9c(0x04)

	struct UChaAT_WaitCharacterLaunchEnd* CreateTask(struct UGameplayAbility* OwningAbility, float InWaitLaunchingTime); // Function Solarland.ChaAT_WaitCharacterLaunchEnd.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x267c160
};

// Class Solarland.ChaAT_WaitCharacterPostDeath
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitCharacterPostDeath : USolarAbilityTask {
	struct FMulticastInlineDelegate OnDestroyCharacterCorpse; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)

	struct UChaAT_WaitCharacterPostDeath* CreateTask(struct UGameplayAbility* OwningAbility, float InDestroyCorpseTime); // Function Solarland.ChaAT_WaitCharacterPostDeath.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x267c230
};

// Class Solarland.ChaAT_WaitCharacterSprintCancel
// Size: 0x90 (Inherited: 0x80)
struct UChaAT_WaitCharacterSprintCancel : USolarAbilityTask {
	struct FMulticastInlineDelegate OnCharacterSprintCancel; // 0x80(0x10)

	struct UChaAT_WaitCharacterSprintCancel* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_WaitCharacterSprintCancel.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x267c300
};

// Class Solarland.ChaAT_WaitControlRotationYawOutOfRange
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitControlRotationYawOutOfRange : UAbilityTask {
	char pad_80[0x20]; // 0x80(0x20)

	struct UChaAT_WaitControlRotationYawOutOfRange* CreateTask(struct UGameplayAbility* OwningAbility, float YawMin, float YawMax); // Function Solarland.ChaAT_WaitControlRotationYawOutOfRange.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x267c390
};

// Class Solarland.ChaAT_WaitDelay
// Size: 0x98 (Inherited: 0x80)
struct UChaAT_WaitDelay : UAbilityTask {
	struct FMulticastInlineDelegate OnFinish; // 0x80(0x10)
	char pad_90[0x8]; // 0x90(0x08)

	struct UChaAT_WaitDelay* WaitDelay(struct UGameplayAbility* OwningAbility, float Time); // Function Solarland.ChaAT_WaitDelay.WaitDelay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x267d3c0
};

// Class Solarland.ChaAT_WaitLandingSpot
// Size: 0x100 (Inherited: 0x80)
struct UChaAT_WaitLandingSpot : UAbilityTask {
	char pad_80[0x80]; // 0x80(0x80)
};

// Class Solarland.ChaAT_WaitOverlapEx
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitOverlapEx : UAbilityTask {
	struct FMulticastInlineDelegate OnOverLap; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)

	struct UChaAT_WaitOverlapEx* WaitForOverlap(struct UGameplayAbility* OwningAbility, struct TArray<struct AActor*> InIgnoreClasses); // Function Solarland.ChaAT_WaitOverlapEx.WaitForOverlap // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x267d490
	void OnHitCallback(struct UPrimitiveComponent* HitComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.ChaAT_WaitOverlapEx.OnHitCallback // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x267cb10
};

// Class Solarland.ChaAT_WaitVehicleWeakPointRepairingEnd
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitVehicleWeakPointRepairingEnd : USolarAbilityTask {
	char pad_80[0x8]; // 0x80(0x08)
	struct FMulticastInlineDelegate OnVehicleWeakPointRepairingEnd; // 0x88(0x10)
	char pad_98[0x8]; // 0x98(0x08)

	struct UChaAT_WaitVehicleWeakPointRepairingEnd* CreateTask(struct UGameplayAbility* OwningAbility, struct FVehicleWeakPointSpec& RepairingVehicleWeakPoint); // Function Solarland.ChaAT_WaitVehicleWeakPointRepairingEnd.CreateTask // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x267c490
};

// Class Solarland.SolarGameplayAbility
// Size: 0x418 (Inherited: 0x400)
struct USolarGameplayAbility : UGameplayAbility {
	bool bTryActivateWhenGranted; // 0x400(0x01)
	enum class ESolarGAInputID InputID; // 0x401(0x01)
	bool bAllowReconnection; // 0x402(0x01)
	bool bActiveOnPress; // 0x403(0x01)
	char pad_404[0x4]; // 0x404(0x04)
	struct TArray<struct FAbilityMeshMontage> CurrentAbilityMeshMontages; // 0x408(0x10)

	void RemoveGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SolarGameplayAbility.RemoveGameplayCueLocal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27d5400
	void ReceivingGiven(struct FGameplayAbilityActorInfo& ActorInfo, struct FGameplayAbilitySpec& Spec); // Function Solarland.SolarGameplayAbility.ReceivingGiven // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	bool OnLevelUp(int32_t OldLevel, struct FGameplayAbilitySpec& Spec); // Function Solarland.SolarGameplayAbility.OnLevelUp // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x27d5140
	void MontageStopForMesh(struct USkeletalMeshComponent* InMesh, float OverrideBlendOutTime); // Function Solarland.SolarGameplayAbility.MontageStopForMesh // (Final|Native|Protected|BlueprintCallable) // @ game+0x27d5070
	void MontageStopForAllMeshes(float OverrideBlendOutTime); // Function Solarland.SolarGameplayAbility.MontageStopForAllMeshes // (Final|Native|Protected|BlueprintCallable) // @ game+0x27d4ff0
	void MontageSetNextSectionNameForMesh(struct USkeletalMeshComponent* InMesh, struct FName FromSectionName, struct FName ToSectionName); // Function Solarland.SolarGameplayAbility.MontageSetNextSectionNameForMesh // (Final|Native|Protected|BlueprintCallable) // @ game+0x27d4ee0
	void MontageJumpToSectionForMesh(struct USkeletalMeshComponent* InMesh, struct FName SectionName); // Function Solarland.SolarGameplayAbility.MontageJumpToSectionForMesh // (Final|Native|Protected|BlueprintCallable) // @ game+0x27d4e10
	int32_t GetDefaultGrantedLevel(struct AActor* InOwner, struct AActor* InAvatar); // Function Solarland.SolarGameplayAbility.GetDefaultGrantedLevel // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x27d3ae0
	struct UAnimMontage* GetCurrentMontageForMesh(struct USkeletalMeshComponent* InMesh); // Function Solarland.SolarGameplayAbility.GetCurrentMontageForMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x27d3a40
	void ExecuteGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SolarGameplayAbility.ExecuteGameplayCueLocal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27d37c0
	void AddGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SolarGameplayAbility.AddGameplayCueLocal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27d3300
};

// Class Solarland.ResidentPassiveSkill
// Size: 0x438 (Inherited: 0x418)
struct UResidentPassiveSkill : USolarGameplayAbility {
	struct TArray<struct UGameplayEffect*> ResidentEffectClasses; // 0x418(0x10)
	char pad_428[0x10]; // 0x428(0x10)
};

// Class Solarland.ChaGA_AerialReconnaissance
// Size: 0x438 (Inherited: 0x438)
struct UChaGA_AerialReconnaissance : UResidentPassiveSkill {

	void OnSkydiveStageChanged(struct ASolarCharacter* InCharacter, enum class ESkydiveStage InOldStage, enum class ESkydiveStage InNewStage); // Function Solarland.ChaGA_AerialReconnaissance.OnSkydiveStageChanged // (Final|Native|Private) // @ game+0x267cd50
};

// Class Solarland.SolarCharacterGameplayAbility
// Size: 0x460 (Inherited: 0x418)
struct USolarCharacterGameplayAbility : USolarGameplayAbility {
	struct FGameplayTagContainer ActivationOwnedReplicatedTags; // 0x418(0x20)
	struct TArray<struct FSolarGameplayEffectConfig> ActivationOwnedReplicatedGameplayEffects; // 0x438(0x10)
	char pad_448[0x18]; // 0x448(0x18)

	struct ASolarCharacter* GetOwningCharacterFromActorInfo(); // Function Solarland.SolarCharacterGameplayAbility.GetOwningCharacterFromActorInfo // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2796430
	struct ASolarCharacter* GetAvatarSolarCharacterFromActorInfo(); // Function Solarland.SolarCharacterGameplayAbility.GetAvatarSolarCharacterFromActorInfo // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2796400
};

// Class Solarland.ChaGA_Aim
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_Aim : USolarCharacterGameplayAbility {
	struct UGameplayEffect* AimGameplayEffectClass; // 0x460(0x08)
};

// Class Solarland.SolarCharacterRoleAbility
// Size: 0x4c8 (Inherited: 0x460)
struct USolarCharacterRoleAbility : USolarCharacterGameplayAbility {
	enum class RoleAbilityCommitPhase CommitAbilityPhase; // 0x460(0x01)
	bool bPreLoadSkinAssets; // 0x461(0x01)
	char pad_462[0x6]; // 0x462(0x06)
	struct TArray<struct UGameplayEffect*> HoldingOwnedReplicatedGameplayEffects; // 0x468(0x10)
	struct TArray<struct UGameplayEffect*> ReleasingOwnedReplicatedGameplayEffects; // 0x478(0x10)
	struct UCameraShake* HoldingCameraShakeClass; // 0x488(0x08)
	struct UCameraShake* ReleasingCameraShakeClass; // 0x490(0x08)
	char pad_498[0x20]; // 0x498(0x20)
	struct UCameraShake* HoldingCameraShakeInstance; // 0x4b8(0x08)
	struct UCameraShake* ReleasingCameraShakeInstance; // 0x4c0(0x08)
};

// Class Solarland.ChaGA_ThrowSkill
// Size: 0x518 (Inherited: 0x4c8)
struct UChaGA_ThrowSkill : USolarCharacterRoleAbility {
	enum class ESkillAnimType SkillAnimType; // 0x4c8(0x01)
	enum class ESkillAnimRightHandType SkillAnimRightHandType; // 0x4c9(0x01)
	bool bShouldWaitMontageNotifyToRelease; // 0x4ca(0x01)
	char pad_4CB[0x1]; // 0x4cb(0x01)
	struct FName ActiveMontageNotifyToRelease; // 0x4cc(0x08)
	bool bShouldWaitMontageNotifyToThrow; // 0x4d4(0x01)
	char pad_4D5[0x3]; // 0x4d5(0x03)
	struct FName MontageNotifyToWait; // 0x4d8(0x08)
	bool bCanHoldWeapon; // 0x4e0(0x01)
	char pad_4E1[0x3]; // 0x4e1(0x03)
	struct FName ActiveMontageNotifyToReady; // 0x4e4(0x08)
	char pad_4EC[0x4]; // 0x4ec(0x04)
	struct UAbilityTask_NetworkSyncPoint* WaitThrowTask; // 0x4f0(0x08)
	struct UAnimMontage* ActiveMontage; // 0x4f8(0x08)
	struct UAnimMontage* FireMontage; // 0x500(0x08)
	struct UAnimMontage* CancelMontage; // 0x508(0x08)
	char pad_510[0x8]; // 0x510(0x08)

	void WaitToThrow(); // Function Solarland.ChaGA_ThrowSkill.WaitToThrow // (Native|Protected) // @ game+0xbd98b0
	void StartToThrow(); // Function Solarland.ChaGA_ThrowSkill.StartToThrow // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ad7260
	void PrepareToThrow(); // Function Solarland.ChaGA_ThrowSkill.PrepareToThrow // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ad7200
	void OnRceiveWaitToThrow(); // Function Solarland.ChaGA_ThrowSkill.OnRceiveWaitToThrow // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnFireMontageStartBlendingOut(); // Function Solarland.ChaGA_ThrowSkill.OnFireMontageStartBlendingOut // (Native|Protected) // @ game+0x1ad71c0
	void OnFireMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_ThrowSkill.OnFireMontageNotify // (Native|Protected) // @ game+0x268a910
	void OnFireMontageCompleted(); // Function Solarland.ChaGA_ThrowSkill.OnFireMontageCompleted // (Native|Protected) // @ game+0x1ad6ec0
	void OnActiveMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_ThrowSkill.OnActiveMontageNotify // (Native|Protected) // @ game+0x268a500
	void OnActiveMontageCompleted(); // Function Solarland.ChaGA_ThrowSkill.OnActiveMontageCompleted // (Native|Protected) // @ game+0x1ad7120
};

// Class Solarland.SolarSkillGA_Projectile
// Size: 0x660 (Inherited: 0x518)
struct USolarSkillGA_Projectile : UChaGA_ThrowSkill {
	char pad_518[0x18]; // 0x518(0x18)
	struct FSolarSkillProjectileData ProjectileData; // 0x530(0xd0)
	struct AGameplayAbilityTargetActor* GATargetActorClass; // 0x600(0x08)
	struct TArray<struct AActor*> SpawnActorClasses; // 0x608(0x10)
	struct UGameplayEffect* GEToSelfClass; // 0x618(0x08)
	struct UGameplayEffect* GEToTargetClass; // 0x620(0x08)
	bool bUseKeyUpLocation; // 0x628(0x01)
	bool bUseKeyUpDirection; // 0x629(0x01)
	char pad_62A[0x6]; // 0x62a(0x06)
	struct UAbilityTask_WaitTargetData* WaitTargetDataTask; // 0x630(0x08)
	struct TArray<struct AActor*> SpawnActors; // 0x638(0x10)
	struct TWeakObjectPtr<struct AGameplayAbilityTargetActor> TargetActorCache; // 0x648(0x08)
	char pad_650[0x10]; // 0x650(0x10)

	void OnWaitTargetDataTaskValid(struct FGameplayAbilityTargetDataHandle& InTargetData); // Function Solarland.SolarSkillGA_Projectile.OnWaitTargetDataTaskValid // (Native|Protected|HasOutParms) // @ game+0x289f380
	void OnWaitTargetDataTaskCancelled(struct FGameplayAbilityTargetDataHandle& InTargetData); // Function Solarland.SolarSkillGA_Projectile.OnWaitTargetDataTaskCancelled // (Native|Protected|HasOutParms) // @ game+0x289f260
};

// Class Solarland.SolarSkillGA_Summon
// Size: 0x690 (Inherited: 0x660)
struct USolarSkillGA_Summon : USolarSkillGA_Projectile {
	struct USolarSummonDetectionConfig* SummonConfig; // 0x658(0x08)
	int32_t SummonFailedNoticeID; // 0x660(0x04)
	bool bUseKeyUpLocationSummon; // 0x664(0x01)
	struct TWeakObjectPtr<struct ASolarSkillGATA_Summon> SummonTargetActor; // 0x668(0x08)
	struct UAnimMontage* ActiveMontageForGunAim; // 0x670(0x08)
	struct UAnimMontage* FireMontageForGunAim; // 0x678(0x08)
	struct UAnimMontage* CancelMontageForGunAim; // 0x680(0x08)
	char pad_68D[0x3]; // 0x68d(0x03)
};

// Class Solarland.ChaGA_AirDrop
// Size: 0x6f0 (Inherited: 0x690)
struct UChaGA_AirDrop : USolarSkillGA_Summon {
	struct ASolarTreasureBoxSpawner* TreasureBoxSpawnerClass; // 0x688(0x08)
	struct UAirDropOutcomeConfig* OutcomeConfigDataAsset; // 0x690(0x08)
	int32_t ChestID; // 0x698(0x04)
	int32_t BoxType; // 0x69c(0x04)
	float CastTime; // 0x6a0(0x04)
	float ReadyTime; // 0x6a4(0x04)
	struct FGameplayTag PrepareGameplayCue; // 0x6a8(0x08)
	struct FGameplayTag OpenAirDropMontageTag; // 0x6b0(0x08)
	struct FTransform SpawnTransform; // 0x6c0(0x30)

	void OnWaitCompleted(); // Function Solarland.ChaGA_AirDrop.OnWaitCompleted // (Final|Native|Private) // @ game+0x267d020
};

// Class Solarland.ChaGA_AntiexposureSuit
// Size: 0x440 (Inherited: 0x438)
struct UChaGA_AntiexposureSuit : UResidentPassiveSkill {
	struct FGameplayTag ExecuteCueTag; // 0x438(0x08)

	void OnTakeDamage(struct ASolarCharacter* Character, struct ASolarCharacter* InstigatorCharacter, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaGA_AntiexposureSuit.OnTakeDamage // (Final|Native|Protected|HasOutParms) // @ game+0x267ce80
};

// Class Solarland.ChaGA_AttributeInit
// Size: 0x428 (Inherited: 0x418)
struct UChaGA_AttributeInit : USolarGameplayAbility {
	struct TArray<struct UGameplayEffect*> InitializationEffectClasses; // 0x418(0x10)
};

// Class Solarland.CharacterTalent
// Size: 0x420 (Inherited: 0x418)
struct UCharacterTalent : USolarGameplayAbility {
	struct UGameplayEffect* GrantedEffectClass; // 0x418(0x08)

	float GetTalentCooldownDuration(struct AActor* InOwner, struct AActor* InAvatar); // Function Solarland.CharacterTalent.GetTalentCooldownDuration // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x269ccf0
	float GetTalentActivationDuration(struct AActor* InOwner, struct AActor* InAvatar); // Function Solarland.CharacterTalent.GetTalentActivationDuration // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x269cc20
};

// Class Solarland.PermanentTalent
// Size: 0x440 (Inherited: 0x420)
struct UPermanentTalent : UCharacterTalent {
	struct TArray<struct UGameplayEffect*> PermanentEffectClasses; // 0x420(0x10)
	char pad_430[0x10]; // 0x430(0x10)
};

// Class Solarland.PermanentTalentOnVehicle
// Size: 0x458 (Inherited: 0x440)
struct UPermanentTalentOnVehicle : UPermanentTalent {
	struct TArray<int32_t> ActivatedVehicleTypes; // 0x440(0x10)
	struct FGameplayTag GetOffVehicleEventTag; // 0x450(0x08)

	void ReceiveGetOffVehicle(struct FGameplayEventData InPayload); // Function Solarland.PermanentTalentOnVehicle.ReceiveGetOffVehicle // (Final|Native|Protected) // @ game+0x26fb560
};

// Class Solarland.ChaGA_AutoHealingOnVehicle
// Size: 0x468 (Inherited: 0x458)
struct UChaGA_AutoHealingOnVehicle : UPermanentTalentOnVehicle {
	struct UGameplayEffect* FullHealthSignEffect; // 0x458(0x08)
	char pad_460[0x8]; // 0x460(0x08)

	void ReceiveCurrentHealthChange(); // Function Solarland.ChaGA_AutoHealingOnVehicle.ReceiveCurrentHealthChange // (Final|Native|Protected) // @ game+0x267d380
};

// Class Solarland.ChaGA_BigRechargeShield
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_BigRechargeShield : USolarCharacterGameplayAbility {
	struct FGameplayTag RechargeShieldMontageTag; // 0x460(0x08)
	struct FGameplayTagContainer ActivationRequiredTagsAny; // 0x468(0x20)
};

// Class Solarland.ChaGA_BigWaterGun
// Size: 0x528 (Inherited: 0x4c8)
struct UChaGA_BigWaterGun : USolarCharacterRoleAbility {
	struct ABigWaterGun* BigWaterGunClass; // 0x4c8(0x08)
	struct ABigWaterGun* CacheBigWaterGun; // 0x4d0(0x08)
	enum class ESkillAnimType SkillAnimType; // 0x4d8(0x01)
	char pad_4D9[0x7]; // 0x4d9(0x07)
	struct UAnimMontage* PreAnimMontage; // 0x4e0(0x08)
	struct UAnimMontage* ExcuteAnimMontage; // 0x4e8(0x08)
	struct UAnimMontage* PostAnimMontage; // 0x4f0(0x08)
	struct UAnimMontage* StopAnimMontage; // 0x4f8(0x08)
	float LifeTime; // 0x500(0x04)
	char pad_504[0x4]; // 0x504(0x04)
	struct UGameplayEffect* SlowDownGameplayEffect; // 0x508(0x08)
	char pad_510[0x8]; // 0x510(0x08)
	struct UAbilityTask_NetworkSyncPoint* StopTask; // 0x518(0x08)
	char pad_520[0x8]; // 0x520(0x08)

	void OnStopPhase(); // Function Solarland.ChaGA_BigWaterGun.OnStopPhase // (Final|Native|Private) // @ game+0x267ce60
	void OnPrePhase(); // Function Solarland.ChaGA_BigWaterGun.OnPrePhase // (Final|Native|Private) // @ game+0x267cd30
	void OnPreMontageCompleted(); // Function Solarland.ChaGA_BigWaterGun.OnPreMontageCompleted // (Final|Native|Private) // @ game+0x267c810
	void OnPostPhase(); // Function Solarland.ChaGA_BigWaterGun.OnPostPhase // (Final|Native|Private) // @ game+0x267cd10
	void OnPostMontageCompleted(); // Function Solarland.ChaGA_BigWaterGun.OnPostMontageCompleted // (Final|Native|Private) // @ game+0x267ccf0
	void OnExecutePhase(); // Function Solarland.ChaGA_BigWaterGun.OnExecutePhase // (Final|Native|Private) // @ game+0x267c810
	void OnExecuteMontageCompleted(); // Function Solarland.ChaGA_BigWaterGun.OnExecuteMontageCompleted // (Final|Native|Private) // @ game+0x267c7f0
};

// Class Solarland.ChaGA_Blink
// Size: 0x4e0 (Inherited: 0x4c8)
struct UChaGA_Blink : USolarCharacterRoleAbility {
	struct FGameplayTag BlinkVanishCueTag; // 0x4c8(0x08)
	float VanishTime; // 0x4d0(0x04)
	struct FGameplayTag BlinkAppearCueTag; // 0x4d4(0x08)
	float AppearTime; // 0x4dc(0x04)
};

// Class Solarland.ChaGA_BlinkThrow
// Size: 0x660 (Inherited: 0x660)
struct UChaGA_BlinkThrow : USolarSkillGA_Projectile {
};

// Class Solarland.ChaAT_BlinkThrowProtect
// Size: 0x88 (Inherited: 0x80)
struct UChaAT_BlinkThrowProtect : USolarAbilityTask {
	char pad_80[0x8]; // 0x80(0x08)

	struct UChaAT_BlinkThrowProtect* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_BlinkThrowProtect.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x267bce0
};

// Class Solarland.ChaGA_Bolt
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_Bolt : USolarCharacterGameplayAbility {
	struct FGameplayTag BoltMontageTag; // 0x460(0x08)
};

// Class Solarland.ChaGA_CancelSprint
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_CancelSprint : USolarCharacterGameplayAbility {
	struct UGameplayEffect* CancelSprintEffectClass; // 0x460(0x08)
};

// Class Solarland.ChaGA_CelebrateWinner
// Size: 0x4a0 (Inherited: 0x460)
struct UChaGA_CelebrateWinner : USolarCharacterGameplayAbility {
	struct FGameplayTag CelebrateEventTag; // 0x460(0x08)
	float RescueDelay; // 0x468(0x04)
	struct FGameplayCueTag RescueGameplayCueTag; // 0x46c(0x08)
	float ReviveInPlaceRange; // 0x474(0x04)
	struct UEnvQuery* ReviveLocationEnvQuery; // 0x478(0x08)
	float WaitEnvQueryMaxDuration; // 0x480(0x04)
	int32_t TestCountOnSingleQueryResult; // 0x484(0x04)
	struct UGameplayEffect* CelebrateWinnerGameplayEffect; // 0x488(0x08)
	char pad_490[0x8]; // 0x490(0x08)
	struct UAbilityTask_WaitDelay* WaitRescueTask; // 0x498(0x08)

	void RescueImmediately(); // Function Solarland.ChaGA_CelebrateWinner.RescueImmediately // (Final|Native|Protected) // @ game+0x267d3a0
	void OnGameplayEventReceived(struct FGameplayEventData Payload); // Function Solarland.ChaGA_CelebrateWinner.OnGameplayEventReceived // (Final|Native|Protected) // @ game+0x267c830
	void OnEnvQueryTimeout(); // Function Solarland.ChaGA_CelebrateWinner.OnEnvQueryTimeout // (Final|Native|Protected) // @ game+0x267c7d0
};

// Class Solarland.ChaGA_ChangeCurrentCDRemain
// Size: 0x460 (Inherited: 0x418)
struct UChaGA_ChangeCurrentCDRemain : USolarGameplayAbility {
	struct FGameplayTagContainer AbilityQueryTags; // 0x418(0x20)
	enum class EGameplayModOp RemainTimeModifierOption; // 0x438(0x01)
	char pad_439[0x7]; // 0x439(0x07)
	struct FScalableFloat RemainTimeModifierValue; // 0x440(0x20)
};

// Class Solarland.ChaGA_ChangeTotalCD_WithDuration
// Size: 0x450 (Inherited: 0x418)
struct UChaGA_ChangeTotalCD_WithDuration : USolarGameplayAbility {
	struct FGameplayTagContainer AbilityQueryTags; // 0x418(0x20)
	struct UGameplayEffect* CDModifierEffect; // 0x438(0x08)
	bool bUsedForNextActivation; // 0x440(0x01)
	enum class EActiveEffectDurationChangeProxy ActiveEffectDurationChangeProxy; // 0x441(0x01)
	char pad_442[0xe]; // 0x442(0x0e)

	void OnModifierFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_ChangeTotalCD_WithDuration.OnModifierFinished // (Final|Native|Protected|HasOutParms) // @ game+0x267c6d0
	void ModifierAppliedFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_ChangeTotalCD_WithDuration.ModifierAppliedFailed // (Final|Native|Protected|HasOutParms) // @ game+0x267c6d0
};

// Class Solarland.ChaGA_ChangeTotalCD_WithTimes
// Size: 0x458 (Inherited: 0x450)
struct UChaGA_ChangeTotalCD_WithTimes : UChaGA_ChangeTotalCD_WithDuration {
	int32_t CDTimes; // 0x450(0x04)
	char pad_454[0x4]; // 0x454(0x04)

	void OnCooldownCompleted(); // Function Solarland.ChaGA_ChangeTotalCD_WithTimes.OnCooldownCompleted // (Final|Native|Protected) // @ game+0x267c7b0
};

// Class Solarland.ChaGA_CombatRegeneration
// Size: 0x498 (Inherited: 0x460)
struct UChaGA_CombatRegeneration : USolarCharacterGameplayAbility {
	float ForecastInterval; // 0x460(0x04)
	float RegenerateInterval; // 0x464(0x04)
	struct FGameplayTag RegenerateCueTag; // 0x468(0x08)
	char pad_470[0x28]; // 0x470(0x28)

	void PreRegenerate(); // Function Solarland.ChaGA_CombatRegeneration.PreRegenerate // (Final|Native|Protected) // @ game+0x2682340
	void OnTakeDamage(struct ASolarCharacter* Character, struct ASolarCharacter* InstigatorCharacter, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaGA_CombatRegeneration.OnTakeDamage // (Final|Native|Protected|HasOutParms) // @ game+0x2681e30
	void OnRegenerate(); // Function Solarland.ChaGA_CombatRegeneration.OnRegenerate // (Final|Native|Protected) // @ game+0x2681c80
};

// Class Solarland.ChaGA_Crouch
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_Crouch : USolarCharacterGameplayAbility {
	char pad_460[0x8]; // 0x460(0x08)

	bool ShouldCancelCrouch(); // Function Solarland.ChaGA_Crouch.ShouldCancelCrouch // (Final|Native|Private) // @ game+0x2682360
};

// Class Solarland.ChaGA_Cruise
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_Cruise : USolarCharacterGameplayAbility {
	struct UGameplayEffect* ParachuteZoneEnteredEffect; // 0x460(0x08)
	struct FName ParachuteActionName; // 0x468(0x08)
	struct UAbilityTask_WaitInputAction* WaitParachuteInputTask; // 0x470(0x08)
	struct UAbilityTask_NetworkSyncPoint* WaitToParachuteTask; // 0x478(0x08)
	char pad_480[0x8]; // 0x480(0x08)

	void OnRequestedToParachute(); // Function Solarland.ChaGA_Cruise.OnRequestedToParachute // (Final|Native|Private) // @ game+0x2681cc0
	void OnParachuteRequestSynced(); // Function Solarland.ChaGA_Cruise.OnParachuteRequestSynced // (Final|Native|Private) // @ game+0x2681c60
	void OnParachuteRequestRejected(); // Function Solarland.ChaGA_Cruise.OnParachuteRequestRejected // (Final|Native|Private) // @ game+0x2681c40
	void OnIntoParachuteZone(struct FGameplayEventData Payload); // Function Solarland.ChaGA_Cruise.OnIntoParachuteZone // (Final|Native|Private) // @ game+0x2681930
	void OnForceParachuteEvent(struct FGameplayEventData Payload); // Function Solarland.ChaGA_Cruise.OnForceParachuteEvent // (Final|Native|Private) // @ game+0x2681490
	void OnFinishCruise(struct FGameplayEventData Payload); // Function Solarland.ChaGA_Cruise.OnFinishCruise // (Final|Native|Private) // @ game+0x2681290
};

// Class Solarland.ChaGA_Dance
// Size: 0x4b0 (Inherited: 0x460)
struct UChaGA_Dance : USolarCharacterGameplayAbility {
	struct UGameplayEffect* LeadingDanceEffect; // 0x460(0x08)
	struct TArray<struct FName> CancelActionNames; // 0x468(0x10)
	char pad_478[0x38]; // 0x478(0x38)

	void OnRoleAbilityInputAction(int32_t AbilityIndex, bool bPress, bool bCanActive); // Function Solarland.ChaGA_Dance.OnRoleAbilityInputAction // (Final|Native|Private) // @ game+0x2681ce0
	void OnMoveModeChanged(enum class EMovementMode NewMovementMode); // Function Solarland.ChaGA_Dance.OnMoveModeChanged // (Final|Native|Private) // @ game+0x2681b10
	void OnMontageCompleted(); // Function Solarland.ChaGA_Dance.OnMontageCompleted // (Final|Native|Private) // @ game+0x2681b90
	void OnMontageBlendOut(); // Function Solarland.ChaGA_Dance.OnMontageBlendOut // (Final|Native|Private) // @ game+0x2681b90
	void OnMobileWeaponInputAction(enum class EInputButton InButtonType); // Function Solarland.ChaGA_Dance.OnMobileWeaponInputAction // (Final|Native|Private) // @ game+0x2681b10
	void OnHandleNotifyState(struct USolarAnimInstance* AnimInstance, struct USolarAnimNotifyState* Notify, int32_t& OutDenial); // Function Solarland.ChaGA_Dance.OnHandleNotifyState // (Final|Native|Private|HasOutParms) // @ game+0x2681790
	void OnHandleNotify(struct USolarAnimInstance* AnimInstance, struct USolarAnimNotify* Notify, int32_t& OutDenial); // Function Solarland.ChaGA_Dance.OnHandleNotify // (Final|Native|Private|HasOutParms) // @ game+0x2681670
	void OnCancelInput(); // Function Solarland.ChaGA_Dance.OnCancelInput // (Final|Native|Private) // @ game+0x2681090
};

// Class Solarland.ChaGA_Death
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_Death : USolarCharacterGameplayAbility {
	float DestroyCorpseTime; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)

	void DestroyCharacterCorpse(struct ASolarCharacter* Character); // Function Solarland.ChaGA_Death.DestroyCharacterCorpse // (Final|Native|Protected) // @ game+0x2680da0
	void DeathEnd(struct ASolarCharacter* Character); // Function Solarland.ChaGA_Death.DeathEnd // (Final|Native|Protected) // @ game+0x2680d10
};

// Class Solarland.ChaGA_DeathVerge
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_DeathVerge : USolarCharacterGameplayAbility {
	struct TArray<struct UGameplayEffect*> DeathVergeHPEffects; // 0x460(0x10)
	char pad_470[0x10]; // 0x470(0x10)
	struct FGameplayTag DeathVergeMaxHPDataTag; // 0x480(0x08)
	float TimeToWait; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)

	void OnWaitDelayFinished(); // Function Solarland.ChaGA_DeathVerge.OnWaitDelayFinished // (Final|Native|Protected) // @ game+0x9043b0
};

// Class Solarland.ChaGA_Doppelganger
// Size: 0x528 (Inherited: 0x4c8)
struct UChaGA_Doppelganger : USolarCharacterRoleAbility {
	struct UGameplayAbility* SubSummonAbilityClass; // 0x4c8(0x08)
	struct UGameplayAbility* SubControlAbilityClass; // 0x4d0(0x08)
	struct UGameplayAbility* SubExchangeAbilityClass; // 0x4d8(0x08)
	struct UGameplayEffect* DGInitGE_TargetDG; // 0x4e0(0x08)
	struct UGameplayEffect* DGActiveGE_TargetDG; // 0x4e8(0x08)
	struct UGameplayEffect* DGExposeEnemyGE; // 0x4f0(0x08)
	float DoppelgangerActiveTime; // 0x4f8(0x04)
	float DoppelgangerDelayDestroyTime; // 0x4fc(0x04)
	char pad_500[0x28]; // 0x500(0x28)

	void OnDoppelgangerSummonEvent(bool bSummonSuccess, struct AActor* InOwner, struct AActor* InDoppelganger); // Function Solarland.ChaGA_Doppelganger.OnDoppelgangerSummonEvent // (Final|Native|Protected) // @ game+0x2681180
	void OnDoppelgangerHPChanged(struct ASolarCharacter* Character); // Function Solarland.ChaGA_Doppelganger.OnDoppelgangerHPChanged // (Final|Native|Protected) // @ game+0x26810f0
	void OnDoppelgangerDeactive(); // Function Solarland.ChaGA_Doppelganger.OnDoppelgangerDeactive // (Final|Native|Protected) // @ game+0x26810d0
	void OnAbilityTriggerAgain(char RoleAbilityIndex); // Function Solarland.ChaGA_Doppelganger.OnAbilityTriggerAgain // (Final|Native|Protected) // @ game+0x2680ef0
};

// Class Solarland.ChaGA_Doppelganger_Control
// Size: 0x540 (Inherited: 0x4c8)
struct UChaGA_Doppelganger_Control : USolarCharacterRoleAbility {
	struct FDoppelgangerBehaviorConfig DoppelgangerBehaviorConfig; // 0x4c8(0x70)
	struct UChaAT_ControlDoppelganger* ControlDoppelgangerTask; // 0x538(0x08)
};

// Class Solarland.ChaGA_Doppelganger_Exchange
// Size: 0x508 (Inherited: 0x4c8)
struct UChaGA_Doppelganger_Exchange : USolarCharacterRoleAbility {
	struct UAnimMontage* PreExchangeMontage; // 0x4c8(0x08)
	struct UAnimMontage* PostExchangeMontage; // 0x4d0(0x08)
	enum class ESkillAnimType SkillAnimType; // 0x4d8(0x01)
	enum class ESkillAnimRightHandType SkillAnimRightHandType; // 0x4d9(0x01)
	char pad_4DA[0x6]; // 0x4da(0x06)
	struct UGameplayEffect* DGExchangeGE_TargetDG; // 0x4e0(0x08)
	struct UGameplayEffect* DGExchangeGE_TargetMe; // 0x4e8(0x08)
	char pad_4F0[0x18]; // 0x4f0(0x18)

	void OnPostExchangeMontageEnd(); // Function Solarland.ChaGA_Doppelganger_Exchange.OnPostExchangeMontageEnd // (Final|Native|Protected) // @ game+0x2681b90
	void DoExchange(); // Function Solarland.ChaGA_Doppelganger_Exchange.DoExchange // (Final|Native|Protected) // @ game+0x2680e30
};

// Class Solarland.ChaGA_Doppelganger_Summon
// Size: 0x6e0 (Inherited: 0x690)
struct UChaGA_Doppelganger_Summon : USolarSkillGA_Summon {
	bool bDoppelgangerFullHealth; // 0x688(0x01)
	bool bDoppelgangerFullShield; // 0x689(0x01)
	struct ASolarFuncBotController* CtrlSubClass; // 0x690(0x08)
	struct ASolarCharacter* CharacterSubClass; // 0x698(0x08)
	struct USolarBotAIConfig* BotAIConfigPreset; // 0x6a0(0x08)
	float StartLocationZOffset; // 0x6a8(0x04)
	char pad_6AE[0x2]; // 0x6ae(0x02)
	struct AController* DGController; // 0x6b0(0x08)
	struct ASolarFunctionalityCharacter* Doppelganger; // 0x6b8(0x08)
	char pad_6C0[0x8]; // 0x6c0(0x08)
	struct FGameplayCueTag HandCueTag; // 0x6c8(0x08)
	struct FName AddCueNotifyName; // 0x6d0(0x08)
	struct FName RemoveCueNotifyName; // 0x6d8(0x08)
};

// Class Solarland.ChaGA_DuckRolling
// Size: 0x4f8 (Inherited: 0x4c8)
struct UChaGA_DuckRolling : USolarCharacterRoleAbility {
	enum class ESkillAnimType SkillAnimType; // 0x4c8(0x01)
	char pad_4C9[0x7]; // 0x4c9(0x07)
	struct UDuckRollingConfigDataAsset* ConfigDataAsset; // 0x4d0(0x08)
	struct UGameplayEffect* SwitchToRollingMeshEffect; // 0x4d8(0x08)
	struct UAnimMontage* Montage; // 0x4e0(0x08)
	char pad_4E8[0x8]; // 0x4e8(0x08)
	struct UAbilityTask_WaitDelay* WaitRollingMeshTask; // 0x4f0(0x08)

	void SyncToSwitchToRollingMesh(); // Function Solarland.ChaGA_DuckRolling.SyncToSwitchToRollingMesh // (Final|Native|Protected) // @ game+0x26823b0
	void SwitchToRollingMesh(); // Function Solarland.ChaGA_DuckRolling.SwitchToRollingMesh // (Final|Native|Protected) // @ game+0x2682390
	void OnRollingEnd(); // Function Solarland.ChaGA_DuckRolling.OnRollingEnd // (Final|Native|Protected) // @ game+0x2681e10
	void OnRollingCanceled(); // Function Solarland.ChaGA_DuckRolling.OnRollingCanceled // (Final|Native|Protected) // @ game+0x2681df0
};

// Class Solarland.DynamicEffectTriggerVolumeInterface
// Size: 0x28 (Inherited: 0x28)
struct UDynamicEffectTriggerVolumeInterface : UInterface {

	struct TArray<struct FDynamicGameplayEffectSpec> GetEffectsToAddOnPredictLeave(); // Function Solarland.DynamicEffectTriggerVolumeInterface.GetEffectsToAddOnPredictLeave // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0xb67a30
	struct TArray<struct FDynamicGameplayEffectSpec> GetEffectsToAddOnEnter(); // Function Solarland.DynamicEffectTriggerVolumeInterface.GetEffectsToAddOnEnter // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2680e70
};

// Class Solarland.ChaGA_DynamicEffectTriggerVolume
// Size: 0x4c0 (Inherited: 0x460)
struct UChaGA_DynamicEffectTriggerVolume : USolarCharacterGameplayAbility {
	struct FGameplayTag EnterVolumeEventTag; // 0x460(0x08)
	struct FGameplayTag LeaveVolumeEventTag; // 0x468(0x08)
	struct TMap<struct UObject*, struct FActiveDynamicEffectTriggerVolumeInfo> InVolumes; // 0x470(0x50)
};

// Class Solarland.ChaGA_EnergyBubble
// Size: 0x520 (Inherited: 0x4c8)
struct UChaGA_EnergyBubble : USolarCharacterRoleAbility {
	struct ASolarEnergyBubble* EnergyShieldClass; // 0x4c8(0x08)
	struct AGameplayAbilityTargetActor* GATargetActorClass; // 0x4d0(0x08)
	struct UAnimMontage* EmptyMontage; // 0x4d8(0x08)
	struct UAnimMontage* AimMontage; // 0x4e0(0x08)
	struct FName StartSocketName; // 0x4e8(0x08)
	struct FName StartEnergyBubbleNotify; // 0x4f0(0x08)
	struct FName ReleaseEnergyBubbleNotify; // 0x4f8(0x08)
	struct ASolarEnergyBubble* EnergyShieldActor; // 0x500(0x08)
	char pad_508[0x8]; // 0x508(0x08)
	struct UAbilityTask_WaitTargetData* WaitTargetDataTask; // 0x510(0x08)
	struct TWeakObjectPtr<struct AGameplayAbilityTargetActor> TargetActorCache; // 0x518(0x08)

	void OnWaitTargetDataTaskValid(struct FGameplayAbilityTargetDataHandle& InTargetData); // Function Solarland.ChaGA_EnergyBubble.OnWaitTargetDataTaskValid // (Final|Native|Private|HasOutParms) // @ game+0x2682220
	void OnMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_EnergyBubble.OnMontageNotify // (Final|Native|Protected) // @ game+0x2681bb0
};

// Class Solarland.ChaGA_Equip
// Size: 0x4a0 (Inherited: 0x460)
struct UChaGA_Equip : USolarCharacterGameplayAbility {
	struct FGameplayTag EquipMontageTag_Left; // 0x460(0x08)
	struct FGameplayTag EquipMontageTag_Right; // 0x468(0x08)
	struct FGameplayTag UnequipMontageTag_Left; // 0x470(0x08)
	struct FGameplayTag UnequipMontageTag_Right; // 0x478(0x08)
	struct FGameplayTag InhibitEquipWeaponStatusTag; // 0x480(0x08)
	struct FName UnequipWeaponNotifyName; // 0x488(0x08)
	char pad_490[0x10]; // 0x490(0x10)

	void OnUnequipMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_Equip.OnUnequipMontageNotify // (Final|Native|Protected) // @ game+0x2682190
	void OnUnequipMontageCompleted(); // Function Solarland.ChaGA_Equip.OnUnequipMontageCompleted // (Final|Native|Protected) // @ game+0x2682170
};

// Class Solarland.SideResidentPassiveSkill
// Size: 0x448 (Inherited: 0x418)
struct USideResidentPassiveSkill : USolarGameplayAbility {
	struct UGameplayEffect* SignEffectClass; // 0x418(0x08)
	char pad_420[0x28]; // 0x420(0x28)

	bool OnSidePassiveSkillEnded(struct FSolarTeamAttributeSet& InSolarTeamAttributeSet, struct ASCMPlayerState* CurrentPlayer, bool bWasCancelled); // Function Solarland.SideResidentPassiveSkill.OnSidePassiveSkillEnded // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x272b930
	bool OnSidePassiveSkillActivated(struct FSolarTeamAttributeSet& InSolarTeamAttributeSet, struct ASCMPlayerState* CurrentPlayer); // Function Solarland.SideResidentPassiveSkill.OnSidePassiveSkillActivated // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x272b7b0
	void OnPlayerLeaveTeam(struct ASolarTeamInfo* TeamInfo, struct ASolarPlayerState* PlayerState); // Function Solarland.SideResidentPassiveSkill.OnPlayerLeaveTeam // (Final|Native|Protected) // @ game+0x272b6e0
	void OnPlayerJoinTeam(struct ASolarTeamInfo* TeamInfo, struct ASolarPlayerState* PlayerState); // Function Solarland.SideResidentPassiveSkill.OnPlayerJoinTeam // (Final|Native|Protected) // @ game+0x272b610
	void OnCharacterBeforeChange(); // Function Solarland.SideResidentPassiveSkill.OnCharacterBeforeChange // (Final|Native|Protected) // @ game+0x272b5f0
};

// Class Solarland.ChaGA_FastTreatment
// Size: 0x458 (Inherited: 0x448)
struct UChaGA_FastTreatment : USideResidentPassiveSkill {
	float ModifierTreatmentValue; // 0x448(0x04)
	float ModifierShieldValue; // 0x44c(0x04)
	float ModifierBigShieldValue; // 0x450(0x04)
	char pad_454[0x4]; // 0x454(0x04)
};

// Class Solarland.ChaGA_Fire
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_Fire : USolarCharacterGameplayAbility {
	struct ASolarCharacter* ActCharacter; // 0x460(0x08)
	char pad_468[0x5]; // 0x468(0x05)
	bool bPrintDebugString; // 0x46d(0x01)
	char pad_46E[0x2]; // 0x46e(0x02)

	void OnFireTaskEnd(); // Function Solarland.ChaGA_Fire.OnFireTaskEnd // (Final|Native|Public) // @ game+0x2681470
	void OnCtrlTaskEnd(); // Function Solarland.ChaGA_Fire.OnCtrlTaskEnd // (Final|Native|Public) // @ game+0x26810b0
	void DoFireTask(); // Function Solarland.ChaGA_Fire.DoFireTask // (Final|Native|Public) // @ game+0x2680e50
};

// Class Solarland.ChaGA_GetOffVehicle
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_GetOffVehicle : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_GetOnVehicle
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_GetOnVehicle : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_GrapplingHook
// Size: 0x4b0 (Inherited: 0x460)
struct UChaGA_GrapplingHook : USolarCharacterGameplayAbility {
	struct FVector GrapplingHookForce; // 0x460(0x0c)
	float MinDownMagPer; // 0x46c(0x04)
	float ReachDist; // 0x470(0x04)
	float VeloAngleTolerance; // 0x474(0x04)
	float CamAngleSustainTolerance; // 0x478(0x04)
	float CamAngleSustainTime; // 0x47c(0x04)
	float CamAngleBreakTolerance; // 0x480(0x04)
	struct FVector2D SelectDepthRange; // 0x484(0x08)
	float MaxVelo; // 0x48c(0x04)
	float MaxAccel; // 0x490(0x04)
	float MaxDuration; // 0x494(0x04)
	struct FName JumpActionName; // 0x498(0x08)
	char pad_4A0[0x8]; // 0x4a0(0x08)
	struct AActor* ATestSceneCapture; // 0x4a8(0x08)

	void OnRequestedToJump(); // Function Solarland.ChaGA_GrapplingHook.OnRequestedToJump // (Final|Native|Private) // @ game+0x2681ca0
};

// Class Solarland.ChaGA_HighAlert
// Size: 0x518 (Inherited: 0x438)
struct UChaGA_HighAlert : UResidentPassiveSkill {
	struct FAlertConfig AlertConfig; // 0x438(0xd0)
	struct FGameplayCueTag CueTag; // 0x508(0x08)
	char pad_510[0x8]; // 0x510(0x08)

	void OnHighAlert(enum class EAlertDirection Direction); // Function Solarland.ChaGA_HighAlert.OnHighAlert // (Final|Native|Private) // @ game+0x26818b0
};

// Class Solarland.ChaGA_HitRecover
// Size: 0x4b8 (Inherited: 0x460)
struct UChaGA_HitRecover : USolarCharacterGameplayAbility {
	float Duration; // 0x460(0x04)
	float KnockbackDuration; // 0x464(0x04)
	struct TMap<enum class EHitRecoverType, float> HitbackDistance; // 0x468(0x50)

	void OnBlock(struct FGameplayAbilityTargetDataHandle& InTargetData); // Function Solarland.ChaGA_HitRecover.OnBlock // (Final|Native|Public|HasOutParms) // @ game+0x2680f70
};

// Class Solarland.ChaGA_HitShield
// Size: 0x4c8 (Inherited: 0x438)
struct UChaGA_HitShield : UResidentPassiveSkill {
	struct ASolarEnergyShield* HitShieldClass; // 0x438(0x08)
	float DistanceToCharacter; // 0x440(0x04)
	float CoolDown; // 0x444(0x04)
	float MaxAngleinZ; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct FGameplayTagContainer BlockShieldSpawnTags; // 0x450(0x20)
	struct TSet<enum class ESCMDamageType> TriggerDamageTypes; // 0x470(0x50)
	char pad_4C0[0x8]; // 0x4c0(0x08)

	void SpawnHitShield(struct FVector Direction); // Function Solarland.ChaGA_HitShield.SpawnHitShield // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	void OnTakeDamage(struct ASolarCharacter* Character, struct ASolarCharacter* InstigatorCharacter, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaGA_HitShield.OnTakeDamage // (Final|Native|Protected|HasOutParms) // @ game+0x2681fd0
};

// Class Solarland.ChaGA_Hoarder
// Size: 0x450 (Inherited: 0x448)
struct UChaGA_Hoarder : USideResidentPassiveSkill {
	float ModifierValue; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
};

// Class Solarland.ChaGA_HomeVault
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_HomeVault : USolarCharacterGameplayAbility {
	struct FGameplayTag ClimbWaterMontageTag; // 0x460(0x08)
	struct FGameplayTag VaultCrossMontageTag; // 0x468(0x08)
	char pad_470[0x20]; // 0x470(0x20)

	void OnMontageCompleted(); // Function Solarland.ChaGA_HomeVault.OnMontageCompleted // (Final|Native|Protected) // @ game+0x2681b90
};

// Class Solarland.ChaGA_InitializationFromGameMode
// Size: 0x478 (Inherited: 0x460)
struct UChaGA_InitializationFromGameMode : USolarCharacterGameplayAbility {
	struct UGameplayEffect* VJetCDOverrideEffect; // 0x460(0x08)
	struct UGameplayEffect* HJetCDOverrideEffect; // 0x468(0x08)
	struct FGameplayTag SettingOverrideTag; // 0x470(0x08)
};

// Class Solarland.ChaGA_Invincible
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_Invincible : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_InvisibleByZone
// Size: 0x4d8 (Inherited: 0x4c8)
struct UChaGA_InvisibleByZone : USolarCharacterRoleAbility {
	struct UGameplayEffect* InvisibleByZoneEffect; // 0x4c8(0x08)
	char pad_4D0[0x8]; // 0x4d0(0x08)

	void ApplyInvisibleByZoneEffect(); // Function Solarland.ChaGA_InvisibleByZone.ApplyInvisibleByZoneEffect // (Final|Native|Protected) // @ game+0x2685eb0
};

// Class Solarland.ChaGA_JetFlyAction
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_JetFlyAction : USolarCharacterGameplayAbility {
	bool bVerticalFly; // 0x460(0x01)
	char pad_461[0x7]; // 0x461(0x07)
	struct UGameplayEffect* BoostEffect; // 0x468(0x08)
};

// Class Solarland.ChaGA_JetFlyCharge
// Size: 0x4b8 (Inherited: 0x460)
struct UChaGA_JetFlyCharge : USolarCharacterGameplayAbility {
	struct UGameplayEffect* VerticalChargeEffect; // 0x460(0x08)
	struct UGameplayEffect* TempVerticalChargeEffect; // 0x468(0x08)
	struct UGameplayEffect* OnceVChargeCompletedEffect; // 0x470(0x08)
	struct UGameplayEffect* HorizontalChargeEffect; // 0x478(0x08)
	struct UGameplayEffect* TempHorizontalChargeEffect; // 0x480(0x08)
	struct UGameplayEffect* OnceHChargeCompletedEffect; // 0x488(0x08)
	struct FGameplayTag TempChargeDurationTag; // 0x490(0x08)
	struct UAbilityTask_WaitGameplayEffectRemoved* OnOnceVJetChargeFinished; // 0x498(0x08)
	struct UAbilityTask_WaitGameplayEffectRemoved* OnOnceHJetChargeFinished; // 0x4a0(0x08)
	char pad_4A8[0x10]; // 0x4a8(0x10)

	void StartVerticalJetChargeFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_JetFlyCharge.StartVerticalJetChargeFailed // (Final|Native|Protected|HasOutParms) // @ game+0x26874f0
	void StartHorizontalJetChargeFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_JetFlyCharge.StartHorizontalJetChargeFailed // (Final|Native|Protected|HasOutParms) // @ game+0x26873f0
	void ReceiveVerticalJetTimesChanged(); // Function Solarland.ChaGA_JetFlyCharge.ReceiveVerticalJetTimesChanged // (Final|Native|Protected) // @ game+0x26873a0
	void ReceiveVerticalChargeCDChanged(float OldCD); // Function Solarland.ChaGA_JetFlyCharge.ReceiveVerticalChargeCDChanged // (Final|Native|Protected) // @ game+0x2687320
	void ReceiveHorizontalJetTimesChanged(); // Function Solarland.ChaGA_JetFlyCharge.ReceiveHorizontalJetTimesChanged // (Final|Native|Protected) // @ game+0x2687300
	void ReceiveHorizontalChargeCDChanged(float OldCD); // Function Solarland.ChaGA_JetFlyCharge.ReceiveHorizontalChargeCDChanged // (Final|Native|Protected) // @ game+0x2687280
	void OnceVerticalJetChargeFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_JetFlyCharge.OnceVerticalJetChargeFinished // (Final|Native|Protected|HasOutParms) // @ game+0x26871a0
	void OnceHorizontalJetChargeFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_JetFlyCharge.OnceHorizontalJetChargeFinished // (Final|Native|Protected|HasOutParms) // @ game+0x26870c0
};

// Class Solarland.ChaGA_JetSlowFalling
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_JetSlowFalling : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_Jump
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_Jump : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_LaunchAction
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_LaunchAction : USolarCharacterGameplayAbility {
	float WaitingLaunchingTime; // 0x460(0x04)
	struct FGameplayTag LaunchCueTag; // 0x464(0x08)
	char pad_46C[0x4]; // 0x46c(0x04)

	void EndLaunch(); // Function Solarland.ChaGA_LaunchAction.EndLaunch // (Final|Native|Protected) // @ game+0x2681b90
};

// Class Solarland.ChaGA_LostConnection
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_LostConnection : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_LowHPShieldRecAcc
// Size: 0x458 (Inherited: 0x420)
struct UChaGA_LowHPShieldRecAcc : UCharacterTalent {
	struct UGameplayEffect* AccelerationEffectClass; // 0x420(0x08)
	struct FScalableFloat LowHPThreshold; // 0x428(0x20)
	char pad_448[0x10]; // 0x448(0x10)

	void CheckHPThreshold(); // Function Solarland.ChaGA_LowHPShieldRecAcc.CheckHPThreshold // (Final|Native|Protected) // @ game+0x2685ef0
};

// Class Solarland.ChaGA_LowHPSpeedup
// Size: 0x458 (Inherited: 0x420)
struct UChaGA_LowHPSpeedup : UCharacterTalent {
	struct UGameplayEffect* SpeedupEffectClass; // 0x420(0x08)
	struct FScalableFloat LowHPThreshold; // 0x428(0x20)
	char pad_448[0x10]; // 0x448(0x10)

	void OnSpeedUpFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_LowHPSpeedup.OnSpeedUpFinished // (Final|Native|Protected|HasOutParms) // @ game+0x2686df0
	void OnCoolingDownFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_LowHPSpeedup.OnCoolingDownFinished // (Final|Native|Protected|HasOutParms) // @ game+0x26866f0
	void EffectAppliedFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_LowHPSpeedup.EffectAppliedFailed // (Final|Native|Protected|HasOutParms) // @ game+0x2685f30
	void CheckHPThreshold(); // Function Solarland.ChaGA_LowHPSpeedup.CheckHPThreshold // (Final|Native|Protected) // @ game+0x2685f10
};

// Class Solarland.ChaGA_MassInvisibility
// Size: 0x510 (Inherited: 0x4c8)
struct UChaGA_MassInvisibility : USolarCharacterRoleAbility {
	struct UAnimMontage* SkillMontage; // 0x4c8(0x08)
	struct UAnimMontage* SkillMontageWithWeapon; // 0x4d0(0x08)
	struct FName StartSkillMontageNotify; // 0x4d8(0x08)
	struct FGameplayTag MassInvisibilityRangeCueTag; // 0x4e0(0x08)
	struct UGameplayAbility* MassInvisibilityTargetAbilityClass; // 0x4e8(0x08)
	float MassInvisibilityRangeRadius; // 0x4f0(0x04)
	float MassInvisibilityRangeHalfHeight; // 0x4f4(0x04)
	struct FGameplayTag OrnamentTag; // 0x4f8(0x08)
	struct UAnimMontage* OrnamentMontage; // 0x500(0x08)
	char pad_508[0x8]; // 0x508(0x08)

	void OnMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_MassInvisibility.OnMontageNotify // (Final|Native|Protected) // @ game+0x2686a20
};

// Class Solarland.ChaGA_MassInvisibilityTarget
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_MassInvisibilityTarget : USolarCharacterGameplayAbility {
	struct FGameplayCueTag MassInvisibilityCueTag; // 0x460(0x08)
	struct UGameplayEffect* MassInvisibilityBuffEffectClass; // 0x468(0x08)
	struct UGameplayEffect* MassInvisibilityPrepareEffectClass; // 0x470(0x08)
	struct UGameplayEffect* MassInvisibilityEffectClass; // 0x478(0x08)
	char pad_480[0x8]; // 0x480(0x08)

	void OnMassInvisibilityPrepareEffectRemoved(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_MassInvisibilityTarget.OnMassInvisibilityPrepareEffectRemoved // (Final|Native|Private|HasOutParms) // @ game+0x2686940
	void OnMassInvisibilityEffectRemoved(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_MassInvisibilityTarget.OnMassInvisibilityEffectRemoved // (Final|Native|Private|HasOutParms) // @ game+0x2686860
};

// Class Solarland.ChaGA_Melee
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_Melee : USolarCharacterGameplayAbility {
	struct TArray<struct FGameplayTag> CrouchMeleeMontageTags; // 0x460(0x10)
	struct TArray<struct FGameplayTag> StandMeleeMontageTags; // 0x470(0x10)
	float MotionWarpingAngleTolerance; // 0x480(0x04)
	char pad_484[0xc]; // 0x484(0x0c)

	void OnStopMelee(struct UGameplayAbility* InActivatedAbility); // Function Solarland.ChaGA_Melee.OnStopMelee // (Final|Native|Public) // @ game+0x2686ed0
	void GetYawToleranceMinMax(struct FRotator& CurrentControlRotation, struct FRotator& TargetRotation, float& YawMin, float& YawMax); // Function Solarland.ChaGA_Melee.GetYawToleranceMinMax // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x2686010
};

// Class Solarland.ChaGA_MissileSwarm
// Size: 0x670 (Inherited: 0x660)
struct UChaGA_MissileSwarm : USolarSkillGA_Projectile {
	struct UMissileSwarmConfig* SkillConfig; // 0x658(0x08)
	char pad_668[0x8]; // 0x668(0x08)
};

// Class Solarland.ChaGA_MultiRecoverShield
// Size: 0x480 (Inherited: 0x460)
struct UChaGA_MultiRecoverShield : USolarCharacterGameplayAbility {
	struct UGameplayEffect* ActivationEffect; // 0x460(0x08)
	struct UGameplayEffect* CustomCoolDownEffect; // 0x468(0x08)
	char pad_470[0x10]; // 0x470(0x10)

	void OnCoolDownEffectStart(); // Function Solarland.ChaGA_MultiRecoverShield.OnCoolDownEffectStart // (Final|Native|Protected) // @ game+0x26866d0
	void OnCoolDownEffectFinish(); // Function Solarland.ChaGA_MultiRecoverShield.OnCoolDownEffectFinish // (Final|Native|Protected) // @ game+0x26866b0
	void OnActivationEffect(struct FGameplayEventData Payload); // Function Solarland.ChaGA_MultiRecoverShield.OnActivationEffect // (Final|Native|Protected) // @ game+0x2686230
};

// Class Solarland.ChaGA_NightComes
// Size: 0x500 (Inherited: 0x4c8)
struct UChaGA_NightComes : USolarCharacterRoleAbility {
	struct UGameplayEffect* NightComesBuffGameplayEffect; // 0x4c8(0x08)
	struct ASolarNightComesActor* NightComesActorClass; // 0x4d0(0x08)
	struct UAnimMontage* SkillMontage; // 0x4d8(0x08)
	struct UAnimMontage* SkillMontageWithWeapon; // 0x4e0(0x08)
	struct FName StartSkillMontageNotify; // 0x4e8(0x08)
	struct FVector SpawnOffset; // 0x4f0(0x0c)
	char pad_4FC[0x4]; // 0x4fc(0x04)

	void OnMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_NightComes.OnMontageNotify // (Final|Native|Protected) // @ game+0x2686ab0
};

// Class Solarland.ChaGA_OpenNewTreasureBox
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_OpenNewTreasureBox : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_OpenScope
// Size: 0x4c8 (Inherited: 0x460)
struct UChaGA_OpenScope : USolarCharacterGameplayAbility {
	struct FGameplayTagRequirements OngoingTagRequirements; // 0x460(0x50)
	float MaxEnteringScopeOpeningTime; // 0x4b0(0x04)
	char pad_4B4[0x4]; // 0x4b4(0x04)
	struct FName WeaponOpenScopeSoundGroupName; // 0x4b8(0x08)
	struct FName WeaponCloseScopeSoundGroupName; // 0x4c0(0x08)

	void OnOngoingTagRequirementsMetStatusChange(bool bMet); // Function Solarland.ChaGA_OpenScope.OnOngoingTagRequirementsMetStatusChange // (Final|Native|Private) // @ game+0x2686bc0
};

// Class Solarland.ChaGA_OpenTreasureBox
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_OpenTreasureBox : USolarCharacterGameplayAbility {
	struct FGameplayTag OpenTreasureBoxMontageTag; // 0x460(0x08)
};

// Class Solarland.ChaGA_ParkourMaster
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_ParkourMaster : USolarCharacterGameplayAbility {
	struct UGameplayEffect* VertEffect; // 0x460(0x08)
	struct UGameplayEffect* HoriEffect; // 0x468(0x08)
	char pad_470[0x20]; // 0x470(0x20)

	void OnJetFlyActivated(struct UGameplayAbility* InActivatedAbility); // Function Solarland.ChaGA_ParkourMaster.OnJetFlyActivated // (Final|Native|Protected) // @ game+0x26867d0
};

// Class Solarland.ChaGA_PickUp
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_PickUp : USolarCharacterGameplayAbility {
	struct FGameplayTag PickUpHighEmptyMontageTag; // 0x460(0x08)
	struct FGameplayTag PickUpLowEmptyMontageTag; // 0x468(0x08)
	struct FGameplayTag PickUpHighGunAimMontageTag; // 0x470(0x08)
	struct FGameplayTag PickUpLowGunAimMontageTag; // 0x478(0x08)
	char pad_480[0x10]; // 0x480(0x10)

	void OnWeaponSlotReplace(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.ChaGA_PickUp.OnWeaponSlotReplace // (Final|Native|Private) // @ game+0x2686ff0
	void OnMontageCompleted(); // Function Solarland.ChaGA_PickUp.OnMontageCompleted // (Final|Native|Private) // @ game+0x2681b90
};

// Class Solarland.ChaGA_RadarScanning
// Size: 0x4a8 (Inherited: 0x460)
struct UChaGA_RadarScanning : USolarCharacterGameplayAbility {
	float SpawnRadarDelayTime; // 0x460(0x04)
	float LifeTime; // 0x464(0x04)
	float LifeTimeNoResult; // 0x468(0x04)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct ASolarRadarBase* RadarClass; // 0x470(0x08)
	int32_t SpawnRadarEventID; // 0x478(0x04)
	float EffectRadius; // 0x47c(0x04)
	struct FGameplayTag CueTag; // 0x480(0x08)
	struct ASolarRadarBase* SpawnedRadar; // 0x488(0x08)
	char pad_490[0x18]; // 0x490(0x18)

	void StartSpawnRadar(); // Function Solarland.ChaGA_RadarScanning.StartSpawnRadar // (Final|Native|Private) // @ game+0x26874d0
};

// Class Solarland.ChaGA_RainOfArrow
// Size: 0x690 (Inherited: 0x690)
struct UChaGA_RainOfArrow : USolarSkillGA_Summon {
	float CameraZOffset; // 0x688(0x04)
};

// Class Solarland.ChaGA_RapidBoost
// Size: 0x4d0 (Inherited: 0x4c8)
struct UChaGA_RapidBoost : USolarCharacterRoleAbility {
	struct UGameplayEffect* JetFlyCooldownEffectClass; // 0x4c8(0x08)
};

// Class Solarland.ChaGA_Rebirth
// Size: 0x478 (Inherited: 0x460)
struct UChaGA_Rebirth : USolarCharacterGameplayAbility {
	struct UGameplayEffect* RebirthHPEffect; // 0x460(0x08)
	struct FGameplayTag HPDataTag; // 0x468(0x08)
	struct UGameplayEffect* ResetJetFlyTimesEffect; // 0x470(0x08)
};

// Class Solarland.ChaGA_RechargeShield
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_RechargeShield : USolarCharacterGameplayAbility {
	struct FGameplayTag RechargeShieldMontageTag; // 0x460(0x08)
	struct FGameplayTagContainer ActivationRequiredTagsAny; // 0x468(0x20)
};

// Class Solarland.ChaGA_RelayActionSkill
// Size: 0x510 (Inherited: 0x4c8)
struct UChaGA_RelayActionSkill : USolarCharacterRoleAbility {
	char pad_4C8[0x8]; // 0x4c8(0x08)
	struct USolarCharacterRoleAbility* PrimaryAction; // 0x4d0(0x08)
	char pad_4D8[0x10]; // 0x4d8(0x10)
	struct USolarCharacterRoleAbility* RelayAction; // 0x4e8(0x08)
	char pad_4F0[0x20]; // 0x4f0(0x20)

	void OnRelayActionEnd(struct FAbilityEndedData& EndedData); // Function Solarland.ChaGA_RelayActionSkill.OnRelayActionEnd // (Final|Native|Protected|HasOutParms) // @ game+0x2686cf0
	void OnPrimaryActionEnd(struct FAbilityEndedData& EndedData); // Function Solarland.ChaGA_RelayActionSkill.OnPrimaryActionEnd // (Final|Native|Protected|HasOutParms) // @ game+0x2686c50
	void OnBlinkActorStopped(struct FVector& BlinkLocation); // Function Solarland.ChaGA_RelayActionSkill.OnBlinkActorStopped // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2686600
	void OnBlinkActorSpawned(struct TArray<struct AActor*> InActors); // Function Solarland.ChaGA_RelayActionSkill.OnBlinkActorSpawned // (Final|Native|Protected) // @ game+0x2686510
	void OnAbilityTriggerAgain(char RoleAbilityIndex); // Function Solarland.ChaGA_RelayActionSkill.OnAbilityTriggerAgain // (Final|Native|Protected) // @ game+0x26861b0
};

// Class Solarland.ChaGA_Reload
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_Reload : USolarCharacterGameplayAbility {
	struct FGameplayTag ReloadMontageTag; // 0x460(0x08)
	struct FGameplayTag ReloadWithBoltMontageTag; // 0x468(0x08)
	char pad_470[0x8]; // 0x470(0x08)
	struct ASolarPlayerWeapon* ReloadWeapon; // 0x478(0x08)
	struct USolarWeaponAT_WaitStateForEvent* WaitTask; // 0x480(0x08)
	struct UAbilityTask_NetworkSyncPoint* SyncTask; // 0x488(0x08)

	void OnServerWeaponReloadComplete(); // Function Solarland.ChaGA_Reload.OnServerWeaponReloadComplete // (Final|Native|Public) // @ game+0x2686dd0
	void OnClientWeaponReloadComplete(); // Function Solarland.ChaGA_Reload.OnClientWeaponReloadComplete // (Final|Native|Public) // @ game+0x2686690
};

// Class Solarland.ChaGA_RepairVehicle
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_RepairVehicle : USolarCharacterGameplayAbility {
	struct FGameplayTag RepairVehicleWeakPointsMontageTag; // 0x460(0x08)
	char pad_468[0x8]; // 0x468(0x08)

	void OnVehicleWeakPointRepairingEnd(bool bCompleted); // Function Solarland.ChaGA_RepairVehicle.OnVehicleWeakPointRepairingEnd // (Final|Native|Private) // @ game+0x2686f60
};

// Class Solarland.ChaGA_Rescue
// Size: 0x480 (Inherited: 0x460)
struct UChaGA_Rescue : USolarCharacterGameplayAbility {
	float SucceedBeforeSoundTime; // 0x460(0x04)
	struct FGameplayTag TeamRescueMontageTag; // 0x464(0x08)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct UChaAT_WaitDelay* DelayTask; // 0x470(0x08)
	struct FGameplayTag SucceedCueTag; // 0x478(0x08)

	bool ShouldCancelRescue(); // Function Solarland.ChaGA_Rescue.ShouldCancelRescue // (Final|Native|Protected) // @ game+0x26873c0
	void OnRescueCompleted(); // Function Solarland.ChaGA_Rescue.OnRescueCompleted // (Final|Native|Protected) // @ game+0x2686d90
	void OnMontageCompleted(); // Function Solarland.ChaGA_Rescue.OnMontageCompleted // (Final|Native|Protected) // @ game+0x2681b90
	void BeforeRescueCompleted(); // Function Solarland.ChaGA_Rescue.BeforeRescueCompleted // (Final|Native|Protected) // @ game+0x2685ed0
};

// Class Solarland.ChaGA_ReviveTeammates
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_ReviveTeammates : USolarCharacterGameplayAbility {
	struct FGameplayTag ReviveTeammatesMontageTag; // 0x460(0x08)

	void OnReviveCompleted(); // Function Solarland.ChaGA_ReviveTeammates.OnReviveCompleted // (Final|Native|Protected) // @ game+0x2686db0
	void OnAbilityExec(); // Function Solarland.ChaGA_ReviveTeammates.OnAbilityExec // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.ChaGA_ShadowClone
// Size: 0x4e8 (Inherited: 0x4c8)
struct UChaGA_ShadowClone : USolarCharacterRoleAbility {
	float ShadowCloneCoolDown; // 0x4c8(0x04)
	float ShadowCloneTeleportCoolDown; // 0x4cc(0x04)
	float ShadowCloneLifeTime; // 0x4d0(0x04)
	char pad_4D4[0x4]; // 0x4d4(0x04)
	struct ASolarBotAIController* ShadowControllerClass; // 0x4d8(0x08)
	int32_t ShadowLevel; // 0x4e0(0x04)
	char pad_4E4[0x4]; // 0x4e4(0x04)

	void OnSpawnShadowClone(struct ASolarCharacter* InClone); // Function Solarland.ChaGA_ShadowClone.OnSpawnShadowClone // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnShadowCloneTeleport(struct ASolarCharacter* InClone); // Function Solarland.ChaGA_ShadowClone.OnShadowCloneTeleport // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.ChaGA_ShopVIP
// Size: 0x450 (Inherited: 0x448)
struct UChaGA_ShopVIP : USideResidentPassiveSkill {
	float ModifierValue; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
};

// Class Solarland.ChaGA_SingleCruise
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_SingleCruise : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_SkydiveFly
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_SkydiveFly : USolarCharacterGameplayAbility {
	struct FGameplayTag SkydiveSoundCue; // 0x460(0x08)

	void OnMovementModeChanged(enum class EMovementMode NewMovementMode); // Function Solarland.ChaGA_SkydiveFly.OnMovementModeChanged // (Final|Native|Private) // @ game+0x2686b40
};

// Class Solarland.ChaGA_SkydiveLand
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_SkydiveLand : USolarCharacterGameplayAbility {

	void OnMovementModeChanged(enum class EMovementMode NewMovementMode); // Function Solarland.ChaGA_SkydiveLand.OnMovementModeChanged // (Final|Native|Private) // @ game+0x268aa30
};

// Class Solarland.ChaGA_SkywardDive
// Size: 0x478 (Inherited: 0x460)
struct UChaGA_SkywardDive : USolarCharacterGameplayAbility {
	struct USkywardDiveConfig* SkillConfig; // 0x460(0x08)
	struct TWeakObjectPtr<struct ASkywardDiveLauncher> SkywardDiveLauncher; // 0x468(0x08)
	char pad_470[0x8]; // 0x470(0x08)

	void RealLaunchCharacter(); // Function Solarland.ChaGA_SkywardDive.RealLaunchCharacter // (Final|Native|Protected) // @ game+0x268b3b0
	void K2_DoPrepareCue(struct ASolarCharacter* Character, struct ASkywardDiveLauncher* Launcher); // Function Solarland.ChaGA_SkywardDive.K2_DoPrepareCue // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_DoLaunchCue(struct ASolarCharacter* Character, struct ASkywardDiveLauncher* Launcher); // Function Solarland.ChaGA_SkywardDive.K2_DoLaunchCue // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void DoPrepareCue(); // Function Solarland.ChaGA_SkywardDive.DoPrepareCue // (Final|Native|Protected) // @ game+0x268a4b0
	void DoLaunchCue(); // Function Solarland.ChaGA_SkywardDive.DoLaunchCue // (Final|Native|Protected) // @ game+0x268a490
	void CancelPrepareLaunch(); // Function Solarland.ChaGA_SkywardDive.CancelPrepareLaunch // (Final|Native|Protected) // @ game+0x268a440
};

// Class Solarland.ChaGA_SkywardFly
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_SkywardFly : USolarCharacterGameplayAbility {
	char pad_460[0x8]; // 0x460(0x08)

	void OnMovementModeChanged(enum class EMovementMode NewMovementMode); // Function Solarland.ChaGA_SkywardFly.OnMovementModeChanged // (Final|Native|Protected) // @ game+0x268aab0
};

// Class Solarland.ChaGA_SkywardFlyTrigger
// Size: 0x500 (Inherited: 0x460)
struct UChaGA_SkywardFlyTrigger : USolarCharacterGameplayAbility {
	struct FGameplayTag FlyAvailableStatusTag; // 0x460(0x08)
	struct FGameplayTag FlyAvailableSuppressTag; // 0x468(0x08)
	struct FGameplayTag FlyUsableStatusTag; // 0x470(0x08)
	struct FGameplayTag DamageStatusTag; // 0x478(0x08)
	struct FGameplayTag SkywardFlyAbilityTag; // 0x480(0x08)
	struct FGameplayTag AbilityActiveStatusTag; // 0x488(0x08)
	float PrerequisiteDelay; // 0x490(0x04)
	float DamageInterval; // 0x494(0x04)
	float DamagePerHit; // 0x498(0x04)
	char pad_49C[0x4]; // 0x49c(0x04)
	struct UAbilityTask_WaitDelay* WaitDelayTask; // 0x4a0(0x08)
	struct UAbilityTask_Repeat* RepeatTask; // 0x4a8(0x08)
	char pad_4B0[0x50]; // 0x4b0(0x50)

	void OnWaitDelayFinished(); // Function Solarland.ChaGA_SkywardFlyTrigger.OnWaitDelayFinished // (Final|Native|Protected) // @ game+0x268b2f0
	void OnDamageRepeatAction(int32_t ActionNumber); // Function Solarland.ChaGA_SkywardFlyTrigger.OnDamageRepeatAction // (Final|Native|Protected) // @ game+0x268a860
	bool IsPrerequisiteMeet(); // Function Solarland.ChaGA_SkywardFlyTrigger.IsPrerequisiteMeet // (Native|Event|Protected|BlueprintEvent) // @ game+0x268a4d0
};

// Class Solarland.ChaGA_Sprint
// Size: 0x478 (Inherited: 0x460)
struct UChaGA_Sprint : USolarCharacterGameplayAbility {
	struct UGameplayEffect* SprintEffectClass; // 0x460(0x08)
	struct FGameplayTag CancelSprintEventTag; // 0x468(0x08)
	char pad_470[0x8]; // 0x470(0x08)

	void OnSprintCancelled(); // Function Solarland.ChaGA_Sprint.OnSprintCancelled // (Final|Native|Private) // @ game+0x268b080
};

// Class Solarland.ChaGA_StayRecovery
// Size: 0x4e0 (Inherited: 0x438)
struct UChaGA_StayRecovery : UResidentPassiveSkill {
	float StartRecoveryDelayTime; // 0x438(0x04)
	float RecoveryValue; // 0x43c(0x04)
	float RecoveryPeriod; // 0x440(0x04)
	float RecoveryRate; // 0x444(0x04)
	struct FGameplayTagContainer BlockTags; // 0x448(0x20)
	struct UGameplayEffect* HealthRecoverEffectClasses; // 0x468(0x08)
	struct FGameplayTag HealthRecoverTag; // 0x470(0x08)
	struct UGameplayEffect* SetRecoveringHealthEffectClasses; // 0x478(0x08)
	struct FGameplayTag SetRecoveringHealthTag; // 0x480(0x08)
	struct UGameplayEffect* ShieldRecoverEffectClasses; // 0x488(0x08)
	struct UGameplayEffect* SetRecoveringShieldEffectClasses; // 0x490(0x08)
	struct FGameplayTag SetRecoveringShieldTag; // 0x498(0x08)
	struct FGameplayCueTag CueTag; // 0x4a0(0x08)
	char pad_4A8[0x9]; // 0x4a8(0x09)
	bool bShowDebug; // 0x4b1(0x01)
	char pad_4B2[0x26]; // 0x4b2(0x26)
	struct UChaAT_StayRecovery* StayRecoveryTask; // 0x4d8(0x08)

	void RecoverShield(float InOverrideRecoverValue); // Function Solarland.ChaGA_StayRecovery.RecoverShield // (Final|Native|Protected) // @ game+0x268b3f0
	void RecoverHealth(); // Function Solarland.ChaGA_StayRecovery.RecoverHealth // (Final|Native|Protected) // @ game+0x268b3d0
	void OnStartStayRecovery(); // Function Solarland.ChaGA_StayRecovery.OnStartStayRecovery // (Final|Native|Private) // @ game+0x268b0a0
	void OnShieldChanged(bool bShiledAvailable, float CurValue, float MaxValue, int32_t QualityColor, bool bIsAdvancedShield); // Function Solarland.ChaGA_StayRecovery.OnShieldChanged // (Final|Native|Private) // @ game+0x268ae10
	void OnOwnerReceiveDamage(struct ASolarCharacter* Character, struct ASolarCharacter* DamageInstigatorCharacter, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaGA_StayRecovery.OnOwnerReceiveDamage // (Final|Native|Protected|HasOutParms) // @ game+0x268abc0
	void OnOwnerBattleStatusChange(bool bInBattle); // Function Solarland.ChaGA_StayRecovery.OnOwnerBattleStatusChange // (Final|Native|Protected) // @ game+0x268ab30
	void OnEndStayRecovery(); // Function Solarland.ChaGA_StayRecovery.OnEndStayRecovery // (Final|Native|Private) // @ game+0x268a8f0
	void OnCurrentShieldChanged(enum class EShieldWidgetState WidgetState, float CurValue, float ChangeValue, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // Function Solarland.ChaGA_StayRecovery.OnCurrentShieldChanged // (Final|Native|Private) // @ game+0x268a6b0
};

// Class Solarland.ChaGA_StickOutOfVehicle
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_StickOutOfVehicle : USolarCharacterGameplayAbility {
	float OutShotTimerForPC; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct FGameplayTagContainer BreakOutShotTags; // 0x468(0x20)

	void OnCancelByAdditionalCheck(); // Function Solarland.ChaGA_StickOutOfVehicle.OnCancelByAdditionalCheck // (Final|Native|Private) // @ game+0x7e1410
	bool CheckAdditionalCancel(); // Function Solarland.ChaGA_StickOutOfVehicle.CheckAdditionalCancel // (Final|Native|Private) // @ game+0x268a460
};

// Class Solarland.ChaGA_SummonTower
// Size: 0x6d0 (Inherited: 0x690)
struct UChaGA_SummonTower : USolarSkillGA_Summon {
	struct FName MontageNotifyToHoldEar; // 0x688(0x08)
	struct FName MontageNotifyToReleaseEar; // 0x690(0x08)
	struct FName MontageNotifyFastFireOn; // 0x698(0x08)
	struct FName MontageNotifyFastFireOff; // 0x6a0(0x08)
	struct UAnimMontage* FireMontageDefault; // 0x6a8(0x08)
	struct UAnimMontage* FireMontageFast; // 0x6b0(0x08)
	struct UCurveFloat* SummonDistanceToBlendCurve; // 0x6b8(0x08)
	struct UGameplayEffect* HoldEarGameplayEffect; // 0x6c0(0x08)
};

// Class Solarland.ChaGA_SuperRadarScan
// Size: 0x590 (Inherited: 0x4c8)
struct UChaGA_SuperRadarScan : USolarCharacterRoleAbility {
	struct ASolarCharacter* CacheCharacter; // 0x4c8(0x08)
	bool bSpawnRadarSuccess; // 0x4d0(0x01)
	bool bSpawnedRadar; // 0x4d1(0x01)
	bool bBackswingPlayed; // 0x4d2(0x01)
	char pad_4D3[0x1]; // 0x4d3(0x01)
	struct FVector HitLocation; // 0x4d4(0x0c)
	struct FGameplayTag RadarOrnamentTag; // 0x4e0(0x08)
	float LifeTime; // 0x4e8(0x04)
	float PrecastTime; // 0x4ec(0x04)
	float BackswingTime; // 0x4f0(0x04)
	char pad_4F4[0x4]; // 0x4f4(0x04)
	struct UGameplayAbility* RadarScanningAbilityClass; // 0x4f8(0x08)
	struct UAnimMontage* ScanAnimMontage; // 0x500(0x08)
	struct FGameplayTag CueTag; // 0x508(0x08)
	float MoveRadius; // 0x510(0x04)
	float OverlookCameraHeight; // 0x514(0x04)
	float OverlookCameraPitch; // 0x518(0x04)
	float CameraMoveScale_Mobile; // 0x51c(0x04)
	float CameraMoveScale_PC; // 0x520(0x04)
	char pad_524[0x4]; // 0x524(0x04)
	struct UParticleSystem* PreviewEffect; // 0x528(0x08)
	bool bUseForceLOD; // 0x530(0x01)
	char pad_531[0x3]; // 0x531(0x03)
	int32_t OverLookLOD; // 0x534(0x04)
	float CancelCD; // 0x538(0x04)
	char pad_53C[0x3c]; // 0x53c(0x3c)
	struct ACameraActor* CacheOverlookCamera; // 0x578(0x08)
	struct AActor* CacheViewTarget; // 0x580(0x08)
	struct UParticleSystemComponent* CacheEmitter; // 0x588(0x08)

	void TryCreateRadarForAI(); // Function Solarland.ChaGA_SuperRadarScan.TryCreateRadarForAI // (Final|Native|Private) // @ game+0x268b5b0
	void TryCreateRadar(bool bSpawn, struct FVector& InLoc); // Function Solarland.ChaGA_SuperRadarScan.TryCreateRadar // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x268b4d0
	void StartBackswing(); // Function Solarland.ChaGA_SuperRadarScan.StartBackswing // (Final|Native|Protected) // @ game+0x268b470
	void PlaySound(struct FString InSoundName); // Function Solarland.ChaGA_SuperRadarScan.PlaySound // (Final|Native|Public|BlueprintCallable) // @ game+0x268b310
	void OnTakeDamage(struct ASolarCharacter* Character, struct ASolarCharacter* InstigatorCharacter, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaGA_SuperRadarScan.OnTakeDamage // (Final|Native|Private|HasOutParms) // @ game+0x268b150
	void OnSpawnRadarSuccessfulHandle(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.ChaGA_SuperRadarScan.OnSpawnRadarSuccessfulHandle // (Final|Native|Public) // @ game+0x268afb0
	void OnReceivdTryCreateRadar(bool bSpawn); // Function Solarland.ChaGA_SuperRadarScan.OnReceivdTryCreateRadar // (Final|Native|Public) // @ game+0x268ad80
	void OnPrecastReady(); // Function Solarland.ChaGA_SuperRadarScan.OnPrecastReady // (Final|Native|Protected) // @ game+0x268ad60
	void OnPostMontageCompleted(); // Function Solarland.ChaGA_SuperRadarScan.OnPostMontageCompleted // (Final|Native|Private) // @ game+0x267ccf0
	void OnPickHeroBegin(); // Function Solarland.ChaGA_SuperRadarScan.OnPickHeroBegin // (Final|Native|Private) // @ game+0x267ccf0
	void OnCameraRight(float Value); // Function Solarland.ChaGA_SuperRadarScan.OnCameraRight // (Final|Native|Public) // @ game+0x268a610
	void OnCameraForward(float Value); // Function Solarland.ChaGA_SuperRadarScan.OnCameraForward // (Final|Native|Public) // @ game+0x268a590
	void OnBackswingReady(); // Function Solarland.ChaGA_SuperRadarScan.OnBackswingReady // (Final|Native|Protected) // @ game+0x267ccf0
	void K2_OnPrecastReady(); // Function Solarland.ChaGA_SuperRadarScan.K2_OnPrecastReady // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnBackswingStart(bool bSuccess); // Function Solarland.ChaGA_SuperRadarScan.K2_OnBackswingStart // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnAbilityEnd(struct ASolarCharacter* Character, bool bSuccess); // Function Solarland.ChaGA_SuperRadarScan.K2_OnAbilityEnd // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnAbilityActive(struct ASolarCharacter* Character); // Function Solarland.ChaGA_SuperRadarScan.K2_OnAbilityActive // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.ChaGA_Swap
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_Swap : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_Swim
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_Swim : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_SwitchVehicleSeat
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_SwitchVehicleSeat : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_TacticalDodge
// Size: 0x8b0 (Inherited: 0x4c8)
struct UChaGA_TacticalDodge : USolarCharacterRoleAbility {
	struct UGameplayEffect* DebuffPurifyEffectClass; // 0x4c8(0x08)
	struct UGameplayEffect* DebuffImmunityEffectClass; // 0x4d0(0x08)
	struct FTacticalDodgeDirectionConfig ForwardConfig; // 0x4d8(0x78)
	struct FTacticalDodgeDirectionConfig ForwardLeftConfig; // 0x550(0x78)
	struct FTacticalDodgeDirectionConfig ForwardRightConfig; // 0x5c8(0x78)
	struct FTacticalDodgeDirectionConfig LeftConfig; // 0x640(0x78)
	struct FTacticalDodgeDirectionConfig RightConfig; // 0x6b8(0x78)
	struct FTacticalDodgeDirectionConfig BackwardConfig; // 0x730(0x78)
	struct FTacticalDodgeDirectionConfig BackwardLeftConfig; // 0x7a8(0x78)
	struct FTacticalDodgeDirectionConfig BackwardRightConfig; // 0x820(0x78)
	struct UGameplayEffect* BuffQuickReloadEffectClass; // 0x898(0x08)
	char pad_8A0[0x10]; // 0x8a0(0x10)
};

// Class Solarland.ChaGA_TeamBoost
// Size: 0x538 (Inherited: 0x4c8)
struct UChaGA_TeamBoost : USolarCharacterRoleAbility {
	struct UAnimMontage* SkillMontage; // 0x4c8(0x08)
	struct UAnimMontage* SkillMontageArmed; // 0x4d0(0x08)
	struct FGameplayTag OrnamentTag; // 0x4d8(0x08)
	struct UAnimMontage* OrnamentMontage; // 0x4e0(0x08)
	struct UAnimMontage* OrnamentMontageArmed; // 0x4e8(0x08)
	struct FName StartSkillMontageNotify; // 0x4f0(0x08)
	struct UGameplayEffect* DebuffPurifyEffectClass; // 0x4f8(0x08)
	struct UGameplayEffect* DebuffImmunityEffectClass; // 0x500(0x08)
	struct UGameplayEffect* SelfBoostEffectClass; // 0x508(0x08)
	struct UGameplayEffect* TeammateBoostEffectClass; // 0x510(0x08)
	struct ATeamBoostProjectile* TeamBoostProjectileClass; // 0x518(0x08)
	struct FVector ProjectileSpawnRelativeLocation; // 0x520(0x0c)
	float SkillRangeRadius; // 0x52c(0x04)
	float SkillRangeHalfHeight; // 0x530(0x04)
	char pad_534[0x4]; // 0x534(0x04)

	void OnMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_TeamBoost.OnMontageNotify // (Final|Native|Protected) // @ game+0x268a9a0
};

// Class Solarland.ChaGA_TrackingMaster
// Size: 0x478 (Inherited: 0x460)
struct UChaGA_TrackingMaster : USolarCharacterGameplayAbility {
	struct UGameplayEffect* TrackingMasterEffect; // 0x460(0x08)
	char pad_468[0x10]; // 0x468(0x10)

	void OnCharacterBeforeChange(); // Function Solarland.ChaGA_TrackingMaster.OnCharacterBeforeChange // (Final|Native|Protected) // @ game+0x268a690
};

// Class Solarland.ChaGA_Treat
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_Treat : USolarCharacterGameplayAbility {
	struct FGameplayTag TreatMontageTag; // 0x460(0x08)
	struct FGameplayTagContainer ActivationRequiredTagsAny; // 0x468(0x20)

	void OnStopTreatment(bool bWasCancelled); // Function Solarland.ChaGA_Treat.OnStopTreatment // (Final|Native|Public) // @ game+0x268b0c0
};

// Class Solarland.ChaGA_UAVRescue
// Size: 0x508 (Inherited: 0x4c8)
struct UChaGA_UAVRescue : USolarCharacterRoleAbility {
	struct ASolarUAVRescue* RescueUAVClass; // 0x4c8(0x08)
	float LifeTime; // 0x4d0(0x04)
	bool bEffectTeammates; // 0x4d4(0x01)
	char pad_4D5[0x3]; // 0x4d5(0x03)
	struct UAnimMontage* SummoEmptyMontage; // 0x4d8(0x08)
	struct UAnimMontage* SummonAnimMontage; // 0x4e0(0x08)
	float SummonTime; // 0x4e8(0x04)
	float PermanentSpawnDelay; // 0x4ec(0x04)
	float SkillRange; // 0x4f0(0x04)
	struct FGameplayTag CueTag; // 0x4f4(0x08)
	char pad_4FC[0xc]; // 0x4fc(0x0c)

	void SummonUAV(); // Function Solarland.ChaGA_UAVRescue.SummonUAV // (Final|Native|Private) // @ game+0x268b490
};

// Class Solarland.ChaGA_UAVShield
// Size: 0x508 (Inherited: 0x4c8)
struct UChaGA_UAVShield : USolarCharacterRoleAbility {
	struct ASolarUAVShield* ShieldUAVClass; // 0x4c8(0x08)
	char pad_4D0[0x10]; // 0x4d0(0x10)
	float LifeTime; // 0x4e0(0x04)
	bool bEffectTeammates; // 0x4e4(0x01)
	char pad_4E5[0x3]; // 0x4e5(0x03)
	struct UAnimMontage* SummonAnimMontage; // 0x4e8(0x08)
	struct UAnimMontage* SummonAnimMontage_Aim; // 0x4f0(0x08)
	float SummonTime; // 0x4f8(0x04)
	char pad_4FC[0xc]; // 0x4fc(0x0c)

	void SummonUAV(); // Function Solarland.ChaGA_UAVShield.SummonUAV // (Final|Native|Private) // @ game+0x268b4b0
};

// Class Solarland.ChaGA_UpgradeShield
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_UpgradeShield : USolarCharacterGameplayAbility {
	struct FGameplayTag UpgradeShieldMontageTag; // 0x460(0x08)
	struct FGameplayTagContainer ActivationRequiredTagsAny; // 0x468(0x20)

	void OnMontageInterruptOrCanceled(); // Function Solarland.ChaGA_UpgradeShield.OnMontageInterruptOrCanceled // (Final|Native|Private) // @ game+0x268f410
	void OnMontageCompleted(); // Function Solarland.ChaGA_UpgradeShield.OnMontageCompleted // (Final|Native|Private) // @ game+0x268f3f0
};

// Class Solarland.ChaGA_VaultBase
// Size: 0x4a0 (Inherited: 0x460)
struct UChaGA_VaultBase : USolarCharacterGameplayAbility {
	struct AActor* ContactActor; // 0x460(0x08)
	char pad_468[0x38]; // 0x468(0x38)

	void OnServerConfirm(); // Function Solarland.ChaGA_VaultBase.OnServerConfirm // (Final|Native|Protected) // @ game+0x268f6f0
	void OnMontageCompleted(); // Function Solarland.ChaGA_VaultBase.OnMontageCompleted // (Final|Native|Protected) // @ game+0x2681b90
	void OnMontageBlendOut(); // Function Solarland.ChaGA_VaultBase.OnMontageBlendOut // (Final|Native|Protected) // @ game+0x268f3d0
};

// Class Solarland.ChaGA_Vault
// Size: 0x570 (Inherited: 0x4a0)
struct UChaGA_Vault : UChaGA_VaultBase {
	struct FGameplayTag StepMontageTag; // 0x4a0(0x08)
	struct FGameplayTag Step_CrossMontageTag; // 0x4a8(0x08)
	struct FGameplayTag Step_SprintMontageTag; // 0x4b0(0x08)
	struct FGameplayTag Step_Sprint_CrossMontageTag; // 0x4b8(0x08)
	struct FGameplayTag VaultMontageTag; // 0x4c0(0x08)
	struct FGameplayTag Vault_CrossMontageTag; // 0x4c8(0x08)
	struct FGameplayTag Vault_SprintMontageTag; // 0x4d0(0x08)
	struct FGameplayTag Vault_Sprint_CrossMontageTag; // 0x4d8(0x08)
	struct FGameplayTag ClimbMontageTag; // 0x4e0(0x08)
	struct FGameplayTag Climb_CrossMontageTag; // 0x4e8(0x08)
	struct FGameplayTag Climb_SprintMontageTag; // 0x4f0(0x08)
	struct FGameplayTag Climb_Sprint_CrossMontageTag; // 0x4f8(0x08)
	struct FGameplayTag Climb_WaterMontageTag; // 0x500(0x08)
	struct FGameplayTag HighClimbMontageTag; // 0x508(0x08)
	struct FGameplayTag HighClimb_CrossMontageTag; // 0x510(0x08)
	struct FGameplayTag HighClimb_SprintMontageTag; // 0x518(0x08)
	struct FGameplayTag HighClimb_Sprint_CrossMontageTag; // 0x520(0x08)
	struct FString PlayerCancelVaultEventName; // 0x528(0x10)
	struct FString TeammateCancelVaultEventName; // 0x538(0x10)
	struct FString EnemyCancelVaultEventName; // 0x548(0x10)
	char pad_558[0x18]; // 0x558(0x18)

	void OnRootMotionModifierDeactivate(struct ACharacter* Character, struct URootMotionModifier* Modifier); // Function Solarland.ChaGA_Vault.OnRootMotionModifierDeactivate // (Final|Native|Protected) // @ game+0x268f620
	void OnHandleNotify(struct USolarAnimInstance* AnimInstance, struct USolarAnimNotify* Notify, int32_t& OutDenial); // Function Solarland.ChaGA_Vault.OnHandleNotify // (Final|Native|Protected|HasOutParms) // @ game+0x268f1e0
};

// Class Solarland.ChaGA_VehicleFire
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_VehicleFire : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_VehicleForceJetFlyAction
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_VehicleForceJetFlyAction : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_VehicleReload
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_VehicleReload : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_WallRun
// Size: 0x4f0 (Inherited: 0x460)
struct UChaGA_WallRun : USolarCharacterGameplayAbility {
	float WallRunCameraAngleTolerance; // 0x460(0x04)
	float WallRunJumpReactionDelay; // 0x464(0x04)
	float FootOffset; // 0x468(0x04)
	float WallRunBlendOut; // 0x46c(0x04)
	float SurfaceAngleLerpSpeed; // 0x470(0x04)
	float MaxStandAngle; // 0x474(0x04)
	struct FVector2D LandingForceMagnitude; // 0x478(0x08)
	int32_t MaxTriggerNumPerAirMove; // 0x480(0x04)
	float WallRunJumpHeight; // 0x484(0x04)
	float WallRunJumpDist; // 0x488(0x04)
	float WallRunFailedHeight; // 0x48c(0x04)
	float WallRunFailedDist; // 0x490(0x04)
	struct FGameplayTag WithWeaponFailedMontageTag; // 0x494(0x08)
	struct FGameplayTag EmptyHandFailedMontageTag; // 0x49c(0x08)
	struct FName CancelActionName; // 0x4a4(0x08)
	struct FName JumpActionName; // 0x4ac(0x08)
	char pad_4B4[0x4]; // 0x4b4(0x04)
	struct UChaAT_WaitLandingSpot* LandingTask; // 0x4b8(0x08)
	char pad_4C0[0x30]; // 0x4c0(0x30)

	void OnTakeDamage(struct ASolarCharacter* Character, struct ASolarCharacter* InstigatorCharacter, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaGA_WallRun.OnTakeDamage // (Final|Native|Private|HasOutParms) // @ game+0x268f750
	void OnSyncForceBlendOut(); // Function Solarland.ChaGA_WallRun.OnSyncForceBlendOut // (Final|Native|Private) // @ game+0x268f730
	void OnServerConfirm(); // Function Solarland.ChaGA_WallRun.OnServerConfirm // (Final|Native|Private) // @ game+0x268f710
	void OnRequestedToJump(); // Function Solarland.ChaGA_WallRun.OnRequestedToJump // (Final|Native|Private) // @ game+0x268f600
	void OnCancel(); // Function Solarland.ChaGA_WallRun.OnCancel // (Final|Native|Private) // @ game+0x268eff0
	void OnAcceptWallRunJump(); // Function Solarland.ChaGA_WallRun.OnAcceptWallRunJump // (Final|Native|Private) // @ game+0x268ede0
};

// Class Solarland.ChaGA_WallRunJump
// Size: 0x4a0 (Inherited: 0x460)
struct UChaGA_WallRunJump : USolarCharacterGameplayAbility {
	float CameraRotLagSpeed; // 0x460(0x04)
	float AttemptVaultDelay; // 0x464(0x04)
	struct FGameplayTag WithWeaponJumpMontageTag; // 0x468(0x08)
	struct FGameplayTag EmptyHandJumpMontageTag; // 0x470(0x08)
	struct FGameplayTag WithWeaponFailedMontageTag; // 0x478(0x08)
	struct FGameplayTag EmptyHandFailedMontageTag; // 0x480(0x08)
	char pad_488[0x18]; // 0x488(0x18)

	void OnMontageCompleted(); // Function Solarland.ChaGA_WallRunJump.OnMontageCompleted // (Final|Native|Private) // @ game+0x2681b90
	void OnMontageBlendOut(); // Function Solarland.ChaGA_WallRunJump.OnMontageBlendOut // (Final|Native|Private) // @ game+0x2681b90
	void OnAttemptVault(); // Function Solarland.ChaGA_WallRunJump.OnAttemptVault // (Final|Native|Private) // @ game+0x268efd0
};

// Class Solarland.ChaGA_Zipline
// Size: 0x480 (Inherited: 0x460)
struct UChaGA_Zipline : USolarCharacterGameplayAbility {
	struct FName CancelActionName; // 0x460(0x08)
	char pad_468[0x18]; // 0x468(0x18)

	void OnCancelled(); // Function Solarland.ChaGA_Zipline.OnCancelled // (Final|Native|Protected) // @ game+0x7e1410
	void OnArrived(); // Function Solarland.ChaGA_Zipline.OnArrived // (Final|Native|Protected) // @ game+0x2681b90
};

// Class Solarland.ChaGC_CharacterActorCueBase
// Size: 0x2b0 (Inherited: 0x298)
struct AChaGC_CharacterActorCueBase : AGameplayCueNotify_Actor {
	struct TArray<struct FCueContent> CueContents; // 0x298(0x10)
	char pad_2A8[0x8]; // 0x2a8(0x08)

	bool WhileActiveInternal(struct ASolarCharacter* Character, struct FGameplayCueParameters& Parameters); // Function Solarland.ChaGC_CharacterActorCueBase.WhileActiveInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x268f9c0
	bool OnRemoveInternal(struct ASolarCharacter* NullableCharacter, struct FGameplayCueParameters& Parameters); // Function Solarland.ChaGC_CharacterActorCueBase.OnRemoveInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x268f430
	void OnLocalPlayerSpectateMeStatusChanged(struct ASolarCharacter* Character, bool bIsSpectating); // Function Solarland.ChaGC_CharacterActorCueBase.OnLocalPlayerSpectateMeStatusChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x268f300
	bool OnExecuteInternal(struct ASolarCharacter* Character, struct FGameplayCueParameters& Parameters); // Function Solarland.ChaGC_CharacterActorCueBase.OnExecuteInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x268f010
	bool OnActiveInternal(struct ASolarCharacter* Character, struct FGameplayCueParameters& Parameters); // Function Solarland.ChaGC_CharacterActorCueBase.OnActiveInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x268ee00
	bool ListenLocalPlayerSpectateMeStatus(); // Function Solarland.ChaGC_CharacterActorCueBase.ListenLocalPlayerSpectateMeStatus // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x268edb0
};

// Class Solarland.ChaGC_AerialReconnaissanc
// Size: 0x2b8 (Inherited: 0x2b0)
struct AChaGC_AerialReconnaissanc : AChaGC_CharacterActorCueBase {
	float TestDistance; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)
};

// Class Solarland.ChaGC_AirDrop
// Size: 0x298 (Inherited: 0x298)
struct AChaGC_AirDrop : AGameplayCueNotify_Actor {
};

// Class Solarland.ChaGC_BackpackPropelling
// Size: 0x58 (Inherited: 0x50)
struct UChaGC_BackpackPropelling : UGameplayCueNotify_Static {
	enum class EFXJetType JetType; // 0x50(0x01)
	bool bCheckGround; // 0x51(0x01)
	char pad_52[0x6]; // 0x52(0x06)
};

// Class Solarland.ChaGC_BlinkAppear
// Size: 0x88 (Inherited: 0x50)
struct UChaGC_BlinkAppear : UGameplayCueNotify_Static {
	struct UAnimMontage* AppearAnimMontageEmptyAir; // 0x50(0x08)
	struct UAnimMontage* AppearAnimMontageWithGunAir; // 0x58(0x08)
	struct UAnimMontage* AppearAnimMontageEmptyGround; // 0x60(0x08)
	struct UAnimMontage* AppearAnimMontageWithGunGround; // 0x68(0x08)
	struct UParticleSystem* BlinkAppearParticle; // 0x70(0x08)
	struct FString BlinkAppearSoundName; // 0x78(0x10)
};

// Class Solarland.ChaGC_BlinkVanish
// Size: 0x88 (Inherited: 0x50)
struct UChaGC_BlinkVanish : UGameplayCueNotify_Static {
	struct UAnimMontage* VanishAnimMontageEmptyAir; // 0x50(0x08)
	struct UAnimMontage* VanishAnimMontageWithGunAir; // 0x58(0x08)
	struct UAnimMontage* VanishAnimMontageEmptyGround; // 0x60(0x08)
	struct UAnimMontage* VanishAnimMontageWithGunGround; // 0x68(0x08)
	struct UParticleSystem* BlinkVanishParticle; // 0x70(0x08)
	struct FString BlinkVanishSoundName; // 0x78(0x10)
};

// Class Solarland.ChaGC_DGSummon_MaterialUpdate
// Size: 0x2d8 (Inherited: 0x2b0)
struct AChaGC_DGSummon_MaterialUpdate : AChaGC_CharacterActorCueBase {
	struct TArray<struct FDGMatUpdateParams> MatUpdateParams; // 0x2b0(0x10)
	enum class EMatActionOnRemoved MatActionOnRemoved; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)
	struct USkeletalMeshComponent* CharacterMesh; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)
};

// Class Solarland.ChaGC_DoppelgangerActive
// Size: 0x470 (Inherited: 0x2b0)
struct AChaGC_DoppelgangerActive : AChaGC_CharacterActorCueBase {
	int32_t DeactiveNoticeID; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)
	struct FParticleSystemContent DisappearParticle; // 0x2b8(0x88)
	struct FParticleSystemContent BuffParticle; // 0x340(0x88)
	struct FParticleSystemContent DeathParticle; // 0x3c8(0x88)
	struct FSoundContent DisappearSoundContent; // 0x450(0x08)
	struct FSoundContent DeathSoundContent; // 0x458(0x08)
	float DoppelgangerDeactiveDelay; // 0x460(0x04)
	char pad_464[0xc]; // 0x464(0x0c)
};

// Class Solarland.ChaGC_DoppelgangerExposeEnemy
// Size: 0x2d8 (Inherited: 0x2b0)
struct AChaGC_DoppelgangerExposeEnemy : AChaGC_CharacterActorCueBase {
	int32_t ExposedNoticeID; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)
	struct TArray<struct FActorEffectContent> ActorEffectContents_Exposed; // 0x2b8(0x10)
	struct TArray<struct FActorEffectContent> ActorEffectContents_Exposer; // 0x2c8(0x10)
};

// Class Solarland.ChaGC_ExtraShield
// Size: 0x2c8 (Inherited: 0x2b0)
struct AChaGC_ExtraShield : AChaGC_CharacterActorCueBase {
	struct TArray<struct FSolarExtraShieldEffect> ExtraShieldEffectArray; // 0x2b0(0x10)
	char pad_2C0[0x8]; // 0x2c0(0x08)
};

// Class Solarland.ChaGC_HighAlert
// Size: 0x310 (Inherited: 0x2b0)
struct AChaGC_HighAlert : AChaGC_CharacterActorCueBase {
	bool bShowDebug; // 0x2b0(0x01)
	char pad_2B1[0x3]; // 0x2b1(0x03)
	float DebugTextDuration; // 0x2b4(0x04)
	float DebugDistance; // 0x2b8(0x04)
	int32_t NoticeId; // 0x2bc(0x04)
	struct TMap<enum class EAlertDirection, struct FBuffEffectContent> ScreenCueContentMap; // 0x2c0(0x50)

	void ReceiveAlertEvent(enum class EAlertDirection InDirection); // Function Solarland.ChaGC_HighAlert.ReceiveAlertEvent // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.ChaGC_JetSlowFalling
// Size: 0x50 (Inherited: 0x50)
struct UChaGC_JetSlowFalling : UGameplayCueNotify_Static {
};

// Class Solarland.ChaGC_SuperSkillActorCueBase
// Size: 0x2b8 (Inherited: 0x2b0)
struct AChaGC_SuperSkillActorCueBase : AChaGC_CharacterActorCueBase {
	struct FGameplayTag SuperSkillGameplayEffectTag; // 0x2b0(0x08)
};

// Class Solarland.ChaGC_MassInvisibility
// Size: 0x368 (Inherited: 0x2b8)
struct AChaGC_MassInvisibility : AChaGC_SuperSkillActorCueBase {
	struct UMaterialEffectBase* InvisibilityEffectClass; // 0x2b8(0x08)
	struct FGameplayTag InvisibilityOrnamentTag; // 0x2c0(0x08)
	struct FName BeginInvisibleCueEvent; // 0x2c8(0x08)
	int32_t SprintingStatusNotificationID; // 0x2d0(0x04)
	int32_t SprintingStatusTipShowInterval; // 0x2d4(0x04)
	float WarningOtherRange; // 0x2d8(0x04)
	float WarningOtherRangeOutThreshold; // 0x2dc(0x04)
	float PrepareWarningCueEventTriggerPoint; // 0x2e0(0x04)
	struct FName PrepareWarningCueEvent; // 0x2e4(0x08)
	float TimeBeforeEndToStartEndWarning; // 0x2ec(0x04)
	struct FName EndWarningMaterialParameterName; // 0x2f0(0x08)
	float EndWarningRate; // 0x2f8(0x04)
	float EndWarningCueEventTriggerPoint; // 0x2fc(0x04)
	struct FName EndWarningCueEvent; // 0x300(0x08)
	struct UCameraShake* CameraModifierClass; // 0x308(0x08)
	struct FGameplayTag SkillBuffGameplayEffectTag; // 0x310(0x08)
	struct FGameplayTag SkillPreGameplayEffectTag; // 0x318(0x08)
	char pad_320[0x48]; // 0x320(0x48)
};

// Class Solarland.ChaGC_ParkourAcceleration
// Size: 0x310 (Inherited: 0x298)
struct AChaGC_ParkourAcceleration : AGameplayCueNotify_Actor {
	struct FName FlushEffectID; // 0x298(0x08)
	struct FName TrailEffectID; // 0x2a0(0x08)
	struct TMap<struct FName, struct FVector2D> TrailEmitterParameters; // 0x2a8(0x50)
	struct FGameplayTag DurationTag; // 0x2f8(0x08)
	char pad_300[0x10]; // 0x300(0x10)
};

// Class Solarland.ChaGC_SkydiveFly
// Size: 0x308 (Inherited: 0x2b0)
struct AChaGC_SkydiveFly : AChaGC_CharacterActorCueBase {
	float MinBoostDuration; // 0x2b0(0x04)
	bool bIsBoost; // 0x2b4(0x01)
	char pad_2B5[0x13]; // 0x2b5(0x13)
	struct FSoftObjectPath SkywardDiveParticle; // 0x2c8(0x18)
	struct TArray<struct FName> SkywardDiveParticlePackageSocketNames; // 0x2e0(0x10)
	struct TArray<struct UParticleSystemComponent*> CacheSkywardDiveEffects; // 0x2f0(0x10)
	char pad_300[0x8]; // 0x300(0x08)

	void ShowEncircleParticle(bool bIsLocalTeam, bool bIsDefender); // Function Solarland.ChaGC_SkydiveFly.ShowEncircleParticle // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x268f8f0
};

// Class Solarland.ChaGC_SkydiveSound
// Size: 0x2b8 (Inherited: 0x298)
struct AChaGC_SkydiveSound : AGameplayCueNotify_Actor {
	struct TArray<struct FName> StartSoundGroups; // 0x298(0x10)
	struct TArray<struct FName> StopSoundGroups; // 0x2a8(0x10)
};

// Class Solarland.ChaGC_SkywardDiveLaunch
// Size: 0x2d0 (Inherited: 0x298)
struct AChaGC_SkywardDiveLaunch : AGameplayCueNotify_Actor {
	struct USkywardDiveConfig* SkillConfig; // 0x298(0x08)
	struct TArray<struct UParticleSystemComponent*> CacheSkywardExtraEffects; // 0x2a0(0x10)
	struct UCameraShake* LaunchCameraShakeInstance; // 0x2b0(0x08)
	char pad_2B8[0x18]; // 0x2b8(0x18)
};

// Class Solarland.ChaGC_SkywardDivePrepare
// Size: 0x2c8 (Inherited: 0x298)
struct AChaGC_SkywardDivePrepare : AGameplayCueNotify_Actor {
	struct USkywardDiveConfig* SkillConfig; // 0x298(0x08)
	struct UParticleSystemComponent* PrepareBeamEffect; // 0x2a0(0x08)
	struct UCameraShake* PrepareCameraShakeInstance; // 0x2a8(0x08)
	struct TArray<struct UParticleSystemComponent*> PreparePackageEffect; // 0x2b0(0x10)
	char pad_2C0[0x8]; // 0x2c0(0x08)
};

// Class Solarland.ChaGC_SummonTowerHoldEar
// Size: 0x300 (Inherited: 0x2b0)
struct AChaGC_SummonTowerHoldEar : AChaGC_CharacterActorCueBase {
	struct FGameplayTag EarOrnamentTag; // 0x2b0(0x08)
	struct FName EarHoldSocketName; // 0x2b8(0x08)
	struct FTransform HoldRelativeTransform; // 0x2c0(0x30)
	struct FName EarReleaseSocketName; // 0x2f0(0x08)
	char pad_2F8[0x8]; // 0x2f8(0x08)
};

// Class Solarland.ChaGC_SwitchToDuckRollingMesh
// Size: 0x2b0 (Inherited: 0x2b0)
struct AChaGC_SwitchToDuckRollingMesh : AChaGC_CharacterActorCueBase {
};

// Class Solarland.ChaGC_WallRun
// Size: 0x50 (Inherited: 0x50)
struct UChaGC_WallRun : UGameplayCueNotify_Static {
};

// Class Solarland.CharacterBasalAttributeSet
// Size: 0x378 (Inherited: 0x68)
struct UCharacterBasalAttributeSet : UBasalAttributeSet {
	struct FGameplayAttributeData Speed; // 0x68(0x10)
	struct FGameplayAttributeData BaseSpeed; // 0x78(0x10)
	struct FGameplayAttributeData PassiveSkillSpeedMultiple; // 0x88(0x10)
	struct FGameplayAttributeData ShootingSpeedMultiple; // 0x98(0x10)
	struct FGameplayAttributeData CustomJumpHeightMultiple; // 0xa8(0x10)
	struct FGameplayAttributeData AllSpeedParamA; // 0xb8(0x10)
	struct FGameplayAttributeData AllSpeedParamB; // 0xc8(0x10)
	struct FGameplayAttributeData AllSpeedParamC; // 0xd8(0x10)
	struct FGameplayAttributeData AllSpeedParamD; // 0xe8(0x10)
	struct FGameplayAttributeData GroundSpeedParamA; // 0xf8(0x10)
	struct FGameplayAttributeData GroundSpeedParamB; // 0x108(0x10)
	struct FGameplayAttributeData GroundSpeedParamC; // 0x118(0x10)
	struct FGameplayAttributeData GroundSpeedParamD; // 0x128(0x10)
	struct FGameplayAttributeData SwimSpeedParamA; // 0x138(0x10)
	struct FGameplayAttributeData SwimSpeedParamB; // 0x148(0x10)
	struct FGameplayAttributeData SwimSpeedParamC; // 0x158(0x10)
	struct FGameplayAttributeData SwimSpeedParamD; // 0x168(0x10)
	struct FGameplayAttributeData MaxShield; // 0x178(0x10)
	struct FGameplayAttributeData CurrentShield; // 0x188(0x10)
	struct FGameplayAttributeData ShieldMultiRecoverCoeff; // 0x198(0x10)
	struct FGameplayAttributeData ExtraShieldA; // 0x1a8(0x10)
	struct FGameplayAttributeData ShieldReductionDamageMultiple; // 0x1b8(0x10)
	struct FGameplayAttributeData RadialDamageReductionMultiple; // 0x1c8(0x10)
	struct FGameplayAttributeData AllDamageReductionMultiple; // 0x1d8(0x10)
	struct FGameplayAttributeData WeaponDamageParamA; // 0x1e8(0x10)
	struct FGameplayAttributeData WeaponDamageParamB; // 0x1f8(0x10)
	struct FGameplayAttributeData WeaponDamageParamC; // 0x208(0x10)
	struct FGameplayAttributeData WeaponDamageParamD; // 0x218(0x10)
	struct FGameplayAttributeData UnarmedWeaponDamageParamB; // 0x228(0x10)
	struct FGameplayAttributeData VehicleWeaponDamageParamB; // 0x238(0x10)
	struct FGameplayAttributeData VehicleHitDamageParamB; // 0x248(0x10)
	struct FGameplayAttributeData VehicleAbilityDamageParamB; // 0x258(0x10)
	struct FGameplayAttributeData CharacterSkillDamageParamB; // 0x268(0x10)
	struct FGameplayAttributeData VerticalJetTimesCD; // 0x278(0x10)
	struct FGameplayAttributeData VerticalJetInnerCD; // 0x288(0x10)
	struct FGameplayAttributeData VerticalJetTimes; // 0x298(0x10)
	struct FGameplayAttributeData VerticalJetRestTimes; // 0x2a8(0x10)
	struct FGameplayAttributeData HorizontalJetTimesCD; // 0x2b8(0x10)
	struct FGameplayAttributeData HorizontalJetInnerCD; // 0x2c8(0x10)
	struct FGameplayAttributeData HorizontalJetTimes; // 0x2d8(0x10)
	struct FGameplayAttributeData HorizontalJetRestTimes; // 0x2e8(0x10)
	struct FGameplayAttributeData RescueRecoveredMultiple; // 0x2f8(0x10)
	struct FGameplayAttributeData TreatmentDurationReductionMultiple; // 0x308(0x10)
	struct FGameplayAttributeData ShieldRecoveredMultiple; // 0x318(0x10)
	struct FGameplayAttributeData ChargingMultiple; // 0x328(0x10)
	struct FGameplayAttributeData AutoHealingRateOnMotorbike; // 0x338(0x10)
	struct FGameplayAttributeData RescueDurationReductionMultiple; // 0x348(0x10)
	struct FGameplayAttributeData ReviveDurationReductionBonus; // 0x358(0x10)
	struct FGameplayAttributeData QuickReloadOverrideTime; // 0x368(0x10)

	void OnRep_VerticalJetTimesCD(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_VerticalJetTimesCD // (Final|Native|Protected|HasOutParms) // @ game+0x2694850
	void OnRep_VerticalJetTimes(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_VerticalJetTimes // (Final|Native|Protected|HasOutParms) // @ game+0x26947b0
	void OnRep_VerticalJetRestTimes(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_VerticalJetRestTimes // (Final|Native|Protected|HasOutParms) // @ game+0x2694710
	void OnRep_VerticalJetInnerCD(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_VerticalJetInnerCD // (Final|Native|Protected|HasOutParms) // @ game+0x2694670
	void OnRep_TreatmentDurationReductionMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_TreatmentDurationReductionMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x26945d0
	void OnRep_Speed(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_Speed // (Native|Protected|HasOutParms) // @ game+0x2694520
	void OnRep_ShieldMultiRecoverCoeff(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_ShieldMultiRecoverCoeff // (Native|Protected|HasOutParms) // @ game+0x2694470
	void OnRep_RescueDurationReductionMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_RescueDurationReductionMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x26943d0
	void OnRep_MaxShield(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_MaxShield // (Native|Protected|HasOutParms) // @ game+0x2694320
	void OnRep_HorizontalJetTimesCD(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_HorizontalJetTimesCD // (Final|Native|Protected|HasOutParms) // @ game+0x2694280
	void OnRep_HorizontalJetTimes(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_HorizontalJetTimes // (Final|Native|Protected|HasOutParms) // @ game+0x26941e0
	void OnRep_HorizontalJetRestTimes(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_HorizontalJetRestTimes // (Final|Native|Protected|HasOutParms) // @ game+0x2694140
	void OnRep_HorizontalJetInnerCD(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_HorizontalJetInnerCD // (Final|Native|Protected|HasOutParms) // @ game+0x26940a0
	void OnRep_ExtraShieldA(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_ExtraShieldA // (Native|Protected|HasOutParms) // @ game+0x2693ff0
	void OnRep_CurrentShield(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_CurrentShield // (Native|Protected|HasOutParms) // @ game+0x2693f40
};

// Class Solarland.CharacterBillboardIconConfigDataAsset
// Size: 0xa0 (Inherited: 0x30)
struct UCharacterBillboardIconConfigDataAsset : UDataAsset {
	struct FVector BillboardComponentScale; // 0x30(0x0c)
	struct FVector BillboardOffsetDefault; // 0x3c(0x0c)
	struct FVector BillboardOffsetCrouch; // 0x48(0x0c)
	struct FVector BillboardOffsetCrawl; // 0x54(0x0c)
	float BillboardOffsetSmoothSpeed; // 0x60(0x04)
	float BillboardOffsetForceNoSmoothDistance; // 0x64(0x04)
	struct UStaticMeshComponent* IconComponentClass; // 0x68(0x08)
	struct TArray<struct FSolarCharacterBillboardIconGroupConfig> IconGroupConfigs; // 0x70(0x10)
	struct FGameplayTag CharacterInvisibilityWarningIconTag; // 0x80(0x08)
	struct FGameplayTag VehicleInvisibilityWarningIconTag; // 0x88(0x08)
	struct FName IconOffsetYParamName; // 0x90(0x08)
	int32_t CoexistIconMaxCount; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.CharacterBodyScaleConfigDataAsset
// Size: 0x1a8 (Inherited: 0x30)
struct UCharacterBodyScaleConfigDataAsset : UDataAsset {
	struct TMap<enum class ECharacterBodyScaleType, struct FCharacterBodyScaleConfig> ConfigMap; // 0x30(0x50)
	struct FCharacterAssistAimTargetConfig DefaultAssistAimTargetConfig; // 0x80(0xd8)
	struct TMap<enum class ECharacterBodyScaleType, struct FCharacterAssistAimTargetConfig> AssistAimTargetConfigMap; // 0x158(0x50)
};

// Class Solarland.CharacterConfigAsset
// Size: 0x30 (Inherited: 0x30)
struct UCharacterConfigAsset : UDataAsset {
};

// Class Solarland.CharacterCruiseComponent
// Size: 0x110 (Inherited: 0xb0)
struct UCharacterCruiseComponent : UActorComponent {
	struct ASolarCapsuleActor* BoardedCapsulePrivate; // 0xb0(0x08)
	char pad_B8[0xc]; // 0xb8(0x0c)
	struct FName CruiseStartSoundGroupName; // 0xc4(0x08)
	char pad_CC[0x44]; // 0xcc(0x44)

	struct ASolarCharacter* GetCharacterOwner(); // Function Solarland.CharacterCruiseComponent.GetCharacterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2693f20
};

// Class Solarland.CharacterGameplayTagsConfig
// Size: 0x740 (Inherited: 0x30)
struct UCharacterGameplayTagsConfig : UDataAsset {
	struct FGameplayTag CruiseAbilityTag; // 0x30(0x08)
	struct FGameplayTag SkydiveFlyAbilityTag; // 0x38(0x08)
	struct FGameplayTag SkydiveLandAbilityTag; // 0x40(0x08)
	struct FGameplayTag CrouchAbilityTag; // 0x48(0x08)
	struct FGameplayTag JumpAbilityTag; // 0x50(0x08)
	struct FGameplayTag SprintAbilityTag; // 0x58(0x08)
	struct FGameplayTag SwimAbilityTag; // 0x60(0x08)
	struct FGameplayTag VaultAbilityTag; // 0x68(0x08)
	struct FGameplayTag JetFlyAbilityTag; // 0x70(0x08)
	struct FGameplayTag JetFlyVertAbilityTag; // 0x78(0x08)
	struct FGameplayTag JetFlyHoriAbilityTag; // 0x80(0x08)
	struct FGameplayTag LaunchAbilityTag; // 0x88(0x08)
	struct FGameplayTag JetSlowFallingAbilityTag; // 0x90(0x08)
	struct FGameplayTag EquipAbilityTag; // 0x98(0x08)
	struct FGameplayTag MeleeAbilityTag; // 0xa0(0x08)
	struct FGameplayTag FireAbilityTag; // 0xa8(0x08)
	struct FGameplayTag ReloadAbilityTag; // 0xb0(0x08)
	struct FGameplayTag VehicleFireAbilityTag; // 0xb8(0x08)
	struct FGameplayTag VehicleReloadAbilityTag; // 0xc0(0x08)
	struct FGameplayTag BoltAbilityTag; // 0xc8(0x08)
	struct FGameplayTag OpenScopeAbilityTag; // 0xd0(0x08)
	struct FGameplayTag WeaponAbilityTag; // 0xd8(0x08)
	struct FGameplayTag GetOnVehicleAbilityTag; // 0xe0(0x08)
	struct FGameplayTag GetOffVehicleAbilityTag; // 0xe8(0x08)
	struct FGameplayTag SwitchVehicleSeatAbilityTag; // 0xf0(0x08)
	struct FGameplayTag StickOutOffVehicleAbilityTag; // 0xf8(0x08)
	struct FGameplayTag TreatAbilityTag; // 0x100(0x08)
	struct FGameplayTag RechargeShieldAbilityTag; // 0x108(0x08)
	struct FGameplayTag BigRechargeShieldAbilityTag; // 0x110(0x08)
	struct FGameplayTag UpgradeShieldAbilityTag; // 0x118(0x08)
	struct FGameplayTag OpenTreasureBoxAbilityTag; // 0x120(0x08)
	struct FGameplayTag OpenNewTreasureBoxAbilityTag; // 0x128(0x08)
	struct FGameplayTag RepairVehicleAbilityTag; // 0x130(0x08)
	struct FGameplayTag RescueAbilityTag; // 0x138(0x08)
	struct FGameplayTag PickUpAbilityTag; // 0x140(0x08)
	struct FGameplayTag AutoPickUpAbilityTag; // 0x148(0x08)
	struct FGameplayTag ResurrectTeammateAbilityTag; // 0x150(0x08)
	struct FGameplayTag DanceAbilityTag; // 0x158(0x08)
	struct FGameplayTag DeathVergeAbilityTag; // 0x160(0x08)
	struct FGameplayTag DeathAbilityTag; // 0x168(0x08)
	struct FGameplayTag RebirthAbilityTag; // 0x170(0x08)
	struct FGameplayTag ParkourMasterEffectTag; // 0x178(0x08)
	struct FGameplayTag HawkEyeEffectTag; // 0x180(0x08)
	struct FGameplayTag MassInvisibilityEffectTag; // 0x188(0x08)
	struct FGameplayTag MassInvisibilityExEffectTag; // 0x190(0x08)
	struct FGameplayTag RapidBoostEffectTag; // 0x198(0x08)
	struct FGameplayTag LaunchingTowerEffectTag; // 0x1a0(0x08)
	struct FGameplayTag MainContinousTag; // 0x1a8(0x08)
	struct FGameplayTag SubContinousTag; // 0x1b0(0x08)
	struct FGameplayTag HasPreBuffTag; // 0x1b8(0x08)
	struct FGameplayTag DurationPauseTag; // 0x1c0(0x08)
	struct FGameplayTag SuperSkillEffectTag; // 0x1c8(0x08)
	struct FGameplayTag TacticleSkillEffectTag; // 0x1d0(0x08)
	struct FGameplayTag SkydiveSoundTag; // 0x1d8(0x08)
	struct FGameplayTag WallRunCueTag; // 0x1e0(0x08)
	struct FGameplayTag CruisingStatusTag; // 0x1e8(0x08)
	struct FGameplayTag SinglyCruisingStatusTag; // 0x1f0(0x08)
	struct FGameplayTag WalkingStatusTag; // 0x1f8(0x08)
	struct FGameplayTag FallingStatusTag; // 0x200(0x08)
	struct FGameplayTag FlyingStatusTag; // 0x208(0x08)
	struct FGameplayTag SwimmingStatusTag; // 0x210(0x08)
	struct FGameplayTag SkydivingStatusTag; // 0x218(0x08)
	struct FGameplayTag VaultingStatusTag; // 0x220(0x08)
	struct FGameplayTag VaultingAcceptCancelTag; // 0x228(0x08)
	struct FGameplayTag VaultingAcceptWeaponInputTag; // 0x230(0x08)
	struct FGameplayTag WallRunStatusTag; // 0x238(0x08)
	struct FGameplayTag WallRunAttemptVaultTag; // 0x240(0x08)
	struct FGameplayTag GrapplingHookStatusTag; // 0x248(0x08)
	struct FGameplayTag LaunchStatusTag; // 0x250(0x08)
	struct FGameplayTag ZipLineStatusTag; // 0x258(0x08)
	struct FGameplayTag RunningStatusTag; // 0x260(0x08)
	struct FGameplayTag SprintingStatusTag; // 0x268(0x08)
	struct FGameplayTag StationaryStatusTag; // 0x270(0x08)
	struct FGameplayTag FollowViewRotationStatusTag; // 0x278(0x08)
	struct FGameplayTag RotationFollowVelocityStatusTag; // 0x280(0x08)
	struct FGameplayTag CollisionIgnorePawnChannelStatusTag; // 0x288(0x08)
	struct FGameplayTag WeaponStatusTag; // 0x290(0x08)
	struct FGameplayTag MeleeAttackingStatusTag; // 0x298(0x08)
	struct FGameplayTag FullBodyMeleeStatusTag; // 0x2a0(0x08)
	struct FGameplayTag FiringStatusTag; // 0x2a8(0x08)
	struct FGameplayTag VehicleFiringStatusTag; // 0x2b0(0x08)
	struct FGameplayTag HiddenFireStatusTag; // 0x2b8(0x08)
	struct FGameplayTag BoltingStatusTag; // 0x2c0(0x08)
	struct FGameplayTag ReloadingStatusTag; // 0x2c8(0x08)
	struct FGameplayTag ScopeOpeningStatusTag; // 0x2d0(0x08)
	struct FGameplayTag EnteringScopeOpeningStatusTag; // 0x2d8(0x08)
	struct FGameplayTag QuickReloadStatusTag; // 0x2e0(0x08)
	struct FGameplayTag AimingForAnimStatusTag; // 0x2e8(0x08)
	struct FGameplayTag AutoFireStatusTag; // 0x2f0(0x08)
	struct FGameplayTag FunctionalityStatusTag; // 0x2f8(0x08)
	struct FGameplayTag OpeningTreasureBoxStatusTag; // 0x300(0x08)
	struct FGameplayTag RechargingShieldStatusTag; // 0x308(0x08)
	struct FGameplayTag RescuingStatusTag; // 0x310(0x08)
	struct FGameplayTag TreatingStatusTag; // 0x318(0x08)
	struct FGameplayTag ReviveTeammateStatusTag; // 0x320(0x08)
	struct FGameplayTag InVehicleTag; // 0x328(0x08)
	struct FGameplayTag DanceStatusTag; // 0x330(0x08)
	struct FGameplayTag DanceLeaderStatusTag; // 0x338(0x08)
	struct FGameplayTag UsingContinuousSkill; // 0x340(0x08)
	struct FGameplayTag HoldingSkill; // 0x348(0x08)
	struct FGameplayTag AutoCancelOnInputReleased; // 0x350(0x08)
	struct FGameplayTag MassInvisibilityStatusTag; // 0x358(0x08)
	struct FGameplayTag MassInvisibilityPrepareStatusTag; // 0x360(0x08)
	struct FGameplayTag InvisibilityStatusByZoneTag; // 0x368(0x08)
	struct FGameplayTag SuperRadarChooseStatusTag; // 0x370(0x08)
	struct FGameplayTag RadarScanningStatusTag; // 0x378(0x08)
	struct FGameplayTag EMPStatusTag; // 0x380(0x08)
	struct FGameplayTag FreezeStatusTag; // 0x388(0x08)
	struct FGameplayTag PerspectiveByRadarStatusTag; // 0x390(0x08)
	struct FGameplayTag InhibitDebuffStatusTag; // 0x398(0x08)
	struct FGameplayTag CanScoutEnemyTag; // 0x3a0(0x08)
	struct FGameplayTag DuckRollingStatusTag; // 0x3a8(0x08)
	struct FGameplayTag DoppelActiveTag; // 0x3b0(0x08)
	struct FGameplayTag DeathVergeStatusTag; // 0x3b8(0x08)
	struct FGameplayTag DeathStatusTag; // 0x3c0(0x08)
	struct FGameplayTag InvincibleStatusTag; // 0x3c8(0x08)
	struct FGameplayTag InhibitOpenScopeStatusTag; // 0x3d0(0x08)
	struct FGameplayTag InhibitWeaponInputStatusTag; // 0x3d8(0x08)
	struct FGameplayTag InhibitWeaponFireInputStatusTag; // 0x3e0(0x08)
	struct FGameplayTag InhibitMoveStatusTag; // 0x3e8(0x08)
	struct FGameplayTag InhibitMoveCombinationStatusTag; // 0x3f0(0x08)
	struct FGameplayTag InhibitUnCrouchStatusTag; // 0x3f8(0x08)
	struct FGameplayTag InhibitSprintStatusTag; // 0x400(0x08)
	struct FGameplayTag InhibitAimOffsetStatusTag; // 0x408(0x08)
	struct FGameplayTag InhibitLeftHandWeaponAttachTag; // 0x410(0x08)
	struct FGameplayTag InhibitLeftHandWeaponAttachAnimNotifyTag; // 0x418(0x08)
	struct FGameplayTag InhibitInteractionOption; // 0x420(0x08)
	struct FGameplayTag InhibitContinuousTreatStatusTag; // 0x428(0x08)
	struct FGameplayTag InhibitFireStatusTag; // 0x430(0x08)
	struct FGameplayTag InhibitDamageReactionTag; // 0x438(0x08)
	struct FGameplayTag InhibitJetSlowFallingTag; // 0x440(0x08)
	struct FGameplayTag InhibitBlackHoleEffectStatusTag; // 0x448(0x08)
	struct FGameplayTag InhibitBattlePrompt; // 0x450(0x08)
	struct FGameplayTag VJetChargingStatusTag; // 0x458(0x08)
	struct FGameplayTag HJetChargingStatusTag; // 0x460(0x08)
	struct FGameplayTag GenericTalentActivationStatusTag; // 0x468(0x08)
	struct FGameplayTag TrackingMasterStatusTag; // 0x470(0x08)
	struct FGameplayTag ShieldMultiRecoverTag; // 0x478(0x08)
	struct FGameplayTag ShieldMultiRecoverOnGoingTag; // 0x480(0x08)
	struct FGameplayTag AerialReconnaissanceTagTag; // 0x488(0x08)
	struct FGameplayTag OpenAirDropTag; // 0x490(0x08)
	struct FGameplayTag ResurrectTeammateTag; // 0x498(0x08)
	struct FGameplayTag ReviveTeammateTag; // 0x4a0(0x08)
	struct FGameplayTag ReviveSelfTag; // 0x4a8(0x08)
	struct FGameplayTag RemindTeammateRescueTag; // 0x4b0(0x08)
	struct FGameplayTag HasRotationInputStatusTag; // 0x4b8(0x08)
	struct FGameplayTag InSmokeStatusTag; // 0x4c0(0x08)
	struct FGameplayTag LaunchingTowerStatusTag; // 0x4c8(0x08)
	struct FGameplayTag InBattleTag; // 0x4d0(0x08)
	struct FGameplayTag CamSmoothOffsetTag; // 0x4d8(0x08)
	struct FGameplayTag StartCruiseEventTag; // 0x4e0(0x08)
	struct FGameplayTag IntoParachuteZoneEventTag; // 0x4e8(0x08)
	struct FGameplayTag ForceParachuteEventTag; // 0x4f0(0x08)
	struct FGameplayTag FinishCruiseEventTag; // 0x4f8(0x08)
	struct FGameplayTag CrouchEventTag; // 0x500(0x08)
	struct FGameplayTag LaunchEventTag; // 0x508(0x08)
	struct FGameplayTag VaultEventTag; // 0x510(0x08)
	struct FGameplayTag StepEventTag; // 0x518(0x08)
	struct FGameplayTag WallRunEventTag; // 0x520(0x08)
	struct FGameplayTag WallRunJumpEventTag; // 0x528(0x08)
	struct FGameplayTag SingleCruiseEventTag; // 0x530(0x08)
	struct FGameplayTag HitRecoverEventTag; // 0x538(0x08)
	struct FGameplayTag MeleeAttackEventTag; // 0x540(0x08)
	struct FGameplayTag FireEventTag; // 0x548(0x08)
	struct FGameplayTag BoltEventTag; // 0x550(0x08)
	struct FGameplayTag EquipEventTag; // 0x558(0x08)
	struct FGameplayTag SwapEventTag; // 0x560(0x08)
	struct FGameplayTag ReloadEventTag; // 0x568(0x08)
	struct FGameplayTag VehicleReloadEventTag; // 0x570(0x08)
	struct FGameplayTag VehicleFireEventTag; // 0x578(0x08)
	struct FGameplayTag PickUpEventTag; // 0x580(0x08)
	struct FGameplayTag AutoPickUpEventTag; // 0x588(0x08)
	struct FGameplayTag RepairVehicleEventTag; // 0x590(0x08)
	struct FGameplayTag DanceEventTag; // 0x598(0x08)
	struct FGameplayTag SpawnRadarEventTag; // 0x5a0(0x08)
	struct FGameplayTag DyingEventTag; // 0x5a8(0x08)
	struct FGameplayTag KillOrAssistEventTag; // 0x5b0(0x08)
	struct FGameplayTag GottenOnVehicleEventTag; // 0x5b8(0x08)
	struct FGameplayTag GottenOffVehicleEventTag; // 0x5c0(0x08)
	struct FGameplayTag VehicleForJetEventTag; // 0x5c8(0x08)
	struct FGameplayTag SideLeavingEventTag; // 0x5d0(0x08)
	struct FGameplayTag SideJoiningEventTag; // 0x5d8(0x08)
	struct FGameplayTag SuperSkillCategoryTag; // 0x5e0(0x08)
	struct FGameplayTag SuperSkillForbiddenEventTag; // 0x5e8(0x08)
	struct FGameplayTag SuperSkillBlockEventTag; // 0x5f0(0x08)
	struct FGameplayTag SuperCanTriggerAgainEffectTag; // 0x5f8(0x08)
	struct FGameplayTag SuperSkillForbidUIStatusTag; // 0x600(0x08)
	struct FGameplayTag SuperSkillBlockStatusTag; // 0x608(0x08)
	struct FGameplayTag SuperSkillCDReducedStatusTag; // 0x610(0x08)
	struct FGameplayTag SuperCanTriggerAgainStatusTag; // 0x618(0x08)
	struct FGameplayTag TacticalSkillCategoryTag; // 0x620(0x08)
	struct FGameplayTag TacticalForbiddenEventTag; // 0x628(0x08)
	struct FGameplayTag TacticalBlockEventTag; // 0x630(0x08)
	struct FGameplayTag TacticalCanTriggerAgainEffectTag; // 0x638(0x08)
	struct FGameplayTag TacticalForbidUIStatusTag; // 0x640(0x08)
	struct FGameplayTag TacticalSkillCDReducedStatusTag; // 0x648(0x08)
	struct FGameplayTag TacticalSkillBlockStatusTag; // 0x650(0x08)
	struct FGameplayTag TacticalCanTriggerAgainStatusTag; // 0x658(0x08)
	struct FGameplayTag BigWaterGunActivatingTag; // 0x660(0x08)
	struct FGameplayTag AirDropTag; // 0x668(0x08)
	struct FGameplayTag NightComesBuff; // 0x670(0x08)
	struct FGameplayTag InNightComesTag; // 0x678(0x08)
	struct FGameplayTag NightComesActorContinous; // 0x680(0x08)
	struct FGameplayTag SkywardDiveAbilityTag; // 0x688(0x08)
	struct FGameplayTag SkywardDiveEffectTag; // 0x690(0x08)
	struct FGameplayTag SuperRadarScanTag; // 0x698(0x08)
	struct FGameplayTag RadarScanningTag; // 0x6a0(0x08)
	struct FGameplayTag BlackHoleStatusTag; // 0x6a8(0x08)
	struct FGameplayTag RoleAbilityRootTag; // 0x6b0(0x08)
	struct FGameplayTag RoleAbilityRootTypeTag; // 0x6b8(0x08)
	struct FGameplayTag SkillTypeTag; // 0x6c0(0x08)
	struct FGameplayTag SummonTypeTag; // 0x6c8(0x08)
	struct FGameplayTag ProjectileTypeTag; // 0x6d0(0x08)
	struct FGameplayTag Doppelganger_Summon_Tag; // 0x6d8(0x08)
	struct FGameplayTag Doppelganger_Control_Tag; // 0x6e0(0x08)
	struct FGameplayTag Doppelganger_Exchange_Tag; // 0x6e8(0x08)
	struct FGameplayTag InvisibleByZoneTag; // 0x6f0(0x08)
	struct FGameplayTag SummonedJumpPadLaunchCooldownTag; // 0x6f8(0x08)
	struct FGameplayTag ShieldMultiRecoverCoolDownTag; // 0x700(0x08)
	struct FGameplayTag GenericTalentCooldownTag; // 0x708(0x08)
	struct FGameplayTag VJetCooldownTag; // 0x710(0x08)
	struct FGameplayTag HJetCooldownTag; // 0x718(0x08)
	struct FGameplayTag InvisibleCharacterWarningIconTag; // 0x720(0x08)
	struct FGameplayTag InvisibleVehicleWarningIconTag; // 0x728(0x08)
	struct FGameplayTag NightComesIconTag; // 0x730(0x08)
	struct FGameplayTag AllyIconTag; // 0x738(0x08)
};

// Class Solarland.MaterialChangePriorityTags
// Size: 0x58 (Inherited: 0x30)
struct UMaterialChangePriorityTags : UDataAsset {
	struct FGameplayTag Default; // 0x30(0x08)
	struct FGameplayTag Radar; // 0x38(0x08)
	struct FGameplayTag Stealth; // 0x40(0x08)
	struct FGameplayTag WholeShield; // 0x48(0x08)
	struct FGameplayTag ThermalImaging; // 0x50(0x08)
};

// Class Solarland.VisibilityFlagTags
// Size: 0x88 (Inherited: 0x30)
struct UVisibilityFlagTags : UDataAsset {
	struct FGameplayTag Default; // 0x30(0x08)
	struct FGameplayTag Cruise; // 0x38(0x08)
	struct FGameplayTag Stealth; // 0x40(0x08)
	struct FGameplayTag CameraOverlap; // 0x48(0x08)
	struct FGameplayTag DissolvedDeath; // 0x50(0x08)
	struct FGameplayTag WholeShield; // 0x58(0x08)
	struct FGameplayTag MassInvisibility; // 0x60(0x08)
	struct FGameplayTag MassInvisibilityWarning; // 0x68(0x08)
	struct FGameplayTag BuffEffectSuppress; // 0x70(0x08)
	struct FGameplayTag OnVehicle; // 0x78(0x08)
	struct FGameplayTag OpenScope; // 0x80(0x08)
};

// Class Solarland.CharacterMontageTags
// Size: 0x50 (Inherited: 0x30)
struct UCharacterMontageTags : UDataAsset {
	struct FGameplayTag TeamRescueMontageTag; // 0x30(0x08)
	struct FGameplayTag RechargeShieldTag; // 0x38(0x08)
	struct FGameplayTag UpgradeShieldTag; // 0x40(0x08)
	struct FGameplayTag LeadingDanceTag; // 0x48(0x08)
};

// Class Solarland.CharacterGlobalConfig
// Size: 0xc10 (Inherited: 0x30)
struct UCharacterGlobalConfig : UDataAsset {
	struct TMap<int32_t, struct FCharacterSpecializedComponentInfos> CharacterSpecializedComponentInfos; // 0x30(0x50)
	struct FName HeadBoneName; // 0x80(0x08)
	struct TArray<struct UDataTable*> SoundGroupMappings; // 0x88(0x10)
	struct FString WwiseSwitchType_PlayerIdentity; // 0x98(0x10)
	struct FString PlayerIdentity_Self; // 0xa8(0x10)
	struct FString PlayerIdentity_Teammate; // 0xb8(0x10)
	struct FString PlayerIdentity_Other; // 0xc8(0x10)
	struct FString WwiseSwitchType_SurfaceType; // 0xd8(0x10)
	struct FGameplayCueTag TeamPerspectiveCueTag_LocalPlayer; // 0xe8(0x08)
	struct FGameplayCueTag TeamPerspectiveCueTag_Teammate; // 0xf0(0x08)
	struct FGameplayTagRequirements TeamPerspectiveTagRequirements_Teammate; // 0xf8(0x50)
	struct FGameplayCueTag OpponentPerspectiveCueTag; // 0x148(0x08)
	float OpponentPerspectiveMinDistance; // 0x150(0x04)
	float OpponentPerspectiveMaxDistance; // 0x154(0x04)
	struct FGameplayTagRequirements OpponentPerspectiveLocalPlayerTagRequirements; // 0x158(0x50)
	struct FGameplayTagRequirements OpponentPerspectiveOpponentTagRequirements; // 0x1a8(0x50)
	float OpponentPerspectiveDisableDelay; // 0x1f8(0x04)
	char pad_1FC[0x4]; // 0x1fc(0x04)
	struct FInjectorMeshPreset RescueInjectorPreset; // 0x200(0x50)
	int32_t FastReliefPassiveTextID; // 0x250(0x04)
	int32_t RescueTextID; // 0x254(0x04)
	struct UCameraShake* HitCameraShake; // 0x258(0x08)
	float CameraShakeCD; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
	struct UMaterialParameterCollection* CameraFOVParameterCollection; // 0x268(0x08)
	struct FGameplayTagContainer ForbiddenCameraFreeLookTags; // 0x270(0x20)
	struct TArray<struct FFloatRange> CameraConfigFOVSections; // 0x290(0x10)
	struct FVector ThirdPersonCameraOffset; // 0x2a0(0x0c)
	char pad_2AC[0x4]; // 0x2ac(0x04)
	int64_t ChargingDoneSoundCD; // 0x2b0(0x08)
	struct UGameplayEffect* ExtraVJetTimesEffect; // 0x2b8(0x08)
	struct UGameplayEffect* VJetChargeScaleEffect; // 0x2c0(0x08)
	struct UGameplayEffect* ExtraHJetTimesEffect; // 0x2c8(0x08)
	struct UGameplayEffect* HJetChargeScaleEffect; // 0x2d0(0x08)
	struct FGameplayTag ExtraJetTimesSetterTag; // 0x2d8(0x08)
	struct FGameplayTag JetChargeScaleSetterTag; // 0x2e0(0x08)
	int32_t DeathBoxId; // 0x2e8(0x04)
	float TurnSpeed; // 0x2ec(0x04)
	float TurnChangeSpeedThreshold; // 0x2f0(0x04)
	float TurnAngleThreshold; // 0x2f4(0x04)
	float SprintTolerantAngle; // 0x2f8(0x04)
	float SkydiveFollowingTeleportTriggerDistance; // 0x2fc(0x04)
	float SkydiveFollowingTeleportDistance; // 0x300(0x04)
	float JetLandingTriggerMinVelocity; // 0x304(0x04)
	float JetLandingHeightThreshold; // 0x308(0x04)
	float JetLandingVelocity; // 0x30c(0x04)
	float MaxSpeedParamB; // 0x310(0x04)
	float MinSpeedParamD; // 0x314(0x04)
	struct FGameplayTagRequirements CanAdjustFallingVelocityOnSlidingTags; // 0x318(0x50)
	struct FRuntimeFloatCurve NetworkMaxSmoothUpdateDistanceBySpeedCurve; // 0x368(0x88)
	struct FRuntimeFloatCurve NetworkNoSmoothUpdateDistanceBySpeedCurve; // 0x3f0(0x88)
	struct FRuntimeFloatCurve NetworkSimulatedSmoothLocationTimeBySpeedCurve; // 0x478(0x88)
	struct UCruiseAssetSet* CruiseAssetSet; // 0x500(0x08)
	struct FString AirborneStartSound; // 0x508(0x10)
	struct FString AirborneJumpSound; // 0x518(0x10)
	struct FName SingleCruiseStartSound; // 0x528(0x08)
	struct FName CruiseStartSoundHeightGroupName; // 0x530(0x08)
	struct USkydiveConfig* SkydiveConfigOriginal; // 0x538(0x08)
	struct TMap<struct FName, struct USkydiveConfig*> SkydiveConfigsSpecial; // 0x540(0x50)
	float VaultDegree; // 0x590(0x04)
	float VaultHalfHeight; // 0x594(0x04)
	struct FName DetectorProfile; // 0x598(0x08)
	float KneeWaterInfluencesCharacterSpeed; // 0x5a0(0x04)
	float WaterDraftDepthWhenDeathVerge; // 0x5a4(0x04)
	float ShoalWaterMaxDepth; // 0x5a8(0x04)
	float HeavyJumpWaterMinAxisVelocity; // 0x5ac(0x04)
	struct FWaterEffectPreset SwimmingWaterEffectPreset; // 0x5b0(0x50)
	struct FWaterEffectPreset HeavyJumpWaterEffectPreset; // 0x600(0x50)
	struct TArray<struct FWaterEffectPreset> SoftJumpWaterEffectPresets; // 0x650(0x10)
	struct FGameplayCueTag InWaterLocalGameplayCueTag; // 0x660(0x08)
	struct FName PickupCollisionProfileName; // 0x668(0x08)
	float PoisonRecommendToleranceTimes; // 0x670(0x04)
	char pad_674[0xc]; // 0x674(0x0c)
	struct FTreasureBoxOperatorMeshPreset TreasureBoxOperatorMeshPreset; // 0x680(0x50)
	int32_t AirDropSkillTextID; // 0x6d0(0x04)
	char pad_6D4[0x4]; // 0x6d4(0x04)
	struct FString TreatFX; // 0x6d8(0x10)
	int32_t TreatmentTextID; // 0x6e8(0x04)
	float MinHealthRatioToShowMedicineFX; // 0x6ec(0x04)
	struct TSoftObjectPtr<UParticleSystem> RevivePickupFX; // 0x6f0(0x28)
	struct TSoftObjectPtr<UParticleSystem> ReviveClearFX; // 0x718(0x28)
	int32_t ResurrectTextID; // 0x740(0x04)
	float ResurrectTime; // 0x744(0x04)
	struct TArray<struct TSoftObjectPtr<UParticleSystem>> ShieldUpgradeBodyLoopFXTemplate; // 0x748(0x10)
	struct TArray<struct TSoftObjectPtr<UParticleSystem>> ShieldUpgradeBodyEndFXTemplate; // 0x758(0x10)
	char pad_768[0x8]; // 0x768(0x08)
	struct FOperatorMeshPreset ShieldOperatorPreset; // 0x770(0x120)
	struct UCurveFloat* ShieldOperatorExpandCurve; // 0x890(0x08)
	struct UCurveFloat* ShieldOperatorNarrowCurve; // 0x898(0x08)
	struct FName EffectAttachBone; // 0x8a0(0x08)
	struct FString ShieldRechargeEffect; // 0x8a8(0x10)
	struct FString ShieldBrokenEffect; // 0x8b8(0x10)
	float HitEffectOffset; // 0x8c8(0x04)
	int32_t ShieldRechargeTextID; // 0x8cc(0x04)
	int32_t ShieldRechargePassiveTextID; // 0x8d0(0x04)
	struct FName ShieldReduceScreenEffectID; // 0x8d4(0x08)
	struct FName ShieldBrokenScreenEffectID; // 0x8dc(0x08)
	char pad_8E4[0x4]; // 0x8e4(0x04)
	struct USkeletalMeshComponentConfig* FirstPersonMeshConfig; // 0x8e8(0x08)
	float BaseGunCollisionTraceDis; // 0x8f0(0x04)
	char pad_8F4[0x4]; // 0x8f4(0x04)
	struct TMap<enum class ECharacterBodyScaleType, float> GunCollisionTraceStartHighIdle; // 0x8f8(0x50)
	struct TMap<enum class ECharacterBodyScaleType, float> GunCollisionTraceStartHighCrouch; // 0x948(0x50)
	float MinDistanceGun2Wall; // 0x998(0x04)
	float GunCollisionXYAdjustDownSide; // 0x99c(0x04)
	float GunCollisionCheckZLimit; // 0x9a0(0x04)
	char pad_9A4[0x4]; // 0x9a4(0x04)
	struct UWeaponSystemPlayer* WeaponSystemPlayerClass; // 0x9a8(0x08)
	struct UWeaponSystemPlayerAI* WeaponSystemAIClass; // 0x9b0(0x08)
	struct UMapMarkBase* TrackingMarkWidgetClass; // 0x9b8(0x08)
	struct FVector WeaponAimStartOffset; // 0x9c0(0x0c)
	char pad_9CC[0x4]; // 0x9cc(0x04)
	struct FGameplayTagContainer AbilitiesToCancelOnPressingWeaponAction; // 0x9d0(0x20)
	struct TArray<enum class ESolarIgnoreCollisionType> IgnoreCollisionTypesForDetectGunCollision; // 0x9f0(0x10)
	float DefaultHitTraceLifetime; // 0xa00(0x04)
	char pad_A04[0x4]; // 0xa04(0x04)
	struct UCurveFloat* DefaultHitTraceWidgetScaleCurve; // 0xa08(0x08)
	float SniperHitTraceLifetime; // 0xa10(0x04)
	char pad_A14[0x4]; // 0xa14(0x04)
	struct UCurveFloat* SniperHitTraceWidgetScaleCurve; // 0xa18(0x08)
	float MeleeHitTraceLifetime; // 0xa20(0x04)
	float VehicleHitTraceLifetime; // 0xa24(0x04)
	struct UCurveFloat* VehicleHitTraceWidgetScaleCurve; // 0xa28(0x08)
	struct FVehicleRepairToolMeshPreset VehicleRepairToolMeshPreset; // 0xa30(0x50)
	int32_t RepairWeakPointTextID; // 0xa80(0x04)
	char pad_A84[0x4]; // 0xa84(0x04)
	struct UActorEffect* VehicleStealthEffectClass; // 0xa88(0x08)
	struct FTeammateHUDPreset TeammateHUDPreset; // 0xa90(0x20)
	float HUDZNomral; // 0xab0(0x04)
	float HUDZSwim; // 0xab4(0x04)
	float HUDZCrouch; // 0xab8(0x04)
	float HUDZCrawl; // 0xabc(0x04)
	float HUDChangeTime; // 0xac0(0x04)
	float HUDChangeSpeed; // 0xac4(0x04)
	float CheckHUDDistanceToCenter; // 0xac8(0x04)
	float HUDTranslucentValue; // 0xacc(0x04)
	struct USolarTeammateHUDWidgetComponent* HUDComponentClass; // 0xad0(0x08)
	struct USolarCharacterBillboardIconComponent* BillboardComponentClass; // 0xad8(0x08)
	struct URadarScanSoundDataAsset* RadarScanSoundDataAsset; // 0xae0(0x08)
	struct FName RadarScannedEffectID; // 0xae8(0x08)
	struct FGameplayCueTag RadarDetectedEffectCueTag; // 0xaf0(0x08)
	struct FGameplayCueTag RadarDetectedInSmokeEffectCueTag; // 0xaf8(0x08)
	struct UScoutEnemyConfig* ScoutEnemyConfig; // 0xb00(0x08)
	bool bEnableEMPBlockChargeNotice; // 0xb08(0x01)
	char pad_B09[0x7]; // 0xb09(0x07)
	struct UGyroscopeConfig* GyroscopeConfig; // 0xb10(0x08)
	float CheckInRoomInterval; // 0xb18(0x04)
	float CheckInRoomIntervalLocally; // 0xb1c(0x04)
	float DamageLimitTime; // 0xb20(0x04)
	float DamagingDuration; // 0xb24(0x04)
	struct FName DissolvedDeathFXBindingSocketName; // 0xb28(0x08)
	struct TArray<struct UActorEffect*> PersistentActorEffectClasses; // 0xb30(0x10)
	struct FName HealthReduceScreenEffectID; // 0xb40(0x08)
	struct FName HealthLowScreenEffectID; // 0xb48(0x08)
	float HealthLowTipThreshold; // 0xb50(0x04)
	char pad_B54[0x4]; // 0xb54(0x04)
	struct TMap<enum class ECharacterBodyScaleType, float> VictoryEffectScaleMap; // 0xb58(0x50)
	struct UGameplayEffect* EnterBattleEffect; // 0xba8(0x08)
	struct UGameplayEffect* EnterCombatEffect; // 0xbb0(0x08)
	float CharacterHitSphereRadiusValue; // 0xbb8(0x04)
	float CharacterHitSphereHeightValue; // 0xbbc(0x04)
	float CharacterHitSphereRestrictedZoneRadius; // 0xbc0(0x04)
	float CharacterHitTraceActorRadiusValueWithCameraSphere; // 0xbc4(0x04)
	float CharacterHitTraceActorDistanceFromCamera; // 0xbc8(0x04)
	char pad_BCC[0x4]; // 0xbcc(0x04)
	struct UCurveFloat* CharacterHitSphereHitDistanceOffsetCurve; // 0xbd0(0x08)
	struct UCurveFloat* CharacterHitSphereHitPitchVerticalValueCurve; // 0xbd8(0x08)
	struct UCurveFloat* CharacterHitSphereHitPitchHorizontalValueCurve; // 0xbe0(0x08)
	struct AActor* HitTraceActorBlueprintAsset; // 0xbe8(0x08)
	struct FSoftObjectPath DefaultSummonItemMarkPath; // 0xbf0(0x18)
	char pad_C08[0x8]; // 0xc08(0x08)
};

// Class Solarland.CharacterMVPConfig
// Size: 0x60 (Inherited: 0x30)
struct UCharacterMVPConfig : UDataAsset {
	struct FSoftObjectPath AnimPath; // 0x30(0x18)
	struct FSoftObjectPath LevelPath; // 0x48(0x18)
};

// Class Solarland.CharacterSkillAttributeSet
// Size: 0x110 (Inherited: 0x30)
struct UCharacterSkillAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData TacticalSkillCD; // 0x30(0x10)
	struct FGameplayAttributeData TacticalSkillCDBase; // 0x40(0x10)
	struct FGameplayAttributeData TacticalSkillCDParamA; // 0x50(0x10)
	struct FGameplayAttributeData TacticalSkillCDParamB; // 0x60(0x10)
	struct FGameplayAttributeData TacticalSkillCDFixedValue; // 0x70(0x10)
	struct FGameplayAttributeData SuperSkillCD; // 0x80(0x10)
	struct FGameplayAttributeData SuperSkillCDBase; // 0x90(0x10)
	struct FGameplayAttributeData SuperSkillCDParamA; // 0xa0(0x10)
	struct FGameplayAttributeData SuperSkillCDParamB; // 0xb0(0x10)
	struct FGameplayAttributeData SuperSkillCDFixedValue; // 0xc0(0x10)
	struct FGameplayAttributeData ScoutEnemyTimeRequired; // 0xd0(0x10)
	struct FGameplayAttributeData ScoutEnemyDuration; // 0xe0(0x10)
	struct FGameplayAttributeData RecoveringHealthFromStayRecovery; // 0xf0(0x10)
	struct FGameplayAttributeData RecoveringShieldFromStayRecovery; // 0x100(0x10)

	void OnRep_TacticalSkillCDParamB(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_TacticalSkillCDParamB // (Native|Protected|HasOutParms) // @ game+0x265d930
	void OnRep_TacticalSkillCDParamA(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_TacticalSkillCDParamA // (Native|Protected|HasOutParms) // @ game+0x265d880
	void OnRep_TacticalSkillCDFixedValue(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_TacticalSkillCDFixedValue // (Native|Protected|HasOutParms) // @ game+0x2694520
	void OnRep_TacticalSkillCDBase(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_TacticalSkillCDBase // (Native|Protected|HasOutParms) // @ game+0x265d9e0
	void OnRep_SuperSkillCDParamB(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_SuperSkillCDParamB // (Native|Protected|HasOutParms) // @ game+0x2694470
	void OnRep_SuperSkillCDParamA(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_SuperSkillCDParamA // (Native|Protected|HasOutParms) // @ game+0x2693f40
	void OnRep_SuperSkillCDFixedValue(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_SuperSkillCDFixedValue // (Native|Protected|HasOutParms) // @ game+0x2693ff0
	void OnRep_SuperSkillCDBase(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_SuperSkillCDBase // (Native|Protected|HasOutParms) // @ game+0x2694320
	void OnRep_ScoutEnemyTimeRequired(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_ScoutEnemyTimeRequired // (Native|Protected|HasOutParms) // @ game+0x2697e10
	void OnRep_ScoutEnemyDuration(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_ScoutEnemyDuration // (Native|Protected|HasOutParms) // @ game+0x2697d60
	void OnRep_RecoveringShieldFromStayRecovery(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_RecoveringShieldFromStayRecovery // (Native|Protected|HasOutParms) // @ game+0x2697cb0
	void OnRep_RecoveringHealthFromStayRecovery(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_RecoveringHealthFromStayRecovery // (Native|Protected|HasOutParms) // @ game+0x2697c00
};

// Class Solarland.CharacterSkinConfig
// Size: 0x198 (Inherited: 0x30)
struct UCharacterSkinConfig : UDataAsset {
	struct FSoftObjectPath SkinIcon; // 0x30(0x18)
	struct FSoftObjectPath DefaultIcon; // 0x48(0x18)
	struct FSoftObjectPath SkinRes; // 0x60(0x18)
	struct FSoftObjectPath CharaSkinRes; // 0x78(0x18)
	struct FSoftClassPath AnimBPRes; // 0x90(0x18)
	struct TMap<struct FGameplayTag, struct FStaticMeshOrnamentConfig> StaticMeshOrnamentsConfig; // 0xa8(0x50)
	struct TMap<struct FGameplayTag, struct FSkeletalMeshOrnamentConfig> SkeletalMeshOrnamentsConfig; // 0xf8(0x50)
	struct TMap<struct FGameplayTag, struct FChildActorOrnamentConfig> ChildActorOrnamentsConfig; // 0x148(0x50)

	struct TMap<struct FGameplayTag, struct FStaticMeshOrnamentConfig> GetStaticMeshOrnamentsConfig(); // Function Solarland.CharacterSkinConfig.GetStaticMeshOrnamentsConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2697b60
	struct FSoftObjectPath GetSkinRes(); // Function Solarland.CharacterSkinConfig.GetSkinRes // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2697b30
	struct FSoftObjectPath GetSkinIcon(); // Function Solarland.CharacterSkinConfig.GetSkinIcon // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2697b00
	struct TMap<struct FGameplayTag, struct FSkeletalMeshOrnamentConfig> GetSkeletalMeshOrnamentsConfig(); // Function Solarland.CharacterSkinConfig.GetSkeletalMeshOrnamentsConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2697a60
	struct TMap<struct FGameplayTag, struct FChildActorOrnamentConfig> GetChildActorOrnamentsConfig(); // Function Solarland.CharacterSkinConfig.GetChildActorOrnamentsConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x26979c0
	struct FSoftObjectPath GetCharaSkinRes(); // Function Solarland.CharacterSkinConfig.GetCharaSkinRes // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2697990
	struct FSoftObjectPath GetAnimBPRes(); // Function Solarland.CharacterSkinConfig.GetAnimBPRes // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2697960
};

// Class Solarland.CharacterSoundConfig
// Size: 0x100 (Inherited: 0x30)
struct UCharacterSoundConfig : UDataAsset {
	struct TMap<enum class ECharacterSoundOpt, struct FString> SoundEventTable; // 0x30(0x50)
	struct TMap<enum class EPhysicalSurface, struct FName> SurfaceTypeToHitByBulletSoundGroup; // 0x80(0x50)
	struct FTransform DefaultTransform; // 0xd0(0x30)
};

// Class Solarland.CheckBoxGroup
// Size: 0x1c0 (Inherited: 0x160)
struct UCheckBoxGroup : UNamedSlot {
	struct FMulticastInlineDelegate OnStateChangedEvent; // 0x160(0x10)
	struct FMulticastInlineDelegate OnStateChangedEventEx; // 0x170(0x10)
	struct UCheckBox* RevertToCachedChild; // 0x180(0x08)
	struct UCheckBox* LastCheckedChild; // 0x188(0x08)
	struct UPanelWidget* GroupRoot; // 0x190(0x08)
	bool bAllowSwitchOff; // 0x198(0x01)
	enum class EUseType UseType; // 0x199(0x01)
	char pad_19A[0x6]; // 0x19a(0x06)
	struct TArray<struct UCheckBox*> CheckBoxList; // 0x1a0(0x10)
	char pad_1B0[0x10]; // 0x1b0(0x10)

	void UncheckAllHandSetting(); // Function Solarland.CheckBoxGroup.UncheckAllHandSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x269db80
	void SetSelectIndexPro(int32_t Index); // Function Solarland.CheckBoxGroup.SetSelectIndexPro // (Final|Native|Public|BlueprintCallable) // @ game+0x269da50
	void SetSelectIndexHandSetting(int32_t Index); // Function Solarland.CheckBoxGroup.SetSelectIndexHandSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x269d9c0
	void SetSelectIndex(int32_t Index); // Function Solarland.CheckBoxGroup.SetSelectIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x269d930
	void RevertLastCheck(); // Function Solarland.CheckBoxGroup.RevertLastCheck // (Final|Native|Public|BlueprintCallable) // @ game+0x269d7d0
	bool RemoveGroupChild(struct UCheckBox* Child); // Function Solarland.CheckBoxGroup.RemoveGroupChild // (Final|Native|Public|BlueprintCallable) // @ game+0x269d530
	void OnStateChanged(bool bIsChecked); // Function Solarland.CheckBoxGroup.OnStateChanged // (Final|Native|Protected) // @ game+0x269d410
	int32_t GetSelectedIndex(); // Function Solarland.CheckBoxGroup.GetSelectedIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x269cbf0
	void CleanCheckedState(); // Function Solarland.CheckBoxGroup.CleanCheckedState // (Final|Native|Public|BlueprintCallable) // @ game+0x269c9a0
	struct TArray<struct UCheckBox*> CheckChildrenState(int32_t& CheckedChildIndex); // Function Solarland.CheckBoxGroup.CheckChildrenState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x269c8c0
	bool AddGroupChild(struct UCheckBox* Child); // Function Solarland.CheckBoxGroup.AddGroupChild // (Final|Native|Public|BlueprintCallable) // @ game+0x269c640
};

// Class Solarland.ChooseWeaponItemObject
// Size: 0xb0 (Inherited: 0x28)
struct UChooseWeaponItemObject : UObject {
	char pad_28[0x88]; // 0x28(0x88)
};

// Class Solarland.ChooseWeaponItemWidget
// Size: 0x420 (Inherited: 0x400)
struct UChooseWeaponItemWidget : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct USolarButton* Btn_Collect; // 0x408(0x08)
	struct USolarButton* Btn_Select; // 0x410(0x08)
	struct FChooseWeaponItemState UiState; // 0x418(0x04)
	char pad_41C[0x4]; // 0x41c(0x04)

	void SelectWeapon(); // Function Solarland.ChooseWeaponItemWidget.SelectWeapon // (Final|Native|Protected) // @ game+0x269d870
	void K2_OnUIStateChanged(struct FChooseWeaponItemState& NewState); // Function Solarland.ChooseWeaponItemWidget.K2_OnUIStateChanged // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void K2_InitWidget(struct FChooseWeaponItemData& InData); // Function Solarland.ChooseWeaponItemWidget.K2_InitWidget // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	bool K2_GetWeaponUIIcon(int32_t InWeaponTypeId, struct FSoftObjectPath& OutPath); // Function Solarland.ChooseWeaponItemWidget.K2_GetWeaponUIIcon // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x269d170
	void CollectWeapon(); // Function Solarland.ChooseWeaponItemWidget.CollectWeapon // (Final|Native|Protected) // @ game+0x269c9c0
};

// Class Solarland.ChooseWeaponWidget
// Size: 0x580 (Inherited: 0x400)
struct UChooseWeaponWidget : USolarUserWidget {
	char pad_400[0x18]; // 0x400(0x18)
	struct UTileView* WeaponList; // 0x418(0x08)
	struct UWeaponChosenWidget* WeaponChosen_2; // 0x420(0x08)
	struct UWeaponChosenWidget* WeaponChosen_3; // 0x428(0x08)
	struct TMap<int32_t, struct FChooseWeaponItemData> WeaponDatasMap; // 0x430(0x50)
	struct TMap<int32_t, struct UChooseWeaponItemObject*> ListWeapons; // 0x480(0x50)
	struct TMap<enum class EWeaponEquipSlot, struct UWeaponChosenWidget*> EquippedWeaponWidgetMap; // 0x4d0(0x50)
	struct TSet<int32_t> CollectedWeapons; // 0x520(0x50)
	char pad_570[0x4]; // 0x570(0x04)
	struct FName CloseActionName; // 0x574(0x08)
	char pad_57C[0x4]; // 0x57c(0x04)

	void SelectEquipSlot(enum class EWeaponEquipSlot InSlot); // Function Solarland.ChooseWeaponWidget.SelectEquipSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x269d7f0
	void ResetChosenWidget(bool bResetFirst, bool bResetSecond); // Function Solarland.ChooseWeaponWidget.ResetChosenWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x269d700
	void RefreshWeaponList(bool bForce); // Function Solarland.ChooseWeaponWidget.RefreshWeaponList // (Final|Native|Protected) // @ game+0x269d4a0
	void OnSelfOpened(); // Function Solarland.ChooseWeaponWidget.OnSelfOpened // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnRequestCollectWeapon(int32_t InWeaponID, bool bInCollected); // Function Solarland.ChooseWeaponWidget.OnRequestCollectWeapon // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnListWeaponSelected(int32_t InWeaponID); // Function Solarland.ChooseWeaponWidget.OnListWeaponSelected // (Final|Native|Protected) // @ game+0x269d380
	void OnListWeaponCollected(int32_t InWeaponID); // Function Solarland.ChooseWeaponWidget.OnListWeaponCollected // (Final|Native|Protected) // @ game+0x269d2f0
	void OnEquipSlotSelected(enum class EWeaponEquipSlot InSlot); // Function Solarland.ChooseWeaponWidget.OnEquipSlotSelected // (Final|Native|Protected) // @ game+0x269d270
	void K2_EquipWeapon(enum class EWeaponEquipSlot InSlot, int32_t InWeaponID); // Function Solarland.ChooseWeaponWidget.K2_EquipWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x269d0a0
	void InitWeaponList(struct TArray<struct FChooseWeaponItemData>& InList); // Function Solarland.ChooseWeaponWidget.InitWeaponList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x269ce90
	int32_t GetWeaponSkinId(int32_t InWeaponID); // Function Solarland.ChooseWeaponWidget.GetWeaponSkinId // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct UChooseWeaponItemWidget* GetListWidgetByWeaponId(int32_t InWeaponID); // Function Solarland.ChooseWeaponWidget.GetListWidgetByWeaponId // (Final|Native|Protected|Const) // @ game+0x269cb50
	struct TArray<struct FChooseWeaponItemData> GetListWeapons(); // Function Solarland.ChooseWeaponWidget.GetListWeapons // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x269cb00
	struct TArray<struct FChooseWeaponItemData> GetEquippedWeaponData(); // Function Solarland.ChooseWeaponWidget.GetEquippedWeaponData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x269cab0
	struct TArray<int32_t> GetCollectedWeaponsFormPlayerData(); // Function Solarland.ChooseWeaponWidget.GetCollectedWeaponsFormPlayerData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void EquipWeapon(enum class EWeaponEquipSlot InSlot, int32_t InWeaponID); // Function Solarland.ChooseWeaponWidget.EquipWeapon // (Final|Native|Protected) // @ game+0x269c9e0
};

// Class Solarland.CircleCardView
// Size: 0x228 (Inherited: 0x228)
struct UCircleCardView : UCardView {
};

// Class Solarland.CommonTwiceConfirmBaseWidget
// Size: 0x400 (Inherited: 0x400)
struct UCommonTwiceConfirmBaseWidget : USolarUserWidget {
};

// Class Solarland.ComponentButtonBaseWidget
// Size: 0x408 (Inherited: 0x400)
struct UComponentButtonBaseWidget : USolarUserWidget {
	struct USolarButton* OperateArea; // 0x400(0x08)
};

// Class Solarland.CrashReportManager
// Size: 0xa0 (Inherited: 0x28)
struct UCrashReportManager : UObject {
	char pad_28[0x78]; // 0x28(0x78)

	void SetUserID(struct FString InUserId); // Function Solarland.CrashReportManager.SetUserID // (Final|Native|Public) // @ game+0x269dae0
	void SetDeviceUUID(struct FString InDeviceUUID); // Function Solarland.CrashReportManager.SetDeviceUUID // (Final|Native|Public) // @ game+0x269d890
	void ReportLuaException(struct FString ErrorMsg, struct FString Traceback, bool bHandled); // Function Solarland.CrashReportManager.ReportLuaException // (Final|Native|Static|Public) // @ game+0x269d5d0
};

// Class Solarland.CrosshairCanvasPanel
// Size: 0x228 (Inherited: 0x168)
struct UCrosshairCanvasPanel : UCanvasPanel {
	struct TMap<enum class ECrossHairState, struct FStateMapItemStruct> CrosshairStateConfigList; // 0x168(0x50)
	struct TArray<struct UWidget*> IgonreWidgetToStateMap; // 0x1b8(0x10)
	struct TArray<struct FUICrossHairSpreadStruct> SpreadItemList; // 0x1c8(0x10)
	struct TArray<struct FUICrossHairAimColorStruct> AimColorItemList; // 0x1d8(0x10)
	struct UTweenImage* ReloadingTween; // 0x1e8(0x08)
	struct UGaugeImage* BulletGauge; // 0x1f0(0x08)
	struct UTweenImage* OverloadingTween; // 0x1f8(0x08)
	struct UProgressBar* OverloadBar_Normal; // 0x200(0x08)
	struct UProgressBar* OverloadBar_Warn; // 0x208(0x08)
	struct UTweenWidget* OverloadNormalPanelTween; // 0x210(0x08)
	struct TArray<struct UProgressBar*> CoolDownBars; // 0x218(0x10)
};

// Class Solarland.CrossHairWidget
// Size: 0x300 (Inherited: 0x260)
struct UCrossHairWidget : UUserWidget {
	struct TMap<enum class EWeaponType, struct FCrosshairLayout> CrosshairStorageLayout; // 0x260(0x50)
	struct FCrosshairSprite CrosshairSprites; // 0x2b0(0x30)
	char pad_2E0[0x8]; // 0x2e0(0x08)
	struct UCrosshairCanvasPanel* RootPanel; // 0x2e8(0x08)
	float MinSpread; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
	struct FCrosshairLayout CurrentLayout; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)

	void SetCrosshairSprite(struct UPaperSprite* InSprite); // Function Solarland.CrossHairWidget.SetCrosshairSprite // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnWeaponFired(); // Function Solarland.CrossHairWidget.OnWeaponFired // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateReloadProgress(float InReloadProgress, int32_t InReservedAmmo, int32_t InMaxAmmo); // Function Solarland.CrossHairWidget.OnUpdateReloadProgress // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateGatlingRoll(float DeltaTmie, float InRollSpeedInterp, bool bWantFire); // Function Solarland.CrossHairWidget.OnUpdateGatlingRoll // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateCoolDownProgress(float InCoolDownProgress); // Function Solarland.CrossHairWidget.OnUpdateCoolDownProgress // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateChargeProgress(bool InbCharging, int32_t InChargeMode, float InChargeProgress, int32_t InChargeBurstCount); // Function Solarland.CrossHairWidget.OnUpdateChargeProgress // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateAimState(bool InbLockEnemy); // Function Solarland.CrossHairWidget.OnUpdateAimState // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnReloadStarted(float InReloadTime, int32_t InReservedAmmo); // Function Solarland.CrossHairWidget.OnReloadStarted // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnReloadFinished(bool InbReloadSuccess, int32_t InReloadAmmo, int32_t InReservedAmmo, int32_t InMaxAmmo); // Function Solarland.CrossHairWidget.OnReloadFinished // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayWeaponSpecialFire(enum class ECrossHairSpecialFireState InState, float PlayRate); // Function Solarland.CrossHairWidget.OnPlayWeaponSpecialFire // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnOverloadStateChanged(bool bEnter); // Function Solarland.CrossHairWidget.OnOverloadStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnCrosshairInNormalState(); // Function Solarland.CrossHairWidget.OnCrosshairInNormalState // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnAmmoChanged(int32_t InReservedAmmo, int32_t InMaxAmmo, bool InbFirst); // Function Solarland.CrossHairWidget.OnAmmoChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void InitializeCrosshairSpread(float Spread); // Function Solarland.CrossHairWidget.InitializeCrosshairSpread // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void InitializeCrosshair(enum class EWeaponType WeaponType, bool bIsWeaponEnergy); // Function Solarland.CrossHairWidget.InitializeCrosshair // (Final|Native|Public|BlueprintCallable) // @ game+0x269cfd0
	void HandleCrosshairState(enum class ECrossHairState InCrosshairState, bool InbQuitState); // Function Solarland.CrossHairWidget.HandleCrosshairState // (Final|Native|Protected) // @ game+0x269cdc0
	struct UWidget* GetSpreadCanvasWidget(); // Function Solarland.CrossHairWidget.GetSpreadCanvasWidget // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct UUserWidget* GetReloadWidget(); // Function Solarland.CrossHairWidget.GetReloadWidget // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct UUserWidget* GetOverloadWidget(); // Function Solarland.CrossHairWidget.GetOverloadWidget // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct UUserWidget* GetCoolDownWidget(); // Function Solarland.CrossHairWidget.GetCoolDownWidget // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct UUserWidget* GetChargeWidget(); // Function Solarland.CrossHairWidget.GetChargeWidget // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct UUserWidget* GetAmmoWidget(); // Function Solarland.CrossHairWidget.GetAmmoWidget // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct FVector2D CalcDeltaScaleBySpread(float Spread); // Function Solarland.CrossHairWidget.CalcDeltaScaleBySpread // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x269c820
	struct FVector2D CalcDeltaPosBySpread(float Spread); // Function Solarland.CrossHairWidget.CalcDeltaPosBySpread // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x269c780
	float CalcDeltaAngleBySpread(float Spread); // Function Solarland.CrossHairWidget.CalcDeltaAngleBySpread // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x269c6e0
};

// Class Solarland.CruiseAssetSet
// Size: 0x58 (Inherited: 0x30)
struct UCruiseAssetSet : UDataAsset {
	struct FSoftClassPath CapsuleActorClass; // 0x30(0x18)
	struct TArray<struct FSoftClassPath> CruiseAbilityClasses; // 0x48(0x10)
};

// Class Solarland.CurvedEffectController
// Size: 0xc8 (Inherited: 0x28)
struct UCurvedEffectController : UActorEffectController {
	struct FRuntimeFloatCurve ProgressCurve; // 0x28(0x88)
	enum class ECurvedEffectControllerStopMode StopMode; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	float StopTime; // 0xb4(0x04)
	char pad_B8[0x10]; // 0xb8(0x10)
};

// Class Solarland.CustomConsoleCommandsComponent
// Size: 0xb0 (Inherited: 0xb0)
struct UCustomConsoleCommandsComponent : UActorComponent {

	void ExecGMCommand(struct FString CommandParameters, struct TArray<struct FString>& ArgsStr); // Function Solarland.CustomConsoleCommandsComponent.ExecGMCommand // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.CustomGameModeHUD
// Size: 0x3b0 (Inherited: 0x3b0)
struct ACustomGameModeHUD : ABattleHUDBase {

	struct TSoftObjectPtr<USolarUserWidget> ShowPanelUI(enum class EUIPanelName PanelName); // Function Solarland.CustomGameModeHUD.ShowPanelUI // (Final|Native|Public|BlueprintCallable) // @ game+0x26a2d70
	void ClosePanelUI(enum class EUIPanelName PanelName); // Function Solarland.CustomGameModeHUD.ClosePanelUI // (Final|Native|Public|BlueprintCallable) // @ game+0x26a1830
};

// Class Solarland.CustomNoticeTable
// Size: 0xc8 (Inherited: 0xc8)
struct UCustomNoticeTable : UDataTable {
};

// Class Solarland.CustomNoticeImageTable
// Size: 0xc8 (Inherited: 0xc8)
struct UCustomNoticeImageTable : UDataTable {
};

// Class Solarland.CustomRoomManager
// Size: 0x440 (Inherited: 0x228)
struct ACustomRoomManager : AGameManagerBase {
	char pad_228[0x8]; // 0x228(0x08)
	int32_t RoomTeamMemberLimit; // 0x230(0x04)
	int32_t RoomLeftTime; // 0x234(0x04)
	bool bIsGameStarted; // 0x238(0x01)
	bool bIsWeaponSettingOpen; // 0x239(0x01)
	bool bIsVehicleSettingOpen; // 0x23a(0x01)
	char pad_23B[0x5]; // 0x23b(0x05)
	struct TArray<struct FCategoryConfig> CustomCategoryConfigs; // 0x240(0x10)
	struct TArray<char> WeaponTypeAvailableList; // 0x250(0x10)
	struct TArray<char> VehicleClassAvailableList; // 0x260(0x10)
	struct TArray<int32_t> WeaponSettingBlacklist; // 0x270(0x10)
	struct TArray<int32_t> VehicleTypeSettingBlacklist; // 0x280(0x10)
	struct TArray<struct FUserSetting> UserSettingList; // 0x290(0x10)
	struct FMulticastInlineDelegate WeaponTypeAvailableChangedEvent; // 0x2a0(0x10)
	struct FMulticastInlineDelegate WeaponSettingBlacklistChangedEvent; // 0x2b0(0x10)
	struct FMulticastInlineDelegate VehicleClassAvailableChangedEvent; // 0x2c0(0x10)
	struct FMulticastInlineDelegate VehicleTypeSettingBlacklistChangedEvent; // 0x2d0(0x10)
	struct FMulticastInlineDelegate UserSettingsChangedEvent; // 0x2e0(0x10)
	char pad_2F0[0x10]; // 0x2f0(0x10)
	struct FCustomRoomData RoomData; // 0x300(0xd8)
	char pad_3D8[0x68]; // 0x3d8(0x68)

	void WeaponTypeAvailableChangedEvent__DelegateSignature(struct TArray<char>& WeaponTypeAvailableList); // DelegateFunction Solarland.CustomRoomManager.WeaponTypeAvailableChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void WeaponSettingBlacklistChangedEvent__DelegateSignature(struct TArray<int32_t>& WeaponSettingBlacklist); // DelegateFunction Solarland.CustomRoomManager.WeaponSettingBlacklistChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void VehicleTypeSettingBlacklistChangedEvent__DelegateSignature(struct TArray<int32_t>& VehicleTypeSettingBlacklist); // DelegateFunction Solarland.CustomRoomManager.VehicleTypeSettingBlacklistChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void VehicleClassAvailableChangedEvent__DelegateSignature(struct TArray<char>& VehicleClassAvailableList); // DelegateFunction Solarland.CustomRoomManager.VehicleClassAvailableChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void UserSettingsChangedEvent__DelegateSignature(struct TArray<struct FUserSetting>& UserSettingList); // DelegateFunction Solarland.CustomRoomManager.UserSettingsChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void SetTimerToNoticeTeamsInfoChanged(); // Function Solarland.CustomRoomManager.SetTimerToNoticeTeamsInfoChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x26a2ca0
	void ReceiveUserSettingChanged(int32_t Category, int32_t Name, int32_t NewIndex); // Function Solarland.CustomRoomManager.ReceiveUserSettingChanged // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x26a2ba0
	void ReceiveTournamentDealy(); // Function Solarland.CustomRoomManager.ReceiveTournamentDealy // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x1ae6410
	void ReceivePlayerRemoved(struct FString SolarPlayerID, enum class ERemovedReasonType reason); // Function Solarland.CustomRoomManager.ReceivePlayerRemoved // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x26a2ab0
	void OnUserSettingChangedEvent(int32_t& Name, struct FCustomParamConfig ConfigInfo, int32_t& Value); // Function Solarland.CustomRoomManager.OnUserSettingChangedEvent // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnTournamentDealy(); // Function Solarland.CustomRoomManager.OnTournamentDealy // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnTeamsInfoPostChanged(); // Function Solarland.CustomRoomManager.OnTeamsInfoPostChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnServerPreKickPlayer(struct ASolarPlayerState* ps); // Function Solarland.CustomRoomManager.OnServerPreKickPlayer // (Final|Native|Private) // @ game+0x26a26a0
	void OnRoomOwnerLeftRoom(); // Function Solarland.CustomRoomManager.OnRoomOwnerLeftRoom // (Final|Native|Public|BlueprintCallable) // @ game+0x26a2680
	void OnRep_WeaponTypeAvailableList(); // Function Solarland.CustomRoomManager.OnRep_WeaponTypeAvailableList // (Final|Native|Private) // @ game+0x26a2660
	void OnRep_WeaponSettingBlacklist(); // Function Solarland.CustomRoomManager.OnRep_WeaponSettingBlacklist // (Final|Native|Private) // @ game+0x26a2640
	void OnRep_VehicleTypeSettingBlacklist(); // Function Solarland.CustomRoomManager.OnRep_VehicleTypeSettingBlacklist // (Final|Native|Private) // @ game+0x26a2620
	void OnRep_VehicleClassAvailableList(); // Function Solarland.CustomRoomManager.OnRep_VehicleClassAvailableList // (Final|Native|Private) // @ game+0x26a2600
	void OnRep_SettingsValueList(); // Function Solarland.CustomRoomManager.OnRep_SettingsValueList // (Final|Native|Private) // @ game+0x26a25e0
	void OnPlayerRemovedFromRoom(struct FString SolarPlayerID, enum class ERemovedReasonType reason); // Function Solarland.CustomRoomManager.OnPlayerRemovedFromRoom // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool OnGameStart(); // Function Solarland.CustomRoomManager.OnGameStart // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnClientRoomDataReadyLuaCall(); // Function Solarland.CustomRoomManager.OnClientRoomDataReadyLuaCall // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnClientRoomDataReady(); // Function Solarland.CustomRoomManager.OnClientRoomDataReady // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool IsWeaponTypeAvailable(char WeaponType); // Function Solarland.CustomRoomManager.IsWeaponTypeAvailable // (Final|Native|Public) // @ game+0x26a24d0
	bool IsWeaponSettingOpen(); // Function Solarland.CustomRoomManager.IsWeaponSettingOpen // (Final|Native|Public) // @ game+0x26a24b0
	bool IsWeaponAvailable(int32_t weaponid); // Function Solarland.CustomRoomManager.IsWeaponAvailable // (Final|Native|Public) // @ game+0x26a2410
	bool IsVehicleTypeAvailable(int32_t VehicleTypeID); // Function Solarland.CustomRoomManager.IsVehicleTypeAvailable // (Final|Native|Public) // @ game+0x26a2370
	bool IsVehicleSettingOpen(); // Function Solarland.CustomRoomManager.IsVehicleSettingOpen // (Final|Native|Public) // @ game+0x26a2350
	bool IsVehicleClassAvailable(char VehicleClassValue); // Function Solarland.CustomRoomManager.IsVehicleClassAvailable // (Final|Native|Public) // @ game+0x26a22c0
	bool IsRoomOwner(struct ASCMPlayerState* Player); // Function Solarland.CustomRoomManager.IsRoomOwner // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x26a2220
	bool IsRoomHasMinimalSides(); // Function Solarland.CustomRoomManager.IsRoomHasMinimalSides // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x26a21f0
	bool IsRoomHasEnoughPlayers(); // Function Solarland.CustomRoomManager.IsRoomHasEnoughPlayers // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x26a21c0
	struct TArray<char> GetWeaponTypeAvailableList(); // Function Solarland.CustomRoomManager.GetWeaponTypeAvailableList // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x26a2010
	void GetWeaponSettingLists(struct TArray<int32_t>& OutWeaponBlacklist, struct TArray<int32_t>& OutWeaponWhitelist); // Function Solarland.CustomRoomManager.GetWeaponSettingLists // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x26a1ef0
	struct TArray<int32_t> GetWeaponSettingBlacklist(); // Function Solarland.CustomRoomManager.GetWeaponSettingBlacklist // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x26a1e20
	void GetVehicleTypeSettingLists(struct TArray<int32_t>& OutVehicleBlacklist, struct TArray<int32_t>& OutVehicleWhitelist); // Function Solarland.CustomRoomManager.GetVehicleTypeSettingLists // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x26a1d00
	struct TArray<int32_t> GetVehicleTypeSettingBlacklist(); // Function Solarland.CustomRoomManager.GetVehicleTypeSettingBlacklist // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x26a1c30
	struct TArray<char> GetVehicleClassAvailableList(); // Function Solarland.CustomRoomManager.GetVehicleClassAvailableList // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x26a1b60
	float GetModeParam(int32_t Category, int32_t Name, struct FCustomParamConfig& ParamInfo); // Function Solarland.CustomRoomManager.GetModeParam // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x26a1a30
	int32_t GetCustomParamIndex(int32_t Category, int32_t Name); // Function Solarland.CustomRoomManager.GetCustomParamIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x26a1960
	void ExecuteGameStart(); // Function Solarland.CustomRoomManager.ExecuteGameStart // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x7ec1b0
	bool CheckWeaponTypeCanSetting(enum class EWeaponUIType WeaponUIType); // Function Solarland.CustomRoomManager.CheckWeaponTypeCanSetting // (Final|Native|Public) // @ game+0x26a17a0
	bool CheckWeaponCanSetting(int32_t weaponid); // Function Solarland.CustomRoomManager.CheckWeaponCanSetting // (Final|Native|Public) // @ game+0x26a1700
	bool CheckVehicleTypeCanSetting(int32_t VehicleTypeID); // Function Solarland.CustomRoomManager.CheckVehicleTypeCanSetting // (Final|Native|Public) // @ game+0x26a1660
	bool CheckVehicleClassCanSetting(enum class EVehicleClass VehicleClass); // Function Solarland.CustomRoomManager.CheckVehicleClassCanSetting // (Final|Native|Public) // @ game+0x26a15d0
	bool CheckCustomServerOwnerAuthority(struct ASCMPlayerState* Player); // Function Solarland.CustomRoomManager.CheckCustomServerOwnerAuthority // (Final|Native|Private) // @ game+0x26a1530
};

// Class Solarland.CustomSettlementManager
// Size: 0x238 (Inherited: 0x228)
struct ACustomSettlementManager : AGameManagerBase {
	char pad_228[0x9]; // 0x228(0x09)
	bool HasReportAllCompetitionData; // 0x231(0x01)
	char pad_232[0x6]; // 0x232(0x06)

	void SettlePlayer(struct ASolarPlayerState* InPlayer); // Function Solarland.CustomSettlementManager.SettlePlayer // (Final|Native|Public) // @ game+0x92e240
	void SettleAllPlayer(struct TArray<struct ASolarPlayerState*>& InAllPlayers); // Function Solarland.CustomSettlementManager.SettleAllPlayer // (Final|Native|Public|HasOutParms) // @ game+0x26a2cc0
	void ReportAllPlayerCompetitionData(); // Function Solarland.CustomSettlementManager.ReportAllPlayerCompetitionData // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void NormalSettlePlayer(struct ASolarPlayerState* Player); // Function Solarland.CustomSettlementManager.NormalSettlePlayer // (Final|Native|Protected) // @ game+0x92e240
	void CompetitionSettlePlayer(struct ASolarPlayerState* Player); // Function Solarland.CustomSettlementManager.CompetitionSettlePlayer // (Final|Native|Protected) // @ game+0x92e240
	void CompetitionSettleAllPlayer(struct TArray<struct ASolarPlayerState*>& InAllPlayers); // Function Solarland.CustomSettlementManager.CompetitionSettleAllPlayer // (Final|Native|Protected|HasOutParms) // @ game+0x26a18b0
};

// Class Solarland.DeathTreasureBox
// Size: 0x768 (Inherited: 0x608)
struct ADeathTreasureBox : ASolarTreasureBoxActor {
	float CharacterPickupRange; // 0x608(0x04)
	float CurrEnergyValue; // 0x60c(0x04)
	float CurrExtraEnergyValue; // 0x610(0x04)
	char pad_614[0x4]; // 0x614(0x04)
	struct FString PlayerId; // 0x618(0x10)
	struct FString NickName; // 0x628(0x10)
	bool IsPickuped; // 0x638(0x01)
	char pad_639[0x7]; // 0x639(0x07)
	struct TArray<struct ASolarPlayerWeapon*> WeaponList; // 0x640(0x10)
	struct TArray<struct FBoxChargingInfo> ChargingChars; // 0x650(0x10)
	float PickupRadius; // 0x660(0x04)
	float ResurrectDistance; // 0x664(0x04)
	enum class EBResurrectionState CurrResurrectionState; // 0x668(0x01)
	char pad_669[0x3]; // 0x669(0x03)
	float ReviveTotalTime; // 0x66c(0x04)
	float ReviveStartTime; // 0x670(0x04)
	char pad_674[0x4]; // 0x674(0x04)
	struct USkeletalMeshComponent* PreViewMesh; // 0x678(0x08)
	struct FName ReviveStartSound; // 0x680(0x08)
	struct FName ReviveBeforeCompleteSound; // 0x688(0x08)
	struct FName ReviveCompleteSound; // 0x690(0x08)
	struct FName ReviveFailedSound; // 0x698(0x08)
	float ResurrectionBeforeSoundTime; // 0x6a0(0x04)
	char pad_6A4[0x4]; // 0x6a4(0x04)
	struct UParticleSystem* ReviveCompletePS; // 0x6a8(0x08)
	struct FName ReviveCompletePSAttachedSocket; // 0x6b0(0x08)
	float PreviewMeshZOffset; // 0x6b8(0x04)
	float PreviewMeshZRotation; // 0x6bc(0x04)
	char pad_6C0[0x10]; // 0x6c0(0x10)
	struct USceneComponent* FXPosComponent; // 0x6d0(0x08)
	struct TArray<struct TSoftObjectPtr<UParticleSystem>> QualityPS; // 0x6d8(0x10)
	char pad_6E8[0x10]; // 0x6e8(0x10)
	struct UActorEffect* RevivePreviewEffectClass; // 0x6f8(0x08)
	char pad_700[0x8]; // 0x700(0x08)
	struct TMap<enum class ECharacterBodyScaleType, struct FSoftObjectPath> PreviewAnim; // 0x708(0x50)
	float SphereRadius; // 0x758(0x04)
	float UnpickableSphereRadius; // 0x75c(0x04)
	char pad_760[0x8]; // 0x760(0x08)

	void ReceiveSetUIEnable(bool IsShow); // Function Solarland.DeathTreasureBox.ReceiveSetUIEnable // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveRemoveEffect(struct ASolarCharacter* SolarChar); // Function Solarland.DeathTreasureBox.ReceiveRemoveEffect // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveRefreshExtraEnergy(struct FString Message); // Function Solarland.DeathTreasureBox.ReceiveRefreshExtraEnergy // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveAddEffect(struct ASolarCharacter* SolarChar); // Function Solarland.DeathTreasureBox.ReceiveAddEffect // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnUntrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.DeathTreasureBox.OnUntrigger // (Final|Native|Protected) // @ game+0x26a2950
	void OnTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.DeathTreasureBox.OnTrigger // (Final|Native|Protected|HasOutParms) // @ game+0x26a2730
	void OnRep_ReviveStartTime(); // Function Solarland.DeathTreasureBox.OnRep_ReviveStartTime // (Final|Native|Protected) // @ game+0x26a25c0
	void OnRep_PickupedChanged(); // Function Solarland.DeathTreasureBox.OnRep_PickupedChanged // (Final|Native|Public) // @ game+0x26a25a0
	void OnRep_CurrExtraEnergyValueChanged(); // Function Solarland.DeathTreasureBox.OnRep_CurrExtraEnergyValueChanged // (Final|Native|Public) // @ game+0x26a2580
	void OnRep_BResurrectionStateChanged(); // Function Solarland.DeathTreasureBox.OnRep_BResurrectionStateChanged // (Final|Native|Public) // @ game+0x26a2560
	void OnRefreshPickupStatusEffect(bool IsShow); // Function Solarland.DeathTreasureBox.OnRefreshPickupStatusEffect // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	bool IsInResurrectRange(struct ASolarCharacter* InReqCharacter, float& RealDistance); // Function Solarland.DeathTreasureBox.IsInResurrectRange // (Final|Native|Public|HasOutParms) // @ game+0x26a20e0
	bool CanBuyResurrect(struct ASolarCharacter* InReqCharacter); // Function Solarland.DeathTreasureBox.CanBuyResurrect // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x26a1490
};

// Class Solarland.DeathViewGoodsSlotWidget
// Size: 0x500 (Inherited: 0x400)
struct UDeathViewGoodsSlotWidget : USolarUserWidget {
	struct UImage* Img_Icon; // 0x400(0x08)
	struct UTextBlock* Txt_Num; // 0x408(0x08)
	struct FSlateBrush ImageOuter; // 0x410(0xe0)
	int32_t ItemID; // 0x4f0(0x04)
	char pad_4F4[0xc]; // 0x4f4(0x0c)

	void OnSpectateTargetItemsChanged(struct TArray<struct FReplicateItemData> InItemDatas); // Function Solarland.DeathViewGoodsSlotWidget.OnSpectateTargetItemsChanged // (Final|Native|Protected) // @ game+0x26a6230
};

// Class Solarland.DeathViewHPWidget
// Size: 0x490 (Inherited: 0x400)
struct UDeathViewHPWidget : USolarUserWidget {
	char pad_400[0x28]; // 0x400(0x28)
	bool bSplitHPBar; // 0x428(0x01)
	char pad_429[0x7]; // 0x429(0x07)
	struct USolarShieldProgressBoard* AdvBar_Shield; // 0x430(0x08)
	struct USolarHPProgressBoard* AdvBar_HP; // 0x438(0x08)
	char pad_440[0x20]; // 0x440(0x20)
	struct FLinearColor HPColorNormal; // 0x460(0x10)
	struct FLinearColor HPColorDying; // 0x470(0x10)
	char pad_480[0x10]; // 0x480(0x10)

	void UpdateHPBar(float InCurHealth, float InMaxHealth, float InHPGridUnit); // Function Solarland.DeathViewHPWidget.UpdateHPBar // (Final|Native|Protected) // @ game+0x26a6810
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.DeathViewHPWidget.OnSpecTargetChanged // (Final|Native|Private) // @ game+0x26a60d0
	void OnShieldValueChanged(struct USinglePlayerShieldModel* ShieldModel); // Function Solarland.DeathViewHPWidget.OnShieldValueChanged // (Final|Native|Public|Const) // @ game+0x26a6040
	void OnShieldChanged(struct USinglePlayerShieldModel* ShieldModel); // Function Solarland.DeathViewHPWidget.OnShieldChanged // (Final|Native|Public|Const) // @ game+0x26a5fb0
	void OnShieldAvailableChanged(struct USinglePlayerShieldModel* ShieldModel); // Function Solarland.DeathViewHPWidget.OnShieldAvailableChanged // (Final|Native|Public|Const) // @ game+0x26a5f20
	void OnHPModelChanged(struct USinglePlayerHPModel* HPModel); // Function Solarland.DeathViewHPWidget.OnHPModelChanged // (Final|Native|Private) // @ game+0x26a5d50
	void OnCharacterEndPlay(struct ASolarCharacter* Character); // Function Solarland.DeathViewHPWidget.OnCharacterEndPlay // (Final|Native|Private) // @ game+0x26a5a90
};

// Class Solarland.DeathViewTeammateWidget
// Size: 0x478 (Inherited: 0x400)
struct UDeathViewTeammateWidget : USolarUserWidget {
	float SwitchCDTime; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct UUIComponentNationalFlag* UI_Component_NationalFlag; // 0x408(0x08)
	struct UUIInputDevice* UI_Input_Device; // 0x410(0x08)
	struct UTextBlock* Txt_PlayerName; // 0x418(0x08)
	struct UImage* Img_View_Name_Bg; // 0x420(0x08)
	struct UImage* Img_TeamPos; // 0x428(0x08)
	struct UImage* Img_View_TeamPos_Bg; // 0x430(0x08)
	struct USizeBox* Panel_TeamPos; // 0x438(0x08)
	struct UOverlay* Panel_Death; // 0x440(0x08)
	struct UOverlay* Panel_Selected; // 0x448(0x08)
	struct UImage* Img_Loading; // 0x450(0x08)
	struct UWidget* ScaleBox_1; // 0x458(0x08)
	struct UWidgetAnimation* Sel_Anim; // 0x460(0x08)
	char pad_468[0x8]; // 0x468(0x08)
	struct ASolarPlayerState* CurrentPlayerState; // 0x470(0x08)

	void TrySelect(); // Function Solarland.DeathViewTeammateWidget.TrySelect // (Final|Native|Private) // @ game+0x26a6720
	void SetTeamPos(int32_t PosInTeam); // Function Solarland.DeathViewTeammateWidget.SetTeamPos // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetPlayerState(struct ASolarPlayerState* TargetPS); // Function Solarland.DeathViewTeammateWidget.SetPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x26a6670
	void OnTeammateStateChanged(bool NeedRefresh); // Function Solarland.DeathViewTeammateWidget.OnTeammateStateChanged // (Final|Native|Private) // @ game+0x26a64c0
	void OnSelectedPlayerChanged(struct ASolarPlayerState* SelectedPS); // Function Solarland.DeathViewTeammateWidget.OnSelectedPlayerChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x26a5e90
	void OnHPChanged(char PosInTeam, float CurHP, float MaxHP); // Function Solarland.DeathViewTeammateWidget.OnHPChanged // (Final|Native|Private) // @ game+0x26a5c40
	void OnBroadcastModeChanged(); // Function Solarland.DeathViewTeammateWidget.OnBroadcastModeChanged // (Final|Native|Private) // @ game+0x26a5a70
};

// Class Solarland.DeathViewWidget
// Size: 0x428 (Inherited: 0x400)
struct UDeathViewWidget : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct UDeathViewHPWidget* DeathViewHP; // 0x408(0x08)
	struct UCanvasPanel* Panel_ScopeUI; // 0x410(0x08)
	struct USolarTextBlock* Text_PlayerLevel; // 0x418(0x08)
	struct UWidget* UI_OB_Loading_2; // 0x420(0x08)

	void UpdateLoading(); // Function Solarland.DeathViewWidget.UpdateLoading // (Final|Native|Private|Const) // @ game+0x26a6930
	void OnTargetRecoveringShieldChange(float InCurrentShieldValue, float InRecoveringShieldValue); // Function Solarland.DeathViewWidget.OnTargetRecoveringShieldChange // (Final|Native|Public) // @ game+0x26a63f0
	void OnTargetRecoveringHealthChange(float InCurrentHealthValue, float InRecoveringHealthValue); // Function Solarland.DeathViewWidget.OnTargetRecoveringHealthChange // (Final|Native|Public) // @ game+0x26a6320
	void OnSpecTargetChanged(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.DeathViewWidget.OnSpecTargetChanged // (Final|Native|Private) // @ game+0x26a61a0
	void OnLocalSpecInfoReady(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.DeathViewWidget.OnLocalSpecInfoReady // (Final|Native|Private) // @ game+0x26a5de0
	void OnClientBeginSpectate(struct USolarSwitchTargetCameraControlComp* SwitchTargetComp); // Function Solarland.DeathViewWidget.OnClientBeginSpectate // (Final|Native|Private) // @ game+0x26a5bb0
	void OnCharacterLevelChanged(int32_t InLevel); // Function Solarland.DeathViewWidget.OnCharacterLevelChanged // (Final|Native|Private) // @ game+0x26a5b20
	void AddScopeToPanel(struct UUserWidget* InChildWidget, bool bInSpectate); // Function Solarland.DeathViewWidget.AddScopeToPanel // (Final|Native|Private) // @ game+0x26a5570
};

// Class Solarland.DefenderManager
// Size: 0x2b8 (Inherited: 0x228)
struct ADefenderManager : AGameManagerBase {
	struct FMulticastInlineDelegate OnRepDefenderListNotify; // 0x228(0x10)
	struct FTerminatorNotifyUIConfig TerminatorNotifyUIConfig; // 0x238(0x28)
	struct ASolarTrailEffect* TrailEffect; // 0x260(0x08)
	struct FString DefenderSide; // 0x268(0x10)
	struct TArray<struct ASolarPlayerState*> DefenderList; // 0x278(0x10)
	char pad_288[0x8]; // 0x288(0x08)
	struct FString TerminatorPlayerId; // 0x290(0x10)
	char pad_2A0[0x18]; // 0x2a0(0x18)

	bool UpdateCheckTerminator(struct ASCMPlayerState* InKiller, struct ASCMPlayerState* InKilled); // Function Solarland.DefenderManager.UpdateCheckTerminator // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x26a6740
	void StartConfirmDefender(); // Function Solarland.DefenderManager.StartConfirmDefender // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x26a6700
	void ShowDefenderUIForReplay(); // Function Solarland.DefenderManager.ShowDefenderUIForReplay // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnRep_DefenderList(); // Function Solarland.DefenderManager.OnRep_DefenderList // (Final|Native|Public) // @ game+0x26a5e70
	bool IsTerminator(struct FString InSolarPlayerID); // Function Solarland.DefenderManager.IsTerminator // (Final|Native|Public|BlueprintCallable) // @ game+0x26a5810
	bool IsDefender(struct FString InPlayerSide); // Function Solarland.DefenderManager.IsDefender // (Final|Native|Public|BlueprintCallable) // @ game+0x26a5760
	struct TArray<struct ASolarPlayerState*> GetDefenderList(); // Function Solarland.DefenderManager.GetDefenderList // (Final|Native|Public|BlueprintCallable) // @ game+0x26a5640
};

// Class Solarland.DelayNode
// Size: 0x80 (Inherited: 0x70)
struct UDelayNode : UActionNode {
	float DelayTime; // 0x70(0x04)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Solarland.DrawLinePanel
// Size: 0x540 (Inherited: 0x400)
struct UDrawLinePanel : USolarUserWidget {
	float MapSize; // 0x400(0x04)
	float CurrentFOV; // 0x404(0x04)
	char pad_408[0x38]; // 0x408(0x38)
	struct FLinearColor SafeAreaColor; // 0x440(0x10)
	struct FLinearColor PosionCircleColor; // 0x450(0x10)
	struct FLinearColor DotLineColor; // 0x460(0x10)
	struct FLinearColor AirlineProgressColor; // 0x470(0x10)
	struct FLinearColor CapsuleBackgroundColor; // 0x480(0x10)
	struct FLinearColor AirdropBackgroundColor; // 0x490(0x10)
	float AirdropAirlineSizeY; // 0x4a0(0x04)
	float MaterialCircleSize; // 0x4a4(0x04)
	float DotLineDottedLength; // 0x4a8(0x04)
	float DotLineDottedInterval; // 0x4ac(0x04)
	char pad_4B0[0x8]; // 0x4b0(0x08)
	struct TArray<struct FDotLineData> DotLineDataList; // 0x4b8(0x10)
	struct TArray<struct FCircleData> CircleDataList; // 0x4c8(0x10)
	struct USolarMapManager* MapManager; // 0x4d8(0x08)
	struct TWeakObjectPtr<struct ASolarCapsuleRoot> CapsuleRoot; // 0x4e0(0x08)
	struct FSoftObjectPath CircleMaterialPath; // 0x4e8(0x18)
	struct FSoftObjectPath DottedLineMaterialPath; // 0x500(0x18)
	struct TArray<struct UMaterialInstanceDynamic*> CircleMaterialInstanceArray; // 0x518(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> DottedLineMaterialInstanceArray; // 0x528(0x10)
	float InitFOV; // 0x538(0x04)
	char pad_53C[0x4]; // 0x53c(0x04)

	void RemoveDotLine(int32_t DotLineID); // Function Solarland.DrawLinePanel.RemoveDotLine // (Final|Native|Public|BlueprintCallable) // @ game+0x26a65e0
	void RemoveCircle(int32_t CircleID); // Function Solarland.DrawLinePanel.RemoveCircle // (Final|Native|Public|BlueprintCallable) // @ game+0x26a6550
	void OnAirlineUpdate(struct FVector2D& InNewPos); // Function Solarland.DrawLinePanel.OnAirlineUpdate // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x26a59e0
	void OnAirlineSet(struct FMiniMapAirlineData InData); // Function Solarland.DrawLinePanel.OnAirlineSet // (Final|Native|Public|BlueprintCallable) // @ game+0x26a58e0
	void OnAirlineClear(); // Function Solarland.DrawLinePanel.OnAirlineClear // (Final|Native|Public|BlueprintCallable) // @ game+0x26a58c0
	void InitializePanelFOV(float InFOV); // Function Solarland.DrawLinePanel.InitializePanelFOV // (Final|Native|Public|BlueprintCallable) // @ game+0x26a56d0
	int32_t AddDotLine(struct AActor* StartPointActor, struct AActor* EndPointActor, struct FLinearColor Color); // Function Solarland.DrawLinePanel.AddDotLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x26a5450
	int32_t AddCircle(struct FVector2D Center, float Radius, struct FLinearColor Color); // Function Solarland.DrawLinePanel.AddCircle // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x26a5330
};

// Class Solarland.DuckRollingConfigDataAsset
// Size: 0xca0 (Inherited: 0x30)
struct UDuckRollingConfigDataAsset : UDataAsset {
	struct TMap<int32_t, struct FStaticMeshOverride> RollingMeshOverrideForSkin; // 0x30(0x50)
	struct TMap<int32_t, struct FSkeletalMeshOverride> SkeletalMeshOverrideForSkin; // 0x80(0x50)
	float SwitchToRollingMeshDelay; // 0xd0(0x04)
	bool bHideCharacterMesh; // 0xd4(0x01)
	char pad_D5[0x3]; // 0xd5(0x03)
	struct FGameplayTag VisibilityTag; // 0xd8(0x08)
	struct FGameplayTag SwitchToRollingMeshStatusTag; // 0xe0(0x08)
	float RollingBallScale; // 0xe8(0x04)
	float RollingBallRadius; // 0xec(0x04)
	struct FVector RollingBallCenterOffset; // 0xf0(0x0c)
	bool bOverrideCameraDesiredDistance; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	float CameraDesiredDistanceOverride; // 0x100(0x04)
	bool bOverrideCameraDistanceSmoothFactor; // 0x104(0x01)
	char pad_105[0x3]; // 0x105(0x03)
	float CameraDistanceSmoothFactorOverride; // 0x108(0x04)
	float RollingAngleDecelerationOnFalling; // 0x10c(0x04)
	float RollingAngleFrictionOnFalling; // 0x110(0x04)
	float InitRollingAngleSpeed; // 0x114(0x04)
	struct FVector InitLocalRollingAxis; // 0x118(0x0c)
	float RollingMoveRadius; // 0x124(0x04)
	bool bOverrideMovementMaxAcceleration; // 0x128(0x01)
	char pad_129[0x3]; // 0x129(0x03)
	float MovementMaxAccelerationOverride; // 0x12c(0x04)
	bool bOverrideBrakingDecelerationWalking; // 0x130(0x01)
	char pad_131[0x3]; // 0x131(0x03)
	float BrakingDecelerationWalkingOverride; // 0x134(0x04)
	bool bOverrideMinAccelerationProjectRatioForValidGroundSlide; // 0x138(0x01)
	char pad_139[0x3]; // 0x139(0x03)
	float MinAccelerationProjectRatioForValidGroundSlideOverride; // 0x13c(0x04)
	bool bOverrideCustomJumpParams; // 0x140(0x01)
	char pad_141[0x7]; // 0x141(0x07)
	struct FCustomJumpParams OverrideCustomJumpParams; // 0x148(0x98)
	struct FDuckRollingCharacterHitConfig CharacterHitConfig; // 0x1e0(0xa0)
	struct FName ReshapingPointParameterName; // 0x280(0x08)
	struct FName ReshapingOrthoDirParameterName; // 0x288(0x08)
	struct FName ReshapingMoveDirScaleParameterName; // 0x290(0x08)
	struct FName ReshapingOrthoDirScaleParameterName; // 0x298(0x08)
	struct FName ReshapingFlattenScaleParameterName; // 0x2a0(0x08)
	float BounceRequiredMinSpeedOnImpactNormal; // 0x2a8(0x04)
	float BounceCollisionShapeScale; // 0x2ac(0x04)
	float BounceTriggerCooldown; // 0x2b0(0x04)
	struct FGameplayCueTag BounceGameplayCueTag; // 0x2b4(0x08)
	char pad_2BC[0x4]; // 0x2bc(0x04)
	struct FRuntimeFloatCurve BounceDurationHoriCurve; // 0x2c0(0x88)
	struct FRuntimeFloatCurve BounceDurationVertCurve; // 0x348(0x88)
	struct FRuntimeFloatCurve BounceReshapingMoveDirCurve; // 0x3d0(0x88)
	struct FRuntimeFloatCurve BounceReshapingOrthoDirCurve; // 0x458(0x88)
	struct FRuntimeFloatCurve BounceReshapingFlattenScaleCurve; // 0x4e0(0x88)
	struct FRuntimeFloatCurve BounceReshapingScaleCurve; // 0x568(0x88)
	struct FRuntimeFloatCurve BounceMoveHoriDurationScaleCurve; // 0x5f0(0x88)
	struct FRuntimeFloatCurve BounceMoveVertDurationScaleCurve; // 0x678(0x88)
	struct FRuntimeFloatCurve BounceMoveHoriImmovableDurationScaleCurve; // 0x700(0x88)
	struct FRuntimeFloatCurve BounceMoveVertImmovableDurationScaleCurve; // 0x788(0x88)
	float BounceMoveRequiredMinSpeedOnImpactNormal; // 0x810(0x04)
	float BounceMoveMaxAllowedHoriBounceSpeed; // 0x814(0x04)
	float BounceMoveMaxAllowedVertBounceSpeed; // 0x818(0x04)
	char pad_81C[0x4]; // 0x81c(0x04)
	struct FRuntimeFloatCurve BounceMoveHoriSpeedInheritanceCurve; // 0x820(0x88)
	struct FRuntimeFloatCurve BounceMoveVertSpeedInheritanceCurve; // 0x8a8(0x88)
	float JumpReshapingDuration; // 0x930(0x04)
	char pad_934[0x4]; // 0x934(0x04)
	struct FRuntimeFloatCurve JumpReshapingMoveDirCurve; // 0x938(0x88)
	struct FRuntimeFloatCurve JumpReshapingOrthoDirCurve; // 0x9c0(0x88)
	struct TArray<struct UAnimMontage*> JumpShowMontages; // 0xa48(0x10)
	float JumpShowDelay; // 0xa58(0x04)
	struct FGameplayCueTag JumpGameplayCueTag; // 0xa5c(0x08)
	float SwitchReshapingDuration; // 0xa64(0x04)
	struct FRuntimeFloatCurve SwitchReshapingMoveDirCurve; // 0xa68(0x88)
	struct FRuntimeFloatCurve SwitchReshapingOrthoDirCurve; // 0xaf0(0x88)
	struct FRangeFloat RandomReshapingIntervalRange; // 0xb78(0x08)
	float MinSpeedForRandomReshaping; // 0xb80(0x04)
	float RandomReshapingDuration; // 0xb84(0x04)
	struct FRuntimeFloatCurve RandomReshapingMoveDirCurve; // 0xb88(0x88)
	struct FRuntimeFloatCurve RandomReshapingOrthoDirCurve; // 0xc10(0x88)
	char pad_C98[0x8]; // 0xc98(0x08)
};

// Class Solarland.DuckRollingMeshComponent
// Size: 0xcb0 (Inherited: 0xc20)
struct UDuckRollingMeshComponent : USkeletalMeshComponent {
	struct UPrimitiveComponent* ShieldComponentClass; // 0xc20(0x08)
	struct TMap<struct FSoftObjectPath, struct FSoftObjectPath> MaterialEffectMaterialMapping; // 0xc28(0x50)
	float HeadRelativeHeight; // 0xc78(0x04)
	char pad_C7C[0x4]; // 0xc7c(0x04)
	struct UPrimitiveComponent* ShieldComponent; // 0xc80(0x08)
	struct TArray<struct UObject*> MeshOverrides; // 0xc88(0x10)
	struct TArray<struct UObject*> LoadedEffectMaterials; // 0xc98(0x10)
	char pad_CA8[0x8]; // 0xca8(0x08)

	void ReceiveOnRegister(); // Function Solarland.DuckRollingMeshComponent.ReceiveOnRegister // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.DuckRollingProxyComponent
// Size: 0x238 (Inherited: 0xb0)
struct UDuckRollingProxyComponent : UActorComponent {
	struct UDuckRollingMeshComponent* RollingMeshClass; // 0xb0(0x08)
	struct UDuckRollingMeshComponent* RollingMeshComponent; // 0xb8(0x08)
	struct UDuckRollingConfigDataAsset* RollingConfig; // 0xc0(0x08)
	struct ASolarCharacter* CharacterOwner; // 0xc8(0x08)
	char pad_D0[0xe0]; // 0xd0(0xe0)
	struct TArray<struct UMaterialInterface*> ReshapingMaterials; // 0x1b0(0x10)
	struct UMaterialInterface* ReshapingMultiplePassMaterial; // 0x1c0(0x08)
	char pad_1C8[0x70]; // 0x1c8(0x70)

	void TryOverrideRollingMesh(int32_t CharacterSkinID); // Function Solarland.DuckRollingProxyComponent.TryOverrideRollingMesh // (Final|Native|Protected) // @ game+0x26aa600
	void OnUpdateCharacterStateAfterMovement(struct USolarCharacterMovementComponent* MoveComp, float DeltaTime); // Function Solarland.DuckRollingProxyComponent.OnUpdateCharacterStateAfterMovement // (Final|Native|Protected) // @ game+0x26a9560
	void OnSwitchToRollingMeshTagCountChanged(struct FGameplayTag Tag, int32_t count); // Function Solarland.DuckRollingProxyComponent.OnSwitchToRollingMeshTagCountChanged // (Final|Native|Protected) // @ game+0x26a9490
	void OnCharacterMovementModeChanged(struct ACharacter* Character, enum class EMovementMode PrevMovementMode, char PreviousCustomMode); // Function Solarland.DuckRollingProxyComponent.OnCharacterMovementModeChanged // (Final|Native|Protected) // @ game+0x26a9360
};

// Class Solarland.DurationTalent
// Size: 0x450 (Inherited: 0x420)
struct UDurationTalent : UCharacterTalent {
	struct UGameplayEffect* DurationEffectClass; // 0x420(0x08)
	struct TArray<struct UGameplayEffect*> DurationSubEffectClasses; // 0x428(0x10)
	char pad_438[0x18]; // 0x438(0x18)

	void StartDurationEffectFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.DurationTalent.StartDurationEffectFailed // (Final|Native|Protected|HasOutParms) // @ game+0x2685f30
	void ReceiveDurationEffectFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.DurationTalent.ReceiveDurationEffectFinished // (Final|Native|Protected|HasOutParms) // @ game+0x26a9720
};

// Class Solarland.EditableRichTextBlock
// Size: 0xd00 (Inherited: 0x160)
struct UEditableRichTextBlock : UTextLayoutWidget {
	char pad_160[0x28]; // 0x160(0x28)
	struct FMulticastInlineDelegate OnTextChanged; // 0x188(0x10)
	struct FMulticastInlineDelegate OnTextCommitted; // 0x198(0x10)
	struct FText Text; // 0x1a8(0x18)
	float MinDesiredWidth; // 0x1c0(0x04)
	char pad_1C4[0x4]; // 0x1c4(0x04)
	struct UDataTable* TextStyleSet; // 0x1c8(0x08)
	struct TArray<struct USolarRichTextBlockDecorator*> DecoratorClasses; // 0x1d0(0x10)
	bool bOverrideDefaultStyle; // 0x1e0(0x01)
	char pad_1E1[0xf]; // 0x1e1(0x0f)
	struct FTextBlockStyle DefaultTextStyleOverride; // 0x1f0(0x460)
	enum class ETextTransformPolicy TextTransformPolicy; // 0x650(0x01)
	char pad_651[0x7]; // 0x651(0x07)
	struct TArray<struct USolarRichTextBlockDecorator*> InstanceDecorators; // 0x658(0x10)
	char pad_668[0x8]; // 0x668(0x08)
	struct FTextBlockStyle DefaultTextStyle; // 0x670(0x460)
	char pad_AD0[0x10]; // 0xad0(0x10)
	struct FDelegate TextDelegate; // 0xae0(0x10)
	bool bEnableLocalHintText; // 0xaf0(0x01)
	bool bCapitalsLock; // 0xaf1(0x01)
	enum class ESolarSupportLanguages PreviewLanguage; // 0xaf2(0x01)
	char pad_AF3[0x1]; // 0xaf3(0x01)
	int32_t LocalHintTextID; // 0xaf4(0x04)
	struct FText HintText; // 0xaf8(0x18)
	struct FDelegate HintTextDelegate; // 0xb10(0x10)
	struct FSlateBrush CaretImage; // 0xb20(0xe0)
	struct FSlateBrush BackgroundImageSelected; // 0xc00(0xe0)
	bool IsCaretMovedWhenGainFocus; // 0xce0(0x01)
	bool SelectAllTextWhenFocused; // 0xce1(0x01)
	bool RevertTextOnEscape; // 0xce2(0x01)
	bool ClearKeyboardFocusOnCommit; // 0xce3(0x01)
	bool SelectAllTextOnCommit; // 0xce4(0x01)
	bool IgnoreFocusChange; // 0xce5(0x01)
	char pad_CE6[0x1a]; // 0xce6(0x1a)

	void SetTextTransformPolicy(enum class ETextTransformPolicy InTransformPolicy); // Function Solarland.EditableRichTextBlock.SetTextTransformPolicy // (Final|Native|Public|BlueprintCallable) // @ game+0x26aa390
	void SetText(struct FText& InText); // Function Solarland.EditableRichTextBlock.SetText // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26aa2c0
	void SetIsDisableVirtualKeyboardShow(bool InDisableVKShow); // Function Solarland.EditableRichTextBlock.SetIsDisableVirtualKeyboardShow // (Final|Native|Public|BlueprintCallable) // @ game+0x26aa1a0
	void SetIgnoreFocusChange(bool InIngoreFocusChange); // Function Solarland.EditableRichTextBlock.SetIgnoreFocusChange // (Final|Native|Public|BlueprintCallable) // @ game+0x26aa110
	void SetHintTextLocalID(int32_t InLocalHintTextID); // Function Solarland.EditableRichTextBlock.SetHintTextLocalID // (Final|Native|Public|BlueprintCallable) // @ game+0x26aa080
	void SetHintText(struct FText InHintText); // Function Solarland.EditableRichTextBlock.SetHintText // (Final|Native|Public|BlueprintCallable) // @ game+0x26a9fa0
	void SetEnableLocalHintText(bool bInEnableLocalHintText); // Function Solarland.EditableRichTextBlock.SetEnableLocalHintText // (Final|Native|Public|BlueprintCallable) // @ game+0x26a9f10
	void SetDefaultTextStyle(struct FTextBlockStyle& InDefaultTextStyle); // Function Solarland.EditableRichTextBlock.SetDefaultTextStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26a9de0
	void SetDefaultStrikeBrush(struct FSlateBrush& InStrikeBrush); // Function Solarland.EditableRichTextBlock.SetDefaultStrikeBrush // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26a9d30
	void SetDefaultShadowOffset(struct FVector2D InShadowOffset); // Function Solarland.EditableRichTextBlock.SetDefaultShadowOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x26a9cb0
	void SetDefaultShadowColorAndOpacity(struct FLinearColor InShadowColorAndOpacity); // Function Solarland.EditableRichTextBlock.SetDefaultShadowColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x26a9c20
	void SetDefaultFont(struct FSlateFontInfo InFontInfo); // Function Solarland.EditableRichTextBlock.SetDefaultFont // (Final|Native|Public|BlueprintCallable) // @ game+0x26a9b00
	void SetDefaultColorAndOpacity(struct FSlateColor InColorAndOpacity); // Function Solarland.EditableRichTextBlock.SetDefaultColorAndOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x26a9a10
	void SetCaretImage(struct FSlateBrush& InCaretImage); // Function Solarland.EditableRichTextBlock.SetCaretImage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26a9960
	void SetBackgroundImageSelected(struct FSlateBrush& InBackgroundImageSelected); // Function Solarland.EditableRichTextBlock.SetBackgroundImageSelected // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26a98b0
	void SetAutoWrapText(bool InAutoTextWrap); // Function Solarland.EditableRichTextBlock.SetAutoWrapText // (Final|Native|Public|BlueprintCallable) // @ game+0x26a9820
	void OnEditableTextCommittedEvent__DelegateSignature(struct FText& Text, enum class ETextCommit CommitMethod); // DelegateFunction Solarland.EditableRichTextBlock.OnEditableTextCommittedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnEditableTextChangedEvent__DelegateSignature(struct FText& Text); // DelegateFunction Solarland.EditableRichTextBlock.OnEditableTextChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void InsertTextAtCursor(struct FString inString); // Function Solarland.EditableRichTextBlock.InsertTextAtCursor // (Final|Native|Public|BlueprintCallable) // @ game+0x26a92c0
	struct FText GetText(); // Function Solarland.EditableRichTextBlock.GetText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26a9160
	void ClearAllDefaultStyleOverrides(); // Function Solarland.EditableRichTextBlock.ClearAllDefaultStyleOverrides // (Final|Native|Public) // @ game+0x26a8ed0
	void AcquireVirtualKeyBoardEntryWigetFocus(); // Function Solarland.EditableRichTextBlock.AcquireVirtualKeyBoardEntryWigetFocus // (Final|Native|Public) // @ game+0x26a8eb0
};

// Class Solarland.ElectricShop_Weapon
// Size: 0x598 (Inherited: 0x400)
struct UElectricShop_Weapon : USolarUserWidget {
	struct FMulticastInlineDelegate OnWeaponUpdateRequested; // 0x400(0x10)
	struct FMulticastInlineDelegate OnShieldUpdateRequested; // 0x410(0x10)
	struct UWidgetSwitcher* WidgetSwitcher_weapon; // 0x420(0x08)
	struct UCanvasPanel* Weapon; // 0x428(0x08)
	struct UImage* Img_Level_Bg; // 0x430(0x08)
	struct UOverlay* Level_Indicator; // 0x438(0x08)
	struct UHorizontalBox* Panel_Level; // 0x440(0x08)
	struct UTextBlock* Txt_Level; // 0x448(0x08)
	struct UImage* Img_Arrow; // 0x450(0x08)
	struct USolarTextBlock* Txt_Max; // 0x458(0x08)
	struct USolarImage* Img_Weapon; // 0x460(0x08)
	struct UImage* Img_Shield; // 0x468(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Upgrade; // 0x470(0x08)
	struct USolarImage* Upgrade_BG; // 0x478(0x08)
	struct USolarTextBlock* Txt_UpgradeState; // 0x480(0x08)
	struct UHorizontalBox* Panel_ElectricCost; // 0x488(0x08)
	struct UOverlay* Overlay_Discount; // 0x490(0x08)
	struct UTextBlock* Txt_ElectricityNum_Undiscounted; // 0x498(0x08)
	struct UTextBlock* Txt_ElectricityNum; // 0x4a0(0x08)
	struct USolarTextBlock* Txt_UpgradeState_Disable; // 0x4a8(0x08)
	struct UHorizontalBox* Panel_ElectricCost_Disable; // 0x4b0(0x08)
	struct UOverlay* Overlay_Discount_2; // 0x4b8(0x08)
	struct UTextBlock* Txt_ElectricityNum_Undiscounted_2; // 0x4c0(0x08)
	struct UTextBlock* Txt_ElectricityNum_Disable; // 0x4c8(0x08)
	struct USolarTextBlock* Txt_UpgradeState_Disable_2; // 0x4d0(0x08)
	struct UCanvasPanel* Weapon_UpgradeSuccess; // 0x4d8(0x08)
	struct UImage* Image_BG2_3; // 0x4e0(0x08)
	struct USolarTextBlock* Txt_Upgrade2; // 0x4e8(0x08)
	struct UCanvasPanel* Weapon_None; // 0x4f0(0x08)
	struct UImage* Image_BG2; // 0x4f8(0x08)
	struct UImage* Image_BG2_2; // 0x500(0x08)
	struct UWidgetAnimation* Succeed_Anim; // 0x508(0x08)
	bool bIsWeapon; // 0x510(0x01)
	char pad_511[0x17]; // 0x511(0x17)
	int32_t MaxWeaponLevel; // 0x528(0x04)
	char pad_52C[0x34]; // 0x52c(0x34)
	struct TArray<struct FString> WeaponLevelBGNames; // 0x560(0x10)
	struct FString WeaponLevelBGPrefix; // 0x570(0x10)
	struct FString ShieldIconPrefix; // 0x580(0x10)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> CurrentWeapon; // 0x590(0x08)

	void UpdateUpgradeData(struct ASolarPlayerWeapon* InWeapon, float Discount); // Function Solarland.ElectricShop_Weapon.UpdateUpgradeData // (Final|Native|Public) // @ game+0x26aa810
	void UpdateShieldUpgradeData(float Discount); // Function Solarland.ElectricShop_Weapon.UpdateShieldUpgradeData // (Final|Native|Public) // @ game+0xb67d60
	void ShowUpgradeEffect(); // Function Solarland.ElectricShop_Weapon.ShowUpgradeEffect // (Final|Native|Protected) // @ game+0x9043b0
	void SetWeaponWidgetSwitcherIndex(int32_t InNewIndex); // Function Solarland.ElectricShop_Weapon.SetWeaponWidgetSwitcherIndex // (Final|Native|Public) // @ game+0x1ae6850
	void SetUpgradeState(); // Function Solarland.ElectricShop_Weapon.SetUpgradeState // (Final|Native|Protected) // @ game+0x9043b0
	void SetUpgradeIndicator(); // Function Solarland.ElectricShop_Weapon.SetUpgradeIndicator // (Final|Native|Protected) // @ game+0x9043b0
	void SetIndicatorVisibility(enum class EShopWeaponUpgradeState InState); // Function Solarland.ElectricShop_Weapon.SetIndicatorVisibility // (Final|Native|Protected) // @ game+0x26a9e90
	void SetElectricCostState(enum class EShopWeaponUpgradeState InState); // Function Solarland.ElectricShop_Weapon.SetElectricCostState // (Final|Native|Protected) // @ game+0x26a9e90
	void RequestUpgradeWeapon(); // Function Solarland.ElectricShop_Weapon.RequestUpgradeWeapon // (Final|Native|Protected) // @ game+0x9043b0
	void RequestUpgradeShield(); // Function Solarland.ElectricShop_Weapon.RequestUpgradeShield // (Final|Native|Protected) // @ game+0x9043b0
	void RefreshCurrentShieldProperty(int32_t InShieldID); // Function Solarland.ElectricShop_Weapon.RefreshCurrentShieldProperty // (Final|Native|Protected) // @ game+0x1ae6850
	void OnWeaponUpdateRequested__DelegateSignature(struct ASolarPlayerWeapon* Weapon); // DelegateFunction Solarland.ElectricShop_Weapon.OnWeaponUpdateRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnUpgradeWeaponSuccess(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.ElectricShop_Weapon.OnUpgradeWeaponSuccess // (Final|Native|Protected) // @ game+0x26a9650
	void OnUpgradeShieldSuccess(struct ASolarCharacter* InCharacter); // Function Solarland.ElectricShop_Weapon.OnUpgradeShieldSuccess // (Final|Native|Protected) // @ game+0x92e240
	void OnUpgradeCooldown(); // Function Solarland.ElectricShop_Weapon.OnUpgradeCooldown // (Final|Native|Protected) // @ game+0x26a9630
	void OnShieldUpdateRequested__DelegateSignature(struct ASolarCharacter* ShieldCharacter); // DelegateFunction Solarland.ElectricShop_Weapon.OnShieldUpdateRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void InitWeaponUpgradeCost(); // Function Solarland.ElectricShop_Weapon.InitWeaponUpgradeCost // (Final|Native|Protected) // @ game+0x9043b0
	void HideUpgradeEffect(); // Function Solarland.ElectricShop_Weapon.HideUpgradeEffect // (Final|Native|Protected) // @ game+0x26a92a0
	float GetWeaponUpgradeCost(int32_t InWeaponLevel); // Function Solarland.ElectricShop_Weapon.GetWeaponUpgradeCost // (Final|Native|Protected) // @ game+0x26a9200
	struct FString GetWeaponLvBgFullPath(int32_t WeaponLv); // Function Solarland.ElectricShop_Weapon.GetWeaponLvBgFullPath // (Final|Native|Protected) // @ game+0x26a9080
	struct FString GetShieldLvBgFullPath(int32_t ShieldLv); // Function Solarland.ElectricShop_Weapon.GetShieldLvBgFullPath // (Final|Native|Protected) // @ game+0x26a9080
	float GetDiscountedCost(float Cost); // Function Solarland.ElectricShop_Weapon.GetDiscountedCost // (Final|Native|Protected) // @ game+0x26a8ef0
	void CheckEnergyAvaliable(float InValue); // Function Solarland.ElectricShop_Weapon.CheckEnergyAvaliable // (Final|Native|Public) // @ game+0xb67d60
	void BindDelegates(); // Function Solarland.ElectricShop_Weapon.BindDelegates // (Final|Native|Protected) // @ game+0x9043b0
};

// Class Solarland.ElectronicTreasureBox
// Size: 0x648 (Inherited: 0x608)
struct AElectronicTreasureBox : ASolarTreasureBoxActor {
	struct FString OnFinishSpawnLoopAudio; // 0x608(0x10)
	struct FString OnStopLoopAudio; // 0x618(0x10)
	struct FString OnOpenAudio; // 0x628(0x10)
	struct FSpawnedActorHandle CachedActorHandle; // 0x638(0x04)
	char pad_63C[0xc]; // 0x63c(0x0c)
};

// Class Solarland.EmojiBubbleSubsystem
// Size: 0x38 (Inherited: 0x30)
struct UEmojiBubbleSubsystem : UGameInstanceSubsystem {
	struct UDataTable* EmojiTable; // 0x30(0x08)

	void ShowEmojiBubbleToContainerInLobby(int32_t EmojiID, struct ASolarLobbyCharacter* InLobbyCharacter, struct FString PlayerId); // Function Solarland.EmojiBubbleSubsystem.ShowEmojiBubbleToContainerInLobby // (Final|Native|Public) // @ game+0x26aa4e0
	void ShowEmojiBubbleToContainer(int32_t EmojiID, struct ASolarCharacter* InCharacter); // Function Solarland.EmojiBubbleSubsystem.ShowEmojiBubbleToContainer // (Final|Native|Public) // @ game+0x26aa410
	void ResetAllEmojiBubble(); // Function Solarland.EmojiBubbleSubsystem.ResetAllEmojiBubble // (Final|Native|Public) // @ game+0x26a9800
	bool GetEmojiConfigByID(int32_t EmojiID, struct FEmojiBubbleConfig& OutConfig); // Function Solarland.EmojiBubbleSubsystem.GetEmojiConfigByID // (Final|Native|Public|HasOutParms) // @ game+0x26a8f90
};

// Class Solarland.EmojiBubbleWidget
// Size: 0x648 (Inherited: 0x400)
struct UEmojiBubbleWidget : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	float ShowTime; // 0x410(0x04)
	char pad_414[0x34]; // 0x414(0x34)
	struct UWidgetAnimation* EmojiBegin_Anim; // 0x448(0x08)
	struct UWidgetAnimation* EmojiEnd_Anim; // 0x450(0x08)
	struct UImage* Img_Emoji; // 0x458(0x08)
	bool IsSpecialEmoji; // 0x460(0x01)
	char pad_461[0x3]; // 0x461(0x03)
	int32_t EmojiOffsetInLobby; // 0x464(0x04)
	struct FVector2D LobbyEmojiSize; // 0x468(0x08)
	struct FRuntimeFloatCurve EmojiSizeCurve; // 0x470(0x88)
	struct FRuntimeFloatCurve EnemyEmojiSizeCurve; // 0x4f8(0x88)
	int32_t TeamMateEmojiOffset; // 0x580(0x04)
	int32_t SelfEmojiOffset; // 0x584(0x04)
	struct TArray<enum class EUsePlayerType> EmoteAppearSoundConfig; // 0x588(0x10)
	struct TArray<enum class EUsePlayerType> EmoteSoundConfig; // 0x598(0x10)
	char pad_5A8[0xa0]; // 0x5a8(0xa0)

	void UpdateEmojiContent(int32_t EmojiID); // Function Solarland.EmojiBubbleWidget.UpdateEmojiContent // (Final|Native|Public) // @ game+0x26aa780
	void SetIsInLobbyTeam(bool IsInLobbyTeam); // Function Solarland.EmojiBubbleWidget.SetIsInLobbyTeam // (Final|Native|Public) // @ game+0x26aa230
	void OnEndAnimationFinished(); // Function Solarland.EmojiBubbleWidget.OnEndAnimationFinished // (Final|Native|Public) // @ game+0x26a9470
};

// Class Solarland.EShopGoodsObject
// Size: 0x50 (Inherited: 0x28)
struct UEShopGoodsObject : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	int32_t ProductID; // 0x30(0x04)
	int32_t ItemID; // 0x34(0x04)
	int32_t Price; // 0x38(0x04)
	int32_t Num; // 0x3c(0x04)
	float CoolDown; // 0x40(0x04)
	int32_t Generation; // 0x44(0x04)
	bool bIsRecommend; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	void UpdateData(struct FElectricShopItem& InItemData, bool InRecommend); // Function Solarland.EShopGoodsObject.UpdateData // (Final|Native|Public|HasOutParms) // @ game+0x26aa690
};

// Class Solarland.EventAction
// Size: 0x80 (Inherited: 0x70)
struct UEventAction : UActionNode {
	char pad_70[0x10]; // 0x70(0x10)
};

// Class Solarland.ExpWidget
// Size: 0x418 (Inherited: 0x400)
struct UExpWidget : USolarUserWidget {
	int32_t LocalTextIndex; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct USolarTextBlock* SolarText_WP_Exp; // 0x408(0x08)
	struct UWidgetAnimation* Exp_Anim; // 0x410(0x08)

	void PlayGetEXPAnimation(int32_t InExp); // Function Solarland.ExpWidget.PlayGetEXPAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x26aefb0
	struct FString GetExpDisplayStringWithValue(int32_t Value); // Function Solarland.ExpWidget.GetExpDisplayStringWithValue // (Final|Native|Public|BlueprintCallable) // @ game+0x26ae520
};

// Class Solarland.FactionInfo
// Size: 0x2c8 (Inherited: 0x228)
struct AFactionInfo : AInfo {
	char pad_228[0x10]; // 0x228(0x10)
	struct UFactionInfoComponent* FactionInfoDetails; // 0x238(0x08)
	enum class EFactionType FactionType; // 0x240(0x01)
	char pad_241[0x7]; // 0x241(0x07)
	struct FText FactionName; // 0x248(0x18)
	char pad_260[0x60]; // 0x260(0x60)
	enum class EMatchResult MatchResult; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)

	void OnPlayerStateEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.FactionInfo.OnPlayerStateEndPlay // (Final|Native|Private) // @ game+0x26aee40
	char GetNumPlayers(); // Function Solarland.FactionInfo.GetNumPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x26ae680
	char GetNumMembers(); // Function Solarland.FactionInfo.GetNumMembers // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x26ae650
	char GetNumBots(); // Function Solarland.FactionInfo.GetNumBots // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x26ae620
};

// Class Solarland.FactionInfoComponent
// Size: 0xb0 (Inherited: 0xb0)
struct UFactionInfoComponent : UActorComponent {
};

// Class Solarland.FeedbackCanvasPanel
// Size: 0x1b8 (Inherited: 0x168)
struct UFeedbackCanvasPanel : UCanvasPanel {
	struct TMap<struct FString, struct FFeedbackSingleData> FeedbackMap; // 0x168(0x50)
};

// Class Solarland.FeedbackWidget
// Size: 0x2a0 (Inherited: 0x260)
struct UFeedbackWidget : UUserWidget {
	struct UFeedbackCanvasPanel* FeedbackPanel; // 0x260(0x08)
	float VisibilityTime; // 0x268(0x04)
	float VisibilityTimer; // 0x26c(0x04)
	struct FFeedbackSingleData CurrentFeedbackSingleData; // 0x270(0x30)
};

// Class Solarland.FireInputWidget
// Size: 0x450 (Inherited: 0x138)
struct UFireInputWidget : UWidget {
	char pad_138[0x8]; // 0x138(0x08)
	struct FSlateBrush JoyStickThumb; // 0x140(0xe0)
	struct FSlateBrush JoyStickThumbPress; // 0x220(0xe0)
	struct FSlateBrush JoyStickIcon; // 0x300(0xe0)
	struct FVector2D VisualSize; // 0x3e0(0x08)
	struct FVector2D ThumbSize; // 0x3e8(0x08)
	struct FVector2D InputScale; // 0x3f0(0x08)
	struct FVector2D IconSize; // 0x3f8(0x08)
	float ActiveOpacity; // 0x400(0x04)
	float InactiveOpacity; // 0x404(0x04)
	float TimeUntilDeactive; // 0x408(0x04)
	bool bPreventReCenter; // 0x40c(0x01)
	char pad_40D[0x13]; // 0x40d(0x13)
	struct FMulticastInlineDelegate OnJoystickPressed; // 0x420(0x10)
	struct FMulticastInlineDelegate OnJoystickRelease; // 0x430(0x10)
	struct FMulticastInlineDelegate OnInputYawAndPitch; // 0x440(0x10)

	void SetJoyStickThumbBrush(struct FButtonStyle& ButtonStyle); // Function Solarland.FireInputWidget.SetJoyStickThumbBrush // (Final|Native|Public|HasOutParms) // @ game+0x26b0170
	void SetJoyStickIcon(struct FSlateBrush& Icon); // Function Solarland.FireInputWidget.SetJoyStickIcon // (Final|Native|Public|HasOutParms) // @ game+0x26b00c0
	void SetInputScale(struct FVector2D Scale); // Function Solarland.FireInputWidget.SetInputScale // (Final|Native|Public|HasDefaults) // @ game+0x26b0040
	void ResetControlInput(); // Function Solarland.FireInputWidget.ResetControlInput // (Final|Native|Public) // @ game+0x26b0020
};

// Class Solarland.GameArgs
// Size: 0x48 (Inherited: 0x28)
struct UGameArgs : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct FString> CommandLineArgs; // 0x30(0x10)
	bool SkipTutorial; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	bool ExecGameArgs(struct FString Args, struct FString& FailReason); // Function Solarland.GameArgs.ExecGameArgs // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xb66830
};

// Class Solarland.GameDataManager
// Size: 0x11a8 (Inherited: 0x228)
struct AGameDataManager : AGameManagerBase {
	char pad_228[0x8]; // 0x228(0x08)
	struct TArray<int32_t> IntegerValues; // 0x230(0x10)
	struct TArray<float> FloatValues; // 0x240(0x10)
	struct TArray<char> ByteValues; // 0x250(0x10)
	struct TArray<bool> BoolValues; // 0x260(0x10)
	struct TArray<struct FVector> FVectorValues; // 0x270(0x10)
	struct TArray<struct FString> FStringValues; // 0x280(0x10)
	char pad_290[0x60]; // 0x290(0x60)
	struct FSCMHostData GlobalDataMap; // 0x2f0(0x488)
	struct TMap<struct FString, struct FSCMHostData> SideDataMap; // 0x778(0x50)
	struct TMap<struct FString, struct FSCMHostData> PlayerDataMap; // 0x7c8(0x50)
	struct FSCMHostData SideDataDefaultTemplate; // 0x818(0x488)
	struct FSCMHostData PlayerDataDefaultTemplate; // 0xca0(0x488)
	struct TMap<struct FString, struct URank*> RanKMap; // 0x1128(0x50)
	char pad_1178[0x20]; // 0x1178(0x20)
	struct UDataTable* DataTable; // 0x1198(0x08)
	struct UDataTable* GeneralDataTable; // 0x11a0(0x08)

	void RemoveHost(enum class ESCMHostType HostType, struct FString HostID); // Function Solarland.GameDataManager.RemoveHost // (Final|Native|Public|BlueprintCallable) // @ game+0x26aff40
	void RemoveData(enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, enum class ESCMDataSetType DataSetType); // Function Solarland.GameDataManager.RemoveData // (Final|Native|Public|BlueprintCallable) // @ game+0x26afdc0
	void NotifyRemoveHost(enum class ESCMHostType HostType, struct FString HostID); // Function Solarland.GameDataManager.NotifyRemoveHost // (Net|Native|Event|NetMulticast|Protected) // @ game+0x26ae6d0
	void AddDataByTableRow(struct FName RowName, struct FSCMDataBoardRow& InTableRow); // Function Solarland.GameDataManager.AddDataByTableRow // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x26ae240
};

// Class Solarland.GameEventComponent
// Size: 0xd8 (Inherited: 0xd0)
struct UGameEventComponent : UGameModeCompBase {
	float WorldTime; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)

	void ReceiveInit(); // Function Solarland.GameEventComponent.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void InitializeEventList(); // Function Solarland.GameEventComponent.InitializeEventList // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetAliveCount(); // Function Solarland.GameEventComponent.GetAliveCount // (Final|Native|Protected|BlueprintCallable) // @ game+0x26ae400
	void CheckEventList(float DeltaTime); // Function Solarland.GameEventComponent.CheckEventList // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.LevelWorldCompositionSetting
// Size: 0x88 (Inherited: 0x38)
struct ULevelWorldCompositionSetting : UDeveloperSettings {
	struct TMap<struct FSoftObjectPath, struct FLoadingScreenLevelData> LoadingScreenLevelData; // 0x38(0x50)
};

// Class Solarland.GameLevelManager
// Size: 0x480 (Inherited: 0x228)
struct AGameLevelManager : AGameManagerBase {
	char pad_228[0x28]; // 0x228(0x28)
	struct FString DesiredLoadLevel; // 0x250(0x10)
	char pad_260[0x10]; // 0x260(0x10)
	struct TArray<struct FString> DesiredLoadElementLevels; // 0x270(0x10)
	struct TArray<struct FString> DesiredUnLoadElementLevels; // 0x280(0x10)
	char pad_290[0xa8]; // 0x290(0xa8)
	struct TMap<struct FString, struct ULevelStreamingDynamic*> LevelKeyToObject; // 0x338(0x50)
	struct TSet<struct ASolarCharacter*> MovementDisabledCharacters; // 0x388(0x50)
	char pad_3D8[0x60]; // 0x3d8(0x60)
	struct TArray<struct FString> LoadingElementLevelNames; // 0x438(0x10)
	struct TArray<struct FString> UnLoadingElementLevelNames; // 0x448(0x10)
	char pad_458[0x18]; // 0x458(0x18)
	struct AGameMapElementManager* MapElementManager; // 0x470(0x08)
	char pad_478[0x8]; // 0x478(0x08)

	void SetMinimapFootprintVisible(bool bVisible); // Function Solarland.GameLevelManager.SetMinimapFootprintVisible // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnStreamingLevelLoaded(); // Function Solarland.GameLevelManager.OnStreamingLevelLoaded // (Final|Native|Private) // @ game+0x26aef90
	void OnScoutPlayerDepart(); // Function Solarland.GameLevelManager.OnScoutPlayerDepart // (Final|Native|Public) // @ game+0x26aef70
	void OnRep_DesiredUnLoadElementLevels(); // Function Solarland.GameLevelManager.OnRep_DesiredUnLoadElementLevels // (Final|Native|Private) // @ game+0x26aef50
	void OnRep_DesiredLoadLevel(); // Function Solarland.GameLevelManager.OnRep_DesiredLoadLevel // (Final|Native|Private) // @ game+0x26aef30
	void OnRep_DesiredLoadElementLevels(); // Function Solarland.GameLevelManager.OnRep_DesiredLoadElementLevels // (Final|Native|Private) // @ game+0x26aef10
	void OnLevelLoaded(); // Function Solarland.GameLevelManager.OnLevelLoaded // (Final|Native|Private) // @ game+0x26aee20
	void OnElementStreamingLevelUnLoaded(); // Function Solarland.GameLevelManager.OnElementStreamingLevelUnLoaded // (Final|Native|Private) // @ game+0x26ae940
	void OnElementStreamingLevelLoaded(); // Function Solarland.GameLevelManager.OnElementStreamingLevelLoaded // (Final|Native|Private) // @ game+0x26ae920
	void OnCharacterEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameLevelManager.OnCharacterEndPlay // (Final|Native|Private) // @ game+0x26ae850
	void LevelManagerTick(); // Function Solarland.GameLevelManager.LevelManagerTick // (Final|Native|Private) // @ game+0x26ae6b0
	int32_t GetCurrentMapID(); // Function Solarland.GameLevelManager.GetCurrentMapID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x26ae4f0
	struct FString GetCurrentLevel(); // Function Solarland.GameLevelManager.GetCurrentLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x26ae430
};

// Class Solarland.GameMapElementManager
// Size: 0x2e8 (Inherited: 0x228)
struct AGameMapElementManager : AGameManagerBase {
	struct TMap<struct FString, struct ASCMMapElementBase*> MapElementListWithID; // 0x228(0x50)
	struct TArray<struct ASCMMapElementBase*> MapElementList; // 0x278(0x10)
	struct TArray<struct ASCMPlayerStart*> PlayerStartList; // 0x288(0x10)
	char pad_298[0x50]; // 0x298(0x50)

	void OnAddNewMapElement(struct AActor* InNewActor); // Function Solarland.GameMapElementManager.OnAddNewMapElement // (Final|Native|Public) // @ game+0x26ae7c0
};

// Class Solarland.GameModeGlobalSetting
// Size: 0xb8 (Inherited: 0x28)
struct UGameModeGlobalSetting : UObject {
	struct FMulticastInlineDelegate OnGlobalSettingChanged; // 0x28(0x10)
	bool bCanVJetInWater; // 0x38(0x01)
	bool bCanHJetInWater; // 0x39(0x01)
	bool bOverrideVJetCD; // 0x3a(0x01)
	char pad_3B[0x1]; // 0x3b(0x01)
	float OverridenVJetCD; // 0x3c(0x04)
	bool bOverrideHJetCD; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float OverridenHJetCD; // 0x44(0x04)
	bool bEnableJetCost; // 0x48(0x01)
	enum class EJetAltitudeLimitationMode JetAltitudeLimitationMode; // 0x49(0x01)
	bool bEnableEnergyCost; // 0x4a(0x01)
	bool bEnableDamage; // 0x4b(0x01)
	bool bEnableTeamDamage; // 0x4c(0x01)
	bool bEnableMinHPLock; // 0x4d(0x01)
	char pad_4E[0x2]; // 0x4e(0x02)
	float MinHPToLock; // 0x50(0x04)
	bool bEnableSkydiveFollowMovement; // 0x54(0x01)
	bool bEnableBigMap; // 0x55(0x01)
	bool bShowVehicleOnMap; // 0x56(0x01)
	char pad_57[0x1]; // 0x57(0x01)
	int32_t KillStreakEndNoticeNumber; // 0x58(0x04)
	int32_t KillLeaderMinKillNumber; // 0x5c(0x04)
	bool bShowRevengeNotice; // 0x60(0x01)
	bool bShowKillStreakEndNotice; // 0x61(0x01)
	bool bShowTotalKillNotice; // 0x62(0x01)
	bool bShowKillDownNotice; // 0x63(0x01)
	bool bShowKillLeaderNotice; // 0x64(0x01)
	bool bShowKillLeaderShutDownNotice; // 0x65(0x01)
	bool bShowClearTeamNotice; // 0x66(0x01)
	enum class EWeaponInfiniteAmmoMode WeaponInfiniteAmmoMode; // 0x67(0x01)
	bool bEnableWeaponPartEffectTip; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct TArray<float> WeaponLevelDamageFactorArray; // 0x70(0x10)
	bool bDestroyItemOnDiscard; // 0x80(0x01)
	bool bDestroyWeaponOnDiscard; // 0x81(0x01)
	bool bCanRebirth; // 0x82(0x01)
	bool bCanLoginBattle; // 0x83(0x01)
	bool bEnableBattlePrompt; // 0x84(0x01)
	bool bEnableBattlePrompt_BeginPlay; // 0x85(0x01)
	bool bEnableOpponentPerspective; // 0x86(0x01)
	bool bKillPlayerWhenOut; // 0x87(0x01)
	int32_t ConfigGameModeId; // 0x88(0x04)
	bool bEnableEnemyNameMark; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)
	float EnableEnemyNameMarkDistance; // 0x90(0x04)
	float EnemyNameMarkDuration; // 0x94(0x04)
	int32_t SummonedAirDropMaxSum; // 0x98(0x04)
	float SummonedAirDropLifeTime; // 0x9c(0x04)
	float SummonedAirDropDestroyEffectTime; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
	struct TArray<enum class ESCMInGameState> EnableOpponentPerspectiveInGameStates; // 0xa8(0x10)

	void SetWeaponInfiniteAmmoMode(enum class EWeaponInfiniteAmmoMode NewValue); // Function Solarland.GameModeGlobalSetting.SetWeaponInfiniteAmmoMode // (Final|Native|Public|BlueprintCallable) // @ game+0x26b5250
	void SetTeamDamageEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetTeamDamageEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x26b51c0
	void SetSkydiveFollowMovementEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetSkydiveFollowMovementEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x26b5130
	void SetShowVehicleOnMap(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetShowVehicleOnMap // (Final|Native|Public|BlueprintCallable) // @ game+0x26b50a0
	void SetShowTotalKillNotice(bool InShowTotalKillNotice); // Function Solarland.GameModeGlobalSetting.SetShowTotalKillNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x26b5010
	void SetShowShowClearTeamNotice(bool InShowClearTeamNotice); // Function Solarland.GameModeGlobalSetting.SetShowShowClearTeamNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4f80
	void SetShowRevengeNotice(bool InShowRevengeNotice); // Function Solarland.GameModeGlobalSetting.SetShowRevengeNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4ef0
	void SetShowKillStreakEndNotice(bool InShowKillStreakEndNotice); // Function Solarland.GameModeGlobalSetting.SetShowKillStreakEndNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4e60
	void SetShowKillLeaderShutDownNotice(bool InShowKillLeaderShutDownNotice); // Function Solarland.GameModeGlobalSetting.SetShowKillLeaderShutDownNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4dd0
	void SetShowKillLeaderNotice(bool InShowKillLeaderNotice); // Function Solarland.GameModeGlobalSetting.SetShowKillLeaderNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4d40
	void SetShowKillDownNotice(bool InShowKillDownNotice); // Function Solarland.GameModeGlobalSetting.SetShowKillDownNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4cb0
	void SetMinHPToLock(float NewValue); // Function Solarland.GameModeGlobalSetting.SetMinHPToLock // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4c30
	void SetMinHPLockEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetMinHPLockEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4ba0
	void SetKillStreakEndNoticeNumber(int32_t InKillStreakEndNoticeNumber); // Function Solarland.GameModeGlobalSetting.SetKillStreakEndNoticeNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4a90
	void SetKillPlayerWhenOut(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetKillPlayerWhenOut // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4a00
	void SetKillLeaderMinKillNumber(int32_t InKillLeaderMinKillNumber); // Function Solarland.GameModeGlobalSetting.SetKillLeaderMinKillNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4980
	void SetJetCostEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetJetCostEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x26b48f0
	void SetJetAltitudeLimitationMode(enum class EJetAltitudeLimitationMode NewValue); // Function Solarland.GameModeGlobalSetting.SetJetAltitudeLimitationMode // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4870
	void SetGameCanRebirth(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetGameCanRebirth // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4750
	void SetEnergyCostEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetEnergyCostEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x26b46c0
	void SetDamageEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetDamageEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4630
	void SetCanVJetInWater(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetCanVJetInWater // (Final|Native|Public|BlueprintCallable) // @ game+0x26b45a0
	void SetCanLoginBattle(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetCanLoginBattle // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4510
	void SetCanHJetInWater(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetCanHJetInWater // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4480
	void SetBigMapEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetBigMapEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x26b43f0
	void ReceiveSettingChanged(); // Function Solarland.GameModeGlobalSetting.ReceiveSettingChanged // (Final|Native|Protected) // @ game+0x26b43d0
	bool IsVJetCDOverriden(); // Function Solarland.GameModeGlobalSetting.IsVJetCDOverriden // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b42a0
	bool IsTeamDamageEnabled(); // Function Solarland.GameModeGlobalSetting.IsTeamDamageEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b4280
	bool IsSkydiveFollowMovementEnabled(); // Function Solarland.GameModeGlobalSetting.IsSkydiveFollowMovementEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b4260
	bool IsShowVehicleOnMap(); // Function Solarland.GameModeGlobalSetting.IsShowVehicleOnMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b4240
	bool IsShowTotalKillNotice(); // Function Solarland.GameModeGlobalSetting.IsShowTotalKillNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b4220
	bool IsShowRevengeNotice(); // Function Solarland.GameModeGlobalSetting.IsShowRevengeNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b4200
	bool IsShowKillStreakEndNotice(); // Function Solarland.GameModeGlobalSetting.IsShowKillStreakEndNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b41e0
	bool IsShowKillLeaderShutDownNotice(); // Function Solarland.GameModeGlobalSetting.IsShowKillLeaderShutDownNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b41c0
	bool IsShowKillLeaderNotice(); // Function Solarland.GameModeGlobalSetting.IsShowKillLeaderNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b41a0
	bool IsShowKillDownNotice(); // Function Solarland.GameModeGlobalSetting.IsShowKillDownNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b4180
	bool IsShowClearTeamNotice(); // Function Solarland.GameModeGlobalSetting.IsShowClearTeamNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b4160
	bool IsOpponentPerspectiveEnabled(); // Function Solarland.GameModeGlobalSetting.IsOpponentPerspectiveEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b40a0
	bool IsMinHPLockEnabled(); // Function Solarland.GameModeGlobalSetting.IsMinHPLockEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b4080
	bool IsKillPlayerWhenOut(); // Function Solarland.GameModeGlobalSetting.IsKillPlayerWhenOut // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b4060
	bool IsJetCostEnabledEnabled(); // Function Solarland.GameModeGlobalSetting.IsJetCostEnabledEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b4040
	bool IsHJetCDOverriden(); // Function Solarland.GameModeGlobalSetting.IsHJetCDOverriden // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b4020
	bool IsGameCanRebirth(); // Function Solarland.GameModeGlobalSetting.IsGameCanRebirth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b4000
	bool IsGameCanLoginBattle(); // Function Solarland.GameModeGlobalSetting.IsGameCanLoginBattle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3fe0
	bool IsEnergyCostEnabled(); // Function Solarland.GameModeGlobalSetting.IsEnergyCostEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3fb0
	bool IsEnableWeaponPartEffectTip(); // Function Solarland.GameModeGlobalSetting.IsEnableWeaponPartEffectTip // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2644140
	bool IsDestroyWeaponOnDiscard(); // Function Solarland.GameModeGlobalSetting.IsDestroyWeaponOnDiscard // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3f90
	bool IsDestroyItemOnDiscard(); // Function Solarland.GameModeGlobalSetting.IsDestroyItemOnDiscard // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3f70
	bool IsDamageEnabled(); // Function Solarland.GameModeGlobalSetting.IsDamageEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3f50
	bool IsBigMapEnabled(); // Function Solarland.GameModeGlobalSetting.IsBigMapEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3f30
	enum class EWeaponInfiniteAmmoMode GetWeaponInfiniteAmmoMode(); // Function Solarland.GameModeGlobalSetting.GetWeaponInfiniteAmmoMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3f10
	float GetOverridenVJetCD(); // Function Solarland.GameModeGlobalSetting.GetOverridenVJetCD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3d60
	float GetOverridenHJetCD(); // Function Solarland.GameModeGlobalSetting.GetOverridenHJetCD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3d40
	float GetMinHPToLock(); // Function Solarland.GameModeGlobalSetting.GetMinHPToLock // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x890770
	int32_t GetKillStreakEndNoticeNumber(); // Function Solarland.GameModeGlobalSetting.GetKillStreakEndNoticeNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3cf0
	int32_t GetKillLeaderMinKillNumber(); // Function Solarland.GameModeGlobalSetting.GetKillLeaderMinKillNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3cd0
	enum class EJetAltitudeLimitationMode GetJetAltitudeLimitationMode(); // Function Solarland.GameModeGlobalSetting.GetJetAltitudeLimitationMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3cb0
	float GetDamageFactorByWeaponLevel(int32_t InWeaponLevel); // Function Solarland.GameModeGlobalSetting.GetDamageFactorByWeaponLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3be0
	int32_t GetConfigGameModeId(); // Function Solarland.GameModeGlobalSetting.GetConfigGameModeId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3bc0
	bool CanVJetInWater(); // Function Solarland.GameModeGlobalSetting.CanVJetInWater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b3ae0
	bool CanHJetInWater(); // Function Solarland.GameModeGlobalSetting.CanHJetInWater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b39e0
};

// Class Solarland.GameModeSettingInterface
// Size: 0x28 (Inherited: 0x28)
struct UGameModeSettingInterface : UInterface {

	struct UGameModeGlobalSetting* GetGameModeSetting(); // Function Solarland.GameModeSettingInterface.GetGameModeSetting // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x26525f0
};

// Class Solarland.GameplayTagReflectorSetting
// Size: 0x78 (Inherited: 0x28)
struct UGameplayTagReflectorSetting : UObject {
	struct TMap<struct FName, struct FSoftObjectPath> ReflectedTagsSet; // 0x28(0x50)
};

// Class Solarland.GameplayVibrateDataAsset
// Size: 0x80 (Inherited: 0x30)
struct UGameplayVibrateDataAsset : UDataAsset {
	struct TMap<enum class EGameplayVibrateCategory, struct FVibrateIntensityPlayParams> CategoryIntensityMap; // 0x30(0x50)
};

// Class Solarland.GameplayVibrateSettings
// Size: 0x60 (Inherited: 0x38)
struct UGameplayVibrateSettings : UDeveloperSettings {
	struct TSoftObjectPtr<UGameplayVibrateDataAsset> GameplayVibrateConfig; // 0x38(0x28)
};

// Class Solarland.GameReviveItemManager
// Size: 0x278 (Inherited: 0x228)
struct AGameReviveItemManager : AGameManagerBase {
	int32_t MaxReviveUsage; // 0x228(0x04)
	float ReviveItemRepoTime; // 0x22c(0x04)
	float ReviveProximityRadius; // 0x230(0x04)
	float ReviveHeight; // 0x234(0x04)
	float ReviveWaitTime; // 0x238(0x04)
	bool bGlobalUseRevieItem; // 0x23c(0x01)
	char pad_23D[0x3]; // 0x23d(0x03)
	float DownedReviveButtonDelayTime; // 0x240(0x04)
	float MinReviveRadius; // 0x244(0x04)
	float MaxReviveRadius; // 0x248(0x04)
	struct FVector SingleCruiseDirection; // 0x24c(0x0c)
	float CapsuleAirlineTotalTime; // 0x258(0x04)
	float CapsuleAirlineTotalDistance; // 0x25c(0x04)
	float CapsuleExtendRadius; // 0x260(0x04)
	float CapsuleExtendHalfheight; // 0x264(0x04)
	struct TArray<struct ASolarPlayerState*> InRevivingPlayerState; // 0x268(0x10)

	bool TryToRevivePlayerWithItem(struct ASolarPlayerState* InPlayerState); // Function Solarland.GameReviveItemManager.TryToRevivePlayerWithItem // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetMaxReviveUsage(int32_t InUsage); // Function Solarland.GameReviveItemManager.SetMaxReviveUsage // (Final|Native|Public|BlueprintCallable) // @ game+0x26b4b10
	void SetGlobalUseReviveItem(bool InCanUseItem); // Function Solarland.GameReviveItemManager.SetGlobalUseReviveItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x26b47e0
	bool PlayerTryUseReviveItem(struct ASolarPlayerState* InPlayerState, int32_t InUseNum); // Function Solarland.GameReviveItemManager.PlayerTryUseReviveItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x26b4300
	void OnTeammateReviveManagerRefresh(); // Function Solarland.GameReviveItemManager.OnTeammateReviveManagerRefresh // (Final|Native|Protected|BlueprintCallable) // @ game+0x26b42e0
	void OnStartReviveItemRecycleCountDownDataRequested(); // Function Solarland.GameReviveItemManager.OnStartReviveItemRecycleCountDownDataRequested // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnRep_MaxUseage(); // Function Solarland.GameReviveItemManager.OnRep_MaxUseage // (Final|Native|Protected) // @ game+0x26b42c0
	void OnRep_GlobalUseRevieItem(); // Function Solarland.GameReviveItemManager.OnRep_GlobalUseRevieItem // (Final|Native|Protected) // @ game+0x26b42c0
	bool IsPlayerReviving(struct ASolarPlayerState* InPlayerState); // Function Solarland.GameReviveItemManager.IsPlayerReviving // (Final|Native|Public|BlueprintCallable) // @ game+0x26b40c0
	float GetReviveWaitTime(); // Function Solarland.GameReviveItemManager.GetReviveWaitTime // (Final|Native|Public|BlueprintCallable) // @ game+0x26b3ee0
	float GetReviveProximityRadius(); // Function Solarland.GameReviveItemManager.GetReviveProximityRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x26b3eb0
	float GetReviveItemRepoTime(); // Function Solarland.GameReviveItemManager.GetReviveItemRepoTime // (Final|Native|Public|BlueprintCallable) // @ game+0x26b3e80
	int32_t GetReviveItemID(); // Function Solarland.GameReviveItemManager.GetReviveItemID // (Final|Native|Public|BlueprintCallable) // @ game+0x26b3e50
	float GetReviveHeight(); // Function Solarland.GameReviveItemManager.GetReviveHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x26b3e20
	int32_t GetPlayerReviveItemNum(struct ASolarPlayerState* InPlayerState); // Function Solarland.GameReviveItemManager.GetPlayerReviveItemNum // (Final|Native|Public|BlueprintCallable) // @ game+0x26b3d80
	int32_t GetMaxReviveUsage(); // Function Solarland.GameReviveItemManager.GetMaxReviveUsage // (Final|Native|Public|BlueprintCallable) // @ game+0x26b3d10
	float GetDownedReviveButtonDelayTime(); // Function Solarland.GameReviveItemManager.GetDownedReviveButtonDelayTime // (Final|Native|Public|BlueprintCallable) // @ game+0x26b3c80
	struct FSingleCruiseBaseParam GenSingleCruiseParam(struct FVector DeathLocation); // Function Solarland.GameReviveItemManager.GenSingleCruiseParam // (BlueprintAuthorityOnly|Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x26b3b00
	void ClearAllPlayersReviveItem(); // Function Solarland.GameReviveItemManager.ClearAllPlayersReviveItem // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	bool CanPlayerUseReviveItem(struct ASolarPlayerState* InPlayerState, bool bCheckItemNum); // Function Solarland.GameReviveItemManager.CanPlayerUseReviveItem // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x26b3a00
	bool CanGlobalUseReviveItem(); // Function Solarland.GameReviveItemManager.CanGlobalUseReviveItem // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x26b39b0
};

// Class Solarland.Rank
// Size: 0xb0 (Inherited: 0x28)
struct URank : UObject {
	struct TMap<uint32_t, struct FMulticastInlineDelegate> SpecificRankChangeEventMap; // 0x28(0x50)
	struct TArray<struct FSCMRankListMulticast> RankListChangeMulticasts; // 0x78(0x10)
	char pad_88[0x20]; // 0x88(0x20)
	enum class ESCMDataRankType RankType; // 0xa8(0x01)
	enum class ESCMHostType HostType; // 0xa9(0x01)
	char pad_AA[0x6]; // 0xaa(0x06)
};

// Class Solarland.GaugeImage
// Size: 0x2c8 (Inherited: 0x260)
struct UGaugeImage : UUserWidget {
	enum class EGaugeType GaugeType; // 0x260(0x01)
	bool bInvert; // 0x261(0x01)
	char pad_262[0x2]; // 0x262(0x02)
	struct FVector2D ImageSize; // 0x264(0x08)
	float InitialDegree; // 0x26c(0x04)
	bool bSymmetric; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	struct FVector2D CenterOffset; // 0x274(0x08)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct UObject* ResourceObject; // 0x280(0x08)
	float Progress; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct UMaterialInterface* MaterialDegree360; // 0x290(0x08)
	struct UMaterialInterface* MaterialDegree180; // 0x298(0x08)
	struct UMaterialInterface* MaterialDegree90; // 0x2a0(0x08)
	struct UMaterialInterface* MaterialDegreeLR; // 0x2a8(0x08)
	struct UMaterialInterface* MaterialDegreeUD; // 0x2b0(0x08)
	struct UImage* TargetImage; // 0x2b8(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x2c0(0x08)

	void UpdateProgress(float InProgress); // Function Solarland.GaugeImage.UpdateProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x26b9770
	void SetProgress(float InProgress); // Function Solarland.GaugeImage.SetProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x26b96f0
	void SetImage(struct UObject* RO); // Function Solarland.GaugeImage.SetImage // (Final|Native|Public|BlueprintCallable) // @ game+0x26b9660
	struct UImage* GetInternalImage(); // Function Solarland.GaugeImage.GetInternalImage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26b93f0
};

// Class Solarland.SolarDataAsset
// Size: 0x38 (Inherited: 0x30)
struct USolarDataAsset : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)

	void InitFromAsset(); // Function Solarland.SolarDataAsset.InitFromAsset // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.GlobalHandheldWeaponConfig
// Size: 0x1e0 (Inherited: 0x38)
struct UGlobalHandheldWeaponConfig : USolarDataAsset {
	struct UDataTable* WeaponLODTable; // 0x38(0x08)
	struct FGameplayTagContainer BlockCharacterSprintTags; // 0x40(0x20)
	struct UDataTable* WeaponPartEffectDescTable; // 0x60(0x08)
	int32_t WeaponPartEffectTipMaxinum; // 0x68(0x04)
	float DoScopeInterval; // 0x6c(0x04)
	float DoScopeMixedTimeThreshold; // 0x70(0x04)
	float SprintingFireDelay; // 0x74(0x04)
	struct UDataTable* WeaponScopeSensitivityTable; // 0x78(0x08)
	float CrosshairAimEnemyEndTime; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct TMap<enum class EPosture, struct FString> CharaterPostureMap; // 0x88(0x50)
	struct TMap<int32_t, enum class EPassiveTriggeredVoice> AudioPromptForNoAmmoTable; // 0xd8(0x50)
	struct TArray<struct UDataTable*> SoundGroupMappings; // 0x128(0x10)
	float ForceStopLoopSoundTime; // 0x138(0x04)
	int32_t WeaponSummonBlockNoticeID; // 0x13c(0x04)
	int32_t WeaponSummonOverRangeNoticeID; // 0x140(0x04)
	char pad_144[0x4]; // 0x144(0x04)
	struct UDataTable* WeaponSkinTable; // 0x148(0x08)
	struct TMap<enum class EWeaponPartType, struct FName> PartSocketNameTable; // 0x150(0x50)
	struct UDataTable* WeaponAttachTransformTable; // 0x1a0(0x08)
	float WeaponOnBackpackCrouchLerpTime; // 0x1a8(0x04)
	float ReconnectReadyTime; // 0x1ac(0x04)
	bool bEnableNewShoot; // 0x1b0(0x01)
	bool bEnableGunEndShake; // 0x1b1(0x01)
	bool bEnableRecoilRecovery; // 0x1b2(0x01)
	bool bRecoilRecoveryBlockGunEndShake; // 0x1b3(0x01)
	float RecoilRecoveryScale; // 0x1b4(0x04)
	enum class EAimOffsetAdjustType AimOffsetAdjustType; // 0x1b8(0x01)
	char pad_1B9[0x3]; // 0x1b9(0x03)
	struct FWeaponAttributeGameplayTags WeaponAttributeTags; // 0x1bc(0x18)
	enum class EAimTraceOriginType AimTraceOriginType; // 0x1d4(0x01)
	char pad_1D5[0x3]; // 0x1d5(0x03)
	float MuzzleInWallCheckDistance; // 0x1d8(0x04)
	float SpreadSmoothSpeed; // 0x1dc(0x04)

	struct FString GetStateByPosture(enum class EPosture posture); // Function Solarland.GlobalHandheldWeaponConfig.GetStateByPosture // (Final|Native|Public|Const) // @ game+0x26b9580
	struct FString GetStateByAnimState(enum class ECharacterStateForWeapon CharacterState); // Function Solarland.GlobalHandheldWeaponConfig.GetStateByAnimState // (Final|Native|Public|Const) // @ game+0x26b94a0
	bool GetIsGroundByAnimState(enum class ECharacterStateForWeapon CharacterState); // Function Solarland.GlobalHandheldWeaponConfig.GetIsGroundByAnimState // (Final|Native|Public) // @ game+0x26b9410
};

// Class Solarland.GlobalVehicleWeaponConfig
// Size: 0x100 (Inherited: 0x38)
struct UGlobalVehicleWeaponConfig : USolarDataAsset {
	struct TArray<struct FAssitLockBoneWeight> AssistLockBoneWeight; // 0x38(0x10)
	struct TArray<struct FAssitLockBoneWeight> SortAssistLockBoneWeight; // 0x48(0x10)
	float CoefficientHUD; // 0x58(0x04)
	float CoefficientWorld; // 0x5c(0x04)
	float CoefficientHUDUnlock; // 0x60(0x04)
	float CoefficientWorldUnlock; // 0x64(0x04)
	float HudDistFromAssistLockPawnToSecondReticle; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct FRuntimeFloatCurve AssistLockUIScaleCurve; // 0x70(0x88)
	float CrosshairAimEnemyEndTime; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
};

// Class Solarland.GlobalWeaponConfig
// Size: 0x3a8 (Inherited: 0x38)
struct UGlobalWeaponConfig : USolarDataAsset {
	struct FVector2D StandardViewportSize; // 0x38(0x08)
	float StandardDPIScale; // 0x40(0x04)
	bool bWeaponReceiveShadow; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	struct TMap<struct AActor*, struct FWeaponHitResponse> WeaponHitResponseClassMap; // 0x48(0x50)
	struct TMap<struct FName, struct FWeaponHitResponse> WeaponHitResponseTagMap; // 0x98(0x50)
	struct TMap<struct AActor*, struct FWeaponHitResponse> WeaponHitResponseSameTeamClassMap; // 0xe8(0x50)
	struct TMap<struct FName, struct FWeaponHitResponse> WeaponHitResponseSameTeamTagMap; // 0x138(0x50)
	struct FRuntimeFloatCurve HitEffectScaleRuntimeCurve; // 0x188(0x88)
	bool bCanOperateWhenOverload; // 0x210(0x01)
	char pad_211[0x7]; // 0x211(0x07)
	struct FRuntimeFloatCurve WeaponCrosshairSpreadSpeedRuntimeCurve; // 0x218(0x88)
	struct FRuntimeFloatCurve WeaponCrosshairBackSpeedRuntimeCurve; // 0x2a0(0x88)
	float PriamayFireIgnoreInterval; // 0x328(0x04)
	struct FVector AssistAimAutoFireBoxExtent; // 0x32c(0x0c)
	struct TArray<enum class ECollisionChannel> AssistAimAutoFireBlockTypes; // 0x338(0x10)
	struct UWeaponAssistAimConfig* AssistAimConfig; // 0x348(0x08)
	struct TMap<enum class ESolarHitType, struct FString> HitFeedbackMapForUI; // 0x350(0x50)
	float EnableHeadShotDamageMinScale; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
};

// Class Solarland.GooglePADManager
// Size: 0x28 (Inherited: 0x28)
struct UGooglePADManager : UObject {

	enum class EGooglePADErrorCode ShowCellularDataConfirmation(); // Function Solarland.GooglePADManager.ShowCellularDataConfirmation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26bdcf0
	enum class EGooglePADErrorCode RequestRemoval(struct FString Name); // Function Solarland.GooglePADManager.RequestRemoval // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26bdb00
	enum class EGooglePADErrorCode RequestInfo(struct TArray<struct FString>& AssetPacks); // Function Solarland.GooglePADManager.RequestInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x26bda30
	enum class EGooglePADErrorCode RequestDownload(struct TArray<struct FString>& AssetPacks); // Function Solarland.GooglePADManager.RequestDownload // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x26bda30
	void ReleaseDownloadState(int32_t State); // Function Solarland.GooglePADManager.ReleaseDownloadState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26bd9b0
	void ReleaseAssetPackLocation(int32_t Location); // Function Solarland.GooglePADManager.ReleaseAssetPackLocation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26bd9b0
	bool IsGooglePlayPkg(); // Function Solarland.GooglePADManager.IsGooglePlayPkg // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26bd530
	bool IsAssetPackReady(struct FString Name); // Function Solarland.GooglePADManager.IsAssetPackReady // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26bd490
	int32_t GetTotalBytesToDownload(int32_t State); // Function Solarland.GooglePADManager.GetTotalBytesToDownload // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26bd190
	enum class EGooglePADStorageMethod GetStorageMethod(int32_t Location); // Function Solarland.GooglePADManager.GetStorageMethod // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26bd360
	enum class EGooglePADErrorCode GetShowCellularDataConfirmationStatus(enum class EGooglePADCellularDataConfirmStatus& status); // Function Solarland.GooglePADManager.GetShowCellularDataConfirmationStatus // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x26bd2d0
	enum class EGooglePADDownloadStatus GetDownloadStatus(int32_t State); // Function Solarland.GooglePADManager.GetDownloadStatus // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26bd220
	enum class EGooglePADErrorCode GetDownloadState(struct FString Name, int32_t& State); // Function Solarland.GooglePADManager.GetDownloadState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x26bcfd0
	int32_t GetBytesDownloaded(int32_t State); // Function Solarland.GooglePADManager.GetBytesDownloaded // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26bd190
	struct FString GetAssetsPath(int32_t Location); // Function Solarland.GooglePADManager.GetAssetsPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26bd0c0
	enum class EGooglePADErrorCode GetAssetPackLocation(struct FString Name, int32_t& Location); // Function Solarland.GooglePADManager.GetAssetPackLocation // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x26bcfd0
	struct TArray<struct FString> GetAllAssetPackNames(); // Function Solarland.GooglePADManager.GetAllAssetPackNames // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26bcef0
};

// Class Solarland.SolarWeaponBulletContainerWidget
// Size: 0x470 (Inherited: 0x400)
struct USolarWeaponBulletContainerWidget : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct TMap<enum class EWeaponType, struct FSolarBulletContainerLayout> BulletContainerStorageLayout; // 0x408(0x50)
	struct FBulletContainerColor BulletColor; // 0x458(0x08)
	struct UCanvasPanel* RootPanel; // 0x460(0x08)
	int32_t CurrentMaxAmmo; // 0x468(0x04)
	enum class EWeaponType CurrentWeaponType; // 0x46c(0x01)
	char pad_46D[0x3]; // 0x46d(0x03)
};

// Class Solarland.GridBulletContainer
// Size: 0x4f0 (Inherited: 0x470)
struct UGridBulletContainer : USolarWeaponBulletContainerWidget {
	struct UProgressBar* BulletContainer; // 0x470(0x08)
	struct UOverlay* LightOverlay; // 0x478(0x08)
	struct UOverlay* LightAllOverlay; // 0x480(0x08)
	struct UImage* Img_FakeBullet; // 0x488(0x08)
	struct UImage* Img_BulletMask; // 0x490(0x08)
	struct UImage* Img_Light; // 0x498(0x08)
	struct UImage* Img_BulletGrid; // 0x4a0(0x08)
	struct UImage* Img_Light_Recharge_Empty; // 0x4a8(0x08)
	struct UCanvasPanel* Panel_Empty; // 0x4b0(0x08)
	struct UImage* Img_BulletEmpty; // 0x4b8(0x08)
	struct UWidgetAnimation* Light_Anim; // 0x4c0(0x08)
	struct UWidgetAnimation* LightAll_Anim; // 0x4c8(0x08)
	struct UWidgetAnimation* Recharge_Empty_Anim; // 0x4d0(0x08)
	struct FVector2D OneBulletSize; // 0x4d8(0x08)
	char pad_4E0[0x10]; // 0x4e0(0x10)

	bool RequestUpdateMaxAmmoCount(int32_t InMaxAmmo, bool bIgnoreAmmoCount); // Function Solarland.GridBulletContainer.RequestUpdateMaxAmmoCount // (Final|Native|Public|BlueprintCallable) // @ game+0x26bdba0
	void ReceiveUpdateMaxAmmoEvent(int32_t InMaxAmmo); // Function Solarland.GridBulletContainer.ReceiveUpdateMaxAmmoEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x26bd920
	void ReceiveUpdateBulletEvent(int32_t ReservedAmmo, bool bIsReloading, bool bIsFirstIn); // Function Solarland.GridBulletContainer.ReceiveUpdateBulletEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x26bd800
	void ReceiveUpdateAllBulletEvent(); // Function Solarland.GridBulletContainer.ReceiveUpdateAllBulletEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1ad6d60
	void ReceiveReloadFinishEvent(bool bIsReloadSuccess); // Function Solarland.GridBulletContainer.ReceiveReloadFinishEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x26bd770
};

// Class Solarland.GyroscopeConfig
// Size: 0xf8 (Inherited: 0x30)
struct UGyroscopeConfig : UDataAsset {
	struct UDataTable* dataTab; // 0x30(0x08)
	struct UDataTable* gyroscopeSensitivityDataTab; // 0x38(0x08)
	struct UDataTable* GyroscopeDeviceModelDataTab; // 0x40(0x08)
	char pad_48[0xb0]; // 0x48(0xb0)
};

// Class Solarland.HeroPickCharacterData
// Size: 0x70 (Inherited: 0x28)
struct UHeroPickCharacterData : UObject {
	int32_t CharacterId; // 0x28(0x04)
	int32_t SkinId; // 0x2c(0x04)
	int32_t CharacterProficiencyLevel; // 0x30(0x04)
	int32_t CharacterOwnerType; // 0x34(0x04)
	char pad_38[0x8]; // 0x38(0x08)
	enum class EHeroOwnedType OwnType; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	int32_t ConfigSortNum; // 0x44(0x04)
	struct FString HeroName; // 0x48(0x10)
	struct TArray<int32_t> SelectedPlayerPos; // 0x58(0x10)
	int32_t ConfirmPos; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Solarland.HeroPickCharacterCell
// Size: 0x410 (Inherited: 0x400)
struct UHeroPickCharacterCell : USolarUserWidget {
	struct UHeroPickCharacterData* DataObj; // 0x400(0x08)
	char pad_408[0x8]; // 0x408(0x08)

	void UpdateHeroIconAndName(struct FString Name, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.HeroPickCharacterCell.UpdateHeroIconAndName // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void ShowSelecting(bool bShow); // Function Solarland.HeroPickCharacterCell.ShowSelecting // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void ShowConfirm(); // Function Solarland.HeroPickCharacterCell.ShowConfirm // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetSelect(int32_t PosInTeam); // Function Solarland.HeroPickCharacterCell.SetSelect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetProficiencyTypeIcon(int32_t ProficiencyLevel); // Function Solarland.HeroPickCharacterCell.SetProficiencyTypeIcon // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetClassTypeIcon(struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.HeroPickCharacterCell.SetClassTypeIcon // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetCharacterOwnerType(int32_t CharacterOwnerType); // Function Solarland.HeroPickCharacterCell.SetCharacterOwnerType // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void ClearSelect(); // Function Solarland.HeroPickCharacterCell.ClearSelect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void BP_ShowLockState(enum class EUIHeroPickListCellState UiState); // Function Solarland.HeroPickCharacterCell.BP_ShowLockState // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HeroPickDetail
// Size: 0x400 (Inherited: 0x400)
struct UHeroPickDetail : USolarUserWidget {

	void UpdateCharacterDetails(int32_t CharacterId); // Function Solarland.HeroPickDetail.UpdateCharacterDetails // (Final|Native|Public|BlueprintCallable) // @ game+0x26bddf0
	void RefreshSkillInfo(int32_t SkillType, struct FString Attribute, struct FString SkillName, struct FString SkillDescription, struct TSoftObjectPtr<UTexture2D>& SkillIcon); // Function Solarland.HeroPickDetail.RefreshSkillInfo // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HeroPickInfo
// Size: 0x288 (Inherited: 0x228)
struct AHeroPickInfo : AInfo {
	struct FString TeamName; // 0x228(0x10)
	struct FMulticastInlineDelegate HeroRequestDelegate; // 0x238(0x10)
	enum class EHeroPickType HeroPickType; // 0x248(0x01)
	char pad_249[0x3]; // 0x249(0x03)
	int32_t TeammateNumMode; // 0x24c(0x04)
	struct UHeroPickWidget* HeroPickWidget; // 0x250(0x08)
	struct TArray<struct FPlayerSelectInfo> PlayerSelectInfos; // 0x258(0x10)
	float HeroPickTime; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	float WaitingToStartTime; // 0x270(0x04)
	int32_t CurrentPickPlayerIndex; // 0x274(0x04)
	float Duration; // 0x278(0x04)
	char pad_27C[0xc]; // 0x27c(0x0c)

	void ShowHeroPickView(); // Function Solarland.HeroPickInfo.ShowHeroPickView // (Final|Native|Private) // @ game+0x26bdd20
	void OnRep_WaitingToStartTime(); // Function Solarland.HeroPickInfo.OnRep_WaitingToStartTime // (Final|Native|Private) // @ game+0x9043b0
	void OnRep_SelectPlayerChange(); // Function Solarland.HeroPickInfo.OnRep_SelectPlayerChange // (Final|Native|Private) // @ game+0x26bd690
	void OnRep_PlayerSelectInfos(); // Function Solarland.HeroPickInfo.OnRep_PlayerSelectInfos // (Final|Native|Private) // @ game+0x26bd670
	void OnRep_HeroPickTime(); // Function Solarland.HeroPickInfo.OnRep_HeroPickTime // (Final|Native|Private) // @ game+0x9043b0
	void OnGameStart(); // Function Solarland.HeroPickInfo.OnGameStart // (Final|Native|Public) // @ game+0x26bd630
	void NetMulticastHeroRequest(int32_t PlayPos, int32_t CharacterId); // Function Solarland.HeroPickInfo.NetMulticastHeroRequest // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x26bd560
	bool HasConfirmInPos(int32_t Pos); // Function Solarland.HeroPickInfo.HasConfirmInPos // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x26bd3f0
};

// Class Solarland.HeroPickManager
// Size: 0x2f8 (Inherited: 0x228)
struct AHeroPickManager : AGameManagerBase {
	struct FMulticastSparseDelegate OnAllPlayersGotoPickHero; // 0x228(0x01)
	char pad_229[0x17]; // 0x229(0x17)
	struct TArray<struct AHeroPickInfo*> HeroPickArray; // 0x240(0x10)
	struct TArray<struct AHeroPickInfo*> PendingRemoveHeroPickArray; // 0x250(0x10)
	bool EnableLimitPickTime; // 0x260(0x01)
	bool UseOpeningTransitionAnimation; // 0x261(0x01)
	bool StartSkinUIAtTheBeginning; // 0x262(0x01)
	char pad_263[0x1]; // 0x263(0x01)
	float HeroPickTime; // 0x264(0x04)
	float TransitionAnimTime; // 0x268(0x04)
	float WaitingToStartTime; // 0x26c(0x04)
	float WaitingForEndTime; // 0x270(0x04)
	char pad_274[0x4]; // 0x274(0x04)
	struct UHeroPickRuleBase* AIPickRule; // 0x278(0x08)
	float HeroRequestDuration; // 0x280(0x04)
	char pad_284[0x4]; // 0x284(0x04)
	struct TArray<struct FSoftObjectPath> ElementLevels; // 0x288(0x10)
	bool bIsAllPlayerSelecting; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct TMap<struct FName, struct ULevelStreamingDynamic*> AllLevelMap; // 0x2a0(0x50)
	char pad_2F0[0x8]; // 0x2f0(0x08)

	bool TeamBeginHeroPick(struct FString TeamName); // Function Solarland.HeroPickManager.TeamBeginHeroPick // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x26bdd40
	void SetHeroPickTime(float InHeroPickTime); // Function Solarland.HeroPickManager.SetHeroPickTime // (Final|Native|Public|BlueprintCallable) // @ game+0x26bdc70
	void ReceiveTeamPickHeroEnd(struct FString TeamName); // Function Solarland.HeroPickManager.ReceiveTeamPickHeroEnd // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveAllHeroPickEnd(); // Function Solarland.HeroPickManager.ReceiveAllHeroPickEnd // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	bool PlayerBeginHeroPick(struct ASolarPlayerState* Player); // Function Solarland.HeroPickManager.PlayerBeginHeroPick // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x26bd6d0
	void OnLevelLoaded(); // Function Solarland.HeroPickManager.OnLevelLoaded // (Final|Native|Public) // @ game+0x26bd650
	void On_RepAllPlayerSelectEnd(); // Function Solarland.HeroPickManager.On_RepAllPlayerSelectEnd // (Final|Native|Protected) // @ game+0x26bd6b0
	void AllPlayersGotoPickHero(); // Function Solarland.HeroPickManager.AllPlayersGotoPickHero // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x26bceb0
};

// Class Solarland.HeroPickPlayerSlot
// Size: 0x420 (Inherited: 0x400)
struct UHeroPickPlayerSlot : USolarUserWidget {
	char pad_400[0x18]; // 0x400(0x18)
	enum class EUIHeroPickPlayerState UiState; // 0x418(0x01)
	char pad_419[0x7]; // 0x419(0x07)

	void UpdateSelectPercent(float Percent); // Function Solarland.HeroPickPlayerSlot.UpdateSelectPercent // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void UpdateIconAndName(struct FString HeroName, int32_t HeroExpLevel, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.HeroPickPlayerSlot.UpdateIconAndName // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void ShowConfirm(); // Function Solarland.HeroPickPlayerSlot.ShowConfirm // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetPlayerPos(struct FString playerName, char InPosInTeam); // Function Solarland.HeroPickPlayerSlot.SetPlayerPos // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void CloseHeroRequest(); // Function Solarland.HeroPickPlayerSlot.CloseHeroRequest // (Final|Native|Public) // @ game+0x26bced0
	void ChangeUIStage(enum class EUIHeroPickPlayerState State); // Function Solarland.HeroPickPlayerSlot.ChangeUIStage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void BP_ShowHeroRequest(struct FString HeroName); // Function Solarland.HeroPickPlayerSlot.BP_ShowHeroRequest // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void BP_CloseHeroRequest(); // Function Solarland.HeroPickPlayerSlot.BP_CloseHeroRequest // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HeroPickRuleBase
// Size: 0x28 (Inherited: 0x28)
struct UHeroPickRuleBase : UObject {
};

// Class Solarland.HeroPickSlot
// Size: 0x418 (Inherited: 0x400)
struct UHeroPickSlot : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct UHeroPickCharacterCell* HeroPickCharacterCell; // 0x408(0x08)
	struct UHeroPickCharacterData* HeroPickCharacterData; // 0x410(0x08)

	struct UHeroPickCharacterCell* GetHeroPickCharacterCell(); // Function Solarland.HeroPickSlot.GetHeroPickCharacterCell // (Final|Native|Public|Const) // @ game+0x26bd2b0
};

// Class Solarland.HeroPickWidget
// Size: 0x4a8 (Inherited: 0x400)
struct UHeroPickWidget : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct AHeroPickInfo* PickInfo; // 0x408(0x08)
	struct UTileView* CharacterList; // 0x410(0x08)
	struct TArray<struct UHeroPickPlayerSlot*> PlayerSlots; // 0x418(0x10)
	struct TMap<int32_t, struct UHeroPickCharacterData*> SelectDataMap; // 0x428(0x50)
	char pad_478[0x18]; // 0x478(0x18)
	struct UHeroPickDetail* UI_HeroPick_Detail; // 0x490(0x08)
	int32_t CurrentSelectCharacterID; // 0x498(0x04)
	bool Enable3DLayout; // 0x49c(0x01)
	bool HasTimelineDisplay; // 0x49d(0x01)
	bool UseOpeningTransitionAnimation; // 0x49e(0x01)
	bool StartSkinUIAtTheBeginning; // 0x49f(0x01)
	char pad_4A0[0x8]; // 0x4a0(0x08)

	void TryToEnableHeroRequest(); // Function Solarland.HeroPickWidget.TryToEnableHeroRequest // (Final|Native|Public) // @ game+0x26c1b60
	void ShowPlayerConfirm(int32_t Pos); // Function Solarland.HeroPickWidget.ShowPlayerConfirm // (Final|Native|Protected|BlueprintCallable) // @ game+0x26c1ad0
	void ShowMyTurn(bool bShow); // Function Solarland.HeroPickWidget.ShowMyTurn // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void ShowMainUICharacter(bool bShow); // Function Solarland.HeroPickWidget.ShowMainUICharacter // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void ShowHeroRequest(int32_t Pos, int32_t CharacterId); // Function Solarland.HeroPickWidget.ShowHeroRequest // (Final|Native|Public) // @ game+0x26c1a00
	void SetMidCharacterNameAndIcon(int32_t InCharacterId, int32_t SkinId); // Function Solarland.HeroPickWidget.SetMidCharacterNameAndIcon // (Final|Native|Protected) // @ game+0x26c17a0
	void SetHeroHPAndSpeed(int32_t HP, int32_t Speed); // Function Solarland.HeroPickWidget.SetHeroHPAndSpeed // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void SetHeroFeatures(struct TArray<int32_t>& InHeroFeatures); // Function Solarland.HeroPickWidget.SetHeroFeatures // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void SetEnableRequestHero(bool Enable); // Function Solarland.HeroPickWidget.SetEnableRequestHero // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetEnabledCountdownDisplay(bool Enable); // Function Solarland.HeroPickWidget.SetEnabledCountdownDisplay // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void SetCountDownText(struct FString Text); // Function Solarland.HeroPickWidget.SetCountDownText // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetClassNameAndIcon(struct FString ClassName, struct TSoftObjectPtr<UTexture2D>& ClassIcon); // Function Solarland.HeroPickWidget.SetClassNameAndIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void SetCharacterNameAndIcon(struct FString Name, struct FString SkinName, struct TSoftObjectPtr<UTexture2D>& CharacterIcon); // Function Solarland.HeroPickWidget.SetCharacterNameAndIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ServerHeroRequest(); // Function Solarland.HeroPickWidget.ServerHeroRequest // (Final|Native|Protected|BlueprintCallable) // @ game+0x26c16f0
	void RefreshTacticalSkillIcon(struct TSoftObjectPtr<UTexture2D>& TacticalSkillIcon); // Function Solarland.HeroPickWidget.RefreshTacticalSkillIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void RefreshSuperSkillIcon(struct TSoftObjectPtr<UTexture2D>& SuperSkillIcon); // Function Solarland.HeroPickWidget.RefreshSuperSkillIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void RefreshPassiveSKillIcon(struct TSoftObjectPtr<UTexture2D>& PassiveSkillIcon); // Function Solarland.HeroPickWidget.RefreshPassiveSKillIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void PlayCharacterConfirmVoice(int32_t SkinId); // Function Solarland.HeroPickWidget.PlayCharacterConfirmVoice // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnGameStateSet(struct AGameStateBase* GameState); // Function Solarland.HeroPickWidget.OnGameStateSet // (Final|Native|Protected) // @ game+0x26c13f0
	bool HasEnableABTestHeroPick(); // Function Solarland.HeroPickWidget.HasEnableABTestHeroPick // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x2d0d160
	int32_t GetTeammateNumMode(); // Function Solarland.HeroPickWidget.GetTeammateNumMode // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x26c1220
	struct UHeroPickCharacterData* FindCharacterListData(int32_t CharacterId); // Function Solarland.HeroPickWidget.FindCharacterListData // (Final|Native|Protected) // @ game+0x26c1180
	void Enable3DHeroPickLayout(bool Enalbe3DLayout); // Function Solarland.HeroPickWidget.Enable3DHeroPickLayout // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void Display3DHeroSelectedAnim(int32_t CharacterId, int32_t SkinId, bool IsConfirm); // Function Solarland.HeroPickWidget.Display3DHeroSelectedAnim // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ConfirmSelect(); // Function Solarland.HeroPickWidget.ConfirmSelect // (Final|Native|Protected|BlueprintCallable) // @ game+0x26c1160
	void BP_OnSelfConfirmSelected(); // Function Solarland.HeroPickWidget.BP_OnSelfConfirmSelected // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HeroReplaceSlot
// Size: 0x418 (Inherited: 0x400)
struct UHeroReplaceSlot : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct UHeroPickCharacterCell* HeroPickCharacterCell; // 0x408(0x08)
	struct UHeroPickCharacterData* HeroPickCharacterData; // 0x410(0x08)

	struct UHeroPickCharacterCell* GetHeroPickCharacterCell(); // Function Solarland.HeroReplaceSlot.GetHeroPickCharacterCell // (Final|Native|Public|Const) // @ game+0x26bd2b0
};

// Class Solarland.HeroReplaceWidget
// Size: 0x498 (Inherited: 0x400)
struct UHeroReplaceWidget : USolarUserWidget {
	struct UTileView* TileView_ReplaceHeros; // 0x400(0x08)
	char pad_408[0x8]; // 0x408(0x08)
	struct ASolarTeamInfo* TeamInfo; // 0x410(0x08)
	struct TArray<struct UHeroPickCharacterData*> CharactersArray; // 0x418(0x10)
	struct TMap<uint64_t, struct FPlayerSelection> PlayerSelectionDataMap; // 0x428(0x50)
	struct UScrollBox* ScrollBox; // 0x478(0x08)
	int32_t CurrentSelectedCharacterID; // 0x480(0x04)
	char pad_484[0x4]; // 0x484(0x04)
	struct FString OnHeroClickedAkEventName; // 0x488(0x10)

	void UpdateConfirmButtonState(bool bButtonIsEnabled); // Function Solarland.HeroReplaceWidget.UpdateConfirmButtonState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void UpdateCharacterInfo(int32_t CharacterId); // Function Solarland.HeroReplaceWidget.UpdateCharacterInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x26c1c10
	void UpdateCharacterDetails(int32_t CharacterId); // Function Solarland.HeroReplaceWidget.UpdateCharacterDetails // (Final|Native|Public|BlueprintCallable) // @ game+0x26c1b80
	void SetHeroFeatures(struct TArray<int32_t>& InHeroFeatures); // Function Solarland.HeroReplaceWidget.SetHeroFeatures // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void SetClassNameAndIcon(struct FString ClassName, struct TSoftObjectPtr<UTexture2D>& ClassIcon); // Function Solarland.HeroReplaceWidget.SetClassNameAndIcon // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void SetCharacterName(struct FString Name); // Function Solarland.HeroReplaceWidget.SetCharacterName // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RefreshSkillInfo(int32_t SkillType, struct FString Attribute, struct FString SkillName, struct FString SkillDescription, struct TSoftObjectPtr<UTexture2D>& SkillIcon); // Function Solarland.HeroReplaceWidget.RefreshSkillInfo // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnTeamMemberChanged(struct ASolarTeamInfo* NewTeamInfo, struct ASolarPlayerState* PlayerState); // Function Solarland.HeroReplaceWidget.OnTeamMemberChanged // (Final|Native|Public) // @ game+0x26c1550
	void OnTeammateCharacterIdChanged(int32_t NewCharacterID, char PosInTeam); // Function Solarland.HeroReplaceWidget.OnTeammateCharacterIdChanged // (Final|Native|Public) // @ game+0x26c1620
	void OnTeamChanged(); // Function Solarland.HeroReplaceWidget.OnTeamChanged // (Final|Native|Public) // @ game+0x26c1530
	void OnConfirmButtonClicked(); // Function Solarland.HeroReplaceWidget.OnConfirmButtonClicked // (Final|Native|Public|BlueprintCallable) // @ game+0x26c13d0
	void OnCharacterSelectionChanged(struct UObject* Item, bool bIsSelected); // Function Solarland.HeroReplaceWidget.OnCharacterSelectionChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x26c12e0
	void OnAnyPlayerStatePosInTeamChanged(struct ASolarPlayerState* SolarPlayerState); // Function Solarland.HeroReplaceWidget.OnAnyPlayerStatePosInTeamChanged // (Final|Native|Public) // @ game+0x26c1250
};

// Class Solarland.HitSoundSubsystem
// Size: 0x38 (Inherited: 0x30)
struct UHitSoundSubsystem : UWorldSubsystem {
	struct UDataTable* HitSoundTable; // 0x30(0x08)
};

// Class Solarland.HitSoundSubsystemSettings
// Size: 0xb0 (Inherited: 0x38)
struct UHitSoundSubsystemSettings : UDeveloperSettings {
	struct TSoftObjectPtr<UDataTable> HitSoundTable; // 0x38(0x28)
	struct FSoundGroupHitSoundWwiseParams HitSoundWwiseParams; // 0x60(0x40)
	struct FName ShieldBrokenShouldGroup; // 0xa0(0x08)
	struct FName HitDownSoundGroup; // 0xa8(0x08)
};

// Class Solarland.HitTracesWidget
// Size: 0x6f0 (Inherited: 0x400)
struct UHitTracesWidget : USolarUserWidget {
	struct UMeshRectangleWidget* MeshWidget_HitTrace; // 0x400(0x08)
	struct FHitTraceMeshWidgetData EditorMeshWidgetData; // 0x408(0x3c)
	char pad_444[0x4]; // 0x444(0x04)
	struct TMap<enum class EHitTraceType, char> IconIndexMap; // 0x448(0x50)
	struct TMap<enum class EHitTraceType, char> ColorIndexMap; // 0x498(0x50)
	char MaxCount; // 0x4e8(0x01)
	char VehicleAngleOffset; // 0x4e9(0x01)
	char pad_4EA[0x6]; // 0x4ea(0x06)
	struct TMap<enum class EHitTraceType, float> LiveTimeMap; // 0x4f0(0x50)
	struct TMap<enum class EHitTraceType, struct UCurveFloat*> OpacityMap; // 0x540(0x50)
	struct TMap<enum class EHitTraceType, float> DefaultRadiusMap; // 0x590(0x50)
	struct TMap<enum class EHitTraceType, struct UCurveFloat*> RadiusMap; // 0x5e0(0x50)
	struct TMap<enum class EHitTraceType, int32_t> MaxLengthMap; // 0x630(0x50)
	struct TMap<enum class EHitTraceType, struct UCurveFloat*> LengthMap; // 0x680(0x50)
	char pad_6D0[0x20]; // 0x6d0(0x20)

	void OnHitTraceAdded(struct FHitTraceInfo& InInfo); // Function Solarland.HitTracesWidget.OnHitTraceAdded // (Final|Native|Public|HasOutParms) // @ game+0x26c1480
	void OnClearAllHitTraces(); // Function Solarland.HitTracesWidget.OnClearAllHitTraces // (Final|Native|Public) // @ game+0x26c13b0
};

// Class Solarland.SolarCharacterMovementCompBase
// Size: 0x6a0 (Inherited: 0x620)
struct USolarCharacterMovementCompBase : UCharacterMovementComponent {
	float SimStepOptimizedDist; // 0x618(0x04)
	char pad_624[0x2c]; // 0x624(0x2c)
	int32_t TimeDiscrepancyUploadThres; // 0x650(0x04)
	char pad_654[0x4]; // 0x654(0x04)
	struct FSolarClientAdjustPositionInfo CachedClientAdjustPositionInfo; // 0x658(0x38)
	char pad_690[0x10]; // 0x690(0x10)
};

// Class Solarland.SolarCharacterMovementComponent
// Size: 0xa10 (Inherited: 0x6a0)
struct USolarCharacterMovementComponent : USolarCharacterMovementCompBase {
	char pad_6A0[0x18]; // 0x6a0(0x18)
	struct ASolarCharacter* SolarCharacterOwner; // 0x6b8(0x08)
	float DefaultUnscaledCapsuleHalfHeight; // 0x6c0(0x04)
	float DefaultLazyRefreshBonesDelay; // 0x6c4(0x04)
	char pad_6C8[0x20]; // 0x6c8(0x20)
	bool bKeepWalkSpeedOnTurning; // 0x6e8(0x01)
	char pad_6E9[0x3]; // 0x6e9(0x03)
	float MinJogSpeedScaleOnBlocked; // 0x6ec(0x04)
	float MinRunSpeedScaleOnBlocked; // 0x6f0(0x04)
	float MinSprintSpeedScaleOnBlocked; // 0x6f4(0x04)
	float MinCrawlSpeedScaleOnBlocked; // 0x6f8(0x04)
	float MinSwimSpeedScaleOnBlocked; // 0x6fc(0x04)
	float MinAccelerationProjectRatioForValidGroundSlide; // 0x700(0x04)
	bool bOverrideFallingGravity; // 0x704(0x01)
	char pad_705[0x3]; // 0x705(0x03)
	float OverriddenFallingGravity; // 0x708(0x04)
	float FallingHorizontalSpeedUpperLimit; // 0x70c(0x04)
	float MaxLocationDifferenceToTrustClientMove; // 0x710(0x04)
	enum class EClientMoveTrustType ClientMoveTrustType; // 0x714(0x01)
	char pad_715[0x35]; // 0x715(0x35)
	enum class EAirMoveMode CurrentAirMoveMode; // 0x74a(0x01)
	enum class EAirMoveMode LastAirMoveMode; // 0x74b(0x01)
	char pad_74C[0x4]; // 0x74c(0x04)
	struct FCustomJumpParams CustomJumpParams; // 0x750(0x98)
	struct FCustomJumpParams CustomLaunchParams; // 0x7e8(0x98)
	char pad_880[0x10]; // 0x880(0x10)
	struct UJetPackConfig* JetPackConfig; // 0x890(0x08)
	char pad_898[0x34]; // 0x898(0x34)
	float HinderAngel; // 0x8cc(0x04)
	float HinderPercent; // 0x8d0(0x04)
	float HinderZ; // 0x8d4(0x04)
	float SwimSpeedWhenSprintLockConfig; // 0x8d8(0x04)
	float SwimSpeedConfig; // 0x8dc(0x04)
	float SwimSpeedSmoothSpeed; // 0x8e0(0x04)
	float SwimMaxFloatingUpSpeed; // 0x8e4(0x04)
	float SwimMaxSinkingSpeed; // 0x8e8(0x04)
	struct TWeakObjectPtr<struct APhysicsVolume> NextPhysicsVolume; // 0x8ec(0x08)
	char pad_8F4[0xc5]; // 0x8f4(0xc5)
	bool bWantDeathVerge; // 0x9b9(0x01)
	char pad_9BA[0x2]; // 0x9ba(0x02)
	float DeathVergeBodyRadius; // 0x9bc(0x04)
	float DeathVergeHalfHeight; // 0x9c0(0x04)
	char pad_9C4[0x4]; // 0x9c4(0x04)
	struct AActor* HangingTargetObj; // 0x9c8(0x08)
	struct FVector HangingTargetVelocity; // 0x9d0(0x0c)
	bool UseHangingTargetVelocity; // 0x9dc(0x01)
	bool UseHangingTargetPos; // 0x9dd(0x01)
	char pad_9DE[0x2]; // 0x9de(0x02)
	float SkywardFlyVerticalAcceleration; // 0x9e0(0x04)
	float MaxSkywardFlyHorizontalSpeed; // 0x9e4(0x04)
	float MaxSkywardFlyVerticalSpeed; // 0x9e8(0x04)
	float BrakingDecelerationSkywardFlying; // 0x9ec(0x04)
	float SkywardFlyLateralFriction; // 0x9f0(0x04)
	float SkywardFlyAirControl; // 0x9f4(0x04)
	float SkywardFlyAirControlBoostMultiplier; // 0x9f8(0x04)
	float SkywardFlyAirControlBoostVelocityThreshold; // 0x9fc(0x04)
	float HitHeadFallingVerticalSpeed; // 0xa00(0x04)
	float HitHeadVerticalDeceleration; // 0xa04(0x04)
	char pad_A08[0x8]; // 0xa08(0x08)

	void UpdateCharacterStateAfterMovement__DelegateSignature(struct USolarCharacterMovementComponent* MovementComponent, float DeltaTime); // DelegateFunction Solarland.SolarCharacterMovementComponent.UpdateCharacterStateAfterMovement__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void SetHinderZ(float InHinderZ); // Function Solarland.SolarCharacterMovementComponent.SetHinderZ // (Final|Native|Public|BlueprintCallable) // @ game+0x279aeb0
	void SetHinderAngel(float InHinderAngel); // Function Solarland.SolarCharacterMovementComponent.SetHinderAngel // (Final|Native|Public|BlueprintCallable) // @ game+0x279ae30
	void OnMovementBaseChanged(struct ACharacter* Character, struct UPrimitiveComponent* OldBase, struct UPrimitiveComponent* NewBase); // Function Solarland.SolarCharacterMovementComponent.OnMovementBaseChanged // (Final|Native|Protected) // @ game+0x279ac90
	void HinderUphill(struct FVector& SlopeNormal, struct FVector& MoveVelocity); // Function Solarland.SolarCharacterMovementComponent.HinderUphill // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x279aba0
	enum class EWalkMode GetLastWalkMode(); // Function Solarland.SolarCharacterMovementComponent.GetLastWalkMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x279ab80
	enum class EWalkMode GetCurrentWalkMode(); // Function Solarland.SolarCharacterMovementComponent.GetCurrentWalkMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x279ab60
	void ForcedJump(); // Function Solarland.SolarCharacterMovementComponent.ForcedJump // (Final|Native|Public|BlueprintCallable) // @ game+0x279ab40
};

// Class Solarland.HomeCharacterMovementComponent
// Size: 0xa80 (Inherited: 0xa10)
struct UHomeCharacterMovementComponent : USolarCharacterMovementComponent {
	char pad_A10[0x20]; // 0xa10(0x20)
	struct TArray<struct FServerMoveData> ServerMoves; // 0xa30(0x10)
	float NetSyncDeltaTime; // 0xa40(0x04)
	float VerifyDeltaTime; // 0xa44(0x04)
	float MaxDelayTime; // 0xa48(0x04)
	bool bEnableMove; // 0xa4c(0x01)
	char pad_A4D[0x13]; // 0xa4d(0x13)
	int64_t CurrentServerTime; // 0xa60(0x08)
	char pad_A68[0x4]; // 0xa68(0x04)
	float ConfigSyncDeltaTime; // 0xa6c(0x04)
	float ConfigVerifyStepTime; // 0xa70(0x04)
	int32_t ConfigMaxDelay; // 0xa74(0x04)
	float ConfigVerifyDistanceSquared; // 0xa78(0x04)
	char pad_A7C[0x4]; // 0xa7c(0x04)

	void SetVerifyRate(float InDeltaTime); // Function Solarland.HomeCharacterMovementComponent.SetVerifyRate // (Final|Native|Public|BlueprintCallable) // @ game+0x26c1980
	void SetNetSyncRate(float InDeltaTime); // Function Solarland.HomeCharacterMovementComponent.SetNetSyncRate // (Final|Native|Public|BlueprintCallable) // @ game+0x26c1900
	void SetMoveEnable(bool InMoveEnable); // Function Solarland.HomeCharacterMovementComponent.SetMoveEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x26c1870
	void SetMaxDelayTime(int32_t InMaxDelayTime); // Function Solarland.HomeCharacterMovementComponent.SetMaxDelayTime // (Final|Native|Public|BlueprintCallable) // @ game+0x26c1710
	void GetServerTimeNow(); // Function Solarland.HomeCharacterMovementComponent.GetServerTimeNow // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HomeSyncActorSubsystem
// Size: 0x38 (Inherited: 0x30)
struct UHomeSyncActorSubsystem : UWorldSubsystem {
	struct UDataTable* HomeObjectTable; // 0x30(0x08)

	struct UHomeSyncActorSubsystem* Get(struct UObject* WorldContextObject); // Function Solarland.HomeSyncActorSubsystem.Get // (Final|Native|Static|Public) // @ game+0x26c4270
	void CreateHomeActor_Server(struct FHomeActorServerData& CreateData); // Function Solarland.HomeSyncActorSubsystem.CreateHomeActor_Server // (Final|Native|Public|HasOutParms) // @ game+0x26c3fc0
};

// Class Solarland.HUD_ElectricShop
// Size: 0x530 (Inherited: 0x400)
struct UHUD_ElectricShop : USolarUserWidget {
	struct USolarButton* Btn_Close; // 0x400(0x08)
	struct UHorizontalBox* Panel_RefreshTime; // 0x408(0x08)
	struct UImage* Img_BG_02; // 0x410(0x08)
	struct USolarTextBlock* Txt_Time; // 0x418(0x08)
	struct UHorizontalBox* HorizontalBox_Title; // 0x420(0x08)
	struct UElectricShop_Weapon* UI_ElectricityShop_Weapon_2; // 0x428(0x08)
	struct UElectricShop_Weapon* UI_ElectricityShop_Weapon_3; // 0x430(0x08)
	struct UElectricShop_Weapon* UI_ElectricityShop_Shield; // 0x438(0x08)
	struct USolarListView* ListView_Goods; // 0x440(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x448(0x08)
	struct UWidgetAnimation* Text_Loop_Anim; // 0x450(0x08)
	struct UCanvasPanel* Panel_Passive; // 0x458(0x08)
	struct UCanvasPanel* Panel_VIP; // 0x460(0x08)
	struct UHUD_PassiveHead* UI_Passive_Head; // 0x468(0x08)
	struct UCanvasPanel* Panel_Bullet; // 0x470(0x08)
	struct USolarTextBlock* Txt_Passive; // 0x478(0x08)
	struct UHUD_PassiveHead* UI_Passive_Head_2; // 0x480(0x08)
	char pad_488[0x18]; // 0x488(0x18)
	struct FLinearColor TimeTextDefaultColor; // 0x4a0(0x10)
	struct FLinearColor TimeTextAlertColor; // 0x4b0(0x10)
	struct FString AkSoundShopShow; // 0x4c0(0x10)
	struct FString AkSoundShopHide; // 0x4d0(0x10)
	char PreloadListItemNum; // 0x4e0(0x01)
	char pad_4E1[0xf]; // 0x4e1(0x0f)
	struct TArray<struct UObject*> ShopItems; // 0x4f0(0x10)
	struct TArray<struct UElectricShop_Weapon*> WeaponUpgradePanels; // 0x500(0x10)
	char pad_510[0x20]; // 0x510(0x20)

	void UpdateItemIsRecommend(); // Function Solarland.HUD_ElectricShop.UpdateItemIsRecommend // (Final|Native|Protected) // @ game+0x26c5aa0
	void UpdateCountdownTime(); // Function Solarland.HUD_ElectricShop.UpdateCountdownTime // (Final|Native|Protected) // @ game+0x26c59b0
	void UpdateCharacterEnergy(float CurEnergy, float ChangeValue); // Function Solarland.HUD_ElectricShop.UpdateCharacterEnergy // (Final|Native|Protected) // @ game+0x26c58e0
	void UnBindDelegate(); // Function Solarland.HUD_ElectricShop.UnBindDelegate // (Final|Native|Protected) // @ game+0x26c57f0
	void SetSelfVisibility(bool bVisible); // Function Solarland.HUD_ElectricShop.SetSelfVisibility // (Final|Native|Protected) // @ game+0x26c5540
	void RequestUpgradeWeapon(struct ASolarPlayerWeapon* InWeapon); // Function Solarland.HUD_ElectricShop.RequestUpgradeWeapon // (Final|Native|Protected) // @ game+0x26c5420
	void RequestUpgradeShield(struct ASolarCharacter* InChara); // Function Solarland.HUD_ElectricShop.RequestUpgradeShield // (Final|Native|Protected) // @ game+0x26c5390
	void RequestPurchaseEShopItems(int32_t ProductID, bool IsRecommend); // Function Solarland.HUD_ElectricShop.RequestPurchaseEShopItems // (Final|Native|Protected) // @ game+0x26c52c0
	void ReceiveWeaponUpgrade(int32_t InWeaponSlot); // Function Solarland.HUD_ElectricShop.ReceiveWeaponUpgrade // (Final|Native|Protected) // @ game+0x26c5230
	void ReceiveShieldUpgrade(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_ElectricShop.ReceiveShieldUpgrade // (Final|Native|Protected) // @ game+0x26c51a0
	void PlayHUDSound(bool InVisibile); // Function Solarland.HUD_ElectricShop.PlayHUDSound // (Final|Native|Protected) // @ game+0x26c50f0
	void OnShopGoodsCreated(struct UUserWidget* InWidget); // Function Solarland.HUD_ElectricShop.OnShopGoodsCreated // (Final|Native|Protected) // @ game+0x26c4f40
	void OnInitElectricShop(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_ElectricShop.OnInitElectricShop // (Final|Native|Protected) // @ game+0x26c4cc0
	void OnElectricShopVisibilitySet(bool bVisible); // Function Solarland.HUD_ElectricShop.OnElectricShopVisibilitySet // (Final|Native|Protected) // @ game+0x26c4b60
	void OnClosePanel(); // Function Solarland.HUD_ElectricShop.OnClosePanel // (Final|Native|Protected) // @ game+0x26c4b40
	void InitWeaponUpgrade(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_ElectricShop.InitWeaponUpgrade // (Final|Native|Protected) // @ game+0x26c4760
	void InitShopItems(struct ASolarElectricShop* InShop); // Function Solarland.HUD_ElectricShop.InitShopItems // (Final|Native|Protected) // @ game+0x26c46d0
	void InitShieldUpgrade(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield); // Function Solarland.HUD_ElectricShop.InitShieldUpgrade // (Final|Native|Protected) // @ game+0x26c4570
	void InitElectricShopHUD(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_ElectricShop.InitElectricShopHUD // (Final|Native|Protected) // @ game+0x26c4380
	float GetSolarCharacterEnergy(); // Function Solarland.HUD_ElectricShop.GetSolarCharacterEnergy // (Final|Native|Protected) // @ game+0x26c4330
	struct ASolarCharacter* GetBuyerSolarCharacter(); // Function Solarland.HUD_ElectricShop.GetBuyerSolarCharacter // (Final|Native|Protected) // @ game+0x26c4300
	void DelayReportStatistic(); // Function Solarland.HUD_ElectricShop.DelayReportStatistic // (Final|Native|Protected) // @ game+0x26c4180
	void DelayInitWeaponUpgrade(); // Function Solarland.HUD_ElectricShop.DelayInitWeaponUpgrade // (Final|Native|Protected) // @ game+0x26c4160
	void DelayInitShopItems(); // Function Solarland.HUD_ElectricShop.DelayInitShopItems // (Final|Native|Protected) // @ game+0x26c4140
	bool CheckItemIsRecommendByID(int32_t ItemID); // Function Solarland.HUD_ElectricShop.CheckItemIsRecommendByID // (Final|Native|Protected) // @ game+0x26c3f20
	void BindDelegate(); // Function Solarland.HUD_ElectricShop.BindDelegate // (Final|Native|Protected) // @ game+0x26c3ec0
};

// Class Solarland.HUD_MarkDoppelganger
// Size: 0x420 (Inherited: 0x400)
struct UHUD_MarkDoppelganger : USolarUserWidget {
	struct UCanvasPanel* CanvasPanel_1; // 0x400(0x08)
	struct UDeathViewHPWidget* HPAndShield; // 0x408(0x08)
	float ZOffset; // 0x410(0x04)
	char pad_414[0xc]; // 0x414(0x0c)
};

// Class Solarland.HUD_MarkEnemyInfo
// Size: 0x510 (Inherited: 0x400)
struct UHUD_MarkEnemyInfo : USolarUserWidget {
	struct USolarTextBlock* Txt_Lvl; // 0x400(0x08)
	struct UDeathViewHPWidget* HPAndShield; // 0x408(0x08)
	struct UCanvasPanel* CanvasPanel_1; // 0x410(0x08)
	struct UWidgetAnimation* Anim_Exit; // 0x418(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x420(0x08)
	float UpdateVisibleInterval; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)
	struct UCurveFloat* DistaceToScaleCurve; // 0x430(0x08)
	struct TSet<struct AActor*> OcculusionIgnoreClasses; // 0x438(0x50)
	float MinDisplayHpValue; // 0x488(0x04)
	float HPGridUnit; // 0x48c(0x04)
	bool bShowDebug; // 0x490(0x01)
	char pad_491[0x7]; // 0x491(0x07)
	struct TArray<enum class EObjectTypeQuery> OccQueryTypes; // 0x498(0x10)
	struct TArray<struct FName> OcclusionCheckBones; // 0x4a8(0x10)
	struct UWidgetAnimation* Anim_Name_Exit; // 0x4b8(0x08)
	struct UWidgetAnimation* Anim_Name_Enter; // 0x4c0(0x08)
	struct USolarTextBlock* Txt_PlayerName; // 0x4c8(0x08)
	struct UHUD_ScanEffect* ScanEffectWidget; // 0x4d0(0x08)
	char pad_4D8[0x34]; // 0x4d8(0x34)
	float ZOffset; // 0x50c(0x04)

	void HideNameMark(); // Function Solarland.HUD_MarkEnemyInfo.HideNameMark // (Final|Native|Private) // @ game+0x26c4360
};

// Class Solarland.HUD_PassiveHead
// Size: 0x408 (Inherited: 0x400)
struct UHUD_PassiveHead : USolarUserWidget {
	struct UImage* img_Hero; // 0x400(0x08)
};

// Class Solarland.HUD_PickupPassive
// Size: 0x418 (Inherited: 0x400)
struct UHUD_PickupPassive : USolarUserWidget {
	struct USolarTextBlock* Txt_Bullet; // 0x400(0x08)
	struct UHUD_PassiveHead* UI_Passive_Head; // 0x408(0x08)
	char pad_410[0x8]; // 0x410(0x08)

	void OnTogglePickupList(bool bShow); // Function Solarland.HUD_PickupPassive.OnTogglePickupList // (Final|Native|Public) // @ game+0x26c5060
};

// Class Solarland.HUD_ScanEffect
// Size: 0x438 (Inherited: 0x400)
struct UHUD_ScanEffect : USolarUserWidget {
	struct UWidgetAnimation* Anim_Scan; // 0x400(0x08)
	struct UWidgetAnimation* Anim_FadeOut; // 0x408(0x08)
	struct FString ScanSound; // 0x410(0x10)
	float MinAnimLength; // 0x420(0x04)
	struct FName BoneName; // 0x424(0x08)
	char pad_42C[0xc]; // 0x42c(0x0c)
};

// Class Solarland.HUD_SkydiveScale
// Size: 0x360 (Inherited: 0x260)
struct UHUD_SkydiveScale : UUserWidget {
	char pad_260[0x10]; // 0x260(0x10)
	struct UProgressBar* ProgressBar_Speed; // 0x270(0x08)
	struct UCanvasPanel* AltitudeDisplayAxis; // 0x278(0x08)
	struct UHorizontalBox* AltitudeDisplayBox; // 0x280(0x08)
	struct UCanvasPanel* SpeedDisplayAxis; // 0x288(0x08)
	struct UHorizontalBox* SpeedDisplayBox; // 0x290(0x08)
	struct UCanvasPanel* GroundDisplayAxis; // 0x298(0x08)
	struct UImage* GroundAltitudeScale; // 0x2a0(0x08)
	struct FVector2D AltitudeWidgetAngleRange; // 0x2a8(0x08)
	struct FVector2D SpeedWidgetAngleRange; // 0x2b0(0x08)
	float MinSpeed; // 0x2b8(0x04)
	float MaxSpeed; // 0x2bc(0x04)
	struct FWrappedLocalTextID AltitudeLocalTextID; // 0x2c0(0x04)
	struct FWrappedLocalTextID SpeedLocalTextID; // 0x2c4(0x04)
	char pad_2C8[0x8]; // 0x2c8(0x08)
	float AerialReconnaissanceRadius; // 0x2d0(0x04)
	float AerialReconnaissanceInterval; // 0x2d4(0x04)
	struct UAerialReconnaissanceMarkWidget* AerialReconnaissanceMarkWidgetClass; // 0x2d8(0x08)
	struct TMap<enum class ESlateDetailMode, struct FSolarAerialReconnaissanceConfig> AerialReconnaissanceConfigMap; // 0x2e0(0x50)
	struct UCanvasPanel* MarkPanel; // 0x330(0x08)
	char pad_338[0x28]; // 0x338(0x28)

	void UpdateSpeedScale(float InSpeed); // Function Solarland.HUD_SkydiveScale.UpdateSpeedScale // (Final|Native|Protected) // @ game+0x26c5d30
	void UpdateSpeedDisplayContent(struct FText& Content); // Function Solarland.HUD_SkydiveScale.UpdateSpeedDisplayContent // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void UpdateAltitudeScale(float InHeight, float InZValue); // Function Solarland.HUD_SkydiveScale.UpdateAltitudeScale // (Final|Native|Protected) // @ game+0x26c5810
	void UpdateAltitudeDisplayContent(struct FText& Content); // Function Solarland.HUD_SkydiveScale.UpdateAltitudeDisplayContent // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnSkydiveStateChanged(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_SkydiveScale.OnSkydiveStateChanged // (Final|Native|Protected) // @ game+0x26c4fd0
	void OnCharacterDied(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_SkydiveScale.OnCharacterDied // (Final|Native|Protected) // @ game+0x26c4870
	void OnAirlineHeightSet(float NewHeight); // Function Solarland.HUD_SkydiveScale.OnAirlineHeightSet // (Final|Native|Protected) // @ game+0x26c47f0
	void K2_OnSkydiveStateChanged(bool bInFly, bool bHasPassiveSkill); // Function Solarland.HUD_SkydiveScale.K2_OnSkydiveStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HUD_Teammate_Profession
// Size: 0x278 (Inherited: 0x260)
struct UHUD_Teammate_Profession : UUserWidget {
	struct USizeBox* SizeBox_Profession; // 0x260(0x08)
	struct UImage* Image_216; // 0x268(0x08)
	struct UImage* Icon; // 0x270(0x08)

	void SetState(enum class ESkillStateType InState); // Function Solarland.HUD_Teammate_Profession.SetState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HUD_Teammate_State
// Size: 0x6f0 (Inherited: 0x400)
struct UHUD_Teammate_State : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct USizeBox* SizeBox_Relive; // 0x408(0x08)
	struct UImage* img_Relive; // 0x410(0x08)
	struct UImage* Img_State; // 0x418(0x08)
	struct USizeBox* SizeBox_Container; // 0x420(0x08)
	struct UCanvasPanel* CanvasPanel_Container; // 0x428(0x08)
	struct UCanvasPanel* Panel_Loading; // 0x430(0x08)
	struct UImage* Img_Loading; // 0x438(0x08)
	struct UImage* Img_PlayerBG; // 0x440(0x08)
	struct UOverlay* HP; // 0x448(0x08)
	struct UOverlay* Armor; // 0x450(0x08)
	struct USolarShieldProgressBoard* AdvBar_Shield; // 0x458(0x08)
	struct USolarHPProgressBoard* AdvBar_HP; // 0x460(0x08)
	struct USolarTextBlock* Txt_Lvl; // 0x468(0x08)
	struct UImage* Img_Head; // 0x470(0x08)
	struct UScaleBox* ScaleBox_NickName; // 0x478(0x08)
	struct UTextBlock* Text_NickName; // 0x480(0x08)
	struct UImage* Img_Tip_MarkedPoint; // 0x488(0x08)
	struct UHorizontalBox* HorizontalBox_States; // 0x490(0x08)
	struct UImage* Img_Icon_AppDeactivatedOrOffline; // 0x498(0x08)
	struct UImage* Img_OutGame; // 0x4a0(0x08)
	struct USizeBox* SizeBox_Vehicle; // 0x4a8(0x08)
	struct UImage* Img_Icon_Vehicle; // 0x4b0(0x08)
	struct UUIComponentNationalFlag* UI_Component_NationalFlag; // 0x4b8(0x08)
	struct UUIInputDevice* UI_Input_Device; // 0x4c0(0x08)
	struct UWidgetAnimation* Enter_Relive_Anim; // 0x4c8(0x08)
	struct UWidgetAnimation* Loop_Relive_Anim; // 0x4d0(0x08)
	struct UWidgetAnimation* CD_Relive_Anim; // 0x4d8(0x08)
	struct UWidgetAnimation* Anim_Help_Loop; // 0x4e0(0x08)
	struct UWidgetAnimation* Anim_Remind_Loop; // 0x4e8(0x08)
	struct UWidgetAnimation* Anim_State_Loop; // 0x4f0(0x08)
	struct UOverlay* Overlay_Countdown; // 0x4f8(0x08)
	struct UImage* Progress_ResurrectionCD; // 0x500(0x08)
	struct UImage* Progress_RecyclingResurrection; // 0x508(0x08)
	struct UImage* Img_KillLeader; // 0x510(0x08)
	struct UCanvasPanel* Panel_ResurrectTime; // 0x518(0x08)
	struct UTextBlock* Txt_ResurrectTime; // 0x520(0x08)
	char IndexInTeam; // 0x528(0x01)
	char ReliveState; // 0x529(0x01)
	char pad_52A[0x2]; // 0x52a(0x02)
	int32_t Profession; // 0x52c(0x04)
	float MinDisplayHpValue; // 0x530(0x04)
	bool bIgnoreSelfAction; // 0x534(0x01)
	char pad_535[0x3]; // 0x535(0x03)
	float FireAnimLoopSpeed; // 0x538(0x04)
	float FireAnimEndSpeed; // 0x53c(0x04)
	float FireAnimDelayTime; // 0x540(0x04)
	char pad_544[0xc]; // 0x544(0x0c)
	struct TArray<struct FSlateBrush> ReliveStateImages; // 0x550(0x10)
	struct TMap<char, struct FLinearColor> PosInTeamColor; // 0x560(0x50)
	char pad_5B0[0x80]; // 0x5b0(0x80)
	bool bState_Self; // 0x630(0x01)
	char pad_631[0x1f]; // 0x631(0x1f)
	struct UWidgetAnimation* Armor_Light_Anim; // 0x650(0x08)
	struct FLinearColor HPBarColorNormal; // 0x658(0x10)
	struct FLinearColor HPBarColorDying; // 0x668(0x10)
	struct TMap<int32_t, struct FLinearColor> ShieldNumColorByQuality; // 0x678(0x50)
	char pad_6C8[0x18]; // 0x6c8(0x18)
	int32_t PrevLevel; // 0x6e0(0x04)
	float PrevExpRatio; // 0x6e4(0x04)
	int32_t CurrentLevel; // 0x6e8(0x04)
	float CurrentExpRatio; // 0x6ec(0x04)

	void WrappedOnLevelAndExpChanged(int32_t NewLevel, float NewExpRatio); // Function Solarland.HUD_Teammate_State.WrappedOnLevelAndExpChanged // (Final|Native|Protected) // @ game+0x26c5db0
	void UpdateShieldValue(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState RechargeState, bool bFixPreAdd); // Function Solarland.HUD_Teammate_State.UpdateShieldValue // (Final|Native|Public) // @ game+0x26c5b40
	void UpdateShieldMaxValue(float MaxShieldValue); // Function Solarland.HUD_Teammate_State.UpdateShieldMaxValue // (Final|Native|Public) // @ game+0x26c5ac0
	void UpdateHPBar(float InCurHealth, float InMaxHealth); // Function Solarland.HUD_Teammate_State.UpdateHPBar // (Final|Native|Public) // @ game+0x26c59d0
	void StopHelpAnimation(); // Function Solarland.HUD_Teammate_State.StopHelpAnimation // (Final|Native|Protected|BlueprintCallable) // @ game+0x26c57d0
	void ShowShieldUI(bool bIsShow); // Function Solarland.HUD_Teammate_State.ShowShieldUI // (Final|Native|Public) // @ game+0x26c5740
	void SetTextNickName(struct FString InNickName); // Function Solarland.HUD_Teammate_State.SetTextNickName // (Final|Native|Public|BlueprintCallable) // @ game+0x26c56a0
	void SetTeamPosForSelf(int32_t Pos); // Function Solarland.HUD_Teammate_State.SetTeamPosForSelf // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetTeammatePosAndColor(char InPosInTeam, bool bNormalState); // Function Solarland.HUD_Teammate_State.SetTeammatePosAndColor // (Final|Native|Public|BlueprintCallable) // @ game+0x26c55d0
	void SetIsDead(bool bDead); // Function Solarland.HUD_Teammate_State.SetIsDead // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void SetHPColor(struct FLinearColor& InHPBarColor); // Function Solarland.HUD_Teammate_State.SetHPColor // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x26c54b0
	void SetHelpState(int32_t InState); // Function Solarland.HUD_Teammate_State.SetHelpState // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void SetActionState(int32_t InState); // Function Solarland.HUD_Teammate_State.SetActionState // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ResetLevelAndExpDisplayToCurrent(); // Function Solarland.HUD_Teammate_State.ResetLevelAndExpDisplayToCurrent // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void PlayHelpAnimation(); // Function Solarland.HUD_Teammate_State.PlayHelpAnimation // (Final|Native|Protected|BlueprintCallable) // @ game+0x26c5180
	void OnShieldUpgradeAnimFinished(); // Function Solarland.HUD_Teammate_State.OnShieldUpgradeAnimFinished // (Final|Native|Protected) // @ game+0x9043b0
	void OnReviveItemRecycleCountDownBegin(int32_t CurrentTime, int32_t DurationTime); // Function Solarland.HUD_Teammate_State.OnReviveItemRecycleCountDownBegin // (Final|Native|Public|BlueprintCallable) // @ game+0x26c4e70
	void OnReviveDisableHint(int32_t CountDownDuration); // Function Solarland.HUD_Teammate_State.OnReviveDisableHint // (Final|Native|Public|BlueprintCallable) // @ game+0x26c4de0
	void OnResurrectionStateChanged(bool IsOnResurrection); // Function Solarland.HUD_Teammate_State.OnResurrectionStateChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x26c4d50
	void OnPlayerStateSet(struct ASolarPlayerState* InSolarPS, bool bNormalState); // Function Solarland.HUD_Teammate_State.OnPlayerStateSet // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnLevelAndExpChanged(); // Function Solarland.HUD_Teammate_State.OnLevelAndExpChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnFocusedCharacterPlayerStateRep(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.HUD_Teammate_State.OnFocusedCharacterPlayerStateRep // (Final|Native|Protected) // @ game+0x26c4bf0
	void OnCharacterRescueStateChanged(enum class ERescueState NewRescueState); // Function Solarland.HUD_Teammate_State.OnCharacterRescueStateChanged // (Final|Native|Public) // @ game+0x26c4ac0
	void OnCharacterRecoveringShieldChange(float InCurrentShieldValue, float InRecoveringShieldValue); // Function Solarland.HUD_Teammate_State.OnCharacterRecoveringShieldChange // (Final|Native|Public) // @ game+0x26c49f0
	void OnCharacterRecoveringHealthChange(float InCurrentHealthValue, float InRecoveringHealthValue); // Function Solarland.HUD_Teammate_State.OnCharacterRecoveringHealthChange // (Final|Native|Public) // @ game+0x26c4920
	void OnCharacterReady(); // Function Solarland.HUD_Teammate_State.OnCharacterReady // (Final|Native|Protected) // @ game+0x26c4900
	bool LuaImplementedCheckIsSupportRoleClass(); // Function Solarland.HUD_Teammate_State.LuaImplementedCheckIsSupportRoleClass // (Event|Protected|BlueprintEvent|Const) // @ game+0x2d0d160
	void InitShieldHUD(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield); // Function Solarland.HUD_Teammate_State.InitShieldHUD // (Final|Native|Public) // @ game+0x26c4410
	void ForceInitHPBar(float InCurHealth, float InMaxHealth); // Function Solarland.HUD_Teammate_State.ForceInitHPBar // (Final|Native|Public) // @ game+0x26c41a0
	void CheckIsCompletelyDead(); // Function Solarland.HUD_Teammate_State.CheckIsCompletelyDead // (Final|Native|Protected|BlueprintCallable) // @ game+0x26c3f00
	void BindDelegatesForSelf(); // Function Solarland.HUD_Teammate_State.BindDelegatesForSelf // (Final|Native|Public) // @ game+0x26c3ee0
};

// Class Solarland.HUD_Teammate_State_BR
// Size: 0x718 (Inherited: 0x6f0)
struct UHUD_Teammate_State_BR : UHUD_Teammate_State {
	struct UWidgetSwitcher* WidgetSwitcher_SkydiveState; // 0x6f0(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_SkydiveLeaderPos; // 0x6f8(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_FlyLeaderPos; // 0x700(0x08)
	char pad_708[0x10]; // 0x708(0x10)
};

// Class Solarland.HUD_Teammate_State_DM
// Size: 0x720 (Inherited: 0x6f0)
struct UHUD_Teammate_State_DM : UHUD_Teammate_State {
	char pad_6F0[0x18]; // 0x6f0(0x18)
	struct UCanvasPanel* Panel_DeathCD; // 0x708(0x08)
	struct UProgressBar* Progress_DeathCD; // 0x710(0x08)
	struct USolarTextBlock* Txt_DeathCD; // 0x718(0x08)
};

// Class Solarland.HUD_TeammateStates_Panel
// Size: 0x498 (Inherited: 0x400)
struct UHUD_TeammateStates_Panel : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct UHUD_Teammate_State* Teammate_State_2; // 0x408(0x08)
	struct UHUD_Teammate_State* Teammate_State_3; // 0x410(0x08)
	struct UHUD_Teammate_State* Teammate_State_4; // 0x418(0x08)
	struct UHUD_Teammate_State* Teammate_State_5; // 0x420(0x08)
	struct USolarAdapterWidget* SolarAdapterWidget_Teammate_Myself; // 0x428(0x08)
	struct UHUD_Teammate_State* Teammate_State_Self; // 0x430(0x08)
	struct UWidgetAnimation* Anim_Change; // 0x438(0x08)
	struct TMap<char, struct UHUD_Teammate_State*> TeammateStateWidgets; // 0x440(0x50)
	char pad_490[0x8]; // 0x490(0x08)

	void UpdateReviveIconVisibility(); // Function Solarland.HUD_TeammateStates_Panel.UpdateReviveIconVisibility // (Final|Native|Protected) // @ game+0x26cb5b0
	void SetTalentActiveInPos(enum class ETalentState TalentState, char InPosInTeam, float AdditionalParam); // Function Solarland.HUD_TeammateStates_Panel.SetTalentActiveInPos // (Final|Native|Protected) // @ game+0x26cb220
	void SetCharacterInfoInPos(int32_t InCharacterId, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.SetCharacterInfoInPos // (Final|Native|Protected) // @ game+0x26cb0c0
	void SetAvatarInPos(int32_t InSkinID, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.SetAvatarInPos // (Final|Native|Protected) // @ game+0x26caff0
	void SetAllTeammatesState(); // Function Solarland.HUD_TeammateStates_Panel.SetAllTeammatesState // (Final|Native|Protected) // @ game+0x26cafd0
	void RefreshTeammateInputDevice(struct ASolarPlayerState* PlayerState); // Function Solarland.HUD_TeammateStates_Panel.RefreshTeammateInputDevice // (Final|Native|Protected) // @ game+0x26caf20
	void RefreshTeammateBattleState(struct ASCMPlayerState* PlayerState); // Function Solarland.HUD_TeammateStates_Panel.RefreshTeammateBattleState // (Final|Native|Protected) // @ game+0x26cae90
	void RefreshKillLeaderUI(struct ASolarPlayerState* KillLeader); // Function Solarland.HUD_TeammateStates_Panel.RefreshKillLeaderUI // (Final|Native|Protected) // @ game+0x26cae00
	void RefreshAllTeammatesStateWithoutReset(); // Function Solarland.HUD_TeammateStates_Panel.RefreshAllTeammatesStateWithoutReset // (Final|Native|Protected) // @ game+0x26c9ad0
	void RefreshAllTeammatesState(bool bNeedReset); // Function Solarland.HUD_TeammateStates_Panel.RefreshAllTeammatesState // (Final|Native|Protected) // @ game+0x26cad70
	void RedirectTeammateStateWidgetsInPC(bool bNeedRefreshAll); // Function Solarland.HUD_TeammateStates_Panel.RedirectTeammateStateWidgetsInPC // (Final|Native|Protected) // @ game+0x26cace0
	void OnTeamMemberChanged(struct ASolarTeamInfo* TeamInfo, struct ASolarPlayerState* PlayerState); // Function Solarland.HUD_TeammateStates_Panel.OnTeamMemberChanged // (Final|Native|Protected) // @ game+0x26ca450
	void OnTeammateStateWidgetRemoved(); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateStateWidgetRemoved // (Final|Native|Protected) // @ game+0x26cabf0
	void OnTeammateReviveStateChanged(struct ASolarPlayerState* RevivingTeammatePlayer, struct ASolarPlayerState* PlayerState); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateReviveStateChanged // (Final|Native|Protected) // @ game+0x26cab20
	void OnTeammateResurrectTimeChanged(struct ASolarPlayerState* PlayerState, int32_t ResurrectTime, int32_t ResurrectTimeCfg); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateResurrectTimeChanged // (Final|Native|Protected) // @ game+0x26caa10
	void OnTeammateRescueStateChanged(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateRescueStateChanged // (Final|Native|Protected) // @ game+0x26ca980
	void OnTeammatePlayerStateReplicated(struct ASolarPlayerState* InTeammatePS); // Function Solarland.HUD_TeammateStates_Panel.OnTeammatePlayerStateReplicated // (Final|Native|Protected) // @ game+0x26ca8f0
	void OnTeammatePlayerStateRemovedInPreparatoryPhase(char InPosInTeam, bool bInLastOne); // Function Solarland.HUD_TeammateStates_Panel.OnTeammatePlayerStateRemovedInPreparatoryPhase // (Final|Native|Protected) // @ game+0x26ca820
	void OnTeammatePlayerStateRemovedInBattlePhase(char InPosInTeam, bool bInLastOne); // Function Solarland.HUD_TeammateStates_Panel.OnTeammatePlayerStateRemovedInBattlePhase // (Final|Native|Protected) // @ game+0x26ca750
	void OnTeammateCharacterAllReady(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateCharacterAllReady // (Final|Native|Protected) // @ game+0x26ca6c0
	void OnTeammateCallForHelpNotify(struct ASolarPlayerState* PlayerState); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateCallForHelpNotify // (Final|Native|Protected) // @ game+0x26ca630
	void OnTeammateActionStateChanged(struct ASolarPlayerState* PlayerState, struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateActionStateChanged // (Final|Native|Protected) // @ game+0x26ca520
	void OnTeamInfoReplicated(struct ASolarTeamInfo* PreTeamInfo, struct ASolarTeamInfo* MyTeamInfo); // Function Solarland.HUD_TeammateStates_Panel.OnTeamInfoReplicated // (Final|Native|Protected) // @ game+0x26ca380
	void OnSpectateReferToChangedNotify(struct ASolarPlayerState* ReferToPlayerState, enum class ESpectateReferToState State); // Function Solarland.HUD_TeammateStates_Panel.OnSpectateReferToChangedNotify // (Final|Native|Protected) // @ game+0x26ca050
	void OnShieldReplicated(char InPosInTeam, struct FShieldInfo& OldShield, struct FShieldInfo& NewShield); // Function Solarland.HUD_TeammateStates_Panel.OnShieldReplicated // (Final|Native|Protected|HasOutParms) // @ game+0x26c9f10
	void OnSelectingJobEffectFinish(int32_t SelectedIndex); // Function Solarland.HUD_TeammateStates_Panel.OnSelectingJobEffectFinish // (Final|Native|Protected) // @ game+0x26c9e80
	void OnSelectingJobEffectBegin(struct ASolarCharacter* Target, int32_t Level, struct TArray<int32_t>& EffectIDArray); // Function Solarland.HUD_TeammateStates_Panel.OnSelectingJobEffectBegin // (Final|Native|Protected|HasOutParms) // @ game+0x26c9d50
	void OnReviveManagerReplicated(); // Function Solarland.HUD_TeammateStates_Panel.OnReviveManagerReplicated // (Final|Native|Protected) // @ game+0x26c9ad0
	void OnReviveItemReplicated(char InPosInTeam, char InItemNum, bool bInCanRebirth); // Function Solarland.HUD_TeammateStates_Panel.OnReviveItemReplicated // (Final|Native|Protected) // @ game+0x26c99b0
	void OnPlayerOperationInGameReplicated(struct ASolarPlayerState* InSolarPS); // Function Solarland.HUD_TeammateStates_Panel.OnPlayerOperationInGameReplicated // (Final|Native|Protected) // @ game+0x26c9610
	void OnMarkedPointInNavMapReplicated(char InPosInTeam, struct FVector2D& InMarkPosition); // Function Solarland.HUD_TeammateStates_Panel.OnMarkedPointInNavMapReplicated // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x26c92a0
	void OnHealthReplicated(char InPosInTeam, float CurrentHP, float MaxHP); // Function Solarland.HUD_TeammateStates_Panel.OnHealthReplicated // (Final|Native|Protected) // @ game+0x26c9030
	void OnClearMarkedPointInNavMap(char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.OnClearMarkedPointInNavMap // (Final|Native|Protected) // @ game+0x26c8e10
	void OnCharacterStateInGameReplicated(struct ASolarPlayerState* InCharacterPS); // Function Solarland.HUD_TeammateStates_Panel.OnCharacterStateInGameReplicated // (Final|Native|Protected) // @ game+0x26c8d80
	void OnBroadcastModeChanged(); // Function Solarland.HUD_TeammateStates_Panel.OnBroadcastModeChanged // (Final|Native|Protected) // @ game+0x26c8c30
	void LuaImplementedTeammatesBaseInfo(int32_t CurTeamId, char InIndex, bool bBattlePhase, struct UHUD_Teammate_State* StateWidget); // Function Solarland.HUD_TeammateStates_Panel.LuaImplementedTeammatesBaseInfo // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	bool IsSelfVisible(); // Function Solarland.HUD_TeammateStates_Panel.IsSelfVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26c8ac0
	void InitTeammateStateWidgets(); // Function Solarland.HUD_TeammateStates_Panel.InitTeammateStateWidgets // (Final|Native|Protected) // @ game+0x26c8aa0
	void InitTalentIconInPos(int32_t InTalentID, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.InitTalentIconInPos // (Final|Native|Protected) // @ game+0x26c89d0
	void InitSkillCDStateInPos(int32_t InCDState, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.InitSkillCDStateInPos // (Final|Native|Protected) // @ game+0x26c8900
	void InitPlayerLevelInPos(int32_t InPlayerLv, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.InitPlayerLevelInPos // (Final|Native|Protected) // @ game+0x26c86d0
};

// Class Solarland.HUD_TeammateStates_Panel_BR
// Size: 0x498 (Inherited: 0x498)
struct UHUD_TeammateStates_Panel_BR : UHUD_TeammateStates_Panel {

	void Skydive_OnSkydivingMemberDataReplicated(struct ASolarPlayerState* MemberPS); // Function Solarland.HUD_TeammateStates_Panel_BR.Skydive_OnSkydivingMemberDataReplicated // (Final|Native|Protected) // @ game+0x26cb3c0
};

// Class Solarland.HUD_TeammateStates_Panel_DM
// Size: 0x498 (Inherited: 0x498)
struct UHUD_TeammateStates_Panel_DM : UHUD_TeammateStates_Panel {
};

// Class Solarland.HUD_WorldMark
// Size: 0x530 (Inherited: 0x400)
struct UHUD_WorldMark : USolarUserWidget {
	float LiveTime; // 0x400(0x04)
	float ExtraLiveTime; // 0x404(0x04)
	struct FVector2D WarningIconOffset; // 0x408(0x08)
	struct FVector2D PostProcessingRectangleOffset; // 0x410(0x08)
	float PostProcessingRadius; // 0x418(0x04)
	float ResponCheckRangeParam; // 0x41c(0x04)
	float RefreshTime; // 0x420(0x04)
	struct FVector WorldPos; // 0x424(0x0c)
	struct FVector2D ScreenSize; // 0x430(0x08)
	char pad_438[0x8]; // 0x438(0x08)
	struct FVector2D IconSize; // 0x440(0x08)
	bool bIsOutOfRangeLastTime; // 0x448(0x01)
	bool bHasBeenAnsweredByMe; // 0x449(0x01)
	bool bIfWasChosen; // 0x44a(0x01)
	bool bIsCreateBySelf; // 0x44b(0x01)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct UImage* ImgMarkArrow; // 0x450(0x08)
	struct UImage* ImgItemMarkArrow; // 0x458(0x08)
	struct UTextBlock* Distance; // 0x460(0x08)
	float UpdateIconStyleTime_LowLevel; // 0x468(0x04)
	float UpdateIconStyleTime_HighLevel; // 0x46c(0x04)
	char pad_470[0x4]; // 0x470(0x04)
	int32_t PosInTeam; // 0x474(0x04)
	struct FWorldMarkData Data; // 0x478(0x78)
	enum class EWorldMarkType Type; // 0x4f0(0x01)
	char pad_4F1[0x3]; // 0x4f1(0x03)
	float MaxWorldDistance; // 0x4f4(0x04)
	float MinWorldDistance; // 0x4f8(0x04)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct UCurveFloat* OpacityCurve; // 0x500(0x08)
	bool bAttachToObject; // 0x508(0x01)
	char pad_509[0x1b]; // 0x509(0x1b)
	float WarningAnimationTotalTime; // 0x524(0x04)
	float WarningAnimationCurrentTime; // 0x528(0x04)
	bool WarningAnimationNeedPlay; // 0x52c(0x01)
	char pad_52D[0x3]; // 0x52d(0x03)

	void UpdateStyleByScreenPosition(struct FVector2D ScreenPos, bool bOutOfRange); // Function Solarland.HUD_WorldMark.UpdateStyleByScreenPosition // (Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void UpdateDistance(struct FVector& TargetPos); // Function Solarland.HUD_WorldMark.UpdateDistance // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x26cb450
	void SwitchWidget(bool bOutOfRange); // Function Solarland.HUD_WorldMark.SwitchWidget // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetIfBeChosen(bool bIfChosen); // Function Solarland.HUD_WorldMark.SetIfBeChosen // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ResponseByLocal(); // Function Solarland.HUD_WorldMark.ResponseByLocal // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RemoveItemMarkWhenPlayerPicked(); // Function Solarland.HUD_WorldMark.RemoveItemMarkWhenPlayerPicked // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerDead(struct FKillInfo& DeathMsgInfo); // Function Solarland.HUD_WorldMark.OnPlayerDead // (Final|Native|Public|HasOutParms) // @ game+0x26c9510
	void LogMarkResponse(); // Function Solarland.HUD_WorldMark.LogMarkResponse // (Final|Native|Public) // @ game+0x26c8af0
	void InitWidget(struct UObject* Owner, int32_t InPosInTeam, struct FWorldMarkData& InWorldMarkedData, struct UObject* IconImg); // Function Solarland.HUD_WorldMark.InitWidget // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void InitAttachedWidget(struct AActor* ActorAttachedTo); // Function Solarland.HUD_WorldMark.InitAttachedWidget // (Final|Native|Public) // @ game+0x26c8640
	void DestroySelf(); // Function Solarland.HUD_WorldMark.DestroySelf // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool CheckIsLowLevelDevice(); // Function Solarland.HUD_WorldMark.CheckIsLowLevelDevice // (Final|Native|Public|BlueprintCallable) // @ game+0x26c8540
	void CancelResponse(); // Function Solarland.HUD_WorldMark.CancelResponse // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HUD_WorldMarkPanel
// Size: 0x498 (Inherited: 0x400)
struct UHUD_WorldMarkPanel : USolarUserWidget {
	struct TArray<struct UHUD_MarkEnemyInfo*> MarkdEnemyWidgets; // 0x400(0x10)
	struct UCanvasPanel* MarkPanel; // 0x410(0x08)
	struct UHUD_MarkEnemyInfo* MarkEnemyInfoWidgetClass; // 0x418(0x08)
	struct UHUD_MarkDoppelganger* MarkDoppelgangerWidgetClass; // 0x420(0x08)
	struct UHUD_ScanEffect* ScanEffectWidgetClass; // 0x428(0x08)
	struct TArray<struct UHUD_MarkEnemyInfo*> MarkEnemyWidgets; // 0x430(0x10)
	struct UHUD_MarkDoppelganger* MarkDoppelgangerWidget; // 0x440(0x08)
	char pad_448[0x38]; // 0x448(0x38)
	struct UMeshRectangleWidget* MeshWidget_Warning; // 0x480(0x08)
	char pad_488[0x10]; // 0x488(0x10)

	void RegisterDataProvider(); // Function Solarland.HUD_WorldMarkPanel.RegisterDataProvider // (Final|Native|Protected) // @ game+0x26cafb0
	void OnSuperRadarStart(struct TArray<struct FString>& InPlayers); // Function Solarland.HUD_WorldMarkPanel.OnSuperRadarStart // (Final|Native|Public|HasOutParms) // @ game+0x26ca2b0
	void OnSuperRadarRemovePlayer(struct FString InPlayer); // Function Solarland.HUD_WorldMarkPanel.OnSuperRadarRemovePlayer // (Final|Native|Public) // @ game+0x26ca210
	void OnSuperRadarEnd(); // Function Solarland.HUD_WorldMarkPanel.OnSuperRadarEnd // (Final|Native|Public) // @ game+0x26ca1f0
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.HUD_WorldMarkPanel.OnSpectateTargetChanged // (Final|Native|Public) // @ game+0x26ca120
	void OnScoutCharactersChange(struct TArray<struct FString> ScoutedCharacters, struct TArray<struct FString> ToBeScoutedCharacters); // Function Solarland.HUD_WorldMarkPanel.OnScoutCharactersChange // (Final|Native|Public) // @ game+0x26c9af0
	struct FString OnRegisterPositionMarkRequested(struct UActorMarkBase*& OutResult, struct UActorMarkBase* InMarkClass, struct FVector& InPosition); // Function Solarland.HUD_WorldMarkPanel.OnRegisterPositionMarkRequested // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x26c9820
	struct FString OnRegisterActorMarkRequested(struct UActorMarkBase*& OutResult, struct UActorMarkBase* InMarkClass, struct AActor* FollowActor); // Function Solarland.HUD_WorldMarkPanel.OnRegisterActorMarkRequested // (Final|Native|Protected|HasOutParms) // @ game+0x26c96a0
	void OnDoppelgangerActive(struct ASolarCharacter* InDoppelganger, bool bActive); // Function Solarland.HUD_WorldMarkPanel.OnDoppelgangerActive // (Final|Native|Public) // @ game+0x26c8eb0
	void OnDamagingActorsChange(); // Function Solarland.HUD_WorldMarkPanel.OnDamagingActorsChange // (Final|Native|Public) // @ game+0x26c8e90
	void OnBattleHUDVisibleChanged(bool Visible); // Function Solarland.HUD_WorldMarkPanel.OnBattleHUDVisibleChanged // (Final|Native|Public) // @ game+0x26c8ba0
	void OnAimingEnemy(struct ASolarCharacter* InEnemy); // Function Solarland.HUD_WorldMarkPanel.OnAimingEnemy // (Final|Native|Public) // @ game+0x26c8b10
};

// Class Solarland.HUDBattleHPPanel
// Size: 0x4f0 (Inherited: 0x400)
struct UHUDBattleHPPanel : USolarUserWidget {
	char pad_400[0x28]; // 0x400(0x28)
	struct USolarHPProgressBoard* HP_Bar; // 0x428(0x08)
	struct UTextBlock* Txt_HPNumber; // 0x430(0x08)
	struct USolarShieldProgressBoard* AdvBar_Shield; // 0x438(0x08)
	struct UTextBlock* Txt_ArmorNum; // 0x440(0x08)
	struct UCanvasPanel* Panel_VX; // 0x448(0x08)
	struct UCanvasPanel* Panel_SP; // 0x450(0x08)
	struct UCanvasPanel* FX_Shield; // 0x458(0x08)
	struct UWidgetAnimation* Armor_Light_Anim; // 0x460(0x08)
	struct FLinearColor HPBarColorNormal; // 0x468(0x10)
	struct FLinearColor HPBarColorDying; // 0x478(0x10)
	struct TMap<int32_t, struct FLinearColor> ShieldNumColorByQuality; // 0x488(0x50)
	char pad_4D8[0x18]; // 0x4d8(0x18)

	void UpdateShieldValue(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState RechargeState, bool bFixPreAdd); // Function Solarland.HUDBattleHPPanel.UpdateShieldValue // (Final|Native|Public) // @ game+0x26cb650
	void UpdateShieldMaxValue(float MaxShieldValue); // Function Solarland.HUDBattleHPPanel.UpdateShieldMaxValue // (Final|Native|Public) // @ game+0x26cb5d0
	void UpdateHPBar(float InCurHealth, float InMaxHealth); // Function Solarland.HUDBattleHPPanel.UpdateHPBar // (Final|Native|Public) // @ game+0x26cb4e0
	void UnBindDelegates(); // Function Solarland.HUDBattleHPPanel.UnBindDelegates // (Final|Native|Public) // @ game+0x9043b0
	void ShowShieldUI(bool bIsShow); // Function Solarland.HUDBattleHPPanel.ShowShieldUI // (Final|Native|Public) // @ game+0x26cb330
	void ShowLevelUp(int32_t NewLevel, struct TArray<struct FString>& DynamicTips); // Function Solarland.HUDBattleHPPanel.ShowLevelUp // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void ShowGainExp(int32_t ExpAdded); // Function Solarland.HUDBattleHPPanel.ShowGainExp // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetHPColor(struct FLinearColor& InHPBarColor); // Function Solarland.HUDBattleHPPanel.SetHPColor // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x26cb190
	void OnUserSettingsChanged(struct TArray<struct FUserSetting>& UserSettings); // Function Solarland.HUDBattleHPPanel.OnUserSettingsChanged // (Final|Native|Public|HasOutParms) // @ game+0x26cac10
	void OnShieldUpgradeAnimFinished(); // Function Solarland.HUDBattleHPPanel.OnShieldUpgradeAnimFinished // (Final|Native|Private) // @ game+0x26ca030
	void OnOwnerRecoveringShieldChange(float InCurrentHealthValue, float InRecoveringHealthValue); // Function Solarland.HUDBattleHPPanel.OnOwnerRecoveringShieldChange // (Final|Native|Public) // @ game+0x26c9440
	void OnOwnerRecoveringHealthChange(float InCurrentHealthValue, float InRecoveringHealthValue); // Function Solarland.HUDBattleHPPanel.OnOwnerRecoveringHealthChange // (Final|Native|Public) // @ game+0x26c9370
	void OnLevelUpInternal(int32_t NewLevel, int32_t OldLevel); // Function Solarland.HUDBattleHPPanel.OnLevelUpInternal // (Final|Native|Private) // @ game+0x26c9140
	void OnLevelUp(int32_t NewLevel); // Function Solarland.HUDBattleHPPanel.OnLevelUp // (Final|Native|Public|BlueprintCallable) // @ game+0x26c9210
	void OnGainExp(int32_t ExpAdded); // Function Solarland.HUDBattleHPPanel.OnGainExp // (Final|Native|Private) // @ game+0x26c8fa0
	void OnEnterLanding(); // Function Solarland.HUDBattleHPPanel.OnEnterLanding // (Final|Native|Public) // @ game+0x26c8f80
	void OnEnterCruising(); // Function Solarland.HUDBattleHPPanel.OnEnterCruising // (Final|Native|Public) // @ game+0x2661bb0
	void OnCharacterRescueStateChanged(enum class ERescueState NewRescueState); // Function Solarland.HUDBattleHPPanel.OnCharacterRescueStateChanged // (Final|Native|Public) // @ game+0x26c8d00
	void OnCharacterRebirth(struct ASolarCharacter* InSolarChar); // Function Solarland.HUDBattleHPPanel.OnCharacterRebirth // (Final|Native|Public) // @ game+0x26c8c70
	void OnCharacterReady(); // Function Solarland.HUDBattleHPPanel.OnCharacterReady // (Final|Native|Private) // @ game+0x26c8c50
	void InitShieldHUD(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield); // Function Solarland.HUDBattleHPPanel.InitShieldHUD // (Final|Native|Public) // @ game+0x26c87a0
	void ForceInitHPBar(float InCurHealth, float InMaxHealth); // Function Solarland.HUDBattleHPPanel.ForceInitHPBar // (Final|Native|Public) // @ game+0x26c8570
	void BindDelegates(); // Function Solarland.HUDBattleHPPanel.BindDelegates // (Final|Native|Public) // @ game+0x26c8520
};

// Class Solarland.HUDBattleUIScore
// Size: 0x428 (Inherited: 0x400)
struct UHUDBattleUIScore : USolarUserWidget {
	struct UImage* Image_BG_Grid02; // 0x400(0x08)
	struct USizeBox* KillLeader; // 0x408(0x08)
	struct UTextBlock* Txt_CauseDamage; // 0x410(0x08)
	struct UTextBlock* Txt_Assist; // 0x418(0x08)
	char pad_420[0x8]; // 0x420(0x08)

	void RefreshKillLeaderUI(struct ASolarPlayerState* KillLeaderPS); // Function Solarland.HUDBattleUIScore.RefreshKillLeaderUI // (Final|Native|Public) // @ game+0x26cf1e0
	void RefreshCauseDamage(float CauseDamage); // Function Solarland.HUDBattleUIScore.RefreshCauseDamage // (Final|Native|Public) // @ game+0x26cf160
	void RefreshAssistNum(int32_t AssistNum); // Function Solarland.HUDBattleUIScore.RefreshAssistNum // (Final|Native|Public) // @ game+0x26cf0d0
	void OnSpectateReferToChanged(struct ASolarPlayerState* ReferToPlayerState, enum class ESpectateReferToState State); // Function Solarland.HUDBattleUIScore.OnSpectateReferToChanged // (Final|Native|Public) // @ game+0x26ced30
	void OnPlayersCountChanged(int32_t PlayersCount); // Function Solarland.HUDBattleUIScore.OnPlayersCountChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnEndMatchCountdownChanged(int32_t Seconds); // Function Solarland.HUDBattleUIScore.OnEndMatchCountdownChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HUDCountdownWidget
// Size: 0x470 (Inherited: 0x400)
struct UHUDCountdownWidget : USolarUserWidget {
	char pad_400[0x40]; // 0x400(0x40)
	struct UGaugeImage* Image_GameProgressBar; // 0x440(0x08)
	struct UTextBlock* Text_GameProgressTime; // 0x448(0x08)
	struct UButton* BTN_GameProgressCancel; // 0x450(0x08)
	struct UTextBlock* Text_GameProgressTips; // 0x458(0x08)
	struct UHorizontalBox* HorizontalBox_Cancel; // 0x460(0x08)
	struct UHUDPassiveHeadWidget* Panel_PassiveBuff; // 0x468(0x08)

	void UpdateGameProgressTipsText(int32_t InTextId); // Function Solarland.HUDCountdownWidget.UpdateGameProgressTipsText // (Final|Native|Protected) // @ game+0x26cfb90
	void UpdateGameProgressText(); // Function Solarland.HUDCountdownWidget.UpdateGameProgressText // (Final|Native|Protected) // @ game+0x26cfb70
	void UpdateGameProgressBarPercent(float InPercent); // Function Solarland.HUDCountdownWidget.UpdateGameProgressBarPercent // (Final|Native|Protected) // @ game+0x26cfaf0
	void UpdateGameProgress(float InAddition); // Function Solarland.HUDCountdownWidget.UpdateGameProgress // (Final|Native|Protected) // @ game+0x26cfa70
	void StopGameProgress(int32_t InActionID); // Function Solarland.HUDCountdownWidget.StopGameProgress // (Final|Native|Protected) // @ game+0x26cf910
	void StopCountDownProgress(int32_t InActionID); // Function Solarland.HUDCountdownWidget.StopCountDownProgress // (Final|Native|Protected) // @ game+0x26cf880
	void StartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.HUDCountdownWidget.StartCountDownProgress // (Final|Native|Protected|HasOutParms) // @ game+0x26cf6b0
	void SetActiveGameProgressBar(bool Inactive); // Function Solarland.HUDCountdownWidget.SetActiveGameProgressBar // (Final|Native|Public) // @ game+0x26cf270
	void OnSteamCancelCountDown(); // Function Solarland.HUDCountdownWidget.OnSteamCancelCountDown // (Final|Native|Protected) // @ game+0x26ceed0
	void OnParentVisibilityChanged(bool bVisible); // Function Solarland.HUDCountdownWidget.OnParentVisibilityChanged // (Final|Native|Protected) // @ game+0x26ce430
	void OnCompleteInternal(); // Function Solarland.HUDCountdownWidget.OnCompleteInternal // (Final|Native|Protected) // @ game+0x26ce230
	void OnClickButtonCancel(); // Function Solarland.HUDCountdownWidget.OnClickButtonCancel // (Final|Native|Protected) // @ game+0x26ce210
	void BP_UpdateStateView(enum class ECountDownState InState); // Function Solarland.HUDCountdownWidget.BP_UpdateStateView // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HUDItemPanel
// Size: 0x5d8 (Inherited: 0x400)
struct UHUDItemPanel : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct USolarAdapterWidget* SolarAdapterWidget_PanelRecover; // 0x410(0x08)
	struct UCanvasPanel* Panel_ShieldAutoRE; // 0x418(0x08)
	struct UButton* Btn_Restore; // 0x420(0x08)
	struct UImage* Img_Restore; // 0x428(0x08)
	struct UTextBlock* Txt_Restore_Num; // 0x430(0x08)
	struct UButton* Btn_Change; // 0x438(0x08)
	struct UImage* Img_Shield_FX; // 0x440(0x08)
	struct UCanvasPanel* Panel_DoubleShiel_VX; // 0x448(0x08)
	struct UOverlay* Unavailable_Restore; // 0x450(0x08)
	struct UWidgetAnimation* Anim_Double; // 0x458(0x08)
	struct UImage* MI_Img_Arrow_01; // 0x460(0x08)
	struct FVector2D MutiRecoveryArrowTranslation; // 0x468(0x08)
	struct UCanvasPanel* Panel_Backpack; // 0x470(0x08)
	struct UButton* Btn_Backpack; // 0x478(0x08)
	struct UWidgetAnimation* Anim_EMP_Enter; // 0x480(0x08)
	struct UWidgetAnimation* Anim_EMP_Exit; // 0x488(0x08)
	struct UWidgetAnimation* Enter_Anim; // 0x490(0x08)
	struct UWidgetAnimation* Exit_Anim; // 0x498(0x08)
	struct TMap<enum class ESpecialItemID, struct TSoftObjectPtr<UTexture2D>> RestoreIcons; // 0x4a0(0x50)
	char pad_4F0[0x18]; // 0x4f0(0x18)
	struct TMap<enum class ESpecialItemID, int32_t> RestoreItemMap; // 0x508(0x50)
	char pad_558[0x8]; // 0x558(0x08)
	float RestoreRecommendDuration; // 0x560(0x04)
	char pad_564[0x4]; // 0x564(0x04)
	struct UCanvasPanel* Panel_Recommend; // 0x568(0x08)
	struct USolarButton* Btn_Recommend; // 0x570(0x08)
	struct UImage* Img_Recom; // 0x578(0x08)
	struct UGaugeImage* Recom_Countdown; // 0x580(0x08)
	struct UWidgetAnimation* Anim_Recommend_Click_Exit; // 0x588(0x08)
	struct UWidgetAnimation* Anim_Recommend_Unclick_Exit; // 0x590(0x08)
	struct UWidgetAnimation* Anim_Recommend_Enter; // 0x598(0x08)
	struct UImage* Img_Recom_Glow; // 0x5a0(0x08)
	struct UHUDSubItemDesktop* SubUI_Item_Desktop_2; // 0x5a8(0x08)
	char pad_5B0[0x10]; // 0x5b0(0x10)
	int32_t PrevLevel; // 0x5c0(0x04)
	float PrevExpRatio; // 0x5c4(0x04)
	int32_t CurrentLevel; // 0x5c8(0x04)
	float CurrentExpRatio; // 0x5cc(0x04)
	bool bHiddenByGameplay; // 0x5d0(0x01)
	char pad_5D1[0x7]; // 0x5d1(0x07)

	void WrappedOnLevelAndExpChanged(int32_t NewLevel, float NewExpRatio); // Function Solarland.HUDItemPanel.WrappedOnLevelAndExpChanged // (Final|Native|Protected) // @ game+0x26cfc20
	void UnBindDelegates(); // Function Solarland.HUDItemPanel.UnBindDelegates // (Final|Native|Public) // @ game+0x26cfa30
	void SetSubUIItemDesktop(struct UHUDSubItemDesktop* InWidget); // Function Solarland.HUDItemPanel.SetSubUIItemDesktop // (Final|Native|Public|BlueprintCallable) // @ game+0x26cf600
	void SetShieldFXVisable(bool bIsVisible); // Function Solarland.HUDItemPanel.SetShieldFXVisable // (Final|Native|Public) // @ game+0x26cf570
	void SetIsHiddenByGameplay(bool InNewValue); // Function Solarland.HUDItemPanel.SetIsHiddenByGameplay // (Final|Native|Public|BlueprintCallable) // @ game+0x26cf450
	void SetHUDItemStyle(enum class ESolarITemHUDStyle InStyle); // Function Solarland.HUDItemPanel.SetHUDItemStyle // (Final|Native|Public) // @ game+0x26cf3d0
	void ScopeUIStateChanged(bool BOpened); // Function Solarland.HUDItemPanel.ScopeUIStateChanged // (Final|Native|Public) // @ game+0x26446a0
	void ResetLevelAndExpDisplayToCurrent(); // Function Solarland.HUDItemPanel.ResetLevelAndExpDisplayToCurrent // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RecommendRestoreItem(); // Function Solarland.HUDItemPanel.RecommendRestoreItem // (Final|Native|Private) // @ game+0x26cf010
	void OnUseRestoreItemEnd(bool bWasCancelled); // Function Solarland.HUDItemPanel.OnUseRestoreItemEnd // (Final|Native|Private) // @ game+0x26ceef0
	void OnShieldValueChanged(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState RechargeState, bool bFixPreAdd); // Function Solarland.HUDItemPanel.OnShieldValueChanged // (Final|Native|Private) // @ game+0x26ce8c0
	void OnRoleGEShieldMultiRecoverCoolDownChange(int32_t NewCount); // Function Solarland.HUDItemPanel.OnRoleGEShieldMultiRecoverCoolDownChange // (Final|Native|Private) // @ game+0x26ce620
	void OnRoleAbilityHideHUD(bool bHide); // Function Solarland.HUDItemPanel.OnRoleAbilityHideHUD // (Final|Native|Private) // @ game+0x26ce590
	void OnPlayerStateRep(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.HUDItemPanel.OnPlayerStateRep // (Final|Native|Protected) // @ game+0x26ce4c0
	void OnLevelAndExpChanged(); // Function Solarland.HUDItemPanel.OnLevelAndExpChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnEnterLanding(); // Function Solarland.HUDItemPanel.OnEnterLanding // (Final|Native|Public) // @ game+0x26c8f80
	void OnEnterCruising(); // Function Solarland.HUDItemPanel.OnEnterCruising // (Final|Native|Public) // @ game+0x2661bb0
	void OnEMP(bool bInForbidden); // Function Solarland.HUDItemPanel.OnEMP // (Final|Native|Public) // @ game+0x26ce310
	void OnDrivingStateChange(enum class EDriveState InDriveState); // Function Solarland.HUDItemPanel.OnDrivingStateChange // (Final|Native|Public) // @ game+0x26ce290
	void OnConsumeItemUpdated(); // Function Solarland.HUDItemPanel.OnConsumeItemUpdated // (Final|Native|Public) // @ game+0x26ce250
	void OnCharacterRescueStateChanged(enum class ERescueState NewRescueState); // Function Solarland.HUDItemPanel.OnCharacterRescueStateChanged // (Final|Native|Private) // @ game+0x26ce110
	void OnCharacterHPChanged(float CurrentHP, float MaxHP); // Function Solarland.HUDItemPanel.OnCharacterHPChanged // (Final|Native|Private) // @ game+0x26cdf70
	void OnBtnShieldRechargerClicked(); // Function Solarland.HUDItemPanel.OnBtnShieldRechargerClicked // (Final|Native|Protected) // @ game+0x26cdf50
	void OnBtnRestoreClicked(); // Function Solarland.HUDItemPanel.OnBtnRestoreClicked // (Final|Native|Protected) // @ game+0x26cdf30
	void OnBtnRecommendClicked(); // Function Solarland.HUDItemPanel.OnBtnRecommendClicked // (Final|Native|Protected) // @ game+0x26cdef0
	void OnBtnMedkitClicked(); // Function Solarland.HUDItemPanel.OnBtnMedkitClicked // (Final|Native|Protected) // @ game+0x26cded0
	void OnBtnChangeClicked(); // Function Solarland.HUDItemPanel.OnBtnChangeClicked // (Final|Native|Protected) // @ game+0x26cdeb0
	void OnBtnBigShieldRechargerClicked(); // Function Solarland.HUDItemPanel.OnBtnBigShieldRechargerClicked // (Final|Native|Protected) // @ game+0x26cde90
	void OnBtnBackpackClicked(); // Function Solarland.HUDItemPanel.OnBtnBackpackClicked // (Final|Native|Protected) // @ game+0x26cde70
	bool IsBattleHUDInSpectateMode(); // Function Solarland.HUDItemPanel.IsBattleHUDInSpectateMode // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool GetIsHiddenByGameplay(); // Function Solarland.HUDItemPanel.GetIsHiddenByGameplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26cdce0
	void BindDelegates(); // Function Solarland.HUDItemPanel.BindDelegates // (Final|Native|Public) // @ game+0x26cdc80
};

// Class Solarland.HUDJobEffectPanel
// Size: 0x420 (Inherited: 0x400)
struct UHUDJobEffectPanel : USolarUserWidget {
	struct UJobEffectItemWidget* ItemWidgetClass; // 0x400(0x08)
	char pad_408[0x10]; // 0x408(0x10)
	struct USolarButton* Btn_Detail; // 0x418(0x08)

	void ShowDetailPanel(); // Function Solarland.HUDJobEffectPanel.ShowDetailPanel // (Final|Native|Protected|BlueprintCallable) // @ game+0x26cf690
	void RefreshSplashEffectColor(struct FBattleUpgradeEffectCategoryColorSet& ColorSet); // Function Solarland.HUDJobEffectPanel.RefreshSplashEffectColor // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.HUDJobEffectPanel.OnSpectateTargetChanged // (Final|Native|Protected) // @ game+0x26cee00
	void OnSpectateInfoRep(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.HUDJobEffectPanel.OnSpectateInfoRep // (Final|Native|Protected) // @ game+0x26ceca0
	void OnNewEffectAppear(struct UJobEffectItemWidget* Widget, int32_t Index, int32_t TotalCount); // Function Solarland.HUDJobEffectPanel.OnNewEffectAppear // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnEffectUpdate(struct UJobEffectItemWidget* Widget, int32_t Index, struct FText& LabelContent); // Function Solarland.HUDJobEffectPanel.OnEffectUpdate // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnBattleUpgradeEffect(enum class ESolarTablesEnum_BattleUpgradeEffectType EffectType, int32_t ParamSum); // Function Solarland.HUDJobEffectPanel.OnBattleUpgradeEffect // (Final|Native|Protected) // @ game+0x26cdda0
	void CloseDetailPanel(); // Function Solarland.HUDJobEffectPanel.CloseDetailPanel // (Final|Native|Protected|BlueprintCallable) // @ game+0x26cdcc0
	void AddItemWidgetToPanel(struct UJobEffectItemWidget* ItemWidget); // Function Solarland.HUDJobEffectPanel.AddItemWidgetToPanel // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HUDPanelRecoverPC
// Size: 0x408 (Inherited: 0x400)
struct UHUDPanelRecoverPC : USolarUserWidget {
	struct UHUDSubItemDesktop* SubUI_Item_Desktop_2; // 0x400(0x08)

	void SetStateBPImplement(enum class ESolarITemHUDStyle InStyle); // Function Solarland.HUDPanelRecoverPC.SetStateBPImplement // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HUDPassiveHeadWidget
// Size: 0x418 (Inherited: 0x400)
struct UHUDPassiveHeadWidget : USolarUserWidget {
	struct UImage* Img_Head; // 0x400(0x08)
	struct USolarTextBlock* Txt_Buff; // 0x408(0x08)
	char pad_410[0x8]; // 0x410(0x08)

	void SetData(int32_t InContributorCharacterId, int32_t InLocalTipsID); // Function Solarland.HUDPassiveHeadWidget.SetData // (Final|Native|Public|BlueprintCallable) // @ game+0x26cf300
};

// Class Solarland.HUDRecommendItemWidget
// Size: 0x450 (Inherited: 0x400)
struct UHUDRecommendItemWidget : USolarUserWidget {
	char pad_400[0x1c]; // 0x400(0x1c)
	struct FDelegate OnStartRecommend; // 0x41c(0x10)
	struct FDelegate OnStopRecommend; // 0x42c(0x10)
	struct FDelegate OnRecommendTick; // 0x43c(0x10)
	float RestoreRecommendDuration; // 0x44c(0x04)

	void UnBindDelegates(); // Function Solarland.HUDRecommendItemWidget.UnBindDelegates // (Final|Native|Private) // @ game+0x26cfa50
	void RecommendRestoreItem(); // Function Solarland.HUDRecommendItemWidget.RecommendRestoreItem // (Final|Native|Private) // @ game+0x26cf030
	void OnUseRestoreItemEnd(bool bWasCancelled); // Function Solarland.HUDRecommendItemWidget.OnUseRestoreItemEnd // (Final|Native|Private) // @ game+0x26cef80
	void OnStopRecommend__DelegateSignature(bool bManual); // DelegateFunction Solarland.HUDRecommendItemWidget.OnStopRecommend__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void OnStartRecommend__DelegateSignature(enum class ESpecialItemID CurRecommendBtnType); // DelegateFunction Solarland.HUDRecommendItemWidget.OnStartRecommend__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void OnShieldValueChanged(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState RechargeState, bool bFixPreAdd); // Function Solarland.HUDRecommendItemWidget.OnShieldValueChanged // (Final|Native|Private) // @ game+0x26ceab0
	void OnRoleGEShieldMultiRecoverCoolDownChange(int32_t NewCount); // Function Solarland.HUDRecommendItemWidget.OnRoleGEShieldMultiRecoverCoolDownChange // (Final|Native|Private) // @ game+0x26ce6b0
	void OnRecommendTick__DelegateSignature(float CurrentProgress); // DelegateFunction Solarland.HUDRecommendItemWidget.OnRecommendTick__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void OnEMP(bool bInForbidden); // Function Solarland.HUDRecommendItemWidget.OnEMP // (Final|Native|Private) // @ game+0x26ce3a0
	void OnConsumeItemUpdated(); // Function Solarland.HUDRecommendItemWidget.OnConsumeItemUpdated // (Final|Native|Private) // @ game+0x26ce270
	void OnCharacterRescueStateChanged(enum class ERescueState NewRescueState); // Function Solarland.HUDRecommendItemWidget.OnCharacterRescueStateChanged // (Final|Native|Private) // @ game+0x26ce190
	void OnCharacterHPChanged(float CurrentHP, float MaxHP); // Function Solarland.HUDRecommendItemWidget.OnCharacterHPChanged // (Final|Native|Private) // @ game+0x26ce040
	void OnBtnShieldRechargerClicked(); // Function Solarland.HUDRecommendItemWidget.OnBtnShieldRechargerClicked // (Final|Native|Private) // @ game+0x26cdf50
	void OnBtnMedkitClicked(); // Function Solarland.HUDRecommendItemWidget.OnBtnMedkitClicked // (Final|Native|Private) // @ game+0x26cded0
	void OnBtnBigShieldRechargerClicked(); // Function Solarland.HUDRecommendItemWidget.OnBtnBigShieldRechargerClicked // (Final|Native|Private) // @ game+0x26cde90
	void BindDelegates(); // Function Solarland.HUDRecommendItemWidget.BindDelegates // (Final|Native|Private) // @ game+0x26cdca0
};

// Class Solarland.HUDShieldMaterial
// Size: 0x420 (Inherited: 0x400)
struct UHUDShieldMaterial : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct UWidgetAnimation* Anim_GetMT_3; // 0x408(0x08)
	struct UWidgetAnimation* Anim_GetMT; // 0x410(0x08)
	struct UWidgetAnimation* Anim_Loop; // 0x418(0x08)

	void OnShieldUpgradeShopInteract(); // Function Solarland.HUDShieldMaterial.OnShieldUpgradeShopInteract // (Final|Native|Protected) // @ game+0x26ce8a0
	void OnShieldUpgradeItemChanged(int32_t InNewCount, int32_t InLastCount); // Function Solarland.HUDShieldMaterial.OnShieldUpgradeItemChanged // (Final|Native|Protected) // @ game+0x26ce7d0
	void OnShieldAvailableChanged(bool bAvailable); // Function Solarland.HUDShieldMaterial.OnShieldAvailableChanged // (Final|Native|Protected) // @ game+0x26ce740
};

// Class Solarland.HUDSubItemDesktop
// Size: 0x4f8 (Inherited: 0x400)
struct UHUDSubItemDesktop : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct UCanvasPanel* Panel_Recommend; // 0x410(0x08)
	struct UImage* Img_Recom; // 0x418(0x08)
	struct UGaugeImage* Recom_Countdown; // 0x420(0x08)
	struct UImage* Icon_Medkit_2; // 0x428(0x08)
	struct UWidgetAnimation* Anim_Recommend_Click_Exit; // 0x430(0x08)
	struct UWidgetAnimation* Anim_Recommend_Unclick_Exit; // 0x438(0x08)
	struct UWidgetAnimation* Anim_Recommend_Enter; // 0x440(0x08)
	struct TMap<int32_t, struct FSoftObjectPath> ImagePathMap; // 0x448(0x50)
	struct TMap<enum class ESpecialItemID, struct TSoftObjectPtr<UTexture2D>> RestoreIcons; // 0x498(0x50)
	bool bEnableRecommend; // 0x4e8(0x01)
	char pad_4E9[0xf]; // 0x4e9(0x0f)

	void UpdateQuickItemBPImplement(int32_t QuickItem); // Function Solarland.HUDSubItemDesktop.UpdateQuickItemBPImplement // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void StopRecommend(bool bManual); // Function Solarland.HUDSubItemDesktop.StopRecommend // (Final|Native|Private) // @ game+0x26cf9a0
	void StartRecommend(enum class ESpecialItemID CurRecommendBtnType); // Function Solarland.HUDSubItemDesktop.StartRecommend // (Final|Native|Private) // @ game+0x26cf7f0
	void SetRecommendWidget(struct UHUDRecommendItemWidget* InWidget); // Function Solarland.HUDSubItemDesktop.SetRecommendWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x26cf4e0
	void RecommendTick(float InDeltaTime); // Function Solarland.HUDSubItemDesktop.RecommendTick // (Final|Native|Private) // @ game+0x26cf050
	void OnBtnRecommendClicked(); // Function Solarland.HUDSubItemDesktop.OnBtnRecommendClicked // (Final|Native|Private) // @ game+0x26cdf10
	void LoadHUDItemImage(int32_t ItemID); // Function Solarland.HUDSubItemDesktop.LoadHUDItemImage // (Final|Native|Public|BlueprintCallable) // @ game+0x26cdd10
};

// Class Solarland.SolarMapElementBase
// Size: 0x298 (Inherited: 0x228)
struct ASolarMapElementBase : AActor {
	char pad_228[0x10]; // 0x228(0x10)
	struct FString Side; // 0x238(0x10)
	struct FString Job; // 0x248(0x10)
	struct FString ElementID; // 0x258(0x10)
	enum class ESGameMode_ElementType Type; // 0x268(0x01)
	enum class EElementStateType State; // 0x269(0x01)
	enum class EElementVisibilityType Visibility; // 0x26a(0x01)
	char pad_26B[0x5]; // 0x26b(0x05)
	struct USolarGameMode_HandleElementRPC* BP_HandleActorRPC; // 0x270(0x08)
	struct FName ElementTypeName; // 0x278(0x08)
	struct FString GroupKey; // 0x280(0x10)
	char bUseSceneActorOptimization; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)

	void SetElementVisibility(enum class EElementVisibilityType NewType); // Function Solarland.SolarMapElementBase.SetElementVisibility // (Native|Public|BlueprintCallable) // @ game+0x283d770
	enum class EElementStateType SetElementState(enum class EElementStateType NewState); // Function Solarland.SolarMapElementBase.SetElementState // (Native|Public|BlueprintCallable) // @ game+0x2708d60
	void OnRep_ElementVisibility(); // Function Solarland.SolarMapElementBase.OnRep_ElementVisibility // (Final|Native|Public) // @ game+0x283d580
	void OnRep_ElementState(); // Function Solarland.SolarMapElementBase.OnRep_ElementState // (Final|Native|Public) // @ game+0x283d560
	void OnElementVisibilityChanged(enum class EElementVisibilityType CurrentVisibility); // Function Solarland.SolarMapElementBase.OnElementVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnElementStateChanged(enum class EElementStateType CurrentState); // Function Solarland.SolarMapElementBase.OnElementStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HumanoidTarget
// Size: 0x2b0 (Inherited: 0x298)
struct AHumanoidTarget : ASolarMapElementBase {
	char pad_298[0x18]; // 0x298(0x18)

	void ServerOnTargetTakeDamage(float Damage, struct AActor* DamageCauser); // Function Solarland.HumanoidTarget.ServerOnTargetTakeDamage // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HuntTeammateStatesPanelWidget
// Size: 0x458 (Inherited: 0x400)
struct UHuntTeammateStatesPanelWidget : USolarUserWidget {
	char pad_400[0x4]; // 0x400(0x04)
	float DeltaTime; // 0x404(0x04)
	struct TMap<int32_t, struct UHuntTeammateStateWidget*> TeammateStatesMap; // 0x408(0x50)
};

// Class Solarland.HuntTeammateStateWidget
// Size: 0x418 (Inherited: 0x400)
struct UHuntTeammateStateWidget : USolarUserWidget {
	bool bHasInitTalent; // 0x400(0x01)
	bool bHasTalentStateSet; // 0x401(0x01)
	char pad_402[0x2]; // 0x402(0x02)
	int32_t PlayerPosInTeam; // 0x404(0x04)
	struct FString PlayerNickName; // 0x408(0x10)

	void UnBindPlayerCard(); // Function Solarland.HuntTeammateStateWidget.UnBindPlayerCard // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetTextNickName(struct FString NickName); // Function Solarland.HuntTeammateStateWidget.SetTextNickName // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetTeammatePosAndColor(int32_t PosInTeam, bool IsNormalState); // Function Solarland.HuntTeammateStateWidget.SetTeammatePosAndColor // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetStateWidgetVisibility(enum class ESlateVisibility InVisibility); // Function Solarland.HuntTeammateStateWidget.SetStateWidgetVisibility // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetHealthPercent(float Percent); // Function Solarland.HuntTeammateStateWidget.SetHealthPercent // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ResetToDefault(); // Function Solarland.HuntTeammateStateWidget.ResetToDefault // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RefreshTalent(struct ASolarPlayerState* PlayerState); // Function Solarland.HuntTeammateStateWidget.RefreshTalent // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RefreshCurrentPlayerOperationInGame(bool IsVisible); // Function Solarland.HuntTeammateStateWidget.RefreshCurrentPlayerOperationInGame // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RefreshCurrentCharacterStateInGame(bool IsInVehicle, bool IsDying, bool IsAbnormalState); // Function Solarland.HuntTeammateStateWidget.RefreshCurrentCharacterStateInGame // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool HasBindedPlayer(struct ASCMPlayerState* Player); // Function Solarland.HuntTeammateStateWidget.HasBindedPlayer // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void BindPlayerCard(struct ASCMPlayerState* Player); // Function Solarland.HuntTeammateStateWidget.BindPlayerCard // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.HyperlinkDecorator
// Size: 0x40 (Inherited: 0x28)
struct UHyperlinkDecorator : URichTextBlockDecorator {
	struct UDataTable* HlinkSet; // 0x28(0x08)
	struct FString HlContent; // 0x30(0x10)

	void ClickFunc(); // Function Solarland.HyperlinkDecorator.ClickFunc // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.IMChatObject
// Size: 0x38 (Inherited: 0x28)
struct UIMChatObject : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	bool GMEIsInRoom; // 0x30(0x01)
	bool NertcIsInRoom; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)

	void UnInitEvents(); // Function Solarland.IMChatObject.UnInitEvents // (Final|Native|Public) // @ game+0x26d4b50
	void SendPlayerPosToIMServerEveryFrame(struct FVector& PlayerPosition, struct FRotator& PlayerRotator, float DeltaTime); // Function Solarland.IMChatObject.SendPlayerPosToIMServerEveryFrame // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x26d4a20
	void NotifyBattlePlayerChanged(int32_t NumPlayers, int32_t PreviousNumPlayers); // Function Solarland.IMChatObject.NotifyBattlePlayerChanged // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void InitEnvents(); // Function Solarland.IMChatObject.InitEnvents // (Final|Native|Public) // @ game+0x26d3450
};

// Class Solarland.InteractionDetectionComponent
// Size: 0x560 (Inherited: 0x560)
struct UInteractionDetectionComponent : USphereComponent {
};

// Class Solarland.ItemAttributeSet
// Size: 0x110 (Inherited: 0x30)
struct UItemAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData MaxSMGAmmo; // 0x30(0x10)
	struct FGameplayAttributeData CurrentSMGAmmo; // 0x40(0x10)
	struct FGameplayAttributeData MaxARAmmo; // 0x50(0x10)
	struct FGameplayAttributeData CurrentARAmmo; // 0x60(0x10)
	struct FGameplayAttributeData MaxSRAmmo; // 0x70(0x10)
	struct FGameplayAttributeData CurrentSRAmmo; // 0x80(0x10)
	struct FGameplayAttributeData MaxSGAmmo; // 0x90(0x10)
	struct FGameplayAttributeData CurrentSGAmmo; // 0xa0(0x10)
	struct FGameplayAttributeData MaxEnergyAmmo; // 0xb0(0x10)
	struct FGameplayAttributeData CurrentEnergyAmmo; // 0xc0(0x10)
	struct FGameplayAttributeData ItemCutDownMultiple; // 0xd0(0x10)
	struct FGameplayAttributeData TempSTGAmmoIncrement; // 0xe0(0x10)
	struct FGameplayAttributeData TempSMGAmmoIncrement; // 0xf0(0x10)
	struct FGameplayAttributeData TempShieldRechargerIncrement; // 0x100(0x10)

	void OnRep_MaxSRAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxSRAmmo // (Native|Protected|HasOutParms) // @ game+0x2694320
	void OnRep_MaxSMGAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxSMGAmmo // (Native|Protected|HasOutParms) // @ game+0x265d9e0
	void OnRep_MaxSGAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxSGAmmo // (Native|Protected|HasOutParms) // @ game+0x2694470
	void OnRep_MaxEnergyAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxEnergyAmmo // (Native|Protected|HasOutParms) // @ game+0x2697e10
	void OnRep_MaxARAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxARAmmo // (Native|Protected|HasOutParms) // @ game+0x265d930
	void OnRep_ItemCutDownMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_ItemCutDownMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x26d4980
	void OnRep_CurrentSRAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentSRAmmo // (Native|Protected|HasOutParms) // @ game+0x2693f40
	void OnRep_CurrentSMGAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentSMGAmmo // (Native|Protected|HasOutParms) // @ game+0x265d880
	void OnRep_CurrentSGAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentSGAmmo // (Native|Protected|HasOutParms) // @ game+0x2693ff0
	void OnRep_CurrentEnergyAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentEnergyAmmo // (Native|Protected|HasOutParms) // @ game+0x2697d60
	void OnRep_CurrentARAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentARAmmo // (Native|Protected|HasOutParms) // @ game+0x2694520
};

// Class Solarland.WidgetControlGroup
// Size: 0x280 (Inherited: 0x260)
struct UWidgetControlGroup : UUserWidget {
	struct UNamedSlot* ControlledWidget; // 0x260(0x08)
	struct TArray<struct UWidgetControlUnit*> WidgetControls; // 0x268(0x10)
	char pad_278[0x8]; // 0x278(0x08)

	void SetControlledWidgetActive(bool bActive); // Function Solarland.WidgetControlGroup.SetControlledWidgetActive // (Native|Event|Protected|BlueprintEvent) // @ game+0x29f64d0
	bool IsControlledWidgetActive(bool bUpdateCache); // Function Solarland.WidgetControlGroup.IsControlledWidgetActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f5a40
};

// Class Solarland.JetFlyControlGroup
// Size: 0x288 (Inherited: 0x280)
struct UJetFlyControlGroup : UWidgetControlGroup {
	bool bUsedForVertical; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
};

// Class Solarland.JetFlyControlWidget
// Size: 0x500 (Inherited: 0x400)
struct UJetFlyControlWidget : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	bool bUsedForVertical; // 0x410(0x01)
	char pad_411[0x1]; // 0x411(0x01)
	bool bAffectedByEmp; // 0x412(0x01)
	bool bIsCooldown; // 0x413(0x01)
	char pad_414[0x64]; // 0x414(0x64)
	struct UImage* ProgressGrid; // 0x478(0x08)
	struct UWidget* FlushAngel; // 0x480(0x08)
	struct UMaterialInterface* ProgressGridBase; // 0x488(0x08)
	struct TArray<struct FName> ProgressColor; // 0x490(0x10)
	struct FName GridName; // 0x4a0(0x08)
	struct FName ProgressName; // 0x4a8(0x08)
	char pad_4B0[0x8]; // 0x4b0(0x08)
	int32_t CurrentTimes; // 0x4b8(0x04)
	char pad_4BC[0x1c]; // 0x4bc(0x1c)
	struct TArray<struct FVector2D> VisibleSegment_Vert; // 0x4d8(0x10)
	struct TArray<struct FVector2D> VisibleSegment_Hori; // 0x4e8(0x10)
	bool bRapidBoostActivated; // 0x4f8(0x01)
	char pad_4F9[0x7]; // 0x4f9(0x07)

	void UpdateJetTimesProgress(float OriginProgress, float AdjustedProgress); // Function Solarland.JetFlyControlWidget.UpdateJetTimesProgress // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshSwitchState(bool bHasTimes, bool bInIsCooldown, bool bIsForbidden, bool bInAffectedByEmp); // Function Solarland.JetFlyControlWidget.RefreshSwitchState // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshOnRapidBoostActiveChanged(bool bIsActive); // Function Solarland.JetFlyControlWidget.RefreshOnRapidBoostActiveChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshOnEMPStateChanged(bool bActive); // Function Solarland.JetFlyControlWidget.RefreshOnEMPStateChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshCooldownView(float InValue, struct FText& InValueText, float InPercent); // Function Solarland.JetFlyControlWidget.RefreshCooldownView // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshColorForLevel(int32_t Level, struct FItemQualityData& Config); // Function Solarland.JetFlyControlWidget.RefreshColorForLevel // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnRapidBoostActivationChanged(bool bActivated); // Function Solarland.JetFlyControlWidget.OnRapidBoostActivationChanged // (Final|Native|Protected) // @ game+0x26d47d0
	void OnJetTimesChanged(int32_t NewTimes); // Function Solarland.JetFlyControlWidget.OnJetTimesChanged // (Final|Native|Protected) // @ game+0x26d46b0
	void OnJetModuleLvChanged(int32_t NewLevel); // Function Solarland.JetFlyControlWidget.OnJetModuleLvChanged // (Final|Native|Protected) // @ game+0x26d4470
	void OnJetModuleLevelChanged(int32_t NewLevel); // Function Solarland.JetFlyControlWidget.OnJetModuleLevelChanged // (Final|Native|Protected) // @ game+0x26d4470
	void OnJetMaxTimesChanged(int32_t NewTimes); // Function Solarland.JetFlyControlWidget.OnJetMaxTimesChanged // (Final|Native|Protected) // @ game+0x26d4350
	void OnForbiddenTypesChanged(enum class EJetFlyForbiddenType Type, bool bAdded); // Function Solarland.JetFlyControlWidget.OnForbiddenTypesChanged // (Final|Native|Protected) // @ game+0x26d41b0
	void OnEMPEffected(struct ASolarCharacter* EffectedCharacter, bool bEMPActive); // Function Solarland.JetFlyControlWidget.OnEMPEffected // (Final|Native|Protected) // @ game+0x26d3e70
	void OnChargingProgressSet(float InValue, float InPercent); // Function Solarland.JetFlyControlWidget.OnChargingProgressSet // (Final|Native|Protected) // @ game+0x26d3cd0
	void OnChargeStateChanged(bool bStart); // Function Solarland.JetFlyControlWidget.OnChargeStateChanged // (Final|Native|Protected) // @ game+0x26d3bb0
	void OnCharacterSet(struct ASolarCharacter* InCharacter); // Function Solarland.JetFlyControlWidget.OnCharacterSet // (Final|Native|Protected) // @ game+0x26d3b20
	void OnCharacterSelfRebirth(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetFlyControlWidget.OnCharacterSelfRebirth // (Final|Native|Protected) // @ game+0x26d3a00
	void OnCDStateChanged(bool bStart); // Function Solarland.JetFlyControlWidget.OnCDStateChanged // (Final|Native|Protected) // @ game+0x26d38e0
	void OnCDProgressSet(float InValue, float InPercent); // Function Solarland.JetFlyControlWidget.OnCDProgressSet // (Final|Native|Protected) // @ game+0x26d3740
	void K2_OnJetTimesChanged(int32_t PrevTimes, int32_t PostTimes); // Function Solarland.JetFlyControlWidget.K2_OnJetTimesChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void InitializeWithCharacter(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetFlyControlWidget.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x26d3470
};

// Class Solarland.WidgetControlUnit
// Size: 0x278 (Inherited: 0x260)
struct UWidgetControlUnit : UUserWidget {
	char pad_260[0x18]; // 0x260(0x18)

	void SetControlActive(bool bActive); // Function Solarland.WidgetControlUnit.SetControlActive // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x29f64d0
	void OnOtherActiveChanged(struct UWidgetControlUnit* OtherUnit); // Function Solarland.WidgetControlUnit.OnOtherActiveChanged // (Native|Event|Public|BlueprintEvent) // @ game+0xbdf9a0
	void OnGroupInitialized(struct UWidgetControlGroup* ControlGroup); // Function Solarland.WidgetControlUnit.OnGroupInitialized // (Native|Event|Public|BlueprintEvent) // @ game+0x29f5c10
	bool IsControlActive(); // Function Solarland.WidgetControlUnit.IsControlActive // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x29f5a10
};

// Class Solarland.JetFlyEMPControl
// Size: 0x280 (Inherited: 0x278)
struct UJetFlyEMPControl : UWidgetControlUnit {
	struct UWidgetAnimation* Anim_EMP; // 0x278(0x08)

	void OnEMPEffected(struct ASolarCharacter* EffectedCharacter, bool bEMPActive); // Function Solarland.JetFlyEMPControl.OnEMPEffected // (Final|Native|Protected) // @ game+0x26d3f40
	void InitializeWithCharacter(struct ASolarCharacter* InCharacter); // Function Solarland.JetFlyEMPControl.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x26d3500
};

// Class Solarland.JetFlyForceControl
// Size: 0x2e8 (Inherited: 0x278)
struct UJetFlyForceControl : UWidgetControlUnit {
	char pad_278[0x70]; // 0x278(0x70)

	void SwitchForceControlWidget(bool bRapidBoost); // Function Solarland.JetFlyForceControl.SwitchForceControlWidget // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetContentVisibility(bool bShowContent); // Function Solarland.JetFlyForceControl.SetContentVisibility // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetContentColorAndOpacity(struct FLinearColor& Color); // Function Solarland.JetFlyForceControl.SetContentColorAndOpacity // (Event|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnRapidBoostActivationChanged(bool bActivated); // Function Solarland.JetFlyForceControl.OnRapidBoostActivationChanged // (Final|Native|Protected) // @ game+0x26d4860
	void OnJetModuleLvChanged(int32_t NewLevel); // Function Solarland.JetFlyForceControl.OnJetModuleLvChanged // (Final|Native|Protected) // @ game+0x26d4500
	void OnForbiddenTypesChanged(enum class EJetFlyForbiddenType Type, bool bAdded); // Function Solarland.JetFlyForceControl.OnForbiddenTypesChanged // (Final|Native|Protected) // @ game+0x26d4280
	void InitializeWithCharacter(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetFlyForceControl.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x26d3590
};

// Class Solarland.JetFlyIcon
// Size: 0x408 (Inherited: 0x400)
struct UJetFlyIcon : USolarUserWidget {
	bool bUsedForVertical; // 0x400(0x01)
	char pad_401[0x7]; // 0x401(0x07)

	void RefreshOnEMPStateChanged(bool bActive); // Function Solarland.JetFlyIcon.RefreshOnEMPStateChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshColorForLevel(int32_t Level, struct FItemQualityData& Config); // Function Solarland.JetFlyIcon.RefreshColorForLevel // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnJetModuleLvChanged(int32_t NewLevel); // Function Solarland.JetFlyIcon.OnJetModuleLvChanged // (Final|Native|Protected) // @ game+0x26d4590
	void OnEMPEffected(struct ASolarCharacter* EffectedCharacter, bool bEMPActive); // Function Solarland.JetFlyIcon.OnEMPEffected // (Final|Native|Protected) // @ game+0x26d4010
	void OnCharacterSet(struct ASolarCharacter* InCharacter); // Function Solarland.JetFlyIcon.OnCharacterSet // (Final|Native|Protected) // @ game+0x26d3a90
	void OnCharacterSelfRebirth(struct ASolarCharacter* InCharacter); // Function Solarland.JetFlyIcon.OnCharacterSelfRebirth // (Final|Native|Protected) // @ game+0x26d3a90
};

// Class Solarland.JetFlyInnerCDControl
// Size: 0x2b0 (Inherited: 0x278)
struct UJetFlyInnerCDControl : UWidgetControlUnit {
	struct UGaugeImage* ImgCD; // 0x278(0x08)
	struct UTextBlock* TxtCD; // 0x280(0x08)
	struct TArray<struct UObject*> OtherInactiveControls; // 0x288(0x10)
	char pad_298[0x18]; // 0x298(0x18)

	void OnCDStateChanged(bool bStart); // Function Solarland.JetFlyInnerCDControl.OnCDStateChanged // (Final|Native|Protected) // @ game+0x26d3970
	void OnCDProgressSet(float InValue, float InPercent); // Function Solarland.JetFlyInnerCDControl.OnCDProgressSet // (Final|Native|Protected) // @ game+0x26d3810
	void InitializeWithCharacter(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetFlyInnerCDControl.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x26d3620
};

// Class Solarland.JetFlyTimesControl
// Size: 0x338 (Inherited: 0x278)
struct UJetFlyTimesControl : UWidgetControlUnit {
	char pad_278[0x10]; // 0x278(0x10)
	struct UImage* ProgressGrid; // 0x288(0x08)
	struct UImage* FinishPrompt; // 0x290(0x08)
	struct UWidgetAnimation* Anim_CD_Prompt; // 0x298(0x08)
	struct UWidgetAnimation* Anim_EMP; // 0x2a0(0x08)
	struct UWidgetAnimation* Anim_Resume; // 0x2a8(0x08)
	struct UMaterialInterface* ProgressGridBase; // 0x2b0(0x08)
	struct TArray<struct FName> ProgressColor; // 0x2b8(0x10)
	struct FName GridName; // 0x2c8(0x08)
	struct FName ProgressName; // 0x2d0(0x08)
	char pad_2D8[0x28]; // 0x2d8(0x28)
	struct UWidget* FlushAngel; // 0x300(0x08)
	struct UWidgetAnimation* Anim_RapidBoostFlush; // 0x308(0x08)
	struct TArray<struct FVector2D> VisibleSegment_Vert; // 0x310(0x10)
	struct TArray<struct FVector2D> VisibleSegment_Hori; // 0x320(0x10)
	char pad_330[0x8]; // 0x330(0x08)

	void OnRapidBoostActivationChanged(bool bActivated); // Function Solarland.JetFlyTimesControl.OnRapidBoostActivationChanged // (Final|Native|Protected) // @ game+0x26d48f0
	void OnJetTimesChanged(int32_t NewTimes); // Function Solarland.JetFlyTimesControl.OnJetTimesChanged // (Final|Native|Protected) // @ game+0x26d4740
	void OnJetModuleLvChanged(int32_t NewLv); // Function Solarland.JetFlyTimesControl.OnJetModuleLvChanged // (Final|Native|Protected) // @ game+0x26d4620
	void OnJetMaxTimesChanged(int32_t NewTimes); // Function Solarland.JetFlyTimesControl.OnJetMaxTimesChanged // (Final|Native|Protected) // @ game+0x26d43e0
	void OnEMPEffected(struct ASolarCharacter* EffectedCharacter, bool bEMPActive); // Function Solarland.JetFlyTimesControl.OnEMPEffected // (Final|Native|Protected) // @ game+0x26d40e0
	void OnChargingProgressSet(float InValue, float InPercent); // Function Solarland.JetFlyTimesControl.OnChargingProgressSet // (Final|Native|Protected) // @ game+0x26d3da0
	void OnChargeStateChanged(bool bStart); // Function Solarland.JetFlyTimesControl.OnChargeStateChanged // (Final|Native|Protected) // @ game+0x26d3c40
	void InitializeWithCharacter(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetFlyTimesControl.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x26d36b0
};

// Class Solarland.JetPackConfig
// Size: 0xb0 (Inherited: 0x30)
struct UJetPackConfig : UDataAsset {
	float CurrentSpeedResidueHorizontal; // 0x30(0x04)
	float CurrentSpeedResidueVertical; // 0x34(0x04)
	float AltitudeLimitation; // 0x38(0x04)
	float DashHeightForLimitedAltitude; // 0x3c(0x04)
	float SlantDashInputThreshold; // 0x40(0x04)
	float VerticalDashTime; // 0x44(0x04)
	float VerticalDashHeight; // 0x48(0x04)
	float VerticalDashAngle; // 0x4c(0x04)
	float VerticalDashMaxHorizontalEndSpeed; // 0x50(0x04)
	float VerticalDashBreakableTime; // 0x54(0x04)
	float VerticalDashCameraFadeOutTime; // 0x58(0x04)
	float SlantDashTime; // 0x5c(0x04)
	float SlantDashHeight; // 0x60(0x04)
	float SlantDashAngle; // 0x64(0x04)
	float SlantDashMaxHorizontalEndSpeed; // 0x68(0x04)
	float SlantDashBreakableTime; // 0x6c(0x04)
	float SlantDashCameraFadeOutTime; // 0x70(0x04)
	float HorizontalDashTime; // 0x74(0x04)
	float HorizontalDashDistance; // 0x78(0x04)
	float HorizontalDashAngle; // 0x7c(0x04)
	float HorizontalDashEndSpeed; // 0x80(0x04)
	float HorizontalDashBreakableTime; // 0x84(0x04)
	float HorizontalDashCameraFadeOutTime; // 0x88(0x04)
	float UnderWaterHorizontalDashTime; // 0x8c(0x04)
	float UnderWaterHorizontalDashDistance; // 0x90(0x04)
	float UnderWaterHorizontalDashBreakableTime; // 0x94(0x04)
	float UnderWaterHorizontalDashCameraFadeOutTime; // 0x98(0x04)
	struct FVehicleEjectParams DefaultVehicleEjectParams; // 0x9c(0x10)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.SolarMovablePad
// Size: 0x570 (Inherited: 0x260)
struct USolarMovablePad : UUserWidget {
	enum class EInputEventHandleType InputEventHandle; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)
	struct FMulticastInlineDelegate OnPressed; // 0x268(0x10)
	struct FMulticastInlineDelegate OnReleased; // 0x278(0x10)
	struct FMulticastInlineDelegate OnMoving; // 0x288(0x10)
	enum class EMovablePadLimitationFlag LimitationFlag; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct UBorder* PadBase; // 0x2a0(0x08)
	struct UNamedSlot* MovableWidget; // 0x2a8(0x08)
	bool bWidgetStationary; // 0x2b0(0x01)
	char pad_2B1[0x3]; // 0x2b1(0x03)
	struct FMargin InnerPadding; // 0x2b4(0x10)
	char pad_2C4[0xc]; // 0x2c4(0x0c)
	struct FSlateBrush NormalBackground; // 0x2d0(0xe0)
	struct FSlateBrush PressedBackground; // 0x3b0(0xe0)
	struct FKey PointerAction; // 0x490(0x18)
	struct FKey MoveXAxis; // 0x4a8(0x18)
	struct FKey MoveYAxis; // 0x4c0(0x18)
	bool bOnlySimulateCapturedMove; // 0x4d8(0x01)
	bool bUsingTouchPriority; // 0x4d9(0x01)
	enum class ETouchMovePriority TouchMovePriority; // 0x4da(0x01)
	char pad_4DB[0x95]; // 0x4db(0x95)

	void ForceReleasePad(); // Function Solarland.SolarMovablePad.ForceReleasePad // (Final|Native|Public|BlueprintCallable) // @ game+0x2841f40
};

// Class Solarland.JetPad
// Size: 0x5b0 (Inherited: 0x570)
struct UJetPad : USolarMovablePad {
	char pad_570[0x10]; // 0x570(0x10)
	struct UBorder* PadBaseUnder; // 0x580(0x08)
	struct UPanelWidget* RapidBoostEffects; // 0x588(0x08)
	struct UImage* RapidBoostEffect01; // 0x590(0x08)
	struct UImage* RapidBoostEffect02; // 0x598(0x08)
	struct UWidgetAnimation* Anim_RapidBoost_Loop; // 0x5a0(0x08)
	bool bJetVertical; // 0x5a8(0x01)
	char pad_5A9[0x7]; // 0x5a9(0x07)

	void OnRapidBoostActivationChanged(bool bActivated); // Function Solarland.JetPad.OnRapidBoostActivationChanged // (Final|Native|Protected) // @ game+0x26d9450
	void OnJetModuleLevelChanged(int32_t NewLevel); // Function Solarland.JetPad.OnJetModuleLevelChanged // (Final|Native|Protected) // @ game+0x26d91d0
	void InitializeWithCharacter(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetPad.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x26d8ef0
};

// Class Solarland.JobEffectDetailItemWidget
// Size: 0x420 (Inherited: 0x400)
struct UJobEffectDetailItemWidget : USolarUserWidget {
	struct UImage* Image_Icon; // 0x400(0x08)
	struct USolarRichTextBlock* Text_Info; // 0x408(0x08)
	struct USolarTextBlock* Text_Category; // 0x410(0x08)
	struct USolarTextBlock* Text_Name; // 0x418(0x08)

	void RefreshColor(struct FBattleUpgradeEffectCategoryColorSet& ColorSet); // Function Solarland.JobEffectDetailItemWidget.RefreshColor // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarPanelWidget
// Size: 0x450 (Inherited: 0x400)
struct USolarPanelWidget : USolarUserWidget {
	struct UCanvasPanel* CanvasPanel_Bg; // 0x400(0x08)
	struct UCanvasPanel* CanvasPanel_Content; // 0x408(0x08)
	struct FDelegate AnimationEnterStartedEvent; // 0x410(0x10)
	struct FDelegate AnimationEnterFinishedEvent; // 0x420(0x10)
	struct FDelegate AnimationExitStartedEvent; // 0x430(0x10)
	struct FDelegate AnimationExitFinishedEvent; // 0x440(0x10)

	void OnAnimationExitStarted(); // Function Solarland.SolarPanelWidget.OnAnimationExitStarted // (Final|Native|Protected) // @ game+0x28465d0
	void OnAnimationExitFinished(); // Function Solarland.SolarPanelWidget.OnAnimationExitFinished // (Final|Native|Protected) // @ game+0x28465f0
	void OnAnimationEnterStarted(); // Function Solarland.SolarPanelWidget.OnAnimationEnterStarted // (Final|Native|Protected) // @ game+0x28465d0
	void OnAnimationEnterFinished(); // Function Solarland.SolarPanelWidget.OnAnimationEnterFinished // (Final|Native|Protected) // @ game+0x28465b0
};

// Class Solarland.JobEffectDetailPanel
// Size: 0x450 (Inherited: 0x450)
struct UJobEffectDetailPanel : USolarPanelWidget {

	struct TArray<struct UJobEffectDetailItemWidget*> GetItemWidgets(); // Function Solarland.JobEffectDetailPanel.GetItemWidgets // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.JobEffectItemWidget
// Size: 0x410 (Inherited: 0x400)
struct UJobEffectItemWidget : USolarUserWidget {
	struct USolarTextBlock* Text_Number; // 0x400(0x08)
	struct UImage* Img_Icon; // 0x408(0x08)

	void RefreshColor(struct FBattleUpgradeEffectCategoryColorSet& ColorSet); // Function Solarland.JobEffectItemWidget.RefreshColor // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void PlayRefreshAnimation(); // Function Solarland.JobEffectItemWidget.PlayRefreshAnimation // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.JobEffectSelectOptionWidget
// Size: 0x438 (Inherited: 0x400)
struct UJobEffectSelectOptionWidget : USolarUserWidget {
	struct UImage* Image_Icon; // 0x400(0x08)
	struct USolarRichTextBlock* Text_Info; // 0x408(0x08)
	struct USolarTextBlock* Text_Category; // 0x410(0x08)
	struct UWidgetAnimation* Anim_Select; // 0x418(0x08)
	struct UButton* Button_Select; // 0x420(0x08)
	struct FDelegate OnSelected; // 0x428(0x10)

	void RefreshColor(struct FBattleUpgradeEffectCategoryColorSet& ColorSet); // Function Solarland.JobEffectSelectOptionWidget.RefreshColor // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnSelected__DelegateSignature(struct UJobEffectSelectOptionWidget* Widget); // DelegateFunction Solarland.JobEffectSelectOptionWidget.OnSelected__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void OnSelectButtonClicked(); // Function Solarland.JobEffectSelectOptionWidget.OnSelectButtonClicked // (Final|Native|Protected) // @ game+0x26d9520
	void OnSelectAnimFinished(); // Function Solarland.JobEffectSelectOptionWidget.OnSelectAnimFinished // (Final|Native|Protected) // @ game+0x26d9500
};

// Class Solarland.JobEffectSelectPanel
// Size: 0x430 (Inherited: 0x400)
struct UJobEffectSelectPanel : USolarUserWidget {
	struct UWidgetAnimation* Anim_Enter; // 0x400(0x08)
	struct UWidgetAnimation* Anim_Quit; // 0x408(0x08)
	struct TArray<struct UJobEffectSelectOptionWidget*> OptionWidgets; // 0x410(0x10)
	char pad_420[0x10]; // 0x420(0x10)

	void OnSelectingJobEffectBegin(struct ASolarCharacter* Target, int32_t Level, struct TArray<int32_t>& EffectIDArray); // Function Solarland.JobEffectSelectPanel.OnSelectingJobEffectBegin // (Final|Native|Protected|HasOutParms) // @ game+0x26d9540
	void OnOptionWidgetClicked(struct UJobEffectSelectOptionWidget* OptionWidget); // Function Solarland.JobEffectSelectPanel.OnOptionWidgetClicked // (Final|Native|Protected) // @ game+0x26d92f0
	void OnFadeOutFinished(); // Function Solarland.JobEffectSelectPanel.OnFadeOutFinished // (Final|Native|Protected) // @ game+0x2661bb0
};

// Class Solarland.KeyMappingFileMgr
// Size: 0xa8 (Inherited: 0x28)
struct UKeyMappingFileMgr : UObject {
	char pad_28[0x80]; // 0x28(0x80)
};

// Class Solarland.KeyMappingManager
// Size: 0x270 (Inherited: 0x28)
struct UKeyMappingManager : UObject {
	char pad_28[0xf8]; // 0x28(0xf8)
	struct FMulticastInlineDelegate OnKeyMappingUpdate; // 0x120(0x10)
	struct FMulticastInlineDelegate OnKeyMappingConfirm; // 0x130(0x10)
	struct FMulticastInlineDelegate OnKeyboardUpdate; // 0x140(0x10)
	char pad_150[0x10]; // 0x150(0x10)
	struct TMap<struct FString, struct FString> OccupiedKeyMap; // 0x160(0x50)
	char pad_1B0[0xb0]; // 0x1b0(0xb0)
	struct UKeyMappingFileMgr* KeyMappingFileMgr; // 0x260(0x08)
	char pad_268[0x8]; // 0x268(0x08)

	void SwitchKeyMappingPlanIndex(int32_t PlanIndex); // Function Solarland.KeyMappingManager.SwitchKeyMappingPlanIndex // (Final|Native|Public) // @ game+0x26d9b90
	void SwitchKeyMapping(struct FString ActionName, int32_t SettingIndex, bool Enable, bool Force); // Function Solarland.KeyMappingManager.SwitchKeyMapping // (Final|Native|Public) // @ game+0x26d9a10
	void ResetKeyMapping(); // Function Solarland.KeyMappingManager.ResetKeyMapping // (Final|Native|Public) // @ game+0x26d98a0
	bool IsComboKey(struct FString KeyName); // Function Solarland.KeyMappingManager.IsComboKey // (Final|Native|Public|BlueprintCallable) // @ game+0x26d8f80
	void ImportKeyMappingSetting(); // Function Solarland.KeyMappingManager.ImportKeyMappingSetting // (Final|Native|Public) // @ game+0x26d8ed0
	bool HasKeyModified(); // Function Solarland.KeyMappingManager.HasKeyModified // (Final|Native|Public|BlueprintCallable) // @ game+0x26d8e80
	struct TArray<struct FString> GetAllActionNames(int32_t PlanIndex); // Function Solarland.KeyMappingManager.GetAllActionNames // (Final|Native|Public|BlueprintCallable) // @ game+0x26d8ca0
	struct TArray<struct FString> GetActionKeyMapping(struct FString ActionName, int32_t PlanIndex, int32_t SettingIndex); // Function Solarland.KeyMappingManager.GetActionKeyMapping // (Final|Native|Public|BlueprintCallable) // @ game+0x26d8b20
	void ApplyResult(); // Function Solarland.KeyMappingManager.ApplyResult // (Final|Native|Public) // @ game+0x26d8540
};

// Class Solarland.KillInfoManager
// Size: 0x5b8 (Inherited: 0x228)
struct AKillInfoManager : AGameManagerBase {
	struct TArray<enum class EKillNoticeType> KillEffectsOrder; // 0x228(0x10)
	struct TArray<enum class EKillNoticeType> GlobalInfoList; // 0x238(0x10)
	char pad_248[0x1f0]; // 0x248(0x1f0)
	struct FString KillLeaderID; // 0x438(0x10)
	int32_t KillLeaderKillNum; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct FString AnnihilatorID; // 0x450(0x10)
	char pad_460[0x8]; // 0x460(0x08)
	struct FString KillLeaderChangeVoiceName; // 0x468(0x10)
	struct FString KillLeaderShutDownVoiceName; // 0x478(0x10)
	struct FString BeKillLeaderVoiceName; // 0x488(0x10)
	struct FString ShutDownKillLeaderVoiceName; // 0x498(0x10)
	struct TMap<int32_t, struct FString> KillTotalVoiceMap; // 0x4a8(0x50)
	struct TMap<int32_t, struct FString> ComboKillSoundEffectMap; // 0x4f8(0x50)
	struct FString RevengeVoiceName; // 0x548(0x10)
	struct FString KillDownVoiceName; // 0x558(0x10)
	struct FString ClearTeamVoiceName; // 0x568(0x10)
	struct FString ShutDownVoiceName; // 0x578(0x10)
	struct FString KillDefenderVoiceName; // 0x588(0x10)
	struct UCustomNoticeImageTable* NoticeImageConfig; // 0x598(0x08)
	char pad_5A0[0x18]; // 0x5a0(0x18)

	bool PlayKillInfoVoice(struct FNoticeData& InNoticeData, struct FDelegate& InDelegate); // Function Solarland.KillInfoManager.PlayKillInfoVoice // (Final|Native|Protected|HasOutParms) // @ game+0x26d9690
	void OnRep_KillLeaderID(); // Function Solarland.KillInfoManager.OnRep_KillLeaderID // (Final|Native|Public) // @ game+0x26d94e0
	void ClientKillInfoNotify(struct ASolarPlayerState* InKiller, struct ASolarPlayerState* InVictim, int32_t KillExtraInfoHashValue); // Function Solarland.KillInfoManager.ClientKillInfoNotify // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x26d8a10
	void ClientKillEffectNotify(struct ASolarPlayerState* InKiller, struct ASolarPlayerState* InVictim, int32_t KillEffectExtraInfoHashValue); // Function Solarland.KillInfoManager.ClientKillEffectNotify // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x26d8900
};

// Class Solarland.KillReportWidget
// Size: 0x410 (Inherited: 0x400)
struct UKillReportWidget : USolarUserWidget {
	struct UImage* Img_KillBar_Common; // 0x400(0x08)
	struct UWidgetAnimation* Anim_Loop; // 0x408(0x08)

	void SetVipType(int32_t VipType); // Function Solarland.KillReportWidget.SetVipType // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetKillBackGround(struct FString BackgroundPath); // Function Solarland.KillReportWidget.SetKillBackGround // (Final|Native|Public) // @ game+0x26d9950
	void PlayLoopAnimation(); // Function Solarland.KillReportWidget.PlayLoopAnimation // (Final|Native|Public) // @ game+0x26d9880
};

// Class Solarland.ListEntry_Goods
// Size: 0x5f8 (Inherited: 0x400)
struct UListEntry_Goods : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct FMulticastInlineDelegate OnItemPurchaseRequested; // 0x408(0x10)
	struct FDelegate RequestEnergyGetter; // 0x418(0x10)
	struct FDelegate RequestItemRecommendation; // 0x428(0x10)
	struct UWidgetSwitcher* WidgetSwitcher_State; // 0x438(0x08)
	struct UCanvasPanel* State_Normal; // 0x440(0x08)
	struct UCanvasPanel* Panel_Recommend; // 0x448(0x08)
	struct UImage* Img_Item1_BG; // 0x450(0x08)
	struct UImage* Img_Item1; // 0x458(0x08)
	struct USolarTextBlock* Txt_ItemCount; // 0x460(0x08)
	struct USolarTextBlock* Txt_ItemName; // 0x468(0x08)
	struct USolarTextBlock* Txt_Introduce; // 0x470(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Buy; // 0x478(0x08)
	struct USolarButton* Btn_Buy; // 0x480(0x08)
	struct UOverlay* Overlay_Discount; // 0x488(0x08)
	struct UTextBlock* Txt_ElectricityNum_Undiscounted; // 0x490(0x08)
	struct UTextBlock* Txt_ElectricityNeeded; // 0x498(0x08)
	struct USolarButton* Btn_CantBuy; // 0x4a0(0x08)
	struct UOverlay* Overlay_Discount_CantBuy; // 0x4a8(0x08)
	struct UTextBlock* Txt_ElectricityNum_Undiscounted_CantBuy; // 0x4b0(0x08)
	struct UTextBlock* Txt_ElectricityNeeded_CantBuy; // 0x4b8(0x08)
	struct UCanvasPanel* Panel_BuySucceed; // 0x4c0(0x08)
	struct UImage* Image_BG2_3; // 0x4c8(0x08)
	struct USolarTextBlock* Txt_BuySucceed; // 0x4d0(0x08)
	struct UCanvasPanel* Panel_NotAvailable; // 0x4d8(0x08)
	struct UImage* Image_BG2; // 0x4e0(0x08)
	struct USolarTextBlock* Txt_NotAvailable; // 0x4e8(0x08)
	struct UCanvasPanel* Panel_Refresh; // 0x4f0(0x08)
	struct UCanvasPanel* State_CD; // 0x4f8(0x08)
	struct UProgressBar* Progress_CD; // 0x500(0x08)
	struct USolarTextBlock* Txt_InPrepare; // 0x508(0x08)
	struct USolarTextBlock* Txt_CD; // 0x510(0x08)
	struct UWidgetAnimation* Succeed_Anim; // 0x518(0x08)
	struct UWidgetAnimation* Refresh_Anim; // 0x520(0x08)
	struct UWidgetAnimation* Recommend_Anim; // 0x528(0x08)
	char pad_530[0x98]; // 0x530(0x98)
	struct FString AkNameGoodsRefresh; // 0x5c8(0x10)
	struct FString AkNameGoodsBuy; // 0x5d8(0x10)
	struct FString AkNameGoodsBuyFailed; // 0x5e8(0x10)

	void UpdateTexts(struct FString Name, struct FString Info, int32_t Num, int32_t Price, int32_t UndiscountedPrice); // Function Solarland.ListEntry_Goods.UpdateTexts // (Final|Native|Protected) // @ game+0x26d9c80
	void UpdateIfNotAvailable(); // Function Solarland.ListEntry_Goods.UpdateIfNotAvailable // (Final|Native|Protected) // @ game+0x26d9c60
	void UpdateCDText(); // Function Solarland.ListEntry_Goods.UpdateCDText // (Final|Native|Protected) // @ game+0x26d9c40
	void UpdateButtonBuy(); // Function Solarland.ListEntry_Goods.UpdateButtonBuy // (Final|Native|Protected) // @ game+0x26d9c20
	void ShowItemRefreshEffect(); // Function Solarland.ListEntry_Goods.ShowItemRefreshEffect // (Final|Native|Protected) // @ game+0x26d99f0
	void SetIsRecommendState(bool InIsRecommend); // Function Solarland.ListEntry_Goods.SetIsRecommendState // (Final|Native|Public) // @ game+0x26d98c0
	bool RequestItemRecommendation__DelegateSignature(int32_t ItemID); // DelegateFunction Solarland.ListEntry_Goods.RequestItemRecommendation__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	float RequestEnergyGetter__DelegateSignature(); // DelegateFunction Solarland.ListEntry_Goods.RequestEnergyGetter__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void OnSucceedAnimFinish(); // Function Solarland.ListEntry_Goods.OnSucceedAnimFinish // (Final|Native|Protected) // @ game+0x26d9670
	void OnPurchaseSuccess(int32_t InProductID, struct ASolarCharacter* InCharacter); // Function Solarland.ListEntry_Goods.OnPurchaseSuccess // (Final|Native|Protected) // @ game+0x26d9380
	void OnListItemObjectSetInternal(struct UObject* InObject); // Function Solarland.ListEntry_Goods.OnListItemObjectSetInternal // (Final|Native|Public) // @ game+0x26d9260
	void OnItemRefreshEffectFinish(); // Function Solarland.ListEntry_Goods.OnItemRefreshEffectFinish // (Final|Native|Protected) // @ game+0x26d91b0
	void OnItemRefreshAnimFinish(); // Function Solarland.ListEntry_Goods.OnItemRefreshAnimFinish // (Final|Native|Protected) // @ game+0x26d9190
	void OnItemRefresh(struct ASolarElectricShop* InElectricShop); // Function Solarland.ListEntry_Goods.OnItemRefresh // (Final|Native|Protected) // @ game+0x26d9100
	void OnItemPurchaseRequested__DelegateSignature(int32_t ProductID, bool bRecommend); // DelegateFunction Solarland.ListEntry_Goods.OnItemPurchaseRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnItemCDRefresh(struct ASolarElectricShop* InElectricShop); // Function Solarland.ListEntry_Goods.OnItemCDRefresh // (Final|Native|Protected) // @ game+0x26d9070
	void OnClickBtnCantBuy(); // Function Solarland.ListEntry_Goods.OnClickBtnCantBuy // (Final|Native|Protected) // @ game+0x26d9050
	void OnClickBtnBuy(); // Function Solarland.ListEntry_Goods.OnClickBtnBuy // (Final|Native|Protected) // @ game+0x26d9030
	void HidePurchaseEffect(); // Function Solarland.ListEntry_Goods.HidePurchaseEffect // (Final|Native|Protected) // @ game+0x26d8eb0
	float GetRemainningCD(); // Function Solarland.ListEntry_Goods.GetRemainningCD // (Final|Native|Public) // @ game+0x26d8e50
	int32_t GetItemID(); // Function Solarland.ListEntry_Goods.GetItemID // (Final|Native|Public) // @ game+0x26d8e20
	float GetDiscountedPrice(float Price); // Function Solarland.ListEntry_Goods.GetDiscountedPrice // (Final|Native|Protected) // @ game+0x26d8d80
	void CheckToShowItemRefreshEffect(); // Function Solarland.ListEntry_Goods.CheckToShowItemRefreshEffect // (Final|Native|Protected) // @ game+0x26d88e0
	void CheckStartCD(bool InCheckBuyer); // Function Solarland.ListEntry_Goods.CheckStartCD // (Final|Native|Protected) // @ game+0x26d8850
	void CheckRecommendStateImmediately(); // Function Solarland.ListEntry_Goods.CheckRecommendStateImmediately // (Final|Native|Public) // @ game+0x26d8830
	void CheckEnergyAvaliableImmediately(); // Function Solarland.ListEntry_Goods.CheckEnergyAvaliableImmediately // (Final|Native|Public) // @ game+0x26d8810
	void CheckEnergyAvaliable(float CurrentValue); // Function Solarland.ListEntry_Goods.CheckEnergyAvaliable // (Final|Native|Public) // @ game+0x26d8790
	void CachedNewData(struct FElectricShopItem& InNewItemData); // Function Solarland.ListEntry_Goods.CachedNewData // (Final|Native|Protected|HasOutParms) // @ game+0x26d86f0
	void BindDelegates(); // Function Solarland.ListEntry_Goods.BindDelegates // (Final|Native|Protected) // @ game+0x26d86d0
	void AsyncLoadTextutes(int32_t InQuality, struct FString Icon, enum class EItemType InType); // Function Solarland.ListEntry_Goods.AsyncLoadTextutes // (Final|Native|Protected) // @ game+0x26d8560
};

// Class Solarland.LoadingAnim
// Size: 0x260 (Inherited: 0x260)
struct ULoadingAnim : UUserWidget {

	void StopLoadingAnimation(); // Function Solarland.LoadingAnim.StopLoadingAnimation // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void StartLoadingAnimation(); // Function Solarland.LoadingAnim.StartLoadingAnimation // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.LoadingBgDataAsset
// Size: 0x40 (Inherited: 0x30)
struct ULoadingBgDataAsset : UDataAsset {
	struct TArray<struct FULoadingDataEntry> LoadingDataConfig; // 0x30(0x10)
};

// Class Solarland.SolarLoadingSetting
// Size: 0x60 (Inherited: 0x38)
struct USolarLoadingSetting : UDeveloperSettings {
	struct TArray<float> DataTraceTimeTrigger; // 0x38(0x10)
	bool bEnableLoadingReport; // 0x48(0x01)
	bool bEnableShowLoadingTasks; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
	struct FString ReportMapMustHaveStr; // 0x50(0x10)
};

// Class Solarland.LoadingUIBase
// Size: 0x4a8 (Inherited: 0x260)
struct ULoadingUIBase : ULoadingWidgetBase {
	struct UImage* Img_Bg; // 0x260(0x08)
	struct UProgressBar* LoadProgress; // 0x268(0x08)
	struct USolarTextBlock* Txt_Percent_Num; // 0x270(0x08)
	struct USolarTextBlock* Txt_Tips; // 0x278(0x08)
	struct USolarTextBlock* Txt_Tips_Title; // 0x280(0x08)
	struct USolarTextBlock* Txt_Tips_Left; // 0x288(0x08)
	struct USolarTextBlock* Txt_Tips_Mid; // 0x290(0x08)
	struct USolarTextBlock* Txt_Tips_Right; // 0x298(0x08)
	struct TMap<struct FString, struct UTexture2D*> BGImgMap; // 0x2a0(0x50)
	struct USolarTextBlock* Txt_Task_2; // 0x2f0(0x08)
	struct USolarTextBlock* Txt_Task_3; // 0x2f8(0x08)
	struct USolarTextBlock* Txt_Task_4; // 0x300(0x08)
	struct USolarTextBlock* Txt_Task_5; // 0x308(0x08)
	struct USolarTextBlock* Txt_Task_6; // 0x310(0x08)
	struct USolarTextBlock* Txt_Task_7; // 0x318(0x08)
	struct USolarTextBlock* Txt_Task_8; // 0x320(0x08)
	char pad_328[0x158]; // 0x328(0x158)
	struct TArray<struct FULoadingDataEntry> ShowBgLoadingArray; // 0x480(0x10)
	char pad_490[0x10]; // 0x490(0x10)
	float FakeProgress; // 0x4a0(0x04)
	char pad_4A4[0x4]; // 0x4a4(0x04)

	void StartDisplayLoading(struct TArray<struct FULoadingDataEntry>& InLoadingBgArray, float InShowBgTime, bool bInOrder, float InShowTipsTime); // Function Solarland.LoadingUIBase.StartDisplayLoading // (Final|Native|Public|HasOutParms) // @ game+0x26df700
	void SetTips(struct FText& InTips); // Function Solarland.LoadingUIBase.SetTips // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26df520
	void SetLoadingProgress(float InPercent); // Function Solarland.LoadingUIBase.SetLoadingProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x26df270
	void SetFakeProgress(float NewProgress); // Function Solarland.LoadingUIBase.SetFakeProgress // (Final|Native|Protected|BlueprintCallable) // @ game+0x26df1f0
	void SetBGImgFromPath(struct FSoftObjectPath& Path); // Function Solarland.LoadingUIBase.SetBGImgFromPath // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x26deff0
	void SetBGImg(struct FString ImgName); // Function Solarland.LoadingUIBase.SetBGImg // (Final|Native|Public|BlueprintCallable) // @ game+0x26def50
	void OnWidgetReleasedAsLoadingScreen(struct UObject* Outer); // Function Solarland.LoadingUIBase.OnWidgetReleasedAsLoadingScreen // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnWidgetCreatedAsLoadingScreen(struct UObject* Outer); // Function Solarland.LoadingUIBase.OnWidgetCreatedAsLoadingScreen // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnLevelPreLoad(struct FString MapPackageName); // Function Solarland.LoadingUIBase.OnLevelPreLoad // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnAsyncLoadingFlushUpdate(); // Function Solarland.LoadingUIBase.OnAsyncLoadingFlushUpdate // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.MapMarkBase
// Size: 0x440 (Inherited: 0x400)
struct UMapMarkBase : USolarUserWidget {
	struct UMiniMapBase* MapOwner; // 0x400(0x08)
	struct FVector2D MarkIconRealLoc; // 0x408(0x08)
	struct FVector2D MarkIconAlignment; // 0x410(0x08)
	bool IsOnBigMap; // 0x418(0x01)
	enum class EMarkerType MarkerType; // 0x419(0x01)
	bool IsMapObject; // 0x41a(0x01)
	bool MoveAble; // 0x41b(0x01)
	bool SupportEdge; // 0x41c(0x01)
	bool SupportEdgeWithBigMap; // 0x41d(0x01)
	char pad_41E[0x2]; // 0x41e(0x02)
	struct AActor* TargetActorRef; // 0x420(0x08)
	char pad_428[0x18]; // 0x428(0x18)

	void UpdateIconWithActor(struct AActor* InTargetActor); // Function Solarland.MapMarkBase.UpdateIconWithActor // (Final|Native|Public) // @ game+0x26dfaa0
	void SetUpdateState(bool ShouldUpdateLocation); // Function Solarland.MapMarkBase.SetUpdateState // (Final|Native|Public|BlueprintCallable) // @ game+0x26df670
	void SetMarkPos(struct FVector& Loc); // Function Solarland.MapMarkBase.SetMarkPos // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x26df2f0
	void SetEdgeSupport(bool IsSupportEdge, bool WithBigMap); // Function Solarland.MapMarkBase.SetEdgeSupport // (Final|Native|Public|BlueprintCallable) // @ game+0x26df120
	void SetColorOpacityIndex(char InColorOpacityIndex); // Function Solarland.MapMarkBase.SetColorOpacityIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x26df0a0
	void OnReceivedMarkInit(); // Function Solarland.MapMarkBase.OnReceivedMarkInit // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnBigMapOpen(); // Function Solarland.MapMarkBase.OnBigMapOpen // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void InitVehicleMarkIcon(int32_t VehicleID, int32_t InputIndex, int32_t SpawnerIndex); // Function Solarland.MapMarkBase.InitVehicleMarkIcon // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void InitStaticIcon(int32_t MarkID); // Function Solarland.MapMarkBase.InitStaticIcon // (Native|Public|BlueprintCallable) // @ game+0x26447c0
	void InitMarkIcon(int32_t MarkID, struct AActor* InTargetActor, bool InMoveable); // Function Solarland.MapMarkBase.InitMarkIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x26dea20
	void EdgeFix(struct FVector2D Pos); // Function Solarland.MapMarkBase.EdgeFix // (Final|Native|Public|HasDefaults) // @ game+0x26de8d0
	void CleanData(); // Function Solarland.MapMarkBase.CleanData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.MapSelectPointCellWidget
// Size: 0x448 (Inherited: 0x400)
struct UMapSelectPointCellWidget : USolarUserWidget {
	bool bCellSelectionState; // 0x400(0x01)
	char pad_401[0x7]; // 0x401(0x07)
	enum class EMapCellSelectionAccess SelectionAccess; // 0x408(0x01)
	char pad_409[0x7]; // 0x409(0x07)
	struct FString CellAddress; // 0x410(0x10)
	char pad_420[0x20]; // 0x420(0x20)
	struct ASolarMapSelectPoint* SelectPointElement; // 0x440(0x08)

	void SetSelectionAccess(enum class EMapCellSelectionAccess InState); // Function Solarland.MapSelectPointCellWidget.SetSelectionAccess // (Final|Native|Public|BlueprintCallable) // @ game+0x26df4a0
	void OnSelectionStateChanged(bool InState); // Function Solarland.MapSelectPointCellWidget.OnSelectionStateChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnSelectionAccessChanged(enum class EMapCellSelectionAccess CurrentState); // Function Solarland.MapSelectPointCellWidget.OnSelectionAccessChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.MapSelectPointNoticeMap
// Size: 0x408 (Inherited: 0x400)
struct UMapSelectPointNoticeMap : USolarUserWidget {
	struct ASolarMapSelectPoint* SelectPointElement; // 0x400(0x08)

	void OnTouchPanel(struct FVector2D& InPosition); // Function Solarland.MapSelectPointNoticeMap.OnTouchPanel // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x26dece0
	void OnInitialMap(int32_t InMinimapID); // Function Solarland.MapSelectPointNoticeMap.OnInitialMap // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnAddNewCell(struct FVector2D& InNewPosition, struct UMapSelectPointCellWidget* InNewCellWidget); // Function Solarland.MapSelectPointNoticeMap.OnAddNewCell // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.MapSelectPointWidget
// Size: 0x400 (Inherited: 0x400)
struct UMapSelectPointWidget : USolarUserWidget {
};

// Class Solarland.MarkIconWidget
// Size: 0x478 (Inherited: 0x440)
struct UMarkIconWidget : UMapMarkBase {
	struct FString AtlasPath; // 0x440(0x10)
	struct FString SpriteType; // 0x450(0x10)
	struct UImage* ImageMarker; // 0x460(0x08)
	char pad_468[0x10]; // 0x468(0x10)

	void SetTransparent(float TransparentPercent); // Function Solarland.MarkIconWidget.SetTransparent // (Final|Native|Public|BlueprintCallable) // @ game+0x26df5f0
	void SetMarkerType(enum class EMarkerType Type, bool bRefreshSlot, bool bNeedSyncLoadIcon); // Function Solarland.MarkIconWidget.SetMarkerType // (Final|Native|Public|BlueprintCallable) // @ game+0x26df380
};

// Class Solarland.MassInvisibilityEffectController
// Size: 0x5d0 (Inherited: 0x28)
struct UMassInvisibilityEffectController : UActorEffectController {
	struct FMassInvStateTransitionData Transition_EnterPrepare; // 0x28(0x90)
	struct FMassInvStateTransitionData Transition_PrepareToNormal; // 0xb8(0x90)
	struct FMassInvStateTransitionData Transition_NormalToSprint; // 0x148(0x90)
	struct FMassInvStateTransitionData Transition_SprintToNormal; // 0x1d8(0x90)
	struct FMassInvStateTransitionData Transition_AnyToEnd; // 0x268(0x90)
	struct FMassInvMaterialParams OriginalParams; // 0x2f8(0x28)
	struct FMassInvStateMaterialParams TeammateParams; // 0x320(0x78)
	struct FMassInvStateMaterialParams OpponentParams; // 0x398(0x78)
	struct FRuntimeFloatCurve SprintTillingCurve; // 0x410(0x88)
	struct FName OrnamentMatAnimParamName; // 0x498(0x08)
	struct FRuntimeFloatCurve OrnamentMatAnimCurve; // 0x4a0(0x88)
	char pad_528[0xa8]; // 0x528(0xa8)
};

// Class Solarland.MaterialEffectBase
// Size: 0x160 (Inherited: 0x50)
struct UMaterialEffectBase : UActorEffect {
	char pad_50[0x110]; // 0x50(0x110)
};

// Class Solarland.MaterialSimpleEffect
// Size: 0x1c0 (Inherited: 0x160)
struct UMaterialSimpleEffect : UMaterialEffectBase {
	struct FNormalMaterialChange MaterialChange; // 0x160(0x50)
	struct TArray<struct FSoftObjectPath> NoChangeMaterials; // 0x1b0(0x10)
};

// Class Solarland.MaterialVariableEffect
// Size: 0x1d0 (Inherited: 0x1c0)
struct UMaterialVariableEffect : UMaterialSimpleEffect {
	struct TArray<struct FMaterialVariableChange> VariableChanges; // 0x1c0(0x10)
};

// Class Solarland.MemberStateBase
// Size: 0x268 (Inherited: 0x260)
struct UMemberStateBase : UUserWidget {
	char pad_260[0x4]; // 0x260(0x04)
	float MinimalSize; // 0x264(0x04)

	void UpdateWithCurrentMemberIndex(char CurrentIndex); // Function Solarland.MemberStateBase.UpdateWithCurrentMemberIndex // (Native|Event|Protected|BlueprintEvent) // @ game+0x26dfb30
	void UnbindMemberEvent(char MemberIndex); // Function Solarland.MemberStateBase.UnbindMemberEvent // (Native|Event|Protected|BlueprintEvent) // @ game+0x26dfa20
	void OnMinimalSizeSet(float NewSize); // Function Solarland.MemberStateBase.OnMinimalSizeSet // (Native|Event|Protected|BlueprintEvent) // @ game+0x26debc0
	void ChangeMemberIndex(char NewIndex); // Function Solarland.MemberStateBase.ChangeMemberIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x26de850
	void BindMemberEvent(char MemberIndex); // Function Solarland.MemberStateBase.BindMemberEvent // (Native|Event|Protected|BlueprintEvent) // @ game+0x26de7d0
};

// Class Solarland.MemberNational
// Size: 0x278 (Inherited: 0x268)
struct UMemberNational : UMemberStateBase {
	struct UImage* ImgFlagIcon; // 0x268(0x08)
	char pad_270[0x8]; // 0x270(0x08)

	void RefreshFlag(int32_t InFlagID, bool bUsingClan); // Function Solarland.MemberNational.RefreshFlag // (Final|Native|Protected) // @ game+0x26dee60
	void OnPlayerFlagDisplayOptionChanged(bool bDisplay); // Function Solarland.MemberNational.OnPlayerFlagDisplayOptionChanged // (Final|Native|Protected) // @ game+0x26dec50
};

// Class Solarland.MicroPhoneOperationBase
// Size: 0x400 (Inherited: 0x400)
struct UMicroPhoneOperationBase : USolarUserWidget {

	void Init(struct UUserWidget* Owner); // Function Solarland.MicroPhoneOperationBase.Init // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void CloseSpeakOperator(); // Function Solarland.MicroPhoneOperationBase.CloseSpeakOperator // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void CloseMicOperator(); // Function Solarland.MicroPhoneOperationBase.CloseMicOperator // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.MiniMapBase
// Size: 0x458 (Inherited: 0x400)
struct UMiniMapBase : USolarUserWidget {
	int32_t MaxPool; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct TMap<struct FString, struct FMapMarkElemArray> MapMarkPool; // 0x408(0x50)

	void RemoveMarkIcon(struct UMapMarkBase* InMapMark); // Function Solarland.MiniMapBase.RemoveMarkIcon // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RemoveDotLineOnMap(int32_t DotLineID); // Function Solarland.MiniMapBase.RemoveDotLineOnMap // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RemoveAllMapMarks(); // Function Solarland.MiniMapBase.RemoveAllMapMarks // (Final|Native|Public|BlueprintCallable) // @ game+0x26def30
	bool RecycleMapMark(struct FString MapMarkName, struct UMapMarkBase* MapMarkToRecycle); // Function Solarland.MiniMapBase.RecycleMapMark // (Final|Native|Public|BlueprintCallable) // @ game+0x26ded70
	void MapScaleFormat(struct UMapMarkBase* MapMark); // Function Solarland.MiniMapBase.MapScaleFormat // (Native|Public|BlueprintCallable) // @ game+0x26deb30
	struct UMapMarkBase* InitMarkIconOnMapFrame(struct UMapMarkBase* InMapMarkClass, struct FVector2D& Pivot, int32_t ZOrder); // Function Solarland.MiniMapBase.InitMarkIconOnMapFrame // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	struct UMapMarkBase* InitMarkIcon(struct UMapMarkBase* InMapMarkClass, struct FVector2D& InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int32_t ZOrder); // Function Solarland.MiniMapBase.InitMarkIcon // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	void InitMapMarkPool(); // Function Solarland.MiniMapBase.InitMapMarkPool // (Final|Native|Public|BlueprintCallable) // @ game+0x26dea00
	struct UMapMarkBase* GetFreeMapMark(struct FString MapMarkName); // Function Solarland.MiniMapBase.GetFreeMapMark // (Final|Native|Public|BlueprintCallable) // @ game+0x26de950
	struct UMapMarkBase* CreateMapMark(struct FString MapMarkName); // Function Solarland.MiniMapBase.CreateMapMark // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	int32_t AddDotLineOnMap(struct AActor* StartPointActor, struct AActor* EndPointActor, struct FLinearColor DotLineColor); // Function Solarland.MiniMapBase.AddDotLineOnMap // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.MiniMapBGWidget
// Size: 0x410 (Inherited: 0x400)
struct UMiniMapBGWidget : USolarUserWidget {
	struct USolarImage* Img_Map; // 0x400(0x08)
	struct UCanvasPanel* RootCanvas; // 0x408(0x08)

	void SetMapContentRotation(float Rotation); // Function Solarland.MiniMapBGWidget.SetMapContentRotation // (Final|Native|Public|BlueprintCallable) // @ game+0x26e2800
};

// Class Solarland.MiniMapWidget
// Size: 0x848 (Inherited: 0x458)
struct UMiniMapWidget : UMiniMapBase {
	char pad_458[0x11]; // 0x458(0x11)
	bool bIsLowLevelDevice; // 0x469(0x01)
	char pad_46A[0x2]; // 0x46a(0x02)
	struct FMiniMapData MiniMapData; // 0x46c(0x18)
	bool AutoOffset; // 0x484(0x01)
	bool OnCar; // 0x485(0x01)
	bool WithIconScale; // 0x486(0x01)
	char pad_487[0x1]; // 0x487(0x01)
	float AspectRatio; // 0x488(0x04)
	enum class EMapState CurrentState; // 0x48c(0x01)
	char pad_48D[0x3]; // 0x48d(0x03)
	struct FVector2D SelfNavSlotSize; // 0x490(0x08)
	struct TArray<struct UPlayerNavWidget*> PlayerNavMap; // 0x498(0x10)
	struct USizeBox* MapFOVSizeBox; // 0x4a8(0x08)
	struct UCanvasPanel* MapOffset; // 0x4b0(0x08)
	struct USolarImage* SolarImageMap; // 0x4b8(0x08)
	struct UCanvasPanel* ImageFrameLayer; // 0x4c0(0x08)
	struct UCanvasPanel* MarkerLayer; // 0x4c8(0x08)
	struct UCanvasPanel* MeshWidgetCanvas; // 0x4d0(0x08)
	struct UScaleBox* MapScale; // 0x4d8(0x08)
	struct UCanvasPanel* RenderTargetCanvas; // 0x4e0(0x08)
	struct USolarImage* Img_EMP; // 0x4e8(0x08)
	struct UImage* Img_Airdrop; // 0x4f0(0x08)
	struct UMeshRectangleWidget* IconMeshRectangleWidget; // 0x4f8(0x08)
	struct UMeshRectangleWidget* AnimIconMeshWidget; // 0x500(0x08)
	struct UMeshRectangleWidget* SkydivingLightingMeshWidget; // 0x508(0x08)
	struct UMeshRectangleWidget* SkydivingIconMeshWidget; // 0x510(0x08)
	struct UDrawLinePanel* DrawLinePanel; // 0x518(0x08)
	struct FConfigMiniMapMeshWidgetData MiniMapMeshWidgetConfigData; // 0x520(0x18)
	struct UPlayerNavWidget* SelfNav; // 0x538(0x08)
	struct FVector2D CurrentMapOffset; // 0x540(0x08)
	struct FVector2D MapIconScale; // 0x548(0x08)
	float MapIconRotation; // 0x550(0x04)
	struct FVector2D SelfMapPosition; // 0x554(0x08)
	float SelfMapRotation; // 0x55c(0x04)
	bool bNeedRefreshMinimap; // 0x560(0x01)
	char pad_561[0x7]; // 0x561(0x07)
	struct USolarMapManager* MapMgr; // 0x568(0x08)
	struct UMiniMapBGWidget* MapImageWidget; // 0x570(0x08)
	bool bBelongToBigMap; // 0x578(0x01)
	char pad_579[0x3]; // 0x579(0x03)
	float ClampMarkTickRate; // 0x57c(0x04)
	struct TMap<enum class EAirdropStatus, struct FAirdropMeshWidgetData> AirdropMeshWidgetDataMap; // 0x580(0x50)
	float AdjustMapRatio; // 0x5d0(0x04)
	float AdjustWorldDis; // 0x5d4(0x04)
	float AirdropAnimOutsideScale; // 0x5d8(0x04)
	float AirdropClearTime; // 0x5dc(0x04)
	char pad_5E0[0x4]; // 0x5e0(0x04)
	struct FConfigMiniMapMeshWidgetData ReviveMarkNormalParms; // 0x5e4(0x18)
	struct FConfigMiniMapMeshWidgetData ReviveMarkAnimParms; // 0x5fc(0x18)
	float ReviveMarkAnimTime; // 0x614(0x04)
	float IconSizeFormatInterval; // 0x618(0x04)
	char pad_61C[0x10]; // 0x61c(0x10)
	bool bUpdateSelfNav; // 0x62c(0x01)
	char pad_62D[0x7b]; // 0x62d(0x7b)
	struct UCurveFloat* CacheFOVScaleCurve; // 0x6a8(0x08)
	char pad_6B0[0x198]; // 0x6b0(0x198)

	void VehicleClear(bool IsOwner); // Function Solarland.MiniMapWidget.VehicleClear // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void UpdateVehicleModeMapFOV(); // Function Solarland.MiniMapWidget.UpdateVehicleModeMapFOV // (Final|Native|Protected) // @ game+0x26e31f0
	void UpdatePoisonEffect(float PosX, float PosY, float Radius); // Function Solarland.MiniMapWidget.UpdatePoisonEffect // (Final|Native|Protected|BlueprintCallable) // @ game+0x26e30d0
	void UpdateMinimap(); // Function Solarland.MiniMapWidget.UpdateMinimap // (Final|Native|Protected) // @ game+0x26e30b0
	void UpdateMeshWidgetMarkSlotSize(struct FString MarkKey, struct FVector2D& InMarkSlotSize); // Function Solarland.MiniMapWidget.UpdateMeshWidgetMarkSlotSize // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x26e2fc0
	void UpdateMeshWidgetMarkColorOpacityIndex(struct FString MarkKey, int32_t InColorOpacityIndex); // Function Solarland.MiniMapWidget.UpdateMeshWidgetMarkColorOpacityIndex // (Final|Native|Protected|BlueprintCallable) // @ game+0x26e2ee0
	void UpdateMeshWidgetIconTexId(struct FString MarkKey, int32_t InIconTexId); // Function Solarland.MiniMapWidget.UpdateMeshWidgetIconTexId // (Final|Native|Protected|BlueprintCallable) // @ game+0x26e2e00
	void UpdateEmp(); // Function Solarland.MiniMapWidget.UpdateEmp // (Final|Native|Protected) // @ game+0x26e2de0
	void UpdateBlueCircle(struct FVector& InCurPoisonLocation, float InCurPoisonRadius); // Function Solarland.MiniMapWidget.UpdateBlueCircle // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x26e2d00
	void UpdateBigMap(); // Function Solarland.MiniMapWidget.UpdateBigMap // (Final|Native|Protected) // @ game+0x26e2ce0
	void StopReviveTeammateAnim(struct FString InKey); // Function Solarland.MiniMapWidget.StopReviveTeammateAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x26e2c40
	struct FString SpawnMeshWidgetMapMarkInfo(enum class EMarkerType InMarkType, struct FVector2D& InMarkPos, struct FString InMarkName, int32_t InMarkIndex); // Function Solarland.MiniMapWidget.SpawnMeshWidgetMapMarkInfo // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x26e2a60
	void SetMapFOVBySpeed(float InSpeed); // Function Solarland.MiniMapWidget.SetMapFOVBySpeed // (Final|Native|Protected) // @ game+0x26e29e0
	void SetMapFOVAutoOffset(float InNewFOV); // Function Solarland.MiniMapWidget.SetMapFOVAutoOffset // (Final|Native|Public) // @ game+0x26e2960
	void SetMapFOV(float InNewFOV, struct FVector2D& InScaleCenter); // Function Solarland.MiniMapWidget.SetMapFOV // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x26e2880
	void SetBigMapFOV(float& InSliderValue, float& InFOVValue, struct FVector2D& InCenter); // Function Solarland.MiniMapWidget.SetBigMapFOV // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	void SetBelongToBigMap(bool bIsBelongToBigMap); // Function Solarland.MiniMapWidget.SetBelongToBigMap // (Final|Native|Public|BlueprintCallable) // @ game+0x26e2770
	void SetAirdropMeshWidgetStatus(struct FString InKey, enum class EAirdropStatus InNewStatus); // Function Solarland.MiniMapWidget.SetAirdropMeshWidgetStatus // (Final|Native|Public) // @ game+0x26e2690
	void RemoveMeshWidgetMark(struct FString MarkKey); // Function Solarland.MiniMapWidget.RemoveMeshWidgetMark // (Final|Native|Protected|BlueprintCallable) // @ game+0x26e25f0
	void RemoveBlueCircle(); // Function Solarland.MiniMapWidget.RemoveBlueCircle // (Final|Native|Protected) // @ game+0x26e25d0
	void RemoveAllNav(); // Function Solarland.MiniMapWidget.RemoveAllNav // (Final|Native|Public|BlueprintCallable) // @ game+0x26e25b0
	void RegisterDataProvider(); // Function Solarland.MiniMapWidget.RegisterDataProvider // (Final|Native|Protected|BlueprintCallable) // @ game+0x26e2590
	void RefreshLastVehicleLocation(); // Function Solarland.MiniMapWidget.RefreshLastVehicleLocation // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void PlayReviveTeammateAnim(struct FString InKey, char InColorIdx); // Function Solarland.MiniMapWidget.PlayReviveTeammateAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x26e24b0
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.MiniMapWidget.OnSpecTargetChanged // (Native|Public) // @ game+0x26e23e0
	void OnReviveWorldMarkRemoved(struct FString InPlayerID); // Function Solarland.MiniMapWidget.OnReviveWorldMarkRemoved // (Final|Native|Public|BlueprintCallable) // @ game+0x26e2340
	void OnReviveWorldMarkPlayAnim(struct ASolarPlayerState* InPlayerState); // Function Solarland.MiniMapWidget.OnReviveWorldMarkPlayAnim // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnReviveWorldMarkCreated(struct FString InPlayerID); // Function Solarland.MiniMapWidget.OnReviveWorldMarkCreated // (Final|Native|Public|BlueprintCallable) // @ game+0x26e22a0
	void OnRemoveReviveWorldMark(struct ASolarPlayerState* InPlayerState); // Function Solarland.MiniMapWidget.OnRemoveReviveWorldMark // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnRemoveAllReviveWorldMark(); // Function Solarland.MiniMapWidget.OnRemoveAllReviveWorldMark // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnMiniMapDataInitialized(); // Function Solarland.MiniMapWidget.OnMiniMapDataInitialized // (Final|Native|Protected|BlueprintCallable) // @ game+0x26e2280
	void OnMapSkydivingIconsUpdate(); // Function Solarland.MiniMapWidget.OnMapSkydivingIconsUpdate // (Final|Native|Public) // @ game+0x26e2260
	void OnFOVScaleChangedByPoison(struct UCurveFloat* InCurve); // Function Solarland.MiniMapWidget.OnFOVScaleChangedByPoison // (Final|Native|Protected) // @ game+0x26e21d0
	void OnCreateReviveWorldMark(struct ASolarPlayerState* InPlayerState, struct FVector& InWorldLoc); // Function Solarland.MiniMapWidget.OnCreateReviveWorldMark // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	void OnCreateCustomMapMark(struct UMapMarkBase* MapMarkClass, struct AActor* OwnerActor, struct FVector2D& MarkPos, bool bSupportEdge, bool bSupportEdgeInBigMap, int32_t ZOrder); // Function Solarland.MiniMapWidget.OnCreateCustomMapMark // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x26e1fc0
	void OnBlueCircleActive(struct FBlueCircleInfo& InCurBlueCircleInfo); // Function Solarland.MiniMapWidget.OnBlueCircleActive // (Final|Native|Protected|HasOutParms) // @ game+0x26e1f10
	void OnAllReviveWorldMarkRemoved(); // Function Solarland.MiniMapWidget.OnAllReviveWorldMarkRemoved // (Final|Native|Public|BlueprintCallable) // @ game+0x26e1ef0
	void KeepSelfInTheCenter(); // Function Solarland.MiniMapWidget.KeepSelfInTheCenter // (Final|Native|Public|BlueprintCallable) // @ game+0x26e1ed0
	bool IsReviveWorldMarkCreated(struct FString InPlayerID); // Function Solarland.MiniMapWidget.IsReviveWorldMarkCreated // (Final|Native|Public|BlueprintCallable) // @ game+0x26e1e20
	bool IsBlueCircleEnable(); // Function Solarland.MiniMapWidget.IsBlueCircleEnable // (Event|Protected|BlueprintEvent|Const) // @ game+0x2d0d160
	void InitMinFOV(float InFOV); // Function Solarland.MiniMapWidget.InitMinFOV // (Final|Native|Public|BlueprintCallable) // @ game+0x26e1da0
	void InitMapFovAndSize(); // Function Solarland.MiniMapWidget.InitMapFovAndSize // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void InitFovAndSize(); // Function Solarland.MiniMapWidget.InitFovAndSize // (Final|Native|Public|BlueprintCallable) // @ game+0x26e1d80
	void IconSizeFormat(); // Function Solarland.MiniMapWidget.IconSizeFormat // (Final|Native|Protected) // @ game+0x26e1d60
	struct UPlayerNavWidget* GetSelfNav(); // Function Solarland.MiniMapWidget.GetSelfNav // (Final|Native|Public|BlueprintCallable) // @ game+0x26e1d40
	struct FVector2D GetMinAndMaxFOV(); // Function Solarland.MiniMapWidget.GetMinAndMaxFOV // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x26e1d10
	struct ASolarPlayerState* GetCameraFocusedCharacterState(); // Function Solarland.MiniMapWidget.GetCameraFocusedCharacterState // (Final|Native|Public) // @ game+0x26e1ce0
	void FormatAirline(float InScaleValue); // Function Solarland.MiniMapWidget.FormatAirline // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ClearVehicleMarkWidget(); // Function Solarland.MiniMapWidget.ClearVehicleMarkWidget // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ClearPlayerMarkPoint(); // Function Solarland.MiniMapWidget.ClearPlayerMarkPoint // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ClearMiniMapMarkWidget(); // Function Solarland.MiniMapWidget.ClearMiniMapMarkWidget // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void CalculateMarkOffset(struct FVector2D MapLocation, float Rotation, struct FVector2D& OutMapOffset); // Function Solarland.MiniMapWidget.CalculateMarkOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x26e1bc0
	void CalculateMapMeshWidgetOffset(struct FVector2D MapLocation, struct FVector2D& NewMapMarkOffset, struct FVector2D& NewMapMarkOffsetInCanvas, struct FVector2D& CanvasRotateOffset); // Function Solarland.MiniMapWidget.CalculateMapMeshWidgetOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x26e1a50
	void AdjustMapOffsetAndRotation(struct FVector2D MapLocation, float Rotation, struct FVector2D ExtraMapOffset); // Function Solarland.MiniMapWidget.AdjustMapOffsetAndRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x26e1950
	void AdjustMapOffset(struct FVector2D MapLocation); // Function Solarland.MiniMapWidget.AdjustMapOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x26e18d0
	struct FString AddMeshWidgetMark(struct FVector2D& InPosition, struct FVector2D& InMarkSlotSize, enum class EMarkerType InMarkType, float InRenderTransformScaleX, struct FString InMarkName, int32_t InMarkIndex); // Function Solarland.MiniMapWidget.AddMeshWidgetMark // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x26e1680
	void AddBlueCircle(); // Function Solarland.MiniMapWidget.AddBlueCircle // (Final|Native|Protected) // @ game+0x26e1660
};

// Class Solarland.MissileSwarmConfig
// Size: 0x330 (Inherited: 0x30)
struct UMissileSwarmConfig : UDataAsset {
	char ShowDebugFlag; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<enum class EObjectTypeQuery> AimDetectObjectTypes; // 0x38(0x10)
	struct FVector BlockDetectSpace; // 0x48(0x0c)
	struct FVector BlockDetectSpaceCenterOffset; // 0x54(0x0c)
	struct FIntPoint MissileSumMatrix; // 0x60(0x08)
	struct FVector2D AimField; // 0x68(0x08)
	float AimForwardDistance; // 0x70(0x04)
	float AimDownwardDistance; // 0x74(0x04)
	bool bEjectDirAffectedByPlayerPitch; // 0x78(0x01)
	char pad_79[0x3]; // 0x79(0x03)
	float EjectSpeed; // 0x7c(0x04)
	float EjectGravity; // 0x80(0x04)
	float EjectTimeLength; // 0x84(0x04)
	struct FRuntimeFloatCurve BoostTimeDistanceCurve; // 0x88(0x88)
	struct TArray<struct FMissileBulletConfig> MissileParams; // 0x110(0x10)
	float TrailRadius; // 0x120(0x04)
	float EndPointControlStrength; // 0x124(0x04)
	struct TArray<float> PointGaps; // 0x128(0x10)
	int32_t ExpandFrequency; // 0x138(0x04)
	char pad_13C[0x4]; // 0x13c(0x04)
	struct TArray<enum class EObjectTypeQuery> StepTraceDetectObjectTypes; // 0x140(0x10)
	float DamagePerBullet; // 0x150(0x04)
	float ExplodeRadius; // 0x154(0x04)
	bool bTeammateDamage; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
	struct TArray<enum class EObjectTypeQuery> ExplodeDamageObjectTypes; // 0x160(0x10)
	struct TArray<enum class EObjectTypeQuery> ExplodeBlockObjectTypes; // 0x170(0x10)
	struct UGameplayEffect* DamageExtraEffect; // 0x180(0x08)
	struct FRuntimeFloatCurve PreviewDistanceScaleCurve; // 0x188(0x88)
	struct UStaticMesh* PreviewMeshTemplate; // 0x210(0x08)
	struct UMaterialInterface* PreviewMaterial; // 0x218(0x08)
	struct UParticleSystem* ExplodeMarkParticle; // 0x220(0x08)
	struct UParticleSystem* BulletParticle; // 0x228(0x08)
	struct UParticleSystem* RibbonTrajectoryParticle; // 0x230(0x08)
	struct UParticleSystem* EjectParticle; // 0x238(0x08)
	struct UParticleSystem* BoostParticle; // 0x240(0x08)
	struct UParticleSystem* ExplodeParticle; // 0x248(0x08)
	struct USkeletalMeshComponent* SpawnerMesh; // 0x250(0x08)
	struct USkeletalMesh* SpawnerTemplateMesh; // 0x258(0x08)
	float SpawnerAnimTime; // 0x260(0x04)
	float MissileShootTime; // 0x264(0x04)
	float RemoveAnimTime; // 0x268(0x04)
	struct FName SpawnerMeshMaterialParamName; // 0x26c(0x08)
	struct FVector2D SpawnerMeshMaterialParamRange; // 0x274(0x08)
	struct FVector RocketSpawnerMeshOffset; // 0x27c(0x0c)
	float RocketSpawnerMeshPitchOffset; // 0x288(0x04)
	bool bSpawnerUsePlayerPitch; // 0x28c(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	struct TArray<struct FName> MuzzleSocketNames; // 0x290(0x10)
	float SpawnerMoveInterpSpeed; // 0x2a0(0x04)
	float SpawnerMoveInterpMinSpeed; // 0x2a4(0x04)
	bool bUseForwardAxisY; // 0x2a8(0x01)
	char pad_2A9[0x7]; // 0x2a9(0x07)
	struct UAnimationAsset* SpawnerIdleAnim; // 0x2b0(0x08)
	struct UAnimationAsset* SpawnerFireAnim; // 0x2b8(0x08)
	struct FString SpawnerStartSoundName1P; // 0x2c0(0x10)
	struct FString SpawnerStartSoundName3P; // 0x2d0(0x10)
	struct FString SpawnerEndSoundName1P; // 0x2e0(0x10)
	struct FString SpawnerEndSoundName3P; // 0x2f0(0x10)
	struct FString FireSoundName1P; // 0x300(0x10)
	struct FString FireSoundName3P; // 0x310(0x10)
	struct FString FireImpactSoundName; // 0x320(0x10)
};

// Class Solarland.MissileSwarmLauncher
// Size: 0x290 (Inherited: 0x228)
struct AMissileSwarmLauncher : AActor {
	struct UMissileSwarmConfig* Config; // 0x228(0x08)
	char pad_230[0x20]; // 0x230(0x20)
	struct TArray<struct UParticleSystemComponent*> ExplodeMarkEffects; // 0x250(0x10)
	struct ASolarCharacter* OwnerCharacter; // 0x260(0x08)
	struct FRotator PlayerRotation; // 0x268(0x0c)
	char pad_274[0x4]; // 0x274(0x04)
	struct USkeletalMeshComponent* SpawnerMesh; // 0x278(0x08)
	char pad_280[0x10]; // 0x280(0x10)

	void ServerUpdateCharacterRotation(struct FRotator InRotation); // Function Solarland.MissileSwarmLauncher.ServerUpdateCharacterRotation // (Net|Native|Event|Public|NetServer|HasDefaults) // @ game+0x26e7f00
	void NetMulticastEmitMissileSwarm(struct TArray<struct FMissileBulletSpawnParameter> InSwarm); // Function Solarland.MissileSwarmLauncher.NetMulticastEmitMissileSwarm // (Net|Native|Event|NetMulticast|Public) // @ game+0x26e7250
};

// Class Solarland.MMC_GenericCooldown
// Size: 0x40 (Inherited: 0x40)
struct UMMC_GenericCooldown : UGameplayModMagnitudeCalculation {
};

// Class Solarland.MobileWidgetDebuggerLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMobileWidgetDebuggerLibrary : UBlueprintFunctionLibrary {

	bool IsWidgetFastPathVisible(struct UWidget* InWidget); // Function Solarland.MobileWidgetDebuggerLibrary.IsWidgetFastPathVisible // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x26e71c0
	struct TArray<struct UUserWidget*> GetAllWidgetClass(struct UObject* WorldContextObject, bool bIncludeDebug); // Function Solarland.MobileWidgetDebuggerLibrary.GetAllWidgetClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x26e69e0
	struct UUserWidget* ConvertToUserWidgetClass(struct UObject* InObject); // Function Solarland.MobileWidgetDebuggerLibrary.ConvertToUserWidgetClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26e6560
	struct UObject* ConvertToObject(struct UUserWidget* InClass); // Function Solarland.MobileWidgetDebuggerLibrary.ConvertToObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26e64d0
};

// Class Solarland.MobileWidgetDebugger
// Size: 0x28 (Inherited: 0x28)
struct UMobileWidgetDebugger : UObject {

	struct UWidget* FindWidget(struct UUserWidget* BaseWidgetClass, struct TArray<struct FName> WidgetRelationList, struct TArray<struct FString>& OutErrorMsg, bool bPrintLog); // Function Solarland.MobileWidgetDebugger.FindWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26e67e0
	struct UMobileWidgetDebugger* Create(struct UObject* Outer); // Function Solarland.MobileWidgetDebugger.Create // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x26e65f0
};

// Class Solarland.ModMagnitudeCalcProxy
// Size: 0x30 (Inherited: 0x28)
struct UModMagnitudeCalcProxy : UObject {
	struct TWeakObjectPtr<struct USolarModMagnitudeCalc> CDOOwner; // 0x28(0x08)

	struct UModMagnitudeCalcProxy* CreateProxy(struct USolarModMagnitudeCalc* InCDOOwner, struct UModMagnitudeCalcProxy* ProxyClass); // Function Solarland.ModMagnitudeCalcProxy.CreateProxy // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x26e6680
	float CalculateBaseMagnitude(struct FGameplayEffectSpec& Spec); // Function Solarland.ModMagnitudeCalcProxy.CalculateBaseMagnitude // (Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x2d0d160
};

// Class Solarland.MultiplePassMaterialEffect
// Size: 0x1c8 (Inherited: 0x160)
struct UMultiplePassMaterialEffect : UMaterialEffectBase {
	struct FMultiplePassMaterialChange MaterialChange; // 0x160(0x68)
};

// Class Solarland.NgaiAIControllerComponent
// Size: 0x220 (Inherited: 0xb0)
struct UNgaiAIControllerComponent : UActorComponent {
	struct ASolarCharacterBase* EnemyCharacterBase; // 0xb0(0x08)
	char pad_B8[0x168]; // 0xb8(0x168)
};

// Class Solarland.NgaiGameModeComponent
// Size: 0x19218 (Inherited: 0xd0)
struct UNgaiGameModeComponent : UGameModeCompBase {
	char pad_D0[0x19148]; // 0xd0(0x19148)
};

// Class Solarland.NoticeMapBase
// Size: 0x400 (Inherited: 0x400)
struct UNoticeMapBase : USolarUserWidget {

	void SetMap(int32_t MapID); // Function Solarland.NoticeMapBase.SetMap // (Final|Native|Public|BlueprintCallable) // @ game+0x26e7f80
	void LuaInitMap(int32_t MapID); // Function Solarland.NoticeMapBase.LuaInitMap // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.OBBigMapWidget
// Size: 0x408 (Inherited: 0x400)
struct UOBBigMapWidget : USolarUserWidget {
	struct UOBMiniMapWidget* MiniMapUMG; // 0x400(0x08)

	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.OBBigMapWidget.OnSpectateTargetChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnFOVChanged(float NewValue); // Function Solarland.OBBigMapWidget.OnFOVChanged // (Final|Native|Private) // @ game+0x26e7a10
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBBigMapWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x26e7360
	struct FVector2D GetCurrentCenterPoint(); // Function Solarland.OBBigMapWidget.GetCurrentCenterPoint // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.OBDetailData
// Size: 0x78 (Inherited: 0x28)
struct UOBDetailData : UObject {
	struct ASolarPlayerState* SolarPlayerState; // 0x28(0x08)
	struct FDetailedListViewInfo DetailedListViewInfo; // 0x30(0x40)
	char pad_70[0x8]; // 0x70(0x08)
};

// Class Solarland.OBSettlementBase
// Size: 0x408 (Inherited: 0x400)
struct UOBSettlementBase : USolarUserWidget {
	struct UOBSettlementRoot* OBSettleRoot; // 0x400(0x08)
};

// Class Solarland.OBDetailedDataList
// Size: 0x4a0 (Inherited: 0x408)
struct UOBDetailedDataList : UOBSettlementBase {
	struct UWidgetSwitcher* Btn_Switcher; // 0x408(0x08)
	struct USolarTextBlock* Txt_TeamName; // 0x410(0x08)
	struct USolarTextBlock* Txt_Rank; // 0x418(0x08)
	struct UListView* PlayerListPanel; // 0x420(0x08)
	struct USolarImage* Img_TitleBox; // 0x428(0x08)
	struct USolarImage* Img_TitleBg; // 0x430(0x08)
	struct USolarImage* Img_TitleBox_3; // 0x438(0x08)
	char pad_440[0x8]; // 0x440(0x08)
	struct TArray<struct ASolarPlayerState*> AllTeammatePS; // 0x448(0x10)
	struct ASolarPlayerState* MVPPlayerState; // 0x458(0x08)
	struct UOBDetailData* TeamRowDataObject; // 0x460(0x08)
	struct TArray<struct FDetailedTeamListViewInfo> DetailedTeamListViewInfos; // 0x468(0x10)
	char pad_478[0x28]; // 0x478(0x28)

	void SetRank(int32_t InRank); // Function Solarland.OBDetailedDataList.SetRank // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetIsCheater(bool bIsCheater); // Function Solarland.OBDetailedDataList.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RefreshWindow(bool bIsPopDetailWindow); // Function Solarland.OBDetailedDataList.RefreshWindow // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RefreshRankColor(int32_t InRank); // Function Solarland.OBDetailedDataList.RefreshRankColor // (Final|Native|Private) // @ game+0x26e7e70
	void InitPlayerCompetitionDetailWindow(struct TArray<struct FDetailedListViewInfo> DetailedListViewInfos, struct FString TeamName, int32_t InRank, bool bIsPopDetailWindow); // Function Solarland.OBDetailedDataList.InitPlayerCompetitionDetailWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x26e6ed0
	void InitPanel(struct UOBSettlementRoot* InOwner); // Function Solarland.OBDetailedDataList.InitPanel // (Native|Public|BlueprintCallable) // @ game+0x26deb30
	void InitCompetitionDetailWindow(struct FDetailedTeamListViewInfo DetailedTeamListViewInfo, bool bIsPopDetailWindow); // Function Solarland.OBDetailedDataList.InitCompetitionDetailWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x26e6c20
	void InitAsDetailWindow(char& InTeamId, int32_t& InRank, struct UOBSettlementRoot* InOwner); // Function Solarland.OBDetailedDataList.InitAsDetailWindow // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26e6af0
};

// Class Solarland.OBDetailedDataRow
// Size: 0x470 (Inherited: 0x400)
struct UOBDetailedDataRow : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct USolarImage* Image_MVP; // 0x408(0x08)
	struct UUIComponentNationalFlag* UI_NationalFlag; // 0x410(0x08)
	struct UUIComponentPlayerName* Txt_Name; // 0x418(0x08)
	struct UUIComponentPlayerName* Txt_KillNum; // 0x420(0x08)
	struct UUIComponentPlayerName* Txt_Slash; // 0x428(0x08)
	struct UUIComponentPlayerName* Txt_AssistNum; // 0x430(0x08)
	struct UUIComponentPlayerName* Txt_DMGDealt; // 0x438(0x08)
	struct UUIComponentPlayerName* Txt_DMGTaken; // 0x440(0x08)
	struct UUIComponentPlayerName* Txt_HPRestored; // 0x448(0x08)
	struct UUIComponentPlayerName* Txt_Time; // 0x450(0x08)
	struct UUIComponentPlayerName* Txt_MVPScore; // 0x458(0x08)
	struct UUIInputDevice* UI_Input_Device; // 0x460(0x08)
	struct UOBDetailData* DetailRowData; // 0x468(0x08)

	void SetIsCheater(bool bIsCheater); // Function Solarland.OBDetailedDataRow.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void InitDetailedDataRow(struct UObject* ListItemObject); // Function Solarland.OBDetailedDataRow.InitDetailedDataRow // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void EnableMVPTag(bool bIsMVP); // Function Solarland.OBDetailedDataRow.EnableMVPTag // (Final|Native|Private) // @ game+0x26e6750
};

// Class Solarland.OBFreeViewControlWidget
// Size: 0x420 (Inherited: 0x400)
struct UOBFreeViewControlWidget : USolarUserWidget {
	struct UWalkWidgetNew* ViewJoyStick; // 0x400(0x08)
	struct USolarInputButton* Btn_Up; // 0x408(0x08)
	struct USolarInputButton* Btn_Down; // 0x410(0x08)
	char pad_418[0x8]; // 0x418(0x08)

	void SetOBFreeViewUpAndDownButtonVisibility(bool bVisible); // Function Solarland.OBFreeViewControlWidget.SetOBFreeViewUpAndDownButtonVisibility // (Final|Native|Public) // @ game+0x26e8010
	void OnUpdateWidgetVisibility(); // Function Solarland.OBFreeViewControlWidget.OnUpdateWidgetVisibility // (Final|Native|Public) // @ game+0x26e7e50
	void OnUISettingUIOperationChanged(bool bVisible); // Function Solarland.OBFreeViewControlWidget.OnUISettingUIOperationChanged // (Final|Native|Public) // @ game+0x26e7dc0
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.OBFreeViewControlWidget.OnSpectateTargetChanged // (Final|Native|Public) // @ game+0x26e7be0
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBFreeViewControlWidget.OnBattleOBHUDTypeChanged // (Final|Native|Public|HasOutParms) // @ game+0x26e73f0
};

// Class Solarland.OBGlobalControlWidget
// Size: 0x528 (Inherited: 0x400)
struct UOBGlobalControlWidget : USolarUserWidget {
	bool bIsPCStyleForDesign; // 0x400(0x01)
	char pad_401[0x7]; // 0x401(0x07)
	struct USolarButton* Btn_SwitchCameraMode; // 0x408(0x08)
	struct UWidgetSwitcher* Switcher_CameraMode; // 0x410(0x08)
	struct USolarButton* Btn_SwitchPlayer; // 0x418(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Visibility; // 0x420(0x08)
	struct USolarButton* Btn_SwitchUIVisibility; // 0x428(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Player; // 0x430(0x08)
	struct USolarButton* Btn_SwitchPlay; // 0x438(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Play; // 0x440(0x08)
	struct UImage* Img_SwitchPlayerSlc; // 0x448(0x08)
	struct UImage* Img_UIVisibilitySlc; // 0x450(0x08)
	struct UCanvasPanel* Panel_Mobile; // 0x458(0x08)
	struct UCanvasPanel* Panel_Player_List_PC; // 0x460(0x08)
	struct UOBTeamListPopupWidget* UI_OB_TeamList_Popup_PC; // 0x468(0x08)
	struct UOBTeamListPopupWidget* UI_OB_TeamList_Popup; // 0x470(0x08)
	struct UHorizontalBox* HorizontalBox_List_Shortcut; // 0x478(0x08)
	struct UCanvasPanel* Panel_UIItemSetting; // 0x480(0x08)
	struct USolarCheckBox* CheckBox_AutoDirector; // 0x488(0x08)
	struct USolarCheckBox* CheckBox_Comment; // 0x490(0x08)
	struct UCanvasPanel* CanvasPanel_Comment; // 0x498(0x08)
	struct USolarCheckBox* CheckBox_UIAll; // 0x4a0(0x08)
	struct USolarCheckBox* CheckBox_EnablePerspective; // 0x4a8(0x08)
	struct USolarCheckBox* CheckBox_UIOperation; // 0x4b0(0x08)
	struct USolarUserWidget* UI_OB_HUD_ShortcutKey; // 0x4b8(0x08)
	struct UCanvasPanel* Panel_BattleUI_Map; // 0x4c0(0x08)
	struct UCanvasPanel* Panel_Loading; // 0x4c8(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Loading; // 0x4d0(0x08)
	struct UUserWidget* OB_BattleUI_Map; // 0x4d8(0x08)
	struct UUserWidget* SafeAreaProgressUI; // 0x4e0(0x08)
	struct UOBProgressBar* UI_OB_ProgressBar; // 0x4e8(0x08)
	struct UCheckBoxGroup* CheckBoxGroup_HeadInfoStyle; // 0x4f0(0x08)
	struct UButton* MapSwitcher; // 0x4f8(0x08)
	struct UWidgetAnimation* Anim_Setting_In; // 0x500(0x08)
	struct UWidgetAnimation* Anim_Setting_Exit; // 0x508(0x08)
	char pad_510[0x8]; // 0x510(0x08)
	struct UOBTeamListPopupWidget* CurrentTeamList; // 0x518(0x08)
	char pad_520[0x8]; // 0x520(0x08)

	void SetShortCutKeyMode(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBGlobalControlWidget.SetShortCutKeyMode // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void SetLiveWatchOnlyStyle(); // Function Solarland.OBGlobalControlWidget.SetLiveWatchOnlyStyle // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnToggleShortCutKey(); // Function Solarland.OBGlobalControlWidget.OnToggleShortCutKey // (Final|Native|Private) // @ game+0x26e7da0
	void OnToggleProgressControlButton(); // Function Solarland.OBGlobalControlWidget.OnToggleProgressControlButton // (Final|Native|Private) // @ game+0x26e7d80
	void OnToggleProgress(); // Function Solarland.OBGlobalControlWidget.OnToggleProgress // (Final|Native|Private) // @ game+0x26e7d60
	void OnTogglePlayerList(); // Function Solarland.OBGlobalControlWidget.OnTogglePlayerList // (Final|Native|Private) // @ game+0x26e7d40
	void OnTogglePerspective(bool bEnable); // Function Solarland.OBGlobalControlWidget.OnTogglePerspective // (Final|Native|Private) // @ game+0x26e7cb0
	void OnPreConstruct(bool IsDesignTime); // Function Solarland.OBGlobalControlWidget.OnPreConstruct // (Final|Native|Public|BlueprintCallable) // @ game+0x26e7b50
	void OnPlayingScrubStart(); // Function Solarland.OBGlobalControlWidget.OnPlayingScrubStart // (Final|Native|Private) // @ game+0x26e7b30
	void OnPlayingScrubCharactersCreated(); // Function Solarland.OBGlobalControlWidget.OnPlayingScrubCharactersCreated // (Final|Native|Private) // @ game+0x26e7b10
	void OnHeadInfoStyleChanged(enum class EOBPlayerHeadInfoWidgetStyle Style); // Function Solarland.OBGlobalControlWidget.OnHeadInfoStyleChanged // (Final|Native|Private) // @ game+0x26e7a90
	void OnClientBeginSpectate(struct USolarSwitchTargetCameraControlComp* SwitchTargetComp); // Function Solarland.OBGlobalControlWidget.OnClientBeginSpectate // (Final|Native|Private) // @ game+0x26e7980
	void OnCheckBoxUIOperationStateChanged(bool bIsChecked); // Function Solarland.OBGlobalControlWidget.OnCheckBoxUIOperationStateChanged // (Final|Native|Private) // @ game+0x26e78f0
	void OnCheckBoxUIAllStateChanged(bool bIsChecked); // Function Solarland.OBGlobalControlWidget.OnCheckBoxUIAllStateChanged // (Final|Native|Private) // @ game+0x26e7860
	void OnCheckBoxHeadInfoStyleStateChanged(struct TArray<struct UCheckBox*>& ChildChangedArray, int32_t CheckedChildIndex); // Function Solarland.OBGlobalControlWidget.OnCheckBoxHeadInfoStyleStateChanged // (Final|Native|Private|HasOutParms) // @ game+0x26e7760
	void OnCheckBoxEnablePerspectiveChanged(bool bIsChecked); // Function Solarland.OBGlobalControlWidget.OnCheckBoxEnablePerspectiveChanged // (Final|Native|Private) // @ game+0x26e76d0
	void OnCheckBoxCommentStateChanged(bool bIsChecked); // Function Solarland.OBGlobalControlWidget.OnCheckBoxCommentStateChanged // (Final|Native|Private) // @ game+0x26e7640
	void OnCheckBoxAutoDirectorStateChanged(bool bIsChecked); // Function Solarland.OBGlobalControlWidget.OnCheckBoxAutoDirectorStateChanged // (Final|Native|Private) // @ game+0x26e75b0
	void OnBtnSwitchUIVisibilityClicked(); // Function Solarland.OBGlobalControlWidget.OnBtnSwitchUIVisibilityClicked // (Final|Native|Private) // @ game+0x26e7590
	void OnBtnSwitchPlayerClicked(); // Function Solarland.OBGlobalControlWidget.OnBtnSwitchPlayerClicked // (Final|Native|Private) // @ game+0x26e7570
	void OnBtnSwitchPlayClicked(); // Function Solarland.OBGlobalControlWidget.OnBtnSwitchPlayClicked // (Final|Native|Private) // @ game+0x26e7550
	void OnBtnSwitchCameraModeClicked(); // Function Solarland.OBGlobalControlWidget.OnBtnSwitchCameraModeClicked // (Final|Native|Private) // @ game+0x26e7530
	void OnBigMapOpen(); // Function Solarland.OBGlobalControlWidget.OnBigMapOpen // (Final|Native|Private) // @ game+0x26e7510
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBGlobalControlWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x26e7480
	void OnAutoDirectorEnableChanged(); // Function Solarland.OBGlobalControlWidget.OnAutoDirectorEnableChanged // (Final|Native|Private) // @ game+0x26e7340
	void OnAutoCommentEnableChanged(); // Function Solarland.OBGlobalControlWidget.OnAutoCommentEnableChanged // (Final|Native|Private) // @ game+0x26e7320
};

// Class Solarland.OBGlobalInfoWidget
// Size: 0x480 (Inherited: 0x400)
struct UOBGlobalInfoWidget : USolarUserWidget {
	struct UTextBlock* Text_PlayerNum; // 0x400(0x08)
	struct UTextBlock* Text_TeamNum; // 0x408(0x08)
	struct UTextBlock* Txt_LikeValue; // 0x410(0x08)
	struct UTextBlock* Txt_ViewerNum; // 0x418(0x08)
	struct UVerticalBox* VerticalBox_Sync; // 0x420(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Info; // 0x428(0x08)
	struct USizeBox* DummyPlayerInfo; // 0x430(0x08)
	struct UOverlay* Overlay_Comment; // 0x438(0x08)
	struct USolarTextBlock* Txt_Comment; // 0x440(0x08)
	struct UWidgetAnimation* Anim_Comment_Enter; // 0x448(0x08)
	struct UWidgetAnimation* Anim_Comment_Exit; // 0x450(0x08)
	struct USolarOBUIModel* SolarOBUIModel; // 0x458(0x08)
	char pad_460[0x20]; // 0x460(0x20)

	void UpdateRemainPanelView(); // Function Solarland.OBGlobalInfoWidget.UpdateRemainPanelView // (Final|Native|Private) // @ game+0x26ee680
	void SendFriendWatchLikeMsg(int32_t count); // Function Solarland.OBGlobalInfoWidget.SendFriendWatchLikeMsg // (Final|Native|Public|BlueprintCallable) // @ game+0x26ee440
	void OnPlayNarrateShow(struct FString inString); // Function Solarland.OBGlobalInfoWidget.OnPlayNarrateShow // (Native|Event|Public|BlueprintEvent) // @ game+0x26edfe0
	void OnPlayNarratePauseStateChange(bool bPause); // Function Solarland.OBGlobalInfoWidget.OnPlayNarratePauseStateChange // (Final|Native|Public) // @ game+0x26edf50
	void OnGameStateSet(struct AGameStateBase* GameState); // Function Solarland.OBGlobalInfoWidget.OnGameStateSet // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnCommentExitAnimationFinished(); // Function Solarland.OBGlobalInfoWidget.OnCommentExitAnimationFinished // (Final|Native|Private) // @ game+0x26ede50
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBGlobalInfoWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x26edc80
	void OnAutoPlaybackSpeedUpStop(); // Function Solarland.OBGlobalInfoWidget.OnAutoPlaybackSpeedUpStop // (Final|Native|Private) // @ game+0x26edc60
	void OnAutoPlaybackSpeedUpStart(); // Function Solarland.OBGlobalInfoWidget.OnAutoPlaybackSpeedUpStart // (Final|Native|Private) // @ game+0x26edc40
	void OnAutoDirectorEnableChanged(); // Function Solarland.OBGlobalInfoWidget.OnAutoDirectorEnableChanged // (Final|Native|Private) // @ game+0x26edc20
};

// Class Solarland.OBHeadInfoMeshWidget
// Size: 0x7b0 (Inherited: 0x400)
struct UOBHeadInfoMeshWidget : USolarUserWidget {
	struct USizeBox* SizeBox_Container; // 0x400(0x08)
	struct UCanvasPanel* Panel_Info; // 0x408(0x08)
	struct UMeshRectangleWidget* TeamMeshWidget; // 0x410(0x08)
	struct UMeshRectangleWidget* OB_Shield; // 0x418(0x08)
	struct UMeshRectangleWidget* OB_Shield_Damage; // 0x420(0x08)
	struct UMeshRectangleWidget* OB_Shield_BG; // 0x428(0x08)
	struct UMeshRectangleWidget* OB_HP; // 0x430(0x08)
	struct UMeshRectangleWidget* OB_HP_Damage; // 0x438(0x08)
	struct UMeshRectangleWidget* OB_HP_BG; // 0x440(0x08)
	struct UMeshRectangleWidget* OB_HeadInfo_BG; // 0x448(0x08)
	struct UMeshRectangleWidget* OB_Progress_BG; // 0x450(0x08)
	struct UMeshRectangleWidget* OB_Mid_BG; // 0x458(0x08)
	struct UMeshRectangleWidget* OB_MidShield_BG; // 0x460(0x08)
	struct UMeshRectangleWidget* OB_MidShield; // 0x468(0x08)
	struct UMeshRectangleWidget* OB_MidHP_BG; // 0x470(0x08)
	struct UMeshRectangleWidget* OB_MidHP; // 0x478(0x08)
	struct UScaleBox* ScaleBox_NickName; // 0x480(0x08)
	struct UUIComponentPlayerName* UIComp_PlayerName; // 0x488(0x08)
	struct UUIComponentPlayerName* BP_PlayerName; // 0x490(0x08)
	struct FConfigMeshData ConfigMeshData; // 0x498(0x18c)
	float ProgressEasingSpeed; // 0x624(0x04)
	struct FLinearColor HPColorNormal; // 0x628(0x10)
	struct FLinearColor HPColorDying; // 0x638(0x10)
	struct FLinearColor IncreaseColor; // 0x648(0x10)
	struct FLinearColor DecreaseColor; // 0x658(0x10)
	char pad_668[0x148]; // 0x668(0x148)

	void UpdateMeshProviderData(); // Function Solarland.OBHeadInfoMeshWidget.UpdateMeshProviderData // (Final|Native|Protected|BlueprintCallable) // @ game+0x26ee660
	void UpdateDataWeakReference(struct ASolarPlayerState* InPS); // Function Solarland.OBHeadInfoMeshWidget.UpdateDataWeakReference // (Final|Native|Private) // @ game+0x26ee5d0
};

// Class Solarland.OBHeadInfoWidget
// Size: 0x488 (Inherited: 0x400)
struct UOBHeadInfoWidget : USolarUserWidget {
	struct USolarImage* Image_TeamBG; // 0x400(0x08)
	struct USolarImage* Image_Frame; // 0x408(0x08)
	struct USolarTextBlock* Text_TeamNum; // 0x410(0x08)
	struct USolarImage* Image_TeamBG_Middle; // 0x418(0x08)
	struct USolarImage* Image_Frame_Middle; // 0x420(0x08)
	struct USolarTextBlock* Text_TeamNum_Middle; // 0x428(0x08)
	struct UTextBlock* Text_NickName; // 0x430(0x08)
	struct FOBTeammateInfo Data; // 0x438(0x48)
	char pad_480[0x8]; // 0x480(0x08)

	void UpdatePlayerHeadInfoWidgetStyle(enum class EOBPlayerHeadInfoWidgetStyle InHeadInfoWidgetStyle); // Function Solarland.OBHeadInfoWidget.UpdatePlayerHeadInfoWidgetStyle // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateDistanceBetweenPlayerAndOBCamera(); // Function Solarland.OBHeadInfoWidget.OnUpdateDistanceBetweenPlayerAndOBCamera // (Final|Native|Public) // @ game+0x26ee400
	enum class EOBPlayerHeadInfoWidgetStyle GetHeadInfoWidgetStyleFromDistance(float InDistance); // Function Solarland.OBHeadInfoWidget.GetHeadInfoWidgetStyleFromDistance // (Final|Native|Protected|BlueprintCallable) // @ game+0x26eda00
};

// Class Solarland.OBHighlightBattleWidget
// Size: 0x420 (Inherited: 0x400)
struct UOBHighlightBattleWidget : USolarUserWidget {
	struct UDeathViewHPWidget* OBHP; // 0x400(0x08)
	struct USolarTextBlock* Txt_Lvl; // 0x408(0x08)
	struct FString CurrentPlayerID; // 0x410(0x10)

	void OnCharacterLevelChanged(int32_t NewLevel); // Function Solarland.OBHighlightBattleWidget.OnCharacterLevelChanged // (Final|Native|Private) // @ game+0x26eddc0
	void InitDataByPlayerID(struct FString PlayerId, struct FString& playerName, struct TSoftObjectPtr<UTexture2D>& HeadIconPtr); // Function Solarland.OBHighlightBattleWidget.InitDataByPlayerID // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26eda90
};

// Class Solarland.OBHighlightOverviewWidget
// Size: 0x440 (Inherited: 0x400)
struct UOBHighlightOverviewWidget : USolarUserWidget {
	struct FMulticastInlineDelegate OverviewPlayEnd; // 0x400(0x10)
	struct FMulticastInlineDelegate TranslatePlayBeginOver; // 0x410(0x10)
	struct FMulticastInlineDelegate TranslatePlayEndOver; // 0x420(0x10)
	struct FMulticastInlineDelegate HighlightPlayEnd; // 0x430(0x10)

	void SwitchKillToolData(enum class EReplayActivityHeatKillUseType& ToolType, int32_t& KillToolID); // Function Solarland.OBHighlightOverviewWidget.SwitchKillToolData // (Final|Native|Public|HasOutParms) // @ game+0x26ee4f0
	void ShowHighlightTranslateNum(int32_t& TranslateNum); // Function Solarland.OBHighlightOverviewWidget.ShowHighlightTranslateNum // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ShowHighlightOverviewData(struct FPlayerHighlightOverview& OverviewData); // Function Solarland.OBHighlightOverviewWidget.ShowHighlightOverviewData // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ShowHighlightMarkResult(float& TotalScore, struct FString MarkName); // Function Solarland.OBHighlightOverviewWidget.ShowHighlightMarkResult // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ShowHighlightKillToolEffect(struct FString ToolName, struct TSoftObjectPtr<UTexture2D>& ToolIcon); // Function Solarland.OBHighlightOverviewWidget.ShowHighlightKillToolEffect // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ShowHighlightKillNum(int32_t& KillNum, float& KillEffectTime); // Function Solarland.OBHighlightOverviewWidget.ShowHighlightKillNum // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnTranslatePlayEndOver(); // Function Solarland.OBHighlightOverviewWidget.OnTranslatePlayEndOver // (Final|Native|Public|BlueprintCallable) // @ game+0x26ee3e0
	void OnTranslatePlayBeginOver(); // Function Solarland.OBHighlightOverviewWidget.OnTranslatePlayBeginOver // (Final|Native|Public|BlueprintCallable) // @ game+0x26ee3c0
	void OnOverviewPlayEnd(); // Function Solarland.OBHighlightOverviewWidget.OnOverviewPlayEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x26edf30
	void OnHighlightPlayEnd(); // Function Solarland.OBHighlightOverviewWidget.OnHighlightPlayEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x26ede70
	void HighlightOver(); // Function Solarland.OBHighlightOverviewWidget.HighlightOver // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void HighlightFragmentOver(); // Function Solarland.OBHighlightOverviewWidget.HighlightFragmentOver // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ContinueHighlightTranslate(); // Function Solarland.OBHighlightOverviewWidget.ContinueHighlightTranslate // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void CollectReplayPlayerOverviewData(struct FString PlayerId, struct FReplayPlayerOverviewData& PlayerOverviewData); // Function Solarland.OBHighlightOverviewWidget.CollectReplayPlayerOverviewData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26ed7f0
	void CalcHighlightMarkResult(float Score, struct TArray<struct FReplayActivityKillDetail>& KillDetails); // Function Solarland.OBHighlightOverviewWidget.CalcHighlightMarkResult // (Final|Native|Public|HasOutParms) // @ game+0x26ed700
};

// Class Solarland.HUDDispatcherBase
// Size: 0x13b8 (Inherited: 0x28)
struct UHUDDispatcherBase : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct FMulticastInlineDelegate OnSkydivingLeaderIndexReplicated; // 0x38(0x10)
	struct FMulticastInlineDelegate OnSkydivingMemberStatusUpdated; // 0x48(0x10)
	struct FDelegate TrySkydiveUnfollow; // 0x58(0x10)
	char pad_68[0x58]; // 0x68(0x58)
	float SkydivingLeaderTransferCooldown; // 0xc0(0x04)
	float SkydivingLeaderVoiceCooldown; // 0xc4(0x04)
	char pad_C8[0x38]; // 0xc8(0x38)
	struct FMulticastInlineDelegate OnTeammateStateReplicated; // 0x100(0x10)
	struct FMulticastInlineDelegate OnTeammatePlayerStateReplicated; // 0x110(0x10)
	struct FMulticastInlineDelegate OnCharacterPSInGameChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnPlayerOperationInGameChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnTeammatePSRemoveWhenPreparation; // 0x140(0x10)
	struct FMulticastInlineDelegate OnTeammatePSRemoveWhenBattle; // 0x150(0x10)
	struct FMulticastInlineDelegate OnTeammateHPChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnTeammateShieldChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnTeammateReviveItemChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnTeammateReviveManagerChanged; // 0x190(0x10)
	struct FMulticastInlineDelegate OnReviveStateChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnTeammateReviveStateChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnTeammateResurrectTimeChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnTeammateCallForHelpNotify; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnRemindTeammateRescueNotify; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnTeammateHUDOutScreen; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnTeammateHUDIntoScreen; // 0x200(0x10)
	char pad_210[0x10]; // 0x210(0x10)
	struct FMulticastInlineDelegate OnKillLeaderChangedNotify; // 0x220(0x10)
	char pad_230[0x40]; // 0x230(0x40)
	struct FMulticastInlineDelegate OnTeammateNetStateChanged; // 0x270(0x10)
	struct FMulticastInlineDelegate OnNavMapMarked; // 0x280(0x10)
	struct FMulticastInlineDelegate OnNavMapMarkCleared; // 0x290(0x10)
	struct FMulticastInlineDelegate OnTalentInitialized; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnTeammateCharacterIdChanged; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnTeammateSkinIdChanged; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnLevelChanged; // 0x2d0(0x10)
	struct FMulticastInlineDelegate OnSkillCDStateChanged; // 0x2e0(0x10)
	struct FMulticastInlineDelegate OnTeammateTalentStateChanged; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnSpecTargetChanged; // 0x300(0x10)
	struct FMulticastInlineDelegate OnBindHPPanelDelegate; // 0x310(0x10)
	struct FMulticastInlineDelegate OnBindItemPanelDelegate; // 0x320(0x10)
	struct FMulticastInlineDelegate OnBindPowerBarDelegate; // 0x330(0x10)
	struct FMulticastInlineDelegate OnRefreshBackpackItemDelegate; // 0x340(0x10)
	struct FMulticastInlineDelegate OnRefreshBackpackEquipDelegate; // 0x350(0x10)
	struct FMulticastInlineDelegate OnRefreshBackpackWeaponDelegate; // 0x360(0x10)
	struct FMulticastInlineDelegate OnRefreshBackpackWeaponPartDelegate; // 0x370(0x10)
	struct FMulticastInlineDelegate OnRefreshBroadCastModeDelegate; // 0x380(0x10)
	struct FMulticastInlineDelegate OnSetActiveOpenBoxBtnDelegate; // 0x390(0x10)
	struct FMulticastInlineDelegate OnSetActiveOpenBoxProgressDelegate; // 0x3a0(0x10)
	struct FMulticastInlineDelegate OnSetTreasureBoxActorDelegate; // 0x3b0(0x10)
	struct FMulticastInlineDelegate OnSetAirdropBoxActorDelegate; // 0x3c0(0x10)
	struct FMulticastInlineDelegate OnHideTreasureBoxUIDelegate; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnHideAirdropBoxUIDelegate; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnSetPickupSwitchDelegate; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnAirdropCharChangeDelegate; // 0x400(0x10)
	struct FMulticastInlineDelegate OnAirdropProgressChangeDelegate; // 0x410(0x10)
	struct FMulticastInlineDelegate OnPlayerNumberChanged; // 0x420(0x10)
	struct FMulticastInlineDelegate OnCapsulePlayerNumChanged; // 0x430(0x10)
	struct FMulticastInlineDelegate OnBombingStarted; // 0x440(0x10)
	struct FMulticastInlineDelegate OnBombingStopped; // 0x450(0x10)
	struct FMulticastInlineDelegate OnItemDiscarded; // 0x460(0x10)
	struct FMulticastInlineDelegate OnSettingRequestOpened; // 0x470(0x10)
	struct FMulticastInlineDelegate OnSettingRequestClosed; // 0x480(0x10)
	struct FMulticastInlineDelegate OnMigrateAccountVisibilityRequestChanged; // 0x490(0x10)
	struct FMulticastInlineDelegate OnCustomizeVisibilityRequestChanged; // 0x4a0(0x10)
	struct FMulticastInlineDelegate OnDriveCustomizeOpened; // 0x4b0(0x10)
	struct FMulticastInlineDelegate OnDriveCustomizeClosed; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnBackpackTookPickup; // 0x4d0(0x10)
	struct FMulticastInlineDelegate OnBackpackReleasedPickup; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnToggleCursorVisibility; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnBackpackVisibilitySet; // 0x500(0x10)
	struct FMulticastInlineDelegate OnElectricShopVisibilitySet; // 0x510(0x10)
	struct FMulticastInlineDelegate OnBigMapVisibilitySet; // 0x520(0x10)
	struct FMulticastInlineDelegate OnRescueBtnVisibilitySet; // 0x530(0x10)
	struct FMulticastInlineDelegate OnBuyResurrectBtnVisibilitySet; // 0x540(0x10)
	struct FMulticastInlineDelegate OnBigMapCloseButtonClicked; // 0x550(0x10)
	struct FMulticastInlineDelegate OnPickupFlagChanged; // 0x560(0x10)
	struct FMulticastInlineDelegate OnPickupListVisibilityChanged; // 0x570(0x10)
	struct FMulticastInlineDelegate OnPickupItemSet; // 0x580(0x10)
	struct FMulticastInlineDelegate OnPickupItemCalculated; // 0x590(0x10)
	struct FMulticastInlineDelegate OnPickupCheckValidUpdated; // 0x5a0(0x10)
	struct FMulticastInlineDelegate OnPickupCheckHighlightUpdated; // 0x5b0(0x10)
	struct FMulticastInlineDelegate OnPickupCheckStatesUpdated; // 0x5c0(0x10)
	struct FMulticastInlineDelegate OnPickupItemSelected; // 0x5d0(0x10)
	struct FMulticastInlineDelegate OnTogglePickupDelegate; // 0x5e0(0x10)
	struct FMulticastInlineDelegate OnPickupListDataUpdated; // 0x5f0(0x10)
	struct FMulticastInlineDelegate OnPickupSingleDataUpdated; // 0x600(0x10)
	struct FMulticastInlineDelegate OnPlayerDead; // 0x610(0x10)
	struct FMulticastInlineDelegate OnJoyStickSprintStateReset; // 0x620(0x10)
	struct FMulticastInlineDelegate OnJoyStickInputReset; // 0x630(0x10)
	struct FMulticastInlineDelegate OnJoyStickResetAll; // 0x640(0x10)
	struct FMulticastInlineDelegate OnTutorialSequenceRequested; // 0x650(0x10)
	struct FMulticastInlineDelegate OnDrivingTutorialStopped; // 0x660(0x10)
	struct FMulticastInlineDelegate OnFireButtonsInputReset; // 0x670(0x10)
	struct FMulticastInlineDelegate OnTeamDeathMatchLeaderboard; // 0x680(0x10)
	struct FMulticastInlineDelegate OnGameModeChangeWeapon; // 0x690(0x10)
	bool bBackpackVisible; // 0x6a0(0x01)
	bool bElectricShopVisible; // 0x6a1(0x01)
	bool bBigMapVisible; // 0x6a2(0x01)
	bool bMapVehicleSpawnListVisible; // 0x6a3(0x01)
	bool bRescueBtnVisible; // 0x6a4(0x01)
	bool bBuyResurrectBtnVisible; // 0x6a5(0x01)
	char pad_6A6[0x2]; // 0x6a6(0x02)
	struct FMulticastInlineDelegate OnInBattle; // 0x6a8(0x10)
	struct FMulticastInlineDelegate OnNotInBattle; // 0x6b8(0x10)
	struct FMulticastInlineDelegate OnRadarStationUpdated; // 0x6c8(0x10)
	struct FMulticastInlineDelegate OnAngleViewEnabled; // 0x6d8(0x10)
	struct FMulticastInlineDelegate OnCharacterSwimStateChanged; // 0x6e8(0x10)
	struct FMulticastInlineDelegate OnCharacterWaterClimbAvailable; // 0x6f8(0x10)
	struct FMulticastInlineDelegate OnHitTraceAdded; // 0x708(0x10)
	struct FMulticastInlineDelegate OnHitTraceCleared; // 0x718(0x10)
	struct FMulticastInlineDelegate OnProfessionFunctionalChanged; // 0x728(0x10)
	struct FMulticastInlineDelegate OnPickupListAdd; // 0x738(0x10)
	struct FMulticastInlineDelegate OnPickupListRemove; // 0x748(0x10)
	struct FMulticastInlineDelegate OnTeammateStateChanged; // 0x758(0x10)
	struct FMulticastInlineDelegate OnRepliableMessageChanged; // 0x768(0x10)
	struct FMulticastInlineDelegate OnPlayerFlagDisplayChanged; // 0x778(0x10)
	struct FMulticastInlineDelegate OnSpectateModeEntered; // 0x788(0x10)
	struct FMulticastInlineDelegate OnSpectateModeExited; // 0x798(0x10)
	struct FMulticastInlineDelegate OnSpectateReferToChanged; // 0x7a8(0x10)
	struct FMulticastInlineDelegate OnSpectateTargetItemsChanged; // 0x7b8(0x10)
	struct FMulticastInlineDelegate OnPlayersCountChanged; // 0x7c8(0x10)
	struct FMulticastInlineDelegate OnEndMatchCountdownChanged; // 0x7d8(0x10)
	struct FMulticastInlineDelegate OnMarkButtonHoverChanged; // 0x7e8(0x10)
	struct FMulticastInlineDelegate OnMarkButtonTouchMoved; // 0x7f8(0x10)
	struct FMulticastInlineDelegate OnMarkButtonTouchMovedByGamepad; // 0x808(0x10)
	struct FMulticastInlineDelegate OnMarkButtonBeenLongPressed; // 0x818(0x10)
	struct FMulticastInlineDelegate OnMarkButtonDragSelectEnded; // 0x828(0x10)
	struct FMulticastInlineDelegate OnBattleModeChanged; // 0x838(0x10)
	char pad_848[0x8]; // 0x848(0x08)
	struct FMulticastInlineDelegate OnCharacterSet; // 0x850(0x10)
	struct FMulticastInlineDelegate OnCharacterIDSet; // 0x860(0x10)
	struct FMulticastInlineDelegate OnCharacterHPChanged; // 0x870(0x10)
	char pad_880[0x20]; // 0x880(0x20)
	struct FMulticastInlineDelegate OnCharacterDead; // 0x8a0(0x10)
	struct FMulticastInlineDelegate OnCharacterEnterWater; // 0x8b0(0x10)
	struct FMulticastInlineDelegate OnCharacterSelfRebirth; // 0x8c0(0x10)
	struct FMulticastInlineDelegate OnCharacterLevelUp; // 0x8d0(0x10)
	struct FMulticastInlineDelegate OnCharacterGainExp; // 0x8e0(0x10)
	struct FMulticastInlineDelegate OnCharacterLevelExpChanged; // 0x8f0(0x10)
	struct FMulticastInlineDelegate OnCharacterAllReady; // 0x900(0x10)
	struct FMulticastInlineDelegate OnBattleUpgradeEffect; // 0x910(0x10)
	struct FMulticastInlineDelegate OnSelectingBattleUpgradeEffectBegin; // 0x920(0x10)
	struct FMulticastInlineDelegate OnSelectingBattleUpgradeEffectFinish; // 0x930(0x10)
	struct FMulticastInlineDelegate OnSpectateBattleUpgradeEffectUpdate; // 0x940(0x10)
	struct FMulticastInlineDelegate OnTeammateRebirth; // 0x950(0x10)
	struct FMulticastInlineDelegate OnDamagingActorsChange; // 0x960(0x10)
	struct FMulticastInlineDelegate OnAimingEnemy; // 0x970(0x10)
	struct FMulticastInlineDelegate OnScoutCharactersChange; // 0x980(0x10)
	struct FMulticastInlineDelegate OnDoppelgangerActive; // 0x990(0x10)
	char pad_9A0[0x8]; // 0x9a0(0x08)
	struct FMulticastInlineDelegate OnCharacterLevelChanged; // 0x9a8(0x10)
	char pad_9B8[0x10]; // 0x9b8(0x10)
	struct FMulticastInlineDelegate OnRapidBoostActivationChanged; // 0x9c8(0x10)
	struct FMulticastInlineDelegate OnTrySpawnSuperRadar; // 0x9d8(0x10)
	struct FMulticastInlineDelegate OnSuperScaningStart; // 0x9e8(0x10)
	struct FMulticastInlineDelegate OnSuperScaningRemovePlayer; // 0x9f8(0x10)
	struct FMulticastInlineDelegate OnSuperScaningEnd; // 0xa08(0x10)
	struct FMulticastInlineDelegate OnSuperScanCameraMoveForward; // 0xa18(0x10)
	struct FMulticastInlineDelegate OnSuperScanCameraMoveRight; // 0xa28(0x10)
	struct FMulticastInlineDelegate OnSuperScaningWidgetShow; // 0xa38(0x10)
	char pad_A48[0x10]; // 0xa48(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityChange; // 0xa58(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityStartCD; // 0xa68(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityEndCD; // 0xa78(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityCDDurationChange; // 0xa88(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityStartCDUTCTimeUpdate; // 0xa98(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityStateChange; // 0xaa8(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityEnd; // 0xab8(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityContinous; // 0xac8(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffContinous; // 0xad8(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffUpdate; // 0xae8(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffEnd; // 0xaf8(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffPause; // 0xb08(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffResume; // 0xb18(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityHideControlHUD; // 0xb28(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityInputAction; // 0xb38(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityAddSummonBuff; // 0xb48(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityUsingStatusChanged; // 0xb58(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityCanTriggerAgain; // 0xb68(0x10)
	struct FMulticastInlineDelegate OnCharacterNightComesActorChanged; // 0xb78(0x10)
	struct FMulticastInlineDelegate OnMobileWeaponInputAction; // 0xb88(0x10)
	struct FMulticastInlineDelegate OnCanSkilledJump; // 0xb98(0x10)
	struct FMulticastInlineDelegate Top3Team; // 0xba8(0x10)
	struct FMulticastInlineDelegate OnRoleGEShieldMultiRecoverCoolDownEffect; // 0xbb8(0x10)
	char pad_BC8[0x20]; // 0xbc8(0x20)
	struct FMulticastInlineDelegate OnMemberFlagIDChanged01; // 0xbe8(0x10)
	struct FMulticastInlineDelegate OnMemberFlagIDChanged02; // 0xbf8(0x10)
	struct FMulticastInlineDelegate OnMemberFlagIDChanged03; // 0xc08(0x10)
	struct FMulticastInlineDelegate OnMemberFlagIDChanged04; // 0xc18(0x10)
	struct FMulticastInlineDelegate OnDrivingStateChanged; // 0xc28(0x10)
	struct FMulticastInlineDelegate OnVehicleWeaponAbilityActivated; // 0xc38(0x10)
	struct FMulticastInlineDelegate OnVehicleScopeInitialized; // 0xc48(0x10)
	struct FMulticastInlineDelegate OnVehicleScopeValueChanged; // 0xc58(0x10)
	struct FMulticastInlineDelegate OnSwitchToNextVehicleScope; // 0xc68(0x10)
	struct FMulticastInlineDelegate OnVehicleWeaponScopeDelegate; // 0xc78(0x10)
	struct FMulticastInlineDelegate OnTransformerChangeWeaponDelegate; // 0xc88(0x10)
	struct FMulticastInlineDelegate OnVehicleTypeChangeDelegate; // 0xc98(0x10)
	struct FMulticastInlineDelegate OnVehicleWeaponNoAmmoAlert; // 0xca8(0x10)
	struct FMulticastInlineDelegate OnVehicleAbilityActivationChanged; // 0xcb8(0x10)
	struct FMulticastInlineDelegate OnMapVehicleSpawnListInitialized; // 0xcc8(0x10)
	struct FMulticastInlineDelegate OnVehicleFlyingProgressVisible; // 0xcd8(0x10)
	struct FMulticastInlineDelegate OnInputSprintLockStart; // 0xce8(0x10)
	struct FMulticastInlineDelegate OnSprintIconActived; // 0xcf8(0x10)
	struct FMulticastInlineDelegate OnSprintIconHide; // 0xd08(0x10)
	struct FMulticastInlineDelegate OnSprintLockIconActived; // 0xd18(0x10)
	struct FMulticastInlineDelegate OnTeamMessageReceive; // 0xd28(0x10)
	struct FMulticastInlineDelegate OnVJetForbiddenChanged; // 0xd38(0x10)
	struct FMulticastInlineDelegate OnHJetForbiddenChanged; // 0xd48(0x10)
	struct FMulticastInlineDelegate OnVJetTotalTimesSet; // 0xd58(0x10)
	struct FMulticastInlineDelegate OnHJetTotalTimesSet; // 0xd68(0x10)
	struct FMulticastInlineDelegate OnVJetRestTimesSet; // 0xd78(0x10)
	struct FMulticastInlineDelegate OnHJetRestTimesSet; // 0xd88(0x10)
	struct FMulticastInlineDelegate OnVJetChargeStateChanged; // 0xd98(0x10)
	struct FMulticastInlineDelegate OnVJetCDStateChanged; // 0xda8(0x10)
	struct FMulticastInlineDelegate OnHJetChargeStateChanged; // 0xdb8(0x10)
	struct FMulticastInlineDelegate OnHJetCDStateChanged; // 0xdc8(0x10)
	struct FMulticastInlineDelegate OnVJetTimesCharging; // 0xdd8(0x10)
	struct FMulticastInlineDelegate OnHJetTimesCharging; // 0xde8(0x10)
	struct FMulticastInlineDelegate OnVJetCoolingDown; // 0xdf8(0x10)
	struct FMulticastInlineDelegate OnHJetCoolingDown; // 0xe08(0x10)
	struct FMulticastInlineDelegate OnVJetModuleLevelChanged; // 0xe18(0x10)
	struct FMulticastInlineDelegate OnHJetModuleLevelChanged; // 0xe28(0x10)
	struct FMulticastInlineDelegate OnSkydiveFlyStateChanged; // 0xe38(0x10)
	struct FMulticastInlineDelegate OnSkydiveAltitudeUpdate; // 0xe48(0x10)
	struct FMulticastInlineDelegate OnSkydiveSpeedUpdate; // 0xe58(0x10)
	struct FMulticastInlineDelegate OnShowGameNoticeDelegate; // 0xe68(0x10)
	struct FMulticastInlineDelegate OnSetGameNoticeVisibilityDelegate; // 0xe78(0x10)
	struct FMulticastInlineDelegate OnStartCountDownDelegate; // 0xe88(0x10)
	struct FMulticastInlineDelegate OnStopCountDownDelegate; // 0xe98(0x10)
	struct FMulticastInlineDelegate OnHideInteractionListRequested; // 0xea8(0x10)
	struct FMulticastInlineDelegate OnCancelHideInteractionListRequested; // 0xeb8(0x10)
	struct FMulticastInlineDelegate OnInteractionTriggerAppear; // 0xec8(0x10)
	struct FMulticastInlineDelegate OnInteractionTriggerDisappear; // 0xed8(0x10)
	struct FMulticastInlineDelegate OnStartInteractionCountDown; // 0xee8(0x10)
	struct FMulticastInlineDelegate OnStopInteractionCountDown; // 0xef8(0x10)
	struct FMulticastInlineDelegate OnStartReviveTeammateCountDownDelegate; // 0xf08(0x10)
	struct FMulticastInlineDelegate OnStopReviveTeammateCountDownDelegate; // 0xf18(0x10)
	struct FMulticastInlineDelegate OnReviveWillBeDisabledHintDelegate; // 0xf28(0x10)
	struct FMulticastInlineDelegate OnStartReviveItemRecycleCountDownDelegate; // 0xf38(0x10)
	char pad_F48[0x60]; // 0xf48(0x60)
	struct FMulticastInlineDelegate OnOverlapElectricShopDelegate; // 0xfa8(0x10)
	struct FMulticastInlineDelegate OnUpdateVehicleInteractionDelegate; // 0xfb8(0x10)
	struct FMulticastInlineDelegate OnCruiseHeightSet; // 0xfc8(0x10)
	struct FMulticastInlineDelegate OnEnterCruisingDelegate; // 0xfd8(0x10)
	struct FMulticastInlineDelegate OnEnterParachutingDelegate; // 0xfe8(0x10)
	struct FMulticastInlineDelegate OnEnterLandingDelegate; // 0xff8(0x10)
	struct FMulticastInlineDelegate OnMapSkydivingIconsUpdateDelegate; // 0x1008(0x10)
	struct FMulticastInlineDelegate OnEShopWeaponUpgradeDelegate; // 0x1018(0x10)
	struct FMulticastInlineDelegate OnEShopShieldUpgradeDelegate; // 0x1028(0x10)
	struct FMulticastInlineDelegate OnEShopPurchaseSuccessDelegate; // 0x1038(0x10)
	struct FMulticastInlineDelegate OnEShopItemCDRefreshDelegate; // 0x1048(0x10)
	struct FMulticastInlineDelegate OnEShopItemRefreshDelegate; // 0x1058(0x10)
	struct FMulticastInlineDelegate OnEShopSlotWeaponUpgradeDelegate; // 0x1068(0x10)
	struct FMulticastInlineDelegate OnEShopWeaponChangeDelegate; // 0x1078(0x10)
	struct FMulticastInlineDelegate OnEShopPoolRefreshDelegate; // 0x1088(0x10)
	struct FMulticastInlineDelegate TryOpenElectricShopDelegate; // 0x1098(0x10)
	struct FDelegate OnTeammateHomePanelGetting; // 0x10a8(0x10)
	struct FDelegate OnHomeBattleUIGetting; // 0x10b8(0x10)
	struct FDelegate OnHomeMainBuildGetting; // 0x10c8(0x10)
	struct FDelegate OnHomeFriendListGetting; // 0x10d8(0x10)
	struct FDelegate OnHomeLevelUpUIGetting; // 0x10e8(0x10)
	struct FMulticastInlineDelegate OnShieldAvailableChanged; // 0x10f8(0x10)
	struct FMulticastInlineDelegate OnShieldChanged; // 0x1108(0x10)
	struct FMulticastInlineDelegate OnRechargeShieldEnd; // 0x1118(0x10)
	struct FMulticastInlineDelegate OnShieldFXUpdated; // 0x1128(0x10)
	struct FMulticastInlineDelegate OnShieldValueChanged; // 0x1138(0x10)
	struct FMulticastInlineDelegate OnMaxShieldValueUpdate; // 0x1148(0x10)
	struct FMulticastInlineDelegate FOnSteamRechargeShield; // 0x1158(0x10)
	struct FMulticastInlineDelegate TryCancelCountDown; // 0x1168(0x10)
	struct FMulticastInlineDelegate OnEnemyShieldChanged; // 0x1178(0x10)
	struct FMulticastInlineDelegate OnEnemyShieldValueChanged; // 0x1188(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeStart; // 0x1198(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeInterrupt; // 0x11a8(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeFinish; // 0x11b8(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeItemCountChanged; // 0x11c8(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeItemCountChangedBP; // 0x11d8(0x10)
	struct FMulticastInlineDelegate OnAckShieldUpgradeShopInteract; // 0x11e8(0x10)
	struct FDelegate TryOpenTreasureBoxDelegate; // 0x11f8(0x10)
	struct FDelegate TryOpenAirDropTreasureBoxDelegate; // 0x1208(0x10)
	struct FMulticastInlineDelegate TryCancelAirDropTreasureBoxDelegate; // 0x1218(0x10)
	struct FDelegate TryPickupFirstItemDelegate; // 0x1228(0x10)
	struct FDelegate CheckPickupItemValidDelegate; // 0x1238(0x10)
	struct FDelegate CheckPickupItemValidInBackpack; // 0x1248(0x10)
	struct FMulticastInlineDelegate SelectItemIndex; // 0x1258(0x10)
	struct FMulticastInlineDelegate SelectPreviousItem; // 0x1268(0x10)
	struct FMulticastInlineDelegate SelectNextItem; // 0x1278(0x10)
	char pad_1288[0x10]; // 0x1288(0x10)
	struct FMulticastInlineDelegate OnPickupEntryPlayAnim; // 0x1298(0x10)
	struct FMulticastInlineDelegate OnRequstPickupEntryPlayAnim; // 0x12a8(0x10)
	struct FMulticastInlineDelegate OnRequstPickupEntryPlayAnimCustom; // 0x12b8(0x10)
	struct FMulticastInlineDelegate OnRequstPickupSpecificItem; // 0x12c8(0x10)
	struct FMulticastInlineDelegate NotifyTeammateReviving; // 0x12d8(0x10)
	struct FDelegate OnInteractEvent; // 0x12e8(0x10)
	struct FMulticastInlineDelegate OnSetBackpackDropMaskVisibility; // 0x12f8(0x10)
	struct FMulticastInlineDelegate OnEndBackpackDragDrop; // 0x1308(0x10)
	struct FMulticastInlineDelegate OnBackpackHUDVisibilityChanged; // 0x1318(0x10)
	char pad_1328[0x20]; // 0x1328(0x20)
	struct FMulticastInlineDelegate OnBattleHUDVisibilityChanged; // 0x1348(0x10)
	struct FMulticastInlineDelegate OnMicroPhonePressed; // 0x1358(0x10)
	struct FMulticastInlineDelegate OnSpeakerPressed; // 0x1368(0x10)
	struct FMulticastInlineDelegate OnSwitchEMP; // 0x1378(0x10)
	struct FMulticastInlineDelegate OnToggleAssistAim; // 0x1388(0x10)
	struct FMulticastInlineDelegate OnToggleAutoFire; // 0x1398(0x10)
	struct FMulticastInlineDelegate OnTreatmentEnd; // 0x13a8(0x10)

	void VehicleWeaponScopeChanged__DelegateSignature(bool BOpened); // DelegateFunction Solarland.HUDDispatcherBase.VehicleWeaponScopeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void VehicleWeaponNoAmmoAlert__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.VehicleWeaponNoAmmoAlert__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void VehicleTypeChanged__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.VehicleTypeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void VehicleFlyingProgress__DelegateSignature(bool bVisible); // DelegateFunction Solarland.HUDDispatcherBase.VehicleFlyingProgress__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void VehicleAbilityActivationChanged__DelegateSignature(bool bInActivated, bool bCanCancel, int32_t InAbilityIndex, float InDurationTime); // DelegateFunction Solarland.HUDDispatcherBase.VehicleAbilityActivationChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void UpdateSkydivingDataOnCharacterSet(struct ASolarCharacter* ControlledCharacter); // Function Solarland.HUDDispatcherBase.UpdateSkydivingDataOnCharacterSet // (Final|Native|Public) // @ game+0x29f6f50
	void UpdateCruiseDataOnCharacterSet(struct ASolarCharacter* ControlledCharacter); // Function Solarland.HUDDispatcherBase.UpdateCruiseDataOnCharacterSet // (Final|Native|Public) // @ game+0x29f6dc0
	void TwoIntUIInteractDelegate__DelegateSignature(int32_t Value01, int32_t Value02); // DelegateFunction Solarland.HUDDispatcherBase.TwoIntUIInteractDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void TwoIntImplementableDelegate__DelegateSignature(int32_t Value01, int32_t Value02); // DelegateFunction Solarland.HUDDispatcherBase.TwoIntImplementableDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	bool TrySkydiveUnfollow__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.TrySkydiveUnfollow__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void TransformerWeaponChanged__DelegateSignature(enum class ETransformerType InType); // DelegateFunction Solarland.HUDDispatcherBase.TransformerWeaponChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void Top3Team__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.Top3Team__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void ToggledBigMapVisibility(); // Function Solarland.HUDDispatcherBase.ToggledBigMapVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x29f6c00
	void ToggledBackpackVisibility(); // Function Solarland.HUDDispatcherBase.ToggledBackpackVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x29f6be0
	void StopDrivingTutorial(); // Function Solarland.HUDDispatcherBase.StopDrivingTutorial // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f6bc0
	void SprintLockIconActived__DelegateSignature(struct FVector2D& InSprintPosition); // DelegateFunction Solarland.HUDDispatcherBase.SprintLockIconActived__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2d0d160
	void SolarPlayerStateDelegate__DelegateSignature(struct ASolarPlayerState* InPlayerState); // DelegateFunction Solarland.HUDDispatcherBase.SolarPlayerStateDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void SimpleUIInteractDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleUIInteractDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void SimpleTriggerDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleTriggerDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void SimpleStringDelegate__DelegateSignature(struct FString Value); // DelegateFunction Solarland.HUDDispatcherBase.SimpleStringDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void SimpleSpectatorDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleSpectatorDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void SimplePlayerStateDelegate__DelegateSignature(struct ASolarPlayerState* TeammatePS); // DelegateFunction Solarland.HUDDispatcherBase.SimplePlayerStateDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void SimpleOnRefreshDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnRefreshDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	bool SimpleOnBindRetOneParamDelegate__DelegateSignature(bool bAutoPickup); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnBindRetOneParamDelegate__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	bool SimpleOnBindRetOneIntParamDelegate__DelegateSignature(int32_t InIthisID); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnBindRetOneIntParamDelegate__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	bool SimpleOnBindRetDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnBindRetDelegate__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void SimpleOnBindDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnBindDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void SimpleImplementableDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleImplementableDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void SimpleFloatDelegate__DelegateSignature(float Value); // DelegateFunction Solarland.HUDDispatcherBase.SimpleFloatDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void SimpleCharacterLuaDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleCharacterLuaDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void SimpleBoolDelegate__DelegateSignature(bool Value); // DelegateFunction Solarland.HUDDispatcherBase.SimpleBoolDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void ShowSuperScanChooseUI(bool bShow); // Function Solarland.HUDDispatcherBase.ShowSuperScanChooseUI // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f6a60
	void ShieldUpgradeItemCntChangedBPDelegate__DelegateSignature(int32_t ShieldLevel, int32_t ShieldMaxLevel, int32_t ShieldUpgradeItemNum, int32_t NeedShieldUpgradeItemNum, int32_t MaxShieldUpgradeItemNum); // DelegateFunction Solarland.HUDDispatcherBase.ShieldUpgradeItemCntChangedBPDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void SetRescueBtnVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetRescueBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x29f68b0
	void SetMapVehicleSpawnListVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetMapVehicleSpawnListVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x29f6820
	void SetElectricShopVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetElectricShopVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x29f65f0
	void SetBuyResurrectBtnVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetBuyResurrectBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x29f6440
	void SetBigMapVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetBigMapVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x29f63b0
	void SetBackpackVisibility(bool bInValue); // Function Solarland.HUDDispatcherBase.SetBackpackVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x29f6320
	void RequestHideInteractionList(); // Function Solarland.HUDDispatcherBase.RequestHideInteractionList // (Final|Native|Public|Const) // @ game+0x29f6100
	void RequestCancelHideInteractionList(); // Function Solarland.HUDDispatcherBase.RequestCancelHideInteractionList // (Final|Native|Public|Const) // @ game+0x29f60e0
	void RemoveItemFromPickup(struct UObject* InCardItem, bool bPickup); // Function Solarland.HUDDispatcherBase.RemoveItemFromPickup // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f6010
	void PlayerTutorialSequence(bool bPlay); // Function Solarland.HUDDispatcherBase.PlayerTutorialSequence // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f5f00
	void PickupListRemoveDelegate__DelegateSignature(struct UObject* CardItem, bool bPickup); // DelegateFunction Solarland.HUDDispatcherBase.PickupListRemoveDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void PickupListDelegate__DelegateSignature(struct UObject* CardItem); // DelegateFunction Solarland.HUDDispatcherBase.PickupListDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnWidgetVisibilitySet__DelegateSignature(bool bVisible); // DelegateFunction Solarland.HUDDispatcherBase.OnWidgetVisibilitySet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnWidgetButtonClicked__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnWidgetButtonClicked__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnVehicleWeaponAbilityActivated__DelegateSignature(bool bInActive); // DelegateFunction Solarland.HUDDispatcherBase.OnVehicleWeaponAbilityActivated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnVehicleScopeValueChanged__DelegateSignature(float InValue); // DelegateFunction Solarland.HUDDispatcherBase.OnVehicleScopeValueChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnVehicleScopeInitialized__DelegateSignature(struct UUserWidget* Widget, bool bInSpectate); // DelegateFunction Solarland.HUDDispatcherBase.OnVehicleScopeInitialized__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnUpdateVehicleInteractionDelegate__DelegateSignature(enum class EVehicleInterationUIState UiState, struct ASolarVehiclePawn* InVehicleComponent); // DelegateFunction Solarland.HUDDispatcherBase.OnUpdateVehicleInteractionDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTutorialSequenceRequested__DelegateSignature(bool bPlay); // DelegateFunction Solarland.HUDDispatcherBase.OnTutorialSequenceRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTrySpawnSuperRadar__DelegateSignature(bool bSpawn); // DelegateFunction Solarland.HUDDispatcherBase.OnTrySpawnSuperRadar__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTreatmentDelegate__DelegateSignature(bool bWasCancelled); // DelegateFunction Solarland.HUDDispatcherBase.OnTreatmentDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeamMessageReceive__DelegateSignature(struct FString MemberName, struct FString Message1, bool bLocalPlayer, bool bSound, int32_t PosInTeam, struct FString Message2); // DelegateFunction Solarland.HUDDispatcherBase.OnTeamMessageReceive__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammateTalentStateChanged__DelegateSignature(enum class ETalentState TalentState, char PosInTeam, float AdditionalParam); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateTalentStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammateShieldChanged__DelegateSignature(char PosInTeam, struct FShieldInfo& OldShield, struct FShieldInfo& NewShield); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateShieldChanged__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnTeammateReviveStateChanged__DelegateSignature(struct ASolarPlayerState* RevivingMePlayer, struct ASolarPlayerState* SolarPlayerState); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateReviveStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammateReviveItemChanged__DelegateSignature(char PosInTeam, char ReviveItemNum, bool bCanRebirth); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateReviveItemChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammateResurrectTimeChanged__DelegateSignature(struct ASolarPlayerState* SolarPlayerState, int32_t ResurrectTime, int32_t ResurrectTimeCfg); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateResurrectTimeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammateRescueStateChanged__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateRescueStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammatePlatStateRemove__DelegateSignature(char PosInTeam, bool bLastOne); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammatePlatStateRemove__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammateIntegerDataChanged__DelegateSignature(int32_t Data, char PosInTeam); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateIntegerDataChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammateHUDIntoScreen__DelegateSignature(struct ASolarPlayerState* SolarPlayerState); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateHUDIntoScreen__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammateHPChanged__DelegateSignature(char PosInTeam, float CurrentHP, float MaxHP); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateHPChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammateCallForHelpNotify__DelegateSignature(struct ASolarPlayerState* SolarPlayerState); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateCallForHelpNotify__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammateBattleStateChanged__DelegateSignature(struct ASCMPlayerState* TeammateState); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateBattleStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeammateActionStateChanged__DelegateSignature(struct ASolarPlayerState* SolarPlayerState, struct FGameplayTag Tag, int32_t NewCount); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateActionStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSwitchToNextVehicleScope__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnSwitchToNextVehicleScope__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSwitchEMP__DelegateSignature(struct ASolarCharacter* InCharacter, bool InbSwitchOnEMP); // DelegateFunction Solarland.HUDDispatcherBase.OnSwitchEMP__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSuperScaningWidgetShow__DelegateSignature(bool bShow); // DelegateFunction Solarland.HUDDispatcherBase.OnSuperScaningWidgetShow__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSuperScaningStart__DelegateSignature(struct TArray<struct FString>& InScanPlayers); // DelegateFunction Solarland.HUDDispatcherBase.OnSuperScaningStart__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnSuperScaningRemovePlayer__DelegateSignature(struct FString InRemovePlayer); // DelegateFunction Solarland.HUDDispatcherBase.OnSuperScaningRemovePlayer__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSuperScaningEnd__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnSuperScaningEnd__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnStopCountDownDelegate__DelegateSignature(int32_t InTextId); // DelegateFunction Solarland.HUDDispatcherBase.OnStopCountDownDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSteamRechargeShieldDecl__DelegateSignature(bool bUseBigRecharger); // DelegateFunction Solarland.HUDDispatcherBase.OnSteamRechargeShieldDecl__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnStartCountDownDelegate__DelegateSignature(struct FCountDownInfo& InCountDownInfo); // DelegateFunction Solarland.HUDDispatcherBase.OnStartCountDownDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnSprintIconHide__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnSprintIconHide__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSprintIconActived__DelegateSignature(struct FVector2D& InSprintPosition); // DelegateFunction Solarland.HUDDispatcherBase.OnSprintIconActived__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2d0d160
	void OnSpectateTargetItemsChanged__DelegateSignature(struct TArray<struct FReplicateItemData> InItemDatas); // DelegateFunction Solarland.HUDDispatcherBase.OnSpectateTargetItemsChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.HUDDispatcherBase.OnSpectateTargetChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x29f5e10
	void OnSpectateReferToChanged__DelegateSignature(struct ASolarPlayerState* ReferToPlayerState, enum class ESpectateReferToState State); // DelegateFunction Solarland.HUDDispatcherBase.OnSpectateReferToChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSpectateBattleUpgradeEffectUpdate__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.HUDDispatcherBase.OnSpectateBattleUpgradeEffectUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSpecTargetOrLocalCauseDamageChanged__DelegateSignature(float CauseDamage); // DelegateFunction Solarland.HUDDispatcherBase.OnSpecTargetOrLocalCauseDamageChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSpecTargetOrLocalAssistChanged__DelegateSignature(int32_t Assist); // DelegateFunction Solarland.HUDDispatcherBase.OnSpecTargetOrLocalAssistChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSpecTargetChanged__DelegateSignature(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // DelegateFunction Solarland.HUDDispatcherBase.OnSpecTargetChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSkydivingMemberDataUpdated__DelegateSignature(struct ASolarPlayerState* MemberPS); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydivingMemberDataUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSkydivingFollowRequestResponded__DelegateSignature(struct ASolarPlayerState* Follower, bool bAgreed); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydivingFollowRequestResponded__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveSpeedUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSkydiveFlyStateChanged__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveFlyStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSkydiveDataUpdate__DelegateSignature(float NewData); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveDataUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveAltitudeUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSkillActivationChanged__DelegateSignature(bool bActivated); // DelegateFunction Solarland.HUDDispatcherBase.OnSkillActivationChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnShowGameNotice__DelegateSignature(int32_t InNoticeID, struct FHUDNoticeParams& InNoiceParams); // DelegateFunction Solarland.HUDDispatcherBase.OnShowGameNotice__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnShieldValueChanged__DelegateSignature(enum class EShieldWidgetState WidgetState, float CurValue, float ChangeValue, struct FString SolarPlayerID, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // DelegateFunction Solarland.HUDDispatcherBase.OnShieldValueChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnShieldDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnShieldDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnShieldChanged__DelegateSignature(float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield); // DelegateFunction Solarland.HUDDispatcherBase.OnShieldChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnShieldAvailableChanged__DelegateSignature(bool bAvailable); // DelegateFunction Solarland.HUDDispatcherBase.OnShieldAvailableChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSetTreasureBoxActorDelegate__DelegateSignature(struct AActor* InActor); // DelegateFunction Solarland.HUDDispatcherBase.OnSetTreasureBoxActorDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSetPickupSwitchDelegate__DelegateSignature(enum class EPickupItemType InType, bool InFlag); // DelegateFunction Solarland.HUDDispatcherBase.OnSetPickupSwitchDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSetGameNoticeVisibility__DelegateSignature(enum class ECustomNoticeType InNoticeType, bool InVisibility); // DelegateFunction Solarland.HUDDispatcherBase.OnSetGameNoticeVisibility__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSetBackpackDropMaskVisibility__DelegateSignature(bool bVisible); // DelegateFunction Solarland.HUDDispatcherBase.OnSetBackpackDropMaskVisibility__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSetActiveOpenBoxDelegate__DelegateSignature(bool Inactive); // DelegateFunction Solarland.HUDDispatcherBase.OnSetActiveOpenBoxDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSelectItemIndexDelegate__DelegateSignature(int32_t Index); // DelegateFunction Solarland.HUDDispatcherBase.OnSelectItemIndexDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSelectingBattleUpgradeEffectFinish__DelegateSignature(int32_t SelectedIndex); // DelegateFunction Solarland.HUDDispatcherBase.OnSelectingBattleUpgradeEffectFinish__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSelectingBattleUpgradeEffectBegin__DelegateSignature(struct ASolarCharacter* Target, int32_t Level, struct TArray<int32_t>& EffectIDArray); // DelegateFunction Solarland.HUDDispatcherBase.OnSelectingBattleUpgradeEffectBegin__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnScoutedCharactersChange__DelegateSignature(struct TArray<struct FString> ScoutedCharacters, struct TArray<struct FString> ToBeScoutedCharacters); // DelegateFunction Solarland.HUDDispatcherBase.OnScoutedCharactersChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleRecoveringShieldChange__DelegateSignature(float InCurrentShieldValue, float InRecoveringShieldValue); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleRecoveringShieldChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleRecoveringHealthChange__DelegateSignature(float InCurrentHealthValue, float InRecoveringHealthValue); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleRecoveringHealthChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleGEShieldMultiRecoverCoolDownChange__DelegateSignature(int32_t NewCount); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleGEShieldMultiRecoverCoolDownChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityUsingStatusChanged__DelegateSignature(struct FGameplayTag Tag, int32_t NewCount); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityUsingStatusChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityStateChange__DelegateSignature(int32_t RoleAbilityIndex, int32_t State); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityStateChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityStartCDUTCTimeUpdate__DelegateSignature(int32_t RoleAbilityIndex, float InServerTime); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityStartCDUTCTimeUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityStartCD__DelegateSignature(int32_t RoleAbilityIndex, float StartCDServerTime, float StartCDTimeForReplay); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityStartCD__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityInputAction__DelegateSignature(int32_t RoleAbilityIndex, bool bPress, bool bCanActive); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityInputAction__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityHideControlHUD__DelegateSignature(bool bHide); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityHideControlHUD__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityEndCD__DelegateSignature(int32_t RoleAbilityIndex); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityEndCD__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityEnd__DelegateSignature(int32_t RoleAbilityIndex); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityEnd__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityContinous__DelegateSignature(int32_t RoleAbilityIndex, bool bTurnOn, float Duration); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityContinous__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityChange__DelegateSignature(int32_t RoleAbilityIndex, bool bHaveAbility, int32_t CharacterId, int32_t PlayerLevel); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityCDDurationChange__DelegateSignature(int32_t RoleAbilityIndex, int32_t Duration, bool bDurationReduced); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityCDDurationChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityCanTriggerAgain__DelegateSignature(int32_t RoleAbilityIndex, bool bCanTriggerAgain, float LeftTime, float Duration); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityCanTriggerAgain__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityBuffUpdate__DelegateSignature(struct FActiveGameplayEffectHandle& ActiveEffectHandle, float Duration, float RemainTime, bool bInPrePhase, float PreDuration, float PreRemainTime); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityBuffUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnRoleAbilityBuffPause__DelegateSignature(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityBuffPause__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRoleAbilityBuffEnd__DelegateSignature(bool bIsMainDuration, struct FActiveGameplayEffectHandle& InGameplayEffectHandle); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityBuffEnd__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnRoleAbilityBuffContinous__DelegateSignature(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex, float Duration, float PreDuration, struct FActiveGameplayEffectHandle& ActiveEffectHandle); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityBuffContinous__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnRoleAbilityAddSummonBuff__DelegateSignature(struct FSoftObjectPath& ImagePath, struct AActor* InActor); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityAddSummonBuff__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2d0d160
	void OnReviveStateChanged__DelegateSignature(struct ASolarPlayerState* RevivingMePlayer); // DelegateFunction Solarland.HUDDispatcherBase.OnReviveStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRepliableMessageChanged__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnRepliableMessageChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRemindTeammateRescueNotify__DelegateSignature(struct ASolarPlayerState* SolarPlayerState); // DelegateFunction Solarland.HUDDispatcherBase.OnRemindTeammateRescueNotify__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRechargeShieldEnd__DelegateSignature(bool bWasCancelled); // DelegateFunction Solarland.HUDDispatcherBase.OnRechargeShieldEnd__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnQuickVoiceWheelLongPressEnd__DelegateSignature(bool bPlayerDead); // DelegateFunction Solarland.HUDDispatcherBase.OnQuickVoiceWheelLongPressEnd__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnPoisonEffectUpdated__DelegateSignature(float PosX, float PosY, float Radius); // DelegateFunction Solarland.HUDDispatcherBase.OnPoisonEffectUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnPlayersCountChanged__DelegateSignature(int32_t Num); // DelegateFunction Solarland.HUDDispatcherBase.OnPlayersCountChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnPlayerFlagDisplayChanged__DelegateSignature(bool bDisplay); // DelegateFunction Solarland.HUDDispatcherBase.OnPlayerFlagDisplayChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnPlayerDead__DelegateSignature(struct FKillInfo& DeathMsgInfo); // DelegateFunction Solarland.HUDDispatcherBase.OnPlayerDead__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnPickupSingleDataUpdated__DelegateSignature(struct UObject* InPickupItem); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupSingleDataUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnPickupListVisibilityChanged__DelegateSignature(bool bVisible); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupListVisibilityChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnPickupListDataUpdated__DelegateSignature(struct TArray<struct UObject*>& InPickupItemList, struct TArray<int32_t>& InThisIds); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupListDataUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnPickupItemSet__DelegateSignature(struct TArray<struct AActor*>& InActorList, enum class EPickupItemType InType, bool bShowPickupList); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupItemSet__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnPickupItemSelected__DelegateSignature(struct UObject* SelectWidget, int32_t SelectWidgetThisID); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupItemSelected__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnPickupFlagChanged__DelegateSignature(bool bFlag, bool bNotSelf); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupFlagChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnPickupCheckValidUpdated__DelegateSignature(struct FItemCountsList& ItemCountsList); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupCheckValidUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnPickupCheckStatesUpdated__DelegateSignature(bool bItemUpdate); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupCheckStatesUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnPickupCheckHighlightUpdated__DelegateSignature(enum class EPickupItemType Type, bool IsRecommend); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupCheckHighlightUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnOverlapElectricShopDelegate__DelegateSignature(bool InOverlap); // DelegateFunction Solarland.HUDDispatcherBase.OnOverlapElectricShopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnOnTeammateHUDOutScreen__DelegateSignature(struct ASolarPlayerState* SolarPlayerState); // DelegateFunction Solarland.HUDDispatcherBase.OnOnTeammateHUDOutScreen__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnNavMapMarked__DelegateSignature(char PosInTeam, struct FVector2D& MarkPosition); // DelegateFunction Solarland.HUDDispatcherBase.OnNavMapMarked__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2d0d160
	void OnNavMapMarkCleared__DelegateSignature(char PosInTeam); // DelegateFunction Solarland.HUDDispatcherBase.OnNavMapMarkCleared__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnMobileWeaponInputAction__DelegateSignature(enum class EInputButton InButtonType); // DelegateFunction Solarland.HUDDispatcherBase.OnMobileWeaponInputAction__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnMemberFlagIDChanged__DelegateSignature(int32_t FlagID, bool bClanFlag); // DelegateFunction Solarland.HUDDispatcherBase.OnMemberFlagIDChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnMaxShieldValueUpdate__DelegateSignature(float MaxShieldVal); // DelegateFunction Solarland.HUDDispatcherBase.OnMaxShieldValueUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter, struct FVector2D TouchLocalPos); // DelegateFunction Solarland.HUDDispatcherBase.OnMarkButtonTouchMoved__DelegateSignature // (MulticastDelegate|Public|Delegate|HasDefaults) // @ game+0x2d0d160
	void OnMarkButtonSimpleTriggered__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnMarkButtonSimpleTriggered__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered); // DelegateFunction Solarland.HUDDispatcherBase.OnMarkButtonHoverChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnKillLeaderChangedNotify__DelegateSignature(struct ASolarPlayerState* KillLeader); // DelegateFunction Solarland.HUDDispatcherBase.OnKillLeaderChangedNotify__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnJetTimesChanged__DelegateSignature(int32_t NewTimes); // DelegateFunction Solarland.HUDDispatcherBase.OnJetTimesChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnJetModuleLevelChanged__DelegateSignature(int32_t NewLevel); // DelegateFunction Solarland.HUDDispatcherBase.OnJetModuleLevelChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnJetFlyStateChanged__DelegateSignature(bool bStart); // DelegateFunction Solarland.HUDDispatcherBase.OnJetFlyStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnJetFlyForbiddenChanged__DelegateSignature(enum class EJetFlyForbiddenType ForbiddenType, bool bAdded); // DelegateFunction Solarland.HUDDispatcherBase.OnJetFlyForbiddenChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent); // DelegateFunction Solarland.HUDDispatcherBase.OnJetFlyDataUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnInteractionTriggerDelegate__DelegateSignature(struct FInteractionTriggerInfo& TriggerInfo); // DelegateFunction Solarland.HUDDispatcherBase.OnInteractionTriggerDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnInputTypeChanged__DelegateSignature(struct ASolarPlayerState* PlayerState); // DelegateFunction Solarland.HUDDispatcherBase.OnInputTypeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnInputSprintLockStart__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnInputSprintLockStart__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnInitElectricShopDelegate__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnInitElectricShopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnInhibitBattlePromptTagChanged__DelegateSignature(struct FGameplayTag Tag, int32_t NewCount); // DelegateFunction Solarland.HUDDispatcherBase.OnInhibitBattlePromptTagChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	struct UUserWidget* OnHomelandGetWidget__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnHomelandGetWidget__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void OnHideUIByThisIDDelegate__DelegateSignature(int64_t InThisID); // DelegateFunction Solarland.HUDDispatcherBase.OnHideUIByThisIDDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnEShopWeaponUpgradeDelegate__DelegateSignature(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopWeaponUpgradeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnEShopWeaponChangeDelegate__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopWeaponChangeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnEShopSlotWeaponUpgradeDelegate__DelegateSignature(int32_t InWeaponSlot); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopSlotWeaponUpgradeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnEShopShieldUpgradeDelegate__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopShieldUpgradeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnEShopPurchaseSuccessDelegate__DelegateSignature(int32_t InProductID, struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopPurchaseSuccessDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnEShopInfoUpdateDelegate__DelegateSignature(struct ASolarElectricShop* InElectricShop); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopInfoUpdateDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnEnemyShieldValueChanged__DelegateSignature(enum class EShieldWidgetState WidgetState, float CurValue, float ChangeValue, struct FString SolarPlayerID, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // DelegateFunction Solarland.HUDDispatcherBase.OnEnemyShieldValueChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnEnemyShieldChanged__DelegateSignature(struct FString SolarPlayerID, float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield); // DelegateFunction Solarland.HUDDispatcherBase.OnEnemyShieldChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnEndMatchCountdownChanged__DelegateSignature(int32_t Seconds); // DelegateFunction Solarland.HUDDispatcherBase.OnEndMatchCountdownChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnDrivingTutorialStopped__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnDrivingTutorialStopped__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnDrivingStateChanged__DelegateSignature(enum class EDriveState DriveState); // DelegateFunction Solarland.HUDDispatcherBase.OnDrivingStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnDoppelgangerActive__DelegateSignature(struct ASolarCharacter* InDoppelganger, bool bActive); // DelegateFunction Solarland.HUDDispatcherBase.OnDoppelgangerActive__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnDamagingActorsChange__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnDamagingActorsChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCreateReviveWorldMarkDelegate__DelegateSignature(struct ASolarPlayerState* InPlayerState, struct FVector& InWorldLoc); // DelegateFunction Solarland.HUDDispatcherBase.OnCreateReviveWorldMarkDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2d0d160
	void OnCreateCustomMapMarkDelegate__DelegateSignature(struct UMapMarkBase* MapMarkClass, struct AActor* OwnerActor, struct FVector2D& MarkPos, bool bSupportEdge, bool bSupportEdgeInBigMap, int32_t ZOrder); // DelegateFunction Solarland.HUDDispatcherBase.OnCreateCustomMapMarkDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2d0d160
	void OnCharacterStateChanged__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterSet__DelegateSignature(struct ASolarCharacter* ControlledCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterSelfRebirth__DelegateSignature(struct ASolarCharacter* RebirthCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterSelfRebirth__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterRescueStateChanged__DelegateSignature(enum class ERescueState NewRescueState); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterRescueStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterNightComesActorChanged__DelegateSignature(struct AActor* InActor); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterNightComesActorChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterLevelUp__DelegateSignature(int32_t NewLevel, int32_t OldLevel); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterLevelUp__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterLevelExpChanged__DelegateSignature(int32_t NewLevel, float NewExpRatio); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterLevelExpChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterLevelChanged__DelegateSignature(int32_t InLevel); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterLevelChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterIDSet__DelegateSignature(int32_t CharacterId); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterIDSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterHPChanged__DelegateSignature(float CurrentHP, float MaxHP); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterHPChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterGainExp__DelegateSignature(int32_t ExpAdded); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterGainExp__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterDead__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterDead__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterAllReady__DelegateSignature(struct ASolarCharacter* ControlledCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterAllReady__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCanSkilledJump__DelegateSignature(bool bValue); // DelegateFunction Solarland.HUDDispatcherBase.OnCanSkilledJump__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnBombingStarted__DelegateSignature(int32_t BombId, struct FVector& Location, float Radius); // DelegateFunction Solarland.HUDDispatcherBase.OnBombingStarted__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2d0d160
	void OnBattleUpgradeEffect__DelegateSignature(enum class ESolarTablesEnum_BattleUpgradeEffectType EffectType, int32_t ParamSum); // DelegateFunction Solarland.HUDDispatcherBase.OnBattleUpgradeEffect__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnBattleModeChanged__DelegateSignature(char NewModeType); // DelegateFunction Solarland.HUDDispatcherBase.OnBattleModeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnBattleHUDVisibilityChanged__DelegateSignature(bool bVisible); // DelegateFunction Solarland.HUDDispatcherBase.OnBattleHUDVisibilityChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnBackpackTookPickup__DelegateSignature(struct FVector2D& NewPosition); // DelegateFunction Solarland.HUDDispatcherBase.OnBackpackTookPickup__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2d0d160
	void OnAirdropBoxInfoChangeDelegate__DelegateSignature(struct AAirDropTreasureBox* InAirdropBox); // DelegateFunction Solarland.HUDDispatcherBase.OnAirdropBoxInfoChangeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnAimingEnemy__DelegateSignature(struct ASolarCharacter* InEnemy); // DelegateFunction Solarland.HUDDispatcherBase.OnAimingEnemy__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void MapVehicleSpawnListInitialized__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.MapVehicleSpawnListInitialized__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void LocalPlayerSkidivingCaptainChanged__DelegateSignature(int32_t TeamIndex, struct FString playerName, bool IsLocalPlayer); // DelegateFunction Solarland.HUDDispatcherBase.LocalPlayerSkidivingCaptainChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void JoyStickSimpleDeleghate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.JoyStickSimpleDeleghate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	bool IsElectricShopVisible(); // Function Solarland.HUDDispatcherBase.IsElectricShopVisible // (Final|Native|Public) // @ game+0x29f5bb0
	bool IsBigMapVisible(); // Function Solarland.HUDDispatcherBase.IsBigMapVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f59f0
	void IntUIInteractDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.HUDDispatcherBase.IntUIInteractDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void IntImplementableDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.HUDDispatcherBase.IntImplementableDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void InternalCallSkydiveSpeed(); // Function Solarland.HUDDispatcherBase.InternalCallSkydiveSpeed // (Final|Native|Protected) // @ game+0x29f59d0
	void InternalCallSkydiveFlyStateChanged(); // Function Solarland.HUDDispatcherBase.InternalCallSkydiveFlyStateChanged // (Final|Native|Protected) // @ game+0x29f59b0
	void IntCharacterLuaDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.HUDDispatcherBase.IntCharacterLuaDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void HitTraceInfoDelegate__DelegateSignature(struct FHitTraceInfo& Info); // DelegateFunction Solarland.HUDDispatcherBase.HitTraceInfoDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	struct USolarUserWidget* GetWorldMarkPanel(); // Function Solarland.HUDDispatcherBase.GetWorldMarkPanel // (Final|Native|Public|Const) // @ game+0x29f5960
	struct UUserWidget* GetTeammateHomePanel(); // Function Solarland.HUDDispatcherBase.GetTeammateHomePanel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f5860
	struct UHUDDispatcherBase* GetHUDDispatcher_FromUI(struct UWidget* InWidget); // Function Solarland.HUDDispatcherBase.GetHUDDispatcher_FromUI // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x29f5650
	struct UHUDDispatcherBase* GetHUDDispatcher_FromPC(struct APlayerController* InPC); // Function Solarland.HUDDispatcherBase.GetHUDDispatcher_FromPC // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x29f55c0
	struct UHUDDispatcherBase* GetHUDDispatcher_FromHUD(struct AHUD* InHUD); // Function Solarland.HUDDispatcherBase.GetHUDDispatcher_FromHUD // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x29f5530
	struct UHUDDispatcherBase* GetHUDDispatcher_FromCharacter(struct ASolarCharacter* InCharacter, bool bCheckControlled); // Function Solarland.HUDDispatcherBase.GetHUDDispatcher_FromCharacter // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x29f5460
	struct UUserWidget* GetHomeMainBuild(); // Function Solarland.HUDDispatcherBase.GetHomeMainBuild // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f5770
	struct UUserWidget* GetHomeLevelUpUI(); // Function Solarland.HUDDispatcherBase.GetHomeLevelUpUI // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f5740
	struct UUserWidget* GetHomeFriendList(); // Function Solarland.HUDDispatcherBase.GetHomeFriendList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f5710
	struct UUserWidget* GetHomeBattleUI(); // Function Solarland.HUDDispatcherBase.GetHomeBattleUI // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f56e0
	void BroadcastVJetForbiddenChanged(enum class EJetFlyForbiddenType Types, bool bAdded); // Function Solarland.HUDDispatcherBase.BroadcastVJetForbiddenChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f5030
	void BroadcastVJetCDStateChanged(bool bCD); // Function Solarland.HUDDispatcherBase.BroadcastVJetCDStateChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f4fa0
	void BroadcastTrySpawnSuperRadar(bool bSpawn); // Function Solarland.HUDDispatcherBase.BroadcastTrySpawnSuperRadar // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f4f10
	bool BroadcastTryPickupFirstItem(bool bAutoPickup); // Function Solarland.HUDDispatcherBase.BroadcastTryPickupFirstItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f4e70
	void BroadcastTop3Team(); // Function Solarland.HUDDispatcherBase.BroadcastTop3Team // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f4e50
	void BroadcastToggleCursorVisibility(bool bIsVisible); // Function Solarland.HUDDispatcherBase.BroadcastToggleCursorVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x29f4dc0
	void BroadcastToggleAutoFire(); // Function Solarland.HUDDispatcherBase.BroadcastToggleAutoFire // (Final|Native|Public|BlueprintCallable) // @ game+0x29f4da0
	void BroadcastToggleAssistAim(); // Function Solarland.HUDDispatcherBase.BroadcastToggleAssistAim // (Final|Native|Public|BlueprintCallable) // @ game+0x29f4d80
	void BroadcastSpectateTargetItemsChanged(struct TArray<struct FReplicateItemData>& InItemDatas); // Function Solarland.HUDDispatcherBase.BroadcastSpectateTargetItemsChanged // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f4cd0
	void BroadcastSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.HUDDispatcherBase.BroadcastSpectateTargetChanged // (Final|Native|Public) // @ game+0x29f4c00
	void BroadcastSpectateBattleUpgradeEffectUpdate(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.HUDDispatcherBase.BroadcastSpectateBattleUpgradeEffectUpdate // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f4b70
	void BroadcastSkydiveSpeed(); // Function Solarland.HUDDispatcherBase.BroadcastSkydiveSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x29f4b50
	bool BroadcastShieldValueChanged(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // Function Solarland.HUDDispatcherBase.BroadcastShieldValueChanged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f4960
	void BroadcastShieldUpgradeStart(); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeStart // (Final|Native|Public|Const) // @ game+0x29f4940
	void BroadcastShieldUpgradeShopInteract(); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeShopInteract // (Final|Native|Public|Const) // @ game+0x29f4920
	void BroadcastShieldUpgradeItemCountChanged(int32_t NewCount, int32_t LastCount); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeItemCountChanged // (Final|Native|Public|Const) // @ game+0x29f4850
	void BroadcastShieldUpgradeInterrupt(); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeInterrupt // (Final|Native|Public|Const) // @ game+0x29f4830
	void BroadcastShieldUpgradeFinish(); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeFinish // (Final|Native|Public|Const) // @ game+0x29f4810
	void BroadcastShieldFXUpdated(); // Function Solarland.HUDDispatcherBase.BroadcastShieldFXUpdated // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f47f0
	bool BroadcastShieldChanged(float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield); // Function Solarland.HUDDispatcherBase.BroadcastShieldChanged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f4690
	bool BroadcastShieldAvailable(bool bAvailable); // Function Solarland.HUDDispatcherBase.BroadcastShieldAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f45f0
	void BroadcastSettingRequestOpened(int32_t InOwnerType); // Function Solarland.HUDDispatcherBase.BroadcastSettingRequestOpened // (Final|Native|Public|BlueprintCallable) // @ game+0x29f4560
	void BroadcastSettingRequestClosed(); // Function Solarland.HUDDispatcherBase.BroadcastSettingRequestClosed // (Final|Native|Public|BlueprintCallable) // @ game+0x29f4540
	void BroadcastSetBackpackDropMaskVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastSetBackpackDropMaskVisibility // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f44b0
	void BroadcastSelectPreviousItem(); // Function Solarland.HUDDispatcherBase.BroadcastSelectPreviousItem // (Final|Native|Public|Const) // @ game+0x29f42d0
	void BroadcastSelectNextItem(); // Function Solarland.HUDDispatcherBase.BroadcastSelectNextItem // (Final|Native|Public|Const) // @ game+0x29f42b0
	void BroadcastSelectItemIndex(int32_t Index); // Function Solarland.HUDDispatcherBase.BroadcastSelectItemIndex // (Final|Native|Public|Const) // @ game+0x29f4220
	void BroadcastSelectingBattleUpgradeEffectFinish(int32_t SelectedIndex); // Function Solarland.HUDDispatcherBase.BroadcastSelectingBattleUpgradeEffectFinish // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f4420
	void BroadcastSelectingBattleUpgradeEffectBegin(struct ASolarCharacter* Target, int32_t Level, struct TArray<int32_t>& EffectIDArray); // Function Solarland.HUDDispatcherBase.BroadcastSelectingBattleUpgradeEffectBegin // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f42f0
	void BroadcastScoutCharactersChange(struct TArray<struct FString> ScoutedCharacters, struct TArray<struct FString> ToBeScoutedCharacters); // Function Solarland.HUDDispatcherBase.BroadcastScoutCharactersChange // (Final|Native|Public|Const) // @ game+0x29f3fc0
	void BroadcastRescueBtnVisibility(); // Function Solarland.HUDDispatcherBase.BroadcastRescueBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x29f3f70
	void BroadcastRequsetPickupSpecificItem(int32_t InThisID, int32_t InPeferSlotIndex); // Function Solarland.HUDDispatcherBase.BroadcastRequsetPickupSpecificItem // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f3ea0
	void BroadcastRequsetPickupEntryPlayAnimCustom(struct UObject* InCustomObj); // Function Solarland.HUDDispatcherBase.BroadcastRequsetPickupEntryPlayAnimCustom // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f3e10
	void BroadcastRequsetPickupEntryPlayAnim(int32_t InThisID); // Function Solarland.HUDDispatcherBase.BroadcastRequsetPickupEntryPlayAnim // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f3d80
	void BroadcastProfessionFunctionalChanged(bool bEnabled); // Function Solarland.HUDDispatcherBase.BroadcastProfessionFunctionalChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f3cf0
	void BroadcastPlayerFlagDisplayChanged(bool bDisplay); // Function Solarland.HUDDispatcherBase.BroadcastPlayerFlagDisplayChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f3c60
	void BroadcastPickupToggleChanged(); // Function Solarland.HUDDispatcherBase.BroadcastPickupToggleChanged // (Final|Native|Public) // @ game+0x29f3c40
	void BroadcastPickupEntryPlayAnim(float InAnimTime); // Function Solarland.HUDDispatcherBase.BroadcastPickupEntryPlayAnim // (Final|Native|Public|Const) // @ game+0x29f3bc0
	void BroadcastOnTeammateStateChangedDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnTeammateStateChangedDelegate // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f3ba0
	void BroadcastOnTeammateRebirth(); // Function Solarland.HUDDispatcherBase.BroadcastOnTeammateRebirth // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f3b80
	void BroadcastOnStopRescueTeammateCountDown(int32_t InTextId); // Function Solarland.HUDDispatcherBase.BroadcastOnStopRescueTeammateCountDown // (Final|Native|Public) // @ game+0x29f3af0
	void BroadcastOnStopInteractionCountDown(struct FCountDownInfo& InCountInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnStopInteractionCountDown // (Final|Native|Public|HasOutParms|Const) // @ game+0x29f39b0
	void BroadcastOnStopCountDownDelegate(int32_t InTextId); // Function Solarland.HUDDispatcherBase.BroadcastOnStopCountDownDelegate // (Final|Native|Public) // @ game+0x29f3920
	void BroadcastOnStartReviveItemRecycleCountDown(int32_t CurrentTime, int32_t DurationTime); // Function Solarland.HUDDispatcherBase.BroadcastOnStartReviveItemRecycleCountDown // (Final|Native|Public|BlueprintCallable) // @ game+0x29f3850
	void BroadcastOnStartRescueTeammateCountDown(struct FCountDownInfo& InCountDownInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnStartRescueTeammateCountDown // (Final|Native|Public|HasOutParms) // @ game+0x29f3710
	void BroadcastOnStartInteractionCountDown(struct FCountDownInfo& InCountInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnStartInteractionCountDown // (Final|Native|Public|HasOutParms|Const) // @ game+0x29f35d0
	void BroadcastOnStartCountDownDelegate(struct FCountDownInfo& InCountDownInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnStartCountDownDelegate // (Final|Native|Public|HasOutParms) // @ game+0x29f3490
	void BroadcastOnSkydiveFlyStateChanged(); // Function Solarland.HUDDispatcherBase.BroadcastOnSkydiveFlyStateChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x29f3470
	void BroadcastOnShowGameNoticeDelegate(int32_t InNoticeID, struct FHUDNoticeParams& InNoticeParams); // Function Solarland.HUDDispatcherBase.BroadcastOnShowGameNoticeDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x29f3320
	void BroadcastOnSetTreasureBoxActorDelegate(struct AActor* InActor); // Function Solarland.HUDDispatcherBase.BroadcastOnSetTreasureBoxActorDelegate // (Final|Native|Public) // @ game+0x29f3290
	void BroadcastOnSetPickupSwitchDelegate(enum class EPickupItemType InType, bool InFlag); // Function Solarland.HUDDispatcherBase.BroadcastOnSetPickupSwitchDelegate // (Final|Native|Public) // @ game+0x29f31c0
	void BroadcastOnSetGameNoticeVisibility(enum class ECustomNoticeType InNoticeType, bool InVisibility); // Function Solarland.HUDDispatcherBase.BroadcastOnSetGameNoticeVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x29f30f0
	void BroadcastOnSetAirdropBoxActorDelegate(struct AActor* InActor); // Function Solarland.HUDDispatcherBase.BroadcastOnSetAirdropBoxActorDelegate // (Final|Native|Public) // @ game+0x29f3060
	void BroadcastOnSetActiveOpenBoxProgressDelegate(bool Inactive); // Function Solarland.HUDDispatcherBase.BroadcastOnSetActiveOpenBoxProgressDelegate // (Final|Native|Public) // @ game+0x29f2fd0
	void BroadcastOnSetActiveOpenBoxBtnDelegate(bool Inactive); // Function Solarland.HUDDispatcherBase.BroadcastOnSetActiveOpenBoxBtnDelegate // (Final|Native|Public) // @ game+0x29f2f40
	void BroadcastOnRightMouseButtonDownEvent(); // Function Solarland.HUDDispatcherBase.BroadcastOnRightMouseButtonDownEvent // (Final|Native|Public) // @ game+0x29f2f20
	void BroadcastOnReviveWorldMarkPlayAnim(struct ASolarPlayerState* InPlayerState); // Function Solarland.HUDDispatcherBase.BroadcastOnReviveWorldMarkPlayAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x29f2e90
	void BroadcastOnReviveWillBeDisabledHint(int32_t HintDuration); // Function Solarland.HUDDispatcherBase.BroadcastOnReviveWillBeDisabledHint // (Final|Native|Public|BlueprintCallable) // @ game+0x29f2e00
	void BroadcastOnReviveStateChanged(struct ASolarPlayerState* RevivingMeTeammatePlayer); // Function Solarland.HUDDispatcherBase.BroadcastOnReviveStateChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x29f2d70
	void BroadcastOnReviveDisabledHint(); // Function Solarland.HUDDispatcherBase.BroadcastOnReviveDisabledHint // (Final|Native|Public|BlueprintCallable) // @ game+0x29f2d50
	void BroadcastOnRemoveReviveWorldMark(struct ASolarPlayerState* InPlayerState); // Function Solarland.HUDDispatcherBase.BroadcastOnRemoveReviveWorldMark // (Final|Native|Public|BlueprintCallable) // @ game+0x29f2cc0
	void BroadcastOnRemoveAllReviveWorldMark(); // Function Solarland.HUDDispatcherBase.BroadcastOnRemoveAllReviveWorldMark // (Final|Native|Public|BlueprintCallable) // @ game+0x29f2ca0
	void BroadcastOnRefreshBackpackWeaponPartDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnRefreshBackpackWeaponPartDelegate // (Final|Native|Public|Const) // @ game+0x29f2c80
	void BroadcastOnRefreshBackpackWeaponDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnRefreshBackpackWeaponDelegate // (Final|Native|Public|Const) // @ game+0x29f2c60
	void BroadcastOnRefreshBackpackItemDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnRefreshBackpackItemDelegate // (Final|Native|Public|Const) // @ game+0x29f2c40
	void BroadcastOnRefreshBackpackEquipDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnRefreshBackpackEquipDelegate // (Final|Native|Public|Const) // @ game+0x29f2c20
	void BroadcastOnOverlapElectricShopDelegate(bool InOverlap); // Function Solarland.HUDDispatcherBase.BroadcastOnOverlapElectricShopDelegate // (Final|Native|Public) // @ game+0x29f2b90
	void BroadcastOnOnCreateReviveWorldMark(struct ASolarPlayerState* InPlayerState, struct FVector& InWorldLoc); // Function Solarland.HUDDispatcherBase.BroadcastOnOnCreateReviveWorldMark // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x29f2ac0
	void BroadcastOnInteractionTriggerDisappear(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnInteractionTriggerDisappear // (Final|Native|Public|HasOutParms|Const) // @ game+0x29f2990
	void BroadcastOnInteractionTriggerAppear(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnInteractionTriggerAppear // (Final|Native|Public|HasOutParms|Const) // @ game+0x29f2860
	bool BroadcastOnInteractEvent(); // Function Solarland.HUDDispatcherBase.BroadcastOnInteractEvent // (Final|Native|Public) // @ game+0x29f2830
	void BroadcastOnInitElectricShopDelegate(struct ASolarCharacter* InCharcter); // Function Solarland.HUDDispatcherBase.BroadcastOnInitElectricShopDelegate // (Final|Native|Public) // @ game+0x29f27a0
	void BroadcastOnHideTreasureBoxUIDelegate(int64_t InThisID); // Function Solarland.HUDDispatcherBase.BroadcastOnHideTreasureBoxUIDelegate // (Final|Native|Public) // @ game+0x29f2710
	void BroadcastOnHideAirdropBoxUIDelegate(int64_t InThisID); // Function Solarland.HUDDispatcherBase.BroadcastOnHideAirdropBoxUIDelegate // (Final|Native|Public) // @ game+0x29f2680
	void BroadcastOnGameUserPickupSettingChanged(); // Function Solarland.HUDDispatcherBase.BroadcastOnGameUserPickupSettingChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f2660
	void BroadcastOnEShopWeaponUpgradeDelegate(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopWeaponUpgradeDelegate // (Final|Native|Public) // @ game+0x29f2590
	void BroadcastOnEShopWeaponChangeDelegate(struct ASolarCharacter* InCharacter); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopWeaponChangeDelegate // (Final|Native|Public) // @ game+0x29f2500
	void BroadcastOnEShopSlotWeaponUpgradeDelegate(int32_t InWeaponSlot); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopSlotWeaponUpgradeDelegate // (Final|Native|Public) // @ game+0x29f2470
	void BroadcastOnEShopShieldUpgradeDelegate(struct ASolarCharacter* InCharacter); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopShieldUpgradeDelegate // (Final|Native|Public) // @ game+0x29f23e0
	void BroadcastOnEShopPurchaseSuccessDelegate(int32_t InProductID, struct ASolarCharacter* InCharacter); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopPurchaseSuccessDelegate // (Final|Native|Public) // @ game+0x29f2310
	void BroadcastOnEShopPoolRefreshDelegate(struct ASolarElectricShop* InElectricShop); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopPoolRefreshDelegate // (Final|Native|Public) // @ game+0x29f2280
	void BroadcastOnEShopItemRefreshDelegate(struct ASolarElectricShop* InElectricShop); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopItemRefreshDelegate // (Final|Native|Public) // @ game+0x29f21f0
	void BroadcastOnEShopItemCDRefreshDelegate(struct ASolarElectricShop* InElectricShop); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopItemCDRefreshDelegate // (Final|Native|Public) // @ game+0x29f2160
	void BroadcastOnCreateCustomMapMark(struct UMapMarkBase* MapMarkClass, struct AActor* OwnerActor, struct FVector2D& MarkPos, bool bSupportEdge, bool bSupportEdgeInBigMap, int32_t ZOrder); // Function Solarland.HUDDispatcherBase.BroadcastOnCreateCustomMapMark // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x29f1f50
	void BroadcastOnBindPowerBarDelegates(); // Function Solarland.HUDDispatcherBase.BroadcastOnBindPowerBarDelegates // (Final|Native|Public) // @ game+0x29f1f30
	void BroadcastOnBindItemPanelDelegates(); // Function Solarland.HUDDispatcherBase.BroadcastOnBindItemPanelDelegates // (Final|Native|Public) // @ game+0x29f1f10
	void BroadcastOnBindHPPanelDelegates(); // Function Solarland.HUDDispatcherBase.BroadcastOnBindHPPanelDelegates // (Final|Native|Public) // @ game+0x29f1ef0
	void BroadcastOnBackpackHUDVisibilityChanged(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastOnBackpackHUDVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f1e60
	void BroadcastOnAirdropProgressChangeDelegate(struct AAirDropTreasureBox* InAirdropBox); // Function Solarland.HUDDispatcherBase.BroadcastOnAirdropProgressChangeDelegate // (Final|Native|Public) // @ game+0x29f1dd0
	void BroadcastOnAirdropCharChangeDelegate(struct AAirDropTreasureBox* InAirdropBox); // Function Solarland.HUDDispatcherBase.BroadcastOnAirdropCharChangeDelegate // (Final|Native|Public) // @ game+0x29f1d40
	void BroadcastMigrateAccountVisibilityRequestChanged(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastMigrateAccountVisibilityRequestChanged // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x29f1cb0
	void BroadcastMaxShieldValueUpdate(float MaxShieldValue); // Function Solarland.HUDDispatcherBase.BroadcastMaxShieldValueUpdate // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f1c30
	void BroadcastJoyStickSprintStateReset(); // Function Solarland.HUDDispatcherBase.BroadcastJoyStickSprintStateReset // (Final|Native|Public|Const) // @ game+0x29f1c10
	void BroadcastJoyStickResetAll(); // Function Solarland.HUDDispatcherBase.BroadcastJoyStickResetAll // (Final|Native|Public|Const) // @ game+0x29f1bf0
	void BroadcastJoyStickInputReset(); // Function Solarland.HUDDispatcherBase.BroadcastJoyStickInputReset // (Final|Native|Public|Const) // @ game+0x29f1bd0
	void BroadcastItemHUDStyleChange(enum class ESolarITemHUDStyle Style); // Function Solarland.HUDDispatcherBase.BroadcastItemHUDStyleChange // (Final|Native|Public|BlueprintCallable) // @ game+0x29f1b50
	void BroadcastItemDiscarded(int32_t InItemID, int32_t InTotalCount); // Function Solarland.HUDDispatcherBase.BroadcastItemDiscarded // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f1a80
	void BroadcastHJetTimesChargingProgress(float Value, float Percent); // Function Solarland.HUDDispatcherBase.BroadcastHJetTimesChargingProgress // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f19b0
	void BroadcastHJetForbiddenChanged(enum class EJetFlyForbiddenType Types, bool bAdded); // Function Solarland.HUDDispatcherBase.BroadcastHJetForbiddenChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f18e0
	void BroadcastHJetCDStateChanged(bool bCD); // Function Solarland.HUDDispatcherBase.BroadcastHJetCDStateChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f1850
	void BroadcastFireButtonsReset(); // Function Solarland.HUDDispatcherBase.BroadcastFireButtonsReset // (Final|Native|Public|Const) // @ game+0x29f1830
	bool BroadcastEnemyShieldValueChanged(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // Function Solarland.HUDDispatcherBase.BroadcastEnemyShieldValueChanged // (Final|Native|Public|Const) // @ game+0x29f1640
	bool BroadcastEnemyShieldChanged(struct FString InSolarPlayerID, float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield); // Function Solarland.HUDDispatcherBase.BroadcastEnemyShieldChanged // (Final|Native|Public|Const) // @ game+0x29f1470
	void BroadcastEndBackpackDragDrop(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastEndBackpackDragDrop // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f13e0
	void BroadcastDriveCustomizeOpened(int32_t InLayoutType); // Function Solarland.HUDDispatcherBase.BroadcastDriveCustomizeOpened // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x29f1350
	void BroadcastDriveCustomizeClosed(); // Function Solarland.HUDDispatcherBase.BroadcastDriveCustomizeClosed // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x29f1330
	void BroadcastDamagingActorsChange(); // Function Solarland.HUDDispatcherBase.BroadcastDamagingActorsChange // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f1310
	void BroadcastCustomizeVisibilityRequestChanged(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastCustomizeVisibilityRequestChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x29f1280
	bool BroadcastCheckPickupItemVaildInBackpack(int32_t InThisID); // Function Solarland.HUDDispatcherBase.BroadcastCheckPickupItemVaildInBackpack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f11e0
	bool BroadcastCheckPickupItemVaild(int32_t InThisID); // Function Solarland.HUDDispatcherBase.BroadcastCheckPickupItemVaild // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f1140
	void BroadcastCharacterRescueStateChanged(enum class ERescueState NewRescueState); // Function Solarland.HUDDispatcherBase.BroadcastCharacterRescueStateChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f10c0
	void BroadcastCharacterLevelExpChanged(int32_t NewLevel, float NewExpRatio); // Function Solarland.HUDDispatcherBase.BroadcastCharacterLevelExpChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f0ff0
	void BroadcastCharacterHPState(); // Function Solarland.HUDDispatcherBase.BroadcastCharacterHPState // (Final|Native|Public|BlueprintCallable) // @ game+0x29f0fd0
	void BroadcastCharacterGainExp(int32_t ExpAdded); // Function Solarland.HUDDispatcherBase.BroadcastCharacterGainExp // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f0f40
	void BroadcastBuyResurrectBtnVisibility(); // Function Solarland.HUDDispatcherBase.BroadcastBuyResurrectBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x29f0ef0
	void BroadcastBattleUpgradeEffect(enum class ESolarTablesEnum_BattleUpgradeEffectType EffectType, int32_t ParamSum); // Function Solarland.HUDDispatcherBase.BroadcastBattleUpgradeEffect // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f0e20
	void BroadcastBattleModeChanged(char InModeType); // Function Solarland.HUDDispatcherBase.BroadcastBattleModeChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f0da0
	void BroadcastBattleHUDVisibilityChanged(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastBattleHUDVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f0d10
	void BroadcastBackpackTakesPickup(struct FVector2D& NewPosition); // Function Solarland.HUDDispatcherBase.BroadcastBackpackTakesPickup // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f0c80
	void BroadcastBackpackReleasesPickup(); // Function Solarland.HUDDispatcherBase.BroadcastBackpackReleasesPickup // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f0c60
	void BroadcastAimingEnemy(struct ASolarCharacter* InEnemy); // Function Solarland.HUDDispatcherBase.BroadcastAimingEnemy // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f0bd0
	void BoolUIInteractDelegate__DelegateSignature(bool bValue); // DelegateFunction Solarland.HUDDispatcherBase.BoolUIInteractDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void BoolGameModeLuaDelegate__DelegateSignature(bool bValue); // DelegateFunction Solarland.HUDDispatcherBase.BoolGameModeLuaDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void BoolCharacterLuaDelegate__DelegateSignature(bool bValue); // DelegateFunction Solarland.HUDDispatcherBase.BoolCharacterLuaDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void BindLocalSpectateDelegates(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.HUDDispatcherBase.BindLocalSpectateDelegates // (Final|Native|Protected) // @ game+0x29f0b40
	void AddItemToPickup(struct UObject* InCardItem); // Function Solarland.HUDDispatcherBase.AddItemToPickup // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29f0ab0
	void ActionWheelCommandExecDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.ActionWheelCommandExecDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void ActionWheelCommandCancelDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.ActionWheelCommandCancelDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
};

// Class Solarland.OBHUDDispatcher
// Size: 0x1500 (Inherited: 0x13b8)
struct UOBHUDDispatcher : UHUDDispatcherBase {
	struct FMulticastInlineDelegate OnUISettingHeadInfoStyleChanged; // 0x13b8(0x10)
	struct FMulticastInlineDelegate OnToggleUISettingPlayerList; // 0x13c8(0x10)
	struct FMulticastInlineDelegate OnToggleScoreboard; // 0x13d8(0x10)
	struct FMulticastInlineDelegate OnToggleProgressControlButton; // 0x13e8(0x10)
	struct FMulticastInlineDelegate OnToggleProgress; // 0x13f8(0x10)
	struct FMulticastInlineDelegate OnTogglePerspective; // 0x1408(0x10)
	struct FMulticastInlineDelegate OnToggleShortCutKey; // 0x1418(0x10)
	struct FMulticastInlineDelegate OnEnterSettlementStage; // 0x1428(0x10)
	struct FMulticastInlineDelegate OnReplayActivityHeatFragmentUpdated; // 0x1438(0x10)
	struct FMulticastInlineDelegate OnReplayActivityHeatWidgetClicked; // 0x1448(0x10)
	struct FMulticastInlineDelegate OnBattleOBHUDTypeChanged; // 0x1458(0x10)
	char pad_1468[0x70]; // 0x1468(0x70)
	struct FMulticastInlineDelegate OnBigMapWidgetPlayerNameSizeChange; // 0x14d8(0x10)
	struct FMulticastInlineDelegate OnPlayerWidgetChecked; // 0x14e8(0x10)
	char pad_14F8[0x8]; // 0x14f8(0x08)
};

// Class Solarland.OBKeyboardWidget
// Size: 0x400 (Inherited: 0x400)
struct UOBKeyboardWidget : USolarUserWidget {

	struct UUserWidget* FindKeyWidgetByKeyName(struct FString KeyName); // Function Solarland.OBKeyboardWidget.FindKeyWidgetByKeyName // (Final|Native|Public|BlueprintCallable) // @ game+0x26ed950
};

// Class Solarland.RebuildableMeshRectangleWidget
// Size: 0x170 (Inherited: 0x170)
struct URebuildableMeshRectangleWidget : UMeshRectangleWidget {
};

// Class Solarland.OBMiniMapWidget
// Size: 0x660 (Inherited: 0x400)
struct UOBMiniMapWidget : USolarUserWidget {
	struct UMiniMapWidget* MiniMapWidget; // 0x400(0x08)
	struct FString CurrentCheckedPlayerID; // 0x408(0x10)
	struct URebuildableMeshRectangleWidget* PlayerNavIconMeshWidget; // 0x418(0x08)
	struct URebuildableMeshRectangleWidget* PlayerNavDirMeshWidget; // 0x420(0x08)
	struct URebuildableMeshRectangleWidget* PlayerNavNameMeshWidget; // 0x428(0x08)
	struct URebuildableMeshRectangleWidget* PlayerNavDeadMeshWidget; // 0x430(0x08)
	struct URebuildableMeshRectangleWidget* PlayerNavGunLineMeshWidget; // 0x438(0x08)
	struct UCanvasPanel* PlayerNavRTCanvas; // 0x440(0x08)
	float MiniMapPlayerNavScale; // 0x448(0x04)
	float GunLineDelayTime; // 0x44c(0x04)
	struct UOBPlayerNavWidget* SpectatorNavWidget; // 0x450(0x08)
	struct TMap<int32_t, struct FTeamPlayerNavArray> MapOBTeamPlayerNavWidgets; // 0x458(0x50)
	struct UOBPlayerNavWidget* SpectatorNavWidgetClass; // 0x4a8(0x08)
	struct UOBPlayerNavWidget* OBTeamPlayerNavWidgetClass; // 0x4b0(0x08)
	char pad_4B8[0x10]; // 0x4b8(0x10)
	struct UTextureRenderTarget2D* MiniMapTexture; // 0x4c8(0x08)
	char pad_4D0[0x10]; // 0x4d0(0x10)
	struct FVector2D RTTexSize; // 0x4e0(0x08)
	int32_t NavIconType; // 0x4e8(0x04)
	struct FMiniMapData OBMiniMapData; // 0x4ec(0x18)
	char pad_504[0x15c]; // 0x504(0x15c)

	void SpectatePlayer(); // Function Solarland.OBMiniMapWidget.SpectatePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x26ee4d0
	void RefreshTexture(); // Function Solarland.OBMiniMapWidget.RefreshTexture // (Final|Native|Protected|BlueprintCallable) // @ game+0x26ee420
	void OnSetPlayerEmitBullet(struct FVector StartLoc, struct FVector AimLoc, struct FString SolarPlayerID); // Function Solarland.OBMiniMapWidget.OnSetPlayerEmitBullet // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x26ee210
	void OnSetOBTeamPlayerNamePanelScale(enum class EPlayerNamePanelScale InPanelScale); // Function Solarland.OBMiniMapWidget.OnSetOBTeamPlayerNamePanelScale // (Final|Native|Public) // @ game+0x26ee190
	void OnSetCurrentCheckedPlayerWidget(struct FString SelectedPlayerID); // Function Solarland.OBMiniMapWidget.OnSetCurrentCheckedPlayerWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x26ee0a0
	void OnPlayingScrubStart(); // Function Solarland.OBMiniMapWidget.OnPlayingScrubStart // (Final|Native|Public) // @ game+0x26ee080
	void OnOBTeamPlayerNavInitialized(); // Function Solarland.OBMiniMapWidget.OnOBTeamPlayerNavInitialized // (Final|Native|Public|BlueprintCallable) // @ game+0x26edf10
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBMiniMapWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x26edd10
	void InitRenderTexResources(); // Function Solarland.OBMiniMapWidget.InitRenderTexResources // (Final|Native|Protected|BlueprintCallable) // @ game+0x26edc00
};

// Class Solarland.OBPithyTeamListItemWidget
// Size: 0x480 (Inherited: 0x400)
struct UOBPithyTeamListItemWidget : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct USizeBox* SizeBox_ClanName; // 0x408(0x08)
	struct UUIComponentPlayerName* Text_ClanName; // 0x410(0x08)
	struct UUIComponentPlayerName* Text_KillNum; // 0x418(0x08)
	struct USolarButton* Btn_Spectate; // 0x420(0x08)
	struct USolarImage* Image_TeamBG; // 0x428(0x08)
	struct UTextBlock* Text_TeamNum; // 0x430(0x08)
	struct UOBTeamListPithyTeammateWidget* UI_OB_TeamList_Teammate_2; // 0x438(0x08)
	struct UOBTeamListPithyTeammateWidget* UI_OB_TeamList_Teammate_3; // 0x440(0x08)
	struct UOBTeamListPithyTeammateWidget* UI_OB_TeamList_Teammate_4; // 0x448(0x08)
	struct UOBTeamListPithyTeammateWidget* UI_OB_TeamList_Teammate_5; // 0x450(0x08)
	char pad_458[0x18]; // 0x458(0x18)
	struct TArray<struct UOBTeamListPithyTeammateWidget*> TeammateInfoWidgets; // 0x470(0x10)

	void OnSpectateTargetChanged(); // Function Solarland.OBPithyTeamListItemWidget.OnSpectateTargetChanged // (Final|Native|Public) // @ game+0x26ee3a0
	void OnSpectatedStateChanged(bool Spectated); // Function Solarland.OBPithyTeamListItemWidget.OnSpectatedStateChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnKillNumChanged(char KillNum); // Function Solarland.OBPithyTeamListItemWidget.OnKillNumChanged // (Final|Native|Public) // @ game+0x26ede90
	void OnBtnSpectateClick(); // Function Solarland.OBPithyTeamListItemWidget.OnBtnSpectateClick // (Final|Native|Public) // @ game+0x26edda0
};

// Class Solarland.OBPlayerActivityHeatWidget
// Size: 0x448 (Inherited: 0x400)
struct UOBPlayerActivityHeatWidget : USolarUserWidget {
	struct USolarButton* Btn_OB; // 0x400(0x08)
	struct FReplayActivityHeatFragment Data; // 0x408(0x30)
	struct FString PlayerId; // 0x438(0x10)

	void OnReplayTimeButtonClicked(); // Function Solarland.OBPlayerActivityHeatWidget.OnReplayTimeButtonClicked // (Final|Native|Public) // @ game+0x26f2070
};

// Class Solarland.OBPlayerInfoWidget
// Size: 0x4a0 (Inherited: 0x400)
struct UOBPlayerInfoWidget : USolarUserWidget {
	struct USolarTextBlock* Text_TeamNum; // 0x400(0x08)
	struct UUIComponentPlayerName* Text_NickName; // 0x408(0x08)
	struct USolarTextBlock* Text_KillNum; // 0x410(0x08)
	struct UDeathViewHPWidget* OBHP; // 0x418(0x08)
	struct USolarTextBlock* Text_PlayerLevel; // 0x420(0x08)
	struct USolarTextBlock* Txt_Lv_Head; // 0x428(0x08)
	struct UImage* Img_Lv_Bg_2; // 0x430(0x08)
	struct UCanvasPanel* Panel_Left; // 0x438(0x08)
	struct UButton* Btn_Arrow_Left; // 0x440(0x08)
	struct UCanvasPanel* Panel_Right; // 0x448(0x08)
	struct UButton* Btn_Arrow_Right; // 0x450(0x08)
	struct USolarUserWidget* UI_Input_Device; // 0x458(0x08)
	char pad_460[0x30]; // 0x460(0x30)
	struct TArray<struct UOBPlayerWeaponWidget*> SlotWeaponCacheWidgets; // 0x490(0x10)

	void SpectatePrevTeammate(); // Function Solarland.OBPlayerInfoWidget.SpectatePrevTeammate // (Final|Native|Private) // @ game+0x26f2cb0
	void SpectateNextTeammate(); // Function Solarland.OBPlayerInfoWidget.SpectateNextTeammate // (Final|Native|Private) // @ game+0x26f2c90
	void SetIsCheater(bool bCheater); // Function Solarland.OBPlayerInfoWidget.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnWeaponSlotEquip(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.OBPlayerInfoWidget.OnWeaponSlotEquip // (Final|Native|Protected) // @ game+0x26f29e0
	void OnWeaponSlotActive(int32_t InWeaponSlotID, struct AActor* InActiveWeapon); // Function Solarland.OBPlayerInfoWidget.OnWeaponSlotActive // (Final|Native|Protected) // @ game+0x26f2910
	void OnSpectateTargetChanged(); // Function Solarland.OBPlayerInfoWidget.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x26f2750
	void OnScrubCharactersCreated(); // Function Solarland.OBPlayerInfoWidget.OnScrubCharactersCreated // (Final|Native|Private) // @ game+0x26f25e0
	void OnPlayerKillNumChange(char KillCount); // Function Solarland.OBPlayerInfoWidget.OnPlayerKillNumChange // (Final|Native|Private) // @ game+0x26f1f50
	void OnPlayerInputTypeChanged(struct ASolarPlayerState* InPS); // Function Solarland.OBPlayerInfoWidget.OnPlayerInputTypeChanged // (Final|Native|Private) // @ game+0x26f1ec0
	void OnCharacterLevelChanged(int32_t NewLevel); // Function Solarland.OBPlayerInfoWidget.OnCharacterLevelChanged // (Final|Native|Private) // @ game+0x26f1d00
};

// Class Solarland.OBPlayerMoreInfoWidget
// Size: 0x470 (Inherited: 0x400)
struct UOBPlayerMoreInfoWidget : USolarUserWidget {
	struct USolarImage* Img_Super_Skill; // 0x400(0x08)
	struct UGaugeImage* Super_Skill_Countdown; // 0x408(0x08)
	struct UProgressBar* Super_Skill_Progress_CD; // 0x410(0x08)
	struct UImage* img_Super_Skill_Forbid; // 0x418(0x08)
	struct USolarImage* Img_Super_Skill_Shadow; // 0x420(0x08)
	struct USolarTextBlock* Txt_Super_Skill_Progress; // 0x428(0x08)
	struct USolarImage* Img_Tactical_Skill; // 0x430(0x08)
	struct UGaugeImage* Tactical_Skill_Countdown; // 0x438(0x08)
	struct UProgressBar* Tactical_Skill_Progress_CD; // 0x440(0x08)
	struct UImage* img_Tactical_Skill_Forbid; // 0x448(0x08)
	struct USolarImage* Img_Tactical_Skill_Shadow; // 0x450(0x08)
	struct USolarTextBlock* Txt_Tactical_Skill_Progress; // 0x458(0x08)
	char pad_460[0x10]; // 0x460(0x10)

	void UpdatePlayerVJetFlyChargeUI(float RemainTime, float Percent); // Function Solarland.OBPlayerMoreInfoWidget.UpdatePlayerVJetFlyChargeUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void UpdatePlayerMoreInfoUI(); // Function Solarland.OBPlayerMoreInfoWidget.UpdatePlayerMoreInfoUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void UpdatePlayerJetFlyInfoUI(); // Function Solarland.OBPlayerMoreInfoWidget.UpdatePlayerJetFlyInfoUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void UpdatePlayerHJetFlyChargeUI(float RemainTime, float Percent); // Function Solarland.OBPlayerMoreInfoWidget.UpdatePlayerHJetFlyChargeUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void UnregisterDelegates(); // Function Solarland.OBPlayerMoreInfoWidget.UnregisterDelegates // (Final|Native|Private) // @ game+0x26f2cd0
	void StopRoleAbilityContinueAnim(int32_t RoleAbilityIndex); // Function Solarland.OBPlayerMoreInfoWidget.StopRoleAbilityContinueAnim // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool ShouldUseDesktopStyle(); // Function Solarland.OBPlayerMoreInfoWidget.ShouldUseDesktopStyle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26f2c60
	void SetTacticalSkillUpgrade(bool bUpgrade); // Function Solarland.OBPlayerMoreInfoWidget.SetTacticalSkillUpgrade // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetChargeState(bool bStart, bool InUsedForVertical); // Function Solarland.OBPlayerMoreInfoWidget.SetChargeState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RegisterDelegates(); // Function Solarland.OBPlayerMoreInfoWidget.RegisterDelegates // (Final|Native|Private) // @ game+0x26f2ab0
	void PlayRoleAbilityRefreshAnim(int32_t RoleAbilityIndex); // Function Solarland.OBPlayerMoreInfoWidget.PlayRoleAbilityRefreshAnim // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void PlayRoleAbilityContinueAnim(int32_t RoleAbilityIndex); // Function Solarland.OBPlayerMoreInfoWidget.PlayRoleAbilityContinueAnim // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnVJetChargeStateChanged(bool bStart); // Function Solarland.OBPlayerMoreInfoWidget.OnVJetChargeStateChanged // (Final|Native|Private) // @ game+0x26f2880
	void OnSpectateTargetItemsChanged(struct TArray<struct FReplicateItemData> InItemDatas); // Function Solarland.OBPlayerMoreInfoWidget.OnSpectateTargetItemsChanged // (Final|Native|Private) // @ game+0x26f2770
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.OBPlayerMoreInfoWidget.OnSpecTargetChanged // (Final|Native|Private) // @ game+0x26f2680
	void OnRoleAbilityStateChange(int32_t RoleAbilityIndex, int32_t State); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityStateChange // (Final|Native|Private) // @ game+0x26f2510
	void OnRoleAbilityStartCD(int32_t RoleAbilityIndex, float StartCDServerTime, float StartCDTime); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityStartCD // (Final|Native|Private) // @ game+0x26f2400
	void OnRoleAbilityContinous(int32_t RoleAbilityIndex, bool bTurnOn, float Duration); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityContinous // (Final|Native|Private) // @ game+0x26f22f0
	void OnRoleAbilityChange(int32_t RoleAbilityIndex, bool bHaveAbility, int32_t CharacterId, int32_t PlayerLevel); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityChange // (Final|Native|Private) // @ game+0x26f21a0
	void OnRoleAbilityCDDurationChange(int32_t RoleAbilityIndex, int32_t Duration, bool bDurationReduced); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityCDDurationChange // (Final|Native|Private) // @ game+0x26f2090
	void OnHJetChargeStateChanged(bool bStart); // Function Solarland.OBPlayerMoreInfoWidget.OnHJetChargeStateChanged // (Final|Native|Private) // @ game+0x26f1e30
	void OnCharacterJetFlyModuleLevelChanged(int32_t NewLv); // Function Solarland.OBPlayerMoreInfoWidget.OnCharacterJetFlyModuleLevelChanged // (Final|Native|Private) // @ game+0x26f1c70
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBPlayerMoreInfoWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x26f1be0
	int32_t GetSpectatedPlayerItemMaxPileByID(int32_t InItemID); // Function Solarland.OBPlayerMoreInfoWidget.GetSpectatedPlayerItemMaxPileByID // (Final|Native|Public|BlueprintCallable) // @ game+0x26f15a0
	int32_t GetSpectatedPlayerItemCountByID(int32_t InItemID); // Function Solarland.OBPlayerMoreInfoWidget.GetSpectatedPlayerItemCountByID // (Final|Native|Public|BlueprintCallable) // @ game+0x26f1500
	int32_t GetCharacterJetModuleLevel(bool InUsedForVertical); // Function Solarland.OBPlayerMoreInfoWidget.GetCharacterJetModuleLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x26f1460
};

// Class Solarland.PlayerNavWidget
// Size: 0x438 (Inherited: 0x400)
struct UPlayerNavWidget : USolarUserWidget {
	struct UWidgetSwitcher* IconSwitcher; // 0x400(0x08)
	struct UCanvasPanel* PlayerNav; // 0x408(0x08)
	struct UCanvasPanel* PlayerOutOfMapNav; // 0x410(0x08)
	struct UImage* FOV; // 0x418(0x08)
	struct UImage* ImageRoleNav; // 0x420(0x08)
	struct UTextBlock* PlayerOrder; // 0x428(0x08)
	char pad_430[0x8]; // 0x430(0x08)

	void SwitchPlayerNav(bool bOutOfBounds); // Function Solarland.PlayerNavWidget.SwitchPlayerNav // (Final|Native|Public|BlueprintCallable) // @ game+0x26ffe30
	void SetBrushResourceObject(struct UObject* InSprite); // Function Solarland.PlayerNavWidget.SetBrushResourceObject // (Final|Native|Public|BlueprintCallable) // @ game+0x26ff910
	void ResetPlayerNav(); // Function Solarland.PlayerNavWidget.ResetPlayerNav // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlayerDead(); // Function Solarland.PlayerNavWidget.ReceivePlayerDead // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnAllPlayerNavVisibilityChanged(bool bVisible); // Function Solarland.PlayerNavWidget.OnAllPlayerNavVisibilityChanged // (Final|Native|Protected) // @ game+0x26fdaf0
};

// Class Solarland.OBPlayerNavWidget
// Size: 0x4d0 (Inherited: 0x438)
struct UOBPlayerNavWidget : UPlayerNavWidget {
	struct FString CurrentSolarPlayerID; // 0x438(0x10)
	int32_t RecommendedZOrder; // 0x448(0x04)
	char pad_44C[0x14]; // 0x44c(0x14)
	struct UImage* Arror; // 0x460(0x08)
	struct UImage* Fire_Arror; // 0x468(0x08)
	struct USolarTextBlock* Text_TeamNumb; // 0x470(0x08)
	struct USolarImage* Img_Bg; // 0x478(0x08)
	struct USolarImage* Img_Frame; // 0x480(0x08)
	struct USolarImage* Img_death; // 0x488(0x08)
	struct USolarImage* Img_FrameArrow; // 0x490(0x08)
	struct UCanvasPanel* panel_player; // 0x498(0x08)
	struct UCanvasPanel* panel_OB; // 0x4a0(0x08)
	struct UWidgetSwitcher* wgs_mod; // 0x4a8(0x08)
	struct UUIComponentPlayerName* text_playername; // 0x4b0(0x08)
	struct USolarButton* Btn_Player; // 0x4b8(0x08)
	struct UImage* Img_NameBg; // 0x4c0(0x08)
	bool IsWidgetChecked; // 0x4c8(0x01)
	char pad_4C9[0x7]; // 0x4c9(0x07)

	void SetWidgetBeChecked(bool InIsChecked); // Function Solarland.OBPlayerNavWidget.SetWidgetBeChecked // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetPlayerNamePanelScale(enum class EPlayerNamePanelScale InPanelScale); // Function Solarland.OBPlayerNavWidget.SetPlayerNamePanelScale // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetPlayerIsFire(bool InIsFire); // Function Solarland.OBPlayerNavWidget.SetPlayerIsFire // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	float GetPlayerNamePanelScale(enum class EPlayerNamePanelScale InPanelScale); // Function Solarland.OBPlayerNavWidget.GetPlayerNamePanelScale // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.OBPlayerWeaponWidget
// Size: 0x430 (Inherited: 0x400)
struct UOBPlayerWeaponWidget : USolarUserWidget {
	struct UWidgetSwitcher* Switcher_Status; // 0x400(0x08)
	struct UImage* Img_WP; // 0x408(0x08)
	struct UImage* Img_WPSelected; // 0x410(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> OwnerWeapon; // 0x418(0x08)
	char pad_420[0x8]; // 0x420(0x08)
	struct FTimerHandle LoadWeaponIconHandle; // 0x428(0x08)

	struct UTexture2D* GetWeaponTexture(); // Function Solarland.OBPlayerWeaponWidget.GetWeaponTexture // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x26f1640
};

// Class Solarland.OBProgressBar
// Size: 0x470 (Inherited: 0x400)
struct UOBProgressBar : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	float TotalTime; // 0x408(0x04)
	float CurrentTime; // 0x40c(0x04)
	bool bIsPause; // 0x410(0x01)
	bool bNeedShowActivityHeatData; // 0x411(0x01)
	char pad_412[0x6]; // 0x412(0x06)
	struct FMulticastInlineDelegate OnSetReplayTime; // 0x418(0x10)
	struct UButton* Btn_Rewind; // 0x428(0x08)
	struct UButton* Btn_PausePlay; // 0x430(0x08)
	struct UButton* Btn_FastForward; // 0x438(0x08)
	struct USolarButton* Btn_Speed_Left; // 0x440(0x08)
	struct USolarButton* Btn_Speed_Right; // 0x448(0x08)
	struct UTextBlock* Txt_CurrentTime; // 0x450(0x08)
	struct UTextBlock* Txt_TotalTime; // 0x458(0x08)
	struct USolarTextBlock* Txt_PlaybackSpeed; // 0x460(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_PausePlay; // 0x468(0x08)

	void UpdateSlider(); // Function Solarland.OBProgressBar.UpdateSlider // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void UpdatePlaybackSpeed(); // Function Solarland.OBProgressBar.UpdatePlaybackSpeed // (Final|Native|Private) // @ game+0x26f2cf0
	void SetTotalTime(); // Function Solarland.OBProgressBar.SetTotalTime // (Final|Native|Private) // @ game+0x26f2bc0
	void SetTextByTime(struct UTextBlock* TextBlock, float InTime); // Function Solarland.OBProgressBar.SetTextByTime // (Final|Native|Public|BlueprintCallable) // @ game+0x26f2af0
	void SetCurrentTime(); // Function Solarland.OBProgressBar.SetCurrentTime // (Final|Native|Private) // @ game+0x26f2ad0
	void RegisterEvent(); // Function Solarland.OBProgressBar.RegisterEvent // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnWidgetRefreshed(); // Function Solarland.OBProgressBar.OnWidgetRefreshed // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnSliderValueChanged(float Value); // Function Solarland.OBProgressBar.OnSliderValueChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x26f2600
	void OnSetReplayTime__DelegateSignature(); // DelegateFunction Solarland.OBProgressBar.OnSetReplayTime__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnReplayPauseOrContinue(); // Function Solarland.OBProgressBar.OnReplayPauseOrContinue // (Final|Native|Private) // @ game+0x26f2050
	void OnReplayActivityHeatWidgetClicked(float ReplayTime); // Function Solarland.OBProgressBar.OnReplayActivityHeatWidgetClicked // (Final|Native|Public) // @ game+0x26f1fd0
	void OnClickSkipForwardButton(); // Function Solarland.OBProgressBar.OnClickSkipForwardButton // (Final|Native|Public) // @ game+0x26f1e10
	void OnClickSkipBackButton(); // Function Solarland.OBProgressBar.OnClickSkipBackButton // (Final|Native|Public) // @ game+0x26f1df0
	void OnClickPlaybackSpeedUp(); // Function Solarland.OBProgressBar.OnClickPlaybackSpeedUp // (Final|Native|Public) // @ game+0x26f1dd0
	void OnClickPlaybackSlowDown(); // Function Solarland.OBProgressBar.OnClickPlaybackSlowDown // (Final|Native|Public) // @ game+0x26f1db0
	void OnClickPausePlayButton(); // Function Solarland.OBProgressBar.OnClickPausePlayButton // (Final|Native|Public) // @ game+0x26f1d90
	void CallTogglePauseDispatcher(bool bPause); // Function Solarland.OBProgressBar.CallTogglePauseDispatcher // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void CallOnSkipTimeDispatcher(float InTime); // Function Solarland.OBProgressBar.CallOnSkipTimeDispatcher // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.OBRootWidget
// Size: 0x408 (Inherited: 0x400)
struct UOBRootWidget : USolarUserWidget {
	struct UCanvasPanel* Panel_ScopeUI; // 0x400(0x08)

	void AddScopeToPanel(struct UUserWidget* InChildWidget, bool bInSpectate); // Function Solarland.OBRootWidget.AddScopeToPanel // (Final|Native|Protected) // @ game+0x26f1370
};

// Class Solarland.OBScoreboard
// Size: 0x4d0 (Inherited: 0x408)
struct UOBScoreboard : UOBSettlementBase {
	struct UWidgetAnimation* Anim_Enter; // 0x408(0x08)
	struct UScrollBox* ScrollBox_TeamList; // 0x410(0x08)
	struct UCanvasPanel* Top3; // 0x418(0x08)
	struct UCanvasPanel* Bg_Settlement; // 0x420(0x08)
	struct UCanvasPanel* Bg_InGame; // 0x428(0x08)
	struct UOBScoreboardSingleTopTeam* FirstTeam; // 0x430(0x08)
	struct UOBScoreboardSingleTopTeam* SecondTeam; // 0x438(0x08)
	struct UOBScoreboardSingleTopTeam* ThirdTeam; // 0x440(0x08)
	struct UButton* CloseBtn; // 0x448(0x08)
	struct UHorizontalBox* Btn; // 0x450(0x08)
	struct UHorizontalBox* Remain_Total; // 0x458(0x08)
	struct UTileView* TileView_Others; // 0x460(0x08)
	struct USolarTextBlock* Txt_PlayerRemain; // 0x468(0x08)
	struct USolarTextBlock* Txt_PlayerTotal; // 0x470(0x08)
	struct USolarTextBlock* Txt_TeamRemain; // 0x478(0x08)
	struct USolarTextBlock* Txt_TeamTotal; // 0x480(0x08)
	enum class E_Type_OB_Scoreboard WidgetTypeChoice; // 0x488(0x01)
	char pad_489[0x7]; // 0x489(0x07)
	struct FCupViewInfo CupViewInfo; // 0x490(0x28)
	char pad_4B8[0x8]; // 0x4b8(0x08)
	struct TArray<struct UOBScoreboardSingleTopTeam*> TopThreeTeamWidget; // 0x4c0(0x10)

	void UpdateTeamTotal(); // Function Solarland.OBScoreboard.UpdateTeamTotal // (Final|Native|Private) // @ game+0x26f2d70
	void UpdateTeamRemain(); // Function Solarland.OBScoreboard.UpdateTeamRemain // (Final|Native|Private) // @ game+0x26f2d50
	void UpdatePlayerTotal(); // Function Solarland.OBScoreboard.UpdatePlayerTotal // (Final|Native|Private) // @ game+0x26f2d30
	void UpdatePlayerRemain(); // Function Solarland.OBScoreboard.UpdatePlayerRemain // (Final|Native|Private) // @ game+0x26f2d10
	void SetWidgetType(enum class E_Type_OB_Scoreboard WidgetType); // Function Solarland.OBScoreboard.SetWidgetType // (Final|Native|Public|BlueprintCallable) // @ game+0x26f2be0
	void OnWidgetTypeChangedEvent(); // Function Solarland.OBScoreboard.OnWidgetTypeChangedEvent // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnTeamDataChanged(); // Function Solarland.OBScoreboard.OnTeamDataChanged // (Final|Native|Private) // @ game+0x26f2860
	void InitPanelWithData(struct TArray<struct FDetailedTeamListViewInfo> TeamDetailedInfo, struct FCupViewInfo& InCupViewInfo); // Function Solarland.OBScoreboard.InitPanelWithData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26f18a0
	void InitPanelInGame(struct UOBSettlementRoot* InOnwer); // Function Solarland.OBScoreboard.InitPanelInGame // (Final|Native|Public|BlueprintCallable) // @ game+0x26f1810
	void InitPanel(struct UOBSettlementRoot* InOnwer); // Function Solarland.OBScoreboard.InitPanel // (Native|Public|BlueprintCallable) // @ game+0x26deb30
	void CloseScoreboardInGame(); // Function Solarland.OBScoreboard.CloseScoreboardInGame // (Final|Native|Public|BlueprintCallable) // @ game+0x26f1440
};

// Class Solarland.OBScoreboardSingleOtherTeam
// Size: 0x418 (Inherited: 0x400)
struct UOBScoreboardSingleOtherTeam : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct UOBScoreboardSingleTeam* UI_OB_Scoreboard_SingleTeam; // 0x408(0x08)
	struct USolarTextBlock* Txt_Rank; // 0x410(0x08)

	void SetIsCheater(bool bIsCheater, bool bIsTournament); // Function Solarland.OBScoreboardSingleOtherTeam.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.OBScoreboardSingleTeam
// Size: 0x4e8 (Inherited: 0x400)
struct UOBScoreboardSingleTeam : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct FString SideName; // 0x408(0x10)
	int32_t Rank; // 0x418(0x04)
	char pad_41C[0x4]; // 0x41c(0x04)
	struct UOBSettlementRoot* UIOBRoot; // 0x420(0x08)
	struct USolarTextBlock* Txt_TeamNumber; // 0x428(0x08)
	struct USolarImage* Img_TitleBox; // 0x430(0x08)
	struct USolarImage* Img_TitleBg; // 0x438(0x08)
	struct USolarButton* Btn_ViewDetail; // 0x440(0x08)
	struct UOverlay* Overlay_Spectating; // 0x448(0x08)
	struct UCanvasPanel* Panel_ScoreboardUnit; // 0x450(0x08)
	struct UOBScoreboard* ParentScoreboard; // 0x458(0x08)
	struct TArray<struct FDetailedListViewInfo> CurrentDetailedInfo; // 0x460(0x10)
	char TeamID; // 0x470(0x01)
	char pad_471[0x7]; // 0x471(0x07)
	struct FString TeamName; // 0x478(0x10)
	struct TArray<struct ASolarPlayerState*> Teammate; // 0x488(0x10)
	char pad_498[0x50]; // 0x498(0x50)

	void LuaShowDetailedDataList(struct UWidget*& OutWidget); // Function Solarland.OBScoreboardSingleTeam.LuaShowDetailedDataList // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void InitPanelWithData(struct FDetailedTeamListViewInfo& DetailedTeamInfo, int32_t InRank, struct UOBScoreboard* InScoreboard); // Function Solarland.OBScoreboardSingleTeam.InitPanelWithData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26f1a60
	void InitPanel(char InTeamId, int32_t InRank, struct UOBSettlementRoot* InOBRoot, bool bInGame, bool bSpectating); // Function Solarland.OBScoreboardSingleTeam.InitPanel // (Final|Native|Public|BlueprintCallable) // @ game+0x26f1670
};

// Class Solarland.OBScoreboardSingleTeamData
// Size: 0x58 (Inherited: 0x28)
struct UOBScoreboardSingleTeamData : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	struct TArray<struct FDetailedTeamListViewInfo> DetailedTeamListViewInfo; // 0x40(0x10)
	struct UOBSettlementRoot* UIOBRoot; // 0x50(0x08)
};

// Class Solarland.OBScoreboardSingleTopTeam
// Size: 0x418 (Inherited: 0x400)
struct UOBScoreboardSingleTopTeam : USolarUserWidget {
	struct UTexture2D* RankIcon; // 0x400(0x08)
	struct UOBScoreboardSingleTeam* UI_OB_Scoreboard_SingleTeam; // 0x408(0x08)
	struct USolarImage* Img_Rank; // 0x410(0x08)

	void InitPanelWithData(struct FDetailedTeamListViewInfo& DetailedTeamInfo, int32_t Rank, struct UOBScoreboard* InScoreboard); // Function Solarland.OBScoreboardSingleTopTeam.InitPanelWithData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26f6600
	void InitPanel(char InTeamId, int32_t InRank, struct UOBSettlementRoot* InOBRoot); // Function Solarland.OBScoreboardSingleTopTeam.InitPanel // (Final|Native|Public|BlueprintCallable) // @ game+0x26f64f0
};

// Class Solarland.OBScoreboardUnit
// Size: 0x440 (Inherited: 0x400)
struct UOBScoreboardUnit : USolarUserWidget {
	struct ASolarPlayerState* PlayerState; // 0x400(0x08)
	struct UUIComponentPlayerName* Txt_PlayerName; // 0x408(0x08)
	struct UUIComponentPlayerName* Txt_KillNum; // 0x410(0x08)
	struct UUIComponentPlayerName* Txt_Assist; // 0x418(0x08)
	struct UUIComponentPlayerName* Txt_DMGD; // 0x420(0x08)
	struct UUIInputDevice* UI_Input_Device; // 0x428(0x08)
	char pad_430[0x10]; // 0x430(0x10)

	void UpdatePlayerKillNum(struct ASolarPlayerState* ps); // Function Solarland.OBScoreboardUnit.UpdatePlayerKillNum // (Final|Native|Private|Const) // @ game+0x26f78f0
	void UpdatePlayerDamageDealt(float NewValue); // Function Solarland.OBScoreboardUnit.UpdatePlayerDamageDealt // (Final|Native|Private) // @ game+0x26f7870
	void UpdatePlayerAssistNum(struct ASolarPlayerState* ps); // Function Solarland.OBScoreboardUnit.UpdatePlayerAssistNum // (Final|Native|Private|Const) // @ game+0x26f77e0
	void SetRebirthOpacity(); // Function Solarland.OBScoreboardUnit.SetRebirthOpacity // (Final|Native|Public) // @ game+0x26f7460
	void SetIsCheater(bool bIsCheater); // Function Solarland.OBScoreboardUnit.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetDeathOpacity(); // Function Solarland.OBScoreboardUnit.SetDeathOpacity // (Final|Native|Public) // @ game+0x26f7440
	void SetConnectStateOpacity(bool bUselessParam); // Function Solarland.OBScoreboardUnit.SetConnectStateOpacity // (Final|Native|Public) // @ game+0x26f73b0
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.OBScoreboardUnit.OnCharacterDead // (Final|Native|Private) // @ game+0x26f6b00
};

// Class Solarland.OBSettlementRoot
// Size: 0x440 (Inherited: 0x400)
struct UOBSettlementRoot : USolarUserWidget {
	char pad_400[0x18]; // 0x400(0x18)
	struct UWidgetSwitcher* PageSwitcher; // 0x418(0x08)
	struct UOBVictoryTeam* UI_OB_VictoryTeam; // 0x420(0x08)
	struct UOBDetailedDataList* UI_OB_DetailedData_List; // 0x428(0x08)
	struct UOBScoreboard* UI_OB_Scoreboard_AllTeam; // 0x430(0x08)
	char pad_438[0x8]; // 0x438(0x08)

	void ToggleScoreboard(); // Function Solarland.OBSettlementRoot.ToggleScoreboard // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SortTeamsByTeamRank(); // Function Solarland.OBSettlementRoot.SortTeamsByTeamRank // (Final|Native|Public|BlueprintCallable) // @ game+0x26f7750
	void SkipSettlement(); // Function Solarland.OBSettlementRoot.SkipSettlement // (Final|Native|Public|BlueprintCallable) // @ game+0x26f7730
	void ShowPage(int32_t PageIndex); // Function Solarland.OBSettlementRoot.ShowPage // (Final|Native|Public|BlueprintCallable) // @ game+0x26f7680
	void ShowNextPage(); // Function Solarland.OBSettlementRoot.ShowNextPage // (Final|Native|Public|BlueprintCallable) // @ game+0x26f7660
	void SetSwitcherVisibility(enum class ESlateVisibility InVisibility); // Function Solarland.OBSettlementRoot.SetSwitcherVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x26f7510
	void OnTDMVictoryAnimFinished(); // Function Solarland.OBSettlementRoot.OnTDMVictoryAnimFinished // (Final|Native|Private) // @ game+0x26f7180
	void OnEnterSettlementStage(); // Function Solarland.OBSettlementRoot.OnEnterSettlementStage // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBSettlementRoot.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x26f6880
	void EnterTDMSettlement(); // Function Solarland.OBSettlementRoot.EnterTDMSettlement // (Final|Native|Private|BlueprintCallable) // @ game+0x26f6420
	void EnterBRSettlement(); // Function Solarland.OBSettlementRoot.EnterBRSettlement // (Final|Native|Private|BlueprintCallable) // @ game+0x26f6400
};

// Class Solarland.OBSpectateInfoWidget
// Size: 0x430 (Inherited: 0x400)
struct UOBSpectateInfoWidget : USolarUserWidget {
	struct UCanvasPanel* Panel_CurrentTeam; // 0x400(0x08)
	struct UCanvasPanel* Panel_CurrentPlayerInfo; // 0x408(0x08)
	struct UCanvasPanel* Panel_Direction; // 0x410(0x08)
	struct UOBTeamInfoWidget* OB_TeamInfo; // 0x418(0x08)
	struct UUserWidget* UI_OB_Target_Switcher; // 0x420(0x08)
	char pad_428[0x8]; // 0x428(0x08)

	void OnUISettingUIAllChanged(bool bShow); // Function Solarland.OBSpectateInfoWidget.OnUISettingUIAllChanged // (Final|Native|Private) // @ game+0x26f71c0
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBSpectateInfoWidget.OnBattleOBHUDTypeChanged // (Final|Native|Public|HasOutParms) // @ game+0x26f6910
};

// Class Solarland.OBTeamInfoWidget
// Size: 0x448 (Inherited: 0x400)
struct UOBTeamInfoWidget : USolarUserWidget {
	struct USolarImage* Image_TeamBG; // 0x400(0x08)
	struct USolarTextBlock* Text_TeamNum; // 0x408(0x08)
	struct USolarTextBlock* Text_TeamKillCount; // 0x410(0x08)
	struct UVerticalBox* Panel_Teammates; // 0x418(0x08)
	struct UOBTeammateInfoWidget* TeammateInfo_SpectateTarget; // 0x420(0x08)
	char pad_428[0x20]; // 0x428(0x20)

	void OnTeamKillCountChanged(char KillCount); // Function Solarland.OBTeamInfoWidget.OnTeamKillCountChanged // (Final|Native|Private) // @ game+0x26f1f50
	void OnTeamDataChanged(); // Function Solarland.OBTeamInfoWidget.OnTeamDataChanged // (Final|Native|Private) // @ game+0x26f70e0
	void OnSpectateTargetChanged(); // Function Solarland.OBTeamInfoWidget.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x26f7120
	void OnScrubCharactersCreated(); // Function Solarland.OBTeamInfoWidget.OnScrubCharactersCreated // (Final|Native|Private) // @ game+0x26f70e0
};

// Class Solarland.OBTeamListItemObject
// Size: 0x38 (Inherited: 0x28)
struct UOBTeamListItemObject : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Solarland.OBTeamListItemWidget
// Size: 0x430 (Inherited: 0x400)
struct UOBTeamListItemWidget : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct USolarImage* Image_TeamBG; // 0x408(0x08)
	struct USolarImage* Image_Frame; // 0x410(0x08)
	struct UTextBlock* Text_TeamNum; // 0x418(0x08)
	struct UVerticalBox* Panel_Teammates; // 0x420(0x08)
	struct UOBTeamListItemObject* DataObject; // 0x428(0x08)

	void SetIsCheater(bool bCheater); // Function Solarland.OBTeamListItemWidget.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.OBTeamListPithyTeammateWidget
// Size: 0x420 (Inherited: 0x400)
struct UOBTeamListPithyTeammateWidget : USolarUserWidget {
	struct USolarButton* Btn_Spectate; // 0x400(0x08)
	char pad_408[0x18]; // 0x408(0x18)

	void OnSpectateTargetChanged(); // Function Solarland.OBTeamListPithyTeammateWidget.OnSpectateTargetChanged // (Final|Native|Public) // @ game+0x26f7140
	void OnSelected(); // Function Solarland.OBTeamListPithyTeammateWidget.OnSelected // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnScrubCharactersCreated(); // Function Solarland.OBTeamListPithyTeammateWidget.OnScrubCharactersCreated // (Final|Native|Public) // @ game+0x9043b0
	void OnPlayerDying(); // Function Solarland.OBTeamListPithyTeammateWidget.OnPlayerDying // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerDead(); // Function Solarland.OBTeamListPithyTeammateWidget.OnPlayerDead // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerAlive(); // Function Solarland.OBTeamListPithyTeammateWidget.OnPlayerAlive // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnHPModelChanged(struct USinglePlayerHPModel* HPModel); // Function Solarland.OBTeamListPithyTeammateWidget.OnHPModelChanged // (Final|Native|Public) // @ game+0x26f6ca0
	void OnHover(); // Function Solarland.OBTeamListPithyTeammateWidget.OnHover // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnDefault(); // Function Solarland.OBTeamListPithyTeammateWidget.OnDefault // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnBtnSpectateClick(); // Function Solarland.OBTeamListPithyTeammateWidget.OnBtnSpectateClick // (Final|Native|Public) // @ game+0x26f6ac0
};

// Class Solarland.OBTeamListPopupWidget
// Size: 0x438 (Inherited: 0x400)
struct UOBTeamListPopupWidget : USolarUserWidget {
	struct UOBTeamListWidget* OBTeamList; // 0x400(0x08)
	struct USolarUserWidget* UI_TabControl_TeamList; // 0x408(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x410(0x08)
	struct UWidgetAnimation* Anim_Exit; // 0x418(0x08)
	char pad_420[0x18]; // 0x420(0x18)

	void UpdateNearbyTeamList(); // Function Solarland.OBTeamListPopupWidget.UpdateNearbyTeamList // (Final|Native|Private) // @ game+0x26f77c0
	void ToggleShowPlayerList(); // Function Solarland.OBTeamListPopupWidget.ToggleShowPlayerList // (Final|Native|Private) // @ game+0x26f7770
	void ShowPithyTeamList(); // Function Solarland.OBTeamListPopupWidget.ShowPithyTeamList // (Final|Native|Protected|BlueprintCallable) // @ game+0x26f7710
	void ShowNearbyTeamList(); // Function Solarland.OBTeamListPopupWidget.ShowNearbyTeamList // (Final|Native|Protected|BlueprintCallable) // @ game+0x26f7640
	void ShowAllTeamList(); // Function Solarland.OBTeamListPopupWidget.ShowAllTeamList // (Final|Native|Protected|BlueprintCallable) // @ game+0x26f7620
	void SetTeamListTab(enum class EOBTeamListTab InTab); // Function Solarland.OBTeamListPopupWidget.SetTeamListTab // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnUISettingUIAllChanged(bool bShow); // Function Solarland.OBTeamListPopupWidget.OnUISettingUIAllChanged // (Final|Native|Private) // @ game+0x26f7250
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBTeamListPopupWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x26f69a0
	void OnAnimExitFinished(); // Function Solarland.OBTeamListPopupWidget.OnAnimExitFinished // (Final|Native|Private) // @ game+0x26f6860
	bool IsOBTeamListVisible(); // Function Solarland.OBTeamListPopupWidget.IsOBTeamListVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x26f6780
};

// Class Solarland.OBTeamListWidget
// Size: 0x480 (Inherited: 0x400)
struct UOBTeamListWidget : USolarUserWidget {
	struct USolarListView* ListView_Teams; // 0x400(0x08)
	struct USolarListView* ListView_Teams_Only; // 0x408(0x08)
	char pad_410[0x58]; // 0x410(0x58)
	struct USolarOBUIModel* SolarOBUIModel; // 0x468(0x08)
	struct TArray<struct UObject*> TeamItemObjects; // 0x470(0x10)

	void OnTeamDataChanged(); // Function Solarland.OBTeamListWidget.OnTeamDataChanged // (Final|Native|Private) // @ game+0x26f71a0
	void OnListTabChanged(enum class EOBTeamListTab InTab); // Function Solarland.OBTeamListWidget.OnListTabChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnListShow(bool bShow); // Function Solarland.OBTeamListWidget.OnListShow // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.OBTeammateInfoWidget
// Size: 0x478 (Inherited: 0x400)
struct UOBTeammateInfoWidget : USolarUserWidget {
	struct UUIComponentPlayerName* Text_NickName; // 0x400(0x08)
	struct UUIComponentPlayerName* Text_KillNum; // 0x408(0x08)
	struct USolarButton* Btn_Spectate; // 0x410(0x08)
	struct UDeathViewHPWidget* OBHP; // 0x418(0x08)
	struct UImage* Image_SpectateIcon; // 0x420(0x08)
	struct UImage* Image_BoardedVehicleIcon; // 0x428(0x08)
	struct UOverlay* Overlay_Spectating; // 0x430(0x08)
	struct USolarUserWidget* UI_Input_Device; // 0x438(0x08)
	struct USolarTextBlock* Txt_Lvl; // 0x440(0x08)
	struct UImage* Img_Head; // 0x448(0x08)
	char pad_450[0x28]; // 0x450(0x28)

	void UpdateRebirthUI(struct ASolarCharacter* InSolarCharacter); // Function Solarland.OBTeammateInfoWidget.UpdateRebirthUI // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void UpdateBuyResurrectionItemPlayerID(struct FString PlayerId); // Function Solarland.OBTeammateInfoWidget.UpdateBuyResurrectionItemPlayerID // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void SetTeamPos(int32_t PosInTeam); // Function Solarland.OBTeammateInfoWidget.SetTeamPos // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetIsCheater(bool bCheater); // Function Solarland.OBTeammateInfoWidget.SetIsCheater // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateBoardedVehicleIcon(); // Function Solarland.OBTeammateInfoWidget.OnUpdateBoardedVehicleIcon // (Final|Native|Private) // @ game+0x26f72e0
	void OnTeammateDead(); // Function Solarland.OBTeammateInfoWidget.OnTeammateDead // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnTeammateAlive(); // Function Solarland.OBTeammateInfoWidget.OnTeammateAlive // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnSpectateTargetChanged(); // Function Solarland.OBTeammateInfoWidget.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x26f7160
	void OnScrubCharactersCreated(); // Function Solarland.OBTeammateInfoWidget.OnScrubCharactersCreated // (Final|Native|Private) // @ game+0x26f7100
	void OnPlayerStateChange(bool bUselessParam); // Function Solarland.OBTeammateInfoWidget.OnPlayerStateChange // (Final|Native|Private) // @ game+0x26f6fc0
	void OnPlayerRebirth(); // Function Solarland.OBTeammateInfoWidget.OnPlayerRebirth // (Final|Native|Private) // @ game+0x26f6fa0
	void OnPlayerLevelChanged(uint32_t& Level); // Function Solarland.OBTeammateInfoWidget.OnPlayerLevelChanged // (Final|Native|Private|HasOutParms) // @ game+0x26f6f10
	void OnPlayerKillNumChange(char KillCount); // Function Solarland.OBTeammateInfoWidget.OnPlayerKillNumChange // (Final|Native|Private) // @ game+0x26f6e90
	void OnPlayerInputTypeChanged(struct ASolarPlayerState* InPS); // Function Solarland.OBTeammateInfoWidget.OnPlayerInputTypeChanged // (Final|Native|Private) // @ game+0x26f6e00
	void OnPlayerDeadChange(); // Function Solarland.OBTeammateInfoWidget.OnPlayerDeadChange // (Final|Native|Private) // @ game+0x26f6de0
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.OBTeammateInfoWidget.OnCharacterDead // (Final|Native|Private) // @ game+0x26f6b90
	void OnBtnSpectateClick(); // Function Solarland.OBTeammateInfoWidget.OnBtnSpectateClick // (Final|Native|Private) // @ game+0x26f6ae0
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBTeammateInfoWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x26f6a30
};

// Class Solarland.OBVictory
// Size: 0x448 (Inherited: 0x408)
struct UOBVictory : UOBSettlementBase {
	char pad_408[0x10]; // 0x408(0x10)
	struct UWidgetAnimation* OpenVictoryAnim; // 0x418(0x08)
	struct UWidgetAnimation* CloseVictoryAnim; // 0x420(0x08)
	char pad_428[0x20]; // 0x428(0x20)

	void PlayAnim(); // Function Solarland.OBVictory.PlayAnim // (Final|Native|Public) // @ game+0x26f7300
	void OnOpenVictoryAnimFinished(); // Function Solarland.OBVictory.OnOpenVictoryAnimFinished // (Final|Native|Private) // @ game+0x26f6dc0
	void OnCloseVictoryAnimFinished(); // Function Solarland.OBVictory.OnCloseVictoryAnimFinished // (Final|Native|Private) // @ game+0x26f63e0
	void OnAnimEnd__DelegateSignature(); // DelegateFunction Solarland.OBVictory.OnAnimEnd__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void InitPanel(struct UOBSettlementRoot* InOwner); // Function Solarland.OBVictory.InitPanel // (Native|Public|BlueprintCallable) // @ game+0x26deb30
	void BroadcastOnAnimEnd(); // Function Solarland.OBVictory.BroadcastOnAnimEnd // (Final|Native|Private) // @ game+0x26f63e0
};

// Class Solarland.OBVictoryMember
// Size: 0x408 (Inherited: 0x400)
struct UOBVictoryMember : USolarUserWidget {
	struct ASolarPlayerState* PlayerState; // 0x400(0x08)

	void InitPlayer(struct ASolarPlayerState* InState); // Function Solarland.OBVictoryMember.InitPlayer // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.OBVictoryTeam
// Size: 0x450 (Inherited: 0x408)
struct UOBVictoryTeam : UOBSettlementBase {
	struct UOBVictory* BigVictory; // 0x408(0x08)
	struct UOBVictory* SmallVictory; // 0x410(0x08)
	struct UCanvasPanel* TeamPanel; // 0x418(0x08)
	struct USolarTextBlock* Txt_TeamNum; // 0x420(0x08)
	struct USolarTextBlock* Txt_KillNum; // 0x428(0x08)
	struct USolarTextBlock* Txt_TeamCnt; // 0x430(0x08)
	struct UHorizontalBox* AvatarHorization; // 0x438(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x440(0x08)
	char pad_448[0x8]; // 0x448(0x08)

	void OnAnimEndEvent(); // Function Solarland.OBVictoryTeam.OnAnimEndEvent // (Final|Native|Private) // @ game+0x26f6840
	void InitPanel(struct UOBSettlementRoot* InOwner); // Function Solarland.OBVictoryTeam.InitPanel // (Native|Public|BlueprintCallable) // @ game+0x26deb30
};

// Class Solarland.OpenTreasureBoxProgressWidget
// Size: 0x448 (Inherited: 0x400)
struct UOpenTreasureBoxProgressWidget : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct USolarBattleModel* BattleViewModel; // 0x408(0x08)
	char pad_410[0x10]; // 0x410(0x10)
	struct UButton* Button_Open; // 0x420(0x08)
	struct UButton* Button_Cancel; // 0x428(0x08)
	struct UProgressBar* ProgressBar_Percent; // 0x430(0x08)
	struct UImage* ProgressBar_Percent_PC; // 0x438(0x08)
	struct UTextBlock* Txt_Time; // 0x440(0x08)

	void UpdateProgress(struct ASolarTreasureBoxActor* InBoxActor, float InProgress); // Function Solarland.OpenTreasureBoxProgressWidget.UpdateProgress // (Final|Native|Protected) // @ game+0x26f7980
	void UnBindDelegates(); // Function Solarland.OpenTreasureBoxProgressWidget.UnBindDelegates // (Final|Native|Protected) // @ game+0x9043b0
	bool TryOpenAirdropBox(); // Function Solarland.OpenTreasureBoxProgressWidget.TryOpenAirdropBox // (Final|Native|Protected) // @ game+0x26f7790
	void SetTBoxActor(struct ASolarTreasureBoxActor* InBoxActor); // Function Solarland.OpenTreasureBoxProgressWidget.SetTBoxActor // (Final|Native|Protected) // @ game+0x26f7590
	void SetSelfVisibility(bool InShow); // Function Solarland.OpenTreasureBoxProgressWidget.SetSelfVisibility // (Final|Native|Protected) // @ game+0x26f7480
	void SetAirdropBoxActor(struct AActor* InBoxActor); // Function Solarland.OpenTreasureBoxProgressWidget.SetAirdropBoxActor // (Final|Native|Protected) // @ game+0x26f7320
	void OnPressCancelButtonPC(); // Function Solarland.OpenTreasureBoxProgressWidget.OnPressCancelButtonPC // (Final|Native|Protected) // @ game+0x26f70c0
	bool OnPressButtonPC(); // Function Solarland.OpenTreasureBoxProgressWidget.OnPressButtonPC // (Final|Native|Protected) // @ game+0x26f7090
	void OnPressButtonOpen(); // Function Solarland.OpenTreasureBoxProgressWidget.OnPressButtonOpen // (Final|Native|Protected) // @ game+0x26f7070
	void OnPressButtonCancel(); // Function Solarland.OpenTreasureBoxProgressWidget.OnPressButtonCancel // (Final|Native|Protected) // @ game+0x26f7050
	void OnOpenCharacterChanged(struct AAirDropTreasureBox* InBoxActor); // Function Solarland.OpenTreasureBoxProgressWidget.OnOpenCharacterChanged // (Final|Native|Protected) // @ game+0x26f6d30
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.OpenTreasureBoxProgressWidget.OnDrivingStateChanged // (Final|Native|Protected) // @ game+0x26f6c20
	void OnBtnActiveChanged(bool Inactive); // Function Solarland.OpenTreasureBoxProgressWidget.OnBtnActiveChanged // (Final|Native|Protected) // @ game+0x26446a0
	void OnAirdropProgressChanged(struct AAirDropTreasureBox* InBoxActor); // Function Solarland.OpenTreasureBoxProgressWidget.OnAirdropProgressChanged // (Final|Native|Protected) // @ game+0x26f67b0
	void HideSelfByThisID(int64_t InThisID); // Function Solarland.OpenTreasureBoxProgressWidget.HideSelfByThisID // (Final|Native|Protected) // @ game+0x26f6460
	void ForceCancel(); // Function Solarland.OpenTreasureBoxProgressWidget.ForceCancel // (Final|Native|Protected) // @ game+0x26f6440
	bool BSameThisID(int64_t InThisID); // Function Solarland.OpenTreasureBoxProgressWidget.BSameThisID // (Final|Native|Protected) // @ game+0x26f6320
	void BindDelegates(); // Function Solarland.OpenTreasureBoxProgressWidget.BindDelegates // (Final|Native|Protected) // @ game+0x26f63c0
};

// Class Solarland.OpenTreasureBoxWidget
// Size: 0x430 (Inherited: 0x400)
struct UOpenTreasureBoxWidget : USolarUserWidget {
	char pad_400[0x20]; // 0x400(0x20)
	struct UButton* Button_Open; // 0x420(0x08)
	struct UTextBlock* Text_CostNum; // 0x428(0x08)

	void UpdateCost(); // Function Solarland.OpenTreasureBoxWidget.UpdateCost // (Final|Native|Protected) // @ game+0x26fc110
	void UpdateButtonState(); // Function Solarland.OpenTreasureBoxWidget.UpdateButtonState // (Final|Native|Protected) // @ game+0x26fc060
	void UnBindDelegates(); // Function Solarland.OpenTreasureBoxWidget.UnBindDelegates // (Final|Native|Protected) // @ game+0x9043b0
	bool TryOpenTreasureBox(); // Function Solarland.OpenTreasureBoxWidget.TryOpenTreasureBox // (Final|Native|Protected) // @ game+0x26fbf30
	void SetTreasureBoxActor(struct AActor* InBoxActor); // Function Solarland.OpenTreasureBoxWidget.SetTreasureBoxActor // (Final|Native|Protected) // @ game+0x26fbea0
	void SetTBoxActor(struct ASolarTreasureBoxActor* InBoxActor); // Function Solarland.OpenTreasureBoxWidget.SetTBoxActor // (Final|Native|Protected) // @ game+0x26fbe10
	void SetSelfVisibility(bool InShow); // Function Solarland.OpenTreasureBoxWidget.SetSelfVisibility // (Final|Native|Protected) // @ game+0x26fbd80
	void OnOpenBox(); // Function Solarland.OpenTreasureBoxWidget.OnOpenBox // (Final|Native|Protected) // @ game+0x26faee0
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.OpenTreasureBoxWidget.OnDrivingStateChanged // (Final|Native|Protected) // @ game+0x26fad60
	void OnClickButtonOpen(); // Function Solarland.OpenTreasureBoxWidget.OnClickButtonOpen // (Final|Native|Protected) // @ game+0x26fad40
	void HideSelfByThisID(int64_t InThisID); // Function Solarland.OpenTreasureBoxWidget.HideSelfByThisID // (Final|Native|Protected) // @ game+0x26fab70
	bool BSameThisID(int64_t InThisID); // Function Solarland.OpenTreasureBoxWidget.BSameThisID // (Final|Native|Protected) // @ game+0x26fa7f0
	void BindDelegates(); // Function Solarland.OpenTreasureBoxWidget.BindDelegates // (Final|Native|Protected) // @ game+0x26fa890
};

// Class Solarland.OpponentPerspectiveEffectController
// Size: 0x270 (Inherited: 0x28)
struct UOpponentPerspectiveEffectController : UActorEffectController {
	float ParamsSmoothSpeed; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct FOpponentPerspectiveMaterialParams DefaultMaterialParams; // 0x30(0x220)
	struct TArray<struct FOpponentPerspectiveMaterialParamsConditional> ConditionalMaterialParams; // 0x250(0x10)
	char pad_260[0x10]; // 0x260(0x10)
};

// Class Solarland.OrnamentComponentVisibilityConfig
// Size: 0x88 (Inherited: 0x30)
struct UOrnamentComponentVisibilityConfig : UDataAsset {
	struct FGameplayTagRequirements VisibleTagRequirements; // 0x30(0x50)
	struct FGameplayTag VisibilityFlagTag; // 0x80(0x08)

	struct FGameplayTagRequirements GetVisibleTagRequirements(); // Function Solarland.OrnamentComponentVisibilityConfig.GetVisibleTagRequirements // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26fab10
	struct FGameplayTag GetVisibilityFlagTag(); // Function Solarland.OrnamentComponentVisibilityConfig.GetVisibilityFlagTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26faaf0
};

// Class Solarland.OutputSepChunkListJsonCommandlet
// Size: 0x80 (Inherited: 0x80)
struct UOutputSepChunkListJsonCommandlet : UCommandlet {
};

// Class Solarland.ParallelMoveSubsystem
// Size: 0x78 (Inherited: 0x30)
struct UParallelMoveSubsystem : UWorldSubsystem {
	char pad_30[0x48]; // 0x30(0x48)
};

// Class Solarland.PassiveSkillDataAsset
// Size: 0x78 (Inherited: 0x30)
struct UPassiveSkillDataAsset : UPrimaryDataAsset {
	struct FSoftClassPath SkillClassPath; // 0x30(0x18)
	struct FSoftObjectPath SkillIconPath; // 0x48(0x18)
	struct FWrappedLocalTextID SkillName; // 0x60(0x04)
	struct FWrappedLocalTextID SkillDescription; // 0x64(0x04)
	struct TArray<struct FPassiveSkillLevelDescription> LevelUpConfigs; // 0x68(0x10)
};

// Class Solarland.PassiveSkillIcon
// Size: 0x278 (Inherited: 0x260)
struct UPassiveSkillIcon : UUserWidget {
	struct UImage* ImgIcon; // 0x260(0x08)
	char pad_268[0x10]; // 0x268(0x10)

	void UpdateImageIcon(int32_t InCharacterId); // Function Solarland.PassiveSkillIcon.UpdateImageIcon // (Final|Native|Protected) // @ game+0x26fc130
};

// Class Solarland.PickupButtonWidget
// Size: 0x4e0 (Inherited: 0x400)
struct UPickupButtonWidget : USolarUserWidget {
	struct UCheckBox* CheckBox_Normal; // 0x400(0x08)
	struct USizeBox* SizeBox_Normal; // 0x408(0x08)
	struct FString CurrentCheckBoxSpName; // 0x410(0x10)
	struct FString CheckBoxIconNormalSpName; // 0x420(0x10)
	struct FString CheckBoxIconHightLightSpName; // 0x430(0x10)
	struct FString CheckBoxIconPrefix; // 0x440(0x10)
	struct FVector2D Vecter2DZero; // 0x450(0x08)
	struct FVector2D Vecter2DOne; // 0x458(0x08)
	enum class EPickupItemType FirstExistType; // 0x460(0x01)
	enum class EPickupItemType CurrentDisplayType; // 0x461(0x01)
	char pad_462[0x6]; // 0x462(0x06)
	struct TArray<struct AActor*> CurrentDispayActorList; // 0x468(0x10)
	char pad_478[0x68]; // 0x478(0x68)

	void UpdateCheckBoxesVisibilityRef(int32_t InItemCount); // Function Solarland.PickupButtonWidget.UpdateCheckBoxesVisibilityRef // (Final|Native|Protected) // @ game+0x26fc080
	void UnbindPickUpDelegates(); // Function Solarland.PickupButtonWidget.UnbindPickUpDelegates // (Final|Native|Protected) // @ game+0x26fc040
	void SetPickupSwitchByType(enum class EPickupItemType InType, bool InFlag); // Function Solarland.PickupButtonWidget.SetPickupSwitchByType // (Final|Native|Protected) // @ game+0x26fbbe0
	void SetItemDataRef(struct TArray<struct AActor*>& InActorList, enum class EPickupItemType InType, bool bShowPickupList); // Function Solarland.PickupButtonWidget.SetItemDataRef // (Final|Native|Protected|HasOutParms) // @ game+0x26fbab0
	void OnUpdatePickupListStates(bool bItemUpdate); // Function Solarland.PickupButtonWidget.OnUpdatePickupListStates // (Final|Native|Protected) // @ game+0x26fb4d0
	void OnUpdateCheckBoxesHighLight(enum class EPickupItemType InType, bool IsRecommend); // Function Solarland.PickupButtonWidget.OnUpdateCheckBoxesHighLight // (Final|Native|Protected) // @ game+0x26fb400
	void OnTogglePickupListByKeyboard(); // Function Solarland.PickupButtonWidget.OnTogglePickupListByKeyboard // (Final|Native|Protected) // @ game+0x26fb3e0
	void OnTogglePickupList(bool Flag, bool NotSelf); // Function Solarland.PickupButtonWidget.OnTogglePickupList // (Final|Native|Protected) // @ game+0x26fb240
	void OnPickupListClear(); // Function Solarland.PickupButtonWidget.OnPickupListClear // (Final|Native|Protected) // @ game+0x26fb030
	void OnCheckNormal(bool IsChecked); // Function Solarland.PickupButtonWidget.OnCheckNormal // (Final|Native|Protected) // @ game+0x26facb0
	void BindPickUpDelegates(); // Function Solarland.PickupButtonWidget.BindPickUpDelegates // (Final|Native|Protected) // @ game+0x26fa8b0
};

// Class Solarland.PickupItemObject
// Size: 0x98 (Inherited: 0x28)
struct UPickupItemObject : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	enum class EPickupListItemType ListViewDataType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UObject* CustomizedData; // 0x38(0x08)
	struct TMap<int32_t, struct FPickupListViewItemData> MergedDatas; // 0x40(0x50)
	int32_t Index; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)

	void ResetData(); // Function Solarland.PickupItemObject.ResetData // (Final|Native|Public) // @ game+0x26fba00
};

// Class Solarland.PickupItemWidget
// Size: 0x750 (Inherited: 0x400)
struct UPickupItemWidget : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct UCanvasPanel* CanvasPanel_Anim; // 0x408(0x08)
	struct UOverlay* Item; // 0x410(0x08)
	struct UImage* Img_Quality_BG; // 0x418(0x08)
	struct UImage* Img_Quality_BG_Line; // 0x420(0x08)
	struct UImage* ItemImage_BG; // 0x428(0x08)
	struct UImage* ItemImage; // 0x430(0x08)
	struct UImage* TagImage; // 0x438(0x08)
	struct UCanvasPanel* Panel_Reco; // 0x440(0x08)
	struct UImage* ImgBulletType; // 0x448(0x08)
	struct USolarTextBlock* ItemName; // 0x450(0x08)
	struct UTextBlock* ItemCount; // 0x458(0x08)
	struct UTextBlock* ItemCountAdd; // 0x460(0x08)
	struct UCanvasPanel* CardItemIcon; // 0x468(0x08)
	struct USizeBox* SizeBox_Select; // 0x470(0x08)
	struct FSolarItemData PreviewItemData; // 0x478(0xb8)
	struct TMap<int32_t, struct FPickupListViewItemData> MergedDatas; // 0x530(0x50)
	enum class EPickupListItemType ListViewDataType; // 0x580(0x01)
	char pad_581[0x7]; // 0x581(0x07)
	struct UObject* CustomizeData; // 0x588(0x08)
	struct FString WeaponPartPrePath; // 0x590(0x10)
	struct FString ItemPrePath; // 0x5a0(0x10)
	struct FLinearColor ColorNormal; // 0x5b0(0x10)
	struct FLinearColor ColorRecommend; // 0x5c0(0x10)
	struct FLinearColor ColorWeaponUp; // 0x5d0(0x10)
	struct FLinearColor ColorWeaponDown; // 0x5e0(0x10)
	struct TMap<enum class EWeaponType, struct FSoftObjectPath> WeaponType2BulltSpMap; // 0x5f0(0x50)
	int32_t WeaponMaxLevelLocalID; // 0x640(0x04)
	int32_t WeaponUpgradeLocalID; // 0x644(0x04)
	bool bForceResetAnim; // 0x648(0x01)
	bool bMarkForceUpdate; // 0x649(0x01)
	char pad_64A[0x7c]; // 0x64a(0x7c)
	bool bImplementedUpdateFunc; // 0x6c6(0x01)
	char pad_6C7[0x1]; // 0x6c7(0x01)
	struct TArray<struct FLinearColor> ImgQualityBGColors; // 0x6c8(0x10)
	struct TArray<struct FSlateColor> ItemNameColors; // 0x6d8(0x10)
	bool bHUDEntry; // 0x6e8(0x01)
	char pad_6E9[0x7]; // 0x6e9(0x07)
	struct UUIDragWidget* DragWidgetTemplate; // 0x6f0(0x08)
	struct FVector2D DragWidgetSize; // 0x6f8(0x08)
	struct TMap<int32_t, struct UTexture2D*> CacheQualityBgMap; // 0x700(0x50)

	void UpdateQuality(int32_t SpecifyQuality); // Function Solarland.PickupItemWidget.UpdateQuality // (Final|Native|Protected|BlueprintCallable) // @ game+0x26fc1c0
	void TryResetEntryAnim(); // Function Solarland.PickupItemWidget.TryResetEntryAnim // (Final|Native|Protected) // @ game+0x26fc000
	void OnUpdateCustomizedItem(struct UObject* InObject); // Function Solarland.PickupItemWidget.OnUpdateCustomizedItem // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnRquestEntryPlayAnimCustom(struct UObject* InCustomObj); // Function Solarland.PickupItemWidget.OnRquestEntryPlayAnimCustom // (Final|Native|Protected|BlueprintCallable) // @ game+0x26fb1b0
	void OnRquestEntryPlayAnim(int32_t InThisID); // Function Solarland.PickupItemWidget.OnRquestEntryPlayAnim // (Final|Native|Protected|BlueprintCallable) // @ game+0x26fb120
	void OnRequestPickupSpecificItem(int32_t InThisID, int32_t InPreferSlotIndex); // Function Solarland.PickupItemWidget.OnRequestPickupSpecificItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x26fb050
	void OnCustomizedItemClicked(struct UObject* InObject); // Function Solarland.PickupItemWidget.OnCustomizedItemClicked // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void MarkItemInPickupList(); // Function Solarland.PickupItemWidget.MarkItemInPickupList // (Final|Native|Public) // @ game+0x26fac00
};

// Class Solarland.PickupListWidget
// Size: 0x5b0 (Inherited: 0x400)
struct UPickupListWidget : USolarUserWidget {
	struct USizeBox* SizeBoxItemList; // 0x400(0x08)
	struct USolarListView* ItemList; // 0x408(0x08)
	struct UPickupSightWidget* UI_Pickup_Sight; // 0x410(0x08)
	struct FVector2D ScopeOffset; // 0x418(0x08)
	int32_t PickupItemCount; // 0x420(0x04)
	float RefreshSelectDelay; // 0x424(0x04)
	struct FName PickupPreActionName; // 0x428(0x08)
	struct FName PickupNextActionName; // 0x430(0x08)
	struct FVector2D ZeroVector; // 0x438(0x08)
	struct FTimerHandle PushHandler; // 0x440(0x08)
	int32_t DisplayLength; // 0x448(0x04)
	bool bIsMovePos; // 0x44c(0x01)
	char pad_44D[0x3]; // 0x44d(0x03)
	int32_t SelectScopeThisID; // 0x450(0x04)
	char pad_454[0x24]; // 0x454(0x24)
	struct TMap<int64_t, struct UPickupItemObject*> CachedPickupItemsMap; // 0x478(0x50)
	struct TMap<int32_t, struct UPickupItemObject*> MergedPickupItemsMap; // 0x4c8(0x50)
	struct TArray<struct UObject*> WarppedItemList; // 0x518(0x10)
	struct TArray<struct UObject*> WarppedTeamCardList; // 0x528(0x10)
	char pad_538[0x78]; // 0x538(0x78)

	void UnbindPickUpDelegates(); // Function Solarland.PickupListWidget.UnbindPickUpDelegates // (Final|Native|Protected) // @ game+0x26fc020
	bool TryPickupFirstItem(bool bAutoPickup); // Function Solarland.PickupListWidget.TryPickupFirstItem // (Final|Native|Public) // @ game+0x26fbf60
	void SetSelectPreviousItem(); // Function Solarland.PickupListWidget.SetSelectPreviousItem // (Final|Native|Protected) // @ game+0x26fbd60
	void SetSelectNextItem(); // Function Solarland.PickupListWidget.SetSelectNextItem // (Final|Native|Protected) // @ game+0x26fbd40
	void SetSelectItemIndex(int32_t Index); // Function Solarland.PickupListWidget.SetSelectItemIndex // (Final|Native|Protected) // @ game+0x26fbcb0
	void SetIsMovePostion(bool InIsMovePos); // Function Solarland.PickupListWidget.SetIsMovePostion // (Final|Native|Public) // @ game+0x26fba20
	void RemoveCardItem(struct UObject* InCardItem, bool bPickup); // Function Solarland.PickupListWidget.RemoveCardItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x26fb930
	void RefreshPickupSightWidget(struct UObject* InSelectWidget, int32_t InSelectWidgetThisID); // Function Solarland.PickupListWidget.RefreshPickupSightWidget // (Final|Native|Public) // @ game+0x26fb860
	void RefreshListViewNextTick(); // Function Solarland.PickupListWidget.RefreshListViewNextTick // (Final|Native|Public) // @ game+0x26fb840
	void OnTogglePickupList(bool bShow, bool NotToSelf); // Function Solarland.PickupListWidget.OnTogglePickupList // (Final|Native|Protected) // @ game+0x26fb310
	void OnPickupListCalculated(struct TArray<struct AActor*>& InActorList, enum class EPickupItemType InType, bool InPickupListVisible); // Function Solarland.PickupListWidget.OnPickupListCalculated // (Final|Native|Protected|HasOutParms) // @ game+0x26faf00
	void OnEntryPlayPickupAnim(float InAnimTime); // Function Solarland.PickupListWidget.OnEntryPlayPickupAnim // (Final|Native|Public) // @ game+0x26fae60
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.PickupListWidget.OnDrivingStateChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x26fade0
	void OnBackpackHUDVisibilityChanged(bool bVisible); // Function Solarland.PickupListWidget.OnBackpackHUDVisibilityChanged // (Final|Native|Public) // @ game+0x26fac20
	struct UObject* GetCustomObjData(struct UObject* InItemData); // Function Solarland.PickupListWidget.GetCustomObjData // (Final|Native|Public|BlueprintCallable) // @ game+0x26faa50
	void DoRefreshBackpackPickupList(); // Function Solarland.PickupListWidget.DoRefreshBackpackPickupList // (Final|Native|Public) // @ game+0x26faa30
	bool CheckPickupItemValidInBackpack(int32_t InThisID); // Function Solarland.PickupListWidget.CheckPickupItemValidInBackpack // (Final|Native|Public) // @ game+0x26fa990
	bool CheckIsPickupItemValid(int32_t InThisID); // Function Solarland.PickupListWidget.CheckIsPickupItemValid // (Final|Native|Public) // @ game+0x26fa8f0
	void BindPickUpDelegates(); // Function Solarland.PickupListWidget.BindPickUpDelegates // (Final|Native|Protected) // @ game+0x26fa8d0
	void AddCardItem(struct UObject* InCardItem); // Function Solarland.PickupListWidget.AddCardItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x26fa760
};

// Class Solarland.PickupSightWidget
// Size: 0x4a8 (Inherited: 0x400)
struct UPickupSightWidget : USolarUserWidget {
	struct UImage* Img_WeaponA; // 0x400(0x08)
	struct UImage* Img_WeaponB; // 0x408(0x08)
	struct UImage* Img_Backpack; // 0x410(0x08)
	struct UImage* Img_DisableA; // 0x418(0x08)
	struct UImage* Img_DisableB; // 0x420(0x08)
	struct UImage* Img_Border_A; // 0x428(0x08)
	struct UImage* Img_Border_B; // 0x430(0x08)
	struct UImage* Img_Disable_Bag; // 0x438(0x08)
	struct UCanvasPanel* Panel_WP_UnarmA; // 0x440(0x08)
	struct UCanvasPanel* Panel_WP_UnarmB; // 0x448(0x08)
	struct UCanvasPanel* Panel_Arrow_Left; // 0x450(0x08)
	struct UCanvasPanel* Panel_Arrow_Right; // 0x458(0x08)
	struct UUIWeaponPartWidget* WeaponPartA; // 0x460(0x08)
	struct UUIWeaponPartWidget* WeaponPartB; // 0x468(0x08)
	struct UUIWeaponPartWidget* WeaponPartBag; // 0x470(0x08)
	enum class EWeaponPartType PickScopeType; // 0x478(0x01)
	char pad_479[0x3]; // 0x479(0x03)
	int32_t PickScopeLevel; // 0x47c(0x04)
	struct AActor* PickActor; // 0x480(0x08)
	int32_t PickThisId; // 0x488(0x04)
	enum class EItemType PickActorType; // 0x48c(0x04)
	struct FLinearColor ColorDisable; // 0x490(0x10)
	char pad_4A0[0x8]; // 0x4a0(0x08)

	void UpdateBagScope(); // Function Solarland.PickupSightWidget.UpdateBagScope // (Final|Native|Public) // @ game+0x26fff40
	void OnWeaponUpgradeLevel(int32_t InWeaponSlot); // Function Solarland.PickupSightWidget.OnWeaponUpgradeLevel // (Final|Native|Public) // @ game+0x26ff770
	void OnWeaponUpdate(struct ASolarCharacter* InCharacter); // Function Solarland.PickupSightWidget.OnWeaponUpdate // (Final|Native|Public) // @ game+0x26ff6e0
	void OnClickWeaponB(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickWeaponB // (Final|Native|Protected|HasOutParms) // @ game+0x26fe7d0
	void OnClickWeaponA(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickWeaponA // (Final|Native|Protected|HasOutParms) // @ game+0x26fe630
	void OnClickImgDisableBag(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickImgDisableBag // (Final|Native|Protected|HasOutParms) // @ game+0x26fe490
	void OnClickImgDisableB(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickImgDisableB // (Final|Native|Protected|HasOutParms) // @ game+0x26fe2f0
	void OnClickImgDisableA(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickImgDisableA // (Final|Native|Protected|HasOutParms) // @ game+0x26fe150
	void OnClickBag(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickBag // (Final|Native|Protected|HasOutParms) // @ game+0x26fdf10
};

// Class Solarland.PlayerMark
// Size: 0x280 (Inherited: 0x260)
struct UPlayerMark : UUserWidget {
	struct UImage* PlayerMarkImage; // 0x260(0x08)
	struct UTextBlock* Length; // 0x268(0x08)
	struct USolarMapManager* MapManager; // 0x270(0x08)
	struct FVector2D MarkPoint; // 0x278(0x08)
};

// Class Solarland.PlayerOperationList
// Size: 0x810 (Inherited: 0x400)
struct UPlayerOperationList : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct TMap<struct FString, struct UWidget*> CollectedLayout; // 0x410(0x50)
	char pad_460[0x50]; // 0x460(0x50)
	enum class EPlayerWidgetState WidgetVisibilityState; // 0x4b0(0x01)
	char pad_4B1[0x7]; // 0x4b1(0x07)
	struct UCanvasPanel* Panel_AngleView; // 0x4b8(0x08)
	struct UUserWidget* FlyActiveControl; // 0x4c0(0x08)
	struct UUserWidget* JetActiveControl; // 0x4c8(0x08)
	struct USolarMovablePad* FreeLookPad; // 0x4d0(0x08)
	struct UImage* FreeLookIcon; // 0x4d8(0x08)
	struct UImage* Img_SprintActive; // 0x4e0(0x08)
	struct UImage* Img_SprintLock; // 0x4e8(0x08)
	struct UImage* FX_CircleLoop; // 0x4f0(0x08)
	struct TSoftObjectPtr<UPaperSprite> PressedFreeLook; // 0x4f8(0x28)
	struct TSoftObjectPtr<UPaperSprite> ReleasedFreeLook; // 0x520(0x28)
	struct TSoftObjectPtr<UTexture> SkydiveSprintImage; // 0x548(0x28)
	struct TSoftObjectPtr<UTexture> SkydiveSprintHoveredImage; // 0x570(0x28)
	struct TSoftObjectPtr<UTexture> VehicleAutoMoveImage; // 0x598(0x28)
	struct TSoftObjectPtr<UTexture> VehicleAutoMoveHoveredImage; // 0x5c0(0x28)
	struct UCanvasPanel* Panel_SpectateHide; // 0x5e8(0x08)
	struct UHUDCountdownWidget* Panel_CountDown; // 0x5f0(0x08)
	struct USolarInputButton* BT_Jump; // 0x5f8(0x08)
	struct UButton* BTN_TeamRescue; // 0x600(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_RescueBTN; // 0x608(0x08)
	struct UHUDPassiveHeadWidget* UI_PassiveHead_item; // 0x610(0x08)
	struct UCanvasPanel* Panel_Crouch; // 0x618(0x08)
	struct UCanvasPanel* Sprint; // 0x620(0x08)
	struct UCanvasPanel* SprintActiveOncePanel; // 0x628(0x08)
	struct USolarTextBlock* Txt_JoystickLock; // 0x630(0x08)
	struct UCanvasPanel* Panel_Forbid; // 0x638(0x08)
	struct UWidgetAnimation* FX_CircleOnce_Anim; // 0x640(0x08)
	struct UWidgetAnimation* FX_CircleLoop_Anim; // 0x648(0x08)
	int32_t JoystickLockTipsSprintTextID; // 0x650(0x04)
	int32_t JoystickLockTipsSkydiveTextID; // 0x654(0x04)
	struct UButton* BTN_BuyResurrection; // 0x658(0x08)
	struct UCanvasPanel* Panel_ShieldUpgrade; // 0x660(0x08)
	struct UCanvasPanel* Panel_VX; // 0x668(0x08)
	struct UWidgetSwitcher* Switcher_State; // 0x670(0x08)
	struct UCanvasPanel* Panel_Btn; // 0x678(0x08)
	struct UCanvasPanel* Panel_CD; // 0x680(0x08)
	struct USolarButton* Btn_ShiledUpgrade; // 0x688(0x08)
	struct UImage* Img_Light; // 0x690(0x08)
	struct UImage* Img_Enter_Light_2; // 0x698(0x08)
	struct UImage* Img_Enter_Light_3; // 0x6a0(0x08)
	struct UImage* Img_Loop_Light_2; // 0x6a8(0x08)
	struct UImage* Img_Loop_Light_3; // 0x6b0(0x08)
	struct UImage* Img_Loop_Arrow_4; // 0x6b8(0x08)
	char pad_6C0[0x8]; // 0x6c0(0x08)
	struct UImage* Img_Shield; // 0x6c8(0x08)
	struct UTextBlock* Text_GameProgressTime; // 0x6d0(0x08)
	struct UButton* BTN_GameProgressCancel; // 0x6d8(0x08)
	struct UGaugeImage* Image_GameProgressBar; // 0x6e0(0x08)
	struct UWidgetAnimation* Anim_ShieldUpgrade_Enter; // 0x6e8(0x08)
	struct UWidgetAnimation* Anim_ShieldUpgrade_Exit; // 0x6f0(0x08)
	struct USolarInputButton* BT_Jump_Skill; // 0x6f8(0x08)
	struct USolarInputButton* BT_Jump_Skill_1; // 0x700(0x08)
	float CircleOnceAnimInterval; // 0x708(0x04)
	int32_t FastReliefSkillCharacterID; // 0x70c(0x04)
	struct UCanvasPanel* Panel_Top3Victory_Notice; // 0x710(0x08)
	struct UWidgetAnimation* Anim_Top3Victory_Enter; // 0x718(0x08)
	char pad_720[0x50]; // 0x720(0x50)
	struct USolarButton* BT_ElectricShop; // 0x770(0x08)
	char pad_778[0xc]; // 0x778(0x0c)
	float EShopHUDCheckTime; // 0x784(0x04)
	struct FString EShopHUDName; // 0x788(0x10)
	char pad_798[0x8]; // 0x798(0x08)
	struct UHorizontalBox* Vehicle_Drive; // 0x7a0(0x08)
	struct UHorizontalBox* Vehicle_Passenger; // 0x7a8(0x08)
	struct UHorizontalBox* Vehicle_Passenger_PC; // 0x7b0(0x08)
	struct UCanvasPanel* Vehicle_Repair_Status; // 0x7b8(0x08)
	struct UCanvasPanel* Panel_Vehicle_Drive_Passenger; // 0x7c0(0x08)
	struct USolarVehicleHealthWidget* UI_Vehicle_Health; // 0x7c8(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_VehicleRepair; // 0x7d0(0x08)
	struct UWalkWidgetNew* WalkJoyStick; // 0x7d8(0x08)
	char bJoyStickVisible : 1; // 0x7e0(0x01)
	char pad_7E0_1 : 7; // 0x7e0(0x01)
	char pad_7E1[0x7]; // 0x7e1(0x07)
	struct UCanvasPanel* Panel_FollowDance; // 0x7e8(0x08)
	struct USolarInputButton* Btn_FollowDance; // 0x7f0(0x08)
	char pad_7F8[0x8]; // 0x7f8(0x08)
	struct UTempInteractiveKeyListWidget* TempInteractiveKeyListWidget; // 0x800(0x08)
	struct USolarAdapterWidget* OperationKey; // 0x808(0x08)

	void UpdateFreeLookUI(bool bHide); // Function Solarland.PlayerOperationList.UpdateFreeLookUI // (Final|Native|Public|BlueprintCallable) // @ game+0x26fff60
	void SwitchWidgetVisibilityByState(enum class EPlayerWidgetState NewState); // Function Solarland.PlayerOperationList.SwitchWidgetVisibilityByState // (Final|Native|Public|BlueprintCallable) // @ game+0x26ffec0
	void SetUIShowForSwimming(bool bSwimming); // Function Solarland.PlayerOperationList.SetUIShowForSwimming // (Final|Native|Public|BlueprintCallable) // @ game+0x26ffda0
	void SetUIShowForSpectateMode(bool InSepectateMode); // Function Solarland.PlayerOperationList.SetUIShowForSpectateMode // (Final|Native|Public|BlueprintCallable) // @ game+0x26ffd10
	void SetShowBattleControls(bool bShow); // Function Solarland.PlayerOperationList.SetShowBattleControls // (Final|Native|Public|BlueprintCallable) // @ game+0x26fdaf0
	void SetRescueBtnVisibility(bool bShow); // Function Solarland.PlayerOperationList.SetRescueBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x26ffc80
	void SetJoyStickForVehicle(); // Function Solarland.PlayerOperationList.SetJoyStickForVehicle // (Final|Native|Public) // @ game+0x26ffc60
	void SetJoyStickForSkydive(); // Function Solarland.PlayerOperationList.SetJoyStickForSkydive // (Final|Native|Public) // @ game+0x26ffc40
	void SetJoyStickForNormal(); // Function Solarland.PlayerOperationList.SetJoyStickForNormal // (Final|Native|Public) // @ game+0x26ffc20
	void SetJoyStickDisplay(bool bShow, bool bParachutingType); // Function Solarland.PlayerOperationList.SetJoyStickDisplay // (Final|Native|Public) // @ game+0x26ffb50
	void SetForceCollapsedFreeLook(bool bCollapsed); // Function Solarland.PlayerOperationList.SetForceCollapsedFreeLook // (Final|Native|Public|BlueprintCallable) // @ game+0x26ffac0
	void SetChangeHeroBtnVisibility(bool bShow); // Function Solarland.PlayerOperationList.SetChangeHeroBtnVisibility // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetCanClimbFromWater(bool bEnable); // Function Solarland.PlayerOperationList.SetCanClimbFromWater // (Final|Native|Public|BlueprintCallable) // @ game+0x26ffa30
	void SetBuyResurrecBTNVisibility(bool bShow); // Function Solarland.PlayerOperationList.SetBuyResurrecBTNVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x26ff9a0
	void ScopeUIStateChanged(bool BOpened); // Function Solarland.PlayerOperationList.ScopeUIStateChanged // (Final|Native|Public) // @ game+0x26ff880
	void ResetJoyStickSprintState(); // Function Solarland.PlayerOperationList.ResetJoyStickSprintState // (Final|Native|Protected) // @ game+0x26ff860
	void ResetJoyStickControlInput(); // Function Solarland.PlayerOperationList.ResetJoyStickControlInput // (Final|Native|Protected) // @ game+0x26ff840
	void ResetJoyStick(); // Function Solarland.PlayerOperationList.ResetJoyStick // (Final|Native|Protected) // @ game+0x26ff820
	void RecheckElectricShopInteraction(); // Function Solarland.PlayerOperationList.RecheckElectricShopInteraction // (Final|Native|Protected) // @ game+0x26ff800
	void OnVehicleWeaponAbilityActivated(bool bInActive); // Function Solarland.PlayerOperationList.OnVehicleWeaponAbilityActivated // (Final|Native|Protected) // @ game+0x26ff650
	void OnVehicleTypeChanged(); // Function Solarland.PlayerOperationList.OnVehicleTypeChanged // (Final|Native|Protected) // @ game+0x26ff630
	void OnUpdateVehicleInteractionUIState(enum class EVehicleInterationUIState InUiState, struct ASolarVehiclePawn* InVehicleComponent); // Function Solarland.PlayerOperationList.OnUpdateVehicleInteractionUIState // (Final|Native|Protected) // @ game+0x26ff560
	void OnTop3Team(); // Function Solarland.PlayerOperationList.OnTop3Team // (Final|Native|Protected) // @ game+0x26ff540
	void OnTerminateSprintFree(); // Function Solarland.PlayerOperationList.OnTerminateSprintFree // (Final|Native|Public) // @ game+0x26ff520
	void OnSprintLockIconActiveFunc(struct FVector2D SprintPosition); // Function Solarland.PlayerOperationList.OnSprintLockIconActiveFunc // (Final|Native|Public|HasDefaults) // @ game+0x26ff4a0
	void OnSprintIconHideFunc(); // Function Solarland.PlayerOperationList.OnSprintIconHideFunc // (Final|Native|Public) // @ game+0x26ff480
	void OnSprintIconActiveFunc(struct FVector2D SprintPosition); // Function Solarland.PlayerOperationList.OnSprintIconActiveFunc // (Final|Native|Public|HasDefaults) // @ game+0x26ff400
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.PlayerOperationList.OnSpectateTargetChanged // (Final|Native|Protected) // @ game+0x26ff330
	void OnShieldUpgradeStart(); // Function Solarland.PlayerOperationList.OnShieldUpgradeStart // (Final|Native|Protected) // @ game+0x26ff310
	void OnShieldUpgradeItemChanged(int32_t NewCount, int32_t LastCount); // Function Solarland.PlayerOperationList.OnShieldUpgradeItemChanged // (Final|Native|Public) // @ game+0x26ff240
	void OnShieldUpgradeInterrupt(); // Function Solarland.PlayerOperationList.OnShieldUpgradeInterrupt // (Final|Native|Protected) // @ game+0x26ff220
	void OnShieldUpgradeFinish(); // Function Solarland.PlayerOperationList.OnShieldUpgradeFinish // (Final|Native|Protected) // @ game+0x26ff220
	void OnShieldChanged(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield); // Function Solarland.PlayerOperationList.OnShieldChanged // (Final|Native|Public) // @ game+0x26ff0c0
	void OnShieldAvailableChanged(bool bShow); // Function Solarland.PlayerOperationList.OnShieldAvailableChanged // (Final|Native|Public) // @ game+0x26ff030
	void OnSettingConfigSaved(); // Function Solarland.PlayerOperationList.OnSettingConfigSaved // (Final|Native|Protected) // @ game+0x26ff010
	void OnPickupSwitchChanged(bool Inactive, bool InNotToSelf); // Function Solarland.PlayerOperationList.OnPickupSwitchChanged // (Final|Native|Protected) // @ game+0x26fef40
	void OnLocalPlaySet(); // Function Solarland.PlayerOperationList.OnLocalPlaySet // (Final|Native|Public) // @ game+0x26fef20
	void OnInVehicleJoyStickChange(enum class EDriveState InDriveState); // Function Solarland.PlayerOperationList.OnInVehicleJoyStickChange // (Final|Native|Protected) // @ game+0x26feea0
	void OnGameUserItemHUDStyleChanged(enum class ESolarITemHUDStyle InStyle); // Function Solarland.PlayerOperationList.OnGameUserItemHUDStyleChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnFreeLookPadRelease(struct FGeometry& InGeometry, struct FPointerEvent& Event); // Function Solarland.PlayerOperationList.OnFreeLookPadRelease // (Final|Native|Public|HasOutParms) // @ game+0x26fed00
	void OnFreeLookPadPressed(struct FGeometry& InGeometry, struct FPointerEvent& Event); // Function Solarland.PlayerOperationList.OnFreeLookPadPressed // (Final|Native|Public|HasOutParms) // @ game+0x26feb60
	void OnEnterParachuting(); // Function Solarland.PlayerOperationList.OnEnterParachuting // (Final|Native|Public|BlueprintCallable) // @ game+0x26feb40
	void OnEnterLanding(); // Function Solarland.PlayerOperationList.OnEnterLanding // (Final|Native|Public|BlueprintCallable) // @ game+0x26feb20
	void OnEnterCruising(); // Function Solarland.PlayerOperationList.OnEnterCruising // (Final|Native|Public|BlueprintCallable) // @ game+0x26feb00
	void OnEMPEffected(struct ASolarCharacter* EffectedCharacter, bool bEMPActive); // Function Solarland.PlayerOperationList.OnEMPEffected // (Final|Native|Public) // @ game+0x26fe9f0
	void OnElectricShopBtnClickedPC(); // Function Solarland.PlayerOperationList.OnElectricShopBtnClickedPC // (Final|Native|Protected) // @ game+0x26feae0
	void OnElectricShopBtnClicked(); // Function Solarland.PlayerOperationList.OnElectricShopBtnClicked // (Final|Native|Protected) // @ game+0x26feac0
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.PlayerOperationList.OnDrivingStateChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x26fe970
	void OnClickFollowDance(); // Function Solarland.PlayerOperationList.OnClickFollowDance // (Final|Native|Protected) // @ game+0x26fe130
	void OnClickBuyResurrection(); // Function Solarland.PlayerOperationList.OnClickBuyResurrection // (Final|Native|Public) // @ game+0x26fe110
	void OnClickBtnTeamRescue(); // Function Solarland.PlayerOperationList.OnClickBtnTeamRescue // (Final|Native|Public) // @ game+0x26fe0f0
	void OnClickBtnShieldUpgrade(); // Function Solarland.PlayerOperationList.OnClickBtnShieldUpgrade // (Final|Native|Public) // @ game+0x26fe0d0
	void OnClickBtnCancelShieldUpgrade(); // Function Solarland.PlayerOperationList.OnClickBtnCancelShieldUpgrade // (Final|Native|Public) // @ game+0x26fe0b0
	void OnCharacterUsingSkillStatusChanged(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.PlayerOperationList.OnCharacterUsingSkillStatusChanged // (Final|Native|Public) // @ game+0x26fde40
	void OnCharacterSet(struct ASolarCharacter* ControlledCharacter); // Function Solarland.PlayerOperationList.OnCharacterSet // (Final|Native|Protected) // @ game+0x26fddb0
	void OnCharacterOverlapedElectricShop(bool InFlag); // Function Solarland.PlayerOperationList.OnCharacterOverlapedElectricShop // (Final|Native|Protected) // @ game+0x26fdd20
	void OnCharacterIDSet(int32_t InCharacterId); // Function Solarland.PlayerOperationList.OnCharacterIDSet // (Final|Native|Protected) // @ game+0x26fdc90
	void OnCanSkilledJump(bool bValue); // Function Solarland.PlayerOperationList.OnCanSkilledJump // (Final|Native|Protected) // @ game+0x26fdb80
	void InputSprintLockStart(); // Function Solarland.PlayerOperationList.InputSprintLockStart // (Final|Native|Public) // @ game+0x26fdad0
	void InputSprintFreeStart(); // Function Solarland.PlayerOperationList.InputSprintFreeStart // (Final|Native|Public) // @ game+0x26fdab0
	enum class EDriveState GetLocallPlayerDriveState(); // Function Solarland.PlayerOperationList.GetLocallPlayerDriveState // (Final|Native|Public) // @ game+0x26fda80
	void DoUpdateEShopButton(); // Function Solarland.PlayerOperationList.DoUpdateEShopButton // (Final|Native|Protected) // @ game+0x26fda60
	bool CheckEShopHUDActive(); // Function Solarland.PlayerOperationList.CheckEShopHUDActive // (Final|Native|Protected) // @ game+0x26fda30
	void ApplyPlayerJoyStickLayout(); // Function Solarland.PlayerOperationList.ApplyPlayerJoyStickLayout // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.PlayerOperationListPC
// Size: 0x818 (Inherited: 0x810)
struct UPlayerOperationListPC : UPlayerOperationList {
	struct UCanvasPanel* Panel_MobileHide; // 0x810(0x08)

	void OnChangedDriveState(enum class EDriveState InDriveState); // Function Solarland.PlayerOperationListPC.OnChangedDriveState // (Final|Native|Protected) // @ game+0x26fdc10
};

// Class Solarland.WeaponRecoilComponent
// Size: 0x228 (Inherited: 0xb0)
struct UWeaponRecoilComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct USolarGameInstanceBase* GameInstance; // 0xb8(0x08)
	bool bHActive; // 0xc0(0x01)
	bool bVActive; // 0xc1(0x01)
	bool bRActive; // 0xc2(0x01)
	char pad_C3[0x5]; // 0xc3(0x05)
	struct ASolarWeapon* MyWeaponActor; // 0xc8(0x08)
	struct USingleWeaponConfig* WeaponConfig; // 0xd0(0x08)
	struct UCurveFloat* YawCurve; // 0xd8(0x08)
	struct UCurveFloat* PitchCurve; // 0xe0(0x08)
	struct UCurveFloat* RollCurve; // 0xe8(0x08)
	struct UCurveFloat* ScopeRollCurve; // 0xf0(0x08)
	struct UCurveFloat* ScopePitchCurve; // 0xf8(0x08)
	struct TArray<struct FRichCurveKey> OriginalScopePitchKeys; // 0x100(0x10)
	struct UAmmoConfig* CurrentAmmoConfig; // 0x110(0x08)
	char pad_118[0xc8]; // 0x118(0xc8)
	struct TArray<struct UCurveFloat*> YawCurveArray; // 0x1e0(0x10)
	struct TArray<struct UCurveFloat*> PitchCurveArray; // 0x1f0(0x10)
	struct UCurveFloat* PitchEndCurve; // 0x200(0x08)
	struct TArray<struct UCurveFloat*> RollCurveArray; // 0x208(0x10)
	struct TArray<struct UCurveFloat*> ScopeRollCurveArray; // 0x218(0x10)

	void SetRecoilVActive(bool bActive); // Function Solarland.WeaponRecoilComponent.SetRecoilVActive // (Final|Native|Public|BlueprintCallable) // @ game+0x29dfbd0
	void SetRecoilRActive(bool bActive); // Function Solarland.WeaponRecoilComponent.SetRecoilRActive // (Final|Native|Public|BlueprintCallable) // @ game+0x29dfb40
	void SetRecoilHActive(bool bActive); // Function Solarland.WeaponRecoilComponent.SetRecoilHActive // (Final|Native|Public|BlueprintCallable) // @ game+0x29dfab0
	void SetRecoilActive(bool bActive); // Function Solarland.WeaponRecoilComponent.SetRecoilActive // (Final|Native|Public|BlueprintCallable) // @ game+0x29dfa20
	bool JudgeHorizontalRecoilDir(struct FVector& factorVector, bool bCurrentRight, int32_t instantCout); // Function Solarland.WeaponRecoilComponent.JudgeHorizontalRecoilDir // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x29df870
	bool IsRunning(); // Function Solarland.WeaponRecoilComponent.IsRunning // (Final|Native|Public|BlueprintCallable) // @ game+0x29df810
	struct UCurveFloat* GetYawCurve(uint32_t Mode, struct UAmmoConfig* AmmoConfig); // Function Solarland.WeaponRecoilComponent.GetYawCurve // (Final|Native|Private) // @ game+0x29df4d0
	struct UCurveFloat* GetRollCurve(uint32_t Mode, struct UAmmoConfig* AmmoConfig); // Function Solarland.WeaponRecoilComponent.GetRollCurve // (Final|Native|Private) // @ game+0x29df310
	struct UCurveFloat* GetPitchCurve(uint32_t Mode, struct UAmmoConfig* AmmoConfig); // Function Solarland.WeaponRecoilComponent.GetPitchCurve // (Final|Native|Private) // @ game+0x29df240
	struct FRotator GetCurrentRecoil(); // Function Solarland.WeaponRecoilComponent.GetCurrentRecoil // (Final|Native|Public|HasDefaults|Const) // @ game+0x29df0a0
	struct FRotator GetAndClearCurrentRecoil(); // Function Solarland.WeaponRecoilComponent.GetAndClearCurrentRecoil // (Final|Native|Public|HasDefaults) // @ game+0x29def20
	void Fire(bool hipfire, bool Primary); // Function Solarland.WeaponRecoilComponent.Fire // (Final|Native|Public|BlueprintCallable) // @ game+0x29dee50
};

// Class Solarland.PlayerWeaponRecoilComponent
// Size: 0x238 (Inherited: 0x228)
struct UPlayerWeaponRecoilComponent : UWeaponRecoilComponent {
	char pad_228[0x8]; // 0x228(0x08)
	enum class ECharacterStateForWeapon CurrentCharacterState; // 0x230(0x01)
	enum class EPosture CurrentPostureType; // 0x231(0x01)
	char pad_232[0x6]; // 0x232(0x06)
};

// Class Solarland.PostLoadEffectUIData
// Size: 0x30 (Inherited: 0x28)
struct UPostLoadEffectUIData : UGameplayEffectUIData {
	bool bPostLoaded; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)

	void ReceivePostLoadUIData(struct FGameplayEffectSpec& OwnerSpec); // Function Solarland.PostLoadEffectUIData.ReceivePostLoadUIData // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.PreviewActor
// Size: 0x540 (Inherited: 0x228)
struct APreviewActor : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct FTransform DefaultSpawnTransform; // 0x230(0x30)
	struct FTransform ShowTransformRight; // 0x260(0x30)
	struct FTransform ShowTransformBattlePassRight; // 0x290(0x30)
	struct FTransform ShowTransformLuckDraw; // 0x2c0(0x30)
	struct FTransform ShowTransformCarouselDraw; // 0x2f0(0x30)
	struct FTransform ShowTransformGetReward; // 0x320(0x30)
	struct FTransform ShowTransformGrowTask; // 0x350(0x30)
	struct FTransform ShowTransformSupplyBoxRaffle; // 0x380(0x30)
	struct FTransform ShowTransformSupplyBoxLobby; // 0x3b0(0x30)
	struct FTransform ShowTransformCharacterWarehouse; // 0x3e0(0x30)
	struct TSoftObjectPtr<UCurveVector> DissolveCurvePath; // 0x410(0x28)
	struct TSoftObjectPtr<UMaterialInterface> DissolveMatPath; // 0x438(0x28)
	struct TSoftObjectPtr<UCurveVector> FresnelCurvePath; // 0x460(0x28)
	struct TSoftObjectPtr<UMaterialInterface> FresnelMatPath; // 0x488(0x28)
	struct TSoftObjectPtr<UParticleSystem> SwitchParticleEffectPath; // 0x4b0(0x28)
	char pad_4D8[0x8]; // 0x4d8(0x08)
	bool bPlaySwitchEffect; // 0x4e0(0x01)
	char pad_4E1[0x3]; // 0x4e1(0x03)
	float SwitchEffectInterval; // 0x4e4(0x04)
	float SelfDelayShowSeconds; // 0x4e8(0x04)
	char pad_4EC[0x4]; // 0x4ec(0x04)
	struct FBackpackAnimInfo BackpackAnimInfo; // 0x4f0(0x0c)
	char pad_4FC[0x44]; // 0x4fc(0x44)

	void UpdatePreviewActorConfig(struct FVector DefaultLoc); // Function Solarland.PreviewActor.UpdatePreviewActorConfig // (Final|Native|Public|HasDefaults) // @ game+0x2704620
	void TransformToMirror(enum class EItemType ItemType, struct FTransform OriginalTransform); // Function Solarland.PreviewActor.TransformToMirror // (Final|Native|Public|HasDefaults) // @ game+0x27044e0
	void TransformCapsuleToMirror(struct FTransform OriginalTransform); // Function Solarland.PreviewActor.TransformCapsuleToMirror // (Final|Native|Public|HasDefaults) // @ game+0x27043f0
	void TransformBackpackToMirror(struct FTransform OriginalTransform); // Function Solarland.PreviewActor.TransformBackpackToMirror // (Final|Native|Public|HasDefaults) // @ game+0x2704300
	void StartPlaySwitchEffect(); // Function Solarland.PreviewActor.StartPlaySwitchEffect // (Final|Native|Public) // @ game+0x27042e0
	void StartPlayFresnelEffect(); // Function Solarland.PreviewActor.StartPlayFresnelEffect // (Final|Native|Public) // @ game+0x27042c0
	void StartPlayDissovleEffect(); // Function Solarland.PreviewActor.StartPlayDissovleEffect // (Final|Native|Public) // @ game+0x27042a0
	void ShowAnimLuaCall(); // Function Solarland.PreviewActor.ShowAnimLuaCall // (Final|Native|Public) // @ game+0x2704280
	void ShowAnim(); // Function Solarland.PreviewActor.ShowAnim // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ShowActorWithTrans(struct FTransform& InOffset); // Function Solarland.PreviewActor.ShowActorWithTrans // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x27041a0
	void ShowActor(); // Function Solarland.PreviewActor.ShowActor // (Final|Native|Public) // @ game+0x2704180
	void SetSwitchEffectCompProperties(struct UMeshComponent* EffectComp, struct UMeshComponent* DefaultComp, struct FSwitchEffectInfo& EffectInfo, struct UMaterialInterface* EffectMat); // Function Solarland.PreviewActor.SetSwitchEffectCompProperties // (Final|Native|Public|HasOutParms) // @ game+0x2704000
	void SetSwitchEffectComp(struct TArray<struct UActorComponent*> DefaultComps, struct UMaterialInterface* EffectMat, struct TArray<struct FSwitchEffectInfo>& EffectInfos); // Function Solarland.PreviewActor.SetSwitchEffectComp // (Final|Native|Public|HasOutParms) // @ game+0x2703e50
	void PlayAnimInfo(struct FVertexAnimInfo& InAnimInfo); // Function Solarland.PreviewActor.PlayAnimInfo // (Final|Native|Public|HasOutParms) // @ game+0x2703a30
	void PlayAnim(int32_t InStartFrame, int32_t InEndFrame, float InLength, bool InLoop); // Function Solarland.PreviewActor.PlayAnim // (Final|Native|Public) // @ game+0x27038d0
	void HideActor(); // Function Solarland.PreviewActor.HideActor // (Final|Native|Public) // @ game+0x27028d0
	void DetachFX(struct AActor* FXActor); // Function Solarland.PreviewActor.DetachFX // (Final|Native|Public) // @ game+0x27027e0
	void CreateStaticOrnaments(struct USkeletalMeshComponent* SkeletalMesh, struct TMap<struct FGameplayTag, struct FStaticMeshOrnamentConfig>& OrnamentsConfig); // Function Solarland.PreviewActor.CreateStaticOrnaments // (Final|Native|Public|HasOutParms) // @ game+0x2702680
	void CreateSkeletalOrnaments(struct USkeletalMeshComponent* SkeletalMesh, struct TMap<struct FGameplayTag, struct FSkeletalMeshOrnamentConfig>& OrnamentsConfig); // Function Solarland.PreviewActor.CreateSkeletalOrnaments // (Final|Native|Public|HasOutParms) // @ game+0x2702520
	void CreateOrnaments(struct USkeletalMeshComponent* SkeletalMesh, struct UCharacterSkinConfig* SkinConfig); // Function Solarland.PreviewActor.CreateOrnaments // (Final|Native|Public) // @ game+0x2702450
	void CreateChildActorOrnaments(struct USkeletalMeshComponent* SkeletalMesh, struct TMap<struct FGameplayTag, struct FChildActorOrnamentConfig>& OrnamentsConfig); // Function Solarland.PreviewActor.CreateChildActorOrnaments // (Final|Native|Public|HasOutParms) // @ game+0x27022f0
	struct AActor* AttachFX(struct FString FXBPPath, struct FString SokectName, bool AutoActivate); // Function Solarland.PreviewActor.AttachFX // (Final|Native|Public) // @ game+0x2702160
};

// Class Solarland.PreviewHomeActor
// Size: 0x550 (Inherited: 0x540)
struct APreviewHomeActor : APreviewActor {
	struct USolarHomeActorManager* HomeActorMgr; // 0x540(0x08)
	struct UStaticMeshComponent* StaticMeshComp; // 0x548(0x08)

	void SetMaterial(int32_t InItemID); // Function Solarland.PreviewHomeActor.SetMaterial // (Final|Native|Public) // @ game+0x2703dc0
	struct UDataTable* GetTextureDataTable(); // Function Solarland.PreviewHomeActor.GetTextureDataTable // (Final|Native|Private) // @ game+0x27028a0
	struct USolarHomeShaderConfig* GetShaderConfig(); // Function Solarland.PreviewHomeActor.GetShaderConfig // (Final|Native|Public) // @ game+0x2702870
};

// Class Solarland.QuickChatUnit
// Size: 0x290 (Inherited: 0x260)
struct UQuickChatUnit : UUserWidget {
	struct UButton* BtnUnit; // 0x260(0x08)
	struct USolarTextBlock* TxtChat; // 0x268(0x08)
	char pad_270[0x20]; // 0x270(0x20)

	void SendChatMessage(); // Function Solarland.QuickChatUnit.SendChatMessage // (Final|Native|Protected) // @ game+0x2703da0
	void OnChatMessageReleased(); // Function Solarland.QuickChatUnit.OnChatMessageReleased // (Final|Native|Protected) // @ game+0x2702b80
	void OnChatMessagePressed(); // Function Solarland.QuickChatUnit.OnChatMessagePressed // (Final|Native|Protected) // @ game+0x2702b60
};

// Class Solarland.QuickVoice
// Size: 0x4c8 (Inherited: 0x400)
struct UQuickVoice : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct UCanvasPanel* CanvasPanel_61; // 0x410(0x08)
	struct USolarCheckBox* Cancel; // 0x418(0x08)
	struct USolarCheckBox* GetIn; // 0x420(0x08)
	struct USolarCheckBox* Rescue; // 0x428(0x08)
	struct USolarCheckBox* FollowMe; // 0x430(0x08)
	struct USolarCheckBox* Weapon; // 0x438(0x08)
	struct USolarCheckBox* Vehicle; // 0x440(0x08)
	struct USolarCheckBox* Attack; // 0x448(0x08)
	struct USolarCheckBox* Defend; // 0x450(0x08)
	struct USolarCheckBox* Someone; // 0x458(0x08)
	struct UOverlay* Overlay_Point; // 0x460(0x08)
	struct USolarTextBlock* Txt_Content; // 0x468(0x08)
	struct UImage* Img_Arrow_1; // 0x470(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x478(0x08)
	struct UWidgetAnimation* Exit_Enter; // 0x480(0x08)
	float PointMoveRange; // 0x488(0x04)
	float PointMoveSensitivity; // 0x48c(0x04)
	float CancelSelectRadius; // 0x490(0x04)
	char pad_494[0x4]; // 0x494(0x04)
	struct TArray<struct USolarCheckBox*> AllCheckBoxs; // 0x498(0x10)
	char pad_4A8[0x20]; // 0x4a8(0x20)

	void ReceiveMarkButtonTouchMovedByGamepad(float DegreeToCenter, struct FVector2D TouchLocalPos); // Function Solarland.QuickVoice.ReceiveMarkButtonTouchMovedByGamepad // (Final|Native|Private|HasDefaults) // @ game+0x2703ce0
	void ReceiveMarkButtonTouchMoved(float DegreeToCenter, struct FVector2D TouchLocalPos); // Function Solarland.QuickVoice.ReceiveMarkButtonTouchMoved // (Final|Native|Private|HasDefaults) // @ game+0x2703c20
	void ReceiveMarkButtonHoverChanged(bool bIsHovered); // Function Solarland.QuickVoice.ReceiveMarkButtonHoverChanged // (Final|Native|Private) // @ game+0x2703b90
	void ReceiveMarkButtonDragSelectEnded(bool bPlayerDead); // Function Solarland.QuickVoice.ReceiveMarkButtonDragSelectEnded // (Final|Native|Private) // @ game+0x2703b00
	void ReceiveMarkButtonBeenLongPressed(); // Function Solarland.QuickVoice.ReceiveMarkButtonBeenLongPressed // (Final|Native|Private) // @ game+0x2703ae0
	void OnSelectedChanged(int32_t ChosenIndex); // Function Solarland.QuickVoice.OnSelectedChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnExitAnimFinished(); // Function Solarland.QuickVoice.OnExitAnimFinished // (Final|Native|Private) // @ game+0x2702cb0
	void OnCustomGameStateChanged(enum class ESCMInGameState NewGameState); // Function Solarland.QuickVoice.OnCustomGameStateChanged // (Final|Native|Private) // @ game+0x2702c30
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.QuickVoice.OnCharacterDead // (Final|Native|Private) // @ game+0x2702ad0
	void InitCheckBoxesArray(); // Function Solarland.QuickVoice.InitCheckBoxesArray // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ad6de0
	void DoSelectOption(int32_t ChosenIndex); // Function Solarland.QuickVoice.DoSelectOption // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void CloseQuickChatWheel(); // Function Solarland.QuickVoice.CloseQuickChatWheel // (Final|Native|Public) // @ game+0x27022d0
};

// Class Solarland.RadarEffectController
// Size: 0x30 (Inherited: 0x28)
struct URadarEffectController : UActorEffectController {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.RandomPackActorBase
// Size: 0x228 (Inherited: 0x228)
struct ARandomPackActorBase : AActor {

	void InitAnimationPosition(struct USkeletalMeshComponent* Mesh); // Function Solarland.RandomPackActorBase.InitAnimationPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x27028f0
};

// Class Solarland.ReCombatManager
// Size: 0x240 (Inherited: 0x228)
struct AReCombatManager : AGameManagerBase {
	char pad_228[0x8]; // 0x228(0x08)
	int32_t WaitEnemyTime; // 0x230(0x04)
	int32_t WaitCancelTime; // 0x234(0x04)
	int32_t WaitCloseTime; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
};

// Class Solarland.RoleSkillWidget
// Size: 0x6e8 (Inherited: 0x400)
struct URoleSkillWidget : USolarUserWidget {
	struct UImage* icon_Skill; // 0x400(0x08)
	struct USolarTextBlock* Txt_SkillType; // 0x408(0x08)
	struct UImage* Img_SkillType_Bg; // 0x410(0x08)
	struct UImage* Img_Skill; // 0x418(0x08)
	struct USolarImage* img_Bg_Border; // 0x420(0x08)
	struct USolarImage* Img_Bg_2; // 0x428(0x08)
	struct UImage* img_SkillBg; // 0x430(0x08)
	struct UImage* Img_Loop; // 0x438(0x08)
	struct USizeBox* Img_Loop_Box; // 0x440(0x08)
	struct UCanvasPanel* AnimPanel; // 0x448(0x08)
	struct UWidgetAnimation* Loop_Anim; // 0x450(0x08)
	struct UWidgetAnimation* LevelUp_Anim; // 0x458(0x08)
	struct UCanvasPanel* Panel_ReduceCD; // 0x460(0x08)
	struct USolarTextBlock* Txt_Progress; // 0x468(0x08)
	struct UProgressBar* Progress_CD; // 0x470(0x08)
	struct UGaugeImage* Progress_CD_Gauge; // 0x478(0x08)
	struct UWidgetAnimation* Refresh_Anim; // 0x480(0x08)
	struct UWidgetAnimation* Reduce_Anim; // 0x488(0x08)
	struct UImage* img_Forbid; // 0x490(0x08)
	struct UCanvasPanel* Panel_WaitTriggerAgain; // 0x498(0x08)
	struct UWidgetAnimation* WaitTriggerAgain_Loop_Anim; // 0x4a0(0x08)
	struct UImage* Progress_WaitTriggerAgain; // 0x4a8(0x08)
	struct UGaugeImage* Progress_WaitTriggerAgain_Gauge; // 0x4b0(0x08)
	struct UImage* Img_Loop_New; // 0x4b8(0x08)
	struct UImage* Img_Skill_WaitTriggerAgain; // 0x4c0(0x08)
	struct UImage* img_BtnBg; // 0x4c8(0x08)
	struct UButton* BtnCancel; // 0x4d0(0x08)
	struct USolarMovablePad* RoleSkillPad; // 0x4d8(0x08)
	struct UWidget* PanelKeyMapping; // 0x4e0(0x08)
	float PadPaddingOnPress; // 0x4e8(0x04)
	char pad_4EC[0x8]; // 0x4ec(0x08)
	enum class ERoleWidgetType RoleWidgetType; // 0x4f4(0x01)
	char pad_4F5[0x3]; // 0x4f5(0x03)
	float UpdateCDInterval; // 0x4f8(0x04)
	float UpdateCanTriggerAgainInterval; // 0x4fc(0x04)
	struct TMap<enum class ERoleWidgetStatus, struct FLinearColor> ImgBorderColorMap; // 0x500(0x50)
	struct TMap<enum class ERoleWidgetStatus, struct FLinearColor> ImgSkillTypeBorderColorMap; // 0x550(0x50)
	struct TMap<enum class ERoleWidgetStatus, struct FLinearColor> IconColorMap; // 0x5a0(0x50)
	struct TMap<enum class ERoleWidgetStatus, struct FLinearColor> ImgBGColorMap; // 0x5f0(0x50)
	struct TMap<enum class ERoleWidgetStatus, float> TacticalIconCapacityMap; // 0x640(0x50)
	struct TArray<struct FLinearColor> QualityColorBase; // 0x690(0x10)
	struct TArray<struct FLinearColor> QualityColorDecorate; // 0x6a0(0x10)
	bool bInCD; // 0x6b0(0x01)
	char pad_6B1[0x37]; // 0x6b1(0x37)

	void UpdateReduceCDWidgetColor(int32_t QualityIndex); // Function Solarland.RoleSkillWidget.UpdateReduceCDWidgetColor // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateWidgetStatus(int32_t Quality, enum class ERoleWidgetStatus status); // Function Solarland.RoleSkillWidget.OnUpdateWidgetStatus // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnSuperScaningWidgetShow(bool bShow); // Function Solarland.RoleSkillWidget.OnSuperScaningWidgetShow // (Final|Native|Protected) // @ game+0x26446a0
	void OnRoleAbilityStateChange(int32_t AbilityIndex, int32_t State); // Function Solarland.RoleSkillWidget.OnRoleAbilityStateChange // (Final|Native|Protected) // @ game+0x2703800
	void OnRoleAbilityStartCDServerTimeUpdate(int32_t AbilityIndex, float InServerTime); // Function Solarland.RoleSkillWidget.OnRoleAbilityStartCDServerTimeUpdate // (Final|Native|Protected) // @ game+0x2703730
	void OnRoleAbilityStartCD(int32_t AbilityIndex, float InStartCDServerTime, float StartCDTimeForReplay); // Function Solarland.RoleSkillWidget.OnRoleAbilityStartCD // (Final|Native|Protected) // @ game+0x2703620
	void OnRoleAbilityInputAction(int32_t AbilityIndex, bool bPress, bool bCanActive); // Function Solarland.RoleSkillWidget.OnRoleAbilityInputAction // (Final|Native|Protected) // @ game+0x2703510
	void OnRoleAbilityEndCD(int32_t AbilityIndex); // Function Solarland.RoleSkillWidget.OnRoleAbilityEndCD // (Final|Native|Protected) // @ game+0x2703480
	void OnRoleAbilityEnd(int32_t AbilityIndex); // Function Solarland.RoleSkillWidget.OnRoleAbilityEnd // (Final|Native|Protected) // @ game+0x27033f0
	void OnRoleAbilityChange(int32_t AbilityIndex, bool bHaveRoleAbility, int32_t CharacterId, int32_t PlayerLevel); // Function Solarland.RoleSkillWidget.OnRoleAbilityChange // (Final|Native|Protected) // @ game+0x27032a0
	void OnRoleAbilityCDDurationChange(int32_t AbilityIndex, int32_t Duration, bool bDurationReduced); // Function Solarland.RoleSkillWidget.OnRoleAbilityCDDurationChange // (Final|Native|Protected) // @ game+0x2703030
	void OnRoleAbilityCanTriggerAgain(int32_t AbilityIndex, bool bCanTriggerAgain, float LeftTime, float Duration); // Function Solarland.RoleSkillWidget.OnRoleAbilityCanTriggerAgain // (Final|Native|Protected) // @ game+0x2703140
	void OnPadRelease(struct FGeometry& InGeometry, struct FPointerEvent& Event); // Function Solarland.RoleSkillWidget.OnPadRelease // (Final|Native|Protected|HasOutParms) // @ game+0x2702e90
	void OnPadPress(struct FGeometry& InGeometry, struct FPointerEvent& Event); // Function Solarland.RoleSkillWidget.OnPadPress // (Final|Native|Protected|HasOutParms) // @ game+0x2702cf0
	void OnExitSpectateMode(); // Function Solarland.RoleSkillWidget.OnExitSpectateMode // (Final|Native|Protected) // @ game+0x2702cd0
	void OnEntertSpectateMode(); // Function Solarland.RoleSkillWidget.OnEntertSpectateMode // (Final|Native|Protected) // @ game+0x9043b0
	void OnControllerCharacterSet(struct ASolarCharacter* ControlledCharacter); // Function Solarland.RoleSkillWidget.OnControllerCharacterSet // (Final|Native|Protected) // @ game+0x2702ba0
	void OnChangeDriveState(enum class EDriveState InDriveState); // Function Solarland.RoleSkillWidget.OnChangeDriveState // (Final|Native|Protected) // @ game+0x2702a50
	void OnCancelBtnRelease(); // Function Solarland.RoleSkillWidget.OnCancelBtnRelease // (Final|Native|Protected) // @ game+0x2702a30
	void OnCancelBtnPress(); // Function Solarland.RoleSkillWidget.OnCancelBtnPress // (Final|Native|Protected) // @ game+0x2702a10
	void OnBattleHUDVisibleChange(bool bVisible); // Function Solarland.RoleSkillWidget.OnBattleHUDVisibleChange // (Final|Native|Protected) // @ game+0x2702980
	void CancelAbility(); // Function Solarland.RoleSkillWidget.CancelAbility // (Final|Native|Protected) // @ game+0x27022b0
};

// Class Solarland.RotationBarMarkWidget
// Size: 0x2b0 (Inherited: 0x260)
struct URotationBarMarkWidget : UUserWidget {
	char pad_260[0x28]; // 0x260(0x28)
	struct FName FlagName; // 0x288(0x08)
	struct FName TextName; // 0x290(0x08)
	struct UImage* FlagImage; // 0x298(0x08)
	struct UTextBlock* TextBlock; // 0x2a0(0x08)
	struct TWeakObjectPtr<struct AActor> TargetActor; // 0x2a8(0x08)

	void SetupOrder(int32_t InOrderID); // Function Solarland.RotationBarMarkWidget.SetupOrder // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetUpdateState(bool ShouldUpdateLocation); // Function Solarland.RotationBarMarkWidget.SetUpdateState // (Final|Native|Public|BlueprintCallable) // @ game+0xbe4ae0
	void SetPosition(struct FVector2D InPosition); // Function Solarland.RotationBarMarkWidget.SetPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2708f10
	void SetFlagIcon(struct UPaperSprite* InSprite); // Function Solarland.RotationBarMarkWidget.SetFlagIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x2708e80
	void InitializeMark(struct AActor* InTargetActor, bool InMoveable); // Function Solarland.RotationBarMarkWidget.InitializeMark // (Final|Native|Public|BlueprintCallable) // @ game+0x2708610
	float GetAngle(); // Function Solarland.RotationBarMarkWidget.GetAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x2708460
};

// Class Solarland.RotationBarWidget
// Size: 0x4d8 (Inherited: 0x400)
struct URotationBarWidget : USolarUserWidget {
	struct TMap<char, struct URotationBarMarkWidget*> MarkList; // 0x400(0x50)
	struct TArray<struct URotationBarMarkWidget*> CustomMarkList; // 0x450(0x10)
	struct TArray<struct URotationBarMarkWidget*> BuildingFlagList; // 0x460(0x10)
	struct TArray<struct URotationBarMarkWidget*> ActorMarkList; // 0x470(0x10)
	struct URotationBarMarkWidget* MarkWidgetClass; // 0x480(0x08)
	struct FString MarkWidgetName; // 0x488(0x10)
	struct FString MarkAtlasType; // 0x498(0x10)
	struct FName PanelName; // 0x4a8(0x08)
	struct FName DirectionImage1Name; // 0x4b0(0x08)
	struct FName DirectionImage2Name; // 0x4b8(0x08)
	struct UCanvasPanel* DirectionPanel; // 0x4c0(0x08)
	struct UImage* DirectionImage1; // 0x4c8(0x08)
	struct UImage* DirectionImage2; // 0x4d0(0x08)

	void ShowMark(char InPosInTeam, struct FVector InPosition); // Function Solarland.RotationBarWidget.ShowMark // (Final|Native|Public|HasDefaults) // @ game+0x2709200
	struct TArray<struct URotationBarMarkWidget*> ShowActorMarkWithArray(struct TArray<struct AActor*> TargetActor); // Function Solarland.RotationBarWidget.ShowActorMarkWithArray // (Final|Native|Public|BlueprintCallable) // @ game+0x27090c0
	struct URotationBarMarkWidget* ShowActorMark(struct AActor* TargetActor); // Function Solarland.RotationBarWidget.ShowActorMark // (Final|Native|Public|BlueprintCallable) // @ game+0x2709020
	void OnRotationBarVisibilityChanged(bool bVisible); // Function Solarland.RotationBarWidget.OnRotationBarVisibilityChanged // (Final|Native|Public) // @ game+0x26fdaf0
	void InitBuildingFlag(); // Function Solarland.RotationBarWidget.InitBuildingFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x27085f0
	struct TArray<int32_t> GetLocationIconIDs(int32_t InMapID); // Function Solarland.RotationBarWidget.GetLocationIconIDs // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct FBuildingData GetBuildingData(int32_t InIconID); // Function Solarland.RotationBarWidget.GetBuildingData // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct URotationBarMarkWidget* CreateCustomMark(struct URotationBarMarkWidget* RotationBarMarkClass, struct FVector& InMarkPos, int32_t InZOrder); // Function Solarland.RotationBarWidget.CreateCustomMark // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2708340
	bool ContainMapID(int32_t InMapID); // Function Solarland.RotationBarWidget.ContainMapID // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void CleanMark(char InPosInTeam); // Function Solarland.RotationBarWidget.CleanMark // (Final|Native|Public) // @ game+0x27082c0
	void CleanCustomMark(struct URotationBarMarkWidget* InMarkWidget); // Function Solarland.RotationBarWidget.CleanCustomMark // (Final|Native|Public) // @ game+0x2708230
	void CleanActorMarkWithWidgetArray(struct TArray<struct URotationBarMarkWidget*> TargetMarkWidget); // Function Solarland.RotationBarWidget.CleanActorMarkWithWidgetArray // (Final|Native|Public|BlueprintCallable) // @ game+0x2708140
	void CleanActorMarkWithWidget(struct URotationBarMarkWidget* TargetMarkWidget); // Function Solarland.RotationBarWidget.CleanActorMarkWithWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x27080b0
	void CleanActorMarkWithActorArray(struct TArray<struct AActor*> TargetActor); // Function Solarland.RotationBarWidget.CleanActorMarkWithActorArray // (Final|Native|Public|BlueprintCallable) // @ game+0x2707fc0
	void CleanActorMarkWithActor(struct AActor* TargetActor); // Function Solarland.RotationBarWidget.CleanActorMarkWithActor // (Final|Native|Public|BlueprintCallable) // @ game+0x2707f30
};

// Class Solarland.SafeAreaProgressWidget
// Size: 0x4d8 (Inherited: 0x400)
struct USafeAreaProgressWidget : USolarUserWidget {
	struct UImage* Var_Avatar; // 0x400(0x08)
	struct UImage* Var_PoisonBar; // 0x408(0x08)
	struct UImage* Var_ImageWarnning; // 0x410(0x08)
	struct UTextBlock* Var_TextDistance; // 0x418(0x08)
	struct UTextBlock* Var_TextTime; // 0x420(0x08)
	struct UPanelWidget* Var_TimePanel; // 0x428(0x08)
	char pad_430[0x8]; // 0x430(0x08)
	struct TSoftObjectPtr<UPaperSprite> Warning01; // 0x438(0x28)
	struct TSoftObjectPtr<UPaperSprite> Warning02; // 0x460(0x28)
	char pad_488[0x50]; // 0x488(0x50)
};

// Class Solarland.SolarGameModeAIComponent
// Size: 0x198 (Inherited: 0xd0)
struct USolarGameModeAIComponent : UGameModeCompBase {
	struct ASolarBotAIController* BotAIControllerClass; // 0xd0(0x08)
	struct ASolarAIControllerBase* OfflinePlayerAIControllerClass; // 0xd8(0x08)
	struct ASolarGameMode* GameModeOwner; // 0xe0(0x08)
	bool bEnableIrisAIStrategy; // 0xe8(0x01)
	bool bEnableMLSetting; // 0xe9(0x01)
	bool bPreserveBotOnMatchStart; // 0xea(0x01)
	bool bUseCtrlIndexAsBotName; // 0xeb(0x01)
	char pad_EC[0x4]; // 0xec(0x04)
	struct USolarBotAITeamManager* BotTeamManagerClass; // 0xf0(0x08)
	struct USolarPreservedBotManager* BotPreservedManagerClass; // 0xf8(0x08)
	int32_t MaxNumPreservedBots; // 0x100(0x04)
	float MaxRatioPreservedBots; // 0x104(0x04)
	struct USolarBotAITeamManager* BotTeamManager; // 0x108(0x08)
	struct USolarPreservedBotManager* BotPreservedManager; // 0x110(0x08)
	bool bInitBotByTeamPreset; // 0x118(0x01)
	bool bCanBotTeamRebirth; // 0x119(0x01)
	bool bCanPlayerTeamRebirth; // 0x11a(0x01)
	bool bCanBotTeamBuyRescue; // 0x11b(0x01)
	bool bCanPlayerTeamBuyRescue; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)
	struct TArray<struct ASolarFuncBotController*> FunctionalBots; // 0x120(0x10)
	struct TMap<enum class ESolarBotWarmSystemType, struct USolarBotWarmSystemBase*> WarmSystemClassConfig; // 0x130(0x50)
	struct USolarBotWarmSystemBase* BotWarmSystem; // 0x180(0x08)
	bool bEnableBehaviorMonitor; // 0x188(0x01)
	bool bOnlyRecordPlayerCombat; // 0x189(0x01)
	char pad_18A[0x6]; // 0x18a(0x06)
	struct USolarBotBehaviorMonitor* BehaviorMonitor; // 0x190(0x08)

	struct ASolarFuncBotController* SpawnFunctionalBot(struct FSolarFuncBotSpawnParam& SpawnParam); // Function Solarland.SolarGameModeAIComponent.SpawnFunctionalBot // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27c9040
	void OnBattleStarted(); // Function Solarland.SolarGameModeAIComponent.OnBattleStarted // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ad6d40
	void OnBattleOver(); // Function Solarland.SolarGameModeAIComponent.OnBattleOver // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ad6f40
	void OnAllBotSpawnFinished(); // Function Solarland.SolarGameModeAIComponent.OnAllBotSpawnFinished // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ad7080
	void OnAcquiredIrisAIFeedStrategy(struct TArray<struct FFeedBotStrategyInfo>& StrategyInfos); // Function Solarland.SolarGameModeAIComponent.OnAcquiredIrisAIFeedStrategy // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void GetDeathBoxExtraStuff(struct ASolarPlayerState* BotState, struct ASolarPlayerState* PlayerState, struct TMap<int32_t, int32_t>& Stuff); // Function Solarland.SolarGameModeAIComponent.GetDeathBoxExtraStuff // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x27c7f70
	enum class ESolarBotWarmSystemType GetCurrentWarmSystemType(); // Function Solarland.SolarGameModeAIComponent.GetCurrentWarmSystemType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c7f40
	struct USolarGameModeAIComponent* Get(struct UObject* Context); // Function Solarland.SolarGameModeAIComponent.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27c7eb0
};

// Class Solarland.SBattleRoyaleGameModeAIComp
// Size: 0x1b8 (Inherited: 0x198)
struct USBattleRoyaleGameModeAIComp : USolarGameModeAIComponent {
	bool bBotSkipAICruise; // 0x198(0x01)
	char pad_199[0x3]; // 0x199(0x03)
	float MaxLootDistanceToAirline; // 0x19c(0x04)
	bool bCanSelectLootZoneOutPoisonCircle; // 0x1a0(0x01)
	char pad_1A1[0x17]; // 0x1a1(0x17)
};

// Class Solarland.SCBattleRoyaleGameMode
// Size: 0x790 (Inherited: 0x790)
struct ASCBattleRoyaleGameMode : ASCustomGameMode {
};

// Class Solarland.SCBountyGameMode
// Size: 0x790 (Inherited: 0x790)
struct ASCBountyGameMode : ASCustomGameMode {
};

// Class Solarland.SolarCharacterBase
// Size: 0x5e0 (Inherited: 0x4d0)
struct ASolarCharacterBase : ACharacter {
	char pad_4D0[0x28]; // 0x4d0(0x28)
	struct FSpawnedActorHandle CachedActorHandle; // 0x4f8(0x04)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct USolarAbilityComponent* SolarAbilityComponent; // 0x500(0x08)
	struct FInWaterActorInfo InWaterActorInfo; // 0x508(0x08)
	struct ASolarCharacterBase* InstigatorCharacter; // 0x510(0x08)
	struct TSoftObjectPtr<UParticleSystem> DeathEffectSoft; // 0x518(0x28)
	char pad_540[0x34]; // 0x540(0x34)
	float VehicleCollisionProtectionTimeOnJumpingOff; // 0x574(0x04)
	float PushYScale; // 0x578(0x04)
	float PushXScaleOnSwimming; // 0x57c(0x04)
	float PushYScaleOnSwimming; // 0x580(0x04)
	float PushZScaleOnSwimming; // 0x584(0x04)
	struct USolarAbilitySystemComponent* SolarAbilitySystemComponent; // 0x588(0x08)
	char pad_590[0x24]; // 0x590(0x24)
	bool bHoldSignificanceWhenDyingForAutonomous; // 0x5b4(0x01)
	char pad_5B5[0x3]; // 0x5b5(0x03)
	struct UAkComponent* AkAudioComponent; // 0x5b8(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x5c0(0x08)
	struct UCharacterSoundConfig* CharacterSoundConfig; // 0x5c8(0x08)
	char pad_5D0[0x10]; // 0x5d0(0x10)

	void SetAttributeWithGAS(struct FGameplayAttribute InAttribute, enum class EGameplayModOp ModifyType, float InValue); // Function Solarland.SolarCharacterBase.SetAttributeWithGAS // (Native|Public|BlueprintCallable) // @ game+0x2791480
	void ResetAudioComponentTransform(); // Function Solarland.SolarCharacterBase.ResetAudioComponentTransform // (Final|Native|Public) // @ game+0x2791460
	void PostAkEventByName(struct FString EventName1, struct FString EventName2); // Function Solarland.SolarCharacterBase.PostAkEventByName // (Final|Native|Public|BlueprintCallable) // @ game+0x2791360
	void OnRep_InWaterActorInfo(struct FInWaterActorInfo& OldInfo); // Function Solarland.SolarCharacterBase.OnRep_InWaterActorInfo // (Final|Native|Public|HasOutParms) // @ game+0x27912c0
	bool K2_IsInWater(); // Function Solarland.SolarCharacterBase.K2_IsInWater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27910c0
	bool K2_IsAlive(); // Function Solarland.SolarCharacterBase.K2_IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27911f0
	bool IsPlayerLocallyControlled(); // Function Solarland.SolarCharacterBase.IsPlayerLocallyControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27910f0
	bool IsInWater(); // Function Solarland.SolarCharacterBase.IsInWater // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27910c0
	bool IsInSight(struct FVector& InTargetPos, float InMaxAngle, bool bHorizontalOnly); // Function Solarland.SolarCharacterBase.IsInSight // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2790f90
	bool IsInRoom(); // Function Solarland.SolarCharacterBase.IsInRoom // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2790f60
	bool IsBlocked(struct AActor* InOtherActor); // Function Solarland.SolarCharacterBase.IsBlocked // (Final|Native|Public) // @ game+0x2790ec0
	bool InSameTeamWithFirstPlayerController(); // Function Solarland.SolarCharacterBase.InSameTeamWithFirstPlayerController // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2790dc0
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarCharacterBase.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x2790df0
	struct FString GetSoundEventString(enum class ECharacterSoundOpt SoundOpt); // Function Solarland.SolarCharacterBase.GetSoundEventString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2790c70
	struct USolarAkGameObject* GetSolarAkGameObject(); // Function Solarland.SolarCharacterBase.GetSolarAkGameObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2790c10
	struct USolarAbilitySystemComponent* GetSafeASC(); // Function Solarland.SolarCharacterBase.GetSafeASC // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782170
	float GetMaxHealth(); // Function Solarland.SolarCharacterBase.GetMaxHealth // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2790bd0
	float GetLockHealth(); // Function Solarland.SolarCharacterBase.GetLockHealth // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2790b90
	float GetCurrentHealth(); // Function Solarland.SolarCharacterBase.GetCurrentHealth // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2790b20
	enum class ESolarCharacterType GetCharacterType(); // Function Solarland.SolarCharacterBase.GetCharacterType // (Native|Public|Const) // @ game+0x2790af0
	struct FVector GetCharacterLocation(bool bMiddle); // Function Solarland.SolarCharacterBase.GetCharacterLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2790a40
	struct FVector GetCharacterDirection(); // Function Solarland.SolarCharacterBase.GetCharacterDirection // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2790a00
	struct USolarBackpackComponent* GetBackpack(); // Function Solarland.SolarCharacterBase.GetBackpack // (Native|Public|Const) // @ game+0x27909d0
	void ClientOnPushedByVehicle(); // Function Solarland.SolarCharacterBase.ClientOnPushedByVehicle // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1ae5c70
	bool CheckOpenParticleOptimization(int32_t Bias); // Function Solarland.SolarCharacterBase.CheckOpenParticleOptimization // (Final|Native|Public|BlueprintCallable) // @ game+0x2790930
	void ChangeCurrentHealthWithGAS(enum class EGameplayModOp ModifyType, float InValue); // Function Solarland.SolarCharacterBase.ChangeCurrentHealthWithGAS // (Native|Public|BlueprintCallable) // @ game+0x2790860
};

// Class Solarland.SolarCharacter
// Size: 0x22e0 (Inherited: 0x5e0)
struct ASolarCharacter : ASolarCharacterBase {
	char pad_5E0[0x60]; // 0x5e0(0x60)
	struct FMulticastInlineDelegate OnCharacterAllReadyDelegate; // 0x640(0x10)
	char pad_650[0x28]; // 0x650(0x28)
	struct FMulticastInlineDelegate PendingBeginPlay; // 0x678(0x10)
	char pad_688[0x18]; // 0x688(0x18)
	struct FMulticastInlineDelegate OnPlayerStatePossessDelegate; // 0x6a0(0x10)
	struct FMulticastInlineDelegate OnPlayerStateRepDelegate; // 0x6b0(0x10)
	enum class ESolarCharacterType SolarCharacterType; // 0x6c0(0x01)
	char pad_6C1[0x3]; // 0x6c1(0x03)
	struct FVector2D CharacterCapsuleSizeOverride; // 0x6c4(0x08)
	char pad_6CC[0x1]; // 0x6cc(0x01)
	bool bInRoom; // 0x6cd(0x01)
	char pad_6CE[0x2d]; // 0x6ce(0x2d)
	struct FReconnectionParams ReconnectionParams; // 0x6fb(0x01)
	char pad_6FC[0x24]; // 0x6fc(0x24)
	struct USolarAnimInstance* SolarAnimInstance; // 0x720(0x08)
	struct TMap<enum class ESpecAnimInstType, struct UAnimInstance*> SolarAnimInstances; // 0x728(0x50)
	char pad_778[0x18]; // 0x778(0x18)
	struct FHitSoundReplicationData HitSoundData; // 0x790(0x80)
	struct TArray<struct ASolarPile*> ChargingPileQueue; // 0x810(0x10)
	char pad_820[0x28]; // 0x820(0x28)
	struct FMulticastInlineDelegate OnCharacterIDSet; // 0x848(0x10)
	struct FMulticastInlineDelegate OnSkinIDSet; // 0x858(0x10)
	struct FMulticastInlineDelegate OnCharacterSkinReset; // 0x868(0x10)
	enum class ECharacterBodyScaleType BodyScaleType; // 0x878(0x01)
	char pad_879[0x3]; // 0x879(0x03)
	int32_t AssignedCharacterID; // 0x87c(0x04)
	int32_t AssignedSkinID; // 0x880(0x04)
	char pad_884[0xc]; // 0x884(0x0c)
	struct TMap<struct FGameplayTag, struct USkeletalMeshComponent*> SkeletalOrnaments; // 0x890(0x50)
	struct TMap<struct FGameplayTag, struct UStaticMeshComponent*> StaticOrnaments; // 0x8e0(0x50)
	struct TMap<struct FGameplayTag, struct UChildActorComponent*> ChildActorOrnaments; // 0x930(0x50)
	struct TMap<struct FGameplayTag, struct FCharacterTagListenerForOrnamentComp> OrnamentCompVisibleTagDependencies; // 0x980(0x50)
	struct FOrnamentMontageInfo OrnamentMontageInfo; // 0x9d0(0x18)
	char pad_9E8[0x140]; // 0x9e8(0x140)
	struct USolarAttributeSubComponent* AttributeSubComp; // 0xb28(0x08)
	char pad_B30[0x60]; // 0xb30(0x60)
	struct ASolarBackpackActor* SolarBackpackActor; // 0xb90(0x08)
	struct USolarBackpackComponent* SolarBackpackComponent; // 0xb98(0x08)
	char pad_BA0[0x20]; // 0xba0(0x20)
	struct FMulticastInlineDelegate OnBackpackItemUpdate; // 0xbc0(0x10)
	struct FMulticastInlineDelegate OnBackpackEnergyUpdate; // 0xbd0(0x10)
	struct FMulticastInlineDelegate OnBackpackEquipUpdate; // 0xbe0(0x10)
	struct FMulticastInlineDelegate OnBatteryIdUpdate; // 0xbf0(0x10)
	struct FMulticastInlineDelegate OnEnergyStateUpdate; // 0xc00(0x10)
	struct FMulticastInlineDelegate OnChargeInfoUpdate; // 0xc10(0x10)
	struct FMulticastInlineDelegate OnConsumableNumUpdated; // 0xc20(0x10)
	struct FMulticastInlineDelegate OnMaxEnergyUpdate; // 0xc30(0x10)
	struct FMulticastInlineDelegate OnCurEnergyUpdate; // 0xc40(0x10)
	struct FMulticastInlineDelegate OnBackpackWeaponPartUpdate; // 0xc50(0x10)
	struct TMap<int32_t, int32_t> ShieldUpMatCostMap; // 0xc60(0x50)
	struct TMap<int32_t, int32_t> MaxPileMap; // 0xcb0(0x50)
	struct TArray<struct FReplicateMaxPileData> MaxPileArray; // 0xd00(0x10)
	struct TMap<int32_t, struct FSolarItemData> IdKeyItemMap; // 0xd10(0x50)
	struct TArray<struct FReplicateItemData> IdKeyItemArray; // 0xd60(0x10)
	struct TMap<enum class EItemType, struct FSolarItemData> TypeKeyItemMap; // 0xd70(0x50)
	struct TArray<struct FReplicateItemData> TypeKeyItemArray; // 0xdc0(0x10)
	struct TArray<struct FReplicateItemData> WeaponDataArray; // 0xdd0(0x10)
	struct TMap<int32_t, struct FSolarItemData> WeaponDataMap; // 0xde0(0x50)
	char pad_E30[0x50]; // 0xe30(0x50)
	struct TArray<int32_t> WeaponPartsArray; // 0xe80(0x10)
	struct FWeaponIgnoreScopeLists IgnoreScopeLists; // 0xe90(0x20)
	char EnergyState; // 0xeb0(0x01)
	char pad_EB1[0x3]; // 0xeb1(0x03)
	float MaxEnergyValue; // 0xeb4(0x04)
	float CurrEnergyValue; // 0xeb8(0x04)
	float MaxExtraEnergyValue; // 0xebc(0x04)
	float CurrExtraEnergyValue; // 0xec0(0x04)
	int32_t EnergyModuleID; // 0xec4(0x04)
	float AddedEnergyMax; // 0xec8(0x04)
	int32_t ExtraEnergyModuleID; // 0xecc(0x04)
	float AddedExtraEnergyMax; // 0xed0(0x04)
	int32_t VJetPackModuleID; // 0xed4(0x04)
	int32_t HJetPackModuleID; // 0xed8(0x04)
	char pad_EDC[0x1]; // 0xedc(0x01)
	bool bSettingEnergyCostEnabled; // 0xedd(0x01)
	char pad_EDE[0x2]; // 0xede(0x02)
	int32_t DayLightID; // 0xee0(0x04)
	float SolarChargeRatio; // 0xee4(0x04)
	bool bReviveItemCleared; // 0xee8(0x01)
	char pad_EE9[0x3]; // 0xee9(0x03)
	struct FBackpackJetPrepelInfo JetPropellingInfo; // 0xeec(0x0c)
	enum class EBackpackPropellingMode BackpackPropellingMode; // 0xef8(0x01)
	char pad_EF9[0x3]; // 0xef9(0x03)
	struct FVector2D InputVector; // 0xefc(0x08)
	char pad_F04[0xc]; // 0xf04(0x0c)
	struct USolarInputActionContext* InputActionContext; // 0xf10(0x08)
	enum class EIdleTurnType IdleTurnType; // 0xf18(0x01)
	char pad_F19[0x7]; // 0xf19(0x07)
	struct FRotator CharacterLookAt; // 0xf20(0x0c)
	char pad_F2C[0x24]; // 0xf2c(0x24)
	struct FCharacterOperationEvent CharacterOperationEvt; // 0xf50(0x10)
	char pad_F60[0x18]; // 0xf60(0x18)
	struct FMulticastInlineDelegate OnHealthUpdateDelegate; // 0xf78(0x10)
	float PendingRegeneration; // 0xf88(0x04)
	float DiedTime; // 0xf8c(0x04)
	char pad_F90[0x4]; // 0xf90(0x04)
	char bIsDeathVerge : 1; // 0xf94(0x01)
	char pad_F94_1 : 7; // 0xf94(0x01)
	char pad_F95[0x13]; // 0xf95(0x13)
	struct USolarHitTraceComponent* SolarHitTraceComponent; // 0xfa8(0x08)
	struct USolarTeamRescueComponent* SolarTeamRescueComponent; // 0xfb0(0x08)
	struct TWeakObjectPtr<struct ASolarCharacter> RescuingCharater; // 0xfb8(0x08)
	struct TWeakObjectPtr<struct ASolarUAVRescue> RescuingUAV; // 0xfc0(0x08)
	enum class ERescueState CurrentRescueState; // 0xfc8(0x01)
	enum class ERescueState LastRescueState; // 0xfc9(0x01)
	char pad_FCA[0x2e]; // 0xfca(0x2e)
	struct TWeakObjectPtr<struct ASolarCharacter> RescuedCharater; // 0xff8(0x08)
	float RescuedStartTime; // 0x1000(0x04)
	char pad_1004[0x4]; // 0x1004(0x04)
	struct UStaticMeshComponent* RescueInjector; // 0x1008(0x08)
	char pad_1010[0x24]; // 0x1010(0x24)
	float RescueTime; // 0x1034(0x04)
	char pad_1038[0x8]; // 0x1038(0x08)
	struct TArray<struct ASolarPlayerWeapon*> DeathBoxWeaponArray; // 0x1040(0x10)
	struct TArray<struct FSolarItemData> DeathBoxArray; // 0x1050(0x10)
	float DeathBoxEnergy; // 0x1060(0x04)
	char pad_1064[0x4]; // 0x1064(0x04)
	struct UParticleSystemComponent* SwimmingWaterEffect; // 0x1068(0x08)
	struct UParticleSystemComponent* HeavyJumpWaterEffect; // 0x1070(0x08)
	struct TArray<struct UParticleSystemComponent*> HorizontalFlyWaterEffects; // 0x1078(0x10)
	char pad_1088[0x10]; // 0x1088(0x10)
	struct USolarItemComponent* SolarItemComponent; // 0x1098(0x08)
	struct USolarPickupComponent* SolarPickupComponent; // 0x10a0(0x08)
	bool bIsElectricStoreOpened; // 0x10a8(0x01)
	char pad_10A9[0x7]; // 0x10a9(0x07)
	struct USolarTreatmentComponent* SolarTreatmentComponent; // 0x10b0(0x08)
	char pad_10B8[0x10]; // 0x10b8(0x10)
	enum class ESolarTreatmentState CurrentTreatState; // 0x10c8(0x01)
	char pad_10C9[0x3]; // 0x10c9(0x03)
	int32_t TreatmentCount; // 0x10cc(0x04)
	char pad_10D0[0x8]; // 0x10d0(0x08)
	struct FMulticastInlineDelegate OnShieldRecharge; // 0x10d8(0x10)
	struct FMulticastInlineDelegate OnShieldBreak; // 0x10e8(0x10)
	struct FMulticastInlineDelegate OnShowShieldHUD; // 0x10f8(0x10)
	struct FMulticastInlineDelegate OnShowShieldHUDItem; // 0x1108(0x10)
	struct FMulticastInlineDelegate OnShieldUpFX; // 0x1118(0x10)
	struct FMulticastInlineDelegate OnCurShieldValueChanged; // 0x1128(0x10)
	struct FMulticastInlineDelegate OnShieldIDChanged; // 0x1138(0x10)
	struct FMulticastInlineDelegate OnShieldValueLow; // 0x1148(0x10)
	struct FMulticastInlineDelegate OnShieldValueChanged; // 0x1158(0x10)
	char pad_1168[0x4]; // 0x1168(0x04)
	int32_t CurrShieldId; // 0x116c(0x04)
	int32_t CurUniqueShieldId; // 0x1170(0x04)
	float MaxShieldValue; // 0x1174(0x04)
	int32_t NextUpgradeShieldID; // 0x1178(0x04)
	int32_t NextUpgradeShieldEnergy; // 0x117c(0x04)
	float CurrShieldValue; // 0x1180(0x04)
	enum class EShieldState CurrShieldState; // 0x1184(0x01)
	char pad_1185[0x3]; // 0x1185(0x03)
	int32_t CurrShieldLevel; // 0x1188(0x04)
	char pad_118C[0x4]; // 0x118c(0x04)
	bool bHasPreAdd; // 0x1190(0x01)
	char pad_1191[0xa7]; // 0x1191(0xa7)
	struct UStaticMeshComponent* ShieldRepairOperator; // 0x1238(0x08)
	struct UStaticMesh* ShieldOperatorSM; // 0x1240(0x08)
	struct UStaticMesh* ShieldOperatorBigSM; // 0x1248(0x08)
	struct UParticleSystemComponent* ShieldRepairFX; // 0x1250(0x08)
	struct UParticleSystemComponent* ShieldMultiRecoverFX; // 0x1258(0x08)
	struct UParticleSystemComponent* ShieldUpgradeBodyFX; // 0x1260(0x08)
	struct UStaticMeshComponent* ShieldUpgradeOperator; // 0x1268(0x08)
	struct UStaticMesh* ShieldUpgradeOperatorSM; // 0x1270(0x08)
	struct FTimeline ShieldOperatorExpandTimeline; // 0x1278(0x98)
	struct FTimeline ShieldOperatorNarrowTimeline; // 0x1310(0x98)
	struct TMap<enum class EShieldSoundType, struct FShieldSoundData> ShieldSounds; // 0x13a8(0x50)
	char pad_13F8[0x10]; // 0x13f8(0x10)
	struct UStaticMeshComponent* TreasureBoxOperator; // 0x1408(0x08)
	char pad_1410[0x10]; // 0x1410(0x10)
	struct ADeathTreasureBox* CurChargingDeathBox; // 0x1420(0x08)
	struct TArray<struct ADeathTreasureBox*> DeathBoxes; // 0x1428(0x10)
	char pad_1438[0x8]; // 0x1438(0x08)
	struct FMulticastInlineDelegate OnLocalPlayerSpectateMeStatusChanged; // 0x1440(0x10)
	char pad_1450[0x30]; // 0x1450(0x30)
	struct FDelegate OnHUDNickNameSet; // 0x1480(0x10)
	struct FMulticastInlineDelegate OnHUDTeamPosSet; // 0x1490(0x10)
	struct FMulticastInlineDelegate OnHUDDistanceSet; // 0x14a0(0x10)
	struct FDelegate OnHUDDistanceDisplaySet; // 0x14b0(0x10)
	struct FDelegate OnHUDRescueBtnActivitySet; // 0x14c0(0x10)
	struct USolarTeammateHUDWidgetComponent* TeammateHUDComp; // 0x14d0(0x08)
	char pad_14D8[0x8]; // 0x14d8(0x08)
	float HUDZNomral; // 0x14e0(0x04)
	float HUDChangeTime; // 0x14e4(0x04)
	char pad_14E8[0x18]; // 0x14e8(0x18)
	struct USolarRadarComponent* SolarRadarComponent; // 0x1500(0x08)
	struct FRadarDataSpecContainer ActivatedRadars; // 0x1508(0x120)
	struct TWeakObjectPtr<struct ASolarRadarStation> TargetRadarStation; // 0x1628(0x08)
	struct TWeakObjectPtr<struct ASolarElectricShop> TargetElectricShop; // 0x1630(0x08)
	char pad_1638[0x10]; // 0x1638(0x10)
	struct FTimerHandle StatisticsTimerHandle; // 0x1648(0x08)
	char pad_1650[0x78]; // 0x1650(0x78)
	struct ASolarCharacter* CachedInstigatorCharacter; // 0x16c8(0x08)
	char pad_16D0[0xcc]; // 0x16d0(0xcc)
	float ArmorReduceValue; // 0x179c(0x04)
	float HeadHitValue; // 0x17a0(0x04)
	char pad_17A4[0x4]; // 0x17a4(0x04)
	struct FMulticastInlineDelegate OnTakeDamageDelegate; // 0x17a8(0x10)
	char pad_17B8[0x14]; // 0x17b8(0x14)
	int32_t InstigatorCharacterWeaponItemID; // 0x17cc(0x04)
	struct TArray<struct FCriticalHitInfo> CriticalHits; // 0x17d0(0x10)
	char pad_17E0[0x70]; // 0x17e0(0x70)
	struct UWorldMarkComponent* WorldMarkComponent; // 0x1850(0x08)
	struct UIMChatObject* IMChatObj; // 0x1858(0x08)
	int32_t AIActorCapacity; // 0x1860(0x04)
	char pad_1864[0xac]; // 0x1864(0xac)
	float StandJogSpeed; // 0x1910(0x04)
	float StandRunSpeed; // 0x1914(0x04)
	float StandSprintSpeed; // 0x1918(0x04)
	float CrouchJogSpeed; // 0x191c(0x04)
	float CrouchRunSpeed; // 0x1920(0x04)
	float CrouchSprintSpeed; // 0x1924(0x04)
	char pad_1928[0x8]; // 0x1928(0x08)
	struct FMulticastInlineDelegate OnJogSetClient; // 0x1930(0x10)
	bool bIsSprintingMove; // 0x1940(0x01)
	char pad_1941[0x57]; // 0x1941(0x57)
	struct USolarCharacterMovementComponent* CachedSolarCharacterMovement; // 0x1998(0x08)
	enum class EPhysicalSurface CurrentSteppedSurfaceType; // 0x19a0(0x01)
	char pad_19A1_0 : 1; // 0x19a1(0x01)
	char bIsJog : 1; // 0x19a1(0x01)
	char pad_19A1_2 : 6; // 0x19a1(0x01)
	char pad_19A2[0x2]; // 0x19a2(0x02)
	float MoveSpeedReduceBonusInHipFire; // 0x19a4(0x04)
	float MoveSpeedReduceBonusInAdsHipFire; // 0x19a8(0x04)
	char pad_19AC[0x10]; // 0x19ac(0x10)
	enum class ECustomJumpType CurrentCustomJumpType; // 0x19bc(0x01)
	char pad_19BD[0x3]; // 0x19bd(0x03)
	struct FMulticastInlineDelegate OnJetFlyStart; // 0x19c0(0x10)
	enum class EJetFlyType CurrentJetFlyType; // 0x19d0(0x01)
	char pad_19D1[0x3]; // 0x19d1(0x03)
	char bNewJetFlyCheckFlag : 1; // 0x19d4(0x01)
	char pad_19D4_1 : 7; // 0x19d4(0x01)
	char pad_19D5[0x4b]; // 0x19d5(0x4b)
	struct UAnimSequence* CruiseStartAnim; // 0x1a20(0x08)
	struct UAnimSequence* CruiseLoopAnim; // 0x1a28(0x08)
	struct UAnimSequence* CruiseEndAnim; // 0x1a30(0x08)
	float PrepareToParachuteStartTime; // 0x1a38(0x04)
	float PrepareToParachuteDuration; // 0x1a3c(0x04)
	struct FVector PrepareToParachuteLocation; // 0x1a40(0x0c)
	struct FVector AgreedParachuteLocation; // 0x1a4c(0x0c)
	char pad_1A58[0x18]; // 0x1a58(0x18)
	int32_t CapsuleID; // 0x1a70(0x04)
	char pad_1A74[0x1c]; // 0x1a74(0x1c)
	bool bEnableCruising; // 0x1a90(0x01)
	char pad_1A91[0x7]; // 0x1a91(0x07)
	struct ASolarCapsuleRoot* BoardedRoot; // 0x1a98(0x08)
	enum class ECruiseState CruiseState; // 0x1aa0(0x01)
	char pad_1AA1[0x3]; // 0x1aa1(0x03)
	int32_t ForceParachuteCountDown; // 0x1aa4(0x04)
	struct UCharacterCruiseComponent* CruiseComponentPrivate; // 0x1aa8(0x08)
	char pad_1AB0[0x20]; // 0x1ab0(0x20)
	struct FSingleCruiseBaseParam CurrentSingleCruiseParam; // 0x1ad0(0x20)
	char pad_1AF0[0x4]; // 0x1af0(0x04)
	enum class ESingleCruiseState SingleCruiseState; // 0x1af4(0x01)
	char pad_1AF5[0x3]; // 0x1af5(0x03)
	struct ASolarCapsuleActor* SingleCruiseCapsuleActor; // 0x1af8(0x08)
	struct ASingleCapsuleRootActor* SingleCruiseRootActor; // 0x1b00(0x08)
	struct FMulticastInlineDelegate OnSkydiveTraced; // 0x1b08(0x10)
	struct AExponentialHeightFog* HeightFogActor; // 0x1b18(0x08)
	struct TArray<struct UParticleSystemComponent*> SkydiveFlyingEffects; // 0x1b20(0x10)
	struct TArray<struct UParticleSystemComponent*> SkydiveLandingEffects; // 0x1b30(0x10)
	struct TArray<struct UParticleSystemComponent*> SkydiveWholeLifetimeEffects; // 0x1b40(0x10)
	enum class EBGMInBattle BGMInBattle; // 0x1b50(0x01)
	char pad_1B51[0x3]; // 0x1b51(0x03)
	struct FName SpecialSkydiveTypeName; // 0x1b54(0x08)
	enum class ESkydiveStage CurrentSkydiveStage; // 0x1b5c(0x01)
	char pad_1B5D[0x3]; // 0x1b5d(0x03)
	struct FMulticastInlineDelegate OnSkydivingStageChangedDelegate; // 0x1b60(0x10)
	char pad_1B70[0x20]; // 0x1b70(0x20)
	struct UActorComponent* FollowedLeaderMovementComponent; // 0x1b90(0x08)
	char pad_1B98[0x38]; // 0x1b98(0x38)
	struct UWeaponSystemPlayerBase* WeaponSystemComponent; // 0x1bd0(0x08)
	char pad_1BD8[0x8]; // 0x1bd8(0x08)
	struct FMulticastInlineDelegate OnCharacterFired; // 0x1be0(0x10)
	char pad_1BF0[0x18]; // 0x1bf0(0x18)
	struct USkeletalMeshComponent* FirstPersonMesh; // 0x1c08(0x08)
	char pad_1C10[0x10]; // 0x1c10(0x10)
	struct ASolarPlayerWeapon* TempSwitchWeapon; // 0x1c20(0x08)
	struct ASolarPlayerWeapon* CachedCurrentWeapon; // 0x1c28(0x08)
	char pad_1C30[0xc8]; // 0x1c30(0xc8)
	struct UWeaponSystemVehicleComponent* WeaponSystemVehicle; // 0x1cf8(0x08)
	char pad_1D00[0x18]; // 0x1d00(0x18)
	struct FBoardedVehicleInfo BoardedVehicleInfo; // 0x1d18(0x10)
	bool bOutVehicleShot; // 0x1d28(0x01)
	char pad_1D29[0xc7]; // 0x1d29(0xc7)
	struct UStaticMeshComponent* VehicleRepairToolMesh; // 0x1df0(0x08)
	char pad_1DF8[0x18]; // 0x1df8(0x18)
	struct FMulticastInlineDelegate OnCharacterActivateEMP; // 0x1e10(0x10)
	struct FMulticastInlineDelegate OnCharacterSwitchEMPEffect; // 0x1e20(0x10)
	bool bActiveEMP; // 0x1e30(0x01)
	bool bActiveInfiniteAmmo; // 0x1e31(0x01)
	bool bNoticedCantCharge; // 0x1e32(0x01)
	char pad_1E33[0x15]; // 0x1e33(0x15)
	enum class ESkillAnimType CurrentSkillAnimType; // 0x1e48(0x01)
	enum class ESkillAnimRightHandType CurrentSkillAnimRightHandType; // 0x1e49(0x01)
	char pad_1E4A[0x2]; // 0x1e4a(0x02)
	float SkillAnimDistanceBlendRatio; // 0x1e4c(0x04)
	char pad_1E50[0x18]; // 0x1e50(0x18)
	struct UScoutEnemyObject* ScoutEnemyObj; // 0x1e68(0x08)
	struct USolarCharacterBillboardIconComponent* BillboardIconComponent; // 0x1e70(0x08)
	int32_t DuckRollingJumpPoseIndex; // 0x1e78(0x04)
	bool bCanSkilledJump; // 0x1e7c(0x01)
	char pad_1E7D[0x3]; // 0x1e7d(0x03)
	struct UDuckRollingMeshComponent* CachedDuckRollingMeshComponent; // 0x1e80(0x08)
	char pad_1E88[0x78]; // 0x1e88(0x78)
	char WallRunSurfaceAngle; // 0x1f00(0x01)
	enum class EWallRunState WallRunState; // 0x1f01(0x01)
	char pad_1F02[0x2]; // 0x1f02(0x02)
	int32_t LeadDanceID; // 0x1f04(0x04)
	char pad_1F08[0xa0]; // 0x1f08(0xa0)
	struct FString DebugStringBotAIInfo; // 0x1fa8(0x10)
	struct FString DebugStringToDrawGASServer; // 0x1fb8(0x10)
	struct FString DebugStringDSTransferLog; // 0x1fc8(0x10)
	int32_t RoleAbilityCharacterID; // 0x1fd8(0x04)
	char pad_1FDC[0x4]; // 0x1fdc(0x04)
	struct TArray<int32_t> RoleAbilityBoundPlayerLevels; // 0x1fe0(0x10)
	struct TArray<struct FGameplayAbilitySpecHandle> RoleAbilitySpecHandles; // 0x1ff0(0x10)
	struct TArray<float> RoleAbilityStartCDServerTime; // 0x2000(0x10)
	char pad_2010[0x60]; // 0x2010(0x60)
	int32_t BattleUpgradeEffectCurrentLevel; // 0x2070(0x04)
	char pad_2074[0x4]; // 0x2074(0x04)
	struct FBattleUpgradeEffectContainer BattleUpgradeEffects; // 0x2078(0x120)
	char pad_2198[0x80]; // 0x2198(0x80)
	struct TWeakObjectPtr<struct ASolarUAVRescue> PermanentRescueUAV; // 0x2218(0x08)
	char pad_2220[0x20]; // 0x2220(0x20)
	struct TMap<struct ASkywardDiveLauncher*, bool> AvailableSkywardDiveLaunchers; // 0x2240(0x50)
	char pad_2290[0x50]; // 0x2290(0x50)

	bool WorldToScreen(struct FVector& Location, struct FVector2D& Screen); // Function Solarland.SolarCharacter.WorldToScreen // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x278e270
	void UseDanceEmoteByID(int32_t ID); // Function Solarland.SolarCharacter.UseDanceEmoteByID // (Final|Native|Public|BlueprintCallable) // @ game+0x278e1e0
	void UpgradeShieldResponse(bool bSuccess); // Function Solarland.SolarCharacter.UpgradeShieldResponse // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x278e150
	void UpgradeGenericSkill(int32_t LevelUp); // Function Solarland.SolarCharacter.UpgradeGenericSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x278e0c0
	void UpgradeClassTypeSkill(int32_t LevelUp); // Function Solarland.SolarCharacter.UpgradeClassTypeSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x278e030
	void UpdateWeaponCrosshair(float InDeltaTime); // Function Solarland.SolarCharacter.UpdateWeaponCrosshair // (Final|Native|Public) // @ game+0x278dfb0
	void UpdateVehicleStealthProgress(float StealthMaterialPercent); // Function Solarland.SolarCharacter.UpdateVehicleStealthProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x278df30
	void UpdateTeammateHUDData(char InNewPosInTeam); // Function Solarland.SolarCharacter.UpdateTeammateHUDData // (Final|Native|Public|BlueprintCallable) // @ game+0x278deb0
	void UpdateShieldUpgradeMatMaxPile(); // Function Solarland.SolarCharacter.UpdateShieldUpgradeMatMaxPile // (Final|Native|Public) // @ game+0x278de90
	void UpdateShieldPropertyByAblility(); // Function Solarland.SolarCharacter.UpdateShieldPropertyByAblility // (Final|Native|Protected) // @ game+0x278de70
	void UpdateRoleAbilityState(char RoleAbilityIndex, enum class ERoleSkillOperation Ope); // Function Solarland.SolarCharacter.UpdateRoleAbilityState // (Final|Native|Public|BlueprintCallable) // @ game+0x278dda0
	void UpdateJetFlyDataToSpectating(); // Function Solarland.SolarCharacter.UpdateJetFlyDataToSpectating // (Final|Native|Private) // @ game+0x278dd80
	void UpdateExtraMagToSpectateInfo(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarCharacter.UpdateExtraMagToSpectateInfo // (Final|Native|Private) // @ game+0x278dcf0
	void UpdateDyingAttr(float DeltaTime); // Function Solarland.SolarCharacter.UpdateDyingAttr // (Final|Native|Public) // @ game+0x278dc70
	float UpdateCurrentHealth(float UpdateValue, enum class EHealthChangeType ChangeType, struct ASolarCharacter* InInstigatorCharacter, struct AActor* InDamageCauserActor, struct FSolarPointDamageEvent& DamageEvent); // Function Solarland.SolarCharacter.UpdateCurrentHealth // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x278da70
	void UpdateBattleUpgradeEffectToSpectateInfo(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarCharacter.UpdateBattleUpgradeEffectToSpectateInfo // (Final|Native|Private) // @ game+0x278d9e0
	void UnbindActorToSelfTeam(struct AActor* Actor); // Function Solarland.SolarCharacter.UnbindActorToSelfTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x278d950
	void TurnCharacterWithAngle(float Degree, bool bIsYawOrPitch); // Function Solarland.SolarCharacter.TurnCharacterWithAngle // (Final|Native|Protected|BlueprintCallable) // @ game+0x278d870
	void TurnCharacterToDirection(struct FVector& Dir); // Function Solarland.SolarCharacter.TurnCharacterToDirection // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x278d7e0
	void TryStopSpectateCountdown(); // Function Solarland.SolarCharacter.TryStopSpectateCountdown // (Final|Native|Public|BlueprintCallable) // @ game+0x278d7c0
	void TryStopShieldRecharge(); // Function Solarland.SolarCharacter.TryStopShieldRecharge // (Final|Native|Public) // @ game+0x278d7a0
	void TryStatisticsRechargedTimes(); // Function Solarland.SolarCharacter.TryStatisticsRechargedTimes // (Final|Native|Public) // @ game+0x278d780
	void TryStartSpectateCountdown(); // Function Solarland.SolarCharacter.TryStartSpectateCountdown // (Final|Native|Public|BlueprintCallable) // @ game+0x278d760
	void TryStartShieldRecharge(bool bUseBigRecharger); // Function Solarland.SolarCharacter.TryStartShieldRecharge // (Final|Native|Public) // @ game+0x278d6d0
	void TrySetTeammateHUDShow(); // Function Solarland.SolarCharacter.TrySetTeammateHUDShow // (Final|Native|Public|BlueprintCallable) // @ game+0x278d6b0
	void TrySetTeammateHUDHide(); // Function Solarland.SolarCharacter.TrySetTeammateHUDHide // (Final|Native|Public|BlueprintCallable) // @ game+0x278d690
	void TryRefreshTeamateHUDVisiblity(); // Function Solarland.SolarCharacter.TryRefreshTeamateHUDVisiblity // (Final|Native|Public|BlueprintCallable) // @ game+0x278d670
	void TryRefreshAllyBillboardIcon(); // Function Solarland.SolarCharacter.TryRefreshAllyBillboardIcon // (Final|Native|Protected) // @ game+0x278d650
	void TryRechargeShield(bool bUseBigRecharger); // Function Solarland.SolarCharacter.TryRechargeShield // (Final|Native|Public) // @ game+0x278d5c0
	void TryHideShieldOperator(); // Function Solarland.SolarCharacter.TryHideShieldOperator // (Final|Native|Public) // @ game+0x278d5a0
	void TryDiscardShieldUpgradeMatItems(int32_t InItemNum); // Function Solarland.SolarCharacter.TryDiscardShieldUpgradeMatItems // (Final|Native|Public) // @ game+0x278d510
	void TryCreatingOwnTeammate(); // Function Solarland.SolarCharacter.TryCreatingOwnTeammate // (Final|Native|Protected) // @ game+0x278d4f0
	void TryBreakShieldRecharge(); // Function Solarland.SolarCharacter.TryBreakShieldRecharge // (Final|Native|Public) // @ game+0x278d4d0
	void TryBreakScopeStatus(); // Function Solarland.SolarCharacter.TryBreakScopeStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x278d4b0
	void TryBindPowerBarDelegates(); // Function Solarland.SolarCharacter.TryBindPowerBarDelegates // (Final|Native|Public) // @ game+0x278d490
	void TryBindPickupDelegates(); // Function Solarland.SolarCharacter.TryBindPickupDelegates // (Final|Native|Public) // @ game+0x9043b0
	void TryBindItemPanelDelegates(); // Function Solarland.SolarCharacter.TryBindItemPanelDelegates // (Final|Native|Public) // @ game+0x278d470
	void TryBindHPPanelDelegates(); // Function Solarland.SolarCharacter.TryBindHPPanelDelegates // (Final|Native|Public) // @ game+0x278d450
	void TryAutoMarkItemForTeammateServer(struct TArray<struct FSolarItemData> ItemData); // Function Solarland.SolarCharacter.TryAutoMarkItemForTeammateServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278d350
	void ToggleDebugInfo(); // Function Solarland.SolarCharacter.ToggleDebugInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void ToggleDebugGASInfo(); // Function Solarland.SolarCharacter.ToggleDebugGASInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void TickShieldOperatorTimeline(float InDeltaTime); // Function Solarland.SolarCharacter.TickShieldOperatorTimeline // (Final|Native|Public) // @ game+0x278d2d0
	float TakeDamageResolve(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.TakeDamageResolve // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x278d120
	void Suicide(); // Function Solarland.SolarCharacter.Suicide // (Final|Native|Public|BlueprintCallable) // @ game+0x278d100
	void StopTreatmentProgressBar(); // Function Solarland.SolarCharacter.StopTreatmentProgressBar // (Final|Native|Public) // @ game+0x278d0e0
	void StopTreatment(); // Function Solarland.SolarCharacter.StopTreatment // (Final|Native|Public|BlueprintCallable) // @ game+0x278d0c0
	void StopShieldRechargeProgressBar(); // Function Solarland.SolarCharacter.StopShieldRechargeProgressBar // (Final|Native|Public) // @ game+0x278d0a0
	void StopShieldRechargeProgress(); // Function Solarland.SolarCharacter.StopShieldRechargeProgress // (Final|Native|Public) // @ game+0x278d080
	void StopRescueProgressBar(int32_t TextID); // Function Solarland.SolarCharacter.StopRescueProgressBar // (Final|Native|Public) // @ game+0x278cff0
	void StopRepairWeakPointProgressBar(); // Function Solarland.SolarCharacter.StopRepairWeakPointProgressBar // (Final|Native|Public) // @ game+0x278cfd0
	void StopClimbSound(); // Function Solarland.SolarCharacter.StopClimbSound // (Final|Native|Public|BlueprintCallable) // @ game+0x278cf90
	void StatisticElectricShopOnActivated(struct FVector& InLocation); // Function Solarland.SolarCharacter.StatisticElectricShopOnActivated // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x278cf00
	void StartTreatmentProgressBar(float Duration); // Function Solarland.SolarCharacter.StartTreatmentProgressBar // (Final|Native|Public) // @ game+0x278ce80
	void StartTreatment(); // Function Solarland.SolarCharacter.StartTreatment // (Final|Native|Public|BlueprintCallable) // @ game+0x278ce60
	void StartShieldRechargeProgressBar(float InRechargeDuration, int32_t InContributorCharacterId); // Function Solarland.SolarCharacter.StartShieldRechargeProgressBar // (Final|Native|Public) // @ game+0x278cd90
	void StartShieldRechargeProgress(); // Function Solarland.SolarCharacter.StartShieldRechargeProgress // (Final|Native|Public) // @ game+0x278cd70
	void StartRescueProgressBar(float Duration, float RemainingTime, int32_t TextID, bool bShowBtn, bool bIsUAV); // Function Solarland.SolarCharacter.StartRescueProgressBar // (Final|Native|Public) // @ game+0x278cbc0
	void StartRepairWeakPointProgressBar(float Duration); // Function Solarland.SolarCharacter.StartRepairWeakPointProgressBar // (Final|Native|Public) // @ game+0x278cb40
	void SpecAnimInstStopMontage(enum class ESpecAnimInstType SpecAnimType, struct UAnimMontage* AnimMontage); // Function Solarland.SolarCharacter.SpecAnimInstStopMontage // (Native|Public|BlueprintCallable) // @ game+0x278ca50
	float SpecAnimInstPlayMontage(enum class ESpecAnimInstType SpecAnimType, struct UAnimMontage* AnimMontage, float InPlayRate, struct FName StartSectionName); // Function Solarland.SolarCharacter.SpecAnimInstPlayMontage // (Native|Public|BlueprintCallable) // @ game+0x278c8f0
	struct UAnimMontage* SpecAnimInstGetCurrentMontage(enum class ESpecAnimInstType SpecAnimType); // Function Solarland.SolarCharacter.SpecAnimInstGetCurrentMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x278c860
	void SpawnDeathBoxActor(struct ASolarPlayerState* InKillerPS); // Function Solarland.SolarCharacter.SpawnDeathBoxActor // (Final|Native|Protected) // @ game+0x278c7d0
	void SolarLaunchCharacter(struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride, struct AActor* JumpPad); // Function Solarland.SolarCharacter.SolarLaunchCharacter // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x278c640
	void ShowShieldUIFX(int32_t ShiledID); // Function Solarland.SolarCharacter.ShowShieldUIFX // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ShowShieldUI(bool IsShow); // Function Solarland.SolarCharacter.ShowShieldUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ShowRevivePickupEffect(); // Function Solarland.SolarCharacter.ShowRevivePickupEffect // (Final|Native|Public) // @ game+0x278c620
	void ShowReviveClearEffect(); // Function Solarland.SolarCharacter.ShowReviveClearEffect // (Final|Native|Public) // @ game+0x278c600
	void ShowRescueInjector(); // Function Solarland.SolarCharacter.ShowRescueInjector // (Final|Native|Public|BlueprintCallable) // @ game+0x278c5e0
	void ShowNoticeCantCharge(); // Function Solarland.SolarCharacter.ShowNoticeCantCharge // (Final|Native|Public) // @ game+0x278c5c0
	bool ShouldForceOverrideDamageTaken(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser, float& OverrideDamageTaken); // Function Solarland.SolarCharacter.ShouldForceOverrideDamageTaken // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x278c3b0
	void ShieldUpgradeToNextLevel(); // Function Solarland.SolarCharacter.ShieldUpgradeToNextLevel // (Final|Native|Public) // @ game+0x278c390
	void ShieldOperatorInterpFunc(float InValue); // Function Solarland.SolarCharacter.ShieldOperatorInterpFunc // (Final|Native|Public) // @ game+0x278c310
	void SetSpectateTargetCharacter(struct ASolarCharacter* InSpectateTargetCharacter); // Function Solarland.SolarCharacter.SetSpectateTargetCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x278c170
	void SetSelfEnergyCostEnable(bool bEnable); // Function Solarland.SolarCharacter.SetSelfEnergyCostEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x26446a0
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope); // Function Solarland.SolarCharacter.SetOpenScopeDuration // (Native|Event|Public|BlueprintEvent) // @ game+0x278c000
	void SetNewCharacterSkin(struct USkeletalMesh* NewMesh, struct UMaterialInterface* NewMaterial, struct UObject* NewAnimClass); // Function Solarland.SolarCharacter.SetNewCharacterSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x278bef0
	void SetMaxWalkSpeed(float NewWalkSpeed); // Function Solarland.SolarCharacter.SetMaxWalkSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x278be70
	void SetInfiniteAmmoState(bool Enable); // Function Solarland.SolarCharacter.SetInfiniteAmmoState // (Final|Native|Public|BlueprintCallable) // @ game+0x278bde0
	void SetCurrShieldValue(float InValue, bool bFromDamage); // Function Solarland.SolarCharacter.SetCurrShieldValue // (Final|Native|Public|BlueprintCallable) // @ game+0x278bc80
	void SetCurrExtraEnergy(float Amount); // Function Solarland.SolarCharacter.SetCurrExtraEnergy // (Final|Native|Public) // @ game+0x278bc00
	void SetBackpackConfig(int32_t InCharacterId); // Function Solarland.SolarCharacter.SetBackpackConfig // (Final|Native|Public) // @ game+0x278bb70
	void ServerUseItemRequest(int32_t ItemID, int32_t Num); // Function Solarland.SolarCharacter.ServerUseItemRequest // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278baa0
	bool ServerUpgradeShield(); // Function Solarland.SolarCharacter.ServerUpgradeShield // (Final|Native|Public) // @ game+0x278ba70
	void ServerUpdateWallRunState(enum class EWallRunState NewState); // Function Solarland.SolarCharacter.ServerUpdateWallRunState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278b9f0
	void ServerUpdateWallRunAngle(char ClientAngle); // Function Solarland.SolarCharacter.ServerUpdateWallRunAngle // (Net|Native|Event|Public|NetServer) // @ game+0x278b970
	void ServerUpdateDuckRollingJumpPoseIndex(int32_t Index); // Function Solarland.SolarCharacter.ServerUpdateDuckRollingJumpPoseIndex // (Net|Native|Event|Protected|NetServer) // @ game+0x278b8e0
	void ServerTryRechargeShield(float InRecoverySpeed); // Function Solarland.SolarCharacter.ServerTryRechargeShield // (Final|Native|Public) // @ game+0x278b7d0
	void ServerTriggerRoleAbilityAgain(char RoleAbilityIndex); // Function Solarland.SolarCharacter.ServerTriggerRoleAbilityAgain // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278b750
	void ServerTriggerRadarStation(struct ASolarRadarStation* InRadarStation); // Function Solarland.SolarCharacter.ServerTriggerRadarStation // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278b6c0
	void ServerSwitchVehicleSeat(float LocalTime, struct ASolarVehiclePawn* InVehicle, int32_t TargetSeatIndex, struct FVector_NetQuantize VehicleLocation, struct FVector_NetQuantizeNormal VehicleEuler); // Function Solarland.SolarCharacter.ServerSwitchVehicleSeat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278b520
	void ServerSwitchShield(struct FSolarItemData NewShieldData); // Function Solarland.SolarCharacter.ServerSwitchShield // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278b440
	void ServerStatisticsRechargedTimes(int32_t RechargedTimes, int32_t BigRechargedTimes); // Function Solarland.SolarCharacter.ServerStatisticsRechargedTimes // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278b370
	void ServerStatisticElectricShopOnActivated(struct FVector InLocation); // Function Solarland.SolarCharacter.ServerStatisticElectricShopOnActivated // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x278b2f0
	void ServerStartRescue(struct ASolarCharacter* TargetCharacter); // Function Solarland.SolarCharacter.ServerStartRescue // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278b260
	void ServerSetTreasureBoxState(struct ASolarTreasureBoxActor* TreasureBox, enum class ETreasureBoxState NewState, struct ASolarCharacter* RequestCharacter); // Function Solarland.SolarCharacter.ServerSetTreasureBoxState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278b150
	void ServerSetJetPackModule(int32_t NewJetPackModuleID, bool bForVertical); // Function Solarland.SolarCharacter.ServerSetJetPackModule // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278b080
	void ServerSetInputVector(uint16_t AxisX, uint16_t AxisY); // Function Solarland.SolarCharacter.ServerSetInputVector // (Final|Net|Native|Event|Private|NetServer) // @ game+0x278afb0
	void ServerSetIdleTurnType(enum class EIdleTurnType TurnType); // Function Solarland.SolarCharacter.ServerSetIdleTurnType // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278af30
	void ServerSetEnergyState(enum class EEnergyState State); // Function Solarland.SolarCharacter.ServerSetEnergyState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278aeb0
	void ServerSetDebugCharacterGASValue(int32_t Value); // Function Solarland.SolarCharacter.ServerSetDebugCharacterGASValue // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x278ae20
	void ServerSetCurChargingDeathBox(struct ADeathTreasureBox* DeathBox); // Function Solarland.SolarCharacter.ServerSetCurChargingDeathBox // (Net|Native|Event|Public|NetServer) // @ game+0x278ad90
	void ServerSetChargingPile(bool bEnter, struct ASolarPile* InChargingPile); // Function Solarland.SolarCharacter.ServerSetChargingPile // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278acc0
	void ServerSetCharacterOperation(enum class ECharacterOperation InType, struct UObject* Target); // Function Solarland.SolarCharacter.ServerSetCharacterOperation // (Final|Net|Native|Event|Private|NetServer) // @ game+0x278abf0
	void ServerSetCanBeDamaged(bool bInCanBeDamaged); // Function Solarland.SolarCharacter.ServerSetCanBeDamaged // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278ab60
	void ServerSendGameplayEvent(struct FGameplayTag EventTag, struct FGameplayEventData Payload); // Function Solarland.SolarCharacter.ServerSendGameplayEvent // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278a950
	void ServerSelectLevelSkill(int32_t Level, int32_t SelectedIndex); // Function Solarland.SolarCharacter.ServerSelectLevelSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278a880
	void ServerRPCUpgradeWeapon(struct ASolarElectricShop* InTargetShop, struct ASolarPlayerWeapon* InTargetWeapon); // Function Solarland.SolarCharacter.ServerRPCUpgradeWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278a720
	void ServerRPCUpgradeShield(); // Function Solarland.SolarCharacter.ServerRPCUpgradeShield // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ae4b30
	void ServerRPCTakeWeaponPartToBag(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarCharacter.ServerRPCTakeWeaponPartToBag // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278a650
	void ServerRPCTakeBagPartToWeapon(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarCharacter.ServerRPCTakeBagPartToWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278a580
	void ServerRPCSwitchWeaponPart(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarCharacter.ServerRPCSwitchWeaponPart // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278a4b0
	void ServerRPCSetSelfEnergyCostEnable(bool bEnable); // Function Solarland.SolarCharacter.ServerRPCSetSelfEnergyCostEnable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278a420
	void ServerRPCPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarCharacter.ServerRPCPurchaseEShopItems // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278a300
	void ServerRPCDisplayAllElectricShops(); // Function Solarland.SolarCharacter.ServerRPCDisplayAllElectricShops // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1ae4d70
	void ServerRPCDiscardWeaponPart(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarCharacter.ServerRPCDiscardWeaponPart // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278a230
	void ServerRPCDiscardWeapon(int32_t InSlot); // Function Solarland.SolarCharacter.ServerRPCDiscardWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278a1a0
	void ServerRPCDiscardItem(int32_t InItemID, int32_t InItemNum); // Function Solarland.SolarCharacter.ServerRPCDiscardItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278a0d0
	void ServerRequestStartResurrect(struct ADeathTreasureBox* TargetDeathBox); // Function Solarland.SolarCharacter.ServerRequestStartResurrect // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x278a7f0
	void ServerRequestCancelResurrect(); // Function Solarland.SolarCharacter.ServerRequestCancelResurrect // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1ae53b0
	void ServerPostAutoFireStatusChanged(bool bInOn); // Function Solarland.SolarCharacter.ServerPostAutoFireStatusChanged // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x278a040
	void ServerPlayTreatmentCancelSound(); // Function Solarland.SolarCharacter.ServerPlayTreatmentCancelSound // (Net|Native|Event|Public|NetServer) // @ game+0x1ae5090
	void ServerPickUpWeapon(struct AActor* Actor, bool bIsAutoPickup, int32_t TargetIndex, struct FVector ClientCharPos, struct FVector ClientItemPos); // Function Solarland.SolarCharacter.ServerPickUpWeapon // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x2789e90
	void ServerPickUpTreasureItem(struct ASolarTreasureBoxActor* TreasureBox, int64_t ItemThisID, bool bIsAutoPickup, int32_t TargetIndex, struct FVector ClientCharPos, struct FVector ClientItemPos); // Function Solarland.SolarCharacter.ServerPickUpTreasureItem // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x2789c90
	void ServerPickUpItem(struct ASolarItemActor* ItemActor, bool bIsAutoPickup, int32_t TargetIndex, struct FVector ClientCharPos, struct FVector ClientItemPos); // Function Solarland.SolarCharacter.ServerPickUpItem // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x2789ae0
	void ServerOpenAirDropTreasureBox(struct AAirDropTreasureBox* InAirDropTreasureBox); // Function Solarland.SolarCharacter.ServerOpenAirDropTreasureBox // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2789a50
	void ServerOnDestructActor(struct ASolarDestructibleActor* DestructibleActor, struct ASolarVehiclePawn* VehiclePawn, float SpeedDifference, struct FVector Impulse, struct FVector ImpactPoint); // Function Solarland.SolarCharacter.ServerOnDestructActor // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x27898a0
	void ServerMoveNoBaseEx(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode, uint32_t ClientCustomMoveData); // Function Solarland.SolarCharacter.ServerMoveNoBaseEx // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x27895b0
	void ServerMoveDualNoBaseEx(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode, uint32_t ClientCustomMoveData); // Function Solarland.SolarCharacter.ServerMoveDualNoBaseEx // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x2789170
	void ServerKillMe(enum class ESCMDamageType DamageType); // Function Solarland.SolarCharacter.ServerKillMe // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x27890f0
	void ServerInitSheildComp(int32_t InShiledID); // Function Solarland.SolarCharacter.ServerInitSheildComp // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2789060
	void ServerHideShieldOperator(); // Function Solarland.SolarCharacter.ServerHideShieldOperator // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ae4ab0
	void ServerGMVehicleSubHealth(int32_t SubHealth); // Function Solarland.SolarCharacter.ServerGMVehicleSubHealth // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2788c20
	void ServerGetOnVehicle(float LocalTime, struct ASolarVehiclePawn* InVehicle, int32_t SeatIndex); // Function Solarland.SolarCharacter.ServerGetOnVehicle // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2788f50
	void ServerGetOffVehicleEjectedByDefaultParams(bool bNeedNotify, struct FVector_NetQuantizeNormal EjectDirection); // Function Solarland.SolarCharacter.ServerGetOffVehicleEjectedByDefaultParams // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2788e70
	void ServerGetOffVehicleEjected(bool bNeedNotify, struct FVector_NetQuantizeNormal EjectDirection, struct FVehicleEjectParams Params); // Function Solarland.SolarCharacter.ServerGetOffVehicleEjected // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2788d40
	void ServerGetOffVehicle(bool bNeedNotify); // Function Solarland.SolarCharacter.ServerGetOffVehicle // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2788cb0
	void ServerEnableServerGASDebugByDisplayDebug(bool bEnabled); // Function Solarland.SolarCharacter.ServerEnableServerGASDebugByDisplayDebug // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2788b90
	void ServerDetectBlock(); // Function Solarland.SolarCharacter.ServerDetectBlock // (Final|Net|Native|Event|Private|NetServer) // @ game+0x1ae6050
	void ServerConsumeExtraEnergy(float InAmount, enum class EEnergyUsage InUsage); // Function Solarland.SolarCharacter.ServerConsumeExtraEnergy // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2788ac0
	void ServerConsumeEnergy(float InAmount, enum class EEnergyUsage InUsage); // Function Solarland.SolarCharacter.ServerConsumeEnergy // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x27889f0
	void ServerClearJetModule(); // Function Solarland.SolarCharacter.ServerClearJetModule // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ae4fb0
	void ServerClearEnergyState(enum class EEnergyState State); // Function Solarland.SolarCharacter.ServerClearEnergyState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2788970
	void ServerChangeRechargeState(bool bRecharge, bool bUseBigRecharger); // Function Solarland.SolarCharacter.ServerChangeRechargeState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x27888a0
	void ServerCancelVehicleAbility(char AbilityIndex); // Function Solarland.SolarCharacter.ServerCancelVehicleAbility // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2788820
	void ServerCancelVault(float InAnimPosition, struct FVector InLandLocation); // Function Solarland.SolarCharacter.ServerCancelVault // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x2788740
	void ServerCancelRescue(); // Function Solarland.SolarCharacter.ServerCancelRescue // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ae4ad0
	void ServerCancelOpenAirDropTreasureBox(struct AAirDropTreasureBox* InAirDropTreasureBox); // Function Solarland.SolarCharacter.ServerCancelOpenAirDropTreasureBox // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x27886b0
	void ServerCancelMeleeWarp(); // Function Solarland.SolarCharacter.ServerCancelMeleeWarp // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ae6730
	void ServerBackpackGM(enum class EGmType InGmType, int32_t InItemID, int32_t InItemNum, int32_t InSlot); // Function Solarland.SolarCharacter.ServerBackpackGM // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2788560
	void ServerAskForActiveAbilityInfosToRestoreOnReconnected(); // Function Solarland.SolarCharacter.ServerAskForActiveAbilityInfosToRestoreOnReconnected // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1ae5e30
	void ServerApplyVehicleAbility(char AbilityIndex); // Function Solarland.SolarCharacter.ServerApplyVehicleAbility // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x27884e0
	void ServerAddVehicleTime(float InAddTime); // Function Solarland.SolarCharacter.ServerAddVehicleTime // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2788450
	void RoleAbilityForbiddenAbilityTagCallback(struct FGameplayTag Tag, int32_t NewCount, char AbilityIndex); // Function Solarland.SolarCharacter.RoleAbilityForbiddenAbilityTagCallback // (Final|Native|Private) // @ game+0x2788340
	void RoleAbilityEndedCallBack(struct UGameplayAbility* InAbility); // Function Solarland.SolarCharacter.RoleAbilityEndedCallBack // (Final|Native|Private) // @ game+0x27882b0
	void RoleAbilityCoolDownTagCallback(struct FGameplayTag Tag, int32_t NewCount, char AbilityIndex); // Function Solarland.SolarCharacter.RoleAbilityCoolDownTagCallback // (Final|Native|Private) // @ game+0x27881a0
	void RoleAbilityCoolDownResetCallback(struct FGameplayTag Tag, int32_t NewCount, char AbilityIndex); // Function Solarland.SolarCharacter.RoleAbilityCoolDownResetCallback // (Final|Native|Private) // @ game+0x2788090
	void RoleAbilityCommittedCallBack(struct UGameplayAbility* InAbility); // Function Solarland.SolarCharacter.RoleAbilityCommittedCallBack // (Final|Native|Private) // @ game+0x2788000
	void RoleAbilityActiveCallBack(struct UGameplayAbility* InAbility); // Function Solarland.SolarCharacter.RoleAbilityActiveCallBack // (Final|Native|Private) // @ game+0x2787f70
	void ReturnMostValuableItemIDServer(char TeammatePosInTeam, int64_t ItemThisID); // Function Solarland.SolarCharacter.ReturnMostValuableItemIDServer // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2787ea0
	void ResponseChosenMark(); // Function Solarland.SolarCharacter.ResponseChosenMark // (Final|Native|Public) // @ game+0x2787e80
	void RequestUseBackpackItemServer(int32_t InItemID, int32_t InItemNum); // Function Solarland.SolarCharacter.RequestUseBackpackItemServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2787db0
	void RequestToStopVehicleRepairing(); // Function Solarland.SolarCharacter.RequestToStopVehicleRepairing // (Final|Native|Public|BlueprintCallable) // @ game+0x2787d90
	void RequestToStartVehicleRepairing(struct ASolarVehiclePawn* InVehicle); // Function Solarland.SolarCharacter.RequestToStartVehicleRepairing // (Final|Native|Public|BlueprintCallable) // @ game+0x2787d00
	void RequestSingleCruise(struct FSingleCruiseBaseParam& StartParam); // Function Solarland.SolarCharacter.RequestSingleCruise // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2787c30
	void RequestPlayShieldSound(struct FShieldSoundData& ShieldSound, bool bIsOnly1P); // Function Solarland.SolarCharacter.RequestPlayShieldSound // (Final|Native|Public|HasOutParms) // @ game+0x2787a50
	void RequestDisplayAllElectricShops(); // Function Solarland.SolarCharacter.RequestDisplayAllElectricShops // (Final|Native|Public) // @ game+0x2787a30
	void RequestCancelRescue(); // Function Solarland.SolarCharacter.RequestCancelRescue // (Final|Native|Public) // @ game+0x2787a10
	void RemoveWorldMarkByRep(struct FWorldMarkData& WorldMarkData); // Function Solarland.SolarCharacter.RemoveWorldMarkByRep // (Final|Native|Public|HasOutParms) // @ game+0x27878e0
	void RemoveTreasureBoxOperator(); // Function Solarland.SolarCharacter.RemoveTreasureBoxOperator // (Final|Native|Public) // @ game+0x27878c0
	void RemoveTempComponent(struct UPrimitiveComponent* TargetComp); // Function Solarland.SolarCharacter.RemoveTempComponent // (Final|Native|Private|BlueprintCallable) // @ game+0x2787830
	void RemoveTempAttributeModifies(int32_t AttributeID, bool bCumulOrFact, struct FName Tag); // Function Solarland.SolarCharacter.RemoveTempAttributeModifies // (Final|Native|Public|BlueprintCallable) // @ game+0x2787720
	void RemoveShieldUpgradeOperator(); // Function Solarland.SolarCharacter.RemoveShieldUpgradeOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x2787700
	void RemoveShieldRepairEffectItem(); // Function Solarland.SolarCharacter.RemoveShieldRepairEffectItem // (Final|Native|Public|BlueprintCallable) // @ game+0x27876e0
	void RemoveShieldOperator(); // Function Solarland.SolarCharacter.RemoveShieldOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x27876c0
	void RefreshWeaponDataMapAndArray(); // Function Solarland.SolarCharacter.RefreshWeaponDataMapAndArray // (Final|Native|Public) // @ game+0x27876a0
	void RefreshTypeItemMapAndArray(); // Function Solarland.SolarCharacter.RefreshTypeItemMapAndArray // (Final|Native|Public) // @ game+0x2787680
	void RefreshTeammateHUDUI(struct ASolarPlayerState* SelfData); // Function Solarland.SolarCharacter.RefreshTeammateHUDUI // (Final|Native|Protected) // @ game+0x27875f0
	void RefreshRenderConsoleVarForSkydive(); // Function Solarland.SolarCharacter.RefreshRenderConsoleVarForSkydive // (Event|Public|BlueprintCallable|BlueprintEvent|Const) // @ game+0x2d0d160
	void RefreshMaxPileMapAndArray(); // Function Solarland.SolarCharacter.RefreshMaxPileMapAndArray // (Final|Native|Public) // @ game+0x27875d0
	void RefreshIdItemMapAndArray(); // Function Solarland.SolarCharacter.RefreshIdItemMapAndArray // (Final|Native|Public) // @ game+0x27875b0
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround); // Function Solarland.SolarCharacter.ReceiveUpdateSkydiveLandingEffects // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate); // Function Solarland.SolarCharacter.ReceiveUpdateSkydiveFlyingEffects // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater); // Function Solarland.SolarCharacter.ReceivePlaySkydiveLandingEndEffects // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceivedOnShieldIdChanged(int32_t LastShieldId); // Function Solarland.SolarCharacter.ReceivedOnShieldIdChanged // (Final|Native|Public) // @ game+0x2787520
	void ReceiveAfterTakeDamageResolve(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.ReceiveAfterTakeDamageResolve // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void QuitVehicleWholeShield(); // Function Solarland.SolarCharacter.QuitVehicleWholeShield // (Final|Native|Public|BlueprintCallable) // @ game+0x2787500
	void QuitVehicleStealth(); // Function Solarland.SolarCharacter.QuitVehicleStealth // (Final|Native|Public|BlueprintCallable) // @ game+0x27874e0
	void PurchaseEShopItemsResponse(int32_t InProductID, bool bSuccess, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarCharacter.PurchaseEShopItemsResponse // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x27873c0
	void PostNotEnoughEnergyNotice(); // Function Solarland.SolarCharacter.PostNotEnoughEnergyNotice // (Final|Native|Public) // @ game+0x27873a0
	void PlaySquatSound(); // Function Solarland.SolarCharacter.PlaySquatSound // (Final|Native|Protected) // @ game+0x27872e0
	void PlaySpeedUpEffect(bool bIsUp); // Function Solarland.SolarCharacter.PlaySpeedUpEffect // (Final|Native|Public) // @ game+0x2787250
	void PlayShieldSoundByType(enum class EShieldSoundType ShieldSoundType); // Function Solarland.SolarCharacter.PlayShieldSoundByType // (Final|Native|Public|BlueprintCallable) // @ game+0x27871d0
	void PlayParachuteStartSound(); // Function Solarland.SolarCharacter.PlayParachuteStartSound // (Final|Native|Public|BlueprintCallable) // @ game+0x27871b0
	void PlayMontageOnOrnament(struct FGameplayTag OrnamentTag, struct UAnimMontage* MontageToPlay); // Function Solarland.SolarCharacter.PlayMontageOnOrnament // (Final|Native|Public|BlueprintCallable) // @ game+0x27870e0
	void PlayerStateReplicatedForHUD(); // Function Solarland.SolarCharacter.PlayerStateReplicatedForHUD // (Final|Native|Public) // @ game+0x2787380
	void OnVaultInput(); // Function Solarland.SolarCharacter.OnVaultInput // (Final|Native|Public) // @ game+0x27870a0
	void OnUsingSkillStatusChanged(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarCharacter.OnUsingSkillStatusChanged // (Final|Native|Public) // @ game+0x2786fd0
	void OnUpdateShieldId(); // Function Solarland.SolarCharacter.OnUpdateShieldId // (Final|Native|Public) // @ game+0x2786fb0
	void OnUAVSpawnRelatedTagChange(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarCharacter.OnUAVSpawnRelatedTagChange // (Final|Native|Protected) // @ game+0x2786ee0
	void OnTreatmentStop__DelegateSignature(bool bWasCancelled); // DelegateFunction Solarland.SolarCharacter.OnTreatmentStop__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeamIDChange(); // Function Solarland.SolarCharacter.OnTeamIDChange // (Final|Native|Public|BlueprintCallable) // @ game+0x2786ec0
	void OnTakeDamage__DelegateSignature(struct ASolarCharacter* Character, struct ASolarCharacter* DamageInstigatorCharacter, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // DelegateFunction Solarland.SolarCharacter.OnTakeDamage__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnStartResurrectProgress(int32_t InTextId, float InDuration, float InRemaining, bool bShowCancel); // Function Solarland.SolarCharacter.OnStartResurrectProgress // (Final|Native|Public) // @ game+0x2786d60
	void OnStartRemindTeammateRescue(); // Function Solarland.SolarCharacter.OnStartRemindTeammateRescue // (Final|Native|Public) // @ game+0x2786d40
	void OnSpawnExpItem(); // Function Solarland.SolarCharacter.OnSpawnExpItem // (Final|Native|Public|BlueprintCallable) // @ game+0x2786d20
	void OnSkydiveTraced__DelegateSignature(struct FHitResult& HitResult); // DelegateFunction Solarland.SolarCharacter.OnSkydiveTraced__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnSkydiveStageChanged(enum class ESkydiveStage LastStage, enum class ESkydiveStage CurrentStage); // Function Solarland.SolarCharacter.OnSkydiveStageChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnShowShieldHUD__DelegateSignature(bool bIsShowShieldHUD); // DelegateFunction Solarland.SolarCharacter.OnShowShieldHUD__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	bool OnShouldTakeDamage(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.OnShouldTakeDamage // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x2786b50
	void OnShieldValueLowDelegate__DelegateSignature(bool bIsShieldValueLow); // DelegateFunction Solarland.SolarCharacter.OnShieldValueLowDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnShieldValueChanged__DelegateSignature(enum class EShieldWidgetState WidgetState, float CurValue, float ChangeValue, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // DelegateFunction Solarland.SolarCharacter.OnShieldValueChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnShieldRechargeStart(); // Function Solarland.SolarCharacter.OnShieldRechargeStart // (Final|Native|Public) // @ game+0x2786b30
	void OnShieldRechargeProgressBarComplete(); // Function Solarland.SolarCharacter.OnShieldRechargeProgressBarComplete // (Final|Native|Protected) // @ game+0x2786b10
	void OnShieldRechargeProgressBarCancel(); // Function Solarland.SolarCharacter.OnShieldRechargeProgressBarCancel // (Final|Native|Protected) // @ game+0x2786af0
	void OnShieldRechargeEnd(); // Function Solarland.SolarCharacter.OnShieldRechargeEnd // (Final|Native|Public) // @ game+0x2786ad0
	void OnShieldIDChangedDelegate__DelegateSignature(bool bShiledAvailable, float CurValue, float MaxValue, int32_t QualityColor, bool bIsAdvancedShield); // DelegateFunction Solarland.SolarCharacter.OnShieldIDChangedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSheildUpFXDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnSheildUpFXDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSheildRechargeDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnSheildRechargeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSheildBreakDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnSheildBreakDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSeverRemindTeammateRescueNotify(int32_t RemindRescueSoundID); // Function Solarland.SolarCharacter.OnSeverRemindTeammateRescueNotify // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2786a40
	void OnRoleGameplayEffectRemoved(struct FActiveGameplayEffect& ActiveGameplayEffect); // Function Solarland.SolarCharacter.OnRoleGameplayEffectRemoved // (Final|Native|Private|HasOutParms) // @ game+0x2786930
	void OnRoleGameplayEffectApplied(struct UAbilitySystemComponent* ASC, struct FGameplayEffectSpec& InGameplayEffectSpec, struct FActiveGameplayEffectHandle InGameplayEffectHandle); // Function Solarland.SolarCharacter.OnRoleGameplayEffectApplied // (Final|Native|Private|HasOutParms) // @ game+0x27867d0
	void OnReplayCameraModeChanged(enum class EReplayCameraMode OldMode, enum class EReplayCameraMode CurMode); // Function Solarland.SolarCharacter.OnReplayCameraModeChanged // (Final|Native|Private) // @ game+0x2786700
	void OnRepItemWeaponParts(); // Function Solarland.SolarCharacter.OnRepItemWeaponParts // (Final|Native|Public) // @ game+0x2785a50
	void OnRepIgnoreScopeSlots(); // Function Solarland.SolarCharacter.OnRepIgnoreScopeSlots // (Final|Native|Public) // @ game+0x2785a30
	void OnRep_WeaponSystemVehicle(); // Function Solarland.SolarCharacter.OnRep_WeaponSystemVehicle // (Final|Native|Public) // @ game+0x27866e0
	void OnRep_WeaponSystemComponentChanged(); // Function Solarland.SolarCharacter.OnRep_WeaponSystemComponentChanged // (Final|Native|Private) // @ game+0x27866c0
	void OnRep_WeaponDataMap(); // Function Solarland.SolarCharacter.OnRep_WeaponDataMap // (Final|Native|Public) // @ game+0x27866a0
	void OnRep_VJetPackModuleID(); // Function Solarland.SolarCharacter.OnRep_VJetPackModuleID // (Final|Native|Public) // @ game+0x2786680
	void OnRep_TypeKeyItemArrayChange(); // Function Solarland.SolarCharacter.OnRep_TypeKeyItemArrayChange // (Final|Native|Public) // @ game+0x2786660
	void OnRep_TreatmentState(enum class ESolarTreatmentState LastState); // Function Solarland.SolarCharacter.OnRep_TreatmentState // (Final|Native|Public) // @ game+0x27865e0
	void OnRep_TreatmentCount(int32_t LastCount); // Function Solarland.SolarCharacter.OnRep_TreatmentCount // (Final|Native|Public) // @ game+0x2786550
	void OnRep_SkillAnimDistanceBlendRatio(); // Function Solarland.SolarCharacter.OnRep_SkillAnimDistanceBlendRatio // (Final|Native|Public) // @ game+0x2786530
	void OnRep_SingleCruiseState(enum class ESingleCruiseState LastSingleCruiseState); // Function Solarland.SolarCharacter.OnRep_SingleCruiseState // (Final|Native|Protected) // @ game+0x27864b0
	void OnRep_SettingEnergyCostChanged(); // Function Solarland.SolarCharacter.OnRep_SettingEnergyCostChanged // (Final|Native|Public) // @ game+0x9043b0
	void OnRep_RoleAbilityStartCDServerTime(); // Function Solarland.SolarCharacter.OnRep_RoleAbilityStartCDServerTime // (Final|Native|Private) // @ game+0x2786410
	void OnRep_RoleAbilitySpecHandles(); // Function Solarland.SolarCharacter.OnRep_RoleAbilitySpecHandles // (Final|Native|Private) // @ game+0x27863f0
	void OnRep_ReviveItemCleared(); // Function Solarland.SolarCharacter.OnRep_ReviveItemCleared // (Final|Native|Public) // @ game+0x27863d0
	void OnRep_RescueState(); // Function Solarland.SolarCharacter.OnRep_RescueState // (Final|Native|Public) // @ game+0x2786330
	void OnRep_RescuedStartTime(float LastRescuedStartTime); // Function Solarland.SolarCharacter.OnRep_RescuedStartTime // (Final|Native|Public) // @ game+0x2786350
	void OnRep_PendingRegeneration(); // Function Solarland.SolarCharacter.OnRep_PendingRegeneration // (Final|Native|Public) // @ game+0x2786310
	void OnRep_OutVehicleShotState(); // Function Solarland.SolarCharacter.OnRep_OutVehicleShotState // (Final|Native|Private) // @ game+0x27858c0
	void OnRep_OrnamentMontageInfo(struct FOrnamentMontageInfo LastInfo); // Function Solarland.SolarCharacter.OnRep_OrnamentMontageInfo // (Final|Native|Public) // @ game+0x2786270
	void OnRep_MaxPileArrayChange(); // Function Solarland.SolarCharacter.OnRep_MaxPileArrayChange // (Final|Native|Public) // @ game+0x2786230
	void OnRep_MaxExtraEnergyChanged(); // Function Solarland.SolarCharacter.OnRep_MaxExtraEnergyChanged // (Final|Native|Public) // @ game+0x2786210
	void OnRep_JetPropellingInfo(); // Function Solarland.SolarCharacter.OnRep_JetPropellingInfo // (Final|Native|Protected) // @ game+0x27861f0
	void OnRep_IsDeathVerge(); // Function Solarland.SolarCharacter.OnRep_IsDeathVerge // (Final|Native|Public) // @ game+0x27861d0
	void OnRep_IdKeyItemArrayChange(); // Function Solarland.SolarCharacter.OnRep_IdKeyItemArrayChange // (Final|Native|Public) // @ game+0x27861b0
	void OnRep_HJetPackModuleID(); // Function Solarland.SolarCharacter.OnRep_HJetPackModuleID // (Final|Native|Public) // @ game+0x2786080
	void OnRep_HitSoundData(struct FHitSoundReplicationData& LastData); // Function Solarland.SolarCharacter.OnRep_HitSoundData // (Final|Native|Protected|HasOutParms) // @ game+0x27860a0
	void OnRep_ForceParachuteCountDown(); // Function Solarland.SolarCharacter.OnRep_ForceParachuteCountDown // (Final|Native|Protected) // @ game+0x2786060
	void OnRep_ExtraEnergyModuleIDChanged(); // Function Solarland.SolarCharacter.OnRep_ExtraEnergyModuleIDChanged // (Final|Native|Public) // @ game+0x2786040
	void OnRep_EnergyStateChanged(); // Function Solarland.SolarCharacter.OnRep_EnergyStateChanged // (Final|Native|Public) // @ game+0x2786020
	void OnRep_EnableCruising(); // Function Solarland.SolarCharacter.OnRep_EnableCruising // (Final|Native|Protected) // @ game+0x2786000
	void OnRep_DuckRollingJumpPoseIndex(); // Function Solarland.SolarCharacter.OnRep_DuckRollingJumpPoseIndex // (Final|Native|Protected) // @ game+0x2785fe0
	void OnRep_DiedTime(); // Function Solarland.SolarCharacter.OnRep_DiedTime // (Final|Native|Private) // @ game+0x2785fc0
	void OnRep_CurUniqueShieldId(); // Function Solarland.SolarCharacter.OnRep_CurUniqueShieldId // (Final|Native|Public) // @ game+0x2785cd0
	void OnRep_CurrShieldValue(float PreviousValue); // Function Solarland.SolarCharacter.OnRep_CurrShieldValue // (Final|Native|Public) // @ game+0x2785e00
	void OnRep_CurrShieldState(enum class EShieldState LastState); // Function Solarland.SolarCharacter.OnRep_CurrShieldState // (Final|Native|Public) // @ game+0x2785d80
	void OnRep_CurrShieldId(int32_t InLastShieldId); // Function Solarland.SolarCharacter.OnRep_CurrShieldId // (Final|Native|Public) // @ game+0x2785cf0
	void OnRep_CurrentSkydiveStage(enum class ESkydiveStage LastStage); // Function Solarland.SolarCharacter.OnRep_CurrentSkydiveStage // (Final|Native|Private) // @ game+0x2785f40
	void OnRep_CurrentSkillAnimType(); // Function Solarland.SolarCharacter.OnRep_CurrentSkillAnimType // (Final|Native|Public) // @ game+0x2785f20
	void OnRep_CurrentEnergyChanged(float LastEnergyValue); // Function Solarland.SolarCharacter.OnRep_CurrentEnergyChanged // (Final|Native|Public) // @ game+0x2785ea0
	void OnRep_CurChargingDeathBoxChanged(struct ADeathTreasureBox* PreBox); // Function Solarland.SolarCharacter.OnRep_CurChargingDeathBoxChanged // (Final|Native|Private) // @ game+0x2785c40
	void OnRep_CruiseState(); // Function Solarland.SolarCharacter.OnRep_CruiseState // (Final|Native|Protected) // @ game+0x2785c20
	void OnRep_CharacterIsInRoom(); // Function Solarland.SolarCharacter.OnRep_CharacterIsInRoom // (Final|Native|Private) // @ game+0x2785c00
	void OnRep_CharacterCapsuleSizeOverride(); // Function Solarland.SolarCharacter.OnRep_CharacterCapsuleSizeOverride // (Final|Native|Private) // @ game+0x2785be0
	void OnRep_CapsuleID(); // Function Solarland.SolarCharacter.OnRep_CapsuleID // (Final|Native|Protected) // @ game+0x2785bc0
	void OnRep_CanSkilledJump(); // Function Solarland.SolarCharacter.OnRep_CanSkilledJump // (Final|Native|Protected) // @ game+0x2785ba0
	void OnRep_BGMInBattle(); // Function Solarland.SolarCharacter.OnRep_BGMInBattle // (Final|Native|Private) // @ game+0x2785b60
	void OnRep_BackpackPropellingMode(); // Function Solarland.SolarCharacter.OnRep_BackpackPropellingMode // (Final|Native|Protected) // @ game+0x2785b80
	void OnRep_AssignedSkinID(int32_t OldSkinID); // Function Solarland.SolarCharacter.OnRep_AssignedSkinID // (Final|Native|Private) // @ game+0x2785ad0
	void OnRep_AssignedCharacterID(); // Function Solarland.SolarCharacter.OnRep_AssignedCharacterID // (Final|Native|Private) // @ game+0x2785ab0
	void OnRep_ActiveInfiniteAmmo(); // Function Solarland.SolarCharacter.OnRep_ActiveInfiniteAmmo // (Final|Native|Protected) // @ game+0x2785a90
	void OnRep_ActiveEMP(); // Function Solarland.SolarCharacter.OnRep_ActiveEMP // (Final|Native|Protected) // @ game+0x2785a70
	void OnPlayingScrubCharactersCreated(); // Function Solarland.SolarCharacter.OnPlayingScrubCharactersCreated // (Final|Native|Private) // @ game+0x9043b0
	void OnPlayerKilled(struct ASCMPlayerState* KillerPlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.SolarCharacter.OnPlayerKilled // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerKill(struct ASCMPlayerState* KilledPlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.SolarCharacter.OnPlayerKill // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerDataRepAsPlayer(char TeamID); // Function Solarland.SolarCharacter.OnPlayerDataRepAsPlayer // (Final|Native|Protected) // @ game+0x27859b0
	void OnPlayerBackpackEnergyUpdate(); // Function Solarland.SolarCharacter.OnPlayerBackpackEnergyUpdate // (Final|Native|Public) // @ game+0x2785990
	void OnPickupSettingChanged(); // Function Solarland.SolarCharacter.OnPickupSettingChanged // (Final|Native|Private) // @ game+0x2785970
	void OnOwnTeammateHUDCreated(struct ASolarPlayerState* SelfData); // Function Solarland.SolarCharacter.OnOwnTeammateHUDCreated // (Final|Native|Protected) // @ game+0x27858e0
	void OnOutVehicleStateChanged(); // Function Solarland.SolarCharacter.OnOutVehicleStateChanged // (Final|Native|Public) // @ game+0x27858c0
	void OnMultiRemindTeammateRescueNotify(); // Function Solarland.SolarCharacter.OnMultiRemindTeammateRescueNotify // (Net|Native|Event|NetMulticast|Public) // @ game+0x1ae6430
	void OnMaxEnergyUpdateEvent__DelegateSignature(float InMaxValue); // DelegateFunction Solarland.SolarCharacter.OnMaxEnergyUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnLocalPlayerSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* LocalPlayerSpectateInfo); // Function Solarland.SolarCharacter.OnLocalPlayerSpectateTargetChanged // (Final|Native|Private) // @ game+0x27857f0
	void OnLocalPlayerSpectateMeStatusChanged__DelegateSignature(struct ASolarCharacter* Character, bool bIsSpectating); // DelegateFunction Solarland.SolarCharacter.OnLocalPlayerSpectateMeStatusChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnLevelSequence_PlayAirborneJumpSound(); // Function Solarland.SolarCharacter.OnLevelSequence_PlayAirborneJumpSound // (Final|Native|Public|BlueprintCallable) // @ game+0x27857d0
	void OnJogSetClient__DelegateSignature(bool bSet); // DelegateFunction Solarland.SolarCharacter.OnJogSetClient__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnJetFlyStart__DelegateSignature(enum class EJetFlyType& Type); // DelegateFunction Solarland.SolarCharacter.OnJetFlyStart__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnHUDTeamPosSet__DelegateSignature(char PosInTeam); // DelegateFunction Solarland.SolarCharacter.OnHUDTeamPosSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnHUDRescueBtnActivitySet__DelegateSignature(bool bIsActive); // DelegateFunction Solarland.SolarCharacter.OnHUDRescueBtnActivitySet__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void OnHUDNickNameSet__DelegateSignature(struct FString NickName); // DelegateFunction Solarland.SolarCharacter.OnHUDNickNameSet__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void OnHUDDistanceSet__DelegateSignature(float Distance); // DelegateFunction Solarland.SolarCharacter.OnHUDDistanceSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnHUDDistanceDisplaySet__DelegateSignature(bool bShown); // DelegateFunction Solarland.SolarCharacter.OnHUDDistanceDisplaySet__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void OnHealthUpdated__DelegateSignature(struct ASolarCharacter* Character); // DelegateFunction Solarland.SolarCharacter.OnHealthUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	bool OnExitOpenTreasureBox(); // Function Solarland.SolarCharacter.OnExitOpenTreasureBox // (Final|Native|Public|BlueprintCallable) // @ game+0x27857a0
	bool OnEnterOpenTreasureBox(); // Function Solarland.SolarCharacter.OnEnterOpenTreasureBox // (Final|Native|Public|BlueprintCallable) // @ game+0x2785770
	void OnEnterCombat(enum class EEnterBattleType battleType); // Function Solarland.SolarCharacter.OnEnterCombat // (Final|Native|Public) // @ game+0x27856f0
	void OnEnergyStateUpdateEvent__DelegateSignature(char InEnergyState); // DelegateFunction Solarland.SolarCharacter.OnEnergyStateUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnDrivingStateChanged(struct ASolarVehiclePawn* SolarVehicle, enum class EDriveState NewDriveState, enum class EDriveState OldDriveState, int32_t NewSeatIndex, int32_t OldSeatIndex); // Function Solarland.SolarCharacter.OnDrivingStateChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnDetectRadarStation(bool bEnter, struct ASolarRadarStation* InRadarStation); // Function Solarland.SolarCharacter.OnDetectRadarStation // (Final|Native|Public|BlueprintCallable) // @ game+0x2785620
	void OnDetectElectricShop(bool bEnter, struct ASolarElectricShop* InElectricShop); // Function Solarland.SolarCharacter.OnDetectElectricShop // (Final|Native|Public|BlueprintCallable) // @ game+0x2785550
	void OnCurShieldValueChangedDelegate__DelegateSignature(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID); // DelegateFunction Solarland.SolarCharacter.OnCurShieldValueChangedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCurEnergyUpdateEvent__DelegateSignature(float InCurValue, float InChangeValue); // DelegateFunction Solarland.SolarCharacter.OnCurEnergyUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnConsumableNumChangedEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnConsumableNumChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnClientMovementComponentEnabled(); // Function Solarland.SolarCharacter.OnClientMovementComponentEnabled // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1ae5db0
	void OnChargeInfoUpdateEvent__DelegateSignature(struct ASolarCharacter* OwnerCharacter, float ChargeFrequency, float ChargeQuantity); // DelegateFunction Solarland.SolarCharacter.OnChargeInfoUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterSpawnDeathBox(bool bCheat, struct ASolarPlayerState* InKiller); // Function Solarland.SolarCharacter.OnCharacterSpawnDeathBox // (Final|Native|Public) // @ game+0x2785480
	void OnCharacterSkinReset__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnCharacterSkinReset__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterInhibitBattlePromptTagChanged(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarCharacter.OnCharacterInhibitBattlePromptTagChanged // (Final|Native|Private) // @ game+0x27853b0
	void OnCharacterDeathEnd(); // Function Solarland.SolarCharacter.OnCharacterDeathEnd // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1ae4850
	void OnCharacterDaraSet__DelegateSignature(int32_t DataID); // DelegateFunction Solarland.SolarCharacter.OnCharacterDaraSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCancelResurrectProgress(int32_t InTextId); // Function Solarland.SolarCharacter.OnCancelResurrectProgress // (Final|Native|Public) // @ game+0x2785320
	void OnBatteryIdUpdateEvent__DelegateSignature(int32_t InBatteryId); // DelegateFunction Solarland.SolarCharacter.OnBatteryIdUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnBackpackWeaponPartUpdateEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnBackpackWeaponPartUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnBackpackItemUpdateEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnBackpackItemUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnBackpackEquipUpdateEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnBackpackEquipUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnBackpackEnergyUpdateEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnBackpackEnergyUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnApplyDyingDamage(float DeltaTime); // Function Solarland.SolarCharacter.OnApplyDyingDamage // (Final|Native|Public) // @ game+0x27852a0
	void NotifyLeaveSafeArea(); // Function Solarland.SolarCharacter.NotifyLeaveSafeArea // (Final|Native|Public|BlueprintCallable) // @ game+0x2785280
	void NotifyEnterSafeArea(); // Function Solarland.SolarCharacter.NotifyEnterSafeArea // (Final|Native|Public|BlueprintCallable) // @ game+0x2785260
	void NetTriggerRadarStation(); // Function Solarland.SolarCharacter.NetTriggerRadarStation // (Final|Native|Public|BlueprintCallable) // @ game+0x2785240
	bool NetGetOnVehicle(struct ASolarVehiclePawn* InVehicle, int32_t SeatIndex); // Function Solarland.SolarCharacter.NetGetOnVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x2785170
	bool NetGetOffVehicle(bool bShouldEject, bool bNeedNotify); // Function Solarland.SolarCharacter.NetGetOffVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x2785090
	void MultiSetGetOffVehicleLocationAndRotation(struct FVector DropLocation, float TeleportRotYaw); // Function Solarland.SolarCharacter.MultiSetGetOffVehicleLocationAndRotation // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x2784e10
	void MultiResetCharacter(struct FVector Location, struct FRotator Rotation, bool bClearWeapons); // Function Solarland.SolarCharacter.MultiResetCharacter // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x2784d00
	void MultiOnRebirth(); // Function Solarland.SolarCharacter.MultiOnRebirth // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1ae4e50
	void MulticastPlayDuckRollingHitCharacterEffect(struct ASolarCharacter* TargetCharacter, struct FVector HitLocation, bool bNoDamage); // Function Solarland.SolarCharacter.MulticastPlayDuckRollingHitCharacterEffect // (Net|Native|Event|NetMulticast|Protected|HasDefaults) // @ game+0x2784f80
	void MulticastAddHitTrace(struct TArray<struct FHitTraceInfo> Infos); // Function Solarland.SolarCharacter.MulticastAddHitTrace // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x2784ee0
	void MarkWorldByRep(struct FWorldMarkData& NewWorldMarkData); // Function Solarland.SolarCharacter.MarkWorldByRep // (Final|Native|Public|HasOutParms) // @ game+0x2784bd0
	void MarkWarningOnWorld(); // Function Solarland.SolarCharacter.MarkWarningOnWorld // (Final|Native|Public) // @ game+0x2784bb0
	void MarkQuickChatOnWorld(int32_t QuickChatID); // Function Solarland.SolarCharacter.MarkQuickChatOnWorld // (Final|Native|Public) // @ game+0x2784b20
	void MarkPointOnWorld(); // Function Solarland.SolarCharacter.MarkPointOnWorld // (Final|Native|Public) // @ game+0x2784b00
	void MarkItemInPickupList(struct FVector& ItemLocation, struct FSolarItemData& ItemData); // Function Solarland.SolarCharacter.MarkItemInPickupList // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x27849b0
	void KillMe(); // Function Solarland.SolarCharacter.KillMe // (Final|Exec|Native|Public) // @ game+0x9043b0
	void K2_TryRemoveBillboardIcon(struct FGameplayTag IconTag); // Function Solarland.SolarCharacter.K2_TryRemoveBillboardIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x2784890
	void K2_SetCanShowBattlePrompt(bool NewValue); // Function Solarland.SolarCharacter.K2_SetCanShowBattlePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0x2784800
	void K2_RemoveGameplayTag(struct FGameplayTag Tag, bool bReplicated); // Function Solarland.SolarCharacter.K2_RemoveGameplayTag // (Final|Native|Public|BlueprintCallable) // @ game+0x2784730
	void K2_PlaySoundGroup(struct FName SoundGroupName, struct FSoundGroupPlayContextByCharacter Context); // Function Solarland.SolarCharacter.K2_PlaySoundGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x2784610
	bool K2_IsSwimming(); // Function Solarland.SolarCharacter.K2_IsSwimming // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x27845e0
	bool K2_IsInAir(); // Function Solarland.SolarCharacter.K2_IsInAir // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x27845b0
	bool K2_HasMatchingGameplayTag(struct FGameplayTag Tag); // Function Solarland.SolarCharacter.K2_HasMatchingGameplayTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2784510
	struct UWidgetComponent* K2_GetTeamHUDComp(); // Function Solarland.SolarCharacter.K2_GetTeamHUDComp // (Final|Native|Protected|BlueprintCallable) // @ game+0x27844e0
	struct AHUD* K2_GetControlledHUD(); // Function Solarland.SolarCharacter.K2_GetControlledHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27844b0
	void K2_AddGameplayTag(struct FGameplayTag Tag, bool bReplicated); // Function Solarland.SolarCharacter.K2_AddGameplayTag // (Final|Native|Public|BlueprintCallable) // @ game+0x27843a0
	void K2_AddBillboardIcon(struct FGameplayTag IconTag); // Function Solarland.SolarCharacter.K2_AddBillboardIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x2784310
	bool IsWeaponsAvailable(); // Function Solarland.SolarCharacter.IsWeaponsAvailable // (Final|Native|Public) // @ game+0x27842e0
	bool IsWeaponCauseTeamDamage(); // Function Solarland.SolarCharacter.IsWeaponCauseTeamDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x27842b0
	bool IsViewportFocused(); // Function Solarland.SolarCharacter.IsViewportFocused // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783dd0
	bool IsVerticalJetFlying(); // Function Solarland.SolarCharacter.IsVerticalJetFlying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2784280
	bool IsVehicleFire(); // Function Solarland.SolarCharacter.IsVehicleFire // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2784250
	bool IsTeammateWithLocalOrSpecTargetPlayer(bool bIncludingSelf); // Function Solarland.SolarCharacter.IsTeammateWithLocalOrSpecTargetPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27841b0
	bool IsTeammateWith(struct ASolarCharacter* Other); // Function Solarland.SolarCharacter.IsTeammateWith // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2784110
	bool IsTeamHUDValid(); // Function Solarland.SolarCharacter.IsTeamHUDValid // (Final|Native|Public|BlueprintCallable) // @ game+0x27840e0
	bool IsSprinting(); // Function Solarland.SolarCharacter.IsSprinting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27840b0
	bool IsSpectatingOtherPlayer(); // Function Solarland.SolarCharacter.IsSpectatingOtherPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2784080
	bool IsSkyCharging(); // Function Solarland.SolarCharacter.IsSkyCharging // (Final|Native|Public|Const) // @ game+0x2784050
	bool IsShieldValueLow(); // Function Solarland.SolarCharacter.IsShieldValueLow // (Final|Native|Public) // @ game+0x2784020
	bool IsShieldMaxLevel(); // Function Solarland.SolarCharacter.IsShieldMaxLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783ff0
	bool IsShieldFullyCharged(); // Function Solarland.SolarCharacter.IsShieldFullyCharged // (Final|Native|Public|Const) // @ game+0x2783fc0
	bool IsScopeWantedByWeapon(int32_t Slot, enum class EWeaponPartType ScopeType); // Function Solarland.SolarCharacter.IsScopeWantedByWeapon // (Final|Native|Public) // @ game+0x2783ef0
	bool IsScopeOpening(); // Function Solarland.SolarCharacter.IsScopeOpening // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783ec0
	bool IsRescuing(); // Function Solarland.SolarCharacter.IsRescuing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783e90
	bool IsReplayPlaying(); // Function Solarland.SolarCharacter.IsReplayPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783e60
	bool IsReloading(); // Function Solarland.SolarCharacter.IsReloading // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783e30
	bool IsRechargerEnough(); // Function Solarland.SolarCharacter.IsRechargerEnough // (Final|Native|Public|Const) // @ game+0x2783e00
	bool IsPlayerLocallyControlledOrSpectated(); // Function Solarland.SolarCharacter.IsPlayerLocallyControlledOrSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783dd0
	bool IsPileCharging(); // Function Solarland.SolarCharacter.IsPileCharging // (Final|Native|Public|Const) // @ game+0x2783da0
	bool IsOwnerOffline(); // Function Solarland.SolarCharacter.IsOwnerOffline // (Final|Native|Protected) // @ game+0x2783d70
	bool IsOpeningTreasureBox(); // Function Solarland.SolarCharacter.IsOpeningTreasureBox // (Final|Native|Public|Const) // @ game+0x2783d40
	bool IsNoCharging(); // Function Solarland.SolarCharacter.IsNoCharging // (Final|Native|Public|Const) // @ game+0x2783d10
	bool IsMovingOnGround(enum class EVelocityStatus VelocityStatus); // Function Solarland.SolarCharacter.IsMovingOnGround // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783c80
	bool IsMeleeAttacking(); // Function Solarland.SolarCharacter.IsMeleeAttacking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783c50
	bool IsMaxLevelInGame(); // Function Solarland.SolarCharacter.IsMaxLevelInGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783c20
	bool IsLocalPlayerSpectateAsThirdPerson(); // Function Solarland.SolarCharacter.IsLocalPlayerSpectateAsThirdPerson // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783bf0
	bool IsLaunching(); // Function Solarland.SolarCharacter.IsLaunching // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783bc0
	bool IsJumping(); // Function Solarland.SolarCharacter.IsJumping // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783b90
	bool IsJetFlying(); // Function Solarland.SolarCharacter.IsJetFlying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783b60
	bool IsInZoneInvisibility(); // Function Solarland.SolarCharacter.IsInZoneInvisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783ad0
	bool IsInVehicle(); // Function Solarland.SolarCharacter.IsInVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783a70
	bool IsInSkywardDive(); // Function Solarland.SolarCharacter.IsInSkywardDive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783a40
	bool IsInsideVehicle(); // Function Solarland.SolarCharacter.IsInsideVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783b00
	bool IsInShoulderOrScopeView(); // Function Solarland.SolarCharacter.IsInShoulderOrScopeView // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783a10
	bool IsInScopeView(); // Function Solarland.SolarCharacter.IsInScopeView // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27839e0
	bool IsInRescueState(); // Function Solarland.SolarCharacter.IsInRescueState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27839b0
	bool IsInMassInvisibilityPrepare(); // Function Solarland.SolarCharacter.IsInMassInvisibilityPrepare // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783980
	bool IsInMassInvisibility(); // Function Solarland.SolarCharacter.IsInMassInvisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783950
	bool IsInInvisibleStatus(); // Function Solarland.SolarCharacter.IsInInvisibleStatus // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783920
	bool IsInDeathVerge(); // Function Solarland.SolarCharacter.IsInDeathVerge // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783730
	bool IsHumanCharacter(); // Function Solarland.SolarCharacter.IsHumanCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x27838f0
	bool IsHorizontalJetFlying(); // Function Solarland.SolarCharacter.IsHorizontalJetFlying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27838c0
	bool IsHoldingWeapon(); // Function Solarland.SolarCharacter.IsHoldingWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783880
	bool IsFullHealth(); // Function Solarland.SolarCharacter.IsFullHealth // (Final|Native|Public|Const) // @ game+0x2783850
	bool IsFullBodyMeleeAttacking(); // Function Solarland.SolarCharacter.IsFullBodyMeleeAttacking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783820
	bool IsFiring(); // Function Solarland.SolarCharacter.IsFiring // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27837f0
	bool IsExistWeaponSeatedVehicleSeat(); // Function Solarland.SolarCharacter.IsExistWeaponSeatedVehicleSeat // (Final|Native|Public|Const) // @ game+0x27837c0
	bool IsEnergyCostAndChargeDisabled(); // Function Solarland.SolarCharacter.IsEnergyCostAndChargeDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783790
	bool IsE2M(); // Function Solarland.SolarCharacter.IsE2M // (Final|Native|Public|Const) // @ game+0x2783760
	bool IsDying(); // Function Solarland.SolarCharacter.IsDying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783730
	bool IsDoingAnyAttack(); // Function Solarland.SolarCharacter.IsDoingAnyAttack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783700
	bool IsCruising(); // Function Solarland.SolarCharacter.IsCruising // (Final|Native|Public|Const) // @ game+0x27836d0
	bool IsClimbing(bool bIncludeWallRun); // Function Solarland.SolarCharacter.IsClimbing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783630
	bool IsCharacterDebugBlockDetectionEnabled(); // Function Solarland.SolarCharacter.IsCharacterDebugBlockDetectionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783600
	bool IsCanShowTeammateHUD(); // Function Solarland.SolarCharacter.IsCanShowTeammateHUD // (Final|Native|Public|Const) // @ game+0x27835d0
	bool IsBoxCharging(); // Function Solarland.SolarCharacter.IsBoxCharging // (Final|Native|Public|Const) // @ game+0x27835a0
	bool IsBolting(); // Function Solarland.SolarCharacter.IsBolting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783570
	bool IsBigRechargerEnough(); // Function Solarland.SolarCharacter.IsBigRechargerEnough // (Final|Native|Public|Const) // @ game+0x2783540
	bool IsBeingSpectated(); // Function Solarland.SolarCharacter.IsBeingSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783510
	bool IsBeingRescue(); // Function Solarland.SolarCharacter.IsBeingRescue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27834e0
	bool IsAllyWithPlayerState(struct ASolarPlayerState* Other); // Function Solarland.SolarCharacter.IsAllyWithPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783440
	bool IsAllyWithLocalPlayer(); // Function Solarland.SolarCharacter.IsAllyWithLocalPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783410
	bool IsAllyWithLocalOrSpecTargetPlayer(bool bIncludingSelf); // Function Solarland.SolarCharacter.IsAllyWithLocalOrSpecTargetPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783370
	bool IsAllyWith(struct ASolarCharacter* Other); // Function Solarland.SolarCharacter.IsAllyWith // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27832d0
	bool IsAllEnergyFull(); // Function Solarland.SolarCharacter.IsAllEnergyFull // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27832a0
	bool IsAiming(); // Function Solarland.SolarCharacter.IsAiming // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2783270
	bool IsAbleToContinueRecharge(); // Function Solarland.SolarCharacter.IsAbleToContinueRecharge // (Final|Native|Public|Const) // @ game+0x2783240
	void InputRoleAbilityTacticalReleased(); // Function Solarland.SolarCharacter.InputRoleAbilityTacticalReleased // (Final|Native|Public) // @ game+0x2783220
	void InputRoleAbilityTacticalPressed(); // Function Solarland.SolarCharacter.InputRoleAbilityTacticalPressed // (Final|Native|Public) // @ game+0x2783200
	void InputRoleAbilitySuperReleased(); // Function Solarland.SolarCharacter.InputRoleAbilitySuperReleased // (Final|Native|Public) // @ game+0x27831e0
	void InputRoleAbilitySuperPressed(); // Function Solarland.SolarCharacter.InputRoleAbilitySuperPressed // (Final|Native|Public) // @ game+0x27831c0
	void InputCancelRoleAbility(); // Function Solarland.SolarCharacter.InputCancelRoleAbility // (Final|Native|Public) // @ game+0x27831a0
	void InitShieldUpgradeMatMaxPile(); // Function Solarland.SolarCharacter.InitShieldUpgradeMatMaxPile // (Final|Native|Public) // @ game+0x27830b0
	void InitShieldPropertyByConfig(); // Function Solarland.SolarCharacter.InitShieldPropertyByConfig // (Final|Native|Protected) // @ game+0x2783090
	void InitShieldOperatorTimeline(); // Function Solarland.SolarCharacter.InitShieldOperatorTimeline // (Final|Native|Public) // @ game+0x2783070
	void InitializeCharacterData(int32_t InCharacterId, int32_t InSkinID); // Function Solarland.SolarCharacter.InitializeCharacterData // (Final|Native|Public|BlueprintCallable) // @ game+0x27830d0
	void InitGameStatisticEquipment(); // Function Solarland.SolarCharacter.InitGameStatisticEquipment // (Final|Native|Public) // @ game+0x2783050
	void InitCharacterDefaultShield(struct FSolarItemData& InShiledID); // Function Solarland.SolarCharacter.InitCharacterDefaultShield // (Final|Native|Public|HasOutParms) // @ game+0x2782f60
	void IncreaseRechargedTimes(); // Function Solarland.SolarCharacter.IncreaseRechargedTimes // (Final|Native|Public) // @ game+0x2782f40
	void HideShieldUpgradeOperator(); // Function Solarland.SolarCharacter.HideShieldUpgradeOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x2782f20
	void HideShieldRepairEffectItem(); // Function Solarland.SolarCharacter.HideShieldRepairEffectItem // (Final|Native|Public|BlueprintCallable) // @ game+0x2782f00
	void HideShieldOperator(); // Function Solarland.SolarCharacter.HideShieldOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x2782ee0
	void HideRescueInjector(); // Function Solarland.SolarCharacter.HideRescueInjector // (Final|Native|Public|BlueprintCallable) // @ game+0x2782ec0
	bool HasBlockBetweenUs(struct AActor* A, struct AActor* B, bool bIsVehicle, bool bShowLog); // Function Solarland.SolarCharacter.HasBlockBetweenUs // (Final|Native|Public) // @ game+0x2782d20
	bool HasAnyShieldEquiped(); // Function Solarland.SolarCharacter.HasAnyShieldEquiped // (Final|Native|Public|BlueprintCallable) // @ game+0x2782cf0
	bool HasAnyRecharger(); // Function Solarland.SolarCharacter.HasAnyRecharger // (Final|Native|Public|Const) // @ game+0x2782cc0
	bool HandleDying(enum class EHealthChangeType ChangeType, struct AController* InstigatorController); // Function Solarland.SolarCharacter.HandleDying // (Final|Native|Public|BlueprintCallable) // @ game+0x2782bf0
	struct TMap<enum class EWeaponPartType, int32_t> GetWeaponPartsMap(); // Function Solarland.SolarCharacter.GetWeaponPartsMap // (Final|Native|Public|Const) // @ game+0x2782bc0
	struct TArray<int32_t> GetWeaponPartsArray(); // Function Solarland.SolarCharacter.GetWeaponPartsArray // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782b90
	bool GetWeaponItemDataBySlot(int32_t InSlot, struct FSolarItemData& ItemData); // Function Solarland.SolarCharacter.GetWeaponItemDataBySlot // (Final|Native|Public|HasOutParms|Const) // @ game+0x2782a40
	struct TMap<int32_t, struct FSolarItemData> GetWeaponDataMap(); // Function Solarland.SolarCharacter.GetWeaponDataMap // (Final|Native|Public|Const) // @ game+0x2782a10
	int32_t GetVerticalJetFlyTotalTimes(); // Function Solarland.SolarCharacter.GetVerticalJetFlyTotalTimes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27829a0
	int32_t GetVerticalJetFlyRestTimes(); // Function Solarland.SolarCharacter.GetVerticalJetFlyRestTimes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782970
	void GetVerticalJetFlyCharging(float& OutValue, float& OutPercent); // Function Solarland.SolarCharacter.GetVerticalJetFlyCharging // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782890
	void GetVerticalJetFlyCD(float& OutValue, float& OutPercent); // Function Solarland.SolarCharacter.GetVerticalJetFlyCD // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x27827b0
	struct ASolarVehicleWeapon* GetVehicleWeapon(); // Function Solarland.SolarCharacter.GetVehicleWeapon // (Final|Native|Public|Const) // @ game+0x2782780
	char GetVehicleAbilityCounter(); // Function Solarland.SolarCharacter.GetVehicleAbilityCounter // (Final|Native|Public) // @ game+0x2782750
	struct TMap<enum class EItemType, struct FSolarItemData> GetTypeKeyItemMap(); // Function Solarland.SolarCharacter.GetTypeKeyItemMap // (Final|Native|Public|Const) // @ game+0x27826b0
	float GetTreatmentRemaining(); // Function Solarland.SolarCharacter.GetTreatmentRemaining // (Final|Native|Public|Const) // @ game+0x2782680
	float GetTreatmentDuration(); // Function Solarland.SolarCharacter.GetTreatmentDuration // (Final|Native|Public|Const) // @ game+0x2782650
	void GetTeamHUDTranslucentData(float& CheckDistance, float& TranslucentValue); // Function Solarland.SolarCharacter.GetTeamHUDTranslucentData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782570
	struct UUserWidget* GetTeamHUD(); // Function Solarland.SolarCharacter.GetTeamHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782540
	enum class EPhysicalSurface GetSteppedSurfaceType(); // Function Solarland.SolarCharacter.GetSteppedSurfaceType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782500
	struct ASolarSpectateInfo* GetSpectateInfo(); // Function Solarland.SolarCharacter.GetSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27824d0
	struct UAnimInstance* GetSpecAnimInstance(enum class ESpecAnimInstType SpecAnimType); // Function Solarland.SolarCharacter.GetSpecAnimInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782440
	struct ASolarReplayPlayerController* GetSolarReplayPlayerController(); // Function Solarland.SolarCharacter.GetSolarReplayPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782410
	struct ASolarPlayerState* GetSolarPlayerStateFromSameTeam(); // Function Solarland.SolarCharacter.GetSolarPlayerStateFromSameTeam // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27823e0
	struct ASolarPlayerState* GetSolarPlayerStateFromSameAlly(); // Function Solarland.SolarCharacter.GetSolarPlayerStateFromSameAlly // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27823b0
	struct ASolarPlayerState* GetSolarPlayerState(); // Function Solarland.SolarCharacter.GetSolarPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782380
	struct FString GetSolarPlayerID(); // Function Solarland.SolarCharacter.GetSolarPlayerID // (Native|Public|Const) // @ game+0x2782300
	struct ASolarPlayerController* GetSolarPlayerController(bool bSkipPossessCheck); // Function Solarland.SolarCharacter.GetSolarPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782260
	struct USolarCharacterMovementComponent* GetSolarCharacterMovementComponent(); // Function Solarland.SolarCharacter.GetSolarCharacterMovementComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781db0
	struct ASolarBotAIController* GetSolarAIController(); // Function Solarland.SolarCharacter.GetSolarAIController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782140
	struct USolarAbilitySystemComponent* GetSolarAbilitySystemComponentSimple(); // Function Solarland.SolarCharacter.GetSolarAbilitySystemComponentSimple // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782170
	struct FVector GetSocketLocationAtPrimaryMesh(struct FName& InSocketName); // Function Solarland.SolarCharacter.GetSocketLocationAtPrimaryMesh // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782090
	float GetSkydiveLandingHeight(); // Function Solarland.SolarCharacter.GetSkydiveLandingHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2782060
	struct UCharacterSkinConfig* GetSkinConfig(int32_t InSkinID); // Function Solarland.SolarCharacter.GetSkinConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2781fd0
	int32_t GetShieldWorthByID(int32_t InShieldID); // Function Solarland.SolarCharacter.GetShieldWorthByID // (Final|Native|Protected) // @ game+0x2781f30
	int32_t GetShieldUpgradeNeedMatNum(); // Function Solarland.SolarCharacter.GetShieldUpgradeNeedMatNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781f00
	int32_t GetShieldUpgradeMatNum(); // Function Solarland.SolarCharacter.GetShieldUpgradeMatNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781ed0
	int32_t GetShieldUpgradeMatMaxPile(); // Function Solarland.SolarCharacter.GetShieldUpgradeMatMaxPile // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781ea0
	float GetShieldRecoveryAmount(); // Function Solarland.SolarCharacter.GetShieldRecoveryAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781e70
	float GetShieldRechargeRemainningTime(); // Function Solarland.SolarCharacter.GetShieldRechargeRemainningTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781e40
	float GetShieldRechargeDuration(); // Function Solarland.SolarCharacter.GetShieldRechargeDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781e10
	int32_t GetShieldMaxLevel(); // Function Solarland.SolarCharacter.GetShieldMaxLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781de0
	struct USolarCharacterMovementComponent* GetSafeSolarCharacterMovement(); // Function Solarland.SolarCharacter.GetSafeSolarCharacterMovement // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781db0
	enum class ERoleSkillStatus GetRoleAbilityState(char RoleAbilityIndex); // Function Solarland.SolarCharacter.GetRoleAbilityState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781d20
	struct ASolarUAVRescue* GetRescuingUAV(); // Function Solarland.SolarCharacter.GetRescuingUAV // (Final|Native|Public|Const) // @ game+0x2781ce0
	struct ASolarCharacter* GetRescuingCharacter(); // Function Solarland.SolarCharacter.GetRescuingCharacter // (Final|Native|Public|Const) // @ game+0x2781ca0
	float GetRescueTime(); // Function Solarland.SolarCharacter.GetRescueTime // (Final|Native|Public|Const) // @ game+0x2781c70
	float GetRecoveryDuartionModify(); // Function Solarland.SolarCharacter.GetRecoveryDuartionModify // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	float GetRecoveryAmountModify(); // Function Solarland.SolarCharacter.GetRecoveryAmountModify // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct ASolarUAVRescue* GetPermanentRescueUAV(); // Function Solarland.SolarCharacter.GetPermanentRescueUAV // (Final|Native|Public|Const) // @ game+0x2781c30
	struct FRotator GetNormalizeCameraRotation(); // Function Solarland.SolarCharacter.GetNormalizeCameraRotation // (Final|Native|Public|HasDefaults|Const) // @ game+0x2781bf0
	bool GetNewItemData(int32_t InItemID, int32_t InItemNum, struct FSolarItemData& OutItemData); // Function Solarland.SolarCharacter.GetNewItemData // (Final|Native|Public|HasOutParms) // @ game+0x2781a60
	char GetMyTeamID(); // Function Solarland.SolarCharacter.GetMyTeamID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781a30
	float GetMaxShieldValue(); // Function Solarland.SolarCharacter.GetMaxShieldValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781a00
	float GetMaxExtraEnergy(); // Function Solarland.SolarCharacter.GetMaxExtraEnergy // (Final|Native|Public|Const) // @ game+0x27819d0
	float GetMaxEnergy(); // Function Solarland.SolarCharacter.GetMaxEnergy // (Final|Native|Public|Const) // @ game+0x27819d0
	struct ASolarPlayerState* GetLastDownBy(); // Function Solarland.SolarCharacter.GetLastDownBy // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2781990
	int32_t GetJetPackModuleLevel(bool bVertical); // Function Solarland.SolarCharacter.GetJetPackModuleLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27818f0
	int32_t GetItemNumById(int32_t InItemID); // Function Solarland.SolarCharacter.GetItemNumById // (Final|Native|Public|Const) // @ game+0x2781850
	int32_t GetItemMaxPile(int32_t InItemID); // Function Solarland.SolarCharacter.GetItemMaxPile // (Final|Native|Public|Const) // @ game+0x27817b0
	bool GetItemDataByType(enum class EItemType ItemType, struct FSolarItemData& ItemData); // Function Solarland.SolarCharacter.GetItemDataByType // (Final|Native|Public|HasOutParms|Const) // @ game+0x2781660
	bool GetItemDataById(int32_t InItemID, struct FSolarItemData& ItemData); // Function Solarland.SolarCharacter.GetItemDataById // (Final|Native|Public|HasOutParms|Const) // @ game+0x2781510
	bool GetIsActiveEMP(); // Function Solarland.SolarCharacter.GetIsActiveEMP // (Final|Native|Public|Const) // @ game+0x27814f0
	struct FVector GetInputVector(); // Function Solarland.SolarCharacter.GetInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x27814b0
	struct TMap<int32_t, struct FSolarItemData> GetIdKeyItemMap(); // Function Solarland.SolarCharacter.GetIdKeyItemMap // (Final|Native|Public|Const) // @ game+0x2781480
	int32_t GetHorizontalJetFlyTotalTimes(); // Function Solarland.SolarCharacter.GetHorizontalJetFlyTotalTimes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781450
	int32_t GetHorizontalJetFlyRestTimes(); // Function Solarland.SolarCharacter.GetHorizontalJetFlyRestTimes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781420
	void GetHorizontalJetFlyCharging(float& OutValue, float& OutPercent); // Function Solarland.SolarCharacter.GetHorizontalJetFlyCharging // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781340
	void GetHorizontalJetFlyCD(float& OutValue, float& OutPercent); // Function Solarland.SolarCharacter.GetHorizontalJetFlyCD // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781260
	int32_t GetGenericSkillLevel(); // Function Solarland.SolarCharacter.GetGenericSkillLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781230
	struct ASolarCharacter* GetFirstPlayerControllerCharacter(struct UWorld* World); // Function Solarland.SolarCharacter.GetFirstPlayerControllerCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27811a0
	float GetFactorialAttributeModifies(int32_t AttributeID); // Function Solarland.SolarCharacter.GetFactorialAttributeModifies // (Final|Native|Public|BlueprintCallable) // @ game+0x2781100
	int32_t GetExtraEnergyModuleID(); // Function Solarland.SolarCharacter.GetExtraEnergyModuleID // (Final|Native|Public|Const) // @ game+0x27810e0
	float GetEnergyConsumptionModify(); // Function Solarland.SolarCharacter.GetEnergyConsumptionModify // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	enum class EDriveState GetDriveState(); // Function Solarland.SolarCharacter.GetDriveState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27810b0
	struct AActor* GetDamagerCauserActor(); // Function Solarland.SolarCharacter.GetDamagerCauserActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781080
	float GetCurrShieldValue(); // Function Solarland.SolarCharacter.GetCurrShieldValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2780e80
	int32_t GetCurrShieldID(); // Function Solarland.SolarCharacter.GetCurrShieldID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2780e50
	float GetCurrExtraEnergy(); // Function Solarland.SolarCharacter.GetCurrExtraEnergy // (Final|Native|Public|Const) // @ game+0x2780e20
	struct ASolarPlayerWeapon* GetCurrentWeapon(); // Function Solarland.SolarCharacter.GetCurrentWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781050
	enum class EWalkMode GetCurrentWalkMode(); // Function Solarland.SolarCharacter.GetCurrentWalkMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2781020
	float GetCurrentVehicleAbilityCooldownRemaining(char AbilityIndex); // Function Solarland.SolarCharacter.GetCurrentVehicleAbilityCooldownRemaining // (Final|Native|Public|Const) // @ game+0x2780f90
	float GetCurrentVehicleAbilityCooldownDuration(char AbilityIndex); // Function Solarland.SolarCharacter.GetCurrentVehicleAbilityCooldownDuration // (Final|Native|Public|Const) // @ game+0x2780f00
	int32_t GetCurrentShieldLevel(); // Function Solarland.SolarCharacter.GetCurrentShieldLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2780ed0
	enum class ECustomJumpType GetCurrentCustomJumpType(); // Function Solarland.SolarCharacter.GetCurrentCustomJumpType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2780eb0
	float GetCurrEnergy(); // Function Solarland.SolarCharacter.GetCurrEnergy // (Final|Native|Public|Const) // @ game+0x2780e20
	float GetCumulativeAttributeModifies(int32_t AttributeID); // Function Solarland.SolarCharacter.GetCumulativeAttributeModifies // (Final|Native|Public|BlueprintCallable) // @ game+0x2780d80
	struct APlayerController* GetControllingOrReplayController(); // Function Solarland.SolarCharacter.GetControllingOrReplayController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2780d20
	struct UStaticMesh* GetClipMeshOfHoldingWeapon(); // Function Solarland.SolarCharacter.GetClipMeshOfHoldingWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2780cf0
	int32_t GetClassTypeSkillLevel(); // Function Solarland.SolarCharacter.GetClassTypeSkillLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2780cc0
	void GetChargingStateForUI(bool& IsSky, bool& IsPile, bool& IsBox, bool& IsE2M); // Function Solarland.SolarCharacter.GetChargingStateForUI // (Final|Native|Public|HasOutParms) // @ game+0x2780b20
	struct FRotator GetCharacterLookAt(); // Function Solarland.SolarCharacter.GetCharacterLookAt // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2780ae0
	int32_t GetCharacterCameraConfigFOVSection(); // Function Solarland.SolarCharacter.GetCharacterCameraConfigFOVSection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2780ab0
	float GetCharacterCameraConfigFOV(); // Function Solarland.SolarCharacter.GetCharacterCameraConfigFOV // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2780a80
	struct USolarCharacterCameraComponent* GetCharacterCamera(); // Function Solarland.SolarCharacter.GetCharacterCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2780a50
	bool GetCanShowBattlePrompt(); // Function Solarland.SolarCharacter.GetCanShowBattlePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0x2780a20
	struct FRotator GetCameraRotation(); // Function Solarland.SolarCharacter.GetCameraRotation // (Final|Native|Public|HasDefaults|Const) // @ game+0x27809e0
	struct FVector GetCameraLocation(); // Function Solarland.SolarCharacter.GetCameraLocation // (Final|Native|Public|HasDefaults|Const) // @ game+0x27809a0
	void GetAllSkydiveLandingEffects(struct TArray<struct UParticleSystemComponent*>& OutEffects); // Function Solarland.SolarCharacter.GetAllSkydiveLandingEffects // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2780860
	void GetAllSkydiveFlyingEffects(struct TArray<struct UParticleSystemComponent*>& OutEffects); // Function Solarland.SolarCharacter.GetAllSkydiveFlyingEffects // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x27807b0
	void GatheringDeathBoxItem(bool bCheat, struct ASolarPlayerState* InKiller); // Function Solarland.SolarCharacter.GatheringDeathBoxItem // (Final|Native|Protected) // @ game+0x27806e0
	void GameStatisticsWeaponHit(struct ASolarCharacterBase* DamageCauserCharacter, struct FSolarPointDamageEvent& DamageInfo, float ActualDamage); // Function Solarland.SolarCharacter.GameStatisticsWeaponHit // (Final|Native|Public|HasOutParms) // @ game+0x2780580
	void GameStatisticsVehicleLanded(struct FHitResult& Hit); // Function Solarland.SolarCharacter.GameStatisticsVehicleLanded // (Final|Native|Public|HasOutParms) // @ game+0x27804a0
	void GameStatisticsVehicleInAir(); // Function Solarland.SolarCharacter.GameStatisticsVehicleInAir // (Final|Native|Public) // @ game+0x2780480
	void GameStatisticsVehicleHit(struct AActor* DamageCauser, float HitDamage); // Function Solarland.SolarCharacter.GameStatisticsVehicleHit // (Final|Native|Public) // @ game+0x27803b0
	void GameStatisticsItemChange(int32_t ItemID, enum class EItemChangeType PickType, int32_t OldNum, int32_t NewNum, int32_t TriggerType); // Function Solarland.SolarCharacter.GameStatisticsItemChange // (Final|Native|Public) // @ game+0x2780210
	void GameStatisticsGodWeapon(); // Function Solarland.SolarCharacter.GameStatisticsGodWeapon // (Final|Native|Public) // @ game+0x27801f0
	void GameStatisticsGetOnVehicleReason(int32_t Type, struct FString Type_Parameter); // Function Solarland.SolarCharacter.GameStatisticsGetOnVehicleReason // (Final|Native|Public) // @ game+0x27800c0
	void GameStatisticsGetOffVehicleReason(struct ASolarWeapon* CurrentWeapon, struct FString Param); // Function Solarland.SolarCharacter.GameStatisticsGetOffVehicleReason // (Final|Native|Public) // @ game+0x277ffe0
	void GameStatisticsEquipment(); // Function Solarland.SolarCharacter.GameStatisticsEquipment // (Final|Native|Public) // @ game+0x277ffc0
	void GameStatisticsElectricShopActivated(struct FVector& InLocation); // Function Solarland.SolarCharacter.GameStatisticsElectricShopActivated // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x277ff30
	void GameStatisticsDamageReason(struct FSolarPointDamageEvent& InDamageEvent, float ActualDamage); // Function Solarland.SolarCharacter.GameStatisticsDamageReason // (Final|Native|Public|HasOutParms) // @ game+0x277fe20
	void GameStatisticsCharacterSkill(bool bIsSuperSkill); // Function Solarland.SolarCharacter.GameStatisticsCharacterSkill // (Final|Native|Public) // @ game+0x277fd90
	void GameStatisticsBackpackFly(struct FBackpackStatisticsInfo& InBackpackStatisticsInfo); // Function Solarland.SolarCharacter.GameStatisticsBackpackFly // (Final|Native|Public|HasOutParms) // @ game+0x277fd00
	void ForceBreakSprintState(); // Function Solarland.SolarCharacter.ForceBreakSprintState // (Final|Native|Public|BlueprintCallable) // @ game+0x277fce0
	void FindMostValuableItemClient(struct TArray<struct FSolarItemData> ItemData, char FromWhichTeammate); // Function Solarland.SolarCharacter.FindMostValuableItemClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277fb90
	void ExitDyingMovement(); // Function Solarland.SolarCharacter.ExitDyingMovement // (Final|Native|Public) // @ game+0x277fb70
	void ExitDeathVerge(bool bClientSimulation); // Function Solarland.SolarCharacter.ExitDeathVerge // (Native|Public|BlueprintCallable) // @ game+0x277fae0
	void ExecuteGM(struct FString GMType, struct FString Param1, struct FString Param2); // Function Solarland.SolarCharacter.ExecuteGM // (Final|Native|Public|BlueprintCallable) // @ game+0x277f990
	void EnterVehicleWholeShield(struct UMaterialInterface* ShieldMaterialSource); // Function Solarland.SolarCharacter.EnterVehicleWholeShield // (Final|Native|Public|BlueprintCallable) // @ game+0x277f900
	void EnterVehicleStealth(); // Function Solarland.SolarCharacter.EnterVehicleStealth // (Final|Native|Public|BlueprintCallable) // @ game+0x277f8e0
	void EnterDyingMovement(); // Function Solarland.SolarCharacter.EnterDyingMovement // (Final|Native|Public) // @ game+0x277f8c0
	void EnterDeathVerge(bool bClientSimulation); // Function Solarland.SolarCharacter.EnterDeathVerge // (Native|Public|BlueprintCallable) // @ game+0x277f830
	void EnableCharacterDebugInfo_BlockDetection(bool bEnabled); // Function Solarland.SolarCharacter.EnableCharacterDebugInfo_BlockDetection // (Final|Native|Public|BlueprintCallable) // @ game+0x26446a0
	void DoReceivingPoisonDamage(); // Function Solarland.SolarCharacter.DoReceivingPoisonDamage // (Final|Native|Public) // @ game+0x277f810
	void DoOperation(enum class ECharacterOperation OperationType, struct UObject* Target); // Function Solarland.SolarCharacter.DoOperation // (Final|Native|Public|BlueprintCallable) // @ game+0x277f740
	void DisCardShield(); // Function Solarland.SolarCharacter.DisCardShield // (Final|Native|Public) // @ game+0x277f720
	void CreateTreasureBoxOperator(); // Function Solarland.SolarCharacter.CreateTreasureBoxOperator // (Final|Native|Public) // @ game+0x277f700
	void CreateShieldUpgradeOperator(); // Function Solarland.SolarCharacter.CreateShieldUpgradeOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x277f6e0
	void CreateShieldRepairEffectItem(); // Function Solarland.SolarCharacter.CreateShieldRepairEffectItem // (Final|Native|Public|BlueprintCallable) // @ game+0x277f6c0
	void CreateShieldOperator(); // Function Solarland.SolarCharacter.CreateShieldOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x277f6a0
	struct UWidgetComponent* CreateOwnTeammateHUDInternal(struct ASolarPlayerState* SelfData); // Function Solarland.SolarCharacter.CreateOwnTeammateHUDInternal // (Final|Native|Protected) // @ game+0x277f600
	struct UWidgetComponent* CreateOwnTeammateHUD(); // Function Solarland.SolarCharacter.CreateOwnTeammateHUD // (Final|Native|Public|BlueprintCallable) // @ game+0x277f5d0
	void CompleteRescuingImmediate(); // Function Solarland.SolarCharacter.CompleteRescuingImmediate // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x277f4e0
	void ClientUpdateTracking(int32_t Mode, int32_t Index, struct FVector Location); // Function Solarland.SolarCharacter.ClientUpdateTracking // (Final|Net|NetReliableNative|Event|Private|HasDefaults|NetClient) // @ game+0x277f3d0
	void ClientSuperRadarOnceScanned(int32_t ScannedNum); // Function Solarland.SolarCharacter.ClientSuperRadarOnceScanned // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277f340
	void ClientStartRecharge(float InCurrentValue, float InRecoveryDuration, float InRecoveryAmount, enum class EShieldRechargeState ShieldRechargeType, int32_t InShieldContributorCharacterId, bool bFixPreAdd); // Function Solarland.SolarCharacter.ClientStartRecharge // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277f150
	void ClientSetServerBlockDetectionResult(struct FString Info); // Function Solarland.SolarCharacter.ClientSetServerBlockDetectionResult // (Final|Net|Native|Event|Private|NetClient) // @ game+0x277f0b0
	void ClientRPCDisplayAllElectricShops(struct TArray<struct FVector> AllPositions); // Function Solarland.SolarCharacter.ClientRPCDisplayAllElectricShops // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x277eaf0
	void ClientRestoreActiveAbilitiesOnReconnected(struct TArray<struct FRestoreAbilityInfo> SpecHandles); // Function Solarland.SolarCharacter.ClientRestoreActiveAbilitiesOnReconnected // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x277f010
	void ClientRefreshAllShieldShops(); // Function Solarland.SolarCharacter.ClientRefreshAllShieldShops // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1ae58f0
	void ClientReceiveVehicleWeaponMessageArray(struct TArray<struct FPlayerWeaponMsg> InPlayerWeaponMessageArray); // Function Solarland.SolarCharacter.ClientReceiveVehicleWeaponMessageArray // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277ef40
	void ClientReceiveVehicleWeaponMessage(struct FPlayerWeaponMsg InPlayerWeaponMessage); // Function Solarland.SolarCharacter.ClientReceiveVehicleWeaponMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277ee90
	void ClientReceiveScanResult(struct TArray<struct FScannedInfo_NetQuantize> ScannedDatas, float SpanTimer); // Function Solarland.SolarCharacter.ClientReceiveScanResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277eda0
	void ClientReceiveCharacterWeaponMessageArray(struct TArray<struct FPlayerWeaponMsg> InPlayerWeaponMessageArray); // Function Solarland.SolarCharacter.ClientReceiveCharacterWeaponMessageArray // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277ecd0
	void ClientReceiveCharacterWeaponMessage(struct FPlayerWeaponMsg InPlayerWeaponMessage); // Function Solarland.SolarCharacter.ClientReceiveCharacterWeaponMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277ec20
	void ClientRadarOnceScanned(int32_t ScannedNum); // Function Solarland.SolarCharacter.ClientRadarOnceScanned // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277eb90
	void ClientPlaySoundGroup(struct FName SoundGroupName); // Function Solarland.SolarCharacter.ClientPlaySoundGroup // (Net|Native|Event|Public|NetClient) // @ game+0x277ea60
	void ClientPlayHitEffect(struct FHitResult InHitResult, enum class ESolarHitType InHitType, struct FVector InRelativeHitLocation, struct ASolarCharacter* InCauserOwner, struct ASolarWeapon* InCauser, int32_t InWeaponID, int32_t InWeaponSkinID); // Function Solarland.SolarCharacter.ClientPlayHitEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults|NetClient) // @ game+0x277e810
	void ClientPlayDeathShow(enum class ESolarHitType InHitType, struct ASolarCharacter* InInstigator, struct AActor* InCauser, int32_t InWeaponID, int32_t InWeaponSkinID, bool bInVictoryDeath); // Function Solarland.SolarCharacter.ClientPlayDeathShow // (Net|NetReliableNative|Event|NetMulticast|Public|NetClient) // @ game+0x277e630
	void ClientOpenAirdropResponse(bool bIsOpening); // Function Solarland.SolarCharacter.ClientOpenAirdropResponse // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277e5a0
	void ClientOnTriggerCharacterDown(); // Function Solarland.SolarCharacter.ClientOnTriggerCharacterDown // (Net|Native|Event|Public|NetClient) // @ game+0x1ae4c30
	void ClientOnShieldUpgrade(int32_t CurrentShieldLevel); // Function Solarland.SolarCharacter.ClientOnShieldUpgrade // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277e510
	void ClientOnShieldReduceEffect(bool bBroken); // Function Solarland.SolarCharacter.ClientOnShieldReduceEffect // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277e480
	void ClientOnReconnecting(struct FReconnectionParams Params); // Function Solarland.SolarCharacter.ClientOnReconnecting // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x277e400
	void ClientOnContinuousTreatmentStarted(); // Function Solarland.SolarCharacter.ClientOnContinuousTreatmentStarted // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1ae5c10
	void ClientNotifyMarkedBySuperRadar(float InRadarLifeTime, struct FGameplayTag InTag); // Function Solarland.SolarCharacter.ClientNotifyMarkedBySuperRadar // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277e320
	void ClientNotifyMarkedByOnceScan(float InRadarLifeTime, struct FGameplayTag InTag); // Function Solarland.SolarCharacter.ClientNotifyMarkedByOnceScan // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277e240
	void ClientNotifyGameProgressCondition(struct FGameplayTag& InProgressTag); // Function Solarland.SolarCharacter.ClientNotifyGameProgressCondition // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x277e1b0
	void ClientNotifyCharacterExposed(float InRadarLifeTime, struct FGameplayTag InTag); // Function Solarland.SolarCharacter.ClientNotifyCharacterExposed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277e0d0
	void ClientNoticePickup(int32_t ItemID, int32_t ItemQuality); // Function Solarland.SolarCharacter.ClientNoticePickup // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277e000
	void ClientLeaveFromSkywardDiveLauncher(struct ASkywardDiveLauncher* InLauncher); // Function Solarland.SolarCharacter.ClientLeaveFromSkywardDiveLauncher // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277df70
	void ClientKilledCharacter(); // Function Solarland.SolarCharacter.ClientKilledCharacter // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1ae4e30
	void ClientHideShieldOperator(); // Function Solarland.SolarCharacter.ClientHideShieldOperator // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1ae50d0
	void ClientEnterAndRefreshSkywardDiveLauncher(struct ASkywardDiveLauncher* InLauncher, bool bInHasAvailableDevice); // Function Solarland.SolarCharacter.ClientEnterAndRefreshSkywardDiveLauncher // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277dea0
	void ClientCreateTreatEffect(); // Function Solarland.SolarCharacter.ClientCreateTreatEffect // (Net|Native|Event|NetMulticast|Public|NetClient) // @ game+0x1ae4b70
	void ClientCompleteRecharge(float InCurrentValue, float InChangeValue); // Function Solarland.SolarCharacter.ClientCompleteRecharge // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277ddd0
	void ClientCancelRecharge(bool BreakAnimOnly, float InCurrentValue, float InChangeValue, float MaxShieldVal, enum class EShieldCancelRechargeReason CancelReason); // Function Solarland.SolarCharacter.ClientCancelRecharge // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277dc20
	void ClientBroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, char RoleAbilityIndex); // Function Solarland.SolarCharacter.ClientBroadcastCharacterRoleAbilityContinousEvent // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277db00
	void ClientAckValidShieldUpgradeInteract(struct ASolarShieldUpgradeItemShop* InShop, enum class EShieldUpgradeInteractAckType AckReason); // Function Solarland.SolarCharacter.ClientAckValidShieldUpgradeInteract // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x277da30
	void ClearGameStatisticEquipment(); // Function Solarland.SolarCharacter.ClearGameStatisticEquipment // (Final|Native|Public) // @ game+0x277da10
	void ClearDeathBoxData(); // Function Solarland.SolarCharacter.ClearDeathBoxData // (Final|Native|Protected) // @ game+0x277d9f0
	float CheckSelfAltitudeInstantlyByTrace(struct FHitResult& HitGeography, bool bCheckEveryFrame, float traceDistOverride, bool bSimpleCheck); // Function Solarland.SolarCharacter.CheckSelfAltitudeInstantlyByTrace // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x277d840
	void ChangeSeatByIndex(int32_t TargetSeatIndex); // Function Solarland.SolarCharacter.ChangeSeatByIndex // (Final|Native|Public) // @ game+0x277d7b0
	void ChangeSeatByDefault(); // Function Solarland.SolarCharacter.ChangeSeatByDefault // (Final|Native|Public) // @ game+0x277d790
	void CGM_SpawnDeathBox(); // Function Solarland.SolarCharacter.CGM_SpawnDeathBox // (Final|Native|Public|BlueprintCallable) // @ game+0x277d500
	void CGM_EnterDeath(); // Function Solarland.SolarCharacter.CGM_EnterDeath // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1ae5530
	bool CanStickOutOfVehicle(bool bIgnoreSelfWeaponCheck); // Function Solarland.SolarCharacter.CanStickOutOfVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x277d6b0
	bool CanRebirth(); // Function Solarland.SolarCharacter.CanRebirth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x277d680
	bool CanOperateBackpack(); // Function Solarland.SolarCharacter.CanOperateBackpack // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x277d650
	bool CanMarkPointOnWorld(); // Function Solarland.SolarCharacter.CanMarkPointOnWorld // (Final|Native|Public) // @ game+0x277d620
	void CancelVehicleAbility(); // Function Solarland.SolarCharacter.CancelVehicleAbility // (Final|Native|Public) // @ game+0x277d770
	void CancelTreatment(); // Function Solarland.SolarCharacter.CancelTreatment // (Final|Native|Public|BlueprintCallable) // @ game+0x277d750
	void CalculateBubbleKillNum(struct TArray<struct ASolarCharacter*>& InstigatorCharacters, struct AActor* AttackWeapon); // Function Solarland.SolarCharacter.CalculateBubbleKillNum // (Final|Native|Public|HasOutParms) // @ game+0x277d520
	void BroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, char RoleAbilityIndex); // Function Solarland.SolarCharacter.BroadcastCharacterRoleAbilityContinousEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x277d3e0
	void BreakRechargeShield(); // Function Solarland.SolarCharacter.BreakRechargeShield // (Final|Native|Public) // @ game+0x277d3c0
	void BindUpdateHUDToOnHealthUpdateDelegateProc(struct ASolarCharacter* Character); // Function Solarland.SolarCharacter.BindUpdateHUDToOnHealthUpdateDelegateProc // (Final|Native|Private) // @ game+0x277d280
	void BindLocalPlayerSpectateDelegates(struct ASolarSpectateInfo* LocalSpecInfo); // Function Solarland.SolarCharacter.BindLocalPlayerSpectateDelegates // (Final|Native|Public) // @ game+0x277d1f0
	void BindActorToSelfTeam(struct AActor* Actor); // Function Solarland.SolarCharacter.BindActorToSelfTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x277d160
	void BeginplayPending__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.BeginplayPending__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void BeginPlayBlueprint(); // Function Solarland.SolarCharacter.BeginPlayBlueprint // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void AutoMarkItemForTeammateClient(int64_t ItemThisID); // Function Solarland.SolarCharacter.AutoMarkItemForTeammateClient // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x277d0d0
	void ApplyVehicleAbility(char AbilityIndex); // Function Solarland.SolarCharacter.ApplyVehicleAbility // (Final|Native|Public) // @ game+0x277d050
	void AfterTakeDamageResolve(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.AfterTakeDamageResolve // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void AfterDealDamageResolve(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.AfterDealDamageResolve // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void AddTrackingTarget(struct ASolarCharacterBase* Tracked); // Function Solarland.SolarCharacter.AddTrackingTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x277cfc0
	void AddTempAttributeModifies(int32_t AttributeID, bool bCumulOrFact, struct FName Tag, float Value); // Function Solarland.SolarCharacter.AddTempAttributeModifies // (Final|Native|Public|BlueprintCallable) // @ game+0x277ce60
	void AddDebugString(struct FString DebugString); // Function Solarland.SolarCharacter.AddDebugString // (Final|Native|Public|BlueprintCallable) // @ game+0x277cdc0
	void AddCurrExtraEnergyValue(float DeltaEnergy); // Function Solarland.SolarCharacter.AddCurrExtraEnergyValue // (Final|Native|Public) // @ game+0x277cd40
};

// Class Solarland.SCMCharacter
// Size: 0x22e0 (Inherited: 0x22e0)
struct ASCMCharacter : ASolarCharacter {
};

// Class Solarland.SCMLoadLevelAction
// Size: 0x78 (Inherited: 0x30)
struct USCMLoadLevelAction : UBlueprintAsyncActionBase {
	char pad_30[0x28]; // 0x30(0x28)
	struct FMulticastInlineDelegate OnElementLoadComplete; // 0x58(0x10)
	struct FMulticastInlineDelegate OnLoadComplete; // 0x68(0x10)

	struct USCMLoadLevelAction* LoadLevel(struct UObject* WorldContextObject, struct FString LevelName, struct TArray<struct FString>& Elements); // Function Solarland.SCMLoadLevelAction.LoadLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27088f0
	void HandleLoadComplete(); // Function Solarland.SCMLoadLevelAction.HandleLoadComplete // (Final|Native|Public) // @ game+0x2708500
};

// Class Solarland.SCMLoadElementAction
// Size: 0x58 (Inherited: 0x30)
struct USCMLoadElementAction : UBlueprintAsyncActionBase {
	char pad_30[0x18]; // 0x30(0x18)
	struct FMulticastInlineDelegate OnElementLoadComplete; // 0x48(0x10)

	struct USCMLoadElementAction* LoadElementLevel(struct UObject* WorldContextObject, struct TArray<struct FString>& Elements); // Function Solarland.SCMLoadElementAction.LoadElementLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27087e0
	void HandleElementLoadComplete(); // Function Solarland.SCMLoadElementAction.HandleElementLoadComplete // (Final|Native|Public) // @ game+0x27084e0
};

// Class Solarland.SCMUnLoadElementAction
// Size: 0x58 (Inherited: 0x30)
struct USCMUnLoadElementAction : UBlueprintAsyncActionBase {
	char pad_30[0x18]; // 0x30(0x18)
	struct FMulticastInlineDelegate OnElementUnLoadComplete; // 0x48(0x10)

	struct USCMUnLoadElementAction* UnLoadElementLevel(struct UObject* WorldContextObject, struct TArray<struct FString>& Elements); // Function Solarland.SCMUnLoadElementAction.UnLoadElementLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27092d0
	void HandleElementUnLoadComplete(); // Function Solarland.SCMUnLoadElementAction.HandleElementUnLoadComplete // (Final|Native|Public) // @ game+0x27084e0
};

// Class Solarland.SCMMapElementBase
// Size: 0x280 (Inherited: 0x228)
struct ASCMMapElementBase : AActor {
	bool bPersistent; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	struct FString Side; // 0x230(0x10)
	struct FString Job; // 0x240(0x10)
	struct FString ElementID; // 0x250(0x10)
	enum class ESCMMapElementType Type; // 0x260(0x01)
	enum class ESCMMapElementStateType State; // 0x261(0x01)
	enum class ESCMMapElementVisibilityType Visibility; // 0x262(0x01)
	char pad_263[0x5]; // 0x263(0x05)
	struct USCMMapElementRPCComponent* MapElementRPCComponentClass; // 0x268(0x08)
	struct FName ElementName; // 0x270(0x08)
	char bUseSceneActorOptimization; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)

	enum class ESCMMapElementVisibilityType SetElementVisibility(enum class ESCMMapElementVisibilityType NewType); // Function Solarland.SCMMapElementBase.SetElementVisibility // (Native|Public|BlueprintCallable) // @ game+0x2708df0
	enum class ESCMMapElementStateType SetElementState(enum class ESCMMapElementStateType NewState); // Function Solarland.SCMMapElementBase.SetElementState // (Native|Public|BlueprintCallable) // @ game+0x2708d60
	void OnRep_ElementVisibility(); // Function Solarland.SCMMapElementBase.OnRep_ElementVisibility // (Final|Native|Public) // @ game+0x2708b10
	void OnRep_ElementState(); // Function Solarland.SCMMapElementBase.OnRep_ElementState // (Final|Native|Public) // @ game+0x2708af0
	void OnElementVisibilityChanged(enum class ESCMMapElementVisibilityType CurrentVisibility); // Function Solarland.SCMMapElementBase.OnElementVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnElementStateChanged(enum class ESCMMapElementStateType CurrentState); // Function Solarland.SCMMapElementBase.OnElementStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SCMMapElementRPCComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USCMMapElementRPCComponent : UActorComponent {
};

// Class Solarland.SCMMatchChannelAction
// Size: 0x60 (Inherited: 0x30)
struct USCMMatchChannelAction : UBlueprintAsyncActionBase {
	char pad_30[0x18]; // 0x30(0x18)
	struct UObject* WorldContextObject; // 0x48(0x08)
	struct FMulticastInlineDelegate OnMatchChannelChange; // 0x50(0x10)

	struct USCMMatchChannelAction* OpenMatchChannel(struct UObject* WorldContextObject, enum class EMatchType MatchType, struct TArray<int32_t>& PlayerStructure, int32_t MaxMatchTime); // Function Solarland.SCMMatchChannelAction.OpenMatchChannel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2708b30
	void HandleMatchChannelChange(bool InMatchResult, int32_t RPCID); // Function Solarland.SCMMatchChannelAction.HandleMatchChannelChange // (Final|Native|Public) // @ game+0x2708520
};

// Class Solarland.SolarPlayerControllerBase
// Size: 0x5a8 (Inherited: 0x5a8)
struct ASolarPlayerControllerBase : APlayerController {

	void SolarChangeStandardScreenSize(int32_t SizeX, int32_t SizeY); // Function Solarland.SolarPlayerControllerBase.SolarChangeStandardScreenSize // (Final|Exec|Native|Protected) // @ game+0x27a03b0
	struct FIntPoint GetMobileStandardScreenSize(); // Function Solarland.SolarPlayerControllerBase.GetMobileStandardScreenSize // (Event|Protected|HasDefaults|BlueprintEvent|Const) // @ game+0x2d0d160
	struct FIntPoint GetCustomStandardScreenSize(); // Function Solarland.SolarPlayerControllerBase.GetCustomStandardScreenSize // (Event|Protected|HasDefaults|BlueprintEvent|Const) // @ game+0x2d0d160
};

// Class Solarland.SolarPlayerController
// Size: 0xe48 (Inherited: 0x5a8)
struct ASolarPlayerController : ASolarPlayerControllerBase {
	char pad_5A8[0x40]; // 0x5a8(0x40)
	struct FMulticastInlineDelegate OnPawnReplicated; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnPlayerStateRepDelegate; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnCatchInputActionDelegate; // 0x608(0x10)
	struct FMulticastInlineDelegate OnEnterLandingDelegate; // 0x618(0x10)
	struct USolarInputManager* InputManager; // 0x628(0x08)
	char pad_630[0x8]; // 0x630(0x08)
	struct UAiPalComponent* AiPalComponent; // 0x638(0x08)
	struct USolarEasyAntiCheatComponent* AntiCheatComponent; // 0x640(0x08)
	struct FMulticastInlineDelegate OnHUDSpawnedDelegate; // 0x648(0x10)
	char pad_658[0xf0]; // 0x658(0xf0)
	struct USolarInputModePolicyComponent* SolarInputModePolicyComponent; // 0x748(0x08)
	struct TArray<struct USolarInputActionContext*> InputActionContextArray; // 0x750(0x10)
	char pad_760[0x8]; // 0x760(0x08)
	struct FVector2D InputMovementVector; // 0x768(0x08)
	float InputRotatePitch; // 0x770(0x04)
	char pad_774[0xc]; // 0x774(0x0c)
	float ActionWheelHoldDownTime; // 0x780(0x04)
	char pad_784[0x10]; // 0x784(0x10)
	float WorldMarkMessageDelayTime; // 0x794(0x04)
	float WarningMarkRadius; // 0x798(0x04)
	float PingHoldDownTime; // 0x79c(0x04)
	float VoiceWheelMouseMoveRatio; // 0x7a0(0x04)
	float WheelRadius; // 0x7a4(0x04)
	float CancelRadius; // 0x7a8(0x04)
	float OpenMarkWheelRadius; // 0x7ac(0x04)
	float OpenMarkWheelMovement_G; // 0x7b0(0x04)
	char pad_7B4[0x74]; // 0x7b4(0x74)
	struct TArray<struct UActorMarkBase*> DeathBoxWorldMarks; // 0x828(0x10)
	char pad_838[0x4]; // 0x838(0x04)
	float DeathBoxMarksRefreshInterval; // 0x83c(0x04)
	char pad_840[0x4]; // 0x840(0x04)
	int32_t MaxDeathBoxWorldMarkNumber; // 0x844(0x04)
	struct UActorMarkBase* DeathBoxMarkClass; // 0x848(0x08)
	char pad_850[0x28]; // 0x850(0x28)
	struct USolarCharacterSpringArmComponent* FollowArmClass; // 0x878(0x08)
	struct USolarCharacterCameraComponent* FollowCameraClass; // 0x880(0x08)
	float FreeLookSmoothSpeed; // 0x888(0x04)
	char pad_88C[0x24]; // 0x88c(0x24)
	struct USolarCharacterSpringArmComponent* FollowArm; // 0x8b0(0x08)
	struct USolarCharacterCameraComponent* FollowCamera; // 0x8b8(0x08)
	char pad_8C0[0xa8]; // 0x8c0(0xa8)
	struct FString PlayerId; // 0x968(0x10)
	char pad_978[0x18]; // 0x978(0x18)
	float VehicleInteractionDistance; // 0x990(0x04)
	char pad_994[0x4]; // 0x994(0x04)
	struct TArray<struct ASolarVehiclePawn*> InteractingVehicles; // 0x998(0x10)
	struct ASolarVehiclePawn* BestInteractingVehicle; // 0x9a8(0x08)
	struct TArray<struct FAbilityCooldownTimer> ActivedAbilityCooldownArray; // 0x9b0(0x10)
	char pad_9C0[0xb8]; // 0x9c0(0xb8)
	struct FMulticastInlineDelegate OnTeammateHUDDodgeSet; // 0xa78(0x10)
	struct TMap<struct ASolarCharacter*, int32_t> TeammateCandidates; // 0xa88(0x50)
	bool bIsAlreadyParachuted; // 0xad8(0x01)
	char pad_AD9[0x7]; // 0xad9(0x07)
	struct TArray<struct FGameplayHitInfo> WeaponMessageArray; // 0xae0(0x10)
	char pad_AF0[0x18]; // 0xaf0(0x18)
	struct TArray<struct TWeakObjectPtr<struct AActor>> UniqueActorArray; // 0xb08(0x10)
	float HangUpTime; // 0xb18(0x04)
	char pad_B1C[0x1c]; // 0xb1c(0x1c)
	struct TWeakObjectPtr<struct UUserWidget> DamageTextWidget; // 0xb38(0x08)
	struct TArray<struct FSolarDamageText> SameFrameDamageTextDataCache; // 0xb40(0x10)
	struct FTimerHandle SameFrameDamageTextDataHandle; // 0xb50(0x08)
	char pad_B58[0xa8]; // 0xb58(0xa8)
	struct FMulticastInlineDelegate OnSpectateInfoRep; // 0xc00(0x10)
	char pad_C10[0x60]; // 0xc10(0x60)
	struct FSoftClassPath SwitchTargetCameraControlCompClass; // 0xc70(0x18)
	bool bShowCursorWhenSpectateOthers; // 0xc88(0x01)
	char pad_C89[0x3]; // 0xc89(0x03)
	float SpectateNetCamUpdatePositionLimit; // 0xc8c(0x04)
	char pad_C90[0x8]; // 0xc90(0x08)
	struct APlayerController* ScoutPlayerController; // 0xc98(0x08)
	struct AActor* ScoutViewTarget; // 0xca0(0x08)
	struct USolarSwitchTargetCameraControlComp* SolarSwitchTargetCameraControlComp; // 0xca8(0x08)
	char pad_CB0[0x8]; // 0xcb0(0x08)
	struct TArray<int32_t> UsableJetpacks; // 0xcb8(0x10)
	struct TArray<int32_t> UsableTailFlames; // 0xcc8(0x10)
	struct FName PickUpExpItemSound; // 0xcd8(0x08)
	struct FString CachedRechamberSound; // 0xce0(0x10)
	char pad_CF0[0x3c]; // 0xcf0(0x3c)
	struct FName EMPScreenEffectName; // 0xd2c(0x08)
	float AntiCheatUploadInterval; // 0xd34(0x04)
	struct FFixedAntiCheatData FixedAntiCheatData; // 0xd38(0x1c)
	char pad_D54[0x84]; // 0xd54(0x84)
	struct TArray<struct FString> CustomAntiCheatNames; // 0xdd8(0x10)
	struct TArray<struct FString> CustomAntiCheatContents; // 0xde8(0x10)
	char pad_DF8[0x40]; // 0xdf8(0x40)
	struct USolarMeerkatManager* GamePlayMeerkatManager; // 0xe38(0x08)
	char pad_E40[0x8]; // 0xe40(0x08)

	void WorldMarkWheelYAxis_G(float Movement); // Function Solarland.SolarPlayerController.WorldMarkWheelYAxis_G // (Final|Native|Public) // @ game+0x2866d60
	void WorldMarkWheelYAxis(float Movement); // Function Solarland.SolarPlayerController.WorldMarkWheelYAxis // (Final|Native|Public) // @ game+0x2866ce0
	void WorldMarkWheelXAxis_G(float Movement); // Function Solarland.SolarPlayerController.WorldMarkWheelXAxis_G // (Final|Native|Public) // @ game+0x2866c60
	void WorldMarkWheelXAxis(float Movement); // Function Solarland.SolarPlayerController.WorldMarkWheelXAxis // (Final|Native|Public) // @ game+0x2866be0
	void WorldMarkDelayExecFunction(); // Function Solarland.SolarPlayerController.WorldMarkDelayExecFunction // (Final|Native|Public) // @ game+0x2866bc0
	void UseMedicine(); // Function Solarland.SolarPlayerController.UseMedicine // (Final|Native|Public) // @ game+0x2866ba0
	void UpdateEnableAiPalRate(int32_t Rate); // Function Solarland.SolarPlayerController.UpdateEnableAiPalRate // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void UnMarkWorldInLevel(int64_t instanceID); // Function Solarland.SolarPlayerController.UnMarkWorldInLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2866b10
	void Turn(float Value); // Function Solarland.SolarPlayerController.Turn // (Final|Native|Public) // @ game+0x2866a90
	void TryRecordBattlePlayerData(); // Function Solarland.SolarPlayerController.TryRecordBattlePlayerData // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void TryRechargeShield(bool bUseBigRecharger); // Function Solarland.SolarPlayerController.TryRechargeShield // (Native|Public) // @ game+0x2866a00
	void TriggerVoiceByType(enum class EPassiveTriggeredVoice VoiceType); // Function Solarland.SolarPlayerController.TriggerVoiceByType // (Final|Native|Public) // @ game+0x2866970
	void TriggerVoiceByNumber(int32_t VoiceIndex); // Function Solarland.SolarPlayerController.TriggerVoiceByNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x28668e0
	void ToggleEMPScreenEffect(bool bInVisible); // Function Solarland.SolarPlayerController.ToggleEMPScreenEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x2866850
	void ToggleCursor(); // Function Solarland.SolarPlayerController.ToggleCursor // (Final|Native|Public|BlueprintCallable) // @ game+0x2866830
	void TakeOverNextClientSetViewTargetBySwitchTargetComp(bool bRestartBlendEvenIfSameTarget); // Function Solarland.SolarPlayerController.TakeOverNextClientSetViewTargetBySwitchTargetComp // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x28667a0
	void SwtichVehicleSeatNotification(); // Function Solarland.SolarPlayerController.SwtichVehicleSeatNotification // (Final|Native|Public) // @ game+0x2866780
	void SwitchWeaponByReverseOrder(); // Function Solarland.SolarPlayerController.SwitchWeaponByReverseOrder // (Final|Native|Public) // @ game+0x2866760
	void SwitchWeaponByOrder(); // Function Solarland.SolarPlayerController.SwitchWeaponByOrder // (Final|Native|Public) // @ game+0x2866740
	void SwitchSpectatedCharacterInTeam(int32_t PosInTeam); // Function Solarland.SolarPlayerController.SwitchSpectatedCharacterInTeam // (Final|Native|Protected|BlueprintCallable) // @ game+0x28666b0
	void SwitchInputBinding(struct FName& InputName, enum class EInputSwitchType SwitchTpye); // Function Solarland.SolarPlayerController.SwitchInputBinding // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28665d0
	void StopSpectateCountdown(); // Function Solarland.SolarPlayerController.StopSpectateCountdown // (Final|Native|Public) // @ game+0x28665b0
	void StopRecordingAtDS(); // Function Solarland.SolarPlayerController.StopRecordingAtDS // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2866590
	void StartSpectateCountdown(struct FRepCountdownData InCountdownData); // Function Solarland.SolarPlayerController.StartSpectateCountdown // (Final|Native|Public) // @ game+0x28664b0
	void StartRecordingAtDS(struct FString Filename, struct FString UploadUrl, enum class ERecordingType ForceRecordingType); // Function Solarland.SolarPlayerController.StartRecordingAtDS // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2866370
	void SolarSlot(int32_t ID); // Function Solarland.SolarPlayerController.SolarSlot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28662e0
	void SolarShowPanelUI(int32_t Type); // Function Solarland.SolarPlayerController.SolarShowPanelUI // (Final|Exec|Native|Public) // @ game+0x2866250
	void SolarServerNetProfileStop(); // Function Solarland.SolarPlayerController.SolarServerNetProfileStop // (Final|Exec|Native|Public) // @ game+0x2866230
	void SolarServerNetProfileStart(); // Function Solarland.SolarPlayerController.SolarServerNetProfileStart // (Final|Exec|Native|Public) // @ game+0x2866210
	void SolarOpenUI(struct FString UIID, int32_t RootID); // Function Solarland.SolarPlayerController.SolarOpenUI // (Final|Exec|Native|Public) // @ game+0x2866130
	void SolarModule(int32_t ID); // Function Solarland.SolarPlayerController.SolarModule // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28660a0
	void SolarISPC(struct FString _str); // Function Solarland.SolarPlayerController.SolarISPC // (Final|Exec|Native|Public) // @ game+0x2865fb0
	void SolarGM_Weapon(struct FString Type, struct FString paramOne, struct FString paramTwo); // Function Solarland.SolarPlayerController.SolarGM_Weapon // (Final|Exec|Native|Public) // @ game+0x2864ae0
	void SolarGM_UpdateTaskInfo(); // Function Solarland.SolarPlayerController.SolarGM_UpdateTaskInfo // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_TeleportToBotAIServer(uint32_t CtrlIndex); // Function Solarland.SolarPlayerController.SolarGM_TeleportToBotAIServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2865f20
	void SolarGM_StopRecordingAtDS(); // Function Solarland.SolarPlayerController.SolarGM_StopRecordingAtDS // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_StopBotAIBehaviorTreeServer(bool bStop); // Function Solarland.SolarPlayerController.SolarGM_StopBotAIBehaviorTreeServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2865e90
	void SolarGM_StartShrinkSafeArea(); // Function Solarland.SolarPlayerController.SolarGM_StartShrinkSafeArea // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_StartRecordingAtDS(struct FString Filename, struct FString UploadUrl, enum class ERecordingType ForceRecordingType); // Function Solarland.SolarPlayerController.SolarGM_StartRecordingAtDS // (Final|Exec|Native|Public) // @ game+0x2865d50
	void SolarGM_SpawnBotAIAtCrosshairByNumServer(int32_t Num, int32_t CharacterId, bool bAsTeammate, int32_t DifficultyLevel); // Function Solarland.SolarPlayerController.SolarGM_SpawnBotAIAtCrosshairByNumServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2865bf0
	void SolarGM_SpawnBotAIAtCrosshair(int32_t CharacterId, bool bAsTeammate, int32_t DifficultyLevel); // Function Solarland.SolarPlayerController.SolarGM_SpawnBotAIAtCrosshair // (Final|Exec|Native|Public) // @ game+0x2865ae0
	void SolarGM_SpawnAIAtCrosshairServer(int32_t CharacterId, bool bAsTeammate, int32_t DifficultyLevel); // Function Solarland.SolarPlayerController.SolarGM_SpawnAIAtCrosshairServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28659d0
	void SolarGM_ShowRedZoneDamage(bool IsShow); // Function Solarland.SolarPlayerController.SolarGM_ShowRedZoneDamage // (Final|Exec|Native|Public) // @ game+0x26446a0
	void SolarGM_ShowNotice(int32_t NoticeId); // Function Solarland.SolarPlayerController.SolarGM_ShowNotice // (Final|Exec|Native|Public) // @ game+0x1ae6850
	void SolarGM_SetTeamID(int32_t InTeamId); // Function Solarland.SolarPlayerController.SolarGM_SetTeamID // (Final|Exec|Native|Public) // @ game+0x1ae6850
	void SolarGM_SetStatDataForDebug(); // Function Solarland.SolarPlayerController.SolarGM_SetStatDataForDebug // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_SetSolarPlayerID(struct FString InSolarPlayer); // Function Solarland.SolarPlayerController.SolarGM_SetSolarPlayerID // (Final|Exec|Native|Public) // @ game+0x277cdc0
	void SolarGM_SetReconnection(bool IsReconnection); // Function Solarland.SolarPlayerController.SolarGM_SetReconnection // (Final|Exec|Native|Public) // @ game+0x26446a0
	void SolarGM_SetPlayerData(struct FString InPlayerID); // Function Solarland.SolarPlayerController.SolarGM_SetPlayerData // (Final|Exec|Native|Public) // @ game+0x277cdc0
	void SolarGM_SetHitTraceComponentEnable(bool InEnable); // Function Solarland.SolarPlayerController.SolarGM_SetHitTraceComponentEnable // (Final|Exec|Native|Public) // @ game+0x26446a0
	void SolarGM_SetGyroscopeTiltZThresholdSwitch(struct FString bSwitch); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeTiltZThresholdSwitch // (Final|Exec|Native|Public) // @ game+0x277cdc0
	void SolarGM_SetGyroscopeTiltZThreshold(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeTiltZThreshold // (Final|Exec|Native|Public) // @ game+0xb67d60
	void SolarGM_SetGyroscopeTiltYThreshold(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeTiltYThreshold // (Final|Exec|Native|Public) // @ game+0xb67d60
	void SolarGM_SetGyroscopeTiltFrameCount(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeTiltFrameCount // (Final|Exec|Native|Public) // @ game+0xb67d60
	void SolarGM_SetGyroscopeRotationRateYThreshold(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeRotationRateYThreshold // (Final|Exec|Native|Public) // @ game+0xb67d60
	void SolarGM_SetGyroscopeRotationRateXThreshold(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeRotationRateXThreshold // (Final|Exec|Native|Public) // @ game+0xb67d60
	void SolarGM_ServerStartShrinkSafeArea(); // Function Solarland.SolarPlayerController.SolarGM_ServerStartShrinkSafeArea // (Net|Native|Event|Public|NetServer) // @ game+0x28659b0
	void SolarGM_ServerShowRedZoneDamage(bool IsShow); // Function Solarland.SolarPlayerController.SolarGM_ServerShowRedZoneDamage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2865920
	void SolarGM_ServerSetTeamID(int32_t InTeamId); // Function Solarland.SolarPlayerController.SolarGM_ServerSetTeamID // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2865890
	void SolarGM_ServerSetStatDataForDebug(); // Function Solarland.SolarPlayerController.SolarGM_ServerSetStatDataForDebug // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2865870
	void SolarGM_ServerSetSolarPlayerID(struct FString InSolarPlayer); // Function Solarland.SolarPlayerController.SolarGM_ServerSetSolarPlayerID // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28657d0
	void SolarGM_ServerSetReconnection(bool IsReconnection); // Function Solarland.SolarPlayerController.SolarGM_ServerSetReconnection // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2865740
	void SolarGM_ServerSetPlayerData(struct FString InPlayerID); // Function Solarland.SolarPlayerController.SolarGM_ServerSetPlayerData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28656a0
	void SolarGM_ServerPlayerAbnormal(); // Function Solarland.SolarPlayerController.SolarGM_ServerPlayerAbnormal // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1ae6750
	void SolarGM_ServerMarkVehicleSpawnerInMap(int32_t InputIndex); // Function Solarland.SolarPlayerController.SolarGM_ServerMarkVehicleSpawnerInMap // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2865610
	void SolarGM_ServerDumpAllPlayer(); // Function Solarland.SolarPlayerController.SolarGM_ServerDumpAllPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28655f0
	void SolarGM_ServerDebugOffline(); // Function Solarland.SolarPlayerController.SolarGM_ServerDebugOffline // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28655d0
	void SolarGM_ServerConsoleCommand(struct FString InConsoleCommand); // Function Solarland.SolarPlayerController.SolarGM_ServerConsoleCommand // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x2865530
	void SolarGM_ServerClosePoisonDamage(bool isClose); // Function Solarland.SolarPlayerController.SolarGM_ServerClosePoisonDamage // (Net|Native|Event|Public|NetServer) // @ game+0x28654a0
	void SolarGM_ServerChangeDayLight(int32_t ID); // Function Solarland.SolarPlayerController.SolarGM_ServerChangeDayLight // (Net|Native|Event|Public|NetServer) // @ game+0x2865410
	void SolarGM_ResetZoneBombsFire(); // Function Solarland.SolarPlayerController.SolarGM_ResetZoneBombsFire // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_RedZoneServer(int32_t ZoneId); // Function Solarland.SolarPlayerController.SolarGM_RedZoneServer // (Net|Native|Event|Public|NetServer) // @ game+0x2865380
	void SolarGM_RedZone(int32_t ZoneId); // Function Solarland.SolarPlayerController.SolarGM_RedZone // (Final|Exec|Native|Public) // @ game+0x1ae6850
	void SolarGM_PoisonServer(struct FString GMType); // Function Solarland.SolarPlayerController.SolarGM_PoisonServer // (Net|Native|Event|Public|NetServer) // @ game+0x28652e0
	void SolarGM_Poison(struct FString GMType); // Function Solarland.SolarPlayerController.SolarGM_Poison // (Final|Exec|Native|Public) // @ game+0x277cdc0
	void SolarGM_PlayerUndetectableByAIServer(int32_t debugValue); // Function Solarland.SolarPlayerController.SolarGM_PlayerUndetectableByAIServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2865250
	void SolarGM_PlayerUndetectableByAI(int32_t debugValue); // Function Solarland.SolarPlayerController.SolarGM_PlayerUndetectableByAI // (Final|Exec|Native|Public) // @ game+0x28651c0
	void SolarGM_PlayerAbnormal(); // Function Solarland.SolarPlayerController.SolarGM_PlayerAbnormal // (Final|Exec|Native|Public) // @ game+0x28651a0
	void SolarGM_NoviceGuidance(int32_t ActionID, bool bOn); // Function Solarland.SolarPlayerController.SolarGM_NoviceGuidance // (Final|Exec|Native|Public) // @ game+0x28650d0
	void SolarGM_NotifyPlayerHasCheatByNickName(struct FString NickName); // Function Solarland.SolarPlayerController.SolarGM_NotifyPlayerHasCheatByNickName // (Final|Exec|Native|Public) // @ game+0x277cdc0
	void SolarGM_NotifyPlayerHasCheat(struct FString SolarPlayerID); // Function Solarland.SolarPlayerController.SolarGM_NotifyPlayerHasCheat // (Final|Exec|Native|Public) // @ game+0x277cdc0
	void SolarGM_KillAllAIServer(bool KillBot); // Function Solarland.SolarPlayerController.SolarGM_KillAllAIServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2865040
	void SolarGM_KickMeOut(); // Function Solarland.SolarPlayerController.SolarGM_KickMeOut // (Final|Native|Public) // @ game+0x9043b0
	void SolarGM_InitTaskInfo(); // Function Solarland.SolarPlayerController.SolarGM_InitTaskInfo // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_GoPreviousHomeCameraMode(); // Function Solarland.SolarPlayerController.SolarGM_GoPreviousHomeCameraMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void SolarGM_GoNextHomeCameraMode(); // Function Solarland.SolarPlayerController.SolarGM_GoNextHomeCameraMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void SolarGM_GoHomeCameraModeByIndex(int32_t Index); // Function Solarland.SolarPlayerController.SolarGM_GoHomeCameraModeByIndex // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1ae6850
	void SolarGM_GMGoSpectatePreviousPlayer(); // Function Solarland.SolarPlayerController.SolarGM_GMGoSpectatePreviousPlayer // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_GMGoSpectatePlayerByIndex(uint32_t Index); // Function Solarland.SolarPlayerController.SolarGM_GMGoSpectatePlayerByIndex // (Final|Exec|Native|Public) // @ game+0x27c42f0
	void SolarGM_GMGoSpectateNextPlayer(); // Function Solarland.SolarPlayerController.SolarGM_GMGoSpectateNextPlayer // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_Freelook(bool Open); // Function Solarland.SolarPlayerController.SolarGM_Freelook // (Final|Exec|Native|Public) // @ game+0x26446a0
	void SolarGM_DumpAllPlayer(bool bSendToServer); // Function Solarland.SolarPlayerController.SolarGM_DumpAllPlayer // (Final|Exec|Native|Public) // @ game+0x26446a0
	void SolarGM_DebugOffline(); // Function Solarland.SolarPlayerController.SolarGM_DebugOffline // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_DebugAllAIServer(int32_t debugValue); // Function Solarland.SolarPlayerController.SolarGM_DebugAllAIServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2864fb0
	void SolarGM_DebugAllAI(int32_t debugValue); // Function Solarland.SolarPlayerController.SolarGM_DebugAllAI // (Final|Exec|Native|Public) // @ game+0x1ae6850
	void SolarGM_ClosePoisonDamage(bool isClose); // Function Solarland.SolarPlayerController.SolarGM_ClosePoisonDamage // (Final|Exec|Native|Public) // @ game+0x26446a0
	void SolarGM_ClientShowRedZoneDamage(struct FVector bombLocation, struct FVector characterlocation, float Distance, float Damage); // Function Solarland.SolarPlayerController.SolarGM_ClientShowRedZoneDamage // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x2864e10
	void SolarGM_ClientSetPlayerData(struct FString InPlayerID); // Function Solarland.SolarPlayerController.SolarGM_ClientSetPlayerData // (Final|Native|Public) // @ game+0x277cdc0
	void SolarGM_ClientMarkVehicleSpawnerInMap(struct TArray<struct FVector> VehicleSpawnerLocations, struct TArray<int32_t> VehicleSpawnerSpawnIds, int32_t InputIndex); // Function Solarland.SolarPlayerController.SolarGM_ClientMarkVehicleSpawnerInMap // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2864cd0
	void SolarGM_ClientGotoLogin(); // Function Solarland.SolarPlayerController.SolarGM_ClientGotoLogin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SolarGM_ClientDumpAllPlayer(struct FString DumpString); // Function Solarland.SolarPlayerController.SolarGM_ClientDumpAllPlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2864c30
	void SolarGM_Character(struct FString GMType, struct FString Param1, struct FString Param2); // Function Solarland.SolarPlayerController.SolarGM_Character // (Final|Exec|Native|Public) // @ game+0x2864ae0
	void SolarGM_ChangeVehicleVectorProperty(struct FString InPropertyName, float InX, float InY, float InZ); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleVectorProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x2864970
	void SolarGM_ChangeVehicleRotatorProperty(struct FString InPropertyName, float InPitch, float InYaw, float InRoll); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleRotatorProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x2864970
	void SolarGM_ChangeVehicleIntProperty(struct FString InPropertyName, int32_t inInt); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleIntProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x2864890
	void SolarGM_ChangeVehicleGASAttribute(struct FString InPropertyName, float InValue); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleGASAttribute // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x28647a0
	void SolarGM_ChangeVehicleFloatProperty(struct FString InPropertyName, float InFloat); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleFloatProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x28647a0
	void SolarGM_ChangeVehicleCurveProperty(struct FString InPropertyName, char InChangeType, float InKey, float InValue); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleCurveProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x2864630
	void SolarGM_ChangeVehicleBoolProperty(struct FString InPropertyName, bool InBool); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleBoolProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27c4210
	void SolarGM_ChangeDayLight(int32_t ID); // Function Solarland.SolarPlayerController.SolarGM_ChangeDayLight // (Final|Exec|Native|Public) // @ game+0x1ae6850
	void SolarGM_BeginHeroPickMySelf(); // Function Solarland.SolarPlayerController.SolarGM_BeginHeroPickMySelf // (Final|Exec|Native|Protected) // @ game+0x2864610
	void SolarGM_BattleLua(struct FString CmdName, struct TArray<struct FString>& Params); // Function Solarland.SolarPlayerController.SolarGM_BattleLua // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void SolarGM_Battle(struct FString CmdName, struct TArray<struct FString>& Params); // Function Solarland.SolarPlayerController.SolarGM_Battle // (Final|Exec|Native|Public|HasOutParms) // @ game+0x27c3fe0
	void SolarGM(struct FString _str); // Function Solarland.SolarPlayerController.SolarGM // (Final|Exec|Native|Public) // @ game+0x277cdc0
	void SolarEnergy(int32_t InMode, int32_t ID); // Function Solarland.SolarPlayerController.SolarEnergy // (Final|Exec|Native|Public) // @ game+0x27a03b0
	void SolarCloseUI(struct FString UIID); // Function Solarland.SolarPlayerController.SolarCloseUI // (Final|Exec|Native|Public) // @ game+0x2864570
	void SolarClosePanelUI(int32_t Type); // Function Solarland.SolarPlayerController.SolarClosePanelUI // (Final|Exec|Native|Public) // @ game+0x28644e0
	void SolarClientNetProfileStop(); // Function Solarland.SolarPlayerController.SolarClientNetProfileStop // (Final|Exec|Native|Public) // @ game+0x28644c0
	void SolarClientNetProfileStart(); // Function Solarland.SolarPlayerController.SolarClientNetProfileStart // (Final|Exec|Native|Public) // @ game+0x28644a0
	void ShowBackpackUI(); // Function Solarland.SolarPlayerController.ShowBackpackUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetNativeRequestFreeLook(bool bInFreeLook); // Function Solarland.SolarPlayerController.SetNativeRequestFreeLook // (Final|Native|Public|BlueprintCallable) // @ game+0x2864410
	void SetInputActionSwitch(int32_t ActionID, bool bOn); // Function Solarland.SolarPlayerController.SetInputActionSwitch // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetAllTeammateHUDDodge(bool bDodge); // Function Solarland.SolarPlayerController.SetAllTeammateHUDDodge // (Final|Native|Public|BlueprintCallable) // @ game+0x2864380
	void ServerUpdateTaskInfo(); // Function Solarland.SolarPlayerController.ServerUpdateTaskInfo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2864360
	void ServerUnforbidRoleAbilitySkillDebugOnly(); // Function Solarland.SolarPlayerController.ServerUnforbidRoleAbilitySkillDebugOnly // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x2864340
	void ServerTriggleScreenshotTask(struct FString TargetPlayerID); // Function Solarland.SolarPlayerController.ServerTriggleScreenshotTask // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28642a0
	void ServerTeleportTo(struct FVector DestLocation); // Function Solarland.SolarPlayerController.ServerTeleportTo // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x2864220
	void ServerSyncPlayerSelfReport(); // Function Solarland.SolarPlayerController.ServerSyncPlayerSelfReport // (Final|Native|Public) // @ game+0x2864200
	void ServerSwitchSpectatedCharacterInTeam(int32_t PosInTeam); // Function Solarland.SolarPlayerController.ServerSwitchSpectatedCharacterInTeam // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2864170
	void ServerSpawnVehicleWithVehicleID(int32_t VehicleID); // Function Solarland.SolarPlayerController.ServerSpawnVehicleWithVehicleID // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28640e0
	void ServerSpawnVehicleWithSkinID(int32_t SkinId, struct FVector InLocation); // Function Solarland.SolarPlayerController.ServerSpawnVehicleWithSkinID // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x2864010
	void ServerSpawnVehicle(int32_t SpawnID); // Function Solarland.SolarPlayerController.ServerSpawnVehicle // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2863f80
	void ServerSpawnTreasureBox(int32_t TreasureBoxID); // Function Solarland.SolarPlayerController.ServerSpawnTreasureBox // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2863ef0
	void ServerSpawnSolarRadar(struct FString BpPath); // Function Solarland.SolarPlayerController.ServerSpawnSolarRadar // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2863e50
	void ServerSpawnPSO_BP_ObjectByPath(struct FString BpPath, struct FVector Location); // Function Solarland.SolarPlayerController.ServerSpawnPSO_BP_ObjectByPath // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x2863d70
	void ServerSpawnOutcomeContent(int32_t OutcomeID); // Function Solarland.SolarPlayerController.ServerSpawnOutcomeContent // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2863ce0
	void ServerSpawnChargingPile(struct FString BpPath); // Function Solarland.SolarPlayerController.ServerSpawnChargingPile // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2863c40
	void ServerSpawnAirship(float Loc_X, float Loc_Y); // Function Solarland.SolarPlayerController.ServerSpawnAirship // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2863b70
	void ServerSpawnAirdrop(int32_t AirdropID); // Function Solarland.SolarPlayerController.ServerSpawnAirdrop // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2863ae0
	void ServerSolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed); // Function Solarland.SolarPlayerController.ServerSolarWeaponSpreadForWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28638f0
	void ServerSolarWeaponReload(int32_t PrimaryAmmoCap, int32_t SecondaryAmmoCap); // Function Solarland.SolarPlayerController.ServerSolarWeaponReload // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2863820
	void ServerSolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod); // Function Solarland.SolarPlayerController.ServerSolarWeaponOverload // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28636c0
	void ServerSolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead); // Function Solarland.SolarPlayerController.ServerSolarWeaponFiringMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28634e0
	void ServerSolarSetPlayerValue(struct FString InType, struct FString InValue); // Function Solarland.SolarPlayerController.ServerSolarSetPlayerValue // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28633e0
	void ServerSolarAmmoSpreadPerBullet(int32_t AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed); // Function Solarland.SolarPlayerController.ServerSolarAmmoSpreadPerBullet // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28631c0
	void ServerSolarAmmoRangeSpeedDamage(int32_t AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload); // Function Solarland.SolarPlayerController.ServerSolarAmmoRangeSpeedDamage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2862f10
	void ServerSolarAmmoFiring(int32_t AmmoIndex, int32_t FireCostType, int32_t FireCostPerAttack, int32_t FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval); // Function Solarland.SolarPlayerController.ServerSolarAmmoFiring // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2862cb0
	void ServerSolarAmmoBoltAndMag(int32_t AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag); // Function Solarland.SolarPlayerController.ServerSolarAmmoBoltAndMag // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2862b00
	void ServerSolarAmmoBasicMovement(int32_t AmmoIndex, int32_t TimedExplode, int32_t BounceTimes, float LifeTime, float BaseReloadTime, int32_t TrajectoryType, float CustomValue); // Function Solarland.SolarPlayerController.ServerSolarAmmoBasicMovement // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28628e0
	void ServerSetSummonItemIgnoreBombDamage(bool bIgnore); // Function Solarland.SolarPlayerController.ServerSetSummonItemIgnoreBombDamage // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x2862850
	void ServerSetRoleAbilitySkillCDDurationDebugOnly(float InCD); // Function Solarland.SolarPlayerController.ServerSetRoleAbilitySkillCDDurationDebugOnly // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x28627c0
	void ServerSetPlayerLevel(int32_t InLevel); // Function Solarland.SolarPlayerController.ServerSetPlayerLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2862730
	void ServerSetHangUpBehavior(); // Function Solarland.SolarPlayerController.ServerSetHangUpBehavior // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2862710
	void ServerSetFreeLook(bool bInFreeLook); // Function Solarland.SolarPlayerController.ServerSetFreeLook // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2862680
	void ServerSetAppLifetimeState(enum class EAppLifetimeState NewLifeState); // Function Solarland.SolarPlayerController.ServerSetAppLifetimeState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2862600
	void ServerSetActorOwner(struct AActor* TargetActor); // Function Solarland.SolarPlayerController.ServerSetActorOwner // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2862570
	void ServerScreenshotProcessing(struct FSShotImageInfo ImageInfo); // Function Solarland.SolarPlayerController.ServerScreenshotProcessing // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2862450
	void ServerRPCResetZoneBombsFire(); // Function Solarland.SolarPlayerController.ServerRPCResetZoneBombsFire // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28622e0
	void ServerResetUniqueSkillCDDebugOnly(); // Function Solarland.SolarPlayerController.ServerResetUniqueSkillCDDebugOnly // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x2862430
	void ServerRequestTransferSkydivingLeaderTo(char PosInTeam); // Function Solarland.SolarPlayerController.ServerRequestTransferSkydivingLeaderTo // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x28623b0
	void ServerRequestSkydivingFollow(struct ASolarPlayerState* LeaderPlayerState); // Function Solarland.SolarPlayerController.ServerRequestSkydivingFollow // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2862320
	void ServerReqStartReviveItemRecycleCountDownData(); // Function Solarland.SolarPlayerController.ServerReqStartReviveItemRecycleCountDownData // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x2862300
	void ServerPlayerUpgrade(int32_t InLevel); // Function Solarland.SolarPlayerController.ServerPlayerUpgrade // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2862250
	void ServerPlayerResumeSettlement(); // Function Solarland.SolarPlayerController.ServerPlayerResumeSettlement // (Final|Native|Public) // @ game+0x2862230
	void ServerPlayerRequestLogout(); // Function Solarland.SolarPlayerController.ServerPlayerRequestLogout // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2862210
	void ServerPlayerOutBySelf(enum class ESCMPlayerOutPath InPath); // Function Solarland.SolarPlayerController.ServerPlayerOutBySelf // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2862190
	void ServerPlayerGoToSettlement(); // Function Solarland.SolarPlayerController.ServerPlayerGoToSettlement // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x2862140
	void ServerNotifyShowEmoji(int32_t EmojiID, struct ASolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance); // Function Solarland.SolarPlayerController.ServerNotifyShowEmoji // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2862030
	void ServerNotifyPlayerHasCheatByNickName(struct FString NickName); // Function Solarland.SolarPlayerController.ServerNotifyPlayerHasCheatByNickName // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2861f90
	void ServerNotifyPlayerHasCheat(struct FString SolarPlayerID); // Function Solarland.SolarPlayerController.ServerNotifyPlayerHasCheat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2861ef0
	void ServerNetProfile(bool startOrStop); // Function Solarland.SolarPlayerController.ServerNetProfile // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2861e60
	void ServerInitTaskInfo(); // Function Solarland.SolarPlayerController.ServerInitTaskInfo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2861e40
	void ServerHandleTimerMessage(struct TArray<char> TimerMessage); // Function Solarland.SolarPlayerController.ServerHandleTimerMessage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2861da0
	void ServerGoSpectatePreviousPlayer(); // Function Solarland.SolarPlayerController.ServerGoSpectatePreviousPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2861d80
	void ServerGoSpectatePlayerByPlayerIdInternal(struct FString SolarPlayerID); // Function Solarland.SolarPlayerController.ServerGoSpectatePlayerByPlayerIdInternal // (Final|Net|Native|Event|Private|NetServer) // @ game+0x2861ce0
	void ServerGoSpectatePlayerByPlayerId(struct FString SolarPlayerID); // Function Solarland.SolarPlayerController.ServerGoSpectatePlayerByPlayerId // (Final|Native|Public|BlueprintCallable) // @ game+0x2861c40
	void ServerGoSpectatePlayerByIndex_Internal(int32_t Index); // Function Solarland.SolarPlayerController.ServerGoSpectatePlayerByIndex_Internal // (Final|Net|Native|Event|Private|NetServer) // @ game+0x2861bb0
	void ServerGoSpectatePlayerByIndex(int32_t Index); // Function Solarland.SolarPlayerController.ServerGoSpectatePlayerByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x2861b20
	void ServerGoSpectateNextPlayer(); // Function Solarland.SolarPlayerController.ServerGoSpectateNextPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2861b00
	void ServerGainExperience(int32_t InExp); // Function Solarland.SolarPlayerController.ServerGainExperience // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2861a70
	void ServerEnableCheats(); // Function Solarland.SolarPlayerController.ServerEnableCheats // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2861a50
	void ServerCmd(struct FString Cmd); // Function Solarland.SolarPlayerController.ServerCmd // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28619b0
	void ServerClearUniqueSkillCDDebugOnly(); // Function Solarland.SolarPlayerController.ServerClearUniqueSkillCDDebugOnly // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x2861990
	void ServerClearTeamSummonItemMark(); // Function Solarland.SolarPlayerController.ServerClearTeamSummonItemMark // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2861970
	void ServerChangeVehicleVectorProperty(struct FString InPropertyName, float InX, float InY, float InZ); // Function Solarland.SolarPlayerController.ServerChangeVehicleVectorProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2861810
	void ServerChangeVehicleRotatorProperty(struct FString InPropertyName, float InPitch, float InYaw, float InRoll); // Function Solarland.SolarPlayerController.ServerChangeVehicleRotatorProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28616b0
	void ServerChangeVehicleIntProperty(struct FString InPropertyName, int32_t InFloat); // Function Solarland.SolarPlayerController.ServerChangeVehicleIntProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28615d0
	void ServerChangeVehicleGASAttribute(struct FString InPropertyName, float InValue); // Function Solarland.SolarPlayerController.ServerChangeVehicleGASAttribute // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28614e0
	void ServerChangeVehicleFloatProperty(struct FString InPropertyName, float InFloat); // Function Solarland.SolarPlayerController.ServerChangeVehicleFloatProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28613f0
	void ServerChangeVehicleCurveProperty(struct FString InPropertyName, char InChangeType, float InKey, float InValue); // Function Solarland.SolarPlayerController.ServerChangeVehicleCurveProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2861280
	void ServerChangeVehicleBoolProperty(struct FString InPropertyName, bool InBool); // Function Solarland.SolarPlayerController.ServerChangeVehicleBoolProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2861190
	void ServerCancelSkydivingFollow(); // Function Solarland.SolarPlayerController.ServerCancelSkydivingFollow // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2861170
	void ServerBeginHeroPickMySelf(); // Function Solarland.SolarPlayerController.ServerBeginHeroPickMySelf // (Net|NetReliableNative|Event|Protected|NetServer|BlueprintCallable) // @ game+0x1ae6790
	void SendRepliableMessageServer(int32_t Message); // Function Solarland.SolarPlayerController.SendRepliableMessageServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x28610e0
	void SendRepliableMessageInMsgBucket(struct TArray<int32_t>& MessageIDs); // Function Solarland.SolarPlayerController.SendRepliableMessageInMsgBucket // (Final|Native|Public|HasOutParms) // @ game+0x2861030
	void SendRepliableMessageByMessageID(int32_t& ID); // Function Solarland.SolarPlayerController.SendRepliableMessageByMessageID // (Final|Native|Public|HasOutParms) // @ game+0x2860fa0
	void SendQuickMessageServer(struct FString Message, bool bSound); // Function Solarland.SolarPlayerController.SendQuickMessageServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2860eb0
	void SendQuickMessageNewServer(int32_t VoiceType); // Function Solarland.SolarPlayerController.SendQuickMessageNewServer // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x2860e20
	void SendQuickMessageNewClient(struct FString NickName, int32_t VoiceType, int32_t CharID, int32_t SkinId, bool bGender, int32_t PosInTeam, bool bLocalPlayer, bool bShowLocMessage); // Function Solarland.SolarPlayerController.SendQuickMessageNewClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2860ba0
	void SendQuickMessageClient(struct FString NickName, struct FString Message, bool IsLocalPlayer, bool bSound, int32_t PosInTeam); // Function Solarland.SolarPlayerController.SendQuickMessageClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x28609d0
	void SendLocalizationTeamMessageServer(int32_t TextID, struct TArray<struct FLocTextParam> TextParams, struct FString SoundEvent); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessageServer // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x2860870
	void SendLocalizationTeamMessageNewServer(struct TArray<struct FLocTextParam> TextParams, int32_t SoundID1, int32_t SoundDI2); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessageNewServer // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x2860720
	void SendLocalizationTeamMessageNewClient(int32_t CharacterId, int32_t SkinId, bool bGender, int32_t SoundID1, struct FString NickName, struct TArray<struct FLocTextParam> TextParams, int32_t PosInTeam, int32_t SoundID2); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessageNewClient // (Net|NetReliableNative|Event|Public|NetClient|Const) // @ game+0x2860470
	void SendLocalizationTeamMessageClient(struct ASolarPlayerState* SenderPS, int32_t TextID, struct TArray<struct FLocTextParam> TextParams, struct FString SoundEvent, int32_t PosInTeam); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessageClient // (Net|NetReliableNative|Event|Public|NetClient|Const) // @ game+0x2860290
	void SendLocalizationTeamMessage(int32_t TextID, struct TMap<struct FString, int32_t>& TextParamsId, struct FString SoundEvent1, struct FString SoundEvent2); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessage // (Final|Native|Public|HasOutParms) // @ game+0x2860080
	void SendDamageTextDataNextTick(struct FSolarDamageText& InSolarDamageText); // Function Solarland.SolarPlayerController.SendDamageTextDataNextTick // (Final|Native|Public|HasOutParms) // @ game+0x285ff90
	void ResetJoyStickControlInput(); // Function Solarland.SolarPlayerController.ResetJoyStickControlInput // (Final|Native|Public|BlueprintCallable) // @ game+0x285ff70
	void ResetAllInput(); // Function Solarland.SolarPlayerController.ResetAllInput // (Final|Native|Public|BlueprintCallable) // @ game+0x285ff50
	void RequestTransferSkydivingLeaderTo(char PosInTeam); // Function Solarland.SolarPlayerController.RequestTransferSkydivingLeaderTo // (Final|Native|Public|BlueprintCallable) // @ game+0x285fed0
	void RequestSkydivingFollow(struct ASolarPlayerState* LeaderPlayerState); // Function Solarland.SolarPlayerController.RequestSkydivingFollow // (Final|Native|Public|BlueprintCallable) // @ game+0x285fe40
	void RequestNotifyShowEmoji(int32_t EmojiID, struct ASolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance); // Function Solarland.SolarPlayerController.RequestNotifyShowEmoji // (Final|Native|Public) // @ game+0x285fd30
	void RecordSpectateInfoToBI(struct FSpectateReportInfo& SpectateReportInfo); // Function Solarland.SolarPlayerController.RecordSpectateInfoToBI // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void QuickMessageLuaCall(struct FString Message, bool bSound); // Function Solarland.SolarPlayerController.QuickMessageLuaCall // (Final|Native|Public|BlueprintCallable) // @ game+0x285f9e0
	int32_t QueryStage(); // Function Solarland.SolarPlayerController.QueryStage // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void PushInputModeUIOnly(struct FName Name, bool bShowCursor, struct UWidget* InWidgetToFocus, bool bLockMouseToViewport); // Function Solarland.SolarPlayerController.PushInputModeUIOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x285f880
	void PushInputModeGameOnly(struct FName Name, bool bShowCursor); // Function Solarland.SolarPlayerController.PushInputModeGameOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x285f7b0
	void PushInputModeGameAndUI(struct FName Name, bool bShowCursor, struct UWidget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture); // Function Solarland.SolarPlayerController.PushInputModeGameAndUI // (Final|Native|Public|BlueprintCallable) // @ game+0x285f5f0
	void PostInputAction(struct FName ActionName, enum class EInputEvent KeyEvent); // Function Solarland.SolarPlayerController.PostInputAction // (Final|Native|Public|BlueprintCallable) // @ game+0x285f520
	void PostAkEventByName(struct FString EventName1, struct FString EventName2); // Function Solarland.SolarPlayerController.PostAkEventByName // (Final|Native|Public|BlueprintCallable) // @ game+0x285f420
	void PopInputMode(struct FName Name); // Function Solarland.SolarPlayerController.PopInputMode // (Final|Native|Public|BlueprintCallable) // @ game+0x285f390
	void PlayVehicleWeakPointBrokenSound(struct USolarVehicleSoundDataAsset* VehicleSoundDataAsset); // Function Solarland.SolarPlayerController.PlayVehicleWeakPointBrokenSound // (Net|Native|Event|Public|NetClient) // @ game+0x285f2c0
	void PlayerGoToSettleMent(); // Function Solarland.SolarPlayerController.PlayerGoToSettleMent // (Final|Native|Public) // @ game+0x285f350
	void PlayerGotoLobbyWithLogout(); // Function Solarland.SolarPlayerController.PlayerGotoLobbyWithLogout // (Final|Native|Public) // @ game+0x285f370
	void PlayCustomVoiceByID(int32_t VoiceID, bool NeedSendTeamMessage); // Function Solarland.SolarPlayerController.PlayCustomVoiceByID // (Final|Native|Public) // @ game+0x285f1f0
	void PassiveTriggeredVoice(enum class EPassiveTriggeredVoice VoiceType); // Function Solarland.SolarPlayerController.PassiveTriggeredVoice // (Final|Native|Public) // @ game+0x285f160
	void OnVehiclePitchRotateInputDelegate__DelegateSignature(float InputValue); // DelegateFunction Solarland.SolarPlayerController.OnVehiclePitchRotateInputDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnTeamNumChangeFun(enum class ESCMDataChangeType ChangeType, int32_t OldValue, int32_t NewValue); // Function Solarland.SolarPlayerController.OnTeamNumChangeFun // (Final|Native|Public) // @ game+0x285f050
	void OnTeammateHUDDodgeSet__DelegateSignature(bool bDodge); // DelegateFunction Solarland.SolarPlayerController.OnTeammateHUDDodgeSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSuperScaningStart(struct TArray<struct FString>& InScanPlayers); // Function Solarland.SolarPlayerController.OnSuperScaningStart // (Final|Native|Public|HasOutParms) // @ game+0x285ef80
	void OnSuperScaningRemovePlayer(struct FString InRemovePlayer); // Function Solarland.SolarPlayerController.OnSuperScaningRemovePlayer // (Final|Native|Public) // @ game+0x285eee0
	void OnSuperScaningEnd(); // Function Solarland.SolarPlayerController.OnSuperScaningEnd // (Final|Native|Public) // @ game+0x285eec0
	void OnStopUpdateSpectateInfo(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.SolarPlayerController.OnStopUpdateSpectateInfo // (Final|Native|Protected) // @ game+0x285ee30
	void OnSpectateTargetItemsChanged(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.SolarPlayerController.OnSpectateTargetItemsChanged // (Final|Native|Public) // @ game+0x285eda0
	void OnSpectateTargetChangedHandler(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* MySpecInfo); // Function Solarland.SolarPlayerController.OnSpectateTargetChangedHandler // (Final|Native|Protected) // @ game+0x285ecd0
	void OnSpectateInfoRep__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarPlayerController.OnSpectateInfoRep__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSkydivingStatusUpdated(struct ASolarPlayerState* SelfPlayerState, bool bInIsSkydiving); // Function Solarland.SolarPlayerController.OnSkydivingStatusUpdated // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnShowGameNotice(int32_t InNoticeID, struct TMap<struct FString, struct FString>& InNoticeParams); // Function Solarland.SolarPlayerController.OnShowGameNotice // (Final|Native|Public|HasOutParms) // @ game+0x285eb80
	struct TArray<struct URotationBarMarkWidget*> OnShowActorMarkDelegate__DelegateSignature(struct TArray<struct AActor*> MarkActors); // DelegateFunction Solarland.SolarPlayerController.OnShowActorMarkDelegate__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void OnSeamlessTravelEnd(); // Function Solarland.SolarPlayerController.OnSeamlessTravelEnd // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285eb60
	void OnScopeAxisInput(float InAxisValue); // Function Solarland.SolarPlayerController.OnScopeAxisInput // (Final|Native|Private) // @ game+0x285eae0
	void OnReviveSelfTriggered(bool bAppear); // Function Solarland.SolarPlayerController.OnReviveSelfTriggered // (Final|Native|Public|BlueprintCallable) // @ game+0x285ea50
	void OnReceiveBattleEnd(); // Function Solarland.SolarPlayerController.OnReceiveBattleEnd // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPutAwayWeaponPressed(); // Function Solarland.SolarPlayerController.OnPutAwayWeaponPressed // (Final|Native|Public) // @ game+0x285ea30
	void OnPlayerStateSpectateInfoRepHandler(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.SolarPlayerController.OnPlayerStateSpectateInfoRepHandler // (Native|Public) // @ game+0x285e900
	void OnPlayerStateRepHandlerForSpectate(enum class EPlayerStateRepType RepType, struct APlayerState* InPlayerState); // Function Solarland.SolarPlayerController.OnPlayerStateRepHandlerForSpectate // (Final|Native|Public) // @ game+0x285e830
	void OnPawnReplicated__DelegateSignature(); // DelegateFunction Solarland.SolarPlayerController.OnPawnReplicated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnEnterVoyageDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarPlayerController.OnEnterVoyageDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnEnterLanding(); // Function Solarland.SolarPlayerController.OnEnterLanding // (Native|Public) // @ game+0x285e550
	void OnCustomizeLevelLoaded(); // Function Solarland.SolarPlayerController.OnCustomizeLevelLoaded // (Final|Native|Public) // @ game+0x285e530
	void OnCleanActorMarkWithWidgetsDelegate__DelegateSignature(struct TArray<struct URotationBarMarkWidget*> MarkWidgets); // DelegateFunction Solarland.SolarPlayerController.OnCleanActorMarkWithWidgetsDelegate__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void OnCleanActorMarkWithActorsDelegate__DelegateSignature(struct TArray<struct AActor*> MarkActors); // DelegateFunction Solarland.SolarPlayerController.OnCleanActorMarkWithActorsDelegate__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	void OnCharacterRebirthLua(); // Function Solarland.SolarPlayerController.OnCharacterRebirthLua // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnCharacterDeathLua(); // Function Solarland.SolarPlayerController.OnCharacterDeathLua // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnCatchInputActionDelegate__DelegateSignature(struct FName ActionName, enum class EInputEvent InputEventType); // DelegateFunction Solarland.SolarPlayerController.OnCatchInputActionDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnBeginUpdateSpectateInfo(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.SolarPlayerController.OnBeginUpdateSpectateInfo // (Final|Native|Protected) // @ game+0x285e4a0
	void OnBeforeSpectateTargetChange(struct ASolarPlayerState* NewTarget, struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarPlayerController.OnBeforeSpectateTargetChange // (Final|Native|Protected) // @ game+0x285e3d0
	void OnAppHasReactivated(); // Function Solarland.SolarPlayerController.OnAppHasReactivated // (Final|Native|Public) // @ game+0x285e3b0
	void OnAppHasDeactiveated(); // Function Solarland.SolarPlayerController.OnAppHasDeactiveated // (Final|Native|Public) // @ game+0x285e390
	void OnActionWheelClosed(); // Function Solarland.SolarPlayerController.OnActionWheelClosed // (Final|Native|Public) // @ game+0x285e370
	void NotifyMonsterSpawn(); // Function Solarland.SolarPlayerController.NotifyMonsterSpawn // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void NotifyCrouchIsLocked(); // Function Solarland.SolarPlayerController.NotifyCrouchIsLocked // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void NotifyAppReactivate(); // Function Solarland.SolarPlayerController.NotifyAppReactivate // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void NotifyAppHasDeactivate(); // Function Solarland.SolarPlayerController.NotifyAppHasDeactivate // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void NofityCustomizeLevelLoaded(); // Function Solarland.SolarPlayerController.NofityCustomizeLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void MarkWorldInLevelLuaCall(struct FWorldMarkData& InWorldMarkedData); // Function Solarland.SolarPlayerController.MarkWorldInLevelLuaCall // (Final|Native|Public|HasOutParms) // @ game+0x285e200
	void MarkWorldInLevel(struct FWorldMarkData InWorldMarkedData); // Function Solarland.SolarPlayerController.MarkWorldInLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x285e0d0
	void MarkPointInNavMapLuaCall(struct FVector2D& InMarkedPoint); // Function Solarland.SolarPlayerController.MarkPointInNavMapLuaCall // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x285e040
	void MarkPointInNavMap(struct FVector2D InMarkedPoint, bool bFromWorldMark); // Function Solarland.SolarPlayerController.MarkPointInNavMap // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x285df70
	void MarkOnWorldByMinimapPosition(int32_t PosInTeam, struct FVector2D MinimapPos); // Function Solarland.SolarPlayerController.MarkOnWorldByMinimapPosition // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x285dea0
	void MarkedAsAppHasReactivated(); // Function Solarland.SolarPlayerController.MarkedAsAppHasReactivated // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x285e350
	void MarkedAsAppHasDeactivated(); // Function Solarland.SolarPlayerController.MarkedAsAppHasDeactivated // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x285e330
	void LuaShowUI(struct FString WidgetPath, struct FString UIName); // Function Solarland.SolarPlayerController.LuaShowUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void LuaCallInputTouch(uint32_t Handle, enum class ETouchType Type, struct FVector2D& TouchLocation); // Function Solarland.SolarPlayerController.LuaCallInputTouch // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x285dd80
	void LookUp(float Value); // Function Solarland.SolarPlayerController.LookUp // (Final|Native|Public) // @ game+0x285dd00
	void LogMarkAndQuickVoice(int32_t Type, int32_t SubType); // Function Solarland.SolarPlayerController.LogMarkAndQuickVoice // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x285dc30
	void KickMeOutAtDS(struct FString InPlayerID); // Function Solarland.SolarPlayerController.KickMeOutAtDS // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x285db90
	void K2_ShowDamageText(float InDamage, struct FHitResult& InHitResult, struct AActor* InDamageSource, struct AController* InAutonomousController, struct FSolarPointDamageEvent& InPointDamageEvent); // Function Solarland.SolarPlayerController.K2_ShowDamageText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x285d970
	bool IsThirdPersonSpectateCameraMode(); // Function Solarland.SolarPlayerController.IsThirdPersonSpectateCameraMode // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285d940
	bool IsSpectatingOtherPlayer(); // Function Solarland.SolarPlayerController.IsSpectatingOtherPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285d910
	bool IsMatching(); // Function Solarland.SolarPlayerController.IsMatching // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool IsHasSkydiveAndEnd(); // Function Solarland.SolarPlayerController.IsHasSkydiveAndEnd // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285d8e0
	bool IsHasCharacterAndSkin(int32_t CharacterId, int32_t SkinId); // Function Solarland.SolarPlayerController.IsHasCharacterAndSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x285d810
	void InputWorldMarkReleased(); // Function Solarland.SolarPlayerController.InputWorldMarkReleased // (Final|Native|Public) // @ game+0x285d7f0
	void InputWorldMarkPressed(); // Function Solarland.SolarPlayerController.InputWorldMarkPressed // (Final|Native|Public) // @ game+0x285d7d0
	void InputVerticalJetReleased(); // Function Solarland.SolarPlayerController.InputVerticalJetReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x285d7b0
	void InputVerticalJetPressed(); // Function Solarland.SolarPlayerController.InputVerticalJetPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285d790
	void InputVehicleInteractionReleased(); // Function Solarland.SolarPlayerController.InputVehicleInteractionReleased // (Final|Native|Public) // @ game+0x285d770
	void InputVehicleInteractionPressed(); // Function Solarland.SolarPlayerController.InputVehicleInteractionPressed // (Final|Native|Public) // @ game+0x285d750
	void InputUseRecommendBtnPCReleased(); // Function Solarland.SolarPlayerController.InputUseRecommendBtnPCReleased // (Final|Native|Public) // @ game+0x285d730
	void InputUseRecommendBtnPCPressed(); // Function Solarland.SolarPlayerController.InputUseRecommendBtnPCPressed // (Final|Native|Public) // @ game+0x285d710
	void InputUseMedicineReleased(); // Function Solarland.SolarPlayerController.InputUseMedicineReleased // (Final|Native|Public) // @ game+0x285d6f0
	void InputUseMedicinePressed(); // Function Solarland.SolarPlayerController.InputUseMedicinePressed // (Final|Native|Public) // @ game+0x285d6d0
	void InputUseMedicineOrItemWheelReleased(); // Function Solarland.SolarPlayerController.InputUseMedicineOrItemWheelReleased // (Final|Native|Public) // @ game+0x285d6b0
	void InputUseMedicineOrItemWheelPressed(); // Function Solarland.SolarPlayerController.InputUseMedicineOrItemWheelPressed // (Final|Native|Public) // @ game+0x285d690
	void InputToggleTertiaryWeapon_Checkbox(); // Function Solarland.SolarPlayerController.InputToggleTertiaryWeapon_Checkbox // (Final|Native|Public) // @ game+0x285d670
	void InputToggleSkydivingFollowRouletteTriggered(); // Function Solarland.SolarPlayerController.InputToggleSkydivingFollowRouletteTriggered // (Final|Native|Public|BlueprintCallable) // @ game+0x285d650
	void InputToggleSecondaryWeaponReleased(); // Function Solarland.SolarPlayerController.InputToggleSecondaryWeaponReleased // (Final|Native|Public) // @ game+0x285d610
	void InputToggleSecondaryWeaponPressed(); // Function Solarland.SolarPlayerController.InputToggleSecondaryWeaponPressed // (Final|Native|Public) // @ game+0x285d5f0
	void InputToggleSecondaryWeapon_Checkbox(); // Function Solarland.SolarPlayerController.InputToggleSecondaryWeapon_Checkbox // (Final|Native|Public) // @ game+0x285d630
	void InputTogglePrimaryWeaponReleased(); // Function Solarland.SolarPlayerController.InputTogglePrimaryWeaponReleased // (Final|Native|Public) // @ game+0x285d5b0
	void InputTogglePrimaryWeaponPressed(); // Function Solarland.SolarPlayerController.InputTogglePrimaryWeaponPressed // (Final|Native|Public) // @ game+0x285d590
	void InputTogglePrimaryWeapon_Checkbox(); // Function Solarland.SolarPlayerController.InputTogglePrimaryWeapon_Checkbox // (Final|Native|Public) // @ game+0x285d5d0
	void InputTogglePickupReleased(); // Function Solarland.SolarPlayerController.InputTogglePickupReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x285d570
	void InputTogglePickupPressed(); // Function Solarland.SolarPlayerController.InputTogglePickupPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285d550
	bool InputTestPriority3Pressed(); // Function Solarland.SolarPlayerController.InputTestPriority3Pressed // (Final|Native|Public) // @ game+0x2783600
	bool InputTestPriority2Pressed(); // Function Solarland.SolarPlayerController.InputTestPriority2Pressed // (Final|Native|Public) // @ game+0x285d520
	bool InputTestPriority1Released(); // Function Solarland.SolarPlayerController.InputTestPriority1Released // (Final|Native|Public) // @ game+0x2783600
	bool InputTestPriority1Pressed(); // Function Solarland.SolarPlayerController.InputTestPriority1Pressed // (Final|Native|Public) // @ game+0x2783600
	void InputSwitchToSeatTwoPressed(); // Function Solarland.SolarPlayerController.InputSwitchToSeatTwoPressed // (Final|Native|Public) // @ game+0x285d500
	void InputSwitchToSeatThreePressed(); // Function Solarland.SolarPlayerController.InputSwitchToSeatThreePressed // (Final|Native|Public) // @ game+0x285d4e0
	void InputSwitchToSeatOnePressed(); // Function Solarland.SolarPlayerController.InputSwitchToSeatOnePressed // (Final|Native|Public) // @ game+0x285d4c0
	void InputSwitchToSeatFourPressed(); // Function Solarland.SolarPlayerController.InputSwitchToSeatFourPressed // (Final|Native|Public) // @ game+0x285d4a0
	void InputSwitchFireModeReleased(); // Function Solarland.SolarPlayerController.InputSwitchFireModeReleased // (Final|Native|Public) // @ game+0x285d480
	void InputSwitchFireModePressed(); // Function Solarland.SolarPlayerController.InputSwitchFireModePressed // (Final|Native|Public) // @ game+0x285d460
	void InputStartRepairVehicleReleased(); // Function Solarland.SolarPlayerController.InputStartRepairVehicleReleased // (Final|Native|Public) // @ game+0x285d440
	void InputSprintLockStart(); // Function Solarland.SolarPlayerController.InputSprintLockStart // (Final|Native|Public) // @ game+0x285cf30
	void InputSprintFreeTerminate(); // Function Solarland.SolarPlayerController.InputSprintFreeTerminate // (Final|Native|Public) // @ game+0x285d420
	void InputSprintFreeStart(); // Function Solarland.SolarPlayerController.InputSprintFreeStart // (Final|Native|Public) // @ game+0x285d400
	void InputSprintFreeReleasedOnPC(); // Function Solarland.SolarPlayerController.InputSprintFreeReleasedOnPC // (Final|Native|Public) // @ game+0x285d3e0
	void InputSprintFreePressedOnPC(); // Function Solarland.SolarPlayerController.InputSprintFreePressedOnPC // (Final|Native|Public) // @ game+0x285d3c0
	void InputSkydivingFollowRouletteSelect4(); // Function Solarland.SolarPlayerController.InputSkydivingFollowRouletteSelect4 // (Final|Native|Public) // @ game+0x285d310
	void InputSkydivingFollowRouletteSelect3(); // Function Solarland.SolarPlayerController.InputSkydivingFollowRouletteSelect3 // (Final|Native|Public) // @ game+0x285d2f0
	void InputSkydivingFollowRouletteSelect2(); // Function Solarland.SolarPlayerController.InputSkydivingFollowRouletteSelect2 // (Final|Native|Public) // @ game+0x285d2d0
	void InputSkydivingFollowRouletteSelect1(); // Function Solarland.SolarPlayerController.InputSkydivingFollowRouletteSelect1 // (Final|Native|Public) // @ game+0x285d2b0
	void InputSkydivingFollowRouletteSelect(int32_t PosInTeam); // Function Solarland.SolarPlayerController.InputSkydivingFollowRouletteSelect // (Final|Native|Public|BlueprintCallable) // @ game+0x285d330
	void InputShieldUpgradeReleased(); // Function Solarland.SolarPlayerController.InputShieldUpgradeReleased // (Final|Native|Public) // @ game+0x285d290
	void InputShieldUpgradePressed(); // Function Solarland.SolarPlayerController.InputShieldUpgradePressed // (Final|Native|Public) // @ game+0x285d270
	void InputShieldUpgradeCancelReleased(); // Function Solarland.SolarPlayerController.InputShieldUpgradeCancelReleased // (Final|Native|Public) // @ game+0x285d250
	void InputShieldUpgradeCancelPressed(); // Function Solarland.SolarPlayerController.InputShieldUpgradeCancelPressed // (Final|Native|Public) // @ game+0x285d230
	void InputRightMouseButtonReleased(); // Function Solarland.SolarPlayerController.InputRightMouseButtonReleased // (Final|Native|Public) // @ game+0x285cdf0
	void InputRightMouseButtonPressed(); // Function Solarland.SolarPlayerController.InputRightMouseButtonPressed // (Final|Native|Public) // @ game+0x285d210
	void InputReviveSelfReleased(); // Function Solarland.SolarPlayerController.InputReviveSelfReleased // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void InputReloadReleased(); // Function Solarland.SolarPlayerController.InputReloadReleased // (Final|Native|Public) // @ game+0x285d1f0
	void InputReloadPressed(); // Function Solarland.SolarPlayerController.InputReloadPressed // (Final|Native|Public) // @ game+0x285d1d0
	void InputRechargeShieldReleased(); // Function Solarland.SolarPlayerController.InputRechargeShieldReleased // (Final|Native|Public) // @ game+0x285cb10
	void InputRechargeShieldPressed(); // Function Solarland.SolarPlayerController.InputRechargeShieldPressed // (Final|Native|Public) // @ game+0x285d1b0
	void InputQuickAdsReleased(); // Function Solarland.SolarPlayerController.InputQuickAdsReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x285d190
	void InputQuickAdsPressed(); // Function Solarland.SolarPlayerController.InputQuickAdsPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285d170
	void InputPSTouchpadButton(float InValueX); // Function Solarland.SolarPlayerController.InputPSTouchpadButton // (Final|Native|Public) // @ game+0x285d0b0
	void InputPickupReleased(); // Function Solarland.SolarPlayerController.InputPickupReleased // (Final|Native|Public) // @ game+0x285d150
	void InputPickupPressed(); // Function Solarland.SolarPlayerController.InputPickupPressed // (Final|Native|Public) // @ game+0x285d130
	void InputMoveRight(float InValueY); // Function Solarland.SolarPlayerController.InputMoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0x285d030
	void InputMovementYReceived(float InValueY); // Function Solarland.SolarPlayerController.InputMovementYReceived // (Final|Native|Public) // @ game+0x285d030
	void InputMovementXReceived(float InValueX); // Function Solarland.SolarPlayerController.InputMovementXReceived // (Final|Native|Public) // @ game+0x285cfb0
	void InputMoveForward(float InValueX); // Function Solarland.SolarPlayerController.InputMoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0x285cfb0
	void InputMapPressed(); // Function Solarland.SolarPlayerController.InputMapPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285cf90
	void InputLeftFireReleased(); // Function Solarland.SolarPlayerController.InputLeftFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x285cf70
	void InputLeftFirePressed(); // Function Solarland.SolarPlayerController.InputLeftFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285cf50
	void InputKeepSprintPressed(); // Function Solarland.SolarPlayerController.InputKeepSprintPressed // (Final|Native|Public) // @ game+0x285cf30
	void InputJumpReleased(); // Function Solarland.SolarPlayerController.InputJumpReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x285cf10
	void InputJumpPressed(); // Function Solarland.SolarPlayerController.InputJumpPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285cef0
	void InputItemActionWheelReleased(); // Function Solarland.SolarPlayerController.InputItemActionWheelReleased // (Final|Native|Public) // @ game+0x285ced0
	void InputItemActionWheelPressed(); // Function Solarland.SolarPlayerController.InputItemActionWheelPressed // (Final|Native|Public) // @ game+0x285ceb0
	void InputInteractPressed(); // Function Solarland.SolarPlayerController.InputInteractPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285ce90
	void InputInteractAndReloadReleased(); // Function Solarland.SolarPlayerController.InputInteractAndReloadReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x285ce70
	void InputInteractAndReloadPressed(); // Function Solarland.SolarPlayerController.InputInteractAndReloadPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285ce50
	void InputHorizontalJetReleased(); // Function Solarland.SolarPlayerController.InputHorizontalJetReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x285ce30
	void InputHorizontalJetPressed(); // Function Solarland.SolarPlayerController.InputHorizontalJetPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285ce10
	void InputGunsightReleased(); // Function Solarland.SolarPlayerController.InputGunsightReleased // (Final|Native|Public) // @ game+0x285cdf0
	void InputGunsightPressed(); // Function Solarland.SolarPlayerController.InputGunsightPressed // (Final|Native|Public) // @ game+0x285cdd0
	void InputGetOnVehicleReleased(); // Function Solarland.SolarPlayerController.InputGetOnVehicleReleased // (Final|Native|Public) // @ game+0x285cdb0
	void InputGetOffVehicleReleased(); // Function Solarland.SolarPlayerController.InputGetOffVehicleReleased // (Final|Native|Public) // @ game+0x285cd90
	void InputFreeLookReleased(); // Function Solarland.SolarPlayerController.InputFreeLookReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x285cd70
	void InputFreeLookPressed(); // Function Solarland.SolarPlayerController.InputFreeLookPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285cd50
	void InputFireReleased(); // Function Solarland.SolarPlayerController.InputFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x285cd30
	void InputFirePressed(); // Function Solarland.SolarPlayerController.InputFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285cd10
	void InputEquip2Released(); // Function Solarland.SolarPlayerController.InputEquip2Released // (Final|Native|Public) // @ game+0x285ccf0
	void InputEquip2Pressed(); // Function Solarland.SolarPlayerController.InputEquip2Pressed // (Final|Native|Public) // @ game+0x285ccd0
	void InputEquip1Released(); // Function Solarland.SolarPlayerController.InputEquip1Released // (Final|Native|Public) // @ game+0x285ccb0
	void InputEquip1Pressed(); // Function Solarland.SolarPlayerController.InputEquip1Pressed // (Final|Native|Public) // @ game+0x285cc90
	void InputEmoteActionWheelReleased(); // Function Solarland.SolarPlayerController.InputEmoteActionWheelReleased // (Final|Native|Public) // @ game+0x285cc70
	void InputEmoteActionWheelPressed(); // Function Solarland.SolarPlayerController.InputEmoteActionWheelPressed // (Final|Native|Public) // @ game+0x285cc50
	void InputEjectReleased(); // Function Solarland.SolarPlayerController.InputEjectReleased // (Final|Native|Public) // @ game+0x285cc30
	void InputEjectPressed(); // Function Solarland.SolarPlayerController.InputEjectPressed // (Final|Native|Public) // @ game+0x285cc10
	void InputDriveVehicleReleased(); // Function Solarland.SolarPlayerController.InputDriveVehicleReleased // (Final|Native|Public) // @ game+0x285cbf0
	void InputCrouchReleased(); // Function Solarland.SolarPlayerController.InputCrouchReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x285cbd0
	void InputCrouchPressed(); // Function Solarland.SolarPlayerController.InputCrouchPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285cbb0
	void InputCancelSkydivingFollowingTriggered(); // Function Solarland.SolarPlayerController.InputCancelSkydivingFollowingTriggered // (Final|Native|Public|BlueprintCallable) // @ game+0x285cb90
	void InputCancelActionReleased(); // Function Solarland.SolarPlayerController.InputCancelActionReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x285cb70
	void InputCancelActionPressed(); // Function Solarland.SolarPlayerController.InputCancelActionPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285cb50
	void InputBuilding(); // Function Solarland.SolarPlayerController.InputBuilding // (Final|Native|Public) // @ game+0x285cb30
	void InputBigRechargeShieldReleased(); // Function Solarland.SolarPlayerController.InputBigRechargeShieldReleased // (Final|Native|Public) // @ game+0x285cb10
	void InputBigRechargeShieldPressed(); // Function Solarland.SolarPlayerController.InputBigRechargeShieldPressed // (Final|Native|Public) // @ game+0x285caf0
	void InputBackpackReleased(); // Function Solarland.SolarPlayerController.InputBackpackReleased // (Final|Native|Public) // @ game+0x285cad0
	void InputBackpackPressed(); // Function Solarland.SolarPlayerController.InputBackpackPressed // (Final|Native|Public) // @ game+0x285cab0
	void InputAltFireReleased(); // Function Solarland.SolarPlayerController.InputAltFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x285ca90
	void InputAltFirePressed(); // Function Solarland.SolarPlayerController.InputAltFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x285ca70
	void InputActionWheelPreviousPage(); // Function Solarland.SolarPlayerController.InputActionWheelPreviousPage // (Final|Native|Public) // @ game+0x285ca50
	void InputActionWheelNextPage(); // Function Solarland.SolarPlayerController.InputActionWheelNextPage // (Final|Native|Public) // @ game+0x285ca30
	void InputActionWheelExec(); // Function Solarland.SolarPlayerController.InputActionWheelExec // (Final|Native|Public) // @ game+0x285ca10
	void InputActionWheelCancel(); // Function Solarland.SolarPlayerController.InputActionWheelCancel // (Final|Native|Public) // @ game+0x285c9f0
	bool IfSolarCharacterIsDriver(); // Function Solarland.SolarPlayerController.IfSolarCharacterIsDriver // (Final|Native|Public) // @ game+0x285c9c0
	bool HasSkin(int32_t InSkinID); // Function Solarland.SolarPlayerController.HasSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x285c920
	void HandleBeginSpectateRequest(); // Function Solarland.SolarPlayerController.HandleBeginSpectateRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x285c900
	void GyroscopeTilt(struct FVector Tilt); // Function Solarland.SolarPlayerController.GyroscopeTilt // (Final|Native|Public|HasDefaults) // @ game+0x285c870
	void GyroscopeRotationRate(struct FVector RotationRate); // Function Solarland.SolarPlayerController.GyroscopeRotationRate // (Final|Native|Public|HasDefaults) // @ game+0x285c7e0
	struct ASolarCharacter* GetViewportFocusedCharacter(bool bReturnPossessedCharacterIfSpectateNull); // Function Solarland.SolarPlayerController.GetViewportFocusedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285c740
	struct FVector2D GetViewportCenter(); // Function Solarland.SolarPlayerController.GetViewportCenter // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x285c700
	struct FRotator GetSpectateTargetRotation(); // Function Solarland.SolarPlayerController.GetSpectateTargetRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x285c690
	struct ASolarPlayerState* GetSpectateTargetPlayerState(); // Function Solarland.SolarPlayerController.GetSpectateTargetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285c660
	struct ASolarSpectateInfo* GetSpectateInfo(); // Function Solarland.SolarPlayerController.GetSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285c630
	struct ASolarCharacter* GetSpectatedCharacter(); // Function Solarland.SolarPlayerController.GetSpectatedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285c6d0
	struct ASolarPlayerState* GetSolarViewPlayerState(); // Function Solarland.SolarPlayerController.GetSolarViewPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285c600
	struct ASolarPlayerState* GetSolarPlayerState(); // Function Solarland.SolarPlayerController.GetSolarPlayerState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285c5c0
	struct ASolarCharacter* GetSolarCharacter(); // Function Solarland.SolarPlayerController.GetSolarCharacter // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285c580
	enum class EPlayerNetStateInGame GetPlayNetStateInGame(); // Function Solarland.SolarPlayerController.GetPlayNetStateInGame // (Final|Native|Public) // @ game+0x285c0e0
	struct FRotator GetPlayerViewRotation(bool bWithoutCameraModifiers, bool bWithRotationInput); // Function Solarland.SolarPlayerController.GetPlayerViewRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x285c490
	struct FVector GetPlayerViewLocation(bool bWithoutCameraModifiers, bool bWithRotationInput); // Function Solarland.SolarPlayerController.GetPlayerViewLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x285c3a0
	struct UPlayerStatisticsData* GetPlayerStatData(); // Function Solarland.SolarPlayerController.GetPlayerStatData // (Final|Native|Public) // @ game+0x285c370
	struct FString GetPlayerID(); // Function Solarland.SolarPlayerController.GetPlayerID // (Native|Public|Const) // @ game+0x285c2e0
	struct FString GetNoticeLocalText(int32_t InNoticeID, struct TMap<struct FString, struct FString>& InNoticeParams); // Function Solarland.SolarPlayerController.GetNoticeLocalText // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	char GetMyTeamID(); // Function Solarland.SolarPlayerController.GetMyTeamID // (Native|Public|Const) // @ game+0x285c0a0
	char GetMyPosInTeam(); // Function Solarland.SolarPlayerController.GetMyPosInTeam // (Final|Native|Public|Const) // @ game+0x285c070
	struct FVector2D GetMyMarkedPointInNavMap(); // Function Solarland.SolarPlayerController.GetMyMarkedPointInNavMap // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x285c030
	int32_t GetMultiKillNum(); // Function Solarland.SolarPlayerController.GetMultiKillNum // (Final|Native|Public|Const) // @ game+0x285c000
	int32_t GetKillNum(); // Function Solarland.SolarPlayerController.GetKillNum // (Final|Native|Public|Const) // @ game+0x285bfa0
	int32_t GetKillingSpreesNum(); // Function Solarland.SolarPlayerController.GetKillingSpreesNum // (Final|Native|Public|Const) // @ game+0x285bfd0
	bool GetIsDropAndPickUpItemOrWeaponSwitchOnValue(); // Function Solarland.SolarPlayerController.GetIsDropAndPickUpItemOrWeaponSwitchOnValue // (Final|Native|Public) // @ game+0x285bf70
	struct USolarInputModePolicyComponent* GetInputModePolicyComp(); // Function Solarland.SolarPlayerController.GetInputModePolicyComp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285bf50
	struct FSolarInputModeDataBase GetInputMode(struct FName Name, enum class ESolarInputMode& OutInputMode, bool& bFound); // Function Solarland.SolarPlayerController.GetInputMode // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x285be20
	struct USolarCameraComponent* GetCurrentCameraComponent(); // Function Solarland.SolarPlayerController.GetCurrentCameraComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285bc90
	void GetControlledVehiclePropertyContainer(struct TArray<struct UObject*>& OutObjects); // Function Solarland.SolarPlayerController.GetControlledVehiclePropertyContainer // (Final|Native|Public|HasOutParms) // @ game+0x285bbe0
	struct FRotator GetCharacterViewRotation(); // Function Solarland.SolarPlayerController.GetCharacterViewRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x285bba0
	struct FRotator GetCameraRotation(); // Function Solarland.SolarPlayerController.GetCameraRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x285bb50
	struct FVector GetCameraLocation(); // Function Solarland.SolarPlayerController.GetCameraLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x285bb00
	struct ASolarCharacter* GetCameraFocusedCharacter(); // Function Solarland.SolarPlayerController.GetCameraFocusedCharacter // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285bad0
	float GetCameraDefaultFOVAngle(); // Function Solarland.SolarPlayerController.GetCameraDefaultFOVAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285baa0
	float GetCameraCurrentFOVAngle(); // Function Solarland.SolarPlayerController.GetCameraCurrentFOVAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285ba70
	struct USolarCameraComponent* GetActiveCamera(); // Function Solarland.SolarPlayerController.GetActiveCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285ba40
	void ForceCompleteClientBlendToSpectateTarget(); // Function Solarland.SolarPlayerController.ForceCompleteClientBlendToSpectateTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285ba20
	void ExcludeDifferentTeam(int32_t TeamID); // Function Solarland.SolarPlayerController.ExcludeDifferentTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x285b7a0
	void EndOBCurrentBattle(); // Function Solarland.SolarPlayerController.EndOBCurrentBattle // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x285b780
	void DropPassengerNotification(); // Function Solarland.SolarPlayerController.DropPassengerNotification // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285b760
	void DestroyCharacterCorpse(); // Function Solarland.SolarPlayerController.DestroyCharacterCorpse // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x285b740
	void DebugUpdateTask(); // Function Solarland.SolarPlayerController.DebugUpdateTask // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void DebugSetPlayerData(); // Function Solarland.SolarPlayerController.DebugSetPlayerData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void DebugInitTask(); // Function Solarland.SolarPlayerController.DebugInitTask // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void CustomModeShowNotice(int32_t InType, int32_t InNoticeID, struct UObject* InClass, float InTime, struct FString InText, struct UObject* InIcon, int32_t InNoticeColor); // Function Solarland.SolarPlayerController.CustomModeShowNotice // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void CustomAntiCheatDataExport(struct TArray<struct FString>& DataName, struct TArray<struct FString>& DataContent); // Function Solarland.SolarPlayerController.CustomAntiCheatDataExport // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ControlsSwitchWeaponByOrder(); // Function Solarland.SolarPlayerController.ControlsSwitchWeaponByOrder // (Final|Native|Public) // @ game+0x285b720
	void ClientSyncPlayerSelfReport(struct FSolarPlayerReport SelfReport, struct FSolarGameModeInfo GameInfo); // Function Solarland.SolarPlayerController.ClientSyncPlayerSelfReport // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285b620
	void ClientStartReviveItemRecycleCountDown(int32_t CurrentTime, int32_t DurationTime); // Function Solarland.SolarPlayerController.ClientStartReviveItemRecycleCountDown // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x285b550
	void ClientShowUI(struct FString WidgetPath, struct FString UIName); // Function Solarland.SolarPlayerController.ClientShowUI // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285b450
	void ClientShowDiePage(); // Function Solarland.SolarPlayerController.ClientShowDiePage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285b430
	void ClientScreenshotTask(struct FScreenshotSetting Setting); // Function Solarland.SolarPlayerController.ClientScreenshotTask // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285b380
	void ClientReviveWillBeDisabledHint(int32_t Duration); // Function Solarland.SolarPlayerController.ClientReviveWillBeDisabledHint // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x285b2f0
	void ClientReviveBeDisabledHint(); // Function Solarland.SolarPlayerController.ClientReviveBeDisabledHint // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x285b2d0
	void ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving(struct ASolarPlayerState* NewLeaderPlayerState, struct ASolarPlayerState* OldLeaderPlayerState); // Function Solarland.SolarPlayerController.ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving // (Final|Net|Native|Event|Private|NetClient) // @ game+0x285b200
	void ClientReceviceDamageText(struct TArray<struct FSolarDamageText> InSolarDamageTextDatas); // Function Solarland.SolarPlayerController.ClientReceviceDamageText // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285b160
	void ClientRaiseScreenshotJob(enum class EShotMomentFlag ShotMoment); // Function Solarland.SolarPlayerController.ClientRaiseScreenshotJob // (Net|Native|Event|Public|NetClient) // @ game+0x285b0e0
	void ClientPlayerGoToSettlement(struct TArray<struct FSolarPlayerReport> Reports, struct FSolarGameModeInfo GameInfo, struct TArray<int32_t> InSettlementPageIndexs, bool IsCustomRoom); // Function Solarland.SolarPlayerController.ClientPlayerGoToSettlement // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285af20
	void ClientPlayerActivityHeatUpdate(struct FReplayActivityHeatFragment ActivityHeatFragment); // Function Solarland.SolarPlayerController.ClientPlayerActivityHeatUpdate // (Net|Native|Event|Public|NetClient) // @ game+0x285ae70
	void ClientNotifyShowEmoji(int32_t EmojiID, struct ASolarCharacter* UseEmojiCharacter); // Function Solarland.SolarPlayerController.ClientNotifyShowEmoji // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285ada0
	void ClientNotifyCheatedPlayer(struct FText OutReason); // Function Solarland.SolarPlayerController.ClientNotifyCheatedPlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285ace0
	void ClientNotifyAbnormalPlayer(struct FText OutReason); // Function Solarland.SolarPlayerController.ClientNotifyAbnormalPlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285ac20
	void ClientHandleTimerMessage(struct TArray<char> TimerMessage); // Function Solarland.SolarPlayerController.ClientHandleTimerMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285ab80
	void ClientEnableAiPalComponent(int32_t Rate); // Function Solarland.SolarPlayerController.ClientEnableAiPalComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x285aaf0
	void ClientDoCharacterOperation(struct FCharacterOperationEvent ChOperationEvt); // Function Solarland.SolarPlayerController.ClientDoCharacterOperation // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285aa60
	void ClientCloseUI(struct FString UIName); // Function Solarland.SolarPlayerController.ClientCloseUI // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285a9c0
	void ClientClearTeamSummonItemMark(); // Function Solarland.SolarPlayerController.ClientClearTeamSummonItemMark // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285a9a0
	void ClientClearAudioListenerOverride(); // Function Solarland.SolarPlayerController.ClientClearAudioListenerOverride // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285a980
	void ClientCharacterIsDead(); // Function Solarland.SolarPlayerController.ClientCharacterIsDead // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0x285a930
	void ClientBeginOBCurrentBattleInternal(); // Function Solarland.SolarPlayerController.ClientBeginOBCurrentBattleInternal // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x285a910
	void ClearWorldMarkCachedData(); // Function Solarland.SolarPlayerController.ClearWorldMarkCachedData // (Final|Native|Public) // @ game+0x285a8f0
	void ClearMarkedPointInNavMapLuaCall(); // Function Solarland.SolarPlayerController.ClearMarkedPointInNavMapLuaCall // (Final|Native|Public) // @ game+0x285a8d0
	void ClearMarkedPointInNavMap(); // Function Solarland.SolarPlayerController.ClearMarkedPointInNavMap // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x285a8b0
	void ChangeVehicleVectorPropertyInternal(struct FString InPropertyName, float InX, float InY, float InZ); // Function Solarland.SolarPlayerController.ChangeVehicleVectorPropertyInternal // (Final|Native|Public) // @ game+0x285a740
	void ChangeVehicleRotatorPropertyInternal(struct FString InPropertyName, float InPitch, float InYaw, float InRoll); // Function Solarland.SolarPlayerController.ChangeVehicleRotatorPropertyInternal // (Final|Native|Public) // @ game+0x285a740
	void ChangeVehicleIntPropertyInternal(struct FString InPropertyName, int32_t InFloat); // Function Solarland.SolarPlayerController.ChangeVehicleIntPropertyInternal // (Final|Native|Public) // @ game+0x285a660
	void ChangeVehicleFreeLookState(bool bInFreeLook); // Function Solarland.SolarPlayerController.ChangeVehicleFreeLookState // (Final|Native|Public|BlueprintCallable) // @ game+0x285a5d0
	void ChangeVehicleFloatPropertyInternal(struct FString InPropertyName, float InFloat); // Function Solarland.SolarPlayerController.ChangeVehicleFloatPropertyInternal // (Final|Native|Public) // @ game+0x285a4e0
	void ChangeVehicleCurvePropertyInternal(struct FString InPropertyName, char InChangeType, float InKey, float InValue); // Function Solarland.SolarPlayerController.ChangeVehicleCurvePropertyInternal // (Final|Native|Public) // @ game+0x285a370
	void ChangeVehicleBoolPropertyInternal(struct FString InPropertyName, bool InBool); // Function Solarland.SolarPlayerController.ChangeVehicleBoolPropertyInternal // (Final|Native|Public) // @ game+0x285a290
	bool CanWorldMark(); // Function Solarland.SolarPlayerController.CanWorldMark // (Final|Native|Public) // @ game+0x285a240
	bool CanSolarCharacterLaunchJetPack(); // Function Solarland.SolarPlayerController.CanSolarCharacterLaunchJetPack // (Final|Native|Public) // @ game+0x285a210
	bool CanSolarCharacterInput(); // Function Solarland.SolarPlayerController.CanSolarCharacterInput // (Final|Native|Public) // @ game+0x285a1e0
	bool CanSolarCharacterCrouch(); // Function Solarland.SolarPlayerController.CanSolarCharacterCrouch // (Final|Native|Public) // @ game+0x285a1b0
	void CancelSkydivingFollow(); // Function Solarland.SolarPlayerController.CancelSkydivingFollow // (Final|Native|Public|BlueprintCallable) // @ game+0x285a270
	void BuildSkydivingFollowOnLeavingTeam(bool bIgnoreNotification); // Function Solarland.SolarPlayerController.BuildSkydivingFollowOnLeavingTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x285a120
	void BuildSkydivingFollowOnEnteringTeam(); // Function Solarland.SolarPlayerController.BuildSkydivingFollowOnEnteringTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x285a100
	void BindDelegatesDependGameState(); // Function Solarland.SolarPlayerController.BindDelegatesDependGameState // (Final|Native|Public|BlueprintCallable) // @ game+0x285a0e0
	void BeginOBCurrentBattle(); // Function Solarland.SolarPlayerController.BeginOBCurrentBattle // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x285a0c0
	void BackToLobby(); // Function Solarland.SolarPlayerController.BackToLobby // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x285a0a0
	void AssembleCustomAntiCheatData(struct ASolarWeapon* ActiveWeapon, struct ASolarVehiclePawn* BoardedVehicle); // Function Solarland.SolarPlayerController.AssembleCustomAntiCheatData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void AntiCheatDataSchedulerUpload(struct TArray<struct FString> DataName, struct TArray<struct FString> DataContent, struct FFixedAntiCheatData FixedData); // Function Solarland.SolarPlayerController.AntiCheatDataSchedulerUpload // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2859ee0
	void AddTeammateCandidate(struct ASolarCharacter* Candidate, int32_t TeamID); // Function Solarland.SolarPlayerController.AddTeammateCandidate // (Final|Native|Public|BlueprintCallable) // @ game+0x2859e10
};

// Class Solarland.SCMPlayerController
// Size: 0xe50 (Inherited: 0xe48)
struct ASCMPlayerController : ASolarPlayerController {
	struct USCMPlayerRPCComponent* RpcComponent; // 0xe48(0x08)

	void ServerHandlePlayerLevelLoaded(struct FString LevelName); // Function Solarland.SCMPlayerController.ServerHandlePlayerLevelLoaded // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2708cc0
	void RequestUpdataDataManager(); // Function Solarland.SCMPlayerController.RequestUpdataDataManager // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2708ca0
};

// Class Solarland.SCMPlayerRPCComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USCMPlayerRPCComponent : UActorComponent {

	void ReceivedLevelLoaded(struct FString LevelName); // Function Solarland.SCMPlayerRPCComponent.ReceivedLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivedCharacter(); // Function Solarland.SCMPlayerRPCComponent.ReceivedCharacter // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceivedBeginLevelLoad(struct FString LevelName); // Function Solarland.SCMPlayerRPCComponent.ReceivedBeginLevelLoad // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SCMPlayerStart
// Size: 0x2b8 (Inherited: 0x258)
struct ASCMPlayerStart : APlayerStart {
	float Distance; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct FString Side; // 0x260(0x10)
	struct FString Job; // 0x270(0x10)
	struct FString ElementID; // 0x280(0x10)
	enum class ESCMMapElementType Type; // 0x290(0x01)
	enum class ESCMMapElementStateType State; // 0x291(0x01)
	enum class ESCMMapElementVisibilityType Visibility; // 0x292(0x01)
	char pad_293[0x1]; // 0x293(0x01)
	struct FName ElementName; // 0x294(0x08)
	char pad_29C[0x4]; // 0x29c(0x04)
	struct TArray<struct FVector> PlayerLocations; // 0x2a0(0x10)
	char pad_2B0[0x8]; // 0x2b0(0x08)

	enum class ESCMMapElementVisibilityType SetElementVisibility(enum class ESCMMapElementVisibilityType NewType); // Function Solarland.SCMPlayerStart.SetElementVisibility // (Native|Public|BlueprintCallable) // @ game+0x270eef0
	enum class ESCMMapElementStateType SetElementState(enum class ESCMMapElementStateType NewState); // Function Solarland.SCMPlayerStart.SetElementState // (Native|Public|BlueprintCallable) // @ game+0x270ee60
	void OnElementVisibilityChanged(enum class ESCMMapElementVisibilityType CurrentVisibility); // Function Solarland.SCMPlayerStart.OnElementVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnElementStateChanged(enum class ESCMMapElementStateType CurrentState); // Function Solarland.SCMPlayerStart.OnElementStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SCMSettlementPlayerState
// Size: 0xcc8 (Inherited: 0xcc8)
struct ASCMSettlementPlayerState : ASCMPlayerState {
};

// Class Solarland.ScopeFullScreenWidget
// Size: 0x400 (Inherited: 0x400)
struct UScopeFullScreenWidget : USolarUserWidget {
};

// Class Solarland.ScoutEnemyConfig
// Size: 0xf0 (Inherited: 0x30)
struct UScoutEnemyConfig : UDataAsset {
	bool bShowDebug; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t ScoutMaxNum; // 0x34(0x04)
	float TimeToScanEffect; // 0x38(0x04)
	float MaxDetectionDistance; // 0x3c(0x04)
	struct FVector2D BondingBoxExtent; // 0x40(0x08)
	bool bSupportHipFire; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct TMap<enum class EWeaponScopeType, float> BoxScaleRatioByScope; // 0x50(0x50)
	struct TArray<enum class EObjectTypeQuery> TargetOccBlockTypes; // 0xa0(0x10)
	struct FGameplayTagContainer BlockWithMyTags; // 0xb0(0x20)
	struct FGameplayTagContainer BlockWithEnemyTags; // 0xd0(0x20)
};

// Class Solarland.ScoutEnemyObject
// Size: 0x80 (Inherited: 0x28)
struct UScoutEnemyObject : UObject {
	char pad_28[0x48]; // 0x28(0x48)
	struct UScoutEnemyConfig* ScoutEnemyConfig; // 0x70(0x08)
	char pad_78[0x8]; // 0x78(0x08)
};

// Class Solarland.SCSettlementGameState
// Size: 0x688 (Inherited: 0x688)
struct ASCSettlementGameState : ASCustomGameState {
};

// Class Solarland.SolarGameModeWeaponAction
// Size: 0x108 (Inherited: 0x30)
struct USolarGameModeWeaponAction : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate OnCompleted; // 0x30(0x10)
	char pad_40[0xc8]; // 0x40(0xc8)

	struct USolarGameModeWeaponAction* SetCharacterWeaponBySeq(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, bool bDestroyPrevWeapon, enum class EWeaponSlotType Slot, int32_t ItemID); // Function Solarland.SolarGameModeWeaponAction.SetCharacterWeaponBySeq // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271e3c0
	void OnWeaponCreated(enum class EWeaponSlotType SlotIndex, struct ASolarPlayerWeapon* WeaponPtr, struct USolarBackpackComponent* SolarBackpackComponent); // Function Solarland.SolarGameModeWeaponAction.OnWeaponCreated // (Final|Native|Public) // @ game+0x271c680
	void CreateWeaponAsync(enum class EWeaponSlotType SlotIndex, bool bDestroyPrevWeapon, struct FSolarItemData& InItemData, struct USolarBackpackComponent* InSolarBackpackComponent); // Function Solarland.SolarGameModeWeaponAction.CreateWeaponAsync // (Final|Native|Public|HasOutParms) // @ game+0x2715d80
};

// Class Solarland.SCustomGameModeLibrary
// Size: 0x28 (Inherited: 0x28)
struct USCustomGameModeLibrary : UBlueprintFunctionLibrary {

	bool UnBindPlayerReconnectedGameEvent(struct UObject* WorldContextObject, struct FDelegate& Deletage); // Function Solarland.SCustomGameModeLibrary.UnBindPlayerReconnectedGameEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27207a0
	bool UnbindDataChangeEventVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventVector3 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2720890
	bool UnbindDataChangeEventString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2720890
	bool UnbindDataChangeEventInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2720890
	bool UnbindDataChangeEventFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2720890
	bool UnbindDataChangeEventByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2720890
	bool UnbindDataChangeEventBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2720890
	void TryActivateAbilityByTag(struct USolarAbilitySystemComponent* SolarAbilitySystemComponent, struct FGameplayTag& AbilityTag, bool bAllowRemoteActivation); // Function Solarland.SCustomGameModeLibrary.TryActivateAbilityByTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2720680
	void StopSpectateOtherPlayer(struct ASCMPlayerState* Player); // Function Solarland.SCustomGameModeLibrary.StopSpectateOtherPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2720600
	void SpawnVehicleByIDAtTheSpecified(struct UObject* WorldContextObject, int32_t ID, struct FTransform Transform); // Function Solarland.SCustomGameModeLibrary.SpawnVehicleByIDAtTheSpecified // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2720480
	void SideLogGameStateStatistics(struct UObject* WorldContextObject, struct FString LogName, struct FString SideName, struct TMap<struct FString, struct FString>& LogValues); // Function Solarland.SCustomGameModeLibrary.SideLogGameStateStatistics // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2720280
	void SideEnterHeroPick(struct UObject* WorldContextObject, struct FString SideName); // Function Solarland.SCustomGameModeLibrary.SideEnterHeroPick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27201b0
	bool ShowTargetSettlementPage(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.ShowTargetSettlementPage // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2720120
	struct UUserWidget* ShowSolarWidget(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass, enum class EUIRoot UILayer, bool bInShowPersistent); // Function Solarland.SCustomGameModeLibrary.ShowSolarWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x271ffd0
	bool ShowNextSettlementPage(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.ShowNextSettlementPage // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x271ff40
	void ShowGameNoticeCustom(struct UObject* WorldContextObject, struct FString NoticeText, enum class ECustomNoticeType NoticeType, struct UUINoticeBase* NoticeClass, float NoticeTime, enum class ECustomNoticeColor NoticeColor, struct UPaperSprite* NoticeIcon); // Function Solarland.SCustomGameModeLibrary.ShowGameNoticeCustom // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x271fd10
	void ShowGameNoticeByID(struct UObject* WorldContextObject, int32_t NoticeId); // Function Solarland.SCustomGameModeLibrary.ShowGameNoticeByID // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x271fc50
	bool SetWeaponParts(struct UObject* WorldContextObject, struct ASolarWeapon* TargetWeapon, struct FWeaponPartsData& Parts); // Function Solarland.SCustomGameModeLibrary.SetWeaponParts // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271fa40
	void SetupBotDifficulty(struct TArray<struct ASolarBotAIController*>& BotPlayers, int32_t Difficulty); // Function Solarland.SCustomGameModeLibrary.SetupBotDifficulty // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271fb60
	void SetSpectateConditions(struct ASolarPlayerState* Player, struct FSpectateConditions& Conditions); // Function Solarland.SCustomGameModeLibrary.SetSpectateConditions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271f8f0
	void SetReviveItemMaxUsage(struct UObject* WorldContextObject, int32_t InMaxUsage); // Function Solarland.SCustomGameModeLibrary.SetReviveItemMaxUsage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271f830
	bool SetPlayerDataVector3(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FVector& InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x271f700
	bool SetPlayerDataString(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FString InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271f5c0
	bool SetPlayerDataInt(struct ASCMPlayerState* PlayerState, struct FString DataName, int32_t InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataInt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271f4a0
	bool SetPlayerDataFloat(struct ASCMPlayerState* PlayerState, struct FString DataName, float InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataFloat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271f370
	bool SetPlayerDataByte(struct ASCMPlayerState* PlayerState, struct FString DataName, char InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataByte // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271f240
	bool SetPlayerDataBool(struct ASCMPlayerState* PlayerState, struct FString DataName, bool InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataBool // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271f110
	void SetModifyColorGrading(bool InEnable, struct FLinearColor InGain, struct FLinearColor InSaturation, struct FLinearColor InContrast); // Function Solarland.SCustomGameModeLibrary.SetModifyColorGrading // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x271ef90
	bool SetDataVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FVector& InValue); // Function Solarland.SCustomGameModeLibrary.SetDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x271ede0
	bool SetDataString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InValue); // Function Solarland.SCustomGameModeLibrary.SetDataString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271ec20
	bool SetDataInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, int32_t InValue); // Function Solarland.SCustomGameModeLibrary.SetDataInt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271ea70
	bool SetDataFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, float InValue); // Function Solarland.SCustomGameModeLibrary.SetDataFloat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271e8c0
	bool SetDataByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, char InValue); // Function Solarland.SCustomGameModeLibrary.SetDataByte // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271e710
	bool SetDataBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, bool InValue); // Function Solarland.SCustomGameModeLibrary.SetDataBool // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271e560
	bool SetBattleUISubItemVisibilityBySabotageGameMode(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.SetBattleUISubItemVisibilityBySabotageGameMode // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x271e330
	void ServerSetCustomSpawnBlacklist(struct UObject* WorldContextObject, struct TArray<int32_t>& InWeaponBlacklist, struct TArray<int32_t>& InWeaponWhitelist, struct TArray<int32_t>& InVehicleBlacklist, struct TArray<int32_t>& InVehicleWhitelist); // Function Solarland.SCustomGameModeLibrary.ServerSetCustomSpawnBlacklist // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271e120
	void SendCelebrateWinnerEvent(struct FGameplayTag EventTag, struct ASolarTeamInfo* WinnerTeam, struct ASolarCharacter* FocusCharacter); // Function Solarland.SCustomGameModeLibrary.SendCelebrateWinnerEvent // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x271e020
	void SaveGame(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.SaveGame // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x271dfa0
	bool ResurrectCharacter(struct UObject* WorldContextObject, struct ASolarCharacter* Character, struct FTransform& Transform, bool bClearAllItems, bool bEmptyEnergy, bool bReChargeJetToFull, bool bClearWeapons, enum class EPlayerResurrectType PlayerResurrectType); // Function Solarland.SCustomGameModeLibrary.ResurrectCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x271dcd0
	void RenumberAllPlayerPosInTeam(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.RenumberAllPlayerPosInTeam // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x271dc50
	void RemoveSpecificRankChangeEvent(struct UObject* WorldContextObject, struct FString RankName, int32_t TargetRank, struct FDelegate& SpecificRankChangeEvent); // Function Solarland.SCustomGameModeLibrary.RemoveSpecificRankChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271dad0
	void RemoveRankListChangeEvent(struct UObject* WorldContextObject, struct FString RankName, struct FSCMRankEventHandle& RankListEventHandle); // Function Solarland.SCustomGameModeLibrary.RemoveRankListChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271d9a0
	void RemovePlayerData(struct ASCMPlayerState* PlayerState, struct FString DataName); // Function Solarland.SCustomGameModeLibrary.RemovePlayerData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271d8d0
	void RemoveHostRankChangeEvent(struct UObject* WorldContextObject, struct FString RankName, struct FString HostID, enum class ESCMHostType HostType, struct FDelegate& HostRankChangeEvent); // Function Solarland.SCustomGameModeLibrary.RemoveHostRankChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271d700
	void RemoveGameplayCue(struct UAbilitySystemComponent* AbilitySystemComponen, struct FGameplayTag GameplayCueTag); // Function Solarland.SCustomGameModeLibrary.RemoveGameplayCue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271d640
	void RemoveData(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName); // Function Solarland.SCustomGameModeLibrary.RemoveData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271d4d0
	struct UActorMarkBase* RegisterWorldMarkOnPos(struct UObject* WorldContextObject, struct UActorMarkBase* InActorMarkClass, struct FVector Pos); // Function Solarland.SCustomGameModeLibrary.RegisterWorldMarkOnPos // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x271d3b0
	struct UActorMarkBase* RegisterWorldMarkOnActor(struct UObject* WorldContextObject, struct UActorMarkBase* InActorMarkClass, struct AActor* Actor); // Function Solarland.SCustomGameModeLibrary.RegisterWorldMarkOnActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271d2b0
	bool PlusData(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, float InValue); // Function Solarland.SCustomGameModeLibrary.PlusData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271d100
	void PlayHighlightInSettlement(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.PlayHighlightInSettlement // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x271ca10
	void PlayersSettlement(struct UObject* WorldContextObject, struct TArray<struct ASolarPlayerState*> TargetPlayers); // Function Solarland.SCustomGameModeLibrary.PlayersSettlement // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x271cfe0
	void PlayerReportServer(struct UObject* WorldContextObject, struct ASolarPlayerState* ps, enum class EStatisticsType StatisticsType, int32_t InValue, bool IsIncrease); // Function Solarland.SCustomGameModeLibrary.PlayerReportServer // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x271ce50
	void PlayerOutBySelf(struct UObject* WorldContextObject, enum class ESCMPlayerOutPath InPath); // Function Solarland.SCustomGameModeLibrary.PlayerOutBySelf // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x271cd90
	void PlayerLogGameStateStatistics(struct UObject* WorldContextObject, struct FString LogName, struct ASCMPlayerState* PlayerState, struct TMap<struct FString, struct FString>& LogValues, bool IncludeStatisticsData); // Function Solarland.SCustomGameModeLibrary.PlayerLogGameStateStatistics // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271cb50
	void PlayerEnterHeroPick(struct UObject* WorldContextObject, struct ASCMPlayerState* Player); // Function Solarland.SCustomGameModeLibrary.PlayerEnterHeroPick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271ca90
	void PlaceCharacter(struct UObject* WorldContextObject, struct ASolarCharacter* Character, struct FTransform& Transform, bool bClearAllItems, bool bEmptyEnergy, bool bReChargeJetToFull, bool bClearWeapons); // Function Solarland.SCustomGameModeLibrary.PlaceCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x271c790
	void NotifyPlayerCheat(struct UObject* InWorldContext, struct ASCMPlayerState* InPlayer); // Function Solarland.SCustomGameModeLibrary.NotifyPlayerCheat // (Final|Native|Static|Public) // @ game+0x271c5c0
	void NotifyPlayerAbnormal(struct UObject* InWorldContext, struct ASCMPlayerState* InPlayer); // Function Solarland.SCustomGameModeLibrary.NotifyPlayerAbnormal // (Final|Native|Static|Public) // @ game+0x271c500
	void NotifyAIMgrSpawnFinished(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.NotifyAIMgrSpawnFinished // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x271c480
	void NotifyAIMgrBattleStarted(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.NotifyAIMgrBattleStarted // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x271c400
	void LetPlayerOut(struct UObject* WorldContextObject, struct TArray<struct ASCMPlayerState*> TargetPlayers, enum class ESCMPlayerOutType OutType, bool bReportSettleReward, bool bGoSpectator, bool bRemoveSide, struct FText OutReason); // Function Solarland.SCustomGameModeLibrary.LetPlayerOut // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x271c120
	void LetBattleEnd(struct UObject* WorldContextObject, enum class EBattleEndType BattleEndType); // Function Solarland.SCustomGameModeLibrary.LetBattleEnd // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x271c060
	void LetAllPlayersOut(struct UObject* WorldContextObject, enum class EBattleEndType BattleEndType); // Function Solarland.SCustomGameModeLibrary.LetAllPlayersOut // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x271bfa0
	bool IsSideCanJoinAI(struct UObject* WorldContextObject, struct FString SideName); // Function Solarland.SCustomGameModeLibrary.IsSideCanJoinAI // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x271bec0
	bool IsPlayingReplay(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsPlayingReplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271be30
	bool IsMatching(struct ASCMPlayerState* InPS); // Function Solarland.SCustomGameModeLibrary.IsMatching // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x271bda0
	bool IsInPreparation(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsInPreparation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x271bd10
	bool IsEnablePlayerUpgrade(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsEnablePlayerUpgrade // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271bc80
	bool IsEnableAITeamManager(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsEnableAITeamManager // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x271bbf0
	bool IsCustomRoomMode(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsCustomRoomMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x271bb60
	bool InsertWidgetToMapUISlot(struct UObject* WorldContextObject, struct UPanelSlot*& OutResultSlot, struct UWidget* InChildWidget, struct FName PanelName, bool bReplaceOldWidget); // Function Solarland.SCustomGameModeLibrary.InsertWidgetToMapUISlot // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271b9b0
	bool InsertWidgetToBattleUISlot(struct UObject* WorldContextObject, struct UPanelSlot*& OutResultSlot, struct UWidget* InChildWidget, struct FName PanelName, bool bReplaceOldWidget); // Function Solarland.SCustomGameModeLibrary.InsertWidgetToBattleUISlot // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271b800
	bool InsertWidgetToBackpackUISlot(struct UObject* WorldContextObject, struct UPanelSlot*& OutResultSlot, struct UWidget* InChildWidget, struct FName PanelName, bool bReplaceOldWidget); // Function Solarland.SCustomGameModeLibrary.InsertWidgetToBackpackUISlot // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271b650
	void InitializeSkydivingRelatedAbilities(struct ASolarCharacter* SolarCharacter); // Function Solarland.SCustomGameModeLibrary.InitializeSkydivingRelatedAbilities // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271b5d0
	void InitBotCruiseAIComp(struct UAirlineCruiseComponent* AirlineCruiseComponent, struct USBattleRoyaleGameModeAIComp* SBattleRoyaleGameModeAIComp); // Function Solarland.SCustomGameModeLibrary.InitBotCruiseAIComp // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x271b510
	void InitAirLineAndCrusiseInfo(struct TArray<struct ASolarCharacter*> CharacterArr, struct FTransform StartTransform, struct UAirlineCruiseComponent* AirlineCruiseComponent, float Speed, struct FVector2D StartPoint, struct FVector2D EndPoint, struct FVector2D CanParachutePoint, struct FVector2D ForceParachutePoint, bool bCreateRootIfNull, struct ASolarCapsuleActor* DefaultCapsuleActorClass); // Function Solarland.SCustomGameModeLibrary.InitAirLineAndCrusiseInfo // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x271b0e0
	void InformBotVictory(struct TArray<struct ASolarPlayerState*>& VictoryTeamBots); // Function Solarland.SCustomGameModeLibrary.InformBotVictory // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271b040
	bool HasBlockBetweenUs(struct AActor* A, struct AActor* B, bool bIsVehicle); // Function Solarland.SCustomGameModeLibrary.HasBlockBetweenUs // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271af40
	bool GetWeaponParts(struct UObject* WorldContextObject, struct ASolarWeapon* TargetWeapon, struct FWeaponPartsData& Parts); // Function Solarland.SCustomGameModeLibrary.GetWeaponParts // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x271ae20
	struct ASolarWeapon* GetWeaponBySlot(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, int32_t Slot); // Function Solarland.SCustomGameModeLibrary.GetWeaponBySlot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x271ad20
	bool GetSpecificRankData(struct UObject* WorldContextObject, struct FString RankName, int32_t TargetRank, struct FSCMRankData& OutData); // Function Solarland.SCustomGameModeLibrary.GetSpecificRankData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271ab50
	int32_t GetSolarItemManagerAirDropRelatedInfo(struct UObject* WorldContextObject, struct ASolarSafeArea* SafeArea, int32_t ChestID, struct TArray<struct FTransform>& TransformsArr); // Function Solarland.SCustomGameModeLibrary.GetSolarItemManagerAirDropRelatedInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271a9f0
	struct UUserWidget* GetSolarDisplayWidget(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass); // Function Solarland.SCustomGameModeLibrary.GetSolarDisplayWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x271a920
	struct USolarSaveGame* GetSaveGame(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetSaveGame // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x271a890
	struct ASolarSafeArea* GetSafeArea(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetSafeArea // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271a800
	bool GetRankListData(struct UObject* WorldContextObject, struct FString RankName, int32_t BeginRank, int32_t EndRank, struct TArray<struct FSCMRankData>& OutResult); // Function Solarland.SCustomGameModeLibrary.GetRankListData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x271a5d0
	void GetPlayerStatisticData(struct UObject* WorldContextObject, struct ASolarPlayerState* ps, enum class EStatisticsType StatisticsType, int32_t& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerStatisticData // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x271a480
	struct ASCMPlayerState* GetPlayerStateByCharacterOrController(struct ASolarCharacter* Player, struct ASCMPlayerController* Controller); // Function Solarland.SCustomGameModeLibrary.GetPlayerStateByCharacterOrController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x271a3b0
	struct APawn* GetPlayerPawn(struct ASCMPlayerState* Player, enum class EPlayerPawnType& OutType); // Function Solarland.SCustomGameModeLibrary.GetPlayerPawn // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x271a2d0
	bool GetPlayerDataVector3(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FVector& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x271a1a0
	bool GetPlayerDataString(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FString& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x271a060
	bool GetPlayerDataInt(struct ASCMPlayerState* PlayerState, struct FString DataName, int32_t& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2719f30
	bool GetPlayerDataFloat(struct ASCMPlayerState* PlayerState, struct FString DataName, float& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2719e00
	bool GetPlayerDataByte(struct ASCMPlayerState* PlayerState, struct FString DataName, char& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2719cd0
	bool GetPlayerDataBool(struct ASCMPlayerState* PlayerState, struct FString DataName, bool& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2719ba0
	void GetPlayerBattleRequestInfo(struct UObject* WorldContextObject, struct FString InSolarPlayerID, struct FPlayerBattleRequestInfo& OutResult); // Function Solarland.SCustomGameModeLibrary.GetPlayerBattleRequestInfo // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2719a50
	struct TArray<struct ASCMPlayerState*> GetOBPlayers(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetOBPlayers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2719980
	struct FString GetNoticeFormatText(struct UObject* WorldContextObject, int32_t InLocalizationID, struct TMap<struct FString, struct FString>& FormatContext); // Function Solarland.SCustomGameModeLibrary.GetNoticeFormatText // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27197b0
	int32_t GetMatchRuleID(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetMatchRuleID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2719650
	struct TArray<int32_t> GetMatchingMapIds(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetMatchingMapIds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27196e0
	bool GetMapDataVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, struct FVector& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2719440
	bool GetMapDataString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, struct FString& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2719220
	bool GetMapDataInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, int32_t& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2719010
	bool GetMapDataFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, float& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2718e00
	bool GetMapDataByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, char& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2718bf0
	bool GetMapDataBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, bool& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27189e0
	struct ASCMPlayerState* GetLocalPlayer(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetLocalPlayer // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2718950
	enum class ESCMInGameState GetInGameState(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetInGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27188c0
	int32_t GetHostRank(struct UObject* WorldContextObject, struct FString RankName, enum class ESCMHostType HostType, struct FString HostID); // Function Solarland.SCustomGameModeLibrary.GetHostRank // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27186d0
	void GetHostKeyArray(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct TArray<struct FString>& OutResult); // Function Solarland.SCustomGameModeLibrary.GetHostKeyArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2718580
	struct FString GetGameModeParam(struct UObject* WorldContextObject, struct FString InParamKey); // Function Solarland.SCustomGameModeLibrary.GetGameModeParam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2718460
	int32_t GetGameModeID(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetGameModeID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27183d0
	int32_t GetGameModeGroupID(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetGameModeGroupID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2718340
	struct AGameManagerBase* GetGameManager(struct UObject* WorldContextObject, struct AGameManagerBase* ManagerClass); // Function Solarland.SCustomGameModeLibrary.GetGameManager // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2718270
	struct ADefenderManager* GetDefenderManager(struct UObject* WorldContextObject, struct ADefenderManager* ManagerClass); // Function Solarland.SCustomGameModeLibrary.GetDefenderManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27181a0
	bool GetDataVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FVector& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2717ff0
	bool GetDataString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2717e20
	bool GetDataInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, int32_t& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2717c70
	bool GetDataFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, float& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2717ab0
	bool GetDataByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, char& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2717900
	bool GetDataBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, bool& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2717750
	struct ACustomRoomManager* GetCustomRoomManager(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetCustomRoomManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27176c0
	struct FCustomRoomData GetCustomRoomData(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetCustomRoomData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2717570
	float GetCurBattleTime(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetCurBattleTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27174e0
	struct UCGMGameplayConfig* GetCGMGameplayConfig(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetCGMGameplayConfig // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2717450
	void GetAvatarSkillInfoWithID(struct UObject* WorldContextObject, int32_t CharacterId, struct FClassInfo& OutSkillInfo); // Function Solarland.SCustomGameModeLibrary.GetAvatarSkillInfoWithID // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27172b0
	void GetAvatarPortraitWithID(struct UObject* WorldContextObject, int32_t SkinId, struct UTexture2D*& OutAvatar); // Function Solarland.SCustomGameModeLibrary.GetAvatarPortraitWithID // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27171a0
	void GetAvatarIconWithID(struct UObject* WorldContextObject, int32_t InAvatarID, struct UTexture2D*& OutAvatar); // Function Solarland.SCustomGameModeLibrary.GetAvatarIconWithID // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2717090
	void GetAvatarIcon(struct ASolarPlayerState* InPS, struct UTexture2D*& OutAvatar); // Function Solarland.SCustomGameModeLibrary.GetAvatarIcon // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2716fc0
	bool GetAILevelConfigCurrentMatch(struct UObject* WorldContextObject, struct TMap<int32_t, int32_t>& AILevelConfig); // Function Solarland.SCustomGameModeLibrary.GetAILevelConfigCurrentMatch // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2716e00
	int32_t GetAIAccompanyTimelineID(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetAIAccompanyTimelineID // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2716d70
	struct TArray<struct ASCMPlayerState*> FindPlayers(struct UObject* WorldContextObject, struct TArray<char>& TeamIds, struct TArray<struct FString>& TeamNames, struct TArray<enum class ESCMPlayerState>& States); // Function Solarland.SCustomGameModeLibrary.FindPlayers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2716b50
	struct ASCMPlayerState* FindPlayerByPlayerID(struct UObject* WorldContextObject, struct FString PlayerId); // Function Solarland.SCustomGameModeLibrary.FindPlayerByPlayerID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2716a70
	struct ASCMPlayerState* FindOBPlayerByPlayerID(struct UObject* WorldContextObject, struct FString PlayerId); // Function Solarland.SCustomGameModeLibrary.FindOBPlayerByPlayerID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2716990
	struct TArray<struct ASCMPlayerState*> FindBotAI(struct UObject* WorldContextObject, struct TArray<char>& TeamIds, struct TArray<struct FString>& TeamNames, struct TArray<enum class ESCMPlayerState>& States); // Function Solarland.SCustomGameModeLibrary.FindBotAI // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2716770
	void ExecuteGameplayCue(struct UAbilitySystemComponent* AbilitySystemComponen, struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SCustomGameModeLibrary.ExecuteGameplayCue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2716580
	void EnableSpeedUpEffect(struct ASolarCharacter* Player, bool bEnable); // Function Solarland.SCustomGameModeLibrary.EnableSpeedUpEffect // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x27164c0
	void EnablePoisonEffect(struct UObject* WorldContextObject, bool bEnable); // Function Solarland.SCustomGameModeLibrary.EnablePoisonEffect // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2716400
	struct UTexture2D* DrawDebugPointInMapImg(struct UObject* WorldContextObject, struct UTexture2D* Tex, struct FString Path, struct TArray<struct FVector> PointArrA, struct FColor PointAColor, float PointASize, struct TArray<struct FVector> PointArrB, struct FColor PointBColor, float PointBSize); // Function Solarland.SCustomGameModeLibrary.DrawDebugPointInMapImg // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2716060
	int32_t DeleteAIFromBattleForPlayer(struct UObject* WorldContextObject, struct TArray<struct ASCMPlayerState*>& AIPlayers); // Function Solarland.SCustomGameModeLibrary.DeleteAIFromBattleForPlayer // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2715f70
	struct UUserWidget* CreateSolarWidget(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass, enum class EUIRoot UILayer, bool bInShowPersistent); // Function Solarland.SCustomGameModeLibrary.CreateSolarWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2715c30
	struct UWidgetComponent* CreateOverheadHUD(struct ASolarCharacter* SolarCharacter, struct UUserWidget* Widget); // Function Solarland.SCustomGameModeLibrary.CreateOverheadHUD // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2715b60
	struct TArray<struct ASCMPlayerState*> CreateBotAI(struct UObject* WorldContextObject, struct TMap<int32_t, int32_t>& TempleteMap, int32_t SpawnNum, struct FVector& SpawnLocation, struct ASolarBotAIController* ControllerClass, int32_t Difficulty, bool bAllowMix, struct FString TeamName); // Function Solarland.SCustomGameModeLibrary.CreateBotAI // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2715790
	void CreateAirdropByOutcomesAndItemsWithCharacter(struct UObject* WorldContextObject, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, struct TMap<int32_t, int32_t>& OutcomeMap, struct TMap<int32_t, int32_t>& ItemMap, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, struct ASolarCharacter* InCharacter, float InStartHeight); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByOutcomesAndItemsWithCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2715260
	void CreateAirdropByOutcomeIDWithCharacter(struct UObject* WorldContextObject, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, int32_t OutcomeID, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, struct ASolarCharacter* InCharacter, float InStartHeight); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByOutcomeIDWithCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2714f60
	void CreateAirdropByOutcomeIDWithAirship(struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> SolarAirshipClass, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, int32_t OutcomeID, int32_t ChestID, int32_t ChestSpawnID); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByOutcomeIDWithAirship // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2714c60
	void CreateAirdropByOutcomeID(struct UObject* WorldContextObject, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, int32_t OutcomeID, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, float InStartHeight); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByOutcomeID // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27149b0
	void CreateAirdropByItemID(struct UObject* WorldContextObject, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, struct TArray<struct FSolarItemData> ItemDataArr, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, struct ASolarCharacter* InCharacter, float InStartHeight); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByItemID // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2714600
	void CreateAirdropByCharacter(struct UObject* WorldContextObject, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, struct TArray<struct FSolarItemData> ItemDataArr, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, struct ASolarCharacter* InCharacter, float InStartHeight); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2714250
	void CloseSupplement(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.CloseSupplement // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x27141d0
	void CloseSolarWidget(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass); // Function Solarland.SCustomGameModeLibrary.CloseSolarWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2714110
	void ClearPlayerDataChangeEvent(struct ASCMPlayerState* PlayerState, struct FString DataName); // Function Solarland.SCustomGameModeLibrary.ClearPlayerDataChangeEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2714040
	bool ClearMapUISlot(struct UObject* WorldContextObject, struct FName PanelName); // Function Solarland.SCustomGameModeLibrary.ClearMapUISlot // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2713f70
	void ClearDataChangeEvent(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName); // Function Solarland.SCustomGameModeLibrary.ClearDataChangeEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2713e00
	void ClearCharacterAllWeaponAndParts(struct ASolarCharacter* Player); // Function Solarland.SCustomGameModeLibrary.ClearCharacterAllWeaponAndParts // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2713d80
	void ClearCharacterAllItems(struct ASolarCharacter* Player, bool bEmptyWeaponsOnly); // Function Solarland.SCustomGameModeLibrary.ClearCharacterAllItems // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2713cc0
	bool ClearBattleUISlot(struct UObject* WorldContextObject, struct FName PanelName); // Function Solarland.SCustomGameModeLibrary.ClearBattleUISlot // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2713bf0
	bool ClearBackpackUISlot(struct UObject* WorldContextObject, struct FName PanelName); // Function Solarland.SCustomGameModeLibrary.ClearBackpackUISlot // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2713b20
	bool ClearBackpackItem(struct ASolarCharacter* InCharacter, int32_t InItemID); // Function Solarland.SCustomGameModeLibrary.ClearBackpackItem // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2713a50
	bool ChangePlayerCharacter(struct ASCMPlayerState* TargetPlayer, int32_t CharacterId, int32_t SkinId); // Function Solarland.SCustomGameModeLibrary.ChangePlayerCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2713950
	void CancelAbilityByTag(struct USolarAbilitySystemComponent* SolarAbilitySystemComponent, struct FGameplayTag& AbilityTag); // Function Solarland.SCustomGameModeLibrary.CancelAbilityByTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2713880
	bool BindSpecificRankChangeEvent(struct UObject* WorldContextObject, struct FString RankName, int32_t TargetRank, struct FDelegate& SpecificRankChangeEvent); // Function Solarland.SCustomGameModeLibrary.BindSpecificRankChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27136f0
	bool BindRankListChangeEvent(struct UObject* WorldContextObject, struct FString RankName, struct FSCMRankEventHandle& RankListEventHandle); // Function Solarland.SCustomGameModeLibrary.BindRankListChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27135b0
	bool BindPlayerReconnectedGameEvent(struct UObject* WorldContextObject, struct FDelegate& Deletage); // Function Solarland.SCustomGameModeLibrary.BindPlayerReconnectedGameEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27134c0
	bool BindPlayerDataChangeEventVector3(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventVector3 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2713370
	bool BindPlayerDataChangeEventString(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2713220
	bool BindPlayerDataChangeEventInt(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27130d0
	bool BindPlayerDataChangeEventFloat(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2712f80
	bool BindPlayerDataChangeEventByte(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2712e30
	bool BindPlayerDataChangeEventBool(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2712ce0
	bool BindHostRankChangeEvent(struct UObject* WorldContextObject, struct FString RankName, struct FString HostID, enum class ESCMHostType HostType, struct FDelegate& HostRankChangeEvent); // Function Solarland.SCustomGameModeLibrary.BindHostRankChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2712b10
	bool BindDataChangeEventVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventVector3 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2712940
	bool BindDataChangeEventString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2712770
	bool BindDataChangeEventInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27125a0
	bool BindDataChangeEventFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27123d0
	bool BindDataChangeEventByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2712200
	bool BindDataChangeEventBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2712030
	bool BeginSpectateOtherPlayer(struct UObject* WorldContextObject, struct ASolarPlayerState* Player, struct ASolarPlayerState* TargetPlayerState); // Function Solarland.SCustomGameModeLibrary.BeginSpectateOtherPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2711f30
	void BeginCruise(struct TArray<struct ASolarCharacter*> CharacterArr, struct UAirlineCruiseComponent* AirlineCruiseComponent, float& IntoParachuteZoneTime, float& ForceParachuteTime, float& CruiseEndTime); // Function Solarland.SCustomGameModeLibrary.BeginCruise // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2711d20
	void AddGameplayCue(struct UAbilitySystemComponent* AbilitySystemComponen, struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SCustomGameModeLibrary.AddGameplayCue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2711b30
	enum class EItemModifyResult AddBackpackItem(struct ASolarCharacter* InCharacter, int32_t InItemID, int32_t InItemNum, bool InDropItem); // Function Solarland.SCustomGameModeLibrary.AddBackpackItem // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x27119f0
};

// Class Solarland.SCustomizedGameModeManager
// Size: 0x40 (Inherited: 0x28)
struct USCustomizedGameModeManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USolarGameMode_ElementManager* ElementManager; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)
};

// Class Solarland.SCustomizedModeManagerInterface
// Size: 0x28 (Inherited: 0x28)
struct USCustomizedModeManagerInterface : UInterface {
};

// Class Solarland.SCustomMode_ElementInterface
// Size: 0x28 (Inherited: 0x28)
struct USCustomMode_ElementInterface : UInterface {

	void ResetElement(); // Function Solarland.SCustomMode_ElementInterface.ResetElement // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xbde8a0
	void FollowTarget(struct AActor* Target); // Function Solarland.SCustomMode_ElementInterface.FollowTarget // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2724580
};

// Class Solarland.SelfHealingCueNotify_Static
// Size: 0xb0 (Inherited: 0x50)
struct USelfHealingCueNotify_Static : UGameplayCueNotify_Static {
	struct FVector RepairUIOffset; // 0x50(0x0c)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct TSoftObjectPtr<UMaterialInstance> RepairMaterial; // 0x60(0x28)
	struct TSoftObjectPtr<UStaticMesh> RepairMesh; // 0x88(0x28)
};

// Class Solarland.SeparatedPackagesSettings
// Size: 0x68 (Inherited: 0x38)
struct USeparatedPackagesSettings : UDeveloperSettings {
	struct FString PackageSavedSubDirctory; // 0x38(0x10)
	struct FString PackageServerSubURL; // 0x48(0x10)
	struct TArray<struct FSeparatedPackageInfo> SeparatedPackagesInfo; // 0x58(0x10)

	bool FindSeparatedPackageInfoByID(int32_t InPkgID, struct FSeparatedPackageInfo& OutInfo); // Function Solarland.SeparatedPackagesSettings.FindSeparatedPackageInfoByID // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2724470
};

// Class Solarland.SeparatedPkgDownloader
// Size: 0x100 (Inherited: 0x28)
struct USeparatedPkgDownloader : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FMulticastInlineDelegate OnDownloadInfoDetected; // 0x30(0x10)
	struct FMulticastInlineDelegate OnSepPkgDownloading; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSepPkgReady; // 0x50(0x10)
	struct FMulticastInlineDelegate OnSepPkgDownloadFailed; // 0x60(0x10)
	struct FMulticastInlineDelegate OnHashCheckFailedPkgDownloader; // 0x70(0x10)
	enum class EDownloadState DownloadState; // 0x80(0x01)
	char pad_81[0x13]; // 0x81(0x13)
	int32_t PkgID; // 0x94(0x04)
	char pad_98[0x8]; // 0x98(0x08)
	bool bIncludeMain; // 0xa0(0x01)
	bool bIncludeOptional; // 0xa1(0x01)
	char pad_A2[0x6]; // 0xa2(0x06)
	int64_t StartTimestamp; // 0xa8(0x08)
	struct TArray<struct FPakDownloadInfo> PakInfosOnServer; // 0xb0(0x10)
	int32_t TotalDownloadSize; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct TArray<struct FDownloadFileInfo> NeedDownloadPaks; // 0xc8(0x10)
	char pad_D8[0x28]; // 0xd8(0x28)

	void StartMountPaks(); // Function Solarland.SeparatedPkgDownloader.StartMountPaks // (Final|Native|Protected) // @ game+0x2725fe0
	void StartGettingSeparatedPackage(); // Function Solarland.SeparatedPkgDownloader.StartGettingSeparatedPackage // (Final|Native|Public|BlueprintCallable) // @ game+0x2725fc0
	bool ResumeDownloadSeparatedPaks(); // Function Solarland.SeparatedPkgDownloader.ResumeDownloadSeparatedPaks // (Final|Native|Protected) // @ game+0x27259b0
	void ResumeDownloading(); // Function Solarland.SeparatedPkgDownloader.ResumeDownloading // (Final|Native|Public|BlueprintCallable) // @ game+0x27259e0
	void PromptSeparatedPackageDownloadInfo(); // Function Solarland.SeparatedPkgDownloader.PromptSeparatedPackageDownloadInfo // (Final|Native|Protected) // @ game+0x2725800
	bool PauseDownloadSeparatedPaks(); // Function Solarland.SeparatedPkgDownloader.PauseDownloadSeparatedPaks // (Final|Native|Protected) // @ game+0x27257d0
	void OnPaksMountFailed(); // Function Solarland.SeparatedPkgDownloader.OnPaksMountFailed // (Final|Native|Protected) // @ game+0x2725710
	void OnPaksMountCompleted(int32_t InLastMountOrder); // Function Solarland.SeparatedPkgDownloader.OnPaksMountCompleted // (Final|Native|Protected) // @ game+0x2725680
	void OnPaksFailed(enum class EFileDownloadError InErrorType, int32_t InErrorCode, struct TArray<struct FString>& Headers); // Function Solarland.SeparatedPkgDownloader.OnPaksFailed // (Final|Native|Protected|HasOutParms) // @ game+0x2725520
	void OnPackageListFailed(enum class EFileDownloadError InErrorType, int32_t InErrorCode, struct TArray<struct FString>& Headers); // Function Solarland.SeparatedPkgDownloader.OnPackageListFailed // (Final|Native|Protected|HasOutParms) // @ game+0x27253c0
	void OnHashCheckFailed(); // Function Solarland.SeparatedPkgDownloader.OnHashCheckFailed // (Final|Native|Protected) // @ game+0x27253a0
	void OnEacPakCompleted(struct FString LocalFilePath, int64_t CDNServerTimeStamp); // Function Solarland.SeparatedPkgDownloader.OnEacPakCompleted // (Final|Native|Protected) // @ game+0x2725150
	void OnEachPakDownloading(struct FString Filename, int32_t DownloadSize, int32_t TotalSize, int32_t CachedSize); // Function Solarland.SeparatedPkgDownloader.OnEachPakDownloading // (Final|Native|Protected) // @ game+0x2725230
	void OnAllPaksCompleted(struct TArray<struct FString>& LocalFilePaths, int64_t CDNServerTimeStamp); // Function Solarland.SeparatedPkgDownloader.OnAllPaksCompleted // (Final|Native|Protected|HasOutParms) // @ game+0x2725030
	int64_t GetLocalTime(); // Function Solarland.SeparatedPkgDownloader.GetLocalTime // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2724970
	void ClearEvents(); // Function Solarland.SeparatedPkgDownloader.ClearEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x27243a0
	void CheckServerInfo(); // Function Solarland.SeparatedPkgDownloader.CheckServerInfo // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SeparatedPkgListDownloader
// Size: 0x128 (Inherited: 0x28)
struct USeparatedPkgListDownloader : UObject {
	struct FMulticastInlineDelegate OnSepPkgListDownloading; // 0x28(0x10)
	struct FMulticastInlineDelegate OnSepPkgListReady; // 0x38(0x10)
	char pad_48[0xe0]; // 0x48(0xe0)

	void SepPkgListReady(int32_t PkgID); // Function Solarland.SeparatedPkgListDownloader.SepPkgListReady // (Final|Native|Public) // @ game+0x2725b10
	void SepPkgDownloading(int32_t PkgID, int32_t ChunkDownloadedSize, int32_t ChunkTotalSize); // Function Solarland.SeparatedPkgListDownloader.SepPkgDownloading // (Final|Native|Public) // @ game+0x2725a00
};

// Class Solarland.SeparatedPkgManager
// Size: 0xc0 (Inherited: 0x28)
struct USeparatedPkgManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FMulticastInlineDelegate OnSepPkgDataInitFinish; // 0x30(0x10)
	char pad_40[0x30]; // 0x40(0x30)
	struct TMap<int32_t, struct USeparatedPkgDownloader*> ActiveDownloaders; // 0x70(0x50)

	bool RequireSeparatedPackageDownload(int32_t InPkgID, struct USeparatedPkgDownloader*& OutDownloader, bool bIncludeMain, bool bIncludeOptional); // Function Solarland.SeparatedPkgManager.RequireSeparatedPackageDownload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2725820
	void OnPakFileMounted_Implement(struct FString PakFilename, int32_t ChunkID); // Function Solarland.SeparatedPkgManager.OnPakFileMounted_Implement // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool IsSepareatedPkgDownloading(int32_t& PkgID); // Function Solarland.SeparatedPkgManager.IsSepareatedPkgDownloading // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2724d80
	bool IsSeparatedPackageAvailable(int32_t InPkgID); // Function Solarland.SeparatedPkgManager.IsSeparatedPackageAvailable // (Event|Public|BlueprintEvent|Const) // @ game+0xb66830
	void InvokeOnSepPkgDataInitFinish(); // Function Solarland.SeparatedPkgManager.InvokeOnSepPkgDataInitFinish // (Final|Native|Private|BlueprintCallable) // @ game+0x2724c80
	bool IfSeparatedPakDownloaded(int32_t PakID, bool bIsOptional); // Function Solarland.SeparatedPkgManager.IfSeparatedPakDownloaded // (Event|Public|BlueprintEvent|Const) // @ game+0xb66830
	struct FString GetSeparetedPkgSavedDirectory(); // Function Solarland.SeparatedPkgManager.GetSeparetedPkgSavedDirectory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2724b10
	struct USeparatedPkgManager* GetSeparatedPackageManager(struct UObject* WorldContextObject); // Function Solarland.SeparatedPkgManager.GetSeparatedPackageManager // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2724a80
	struct TArray<struct FString> GetContentBasePakNames(); // Function Solarland.SeparatedPkgManager.GetContentBasePakNames // (Final|Native|Private|BlueprintCallable) // @ game+0x27246e0
	struct USeparatedPkgDownloader* GetActiveDownloader(int32_t InPkgID); // Function Solarland.SeparatedPkgManager.GetActiveDownloader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2724610
	void Deinitialize(); // Function Solarland.SeparatedPkgManager.Deinitialize // (Final|Native|Public|BlueprintCallable) // @ game+0x2724450
	void ClearSepPkgDownloader(int32_t InPkgID); // Function Solarland.SeparatedPkgManager.ClearSepPkgDownloader // (Final|Native|Public|BlueprintCallable) // @ game+0x27243c0
	void ClearAllDownloaders(); // Function Solarland.SeparatedPkgManager.ClearAllDownloaders // (Final|Native|Public|BlueprintCallable) // @ game+0x2724360
	void BindOnPakFileMounted(); // Function Solarland.SeparatedPkgManager.BindOnPakFileMounted // (Final|Native|Private|BlueprintCallable) // @ game+0x27241c0
	void AllOptionalPaksDownloaded(bool bAllDownloaded); // Function Solarland.SeparatedPkgManager.AllOptionalPaksDownloaded // (Final|Native|Public) // @ game+0x2724130
	void AddAvailableChunk(int32_t ChunkID); // Function Solarland.SeparatedPkgManager.AddAvailableChunk // (Event|Public|BlueprintEvent) // @ game+0xb66830
};

// Class Solarland.CameraShakePattern
// Size: 0x28 (Inherited: 0x28)
struct UCameraShakePattern : UObject {
};

// Class Solarland.SequenceCameraShakePattern
// Size: 0x58 (Inherited: 0x28)
struct USequenceCameraShakePattern : UCameraShakePattern {
	struct UCameraAnimationSequence* Sequence; // 0x28(0x08)
	float PlayRate; // 0x30(0x04)
	float Scale; // 0x34(0x04)
	float BlendInTime; // 0x38(0x04)
	float BlendOutTime; // 0x3c(0x04)
	float RandomSegmentDuration; // 0x40(0x04)
	bool bRandomSegment; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	struct UCameraAnimationSequencePlayer* Player; // 0x48(0x08)
	struct UCameraAnimationSequenceCameraStandIn* CameraStandIn; // 0x50(0x08)
};

// Class Solarland.SequenceNode
// Size: 0x90 (Inherited: 0x70)
struct USequenceNode : UActionNode {
	struct TArray<struct UActionNode*> Nodes; // 0x70(0x10)
	struct TArray<struct UActionNode*> ExecutingNodes; // 0x80(0x10)

	int32_t TotalCount(); // Function Solarland.SequenceNode.TotalCount // (Final|Native|Public) // @ game+0x272bc00
	struct UActionNode* GetCurrentExecutingNode(); // Function Solarland.SequenceNode.GetCurrentExecutingNode // (Final|Native|Public) // @ game+0x272a4f0
	struct USequenceNode* Append(struct UActionNode* Node); // Function Solarland.SequenceNode.Append // (Final|Native|Public) // @ game+0x272a210
};

// Class Solarland.SettlementFormula
// Size: 0x228 (Inherited: 0x228)
struct ASettlementFormula : AActor {

	struct TArray<struct FString> MakeStringForLuaByAnyStruct(struct UObject* AnyStruct); // Function Solarland.SettlementFormula.MakeStringForLuaByAnyStruct // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x272b540
	int32_t GetZomborg(struct FSettlementParam_Zomborg& InParam); // Function Solarland.SettlementFormula.GetZomborg // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x272ab10
	void GetWeeklyChallenge(struct FString InSolarPlayerID, struct TArray<struct FString>& OutChallengeName, struct TArray<int32_t>& OutChallengeValue); // Function Solarland.SettlementFormula.GetWeeklyChallenge // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetWeaponExp(struct FSettlementParam_WeaponExp& InParam); // Function Solarland.SettlementFormula.GetWeaponExp // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x272aa70
	void GetStrategyGuideConditions(struct ASolarPlayerState* InPS, struct TArray<int32_t>& OutResult); // Function Solarland.SettlementFormula.GetStrategyGuideConditions // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<int32_t> GetShowPageIndexs(struct FSettlementParam_PageParam& InParam); // Function Solarland.SettlementFormula.GetShowPageIndexs // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<struct FString> GetSettlementItems(struct FSettlementParam_CommonExp& InParam); // Function Solarland.SettlementFormula.GetSettlementItems // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<struct FString> GetPersonalResultPlayerExData(struct FString SolarPlayerID, struct FString& PBName); // Function Solarland.SettlementFormula.GetPersonalResultPlayerExData // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x272a740
	float GetKDA(struct FSettlementParam_KDA& InParam); // Function Solarland.SettlementFormula.GetKDA // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<struct FString> GetGroupResultPlayerExData(struct FString SolarPlayerID, struct FString& PBName); // Function Solarland.SettlementFormula.GetGroupResultPlayerExData // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x272a550
	struct TArray<struct FSettlementParam_ExtraRewardInfo> GetExtraRewards(struct FSettlementParam_CommonExp& InParam); // Function Solarland.SettlementFormula.GetExtraRewards // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetCharaterExp(struct FSettlementParam_CommonExp& InParam, struct FSolarGameModeInfo& InGameInfo); // Function Solarland.SettlementFormula.GetCharaterExp // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x272a3d0
	int32_t GetAccountExp(struct FSettlementParam_CommonExp& InParam, struct FSolarGameModeInfo& InGameInfo); // Function Solarland.SettlementFormula.GetAccountExp // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x272a2b0
	float CalculateMVPScore(struct FSolarGameModeInfo& GameInfo, struct FSettlementParam_MVP& Param); // Function Solarland.SettlementFormula.CalculateMVPScore // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SettlementGameMode
// Size: 0x5c8 (Inherited: 0x5a8)
struct ASettlementGameMode : ASolarGameMode {
	char pad_5A8[0x10]; // 0x5a8(0x10)
	struct TArray<struct AGameManagerBase*> GameManagerClasses; // 0x5b8(0x10)

	void PostLevelLoad(); // Function Solarland.SettlementGameMode.PostLevelLoad // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SettlementPageConfig
// Size: 0x80 (Inherited: 0x30)
struct USettlementPageConfig : UDataAsset {
	int32_t PageSkipIndex; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct TSoftClassPtr<UObject>> SettlementPage; // 0x38(0x10)
	struct FString EnterSettleSoundEvent; // 0x48(0x10)
	struct FString ExitSettleSoundEvent; // 0x58(0x10)
	struct TArray<int32_t> PageIndexs; // 0x68(0x10)
	bool IsCustomRoom; // 0x78(0x01)
	bool IsSoloModePlayerDropout; // 0x79(0x01)
	bool IsSoloModeAIEnemy; // 0x7a(0x01)
	char pad_7B[0x5]; // 0x7b(0x05)
};

// Class Solarland.SettlementStageManager
// Size: 0x50 (Inherited: 0x28)
struct USettlementStageManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USolarGameInstanceBase* SolarGameInstance; // 0x30(0x08)
	int32_t CurStageIndex; // 0x38(0x04)
	int32_t SettlementStageConfigID; // 0x3c(0x04)
	struct UDataTable* SettlementConfig; // 0x40(0x08)
	struct ASettlementFormula* Formula; // 0x48(0x08)

	void UpdateModeConfig(int32_t InConfigID); // Function Solarland.SettlementStageManager.UpdateModeConfig // (Final|Native|Public) // @ game+0x272bc30
	void SkipToTarget(); // Function Solarland.SettlementStageManager.SkipToTarget // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void ShowNextStage(); // Function Solarland.SettlementStageManager.ShowNextStage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void ShowDiePage(); // Function Solarland.SettlementStageManager.ShowDiePage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void Init(); // Function Solarland.SettlementStageManager.Init // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct USolarUWSettlementBase* GetSettlementUIClass(); // Function Solarland.SettlementStageManager.GetSettlementUIClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x272aa30
	int32_t GetSettlementStageID(); // Function Solarland.SettlementStageManager.GetSettlementStageID // (Final|Native|Public|Const) // @ game+0x272aa00
	struct FSettlementConfig GetSettlementConfigRow(); // Function Solarland.SettlementStageManager.GetSettlementConfigRow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x272a8a0
	struct ASettlementFormula* GetFormula(); // Function Solarland.SettlementStageManager.GetFormula // (Final|Native|Public) // @ game+0x272a520
	struct FString GetClassRelativePathName(struct UObject* InClass); // Function Solarland.SettlementStageManager.GetClassRelativePathName // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void CloseDiePage(); // Function Solarland.SettlementStageManager.CloseDiePage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.ShieldUpgradeItemShopAnimInst
// Size: 0x270 (Inherited: 0x270)
struct UShieldUpgradeItemShopAnimInst : UAnimInstance {
	enum class EShieldUpgradeItemShopOpenState OpenState; // 0x268(0x01)
};

// Class Solarland.SNonCombatGameMode
// Size: 0x5a8 (Inherited: 0x5a8)
struct ASNonCombatGameMode : ASolarGameMode {
};

// Class Solarland.SHomeGameMode
// Size: 0x5b0 (Inherited: 0x5a8)
struct ASHomeGameMode : ASNonCombatGameMode {
	char pad_5A8[0x8]; // 0x5a8(0x08)

	struct APawn* SpawnHomePawnAtTransformAndPossess(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Solarland.SHomeGameMode.SpawnHomePawnAtTransformAndPossess // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x272bae0
	void OnSelfPawnSpawned(); // Function Solarland.SHomeGameMode.OnSelfPawnSpawned // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnReceiveRoomData(); // Function Solarland.SHomeGameMode.OnReceiveRoomData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void InitFavoriteWeapons(); // Function Solarland.SHomeGameMode.InitFavoriteWeapons // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SNonCombatGameState
// Size: 0x4c0 (Inherited: 0x4c0)
struct ASNonCombatGameState : ASolarGameState {
};

// Class Solarland.SHomeGameState
// Size: 0x4c0 (Inherited: 0x4c0)
struct ASHomeGameState : ASNonCombatGameState {
};

// Class Solarland.ShootingTargetSettings
// Size: 0x60 (Inherited: 0x38)
struct UShootingTargetSettings : UDeveloperSettings {
	float ShootingTargetCleanupTime; // 0x38(0x04)
	int32_t RingSegments; // 0x3c(0x04)
	float RingSize; // 0x40(0x04)
	float HitPointSize; // 0x44(0x04)
	bool bIgnoreDPIScale; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float HUDRingRadius; // 0x4c(0x04)
	struct FVector2D HUDRingOffset; // 0x50(0x08)
	struct FVector2D HUDTextOffsetOnRing; // 0x58(0x08)
};

// Class Solarland.ShootingTargetComponent
// Size: 0x380 (Inherited: 0x320)
struct UShootingTargetComponent : USceneComponent {
	struct TArray<struct FShootingTargetRing> Rings; // 0x318(0x10)
	bool bAutoShowDebug; // 0x328(0x01)
	bool bAutoCleanup; // 0x329(0x01)
	char pad_332[0x4e]; // 0x332(0x4e)

	void K2_OnScoreUpdated(float TotalScore, struct TArray<float>& RingScores); // Function Solarland.ShootingTargetComponent.K2_OnScoreUpdated // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnCleanup(); // Function Solarland.ShootingTargetComponent.K2_OnCleanup // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SimpleEffectController
// Size: 0x40 (Inherited: 0x28)
struct USimpleEffectController : UActorEffectController {
	float SmoothSpeed; // 0x28(0x04)
	float TargetValue; // 0x2c(0x04)
	bool bFinishOnReached; // 0x30(0x01)
	bool bSmoothToValueOnStop; // 0x31(0x01)
	char pad_32[0x2]; // 0x32(0x02)
	float TargetValueOnStop; // 0x34(0x04)
	char pad_38[0x8]; // 0x38(0x08)
};

// Class Solarland.SingleWeaponConfig
// Size: 0x720 (Inherited: 0x30)
struct USingleWeaponConfig : UDataAsset {
	struct FWeaponDebugFlag DebugFlag; // 0x30(0x04)
	enum class ESolarWeaponBrand WeaponBrand; // 0x34(0x01)
	enum class EWeaponType WeaponType; // 0x35(0x01)
	bool bSupportSecondaryFire; // 0x36(0x01)
	char pad_37[0x1]; // 0x37(0x01)
	struct TMap<struct FString, float> CharacterStateWeightMap; // 0x38(0x50)
	struct TArray<struct FMoveSpeedReduceCurveConfig> MoveSpeedReduceCurveConfigs; // 0x88(0x10)
	float MoveSpeedReduceBonusInHipFire; // 0x98(0x04)
	float MoveSpeedReduceBonusInAdsHipFire; // 0x9c(0x04)
	struct TArray<struct FSolarWeaponFireSocketData> FireSockets; // 0xa0(0x10)
	bool bIsSingleWeapon; // 0xb0(0x01)
	bool bCanSuspendBolt; // 0xb1(0x01)
	bool bIsHeavyFireWeapon; // 0xb2(0x01)
	bool bIsFlamethrowerWeapon; // 0xb3(0x01)
	bool bSupportSingleShootMode; // 0xb4(0x01)
	bool bSupportAutoShootMode; // 0xb5(0x01)
	bool bSupportBurstShootMode; // 0xb6(0x01)
	char pad_B7[0x1]; // 0xb7(0x01)
	float MaxSpread; // 0xb8(0x04)
	float MinSpread; // 0xbc(0x04)
	float HipFireBaseSpread; // 0xc0(0x04)
	float ShoulderFireBaseSpread; // 0xc4(0x04)
	float ADSBaseSpread; // 0xc8(0x04)
	float VhADSBaseSpread; // 0xcc(0x04)
	bool bCalcSpreadByStandardDistance; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	float SpreadStandardDistance; // 0xd4(0x04)
	float SpreadStandardOriginMaxRange; // 0xd8(0x04)
	bool bCalcSpreadByDistributionCurve; // 0xdc(0x01)
	char pad_DD[0x3]; // 0xdd(0x03)
	struct FRuntimeFloatCurve SpreadDistributionCurve; // 0xe0(0x88)
	struct TMap<struct FString, float> SpreadCOPMap; // 0x168(0x50)
	float SpreadStatuSpeed; // 0x1b8(0x04)
	char pad_1BC[0x4]; // 0x1bc(0x04)
	struct TMap<struct FString, float> SpreadStatuIncreaseCoefficient; // 0x1c0(0x50)
	struct TMap<struct FString, float> SpreadStatuReduceCoefficient; // 0x210(0x50)
	struct TArray<struct FVector2D> CustomSpreadArray; // 0x260(0x10)
	struct USolarWeaponAT_CtrlFireBase* CtrlFireTaskClass; // 0x270(0x08)
	struct USolarWeaponAT_FireBase* FireTaskClass; // 0x278(0x08)
	struct UAmmoConfig* PrimaryAmmo; // 0x280(0x08)
	int32_t PrimaryAmmoIndex; // 0x288(0x04)
	int32_t PrimaryAmmoCap; // 0x28c(0x04)
	struct UAmmoConfig* SecondaryAmmo; // 0x290(0x08)
	int32_t SecondaryAmmoIndex; // 0x298(0x04)
	int32_t SecondaryAmmoCap; // 0x29c(0x04)
	struct UAmmoConfig* UpgradedSecAmmo; // 0x2a0(0x08)
	struct FLinearColor UpgradedSecAmmoColor; // 0x2a8(0x10)
	bool bNeedOverload; // 0x2b8(0x01)
	char pad_2B9[0x3]; // 0x2b9(0x03)
	float OverloadMaxValue; // 0x2bc(0x04)
	float NormalOverloadCoolingRate; // 0x2c0(0x04)
	char pad_2C4[0x4]; // 0x2c4(0x04)
	struct UCurveFloat* NormalOverloadCoolingCurve; // 0x2c8(0x08)
	float OverloadCoolingPeriod; // 0x2d0(0x04)
	char pad_2D4[0x4]; // 0x2d4(0x04)
	struct UCurveFloat* OverloadReduceRateCurve; // 0x2d8(0x08)
	float OverloadWarningRate; // 0x2e0(0x04)
	bool bCanAutoFire; // 0x2e4(0x01)
	char pad_2E5[0x3]; // 0x2e5(0x03)
	float AutoFireDelayMs; // 0x2e8(0x04)
	float AutoFireEndDelayMs; // 0x2ec(0x04)
	float AutoFireCompensationRate; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
	struct UGameplayEffect* AutoFireEffectClass; // 0x2f8(0x08)
	bool bCanAimAssist; // 0x300(0x01)
	char pad_301[0x7]; // 0x301(0x07)
	struct FWeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAll; // 0x308(0x60)
	struct FWeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAllGamepad; // 0x368(0x60)
	struct FSolarWeaponFPPData DefaultFPPData; // 0x3c8(0x68)
	struct TArray<struct FSolarWeaponFPPConfig> FPPConfigByAspectRatioArray; // 0x430(0x10)
	bool bOneKeyScope; // 0x440(0x01)
	char pad_441[0x3]; // 0x441(0x03)
	float ScopeOpenTime; // 0x444(0x04)
	float ScopeOpenFOVTimeScale; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct TArray<enum class EWeaponPartType> SupportChangeTypeArray; // 0x450(0x10)
	struct TArray<int32_t> DefaultPartsArray; // 0x460(0x10)
	bool bIsGatling; // 0x470(0x01)
	char pad_471[0x3]; // 0x471(0x03)
	float GatlingRotaryAcceleration; // 0x474(0x04)
	float GatlingFireRotarySpeed; // 0x478(0x04)
	float GatlingMaxRotarySpeed; // 0x47c(0x04)
	float GatlingHoldTime; // 0x480(0x04)
	float GatlingRotaryAttenuation; // 0x484(0x04)
	float GatlingScatteringMagnification; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)
	struct UParticleSystem* GatlingOverHeatSmokeEffect; // 0x490(0x08)
	struct TArray<struct UGameplayAbility*> GasAbilities; // 0x498(0x10)
	float HeadshotDamageFactor; // 0x4a8(0x04)
	bool bShowCoolDownWidget; // 0x4ac(0x01)
	char pad_4AD[0x3]; // 0x4ad(0x03)
	struct FSolarWeaponCrosshairData CrosshairWidgetData; // 0x4b0(0x38)
	struct FSoftObjectPath WeaponIcon; // 0x4e8(0x18)
	struct FSlateBrush PrimaryFireBrush; // 0x500(0xe0)
	int32_t PrimaryFireTxt; // 0x5e0(0x04)
	char pad_5E4[0xc]; // 0x5e4(0x0c)
	struct FSlateBrush SecondaryFireBrush; // 0x5f0(0xe0)
	int32_t SecondaryFireTxt; // 0x6d0(0x04)
	char pad_6D4[0x4]; // 0x6d4(0x04)
	struct FString WeaponTextType; // 0x6d8(0x10)
	struct FSoftObjectPath ItemIcon; // 0x6e8(0x18)
	struct FSoftObjectPath UpgradeParticleSystem; // 0x700(0x18)
	char pad_718[0x8]; // 0x718(0x08)

	void InitSupportChangeTypeArray(struct TArray<int32_t> Data); // Function Solarland.SingleWeaponConfig.InitSupportChangeTypeArray // (Final|Native|Public) // @ game+0x272b450
	void InitStatuSpreadCoefficient(struct TArray<struct FString>& Increasekeys, struct TArray<float>& Increasevalues, struct TArray<struct FString>& Reducekeys, struct TArray<float>& Reducevalues); // Function Solarland.SingleWeaponConfig.InitStatuSpreadCoefficient // (Final|Native|Public|HasOutParms) // @ game+0x272b220
	void InitSpreadData(float Max, float Min, float hipbase, float adsbase, float vhadsbase, float statuspeed); // Function Solarland.SingleWeaponConfig.InitSpreadData // (Final|Native|Public) // @ game+0x272b020
	void InitSpreadCOPMap(struct TArray<struct FString>& Keys, struct TArray<float>& Values); // Function Solarland.SingleWeaponConfig.InitSpreadCOPMap // (Final|Native|Public|HasOutParms) // @ game+0x272aee0
	void InitScopeData(bool onekey, float scopetime); // Function Solarland.SingleWeaponConfig.InitScopeData // (Final|Native|Public) // @ game+0x272ae10
	void InitOverload(bool InAllow, float InMax, float InNormalCoolingRate, float InCoolingPeriod, float InOverloadWarningRate); // Function Solarland.SingleWeaponConfig.InitOverload // (Final|Native|Public) // @ game+0x272ac60
	void InitBase(int32_t WPType); // Function Solarland.SingleWeaponConfig.InitBase // (Final|Native|Public) // @ game+0x272abd0
	bool GetIsSupportPart(enum class EWeaponPartType Type); // Function Solarland.SingleWeaponConfig.GetIsSupportPart // (Final|Native|Public) // @ game+0x272a6b0
};

// Class Solarland.SkeletalMeshComponentConfig
// Size: 0x60 (Inherited: 0x30)
struct USkeletalMeshComponentConfig : UDataAsset {
	struct FSoftObjectPath AnimClass; // 0x30(0x18)
	struct FSoftObjectPath SkeletalMesh; // 0x48(0x18)
};

// Class Solarland.SkillBPAndExtraConfig
// Size: 0x98 (Inherited: 0x30)
struct USkillBPAndExtraConfig : UDataAsset {
	struct FSoftObjectPath SkillBlueprint; // 0x30(0x18)
	int32_t SkillLevel; // 0x48(0x04)
	int32_t SkillItemQuality; // 0x4c(0x04)
	int32_t InnerSkillDescription; // 0x50(0x04)
	int32_t ShortSkillDescription; // 0x54(0x04)
	int32_t SkillCD; // 0x58(0x04)
	int32_t BuffUIPriority; // 0x5c(0x04)
	float DynamicBuffRemainTime; // 0x60(0x04)
	float TriggerAgainTimeDuration; // 0x64(0x04)
	struct FSoftObjectPath SkillIcon; // 0x68(0x18)
	struct FSoftObjectPath GrowIcon; // 0x80(0x18)
};

// Class Solarland.SkillConfig
// Size: 0xd0 (Inherited: 0x30)
struct USkillConfig : UDataAsset {
	int32_t SkillName; // 0x30(0x04)
	int32_t SkillType; // 0x34(0x04)
	int32_t SkillDescription; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FSoftObjectPath SkillIcon; // 0x40(0x18)
	struct FString KillIcon; // 0x58(0x10)
	float SkillVoiceDelay; // 0x68(0x04)
	char CanCancelPhaseFlag; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)
	float CanCancelContinuousBegin; // 0x70(0x04)
	float CanCancelContinuousEnd; // 0x74(0x04)
	char VoiceTriggerTiming; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct TMap<int32_t, struct USkillBPAndExtraConfig*> SkillExtraConfigByPlayerLevel; // 0x80(0x50)
};

// Class Solarland.SkillScanWidget
// Size: 0x420 (Inherited: 0x400)
struct USkillScanWidget : USolarUserWidget {
	struct FName ForwardAction; // 0x400(0x08)
	struct FName RightAction; // 0x408(0x08)
	struct FName SpawnAction; // 0x410(0x08)
	char pad_418[0x8]; // 0x418(0x08)

	void OnSpawnRadar(); // Function Solarland.SkillScanWidget.OnSpawnRadar // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnInputDeviceChanged(enum class ECommonInputType InInputType); // Function Solarland.SkillScanWidget.OnInputDeviceChanged // (Final|Native|Public) // @ game+0x272e8e0
	void OnCameraRight(float Value); // Function Solarland.SkillScanWidget.OnCameraRight // (Final|Native|Public) // @ game+0x272e860
	void OnCameraForward(float Value); // Function Solarland.SkillScanWidget.OnCameraForward // (Final|Native|Public) // @ game+0x272e7e0
};

// Class Solarland.SkydiveConfig
// Size: 0x1f0 (Inherited: 0x30)
struct USkydiveConfig : UDataAsset {
	float DefaultFallingSpeed; // 0x30(0x04)
	float MinFallingSpeed; // 0x34(0x04)
	float FallingBrakingDeceleration; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRuntimeFloatCurve FlyingForwardPitchMappingCurve; // 0x40(0x88)
	struct FRuntimeFloatCurve MaxFlyingForwardSpeedCurve; // 0xc8(0x88)
	float MaxFlyingSidewardSpeed; // 0x150(0x04)
	float MaxFlyingAcceleration; // 0x154(0x04)
	float MinFlyingBrakingDeceleration; // 0x158(0x04)
	float MaxFlyingBrakingDeceleration; // 0x15c(0x04)
	float FlyingRotationSmoothSpeedYaw; // 0x160(0x04)
	float FlyingRotationSmoothSpeedPitch; // 0x164(0x04)
	float FlyingRotationSmoothSpeedYawOnFollowing; // 0x168(0x04)
	float FlyingRotationSmoothSpeedPitchOnFollowing; // 0x16c(0x04)
	float LandingHeight; // 0x170(0x04)
	float LandingFallingSpeed; // 0x174(0x04)
	float LandingFallingBrakingDeceleration; // 0x178(0x04)
	float LandingMaxFlyingSpeed; // 0x17c(0x04)
	float LandingFlyingAcceleration; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct TArray<struct FName> LandingIgnoredActorTags; // 0x188(0x10)
	struct TArray<struct FVector> FollowFormation; // 0x198(0x10)
	float SmoothTimeToCatchUpWithLeaderOnBeginning; // 0x1a8(0x04)
	char pad_1AC[0x4]; // 0x1ac(0x04)
	struct TArray<struct FSkydivingEffectPreset> SkydivingEffectClassList; // 0x1b0(0x10)
	float LowerLimitOfSpeedForSkydivingSoundEffect; // 0x1c0(0x04)
	float MinPitchToPlaySkydivingLandingEffect; // 0x1c4(0x04)
	struct FName StartSkydiveLoopSoundGroup_Speed; // 0x1c8(0x08)
	struct FName StopSkydiveLoopSoundGroup_Speed; // 0x1d0(0x08)
	struct FName StopSkydiveLoopSoundGroup_Height; // 0x1d8(0x08)
	struct FCharacterMovementNetworkOptions NetworkOptions; // 0x1e0(0x0c)
	char pad_1EC[0x4]; // 0x1ec(0x04)
};

// Class Solarland.SkydivingFollowWidget
// Size: 0x420 (Inherited: 0x400)
struct USkydivingFollowWidget : USolarUserWidget {
	char pad_400[0x20]; // 0x400(0x20)

	void UpdateRouletteOpenState(bool bIsOpen); // Function Solarland.SkydivingFollowWidget.UpdateRouletteOpenState // (Final|Native|Protected|BlueprintCallable) // @ game+0x272f590
	void UpdateRouletteForbidStateForPosInTeam(int32_t PosInTeam, bool bForbid); // Function Solarland.SkydivingFollowWidget.UpdateRouletteForbidStateForPosInTeam // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void ToggleRoulette(); // Function Solarland.SkydivingFollowWidget.ToggleRoulette // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SwitchToUnfollow(); // Function Solarland.SkydivingFollowWidget.SwitchToUnfollow // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SwitchToTransfer(float CooldownStartTime, float CooldownEndTime); // Function Solarland.SkydivingFollowWidget.SwitchToTransfer // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SwitchToFollow(); // Function Solarland.SkydivingFollowWidget.SwitchToFollow // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetRouletteVisibility(bool bVisible); // Function Solarland.SkydivingFollowWidget.SetRouletteVisibility // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetRelationButtonGroupVisibility(bool bVisible); // Function Solarland.SkydivingFollowWidget.SetRelationButtonGroupVisibility // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetParachuteButtonVisibility(bool bVisible); // Function Solarland.SkydivingFollowWidget.SetParachuteButtonVisibility // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetCruisePlayerNumVisibility(bool bVisible); // Function Solarland.SkydivingFollowWidget.SetCruisePlayerNumVisibility // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnSkydivingRouletteSelect(int32_t PosInTeam); // Function Solarland.SkydivingFollowWidget.OnSkydivingRouletteSelect // (Final|Native|Protected|BlueprintCallable) // @ game+0x272e9a0
	void OnCruiseCharacterCountUpdated(int32_t TotalCount, int32_t CruiseCount); // Function Solarland.SkydivingFollowWidget.OnCruiseCharacterCountUpdated // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void NotifyCannotFollowTeammateAt(int32_t PosInTeam, bool bSelfHasFollower); // Function Solarland.SkydivingFollowWidget.NotifyCannotFollowTeammateAt // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void InitRouletteMemberPosition(struct TArray<int32_t>& PositionArray); // Function Solarland.SkydivingFollowWidget.InitRouletteMemberPosition // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void ExpandRoulette(); // Function Solarland.SkydivingFollowWidget.ExpandRoulette // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void CollapseRoulette(); // Function Solarland.SkydivingFollowWidget.CollapseRoulette // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SkywardDiveConfig
// Size: 0x220 (Inherited: 0x30)
struct USkywardDiveConfig : UDataAsset {
	struct FGameplayTag SkywardDivePrepareCueTag; // 0x30(0x08)
	struct FGameplayTag SkywardDiveLaunchCueTag; // 0x38(0x08)
	float PrepareTimeConfig; // 0x40(0x04)
	float MaxSkywardHeightConfig; // 0x44(0x04)
	float EndingAnimTime; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct FRuntimeFloatCurve LaunchSpeedCurveConfig; // 0x50(0x88)
	struct UGameplayEffect* SkywardDiveEffectClass; // 0xd8(0x08)
	struct FName CancelActionName; // 0xe0(0x08)
	struct UAnimMontage* CharacterPrepareMontage; // 0xe8(0x08)
	struct UParticleSystem* PrepareBeamParticle; // 0xf0(0x08)
	struct UParticleSystem* PreparePackageParticle; // 0xf8(0x08)
	struct TArray<struct FName> PreparePackageSocketNames; // 0x100(0x10)
	struct FName StartPrepareLaunchSoundGroupName; // 0x110(0x08)
	struct FName StopPrepareLaunchSoundGroupName; // 0x118(0x08)
	struct UCameraShake* CameraShakePrepare; // 0x120(0x08)
	struct UAnimMontage* CharacterSkywardMontage; // 0x128(0x08)
	struct UAnimMontage* CharacterEndingMontage; // 0x130(0x08)
	struct FSoftObjectPath LaunchDeviceRealLaunchParticle; // 0x138(0x18)
	struct FSoftObjectPath SkywardLaunchParticle; // 0x150(0x18)
	struct TArray<struct FName> LaunchParticlePackageSocketNames; // 0x168(0x10)
	struct FName StartRealLaunchLoopSoundGroupName; // 0x178(0x08)
	struct FName StopRealLaunchLoopSoundGroupName; // 0x180(0x08)
	struct UCameraShake* CameraShakeLaunch; // 0x188(0x08)
	float LaunchShakeEndMaxHeightOffset; // 0x190(0x04)
	float LaunchShakeEndDistance; // 0x194(0x04)
	struct FRuntimeFloatCurve LaunchShakeEndScaleCurve; // 0x198(0x88)
};

// Class Solarland.SummonItemBase
// Size: 0x4b0 (Inherited: 0x288)
struct ASummonItemBase : APawn {
	char pad_288[0x30]; // 0x288(0x30)
	struct FMulticastSparseDelegate OnDeath; // 0x2b8(0x01)
	char pad_2B9[0x7]; // 0x2b9(0x07)
	struct UAkComponent* AkAudioComponent; // 0x2c0(0x08)
	struct UStaticMeshComponent* HPBar; // 0x2c8(0x08)
	struct FSpawnedActorHandle CachedActorHandle; // 0x2d0(0x04)
	struct TWeakObjectPtr<struct ASolarCharacter> SourceSummoner; // 0x2d4(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerState> SourceSummonerPS; // 0x2dc(0x08)
	enum class ESolarSummonDeathReason DeathReason; // 0x2e4(0x01)
	char pad_2E5[0x3]; // 0x2e5(0x03)
	float CurrentHealth; // 0x2e8(0x04)
	bool bDead; // 0x2ec(0x01)
	char pad_2ED[0x3]; // 0x2ed(0x03)
	struct FHitSoundReplicationData HitSoundData; // 0x2f0(0x80)
	char pad_370[0x4]; // 0x370(0x04)
	float FunctionalTimerMax; // 0x374(0x04)
	float FunctionalTimerDelta; // 0x378(0x04)
	char pad_37C[0x18]; // 0x37c(0x18)
	struct FVector CenterOffset; // 0x394(0x0c)
	struct FGameplayEffectSpecHandle GEToSelfHandle; // 0x3a0(0x10)
	struct FGameplayEffectSpecHandle GEToTargetHandle; // 0x3b0(0x10)
	enum class ESummonItemType SummonItemType; // 0x3c0(0x01)
	char pad_3C1[0x3]; // 0x3c1(0x03)
	float MaxHealth; // 0x3c4(0x04)
	float ReducedHealth; // 0x3c8(0x04)
	float DelayDestroyTime; // 0x3cc(0x04)
	bool bTeammateDamage; // 0x3d0(0x01)
	bool bSuicideWithSummonerChange; // 0x3d1(0x01)
	char pad_3D2[0x2]; // 0x3d2(0x02)
	float TimeDuration; // 0x3d4(0x04)
	bool bOnlyOne; // 0x3d8(0x01)
	bool bEnableHPBar; // 0x3d9(0x01)
	bool bHPDefaultVisible; // 0x3da(0x01)
	char pad_3DB[0x1]; // 0x3db(0x01)
	struct FName HPBarTagName; // 0x3dc(0x08)
	struct FName HPBarPercentName; // 0x3e4(0x08)
	struct FName HPBarColorName; // 0x3ec(0x08)
	struct FLinearColor HPBarColorTeammate; // 0x3f4(0x10)
	struct FLinearColor HPBarColorEnemy; // 0x404(0x10)
	int32_t HPBarMaterialIndex; // 0x414(0x04)
	struct FVector CenterLocationOffset; // 0x418(0x0c)
	float DestroyDeathWithinSeconds; // 0x424(0x04)
	bool bSupportAssistAim; // 0x428(0x01)
	char pad_429[0x7]; // 0x429(0x07)
	struct FWeaponAssistAimTargetConfig AssistAimTargetConfig; // 0x430(0x48)
	bool bCanAffectedByEMP; // 0x478(0x01)
	bool bShowDamageText; // 0x479(0x01)
	char pad_47A[0x6]; // 0x47a(0x06)
	struct USolarSpawnAdjustConfig* SpawnAdjustConfig; // 0x480(0x08)
	bool bAddCoreToActorCollisionIgnoreSystem; // 0x488(0x01)
	bool bDestroyWhenHitVehicle; // 0x489(0x01)
	bool bEnableHitSound; // 0x48a(0x01)
	char pad_48B[0x1]; // 0x48b(0x01)
	struct FName HitSoundSubTableKey; // 0x48c(0x08)
	struct FName HitSoundSubTableKey2; // 0x494(0x08)
	struct FSolarLandscapeListenerConfig LandscapeListenerConfig; // 0x49c(0x10)
	bool bDebug; // 0x4ac(0x01)
	char pad_4AD[0x3]; // 0x4ad(0x03)

	void SwitchFunctionalTimer(bool InbEnable, float InMaxTime); // Function Solarland.SummonItemBase.SwitchFunctionalTimer // (Final|Native|Protected|BlueprintCallable) // @ game+0x29b1260
	void Suicide(); // Function Solarland.SummonItemBase.Suicide // (Final|Native|Public|BlueprintCallable) // @ game+0x29b1240
	bool RequestPlaySoundByTeam(struct TMap<enum class ESolarSummonSoundType, struct FSolarSummonSoundData>& InSoundData); // Function Solarland.SummonItemBase.RequestPlaySoundByTeam // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x29b1010
	bool RequestPlaySound(struct TArray<struct FString>& InSoundData); // Function Solarland.SummonItemBase.RequestPlaySound // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x29b0f30
	void ReceiveUpdateHealthEvent(float InCurrentHealthRate); // Function Solarland.SummonItemBase.ReceiveUpdateHealthEvent // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveUpdateFunctionalTimerEvent(float InTimerRate); // Function Solarland.SummonItemBase.ReceiveUpdateFunctionalTimerEvent // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveDeathEvent(enum class ESolarSummonDeathReason InDeathReason); // Function Solarland.SummonItemBase.ReceiveDeathEvent // (Native|Event|Protected|BlueprintEvent) // @ game+0x29b0c00
	void OnSourceCharacterChange(); // Function Solarland.SummonItemBase.OnSourceCharacterChange // (Native|Protected) // @ game+0x1ae4d10
	void OnRep_HitSoundData(struct FHitSoundReplicationData& LastData); // Function Solarland.SummonItemBase.OnRep_HitSoundData // (Final|Native|Protected|HasOutParms) // @ game+0x29b0770
	void OnRep_Dead(); // Function Solarland.SummonItemBase.OnRep_Dead // (Final|Native|Protected) // @ game+0x29b0750
	void OnRep_CurrentHealth(); // Function Solarland.SummonItemBase.OnRep_CurrentHealth // (Final|Native|Protected) // @ game+0x29b0730
	void OnLocalPlayerSpectateTargetChanged(struct ASolarPlayerState* InOldTarget, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SummonItemBase.OnLocalPlayerSpectateTargetChanged // (Final|Native|Protected) // @ game+0x29b0620
	void K2_PlaySoundGroup(struct FName InSoundGroupName, struct FSoundGroupPlayContextByCharacter InContext); // Function Solarland.SummonItemBase.K2_PlaySoundGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x29b0500
	bool IsDead(); // Function Solarland.SummonItemBase.IsDead // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29b04a0
	struct TWeakObjectPtr<struct ASolarCharacter> GetSourceSummoner(); // Function Solarland.SummonItemBase.GetSourceSummoner // (Final|Native|Public|Const) // @ game+0x29b0450
	float GetMaxHealth(); // Function Solarland.SummonItemBase.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29b0420
	float GetCurrentHealth(); // Function Solarland.SummonItemBase.GetCurrentHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29b03f0
	struct UObject* GetClassType(); // Function Solarland.SummonItemBase.GetClassType // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x29b03c0
	void BindLocalPlayerSpectateDelegates(struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SummonItemBase.BindLocalPlayerSpectateDelegates // (Final|Native|Public) // @ game+0x29b0140
};

// Class Solarland.SkywardDiveLauncher
// Size: 0x568 (Inherited: 0x4b0)
struct ASkywardDiveLauncher : ASummonItemBase {
	struct USkeletalMeshComponent* GroundMesh; // 0x4b0(0x08)
	struct UBoxComponent* TriggerVolume; // 0x4b8(0x08)
	float SpawnTimeConfig; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)
	struct UParticleSystem* AvailableDeviceParticle; // 0x4c8(0x08)
	struct UParticleSystem* SpawnBeamParticle; // 0x4d0(0x08)
	struct FString SpawnSoundName; // 0x4d8(0x10)
	struct UAnimSequence* SpawnAnim; // 0x4e8(0x08)
	struct TArray<struct FLaunchDeviceInfo> LauncherDeviceArray; // 0x4f0(0x10)
	float CharacterLaunchPadHeightOffset; // 0x500(0x04)
	float LowHealthPercentage; // 0x504(0x04)
	struct UParticleSystem* LowHealthParticle; // 0x508(0x08)
	struct UParticleSystem* DeathExplodeParticle; // 0x510(0x08)
	struct FString DeathExplodeSoundName; // 0x518(0x10)
	struct UParticleSystemComponent* SpawnBeamEffect; // 0x528(0x08)
	struct UParticleSystemComponent* LowHealthEffect; // 0x530(0x08)
	bool bNewlySpawned; // 0x538(0x01)
	char pad_539[0x2f]; // 0x539(0x2f)

	void OnTriggerVolumeOverlapedEnd(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SkywardDiveLauncher.OnTriggerVolumeOverlapedEnd // (Final|Native|Protected) // @ game+0x272ec50
	void OnTriggerVolumeOverlapedBegin(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SkywardDiveLauncher.OnTriggerVolumeOverlapedBegin // (Final|Native|Protected|HasOutParms) // @ game+0x272ea30
};

// Class Solarland.SolarAbility
// Size: 0x310 (Inherited: 0x228)
struct ASolarAbility : AActor {
	struct ASolarAbility* MyAbilityClass; // 0x228(0x08)
	struct TArray<struct USolarAbilityEffect*> AbilityEffectClasses; // 0x230(0x10)
	struct TWeakObjectPtr<struct ASolarCharacter> AbilitySourceCharacter; // 0x240(0x08)
	char pad_248[0x8]; // 0x248(0x08)
	struct FTransform SpawnTransform; // 0x250(0x30)
	bool InstancedAbility; // 0x280(0x01)
	bool DoNotAutoApply; // 0x281(0x01)
	bool ApplyToSource; // 0x282(0x01)
	bool RadialAbility; // 0x283(0x01)
	float RadialAbilityRadius; // 0x284(0x04)
	bool bRadialIgnoreCollision; // 0x288(0x01)
	bool bRadialIgnoreVehicle; // 0x289(0x01)
	bool CheckSourceToTargetCollision; // 0x28a(0x01)
	bool EnableAbilityDebug; // 0x28b(0x01)
	bool bActivated; // 0x28c(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	struct FString ExtraInfo; // 0x290(0x10)
	struct AActor* InitiatorActor; // 0x2a0(0x08)
	struct UAkComponent* AkAudioComponent; // 0x2a8(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x2b0(0x08)
	struct TMap<struct FString, float> EffectParams; // 0x2b8(0x50)
	char pad_308[0x8]; // 0x308(0x08)

	void WeaponApplyAbility(struct UObject* WorldContextObject, struct ASolarAbility* SolarAbilityClass, struct AActor* SourceActor, struct AActor* TargetActor, struct FVector& HitLocation, struct FName& HitBoneName, float Scale, struct FRotator& ProjRotator, struct FString InExtarInfo, struct UPrimitiveComponent* HitComponent); // Function Solarland.SolarAbility.WeaponApplyAbility // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x272f620
	void StopSound(); // Function Solarland.SolarAbility.StopSound // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void StaticRemoveSolarAbilityFrom(struct ASolarAbility* AbilityClass, struct AActor* AffectingActor); // Function Solarland.SolarAbility.StaticRemoveSolarAbilityFrom // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x272f4d0
	void StaticApplySolarAbilityToWithHitResult(struct ASolarAbility* AbilityClass, struct AActor* AffectingActor, struct FHitResult& HitResult, float Scale, struct FString InExtarInfo, struct AActor* SourceAcotr, struct AActor* Initiator, bool ValidSourceLocation, struct FVector& SourceLocation); // Function Solarland.SolarAbility.StaticApplySolarAbilityToWithHitResult // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x272f1b0
	void StaticApplySolarAbilityTo(struct ASolarAbility* AbilityClass, struct AActor* AffectingActor, struct AActor* SourceAcotr, struct AActor* Initiator, bool ValidSourceLocation, struct FVector& SourceLocation, struct FVector& HitLocation, struct FName& HitBoneName, float Scale, struct FString InExtraInfo, struct UPrimitiveComponent* HitComponent); // Function Solarland.SolarAbility.StaticApplySolarAbilityTo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x272ee40
	void ServerSetActivated(); // Function Solarland.SolarAbility.ServerSetActivated // (Net|Native|Event|Public|NetServer) // @ game+0x8266a0
	void RestoreSound(); // Function Solarland.SolarAbility.RestoreSound // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RemoveSolarAbilityFrom(struct AActor* ApplyToActor); // Function Solarland.SolarAbility.RemoveSolarAbilityFrom // (Final|Native|Public|BlueprintCallable) // @ game+0x272edb0
	void PlaySound(); // Function Solarland.SolarAbility.PlaySound // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void PauseSound(); // Function Solarland.SolarAbility.PauseSound // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	bool IsLocalControl(); // Function Solarland.SolarAbility.IsLocalControl // (Final|Native|Public|BlueprintCallable) // @ game+0x272e7b0
	bool InSameTeam(); // Function Solarland.SolarAbility.InSameTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x272e6b0
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarAbility.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x272e6e0
	bool CheckActor(struct AActor* SourceActor, struct AActor* TargetActor); // Function Solarland.SolarAbility.CheckActor // (Native|Event|Public|BlueprintEvent) // @ game+0x272e5b0
	void ApplySolarAbilityTo(struct AActor* ApplyToActor, struct AActor* SourceActor); // Function Solarland.SolarAbility.ApplySolarAbilityTo // (Final|Native|Public|BlueprintCallable) // @ game+0x272e4e0
};

// Class Solarland.SolarAbilityComponent
// Size: 0x1a0 (Inherited: 0xb0)
struct USolarAbilityComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct TMap<struct USolarAbilityEffect*, struct USolarAbilityEffect*> AppliedEffectMap; // 0xb8(0x50)
	struct TMap<struct USolarAbilityEffect*, struct USolarAbilityEffect*> AppliedEffectsThisTick; // 0x108(0x50)
	struct TArray<struct FReplicateEffectData> ReplicateEffectDatas; // 0x158(0x10)
	char pad_168[0x8]; // 0x168(0x08)
	bool CharacterWeaponDisable; // 0x170(0x01)
	bool CharacterMarked; // 0x171(0x01)
	char pad_172[0x2]; // 0x172(0x02)
	float MoveSpeedCoeffient; // 0x174(0x04)
	struct UMaterialInterface* OriginalMaterial; // 0x178(0x08)
	float ShieldRechargeCostCoefficient; // 0x180(0x04)
	char pad_184[0x1c]; // 0x184(0x1c)

	void OnRep_SpeedCoeffient(); // Function Solarland.SolarAbilityComponent.OnRep_SpeedCoeffient // (Final|Native|Public) // @ game+0x272e980
	void OnRep_ReplicateEffectData(); // Function Solarland.SolarAbilityComponent.OnRep_ReplicateEffectData // (Final|Native|Public) // @ game+0x272e960
	int32_t GetCharacterLevel(); // Function Solarland.SolarAbilityComponent.GetCharacterLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x272e680
};

// Class Solarland.SolarAbilityEffect
// Size: 0x198 (Inherited: 0x28)
struct USolarAbilityEffect : UObject {
	struct FSoftObjectPath EffectIconPath; // 0x28(0x18)
	struct TArray<struct FSolarAttributeModifier> AttributeModifiers; // 0x40(0x10)
	bool bAllowMultiple; // 0x50(0x01)
	char pad_51[0xbf]; // 0x51(0xbf)
	struct ASolarCharacterBase* AbilityEffectAffectingCharacter; // 0x110(0x08)
	struct USolarAbilityComponent* AbilityEffectAffectingAbilityComponent; // 0x118(0x08)
	struct ASolarAbility* AffectingAbility; // 0x120(0x08)
	struct FString ExtraInfo; // 0x128(0x10)
	struct TMap<struct FString, float> AttributeParamMap; // 0x138(0x50)
	char pad_188[0x10]; // 0x188(0x10)
};

// Class Solarland.SolarAbilitySystemComponent
// Size: 0x13f0 (Inherited: 0x12f8)
struct USolarAbilitySystemComponent : UAbilitySystemComponent {
	char pad_12F8[0x8]; // 0x12f8(0x08)
	struct USolarGameplayAbilitySet* DefaultAbilitySet; // 0x1300(0x08)
	char pad_1308[0xb0]; // 0x1308(0xb0)
	struct USkeletalMeshComponent* OptionMeshForRepMontage; // 0x13b8(0x08)
	bool bPendingMontageRepForMesh; // 0x13c0(0x01)
	char pad_13C1[0x7]; // 0x13c1(0x07)
	struct TArray<struct FGameplayAbilityLocalAnimMontageForMesh> LocalAnimMontageInfoForMeshes; // 0x13c8(0x10)
	struct TArray<struct FGameplayAbilityRepAnimMontageForMesh> RepAnimMontageInfoForMeshes; // 0x13d8(0x10)
	char pad_13E8[0x8]; // 0x13e8(0x08)

	struct FGameplayAbilitySpecHandle UpgradeAbilityLevelBySpec(struct FGameplayAbilitySpecHandle AbilitySpecHandle, bool bForNextActivate, int32_t LevelUp); // Function Solarland.SolarAbilitySystemComponent.UpgradeAbilityLevelBySpec // (Final|Native|Public|BlueprintCallable) // @ game+0x2736140
	void UpgradeAbilityLevelByClass(struct UGameplayAbility* AbilityClass, bool bForNextActivate, int32_t LevelUp); // Function Solarland.SolarAbilitySystemComponent.UpgradeAbilityLevelByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x2736030
	void UpgradeAbilityLevel(struct FGameplayTagContainer AbilityTags, bool bForNextActivate, int32_t LevelUp); // Function Solarland.SolarAbilitySystemComponent.UpgradeAbilityLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x2735ed0
	void ServerCurrentMontageSetPlayRateForMesh(struct USkeletalMeshComponent* InMesh, struct UAnimMontage* ClientAnimMontage, float InPlayRate); // Function Solarland.SolarAbilitySystemComponent.ServerCurrentMontageSetPlayRateForMesh // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x2735d80
	void ServerCurrentMontageSetNextSectionNameForMesh(struct USkeletalMeshComponent* InMesh, struct UAnimMontage* ClientAnimMontage, float ClientPosition, struct FName SectionName, struct FName NextSectionName); // Function Solarland.SolarAbilitySystemComponent.ServerCurrentMontageSetNextSectionNameForMesh // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x2735ba0
	void ServerCurrentMontageJumpToSectionNameForMesh(struct USkeletalMeshComponent* InMesh, struct UAnimMontage* ClientAnimMontage, struct FName SectionName); // Function Solarland.SolarAbilitySystemComponent.ServerCurrentMontageJumpToSectionNameForMesh // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x2735a50
	void PostDefaultAbilitiesGranted(); // Function Solarland.SolarAbilitySystemComponent.PostDefaultAbilitiesGranted // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnSharedCueInstigatorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarAbilitySystemComponent.OnSharedCueInstigatorEndPlay // (Final|Native|Private) // @ game+0x2735980
	void OnRep_ReplicatedAnimMontageForMesh(); // Function Solarland.SolarAbilitySystemComponent.OnRep_ReplicatedAnimMontageForMesh // (Native|Protected) // @ game+0x1ae6570
	void OnNotifiedTagChanged(struct FGameplayTag& Tag, bool bAdded); // Function Solarland.SolarAbilitySystemComponent.OnNotifiedTagChanged // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x27358a0
	void OnInternalMetaAttributeUpdate(struct USolarMetaAttributeSet* MetaAttributeSet, struct FGameplayModifierEvaluatedData& EvaluatedData, struct FGameplayEffectSpec& EffectSpec, struct FMetaAttributeUpdateEvent& UpdateEvent); // Function Solarland.SolarAbilitySystemComponent.OnInternalMetaAttributeUpdate // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x27355c0
	void NotifySourceMetaAttributeExecution(struct FMetaAttributeUpdateEvent& UpdateEvent); // Function Solarland.SolarAbilitySystemComponent.NotifySourceMetaAttributeExecution // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2735460
	void K2_RemoveGameplayCueLocalShared(struct AActor* Instigator, struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_RemoveGameplayCueLocalShared // (Final|Native|Public|BlueprintCallable) // @ game+0x2734440
	void K2_RemoveGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_RemoveGameplayCueLocal // (Final|Native|Public|BlueprintCallable) // @ game+0x2734260
	int32_t K2_RemoveActiveEffectsWithTag(struct FGameplayTag GameplayTag); // Function Solarland.SolarAbilitySystemComponent.K2_RemoveActiveEffectsWithTag // (Final|Native|Public|BlueprintCallable) // @ game+0x27341c0
	void K2_RefreshAbilityActorInfo(); // Function Solarland.SolarAbilitySystemComponent.K2_RefreshAbilityActorInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x27341a0
	struct FGameplayAbilitySpecHandle K2_GiveAbilityAndActivateOnce(struct UGameplayAbility* AbilityClass, int32_t Level); // Function Solarland.SolarAbilitySystemComponent.K2_GiveAbilityAndActivateOnce // (Final|Native|Public|BlueprintCallable) // @ game+0x27340d0
	struct FGameplayAbilitySpecHandle K2_GiveAbility(struct UGameplayAbility* AbilityClass, int32_t Level); // Function Solarland.SolarAbilitySystemComponent.K2_GiveAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x2734000
	void K2_GetEffectMaxTimeRemainingAndDuration(struct FGameplayTag EffectTag, float& TimeRemaining, float& Duration); // Function Solarland.SolarAbilitySystemComponent.K2_GetEffectMaxTimeRemainingAndDuration // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2733ee0
	struct FActiveGameplayEffectHandle K2_GetActiveGameplayEffectHandle(struct FGameplayTag EffectAssetTag); // Function Solarland.SolarAbilitySystemComponent.K2_GetActiveGameplayEffectHandle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2733e40
	struct FGameplayEffectContextHandle K2_GetActiveGameplayEffectContext(struct FGameplayTag EffectAssetTag); // Function Solarland.SolarAbilitySystemComponent.K2_GetActiveGameplayEffectContext // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2733d00
	struct UAttributeSet* K2_FindOwnedAttributeSetByClass(struct UAttributeSet* Class); // Function Solarland.SolarAbilitySystemComponent.K2_FindOwnedAttributeSetByClass // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2733c60
	void K2_ExecuteGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_ExecuteGameplayCueLocal // (Final|Native|Public|BlueprintCallable) // @ game+0x2733a80
	void K2_ClearAbility(struct FGameplayAbilitySpecHandle& Handle); // Function Solarland.SolarAbilitySystemComponent.K2_ClearAbility // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27339e0
	void K2_CancelAbilityByTag(struct FGameplayTag AbilityTag); // Function Solarland.SolarAbilitySystemComponent.K2_CancelAbilityByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x2733950
	void K2_AddGameplayCueLocalShared(struct AActor* Instigator, struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_AddGameplayCueLocalShared // (Final|Native|Public|BlueprintCallable) // @ game+0x2733720
	void K2_AddGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_AddGameplayCueLocal // (Final|Native|Public|BlueprintCallable) // @ game+0x2733540
	bool IsNotifiedTagAvailable(struct FGameplayTag& Tag); // Function Solarland.SolarAbilitySystemComponent.IsNotifiedTagAvailable // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x27334a0
	struct FGameplayAbilitySpecHandle GiveDefaultAbility(struct UGameplayAbility* AbilityClass); // Function Solarland.SolarAbilitySystemComponent.GiveDefaultAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x2733410
	struct FActiveGameplayEffectHandle ChangeActiveEffectRemainTime(struct FActiveGameplayEffectHandle InEffect, float InValue, enum class EGameplayModOp InOption); // Function Solarland.SolarAbilitySystemComponent.ChangeActiveEffectRemainTime // (Final|Native|Public|BlueprintCallable) // @ game+0x2732360
	struct FActiveGameplayEffectHandle ChangeActiveEffectDuration(struct FActiveGameplayEffectHandle InEffect, float InDuration, enum class EActiveEffectDurationChangeProxy InChangeProxy); // Function Solarland.SolarAbilitySystemComponent.ChangeActiveEffectDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x2732240
};

// Class Solarland.SolarAbilitySystemInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarAbilitySystemInterface : UAbilitySystemInterface {

	struct USolarAbilitySystemComponent* GetSolarAbilitySystemComponent(); // Function Solarland.SolarAbilitySystemInterface.GetSolarAbilitySystemComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x27333e0
};

// Class Solarland.SolarAbilitySystemLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarAbilitySystemLibrary : UBlueprintFunctionLibrary {

	bool MMC_GetCapturedAttributeMagnitude(struct FGameplayEffectAttributeCaptureDefinition& Def, struct FGameplayEffectSpec& Spec, struct FGameplayTagContainer SourceTags, struct FGameplayTagContainer TargetTags, float& Magnitude); // Function Solarland.SolarAbilitySystemLibrary.MMC_GetCapturedAttributeMagnitude // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2734670
	void MarkStackCountHandledManually(struct FGameplayEffectCustomExecutionOutput& Output); // Function Solarland.SolarAbilitySystemLibrary.MarkStackCountHandledManually // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2735390
	void MarkGameplayCuesHandledManually(struct FGameplayEffectCustomExecutionOutput& Output); // Function Solarland.SolarAbilitySystemLibrary.MarkGameplayCuesHandledManually // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27352c0
	void MarkConditionalGameplayEffectsToTrigger(struct FGameplayEffectCustomExecutionOutput& Output); // Function Solarland.SolarAbilitySystemLibrary.MarkConditionalGameplayEffectsToTrigger // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27351f0
	struct FGameplayModifierInfo MakeSimpleGameplayModifierInfo(struct FGameplayAttribute InAttribute); // Function Solarland.SolarAbilitySystemLibrary.MakeSimpleGameplayModifierInfo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2734fe0
	struct FGameplayModifierEvaluatedData MakeSimpleGameplayModifierEvaluatedData(struct FGameplayAttribute InAttribute, enum class EGameplayModOp InModOp, float InMagnitude); // Function Solarland.SolarAbilitySystemLibrary.MakeSimpleGameplayModifierEvaluatedData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2734d40
	struct FGameplayModifierEvaluatedData MakeGameplayModifierEvaluatedData(struct FGameplayAttribute InAttribute, enum class EGameplayModOp InModOp, float InMagnitude, struct FActiveGameplayEffectHandle& InHandle); // Function Solarland.SolarAbilitySystemLibrary.MakeGameplayModifierEvaluatedData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2734a40
	struct FAttributeSubSetting MakeAttributeSubSetting(int32_t InAttributeSubID, float InValue); // Function Solarland.SolarAbilitySystemLibrary.MakeAttributeSubSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2734960
	struct FGameplayEffectContextHandle GetEffectContextFromCueParameters(struct FGameplayCueParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.GetEffectContextFromCueParameters // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2733210
	struct FGameplayEffectContextHandle GetEffectContext(struct FGameplayEffectSpec& Spec); // Function Solarland.SolarAbilitySystemLibrary.GetEffectContext // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2733100
	float GetCurrentValueFromAttribute(struct FGameplayAttributeData& Attribute); // Function Solarland.SolarAbilitySystemLibrary.GetCurrentValueFromAttribute // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2733060
	struct FGameplayTagContainer GetCapturedTargetTags(struct FGameplayEffectSpec& Spec); // Function Solarland.SolarAbilitySystemLibrary.GetCapturedTargetTags // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2732f60
	struct FGameplayTagContainer GetCapturedSourceTags(struct FGameplayEffectSpec& Spec); // Function Solarland.SolarAbilitySystemLibrary.GetCapturedSourceTags // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2732e60
	float GetBaseValueFromAttribute(struct FGameplayAttributeData& Attribute); // Function Solarland.SolarAbilitySystemLibrary.GetBaseValueFromAttribute // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2732dc0
	bool FindAttribute(struct FString CombinedName, struct FGameplayAttribute& OutAttribute); // Function Solarland.SolarAbilitySystemLibrary.FindAttribute // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2732c30
	struct UGameplayAbility* EffectContextHandle_GetAbility(struct FGameplayEffectContextHandle& Handle); // Function Solarland.SolarAbilitySystemLibrary.EffectContextHandle_GetAbility // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2732b50
	struct UAbilitySystemComponent* CustomExecParams_GetTargetAbilitySystemComponent(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetTargetAbilitySystemComponent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2732a10
	struct UAbilitySystemComponent* CustomExecParams_GetSourceAbilitySystemComponent(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetSourceAbilitySystemComponent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27328d0
	struct FGameplayTagContainer CustomExecParams_GetPassedInTags(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetPassedInTags // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2732760
	struct FGameplayEffectSpec CustomExecParams_GetOwningSpec(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetOwningSpec // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2732600
	struct TArray<struct FActiveGameplayEffectHandle> CustomExecParams_GetIgnoreHandles(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetIgnoreHandles // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2732480
	struct FAttributeSubSetting CancelAttributeSubSetting(int32_t InAttributeSubID); // Function Solarland.SolarAbilitySystemLibrary.CancelAttributeSubSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27321a0
	void BreakGameplayModifierInfo(struct FGameplayModifierInfo& InModifier, struct FGameplayAttribute& OutAttribute, enum class EGameplayModOp& OutModType, struct FGameplayTagRequirements& OutSourceTags, struct FGameplayTagRequirements& OutTargetTags); // Function Solarland.SolarAbilitySystemLibrary.BreakGameplayModifierInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2731d00
	void AddOutputModifier(struct FGameplayEffectCustomExecutionOutput& Output, struct FGameplayModifierEvaluatedData& InOutputMod); // Function Solarland.SolarAbilitySystemLibrary.AddOutputModifier // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2731b70
};

// Class Solarland.SolarAbilityTask_WaitInputCommand
// Size: 0xa0 (Inherited: 0x80)
struct USolarAbilityTask_WaitInputCommand : USolarAbilityTask {
	struct FMulticastInlineDelegate OnCommand; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)

	struct USolarAbilityTask_WaitInputCommand* CreateTask(struct UGameplayAbility* OwningAbility, struct FName ActionName, enum class EInputEvent InputEvent); // Function Solarland.SolarAbilityTask_WaitInputCommand.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x273aef0
};

// Class Solarland.SolarGameManager
// Size: 0x30 (Inherited: 0x28)
struct USolarGameManager : USolarAbstractManager {
	struct USolarGameInstanceBase* OwnerGameInstance; // 0x28(0x08)

	void ReceiveManagerIntialized(); // Function Solarland.SolarGameManager.ReceiveManagerIntialized // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarABTestManager
// Size: 0x38 (Inherited: 0x30)
struct USolarABTestManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarAccessLuaDataUtils
// Size: 0x38 (Inherited: 0x28)
struct USolarAccessLuaDataUtils : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USolarGameInstanceBase* SolarGameInstance; // 0x30(0x08)

	void GetMatchResult(struct FMatchResult& MatchResult); // Function Solarland.SolarAccessLuaDataUtils.GetMatchResult // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0xb66830
};

// Class Solarland.AchievementFormula
// Size: 0x228 (Inherited: 0x228)
struct AAchievementFormula : AActor {

	struct USolarAchievementComponent* GetAchievementComponent(); // Function Solarland.AchievementFormula.GetAchievementComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x273b200
	int32_t GetAchievedTargetValue(int32_t InAchievementID); // Function Solarland.AchievementFormula.GetAchievedTargetValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x273b160
	struct TArray<int32_t> GetAchievedConditionValue(int32_t InAchievementID); // Function Solarland.AchievementFormula.GetAchievedConditionValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x273b080
};

// Class Solarland.SolarAchievementComponent
// Size: 0x1c0 (Inherited: 0xb0)
struct USolarAchievementComponent : UActorComponent {
	struct UDataTable* AchievementHandleConfig; // 0xb0(0x08)
	struct AAchievementFormula* AchievementFormulaClass; // 0xb8(0x08)
	struct AAchievementFormula* AchievementFormula; // 0xc0(0x08)
	char pad_C8[0xa8]; // 0xc8(0xa8)
	struct TMap<int32_t, struct FAchievementResult> AllStatisticAchievement; // 0x170(0x50)

	void UnlockAchievement(int32_t InAchievementID); // Function Solarland.SolarAchievementComponent.UnlockAchievement // (Final|Native|Public|BlueprintCallable) // @ game+0x273bcb0
	void SetAchievementValue(int32_t InAchievementID, int32_t InUpdateValue); // Function Solarland.SolarAchievementComponent.SetAchievementValue // (Final|Native|Public|BlueprintCallable) // @ game+0x273bbe0
	bool IsAchievementCompleted(int32_t InAchievementID); // Function Solarland.SolarAchievementComponent.IsAchievementCompleted // (Final|Native|Public|BlueprintCallable) // @ game+0x273b4f0
	void IncreaseAchievementValue(int32_t InAchievementID, int32_t InUpdateValue); // Function Solarland.SolarAchievementComponent.IncreaseAchievementValue // (Final|Native|Public|BlueprintCallable) // @ game+0x273b420
	int32_t GetAchievementPorgressValue(int32_t InAchievementID); // Function Solarland.SolarAchievementComponent.GetAchievementPorgressValue // (Final|Native|Public|BlueprintCallable) // @ game+0x273b230
};

// Class Solarland.SolarActivityManager
// Size: 0x38 (Inherited: 0x30)
struct USolarActivityManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)

	bool IsCollectionRedeemOpen(int32_t ActivityID); // Function Solarland.SolarActivityManager.IsCollectionRedeemOpen // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<int32_t> GetActivityItemIDList(int32_t OutcomeID); // Function Solarland.SolarActivityManager.GetActivityItemIDList // (Final|Native|Public) // @ game+0x273b2d0
};

// Class Solarland.SolarActorCollisionIgnoreSystem
// Size: 0xf0 (Inherited: 0x30)
struct USolarActorCollisionIgnoreSystem : UWorldSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
	struct TMap<struct AActor*, char> TeamIgnoreCollisionActorMap; // 0x40(0x50)
	char pad_90[0x10]; // 0x90(0x10)
	struct TMap<enum class ESolarIgnoreCollisionType, struct FSolarIgnoreCollisionTypeData> TypeIgnoreCollisionActorMap; // 0xa0(0x50)
};

// Class Solarland.SolarActorInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarActorInterface : UInterface {

	bool IsTeammate(struct AActor* InOther); // Function Solarland.SolarActorInterface.IsTeammate // (Native|Event|Public|BlueprintEvent|Const) // @ game+0xcb4f60
	bool IsAlly(struct AActor* InOther); // Function Solarland.SolarActorInterface.IsAlly // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x273b590
	struct FVector GetCenterLocation(); // Function Solarland.SolarActorInterface.GetCenterLocation // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x273b3e0
};

// Class Solarland.SolarActorPoolManager
// Size: 0xd0 (Inherited: 0x30)
struct USolarActorPoolManager : UGameInstanceSubsystem {
	char pad_30[0xa0]; // 0x30(0xa0)

	bool PushActor(struct AActor* Actor); // Function Solarland.SolarActorPoolManager.PushActor // (Final|Native|Public|BlueprintCallable) // @ game+0x273b9d0
	void OnActorDestroyed(struct AActor* Actor); // Function Solarland.SolarActorPoolManager.OnActorDestroyed // (Final|Native|Protected) // @ game+0x273b680
	struct USolarActorPoolManager* Get(struct UObject* WorldContextObject); // Function Solarland.SolarActorPoolManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x273aff0
};

// Class Solarland.SolarAdapterSlotInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarAdapterSlotInterface : UInterface {

	void OnLoadAdapterSlotWidgetFinished(); // Function Solarland.SolarAdapterSlotInterface.OnLoadAdapterSlotWidgetFinished // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x273b9b0
	void OnChangeAdapterSlotWidgetParameters(struct TArray<struct FWidgetOverrideParam>& Params); // Function Solarland.SolarAdapterSlotInterface.OnChangeAdapterSlotWidgetParameters // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x273b840
	void OnChangeAdapterSlotWidgetGameplayTag(struct FGameplayTag& InGameplayTag, struct TArray<struct FString>& MetaData); // Function Solarland.SolarAdapterSlotInterface.OnChangeAdapterSlotWidgetGameplayTag // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x273b710
};

// Class Solarland.SolarAdapterWidget
// Size: 0x1d0 (Inherited: 0x150)
struct USolarAdapterWidget : UContentWidget {
	enum class EWidgetLoadType WidgetLoadType; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
	struct FSoftClassPath MobileWidgetPath; // 0x158(0x18)
	struct FSoftClassPath DesktopWidgetPath; // 0x170(0x18)
	struct TArray<struct FWidgetOverrideParam> OverrideParamList; // 0x188(0x10)
	struct FSoftClassPath CurWidgetPath; // 0x198(0x18)
	struct UUserWidget* AdapteeWidget; // 0x1b0(0x08)
	bool bNeedExecuteWidgetOpened; // 0x1b8(0x01)
	char pad_1B9[0x17]; // 0x1b9(0x17)

	void SetNeedExecuteWidgetOpened(bool bInNeedExecuteWidgetOpened); // Function Solarland.SolarAdapterWidget.SetNeedExecuteWidgetOpened // (Final|Native|Public) // @ game+0xbd9af0
	void RefreshUIByOverrideParams(struct TArray<struct FWidgetOverrideParam>& WidgetOverrideParams); // Function Solarland.SolarAdapterWidget.RefreshUIByOverrideParams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x273ba70
	void LoadUserWidgetResource(); // Function Solarland.SolarAdapterWidget.LoadUserWidgetResource // (Final|Native|Public|BlueprintCallable) // @ game+0x273b660
	bool IsNeedExecuteWidgetOpened(); // Function Solarland.SolarAdapterWidget.IsNeedExecuteWidgetOpened // (Final|Native|Public|Const) // @ game+0x273b630
	struct UUserWidget* GetAdapteeWidget(); // Function Solarland.SolarAdapterWidget.GetAdapteeWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x273b3b0
};

// Class Solarland.SolarAdvProgressBoard
// Size: 0x2b8 (Inherited: 0x260)
struct USolarAdvProgressBoard : UUserWidget {
	struct UImage* ProgressBoard; // 0x260(0x08)
	struct UMaterialInstance* ProgressShader; // 0x268(0x08)
	struct FLinearColor IncreaseColor; // 0x270(0x10)
	struct FLinearColor DecreaseColor; // 0x280(0x10)
	struct TArray<struct FAdvProgressChannelInfo> ChannelList; // 0x290(0x10)
	char pad_2A0[0x18]; // 0x2a0(0x18)
};

// Class Solarland.SolarAICondition
// Size: 0x28 (Inherited: 0x28)
struct USolarAICondition : UObject {
};

// Class Solarland.SolarAICondition_BlueprintBase
// Size: 0x28 (Inherited: 0x28)
struct USolarAICondition_BlueprintBase : USolarAICondition {

	bool ReceiveExecute(struct UObject* OwnerExecutor); // Function Solarland.SolarAICondition_BlueprintBase.ReceiveExecute // (Event|Public|BlueprintEvent|Const) // @ game+0x2d0d160
};

// Class Solarland.SolarAICondition_TagState
// Size: 0x28 (Inherited: 0x28)
struct USolarAICondition_TagState : USolarAICondition {
};

// Class Solarland.SolarAICondition_TagStateTime
// Size: 0x38 (Inherited: 0x28)
struct USolarAICondition_TagStateTime : USolarAICondition_TagState {
	enum class ESolarAITagStateTimeType TimeType; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	struct FSolarAIValueCompare CompareIns; // 0x2c(0x0c)
};

// Class Solarland.SolarAICondition_ScoreBase
// Size: 0x48 (Inherited: 0x28)
struct USolarAICondition_ScoreBase : USolarAICondition_TagState {
	struct TArray<struct USolarAIConditionScoreItem*> ScoreItems; // 0x28(0x10)
	struct FSolarAIValueCompare CompareIns; // 0x38(0x0c)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Solarland.SolarAIConditionScoreItem
// Size: 0x30 (Inherited: 0x28)
struct USolarAIConditionScoreItem : UObject {
	float ItemWeight; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Solarland.SolarAICondScoreItem_BoolBase
// Size: 0x30 (Inherited: 0x30)
struct USolarAICondScoreItem_BoolBase : USolarAIConditionScoreItem {
};

// Class Solarland.SolarAICondScoreItem_BoolBaseBP
// Size: 0x30 (Inherited: 0x30)
struct USolarAICondScoreItem_BoolBaseBP : USolarAICondScoreItem_BoolBase {

	bool ReceiveProvideItemBaseBoolBot(struct ASolarBotAIController* BotController, struct ASolarCharacter* SolarChar); // Function Solarland.SolarAICondScoreItem_BoolBaseBP.ReceiveProvideItemBaseBoolBot // (Event|Public|BlueprintEvent|Const) // @ game+0x2d0d160
	bool ReceiveProvideItemBaseBool(struct UObject* OwnerExecutor); // Function Solarland.SolarAICondScoreItem_BoolBaseBP.ReceiveProvideItemBaseBool // (Event|Public|BlueprintEvent|Const) // @ game+0x2d0d160
};

// Class Solarland.SolarAICondScoreItem_FloatBase
// Size: 0x30 (Inherited: 0x30)
struct USolarAICondScoreItem_FloatBase : USolarAIConditionScoreItem {
};

// Class Solarland.SolarAICondScoreItem_FloatLinearClamp
// Size: 0x38 (Inherited: 0x30)
struct USolarAICondScoreItem_FloatLinearClamp : USolarAICondScoreItem_FloatBase {
	float ClampFloatValueMin; // 0x30(0x04)
	float ClampFloatValueMax; // 0x34(0x04)
};

// Class Solarland.SolarAICondScoreItem_FloatBaseBP
// Size: 0x38 (Inherited: 0x38)
struct USolarAICondScoreItem_FloatBaseBP : USolarAICondScoreItem_FloatLinearClamp {

	float ReceiveProvideItemBaseFloatBot(struct ASolarBotAIController* BotController, struct ASolarCharacter* SolarChar); // Function Solarland.SolarAICondScoreItem_FloatBaseBP.ReceiveProvideItemBaseFloatBot // (Event|Public|BlueprintEvent|Const) // @ game+0x2d0d160
	float ReceiveProvideItemBaseFloat(struct UObject* OwnerExecutor); // Function Solarland.SolarAICondScoreItem_FloatBaseBP.ReceiveProvideItemBaseFloat // (Event|Public|BlueprintEvent|Const) // @ game+0x2d0d160
};

// Class Solarland.SolarAICondScoreItem_CharHP
// Size: 0x40 (Inherited: 0x38)
struct USolarAICondScoreItem_CharHP : USolarAICondScoreItem_FloatLinearClamp {
	bool bPercent; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Solarland.SolarAICondScoreItem_BotTagStateTime
// Size: 0x50 (Inherited: 0x38)
struct USolarAICondScoreItem_BotTagStateTime : USolarAICondScoreItem_FloatLinearClamp {
	enum class ESolarAITagStateTimeType TimeType; // 0x38(0x01)
	char pad_39[0x17]; // 0x39(0x17)
};

// Class Solarland.SolarAIControllerBase
// Size: 0x358 (Inherited: 0x348)
struct ASolarAIControllerBase : AAIController {
	char pad_348[0x8]; // 0x348(0x08)
	struct UBehaviorTree* BehaviorTree; // 0x350(0x08)
};

// Class Solarland.SolarAILibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarAILibrary : UObject {

	struct ASolarBotAIController* SpawnBotAtLocation(struct UObject* WorldContextObject, struct FVector SpawnLocation, struct ASolarBotAIController* ControllerClass, int32_t CharacterId, int32_t SkinId, int32_t TeamID); // Function Solarland.SolarAILibrary.SpawnBotAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x273ff20
	bool IsLocationOnPlayerSight(struct UObject* WorldContextObject, struct FVector& TestLocation, float TraceStartOffsetZ, float MaxRange, bool bIgnoreSpectatePlayer); // Function Solarland.SolarAILibrary.IsLocationOnPlayerSight // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x273f3d0
	bool HasPlayersInRange(struct UObject* WorldContextObject, struct FVector& TestLocation, int32_t& count, float RangeRadius, bool bIncludeBot, bool bOnlyDrivers); // Function Solarland.SolarAILibrary.HasPlayersInRange // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x273f1a0
	bool GetValidCharacterIDByTeamName(struct ASolarGameMode* InGameMode, struct FString TeamName, int32_t& OutCharacterID, int32_t& OutSkinId, bool bOnlyLowerPos); // Function Solarland.SolarAILibrary.GetValidCharacterIDByTeamName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x273efb0
	bool GetValidCharacterID(struct ASolarPlayerState* TargetPS, int32_t& OutCharacterID, int32_t& OutSkinId, bool bOnlyLowerPos); // Function Solarland.SolarAILibrary.GetValidCharacterID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x273ee40
	struct FVector GetPoisonCircleCenter(struct UObject* WorldContextObject, bool bDoProject, bool bUseNavmesh, struct FVector Extent); // Function Solarland.SolarAILibrary.GetPoisonCircleCenter // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x273eca0
	void ApplyDamageEventBetweenPreservedBot(struct ASolarBotAIController* Target, float DamageValue, struct FSolarPointDamageEvent DamageEvent, struct ASolarBotAIController* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarAILibrary.ApplyDamageEventBetweenPreservedBot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e26840
};

// Class Solarland.SolarItemSpawner
// Size: 0x390 (Inherited: 0x298)
struct ASolarItemSpawner : ASolarMapElementBase {
	int32_t SpawnerID; // 0x298(0x04)
	char pad_29C[0x2c]; // 0x29c(0x2c)
	enum class ESpawnStage SpawnStage; // 0x2c8(0x01)
	enum class ESpawnerType SpawnerType; // 0x2c9(0x01)
	enum class ESpawnerLevel SpawnerLevel; // 0x2ca(0x01)
	char pad_2CB[0x1]; // 0x2cb(0x01)
	int32_t OutcomeID; // 0x2cc(0x04)
	struct FVector OriginPos; // 0x2d0(0x0c)
	struct FVector BoxExtent; // 0x2dc(0x0c)
	struct FBox SpawnerBox; // 0x2e8(0x1c)
	float RotateAngleRange; // 0x304(0x04)
	bool HasSpawnedItem; // 0x308(0x01)
	bool bActiveSpawner; // 0x309(0x01)
	char pad_30A[0x6]; // 0x30a(0x06)
	struct FString SyncItemId; // 0x310(0x10)
	bool BOpenLog; // 0x320(0x01)
	bool bRefresh; // 0x321(0x01)
	char pad_322[0x2]; // 0x322(0x02)
	float RefreshTime; // 0x324(0x04)
	bool bUseSpawnerTransform; // 0x328(0x01)
	bool bToTheGround; // 0x329(0x01)
	char pad_32A[0x2]; // 0x32a(0x02)
	int32_t NumberOfPoints; // 0x32c(0x04)
	float fScalarParams; // 0x330(0x04)
	enum class EItemAppearanceType AppearanceType; // 0x334(0x01)
	bool bUpdateOverlap; // 0x335(0x01)
	char pad_336[0x22]; // 0x336(0x22)
	struct FTimerHandle ItemLoadHandle; // 0x358(0x08)
	struct FTimerHandle ItemSpawnHandle; // 0x360(0x08)
	struct FTimerHandle ItemRefreshHandle; // 0x368(0x08)
	char pad_370[0x20]; // 0x370(0x20)

	void SpawnSingleItem(); // Function Solarland.SolarItemSpawner.SpawnSingleItem // (Final|Native|Private) // @ game+0x282ac00
	void SpawnInNextTick(); // Function Solarland.SolarItemSpawner.SpawnInNextTick // (Final|Native|Private) // @ game+0x282abe0
	void SaveSpawnerRange(); // Function Solarland.SolarItemSpawner.SaveSpawnerRange // (Native|Public|BlueprintCallable) // @ game+0x826920
	void RandomRotatorForItem(enum class EItemType ItemType, struct FQuat& TargetRotator); // Function Solarland.SolarItemSpawner.RandomRotatorForItem // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x282aaf0
	void RandomPosInBoundingBox(struct FVector& TargetPos); // Function Solarland.SolarItemSpawner.RandomPosInBoundingBox // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x282aa60
	void PlaceItemToTheGround(struct FVector& InOutLocation); // Function Solarland.SolarItemSpawner.PlaceItemToTheGround // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x282a9d0
	void OnItemSpawned(struct AActor* Item); // Function Solarland.SolarItemSpawner.OnItemSpawned // (Final|Native|Public) // @ game+0x92e240
	void OnAsyncLoadComplete(struct FSoftClassPath SClassPath, struct FSolarItemData ItemData); // Function Solarland.SolarItemSpawner.OnAsyncLoadComplete // (Final|Native|Private|HasDefaults) // @ game+0x282a710
	void NetStartSpawnItems(struct ASolarItemRootActor* OwnerActor); // Function Solarland.SolarItemSpawner.NetStartSpawnItems // (Native|Public|BlueprintCallable) // @ game+0x1b0c430
	void LoadSingleWeaponAsset(struct FSolarItemData& ItemData); // Function Solarland.SolarItemSpawner.LoadSingleWeaponAsset // (Final|Native|Private|HasOutParms) // @ game+0x282a620
	void LoadSingleItemAsset(); // Function Solarland.SolarItemSpawner.LoadSingleItemAsset // (Final|Native|Private) // @ game+0x282a600
	void LoadInNextTick(); // Function Solarland.SolarItemSpawner.LoadInNextTick // (Final|Native|Private) // @ game+0x282a5e0
	void InitSpawnerBound(); // Function Solarland.SolarItemSpawner.InitSpawnerBound // (Final|Native|Public) // @ game+0x282a5c0
	void GetSuitableDropPos(struct FVector& TargetPos); // Function Solarland.SolarItemSpawner.GetSuitableDropPos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x282a530
	void GenerateDropPosition(); // Function Solarland.SolarItemSpawner.GenerateDropPosition // (Final|Native|Private) // @ game+0x282a510
	void ClearUnpickedItems(); // Function Solarland.SolarItemSpawner.ClearUnpickedItems // (Final|Native|Public) // @ game+0x282a4f0
	void ClearLoopTimer(); // Function Solarland.SolarItemSpawner.ClearLoopTimer // (Final|Native|Private) // @ game+0x282a4d0
};

// Class Solarland.SolarAirDropSpawner
// Size: 0x3d0 (Inherited: 0x390)
struct ASolarAirDropSpawner : ASolarItemSpawner {
	bool IsActive; // 0x390(0x01)
	char pad_391[0x3]; // 0x391(0x03)
	float SpawnDelay; // 0x394(0x04)
	float AudioActorHeightOffset; // 0x398(0x04)
	float AudioActorFallSpeed; // 0x39c(0x04)
	struct FSoftClassPath PillarMeshBPClassPathName; // 0x3a0(0x18)
	char pad_3B8[0x8]; // 0x3b8(0x08)
	int32_t ChestID; // 0x3c0(0x04)
	char pad_3C4[0xc]; // 0x3c4(0x0c)
};

// Class Solarland.SolarAirPlaneMissileConfig
// Size: 0xc0 (Inherited: 0x30)
struct USolarAirPlaneMissileConfig : UDataAsset {
	struct TSoftObjectPtr<UParticleSystem> ProjectileParticle; // 0x30(0x28)
	struct FSolarDamageInfo MissileDamageInfo; // 0x58(0x40)
	struct ASolarBullet* MissileBulletClass; // 0x98(0x08)
	struct FString BulletExplosionSound3P; // 0xa0(0x10)
	struct FString BulletExplosionSound3PEnemy; // 0xb0(0x10)
};

// Class Solarland.SolarVehiclePawn
// Size: 0x13c0 (Inherited: 0x288)
struct ASolarVehiclePawn : APawn {
	char pad_288[0x48]; // 0x288(0x48)
	struct UPrimitiveComponent* VehicleRoot; // 0x2d0(0x08)
	struct USkeletalMeshComponentBudgeted* VehicleMesh; // 0x2d8(0x08)
	uint32_t VehicleID; // 0x2e0(0x04)
	bool bVehicleMeshAggregationTick; // 0x2e4(0x01)
	char pad_2E5[0x3]; // 0x2e5(0x03)
	struct TSoftClassPtr<UObject> VehicleStencilClass; // 0x2e8(0x28)
	struct USkeletalMeshComponentBudgeted* VehicleStencilNew; // 0x310(0x08)
	struct USolarNetMovementComponent* NetMovementComponent; // 0x318(0x08)
	struct UAkComponent* AkComponent; // 0x320(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x328(0x08)
	struct USolarVehicleAbilitySystemComponent* VehicleAbilitySystem; // 0x330(0x08)
	struct USolarVehicleSpringArmComponent* SpringArmComponent; // 0x338(0x08)
	struct USolarVehicleCameraComponent* CameraComponent; // 0x340(0x08)
	struct USolarVehicleAttributeSet* VehicleAttributeSet; // 0x348(0x08)
	struct FBasedMovement BasedMovement; // 0x350(0x28)
	struct TArray<struct FVehicleSeatSlot> SeatSlots; // 0x378(0x10)
	int32_t HealthUIID; // 0x388(0x04)
	char pad_38C[0x4]; // 0x38c(0x04)
	struct TSoftObjectPtr<UTexture2D> VehicleBrandIcon; // 0x390(0x28)
	float OverlapWaterRadius; // 0x3b8(0x04)
	struct FVector OutVehicleOffset; // 0x3bc(0x0c)
	float WaterDraftDepth; // 0x3c8(0x04)
	float CarpadProtectTime; // 0x3cc(0x04)
	float CarPadAccelerationMultiplier; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct USolarVehicleGA_Carpad* CarPadAbility; // 0x3d8(0x08)
	struct TArray<struct FVector> DropPassengerLocations; // 0x3e0(0x10)
	struct FVector DropPassengerAtTop; // 0x3f0(0x0c)
	struct FVector DamageBoxLocation; // 0x3fc(0x0c)
	struct FVector DamageBoxExtent; // 0x408(0x0c)
	char pad_414[0x4]; // 0x414(0x04)
	struct TArray<struct FName> PenetrationDamageBones; // 0x418(0x10)
	float VehicleMaxSpeedOnUI; // 0x428(0x04)
	enum class EVehicleControlUIType VehicleControlUIType; // 0x42c(0x01)
	enum class EVehicleAnimationType VehicleAnimationType; // 0x42d(0x01)
	char pad_42E[0x2]; // 0x42e(0x02)
	struct FName VehicleDirectionBoneForPassenger; // 0x430(0x08)
	char pad_438[0x8]; // 0x438(0x08)
	struct FVehicleVFX GCCameraVFX; // 0x440(0x90)
	float GCCameraEffectAngle; // 0x4d0(0x04)
	char pad_4D4[0x4]; // 0x4d4(0x04)
	struct TArray<struct FVehicleVFX> NosVFXes; // 0x4d8(0x10)
	struct TMap<enum class EPhysicalSurface, struct TSoftObjectPtr<UParticleSystem>> RaiseDustEffects; // 0x4e8(0x50)
	float SpeedThresholdForCollidingDamage; // 0x538(0x04)
	float SpeedThresholdForStandingOn; // 0x53c(0x04)
	float SpeedThresholdForGetOnVehicle; // 0x540(0x04)
	char pad_544[0x4]; // 0x544(0x04)
	struct TSoftObjectPtr<UParticleSystem> EnterWaterVFX[0x4]; // 0x548(0xa0)
	float SprayVelocity; // 0x5e8(0x04)
	float HeavyInSpeed; // 0x5ec(0x04)
	float CriticalAngle; // 0x5f0(0x04)
	struct FVector OffsetBasedVechileLoction; // 0x5f4(0x0c)
	float CollisionSparkThreshold; // 0x600(0x04)
	char pad_604[0x4]; // 0x604(0x04)
	struct TSoftObjectPtr<UParticleSystem> CollisionSparkParticle; // 0x608(0x28)
	struct FName CollisionSparkParamNowel; // 0x630(0x08)
	struct FName CollisionSparkParamQuantity; // 0x638(0x08)
	float VehicleSpeedThresholdToPlayVFX; // 0x640(0x04)
	char pad_644[0x4]; // 0x644(0x04)
	struct FRuntimeFloatCurve CollisionSparkCurveFromImpulseToNowel; // 0x648(0x88)
	struct FRuntimeFloatCurve CollisionSparkCurveFromImpulseToQuantity; // 0x6d0(0x88)
	char pad_758[0x8]; // 0x758(0x08)
	struct FVehicleVFX SpeedParticle; // 0x760(0x90)
	struct TArray<struct FVehicleVFXMesh> DriverOnVFXMeshes; // 0x7f0(0x10)
	struct TArray<struct FVehicleVFX> DriverOnVFXs; // 0x800(0x10)
	struct FVector SpawnOffset; // 0x810(0x0c)
	char pad_81C[0x4]; // 0x81c(0x04)
	struct UVehicleCameraDataAsset* CameraDataAsset; // 0x820(0x08)
	struct FString SpeedVibrationHeString; // 0x828(0x10)
	struct FRuntimeFloatCurve SpeedVibrationCurve; // 0x838(0x88)
	float MinSpeedDifferenceForCollisionVibration; // 0x8c0(0x04)
	char pad_8C4[0x4]; // 0x8c4(0x04)
	struct FString CollisionVibrationHeString; // 0x8c8(0x10)
	struct FString LandingVibrationHeString; // 0x8d8(0x10)
	struct FRuntimeFloatCurve LandingVibrationCurve; // 0x8e8(0x88)
	float MaxSpeedDecelerationRate; // 0x970(0x04)
	char pad_974[0x4]; // 0x974(0x04)
	struct FSolarVehicleMaterialData BackLampData; // 0x978(0x28)
	struct TArray<struct FSolarVehicleMaterialData> VehicleMaterialDataArray; // 0x9a0(0x10)
	struct USolarVehicleSoundDataAsset* VehicleSoundDataAsset; // 0x9b0(0x08)
	struct UGameplayEffect* DefaultAttributes; // 0x9b8(0x08)
	struct UGameplayEffect* CanDriveEffect; // 0x9c0(0x08)
	struct UGameplayEffect* CanGetOnEffect; // 0x9c8(0x08)
	struct UGameplayEffect* UnderWaterEffect; // 0x9d0(0x08)
	struct ASolarAbility* ExplosionAbilityClass; // 0x9d8(0x08)
	struct FSolarDamageInfo ExplosionDamageInfo; // 0x9e0(0x40)
	struct FVehicleVFX ExplosionVFX; // 0xa20(0x90)
	struct FVehicleVFXMesh VehicleBrokenMesh; // 0xab0(0x80)
	struct FVehicleVFX VehicleDamagedVFXs[0x5]; // 0xb30(0x2d0)
	struct FDamageStatusVehicleVFXs VehicleDamageStatusVFXs[0x5]; // 0xe00(0x50)
	struct UGameplayEffect* VehicleDamageStatusEffects[0x5]; // 0xe50(0x28)
	int32_t MaxLodLevelForUpdateVisual; // 0xe78(0x04)
	char pad_E7C[0x4]; // 0xe7c(0x04)
	struct TArray<struct FVehicleWeakPointSpec> VehicleWeakPointContainer; // 0xe80(0x10)
	struct TArray<struct FRuntimeFloatCurve> WeakPointBrokenSpeedCurves; // 0xe90(0x10)
	struct UGameplayEffect* WeakPointBrokenEffect; // 0xea0(0x08)
	struct UPrimitiveComponent* PlatformComponent; // 0xea8(0x08)
	bool bCanStandOnPlatform; // 0xeb0(0x01)
	char pad_EB1[0x3]; // 0xeb1(0x03)
	float DistanceThresholdForAttachPlatform; // 0xeb4(0x04)
	float DegreeThresholdForAttachPlatform; // 0xeb8(0x04)
	float SpeedThresholdForAttachPlatform; // 0xebc(0x04)
	float TimerForPenetration; // 0xec0(0x04)
	float PenetrationThreshold; // 0xec4(0x04)
	float CollideDamage; // 0xec8(0x04)
	float CrashDamageWeight; // 0xecc(0x04)
	float SelfCrashDamageRate; // 0xed0(0x04)
	float PassengerDamageRatio; // 0xed4(0x04)
	float MinPlayerDamageVelocity; // 0xed8(0x04)
	float CollidedCharacterDmgRatio; // 0xedc(0x04)
	float CollideUpBoundingRatio; // 0xee0(0x04)
	char pad_EE4[0x4]; // 0xee4(0x04)
	struct UCurveFloat* CollidePushSpeedCurve; // 0xee8(0x08)
	float CollidePushUpAngle; // 0xef0(0x04)
	float CharacterProtectTime; // 0xef4(0x04)
	float CollisionLinearVelocityDampingForSimulatedProxy; // 0xef8(0x04)
	float CollisionLinearVelocityDampingSetDelay; // 0xefc(0x04)
	float CollisionCompensationImpulseForSimulatedProxy; // 0xf00(0x04)
	char pad_F04[0x4]; // 0xf04(0x04)
	struct TArray<int32_t> StealthHideMats; // 0xf08(0x10)
	char pad_F18[0x8]; // 0xf18(0x08)
	enum class EVehicleAnimationState ReplicatedAnimState; // 0xf20(0x01)
	bool bRemoveStencil; // 0xf21(0x01)
	char pad_F22[0x16]; // 0xf22(0x16)
	struct FMulticastSparseDelegate OnPlayerGetOnVehicle; // 0xf38(0x01)
	struct FMulticastSparseDelegate OnPlayerGetOffVehicle; // 0xf39(0x01)
	char pad_F3A[0xce]; // 0xf3a(0xce)
	struct TArray<int32_t> OccupiedSeats; // 0x1008(0x10)
	struct USolarInputActionContext* InputActionContext; // 0x1018(0x08)
	char pad_1020[0x4]; // 0x1020(0x04)
	struct FVector_NetQuantizeNormal ReplicatedPlayerInputVector; // 0x1024(0x0c)
	char pad_1030[0xc]; // 0x1030(0x0c)
	struct FVector_NetQuantize RepLocation; // 0x103c(0x0c)
	char pad_1048[0x40]; // 0x1048(0x40)
	struct TArray<struct AActor*> ActorsOnPlatform; // 0x1088(0x10)
	char pad_1098[0x2c]; // 0x1098(0x2c)
	struct FSpawnedActorHandle CachedActorHandle; // 0x10c4(0x04)
	char CurPlayerInputMask; // 0x10c8(0x01)
	char ReplicatedPlayerInputMask; // 0x10c9(0x01)
	char pad_10CA[0x86]; // 0x10ca(0x86)
	struct USolarNavModifierComponent* SolarNavModifierComp; // 0x1150(0x08)
	bool bDynamicAffectNavigation; // 0x1158(0x01)
	bool bUseCustomCollisionCylinder; // 0x1159(0x01)
	char pad_115A[0x2]; // 0x115a(0x02)
	float CustomRadius; // 0x115c(0x04)
	float CustomHalfHeight; // 0x1160(0x04)
	char pad_1164[0x54]; // 0x1164(0x54)
	int32_t SkinId; // 0x11b8(0x04)
	char pad_11BC[0x15]; // 0x11bc(0x15)
	bool bVehicleBurningStart; // 0x11d1(0x01)
	char pad_11D2[0xd6]; // 0x11d2(0xd6)
	float EnterWaterDuration; // 0x12a8(0x04)
	char pad_12AC[0x4]; // 0x12ac(0x04)
	float WaterLineHeight; // 0x12b0(0x04)
	char pad_12B4[0x4]; // 0x12b4(0x04)
	struct ASolarWaterActorNew* WaterActor; // 0x12b8(0x08)
	char pad_12C0[0x20]; // 0x12c0(0x20)
	struct UCurveFloat* SpeedCameraShakeCurve; // 0x12e0(0x08)
	struct UCurveFloat* SpeedScreenEffectOpacityCurve; // 0x12e8(0x08)
	struct UCurveFloat* SpeedScreenEffectPlayRateCurve; // 0x12f0(0x08)
	float MinCameraShakeSpeed; // 0x12f8(0x04)
	float MinScreenEffectSpeed; // 0x12fc(0x04)
	struct UCameraShake* VehicleSpeedCameraShake; // 0x1300(0x08)
	struct FName VehicleSpeedScreenEffectRowId; // 0x1308(0x08)
	char pad_1310[0x20]; // 0x1310(0x20)
	bool bEnableHitSound; // 0x1330(0x01)
	char pad_1331[0x7]; // 0x1331(0x07)
	struct FHitSoundReplicationData HitSoundData; // 0x1338(0x80)
	float AgentRadiusAdjustment; // 0x13b8(0x04)
	char pad_13BC[0x4]; // 0x13bc(0x04)

	void StatVehicleAutoMove(int32_t MoveTime); // Function Solarland.SolarVehiclePawn.StatVehicleAutoMove // (Final|Native|Protected) // @ game+0x2979290
	void SetWeakPointHealth(char WeakPointID, float InHealth); // Function Solarland.SolarVehiclePawn.SetWeakPointHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x29791c0
	void SetTakeMoveInput(bool bInTakeDirection, bool bInTakeRotation); // Function Solarland.SolarVehiclePawn.SetTakeMoveInput // (Final|Native|Public|BlueprintCallable) // @ game+0x29790f0
	void SetPlayerInputVector(struct FVector2D& InputVector, float CameraYaw); // Function Solarland.SolarVehiclePawn.SetPlayerInputVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2979020
	void SetCurrentHealth(float InHealth); // Function Solarland.SolarVehiclePawn.SetCurrentHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x2978fa0
	void SetCrossCarpad(struct ASolarCarPad* InCarpad); // Function Solarland.SolarVehiclePawn.SetCrossCarpad // (Final|Native|Public|BlueprintCallable) // @ game+0x2978f10
	void ServerSetPlayerInput(struct FVector_NetQuantizeNormal InputVector, char InputMask); // Function Solarland.SolarVehiclePawn.ServerSetPlayerInput // (Net|Native|Event|Protected|NetServer) // @ game+0x2978e50
	void ServerSetCrossCarpad(struct ASolarCarPad* InCarpad); // Function Solarland.SolarVehiclePawn.ServerSetCrossCarpad // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2978dc0
	void ServerSendsTransformToEveryoneWithMovementBase(struct TArray<char> Value, struct ASolarVehiclePawn* InMovementBase); // Function Solarland.SolarVehiclePawn.ServerSendsTransformToEveryoneWithMovementBase // (Net|Native|Event|NetMulticast|Public) // @ game+0x2978cd0
	void ServerSendsTransformToEveryone(struct TArray<char> Value); // Function Solarland.SolarVehiclePawn.ServerSendsTransformToEveryone // (Net|Native|Event|NetMulticast|Public) // @ game+0x2978c30
	void ServerSendsTeleportStateToEveryone(struct FVector_NetQuantize InLocation, struct FVector_NetQuantizeNormal InNormalizeEuler, float InServerTimeStamp); // Function Solarland.SolarVehiclePawn.ServerSendsTeleportStateToEveryone // (Net|Native|Event|NetMulticast|Public) // @ game+0x2978b20
	void ServerSendCorrectionToClient(float ServerTimeStamp, struct FVector_NetQuantize WorldLocation, struct FVector_NetQuantizeNormal WorldRotationCompressed); // Function Solarland.SolarVehiclePawn.ServerSendCorrectionToClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x29789f0
	void ServerHandleVehicleCollision(struct FVehicleCollisionInfo InVehicleCollisionInfo); // Function Solarland.SolarVehiclePawn.ServerHandleVehicleCollision // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2978910
	void ServerDrawActorLocationAndRotationOnClient(struct FVector InLocation, struct FRotator InRotator); // Function Solarland.SolarVehiclePawn.ServerDrawActorLocationAndRotationOnClient // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x2978850
	void ServerApplyDamageToVehilceAndPassenger(struct ASolarVehiclePawn* OtherVehicle, float DamageToSelf, float DamageToOther, struct FVector_NetQuantize HitLocation); // Function Solarland.SolarVehiclePawn.ServerApplyDamageToVehilceAndPassenger // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2978700
	void ServerApplyAbilityDamageToTargets(struct TArray<struct APawn*> Targets, struct FGameplayAbilitySpecHandle AbilityHandle); // Function Solarland.SolarVehiclePawn.ServerApplyAbilityDamageToTargets // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2978610
	void RemoveSeatSlot(char SeatIndex); // Function Solarland.SolarVehiclePawn.RemoveSeatSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x2978590
	void ReleaseDamagedStatusVFX(enum class EVehicleDamageStatus InDamagedStatus); // Function Solarland.SolarVehiclePawn.ReleaseDamagedStatusVFX // (Final|Native|Public|BlueprintCallable) // @ game+0x2978510
	void PlayVehicleEjectSound(struct ASolarCharacter* ejectedCharacter); // Function Solarland.SolarVehiclePawn.PlayVehicleEjectSound // (Final|Native|Public|BlueprintCallable) // @ game+0x2978480
	void PlaySpeedboardSound(); // Function Solarland.SolarVehiclePawn.PlaySpeedboardSound // (Final|Native|Public|BlueprintCallable) // @ game+0x2978460
	void PlayDamagedStatusVFX(enum class EVehicleDamageStatus InDamagedStatus); // Function Solarland.SolarVehiclePawn.PlayDamagedStatusVFX // (Final|Native|Public|BlueprintCallable) // @ game+0x29783e0
	void OverlapTraceOnServer(); // Function Solarland.SolarVehiclePawn.OverlapTraceOnServer // (Final|Native|Protected) // @ game+0x29783c0
	void OnStencilLoaded(); // Function Solarland.SolarVehiclePawn.OnStencilLoaded // (Final|Native|Public) // @ game+0x29783a0
	void OnSkinDataAssetLoadedNext(struct FSoftObjectPath SkinVehiclePath); // Function Solarland.SolarVehiclePawn.OnSkinDataAssetLoadedNext // (Final|Native|Protected|HasDefaults) // @ game+0x29782a0
	void OnSkinDataAssetLoaded(struct FSoftObjectPath SkinVehiclePath); // Function Solarland.SolarVehiclePawn.OnSkinDataAssetLoaded // (Final|Native|Protected|HasDefaults) // @ game+0x29781a0
	void OnRep_WeakPointHealthOrStateChanged(struct TArray<struct FVehicleWeakPointSpec> OldVehicleWeakPointDatas); // Function Solarland.SolarVehiclePawn.OnRep_WeakPointHealthOrStateChanged // (Final|Native|Protected) // @ game+0x2978050
	void OnRep_VehicleBurning(); // Function Solarland.SolarVehiclePawn.OnRep_VehicleBurning // (Final|Native|Protected) // @ game+0x2978030
	void OnRep_SkinId(); // Function Solarland.SolarVehiclePawn.OnRep_SkinId // (Final|Native|Protected) // @ game+0x2978010
	void OnRep_ReplicatedPlayerInputMask(char OldReplicatedPlayerInputMask); // Function Solarland.SolarVehiclePawn.OnRep_ReplicatedPlayerInputMask // (Final|Native|Protected) // @ game+0x2977f90
	void OnRep_ReplicatedAnimState(enum class EVehicleAnimationState PreviousState); // Function Solarland.SolarVehiclePawn.OnRep_ReplicatedAnimState // (Native|Public) // @ game+0x2977f10
	void OnRep_RemoveStencil(); // Function Solarland.SolarVehiclePawn.OnRep_RemoveStencil // (Final|Native|Public) // @ game+0x2977ef0
	void OnRep_HitSoundData(struct FHitSoundReplicationData& LastData); // Function Solarland.SolarVehiclePawn.OnRep_HitSoundData // (Final|Native|Private|HasOutParms) // @ game+0x2977de0
	void OnRep_CachedActorHandle(); // Function Solarland.SolarVehiclePawn.OnRep_CachedActorHandle // (Final|Native|Protected) // @ game+0x2977dc0
	bool IsVehicleFullHealth(); // Function Solarland.SolarVehiclePawn.IsVehicleFullHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2977d90
	bool IsVehicleDangerous(); // Function Solarland.SolarVehiclePawn.IsVehicleDangerous // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2977d60
	bool IsVehicleCanGetOff(); // Function Solarland.SolarVehiclePawn.IsVehicleCanGetOff // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2872040
	bool IsVehicleBroken(); // Function Solarland.SolarVehiclePawn.IsVehicleBroken // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2977d30
	bool IsTeammateWith(struct APawn* Pawn); // Function Solarland.SolarVehiclePawn.IsTeammateWith // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2977c90
	bool IsManuallyCancelAbilityActive(char SeatIndex); // Function Solarland.SolarVehiclePawn.IsManuallyCancelAbilityActive // (Final|Native|Public|BlueprintCallable) // @ game+0x2977c00
	bool IsExistEnemy(struct ASolarCharacter* Character); // Function Solarland.SolarVehiclePawn.IsExistEnemy // (Final|Native|Public|BlueprintCallable) // @ game+0x2977b60
	bool IsAbilityActive(char SeatIndex, char AbilityIndex); // Function Solarland.SolarVehiclePawn.IsAbilityActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2977a90
	bool InSameTeam(); // Function Solarland.SolarVehiclePawn.InSameTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x2977a60
	struct TArray<struct FVehicleWeakPointSpec> GetVehicleWeakPoints(); // Function Solarland.SolarVehiclePawn.GetVehicleWeakPoints // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2977950
	int32_t GetVehicleTypeID(); // Function Solarland.SolarVehiclePawn.GetVehicleTypeID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2977920
	char GetVehicleTeamId(); // Function Solarland.SolarVehiclePawn.GetVehicleTeamId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29778f0
	struct UPhysicalMaterial* GetVehicleRootPhysMaterial(); // Function Solarland.SolarVehiclePawn.GetVehicleRootPhysMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29778c0
	int32_t GetVehicleGroupID(); // Function Solarland.SolarVehiclePawn.GetVehicleGroupID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2977890
	float GetSpeedInKmh(); // Function Solarland.SolarVehiclePawn.GetSpeedInKmh // (Native|Public|BlueprintCallable) // @ game+0x2977850
	float GetSpeed(); // Function Solarland.SolarVehiclePawn.GetSpeed // (Native|Public|BlueprintCallable) // @ game+0x2977810
	struct FVector GetSpawnOffset(); // Function Solarland.SolarVehiclePawn.GetSpawnOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x29777e0
	struct FVector2D GetPlayerInputVector(); // Function Solarland.SolarVehiclePawn.GetPlayerInputVector // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x29777a0
	int32_t GetPassengerCount(); // Function Solarland.SolarVehiclePawn.GetPassengerCount // (Final|Native|Public|BlueprintCallable) // @ game+0x2977770
	int32_t GetNextVacantSeat(int32_t InCurrentSeatIndex); // Function Solarland.SolarVehiclePawn.GetNextVacantSeat // (Final|Native|Public|BlueprintCallable) // @ game+0x29776d0
	float GetMaxHealth(); // Function Solarland.SolarVehiclePawn.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29776a0
	int32_t GetManuallyCancelAbilityIndex(char SeatIndex); // Function Solarland.SolarVehiclePawn.GetManuallyCancelAbilityIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x2977610
	int32_t GetHealthPercentInt(); // Function Solarland.SolarVehiclePawn.GetHealthPercentInt // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29775e0
	struct ASolarCharacter* GetDriverCharacter(); // Function Solarland.SolarVehiclePawn.GetDriverCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29775b0
	float GetDangerHealthPrecent(); // Function Solarland.SolarVehiclePawn.GetDangerHealthPrecent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2977580
	float GetCurrentHealth(); // Function Solarland.SolarVehiclePawn.GetCurrentHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2977550
	void DeleteStencilMesh(); // Function Solarland.SolarVehiclePawn.DeleteStencilMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x2977530
	void ClientVehicleExplosion(); // Function Solarland.SolarVehiclePawn.ClientVehicleExplosion // (Final|Native|Public|BlueprintCallable) // @ game+0x2977510
	void ClientVehicleBroken(); // Function Solarland.SolarVehiclePawn.ClientVehicleBroken // (Native|Public|BlueprintCallable) // @ game+0x1ae6030
	void ClientSendsTransformToServerWithMovementBaseAfterCorrection(float DriverLocalTime, float ServerTimeStamp, struct TArray<char> Value, struct ASolarVehiclePawn* InMovementBase); // Function Solarland.SolarVehiclePawn.ClientSendsTransformToServerWithMovementBaseAfterCorrection // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x29773a0
	void ClientSendsTransformToServerWithMovementBase(float DriverLocalTime, struct TArray<char> Value, struct ASolarVehiclePawn* InMovementBase); // Function Solarland.SolarVehiclePawn.ClientSendsTransformToServerWithMovementBase // (Net|Native|Event|Public|NetServer) // @ game+0x2977270
	void ClientSendsTransformToServerAfterCorrection(float DriverLocalTime, float ServerTimeStamp, struct TArray<char> Value); // Function Solarland.SolarVehiclePawn.ClientSendsTransformToServerAfterCorrection // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2977140
	void ClientSendsTransformToServer(float DriverLocalTime, struct TArray<char> Value); // Function Solarland.SolarVehiclePawn.ClientSendsTransformToServer // (Net|Native|Event|Public|NetServer) // @ game+0x2977050
	bool CheckUpdateVisual(); // Function Solarland.SolarVehiclePawn.CheckUpdateVisual // (Final|Native|Public|BlueprintCallable) // @ game+0x2977020
	bool CheckOpenParticleOptimization(int32_t Bias); // Function Solarland.SolarVehiclePawn.CheckOpenParticleOptimization // (Final|Native|Public|BlueprintCallable) // @ game+0x2976f80
	bool CanActivateAbility(char SeatIndex, char AbilityIndex); // Function Solarland.SolarVehiclePawn.CanActivateAbility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2976eb0
	char AddSeatSlot(struct FVehicleSeatSlot& SeatSlot); // Function Solarland.SolarVehiclePawn.AddSeatSlot // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2976da0
};

// Class Solarland.SolarHoverVehicle
// Size: 0x13e0 (Inherited: 0x13c0)
struct ASolarHoverVehicle : ASolarVehiclePawn {
	struct USolarHoverVehicleMovement* VehicleMovement; // 0x13c0(0x08)
	char pad_13C8[0x18]; // 0x13c8(0x18)

	void OnVehicleRootHitForAttachPlatform(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarHoverVehicle.OnVehicleRootHitForAttachPlatform // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2805e80
	void OnPlatformActorEndplay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarHoverVehicle.OnPlatformActorEndplay // (Final|Native|Protected) // @ game+0x2805bd0
};

// Class Solarland.SolarAirPlaneVehicle
// Size: 0x14e0 (Inherited: 0x13e0)
struct ASolarAirPlaneVehicle : ASolarHoverVehicle {
	struct UStaticMeshComponent* WingCollisionComponent; // 0x13e0(0x08)
	struct UAirPlaneVehicleDataAsset* AirPlaneData; // 0x13e8(0x08)
	float MaxTakingOffTime; // 0x13f0(0x04)
	float TakingOffHeight; // 0x13f4(0x04)
	float TakingOffGravity; // 0x13f8(0x04)
	float CruisingGravity; // 0x13fc(0x04)
	float CrusingPitchOffSetBasedOnCamera; // 0x1400(0x04)
	char pad_1404[0x4]; // 0x1404(0x04)
	struct UGameplayEffect* CruisingEffect; // 0x1408(0x08)
	struct UVehicleCameraDataAsset* CruisingCameraData; // 0x1410(0x08)
	float StartRollingServerWorldTime; // 0x1418(0x04)
	char RollingCount; // 0x141c(0x01)
	char pad_141D[0x83]; // 0x141d(0x83)
	struct TArray<struct UParticleSystemComponent*> ThrusterParticleComponents; // 0x14a0(0x10)
	struct TArray<struct UParticleSystemComponent*> WingParticleComponents; // 0x14b0(0x10)
	struct TArray<struct UParticleSystemComponent*> BulletParticleComponents; // 0x14c0(0x10)
	struct UMaterialInstanceDynamic* AmmoMatInstanceDynamic; // 0x14d0(0x08)
	char pad_14D8[0x8]; // 0x14d8(0x08)

	void NetMulticastPlayAnim(enum class EAnimBlendDirection RollDirection); // Function Solarland.SolarAirPlaneVehicle.NetMulticastPlayAnim // (Net|Native|Event|NetMulticast|Public) // @ game+0x273f660
	void ClientResetCruising(struct ASolarCharacter* InDriver); // Function Solarland.SolarAirPlaneVehicle.ClientResetCruising // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x273ebf0
};

// Class Solarland.SolarVehicleAnimInstance
// Size: 0x340 (Inherited: 0x270)
struct USolarVehicleAnimInstance : UAnimInstance {
	struct FRotator VehicleRudderRotator; // 0x270(0x0c)
	float VehicleRotationValue; // 0x27c(0x04)
	float VehicleRotationPercent; // 0x280(0x04)
	float VehicleCameraYaw; // 0x284(0x04)
	float VehicleCameraPitch; // 0x288(0x04)
	bool bWithDriver; // 0x28c(0x01)
	bool bAbilityActivated; // 0x28d(0x01)
	char pad_28E[0x2]; // 0x28e(0x02)
	float Speed; // 0x290(0x04)
	struct FVector Velocity; // 0x294(0x0c)
	float VelocityDegree; // 0x2a0(0x04)
	struct FVector2D PlayerInputVector; // 0x2a4(0x08)
	bool bVehicleInAir; // 0x2ac(0x01)
	bool bEquipWeapon; // 0x2ad(0x01)
	enum class EVehicleAnimationState AnimState; // 0x2ae(0x01)
	char pad_2AF[0x1]; // 0x2af(0x01)
	struct UAnimMontage* VehicleWeaponFireMontage; // 0x2b0(0x08)
	struct UAnimMontage* VehicleWeaponRechamberMontage; // 0x2b8(0x08)
	struct UAnimMontage* VehicleWeaponChargingMontage; // 0x2c0(0x08)
	struct FRotator VehicleWeaponPitchRot; // 0x2c8(0x0c)
	struct FRotator VehicleWeaponYawRot; // 0x2d4(0x0c)
	struct FVector LeftBoneIKOffset; // 0x2e0(0x0c)
	struct FVector RightBoneIKOffset; // 0x2ec(0x0c)
	bool bUpdateVisual; // 0x2f8(0x01)
	char pad_2F9[0x3]; // 0x2f9(0x03)
	struct FVector ExternalForceScale; // 0x2fc(0x0c)
	struct FName MoveReferenceBone; // 0x308(0x08)
	float AlphaBlendInSpeed; // 0x310(0x04)
	float AlphaBlendOutSpeed; // 0x314(0x04)
	struct FVector AnimExternalForce; // 0x318(0x0c)
	float AnimDynamicAlpha; // 0x324(0x04)
	char pad_328[0x18]; // 0x328(0x18)

	void OnFireMontageStart(float InMontageLength); // Function Solarland.SolarVehicleAnimInstance.OnFireMontageStart // (Native|Event|Public|BlueprintEvent) // @ game+0x1ad6bb0
	void OnFireMontageEnd(struct UAnimMontage* InMontage, bool bInterrupted); // Function Solarland.SolarVehicleAnimInstance.OnFireMontageEnd // (Native|Event|Public|BlueprintEvent) // @ game+0x2974a00
	struct ASolarVehiclePawn* GetVehiclePawnOwner(); // Function Solarland.SolarVehicleAnimInstance.GetVehiclePawnOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29747b0
	float GetPlayTimeAgainstFootLocationCurve(struct UAnimSequence* InAnimSequence, struct FName& InCurveName, float InFootLocationValue); // Function Solarland.SolarVehicleAnimInstance.GetPlayTimeAgainstFootLocationCurve // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2974690
};

// Class Solarland.SolarHoverVehicleAnimInstance
// Size: 0x380 (Inherited: 0x340)
struct USolarHoverVehicleAnimInstance : USolarVehicleAnimInstance {
	float VehicleLeftOrRightPercent; // 0x340(0x04)
	float VehicleSpoilerRotateFactor; // 0x344(0x04)
	struct FVector FLThrusterBoneScale; // 0x348(0x0c)
	struct FVector FRThrusterBoneScale; // 0x354(0x0c)
	struct FVector BLThrusterBoneScale; // 0x360(0x0c)
	struct FVector BRThrusterBoneScale; // 0x36c(0x0c)
	char pad_378[0x8]; // 0x378(0x08)
};

// Class Solarland.SolarAirPlanVehicleAnimInstance
// Size: 0x400 (Inherited: 0x380)
struct USolarAirPlanVehicleAnimInstance : USolarHoverVehicleAnimInstance {
	struct UAnimMontage* RollForwardAnim; // 0x378(0x08)
	struct UAnimMontage* RollBackAnim; // 0x380(0x08)
	struct UAnimMontage* RollLeftAnim; // 0x388(0x08)
	struct UAnimMontage* RollRightAnim; // 0x390(0x08)
	struct UAnimSequence* RollBackLeftRootMotion; // 0x398(0x08)
	struct UAnimSequence* RollBackRightRootMotion; // 0x3a0(0x08)
	struct UAnimSequence* TargetRollBackRootMotion; // 0x3a8(0x08)
	struct TArray<struct FVector> BulletScaleArray; // 0x3b0(0x10)
	bool bCruisingLoopState; // 0x3c0(0x01)
	char pad_3C9[0x37]; // 0x3c9(0x37)

	void AnimNotify_LeftCruising(); // Function Solarland.SolarAirPlanVehicleAnimInstance.AnimNotify_LeftCruising // (Final|Native|Public) // @ game+0x273ebd0
	void AnimNotify_EnterCruising(); // Function Solarland.SolarAirPlanVehicleAnimInstance.AnimNotify_EnterCruising // (Final|Native|Public) // @ game+0x273ebb0
};

// Class Solarland.SolarAirship
// Size: 0x590 (Inherited: 0x228)
struct ASolarAirship : AActor {
	bool bShowDebug; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	struct UAkComponent* AkAudioComponent; // 0x230(0x08)
	struct USkeletalMeshComponentBudgeted* SKMesh; // 0x238(0x08)
	struct FAirdropParas AirdropParas; // 0x240(0x20)
	float SpawnAirdropDelay; // 0x260(0x04)
	float DestroyDelay; // 0x264(0x04)
	int32_t AppearNoticeID; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct UCurveFloat* AppearMatCurve; // 0x270(0x08)
	struct UCurveFloat* DisappearMatCurve; // 0x278(0x08)
	struct FSoftObjectPath FlyEffectPath; // 0x280(0x18)
	char pad_298[0x8]; // 0x298(0x08)
	struct FTransform FlyEffectTransform; // 0x2a0(0x30)
	bool bShowScreenEffectInLowDevice; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)
	struct FSoftObjectPath AirScreenEffectBeforeAirdropPath; // 0x2d8(0x18)
	struct FSoftObjectPath AirScreenEffectAfterAirdropPath; // 0x2f0(0x18)
	char pad_308[0x8]; // 0x308(0x08)
	struct FTransform AirScreenEffectTransform_2; // 0x310(0x30)
	struct FTransform AirScreenEffectTransform_3; // 0x340(0x30)
	struct TArray<struct FPlaygroundEffect> PlaygroundEffects; // 0x370(0x10)
	struct FString AppearVoice; // 0x380(0x10)
	struct FString FlyLPSoundStartBeforeAirdrop; // 0x390(0x10)
	struct FString FlyLPSoundStopBeforeAirdrop; // 0x3a0(0x10)
	struct FString FlyLPSoundStartAfterAirdrop; // 0x3b0(0x10)
	struct FString FlyLPSoundStopAfterAirdrop; // 0x3c0(0x10)
	float VoicePlayInterval; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct TArray<struct FString> VoiceListBeforeAirdrop; // 0x3d8(0x10)
	struct TArray<struct FString> VoiceListAfterAirdrop; // 0x3e8(0x10)
	struct FString HatchOpenSound; // 0x3f8(0x10)
	struct FSoftObjectPath FogMeshPath; // 0x408(0x18)
	struct FSoftObjectPath FogMaterialPath; // 0x420(0x18)
	struct TArray<struct FTransform> FogMeshTransforms; // 0x438(0x10)
	bool bAirdropDelivered; // 0x448(0x01)
	bool bDisappear; // 0x449(0x01)
	char pad_44A[0x16]; // 0x44a(0x16)
	struct UParticleSystemComponent* FlyEffectHandle; // 0x460(0x08)
	struct UParticleSystemComponent* AirScreenEffectBeforeAirdropHandle_2; // 0x468(0x08)
	struct UParticleSystemComponent* AirScreenEffectBeforeAirdropHandle_3; // 0x470(0x08)
	struct UParticleSystemComponent* AirScreenEffectAfterAirdropHandle_2; // 0x478(0x08)
	struct UParticleSystemComponent* AirScreenEffectAfterAirdropHandle_3; // 0x480(0x08)
	char pad_488[0x10]; // 0x488(0x10)
	struct TMap<int32_t, struct FAirshipConfig> AirshipConfigMap; // 0x498(0x50)
	struct FRotator RotationOffset; // 0x4e8(0x0c)
	float HatchOffset; // 0x4f4(0x04)
	float AirdropStartZOffset; // 0x4f8(0x04)
	float PointInSegmentTolerance; // 0x4fc(0x04)
	struct UAnimMontage* HatchOpenAnim; // 0x500(0x08)
	char pad_508[0x8]; // 0x508(0x08)
	struct FRouteInfo RouteInfo; // 0x510(0x34)
	char pad_544[0xc]; // 0x544(0x0c)
	struct FMiniMapAirlineData AirlineData; // 0x550(0x30)
	char pad_580[0x10]; // 0x580(0x10)

	void OnRep_RouteInfo(); // Function Solarland.SolarAirship.OnRep_RouteInfo // (Final|Native|Private) // @ game+0x273f720
	void OnRep_Disappear(); // Function Solarland.SolarAirship.OnRep_Disappear // (Final|Native|Private) // @ game+0x273f700
	void OnRep_AirdropDelivered(); // Function Solarland.SolarAirship.OnRep_AirdropDelivered // (Final|Native|Private) // @ game+0x273f6e0
	struct FMiniMapAirlineData K2_GetAirlineData(); // Function Solarland.SolarAirship.K2_GetAirlineData // (Final|Native|Public|BlueprintCallable) // @ game+0x273f590
	void DestroySelf(); // Function Solarland.SolarAirship.DestroySelf // (Final|Native|Private) // @ game+0x273ec80
};

// Class Solarland.SolarAISense_QueryTeammate
// Size: 0x90 (Inherited: 0x80)
struct USolarAISense_QueryTeammate : UAISense {
	struct TArray<struct FAIQueryTeammateEvent> RegisteredEvents; // 0x80(0x10)
};

// Class Solarland.SolarAISenseConfig_QueryTeammate
// Size: 0x50 (Inherited: 0x48)
struct USolarAISenseConfig_QueryTeammate : UAISenseConfig {
	struct USolarAISense_QueryTeammate* Implementation; // 0x48(0x08)
};

// Class Solarland.SolarAISense_Radar
// Size: 0xd8 (Inherited: 0x80)
struct USolarAISense_Radar : UAISense {
	char pad_80[0x58]; // 0x80(0x58)
};

// Class Solarland.SolarAISenseConfig_Radar
// Size: 0x60 (Inherited: 0x48)
struct USolarAISenseConfig_Radar : UAISenseConfig {
	struct USolarAISense_Radar* Implementation; // 0x48(0x08)
	struct TArray<struct FRadarDetectConfig> RadarConfigs; // 0x50(0x10)
};

// Class Solarland.SolarAISettingRuntime
// Size: 0xf8 (Inherited: 0x38)
struct USolarAISettingRuntime : UDeveloperSettings {
	struct FGameplayTag BattleSubTreeTag; // 0x38(0x08)
	struct FGameplayTag LootSubTreeTag; // 0x40(0x08)
	struct TMap<enum class ESolarTablesEnum_CharacterType, struct FGameplayTag> HeroTypeTags; // 0x48(0x50)
	struct TSoftObjectPtr<UDataTable> GlobalGameTeamConfigs; // 0x98(0x28)
	struct TArray<struct TSoftObjectPtr<USolarBotAIConfig>> BotPresets; // 0xc0(0x10)
	struct TSoftObjectPtr<UDataTable> GlobalWarmSystemSetting; // 0xd0(0x28)
};

// Class Solarland.SolarAITargetComponent
// Size: 0xe0 (Inherited: 0xb0)
struct USolarAITargetComponent : UActorComponent {
	int32_t AIActorCapacity; // 0xb0(0x04)
	char pad_B4[0x2c]; // 0xb4(0x2c)
};

// Class Solarland.SolarAkAudioSettings
// Size: 0xd8 (Inherited: 0x38)
struct USolarAkAudioSettings : UDeveloperSettings {
	bool EnableBankLoadStrategy; // 0x38(0x01)
	bool EnableDebugMode; // 0x39(0x01)
	char pad_3A[0x2]; // 0x3a(0x02)
	float DelayReleaseBankTime; // 0x3c(0x04)
	struct TSoftObjectPtr<UDataTable> SoundBankEventTable; // 0x40(0x28)
	struct TArray<struct FName> InGameSceneName; // 0x68(0x10)
	struct TArray<struct FName> InLobbySceneName; // 0x78(0x10)
	struct TArray<struct FName> TutorialSceneName; // 0x88(0x10)
	struct TArray<struct FName> HomeSceneName; // 0x98(0x10)
	struct TArray<struct FName> WaitingLandSceneName; // 0xa8(0x10)
	struct TArray<struct FSolarAudioDetail> BankDetailsArray; // 0xb8(0x10)
	char pad_C8[0x10]; // 0xc8(0x10)
};

// Class Solarland.SolarAkGameObject
// Size: 0xb8 (Inherited: 0x28)
struct USolarAkGameObject : UObject {
	char pad_28[0x88]; // 0x28(0x88)
	bool bEnableTick; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)

	void Wakeup(); // Function Solarland.SolarAkGameObject.Wakeup // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2740ac0
	void UnloadBank(struct FString InBankName); // Function Solarland.SolarAkGameObject.UnloadBank // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x273f5d0
	void UnLoadAllBanks(); // Function Solarland.SolarAkGameObject.UnLoadAllBanks // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9b5550
	void Suspend(bool in_bRenderAnyway); // Function Solarland.SolarAkGameObject.Suspend // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2740a40
	int32_t StopSoundByEvent(struct FString in_EventName); // Function Solarland.SolarAkGameObject.StopSoundByEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x2740990
	int32_t StaticStopSoundByEvent(struct FString in_EventName); // Function Solarland.SolarAkGameObject.StaticStopSoundByEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27408f0
	void StaticSetRTPCValue(struct FString RTPC, float Value, int32_t InterpolationTimeMs); // Function Solarland.SolarAkGameObject.StaticSetRTPCValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27407d0
	int32_t StaticPostAkEventByNameAndWaitForEnd(struct UObject* WorldContextObject, struct FString in_EventName, struct FLatentActionInfo LatentInfo); // Function Solarland.SolarAkGameObject.StaticPostAkEventByNameAndWaitForEnd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2740670
	int32_t StaticPostAkEventByName(struct FString in_EventName); // Function Solarland.SolarAkGameObject.StaticPostAkEventByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27405d0
	int32_t StaticPlaySoundByEvent(struct FString in_EventName); // Function Solarland.SolarAkGameObject.StaticPlaySoundByEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2740530
	int32_t StaticPlaySoundAtLocationByName(struct FString AkName, struct FVector Location, struct FRotator Orientation, struct UObject* WorldContextObject); // Function Solarland.SolarAkGameObject.StaticPlaySoundAtLocationByName // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2740350
	int32_t StaticPlaySoundAtLocation(struct UAkAudioEvent* AkEvent, struct FVector Location, struct FRotator Orientation, struct UObject* WorldContextObject); // Function Solarland.SolarAkGameObject.StaticPlaySoundAtLocation // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x27401d0
	int32_t StaticComponentPostAkEventByName(struct UAkComponent* AkComponent, struct FString in_EventName); // Function Solarland.SolarAkGameObject.StaticComponentPostAkEventByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27400f0
	void SolarLoadAllBanks(); // Function Solarland.SolarAkGameObject.SolarLoadAllBanks // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void SetSwitch(struct FString SwitchGroup, struct FString SwitchState); // Function Solarland.SolarAkGameObject.SetSwitch // (Final|Native|Public|BlueprintCallable) // @ game+0x273fe20
	void SetRTPCValue(struct FString RTPC, float Value, int32_t InterpolationTimeMs, float UpdateThreshold); // Function Solarland.SolarAkGameObject.SetRTPCValue // (Final|Native|Public|BlueprintCallable) // @ game+0x273fcb0
	void SetMasterRTPCValue(float Value, int32_t InterpolationTimeMs); // Function Solarland.SolarAkGameObject.SetMasterRTPCValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x273fbf0
	void SetMasterRTPCMute(bool Mute); // Function Solarland.SolarAkGameObject.SetMasterRTPCMute // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x273fb70
	void SetGlobalRTPCValue(struct FString RTPC, float Value, int32_t InterpolationTimeMs, float UpdateThreshold); // Function Solarland.SolarAkGameObject.SetGlobalRTPCValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x273fa10
	void ReceiveTick(float DeltaTime); // Function Solarland.SolarAkGameObject.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarAkGameObject.ReceiveEndPlay // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveBeginPlay(); // Function Solarland.SolarAkGameObject.ReceiveBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	int32_t PostAkEventByNameAndWaitForEnd(struct FString in_EventName, struct FLatentActionInfo LatentInfo); // Function Solarland.SolarAkGameObject.PostAkEventByNameAndWaitForEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x273f8f0
	int32_t PostAkEventByName(struct FString InEventName1, struct FString InEventName2); // Function Solarland.SolarAkGameObject.PostAkEventByName // (Final|Native|Public|BlueprintCallable) // @ game+0x273f7f0
	int32_t PlaySoundByEvent(struct FString in_EventName); // Function Solarland.SolarAkGameObject.PlaySoundByEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x273f740
	void LoadBank(struct FString InBankName); // Function Solarland.SolarAkGameObject.LoadBank // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x273f5d0
	void LoadAllBanks(); // Function Solarland.SolarAkGameObject.LoadAllBanks // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9b5550
};

// Class Solarland.SolarAkSoundManager
// Size: 0x2f0 (Inherited: 0x30)
struct USolarAkSoundManager : USolarGameManager {
	char pad_30[0x2c0]; // 0x30(0x2c0)

	void UnloadCharacterOwnedBanks(int32_t CharacterId, enum class ESolarAudioDetailLoadMode Mode); // Function Solarland.SolarAkSoundManager.UnloadCharacterOwnedBanks // (Final|Native|Public|BlueprintCallable) // @ game+0x2744210
	void UnloadBankIgnoreStrategy(struct FName& BankName); // Function Solarland.SolarAkSoundManager.UnloadBankIgnoreStrategy // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2744180
	void UnloadAllCharacterOwnedBanksWithResList(enum class ESolarAudioDetailLoadMode Mode, struct TSet<enum class ESolarAudioDetailCatalog>& ResCategoryList); // Function Solarland.SolarAkSoundManager.UnloadAllCharacterOwnedBanksWithResList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2743fc0
	void UnloadAllCharacterOwnedBanks(enum class ESolarAudioDetailLoadMode Mode); // Function Solarland.SolarAkSoundManager.UnloadAllCharacterOwnedBanks // (Final|Native|Public|BlueprintCallable) // @ game+0x2743f40
	void StopMusicByName(struct FString MusicEventName); // Function Solarland.SolarAkSoundManager.StopMusicByName // (Final|Native|Public|BlueprintCallable) // @ game+0x2743ea0
	void SetVoiceLanguage(); // Function Solarland.SolarAkSoundManager.SetVoiceLanguage // (Final|Native|Private) // @ game+0x2743e80
	void ReloadVoiceBanks(); // Function Solarland.SolarAkSoundManager.ReloadVoiceBanks // (Final|Native|Public|BlueprintCallable) // @ game+0x2743d80
	void PlayMusicByName(struct FString MusicEventName); // Function Solarland.SolarAkSoundManager.PlayMusicByName // (Final|Native|Public|BlueprintCallable) // @ game+0x2743ce0
	void OnBankLoadedForEventAtLocationCallbackFunc(enum class EAkResult in_loadResult, uint32_t in_bankID); // Function Solarland.SolarAkSoundManager.OnBankLoadedForEventAtLocationCallbackFunc // (Final|Native|Private) // @ game+0x2743b40
	void OnAkBankUnloadedCallbackFunc(enum class EAkResult in_loadResult, uint32_t in_bankID); // Function Solarland.SolarAkSoundManager.OnAkBankUnloadedCallbackFunc // (Final|Native|Private) // @ game+0x2743a70
	void OnAkBankLoadedCallbackFunc(enum class EAkResult in_loadResult, uint32_t in_bankID); // Function Solarland.SolarAkSoundManager.OnAkBankLoadedCallbackFunc // (Final|Native|Private) // @ game+0x27439a0
	void LoadCharacterOwnedBanks(int32_t CharacterId, enum class ESolarAudioDetailLoadMode Mode); // Function Solarland.SolarAkSoundManager.LoadCharacterOwnedBanks // (Final|Native|Public|BlueprintCallable) // @ game+0x27438a0
	void LoadBankIgnoreStrategy(struct FName& BankName); // Function Solarland.SolarAkSoundManager.LoadBankIgnoreStrategy // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2743810
	void LoadAllCharacterOwnedBanksWithResList(enum class ESolarAudioDetailLoadMode Mode, struct TSet<enum class ESolarAudioDetailCatalog>& ResCategoryList); // Function Solarland.SolarAkSoundManager.LoadAllCharacterOwnedBanksWithResList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2743650
	void LoadAllCharacterOwnedBanks(enum class ESolarAudioDetailLoadMode Mode); // Function Solarland.SolarAkSoundManager.LoadAllCharacterOwnedBanks // (Final|Native|Public|BlueprintCallable) // @ game+0x27435d0
};

// Class Solarland.SolarAngleViewWidget
// Size: 0x450 (Inherited: 0x138)
struct USolarAngleViewWidget : UWidget {
	char pad_138[0x8]; // 0x138(0x08)
	struct FSlateBrush JoyStickThumb; // 0x140(0xe0)
	struct FSlateBrush JoyStickThumbPress; // 0x220(0xe0)
	struct FSlateBrush JoyStickBG; // 0x300(0xe0)
	struct FVector2D VisualSize; // 0x3e0(0x08)
	struct FVector2D ThumbSize; // 0x3e8(0x08)
	struct FVector2D InputScale; // 0x3f0(0x08)
	float ActiveOpacity; // 0x3f8(0x04)
	float InactiveOpacity; // 0x3fc(0x04)
	float TimeUntilDeactive; // 0x400(0x04)
	bool bPreventReCenter; // 0x404(0x01)
	char pad_405[0x13]; // 0x405(0x13)
	struct FMulticastInlineDelegate OnJoystickPressed; // 0x418(0x10)
	struct FMulticastInlineDelegate OnJoystickRelease; // 0x428(0x10)
	struct FMulticastInlineDelegate OnInputYawAndPitch; // 0x438(0x10)
	char pad_448[0x8]; // 0x448(0x08)
};

// Class Solarland.SolarAnimInstance
// Size: 0x7c0 (Inherited: 0x270)
struct USolarAnimInstance : UAnimInstance {
	struct ASolarCharacter* SolarCharacterOwner; // 0x268(0x08)
	enum class ENetRole OwnerRole; // 0x270(0x01)
	char pad_279[0x3]; // 0x279(0x03)
	struct FName LeftHandIKSocketName; // 0x27c(0x08)
	struct FName RightHandWeaponSocketName; // 0x284(0x08)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct FTransform LeftHandIKSocket2BoneTrans; // 0x290(0x30)
	struct FVector LeftHandEffectorLocation; // 0x2c0(0x0c)
	struct FRotator LeftHandEffectorRotation; // 0x2cc(0x0c)
	char pad_2D8[0x24]; // 0x2d8(0x24)
	struct FVector CurrentLeftHandJointLocation; // 0x2fc(0x0c)
	struct FVector RightHandEffectorLocation; // 0x308(0x0c)
	struct FVector RightHandJointLocation; // 0x314(0x0c)
	float LeftIKHandWeight; // 0x320(0x04)
	float CurrentReloadTimeRate; // 0x324(0x04)
	float CurrentSwitchWeaponTimeRate; // 0x328(0x04)
	float CurrentBoltTimeRate; // 0x32c(0x04)
	bool IsJog; // 0x330(0x01)
	bool bInWater; // 0x331(0x01)
	char pad_332[0x2]; // 0x332(0x02)
	float ViewPitch; // 0x334(0x04)
	float ViewYaw; // 0x338(0x04)
	float SimulatedProxyViewSmoothSpeed; // 0x33c(0x04)
	char pad_340[0x8]; // 0x340(0x08)
	struct UBlendSpace* FireTPPBlendSpace; // 0x348(0x08)
	float FireTPPBlendSpaceX; // 0x350(0x04)
	float FIreTPPBlendSpaceY; // 0x354(0x04)
	float MinSwimSpeed; // 0x358(0x04)
	float Direction; // 0x35c(0x04)
	float Speed; // 0x360(0x04)
	float InputDirection; // 0x364(0x04)
	enum class EIdleTurnType IdleTurnType; // 0x368(0x01)
	char pad_369[0x3]; // 0x369(0x03)
	float TurnExplicitTime; // 0x36c(0x04)
	float DamageDirection; // 0x370(0x04)
	float DamageReactionAlpha; // 0x374(0x04)
	float DamageNomalizeTime; // 0x378(0x04)
	char pad_37C[0x108]; // 0x37c(0x108)
	struct FLeftHandGripConfig CurrentGripData; // 0x484(0x84)
	char pad_508[0x84]; // 0x508(0x84)
	float Fire2PlayRateStand; // 0x58c(0x04)
	float Fire2PlayRateCrouch; // 0x590(0x04)
	bool bHoldingShield; // 0x594(0x01)
	bool ShieldRechargeIK; // 0x595(0x01)
	char pad_596[0x4e]; // 0x596(0x4e)
	float FallingInputScale; // 0x5e4(0x04)
	struct FVector IKOffsetLeftFootVector; // 0x5e8(0x0c)
	struct FVector IKOffsetRightFootVector; // 0x5f4(0x0c)
	struct FVector JointTargetLeftFootVector; // 0x600(0x0c)
	struct FVector JointTargetRightFootVector; // 0x60c(0x0c)
	struct FRotator LeftFootRotation; // 0x618(0x0c)
	struct FRotator RightFootRotation; // 0x624(0x0c)
	struct FVector HipOffsetVector; // 0x630(0x0c)
	float FootIKTraceDistanceRate; // 0x63c(0x04)
	float CrouchFootIKTraceDistanceRate; // 0x640(0x04)
	float FootIKInterpSpeed; // 0x644(0x04)
	struct FName LeftFootSocket; // 0x648(0x08)
	struct FName RightFootSocket; // 0x650(0x08)
	bool AnimParam_LeftOrRight; // 0x658(0x01)
	char pad_659[0x3]; // 0x659(0x03)
	float LandingBlendWeight; // 0x65c(0x04)
	float DefaultLeftHandWeaponAttachingBlendTime; // 0x660(0x04)
	float DefaultLeftHandWeaponDetachingBlendTime; // 0x664(0x04)
	float CurrentLeftHandWeaponAttachingBlendTime; // 0x668(0x04)
	float CurrentLeftHandWeaponDetachingBlendTime; // 0x66c(0x04)
	char pad_670[0x28]; // 0x670(0x28)
	float FootIKEnableDelayTime; // 0x698(0x04)
	bool bActiveFootIK; // 0x69c(0x01)
	char pad_69D[0x33]; // 0x69d(0x33)
	float FlailRate; // 0x6d0(0x04)
	float ConfigPitchToZeroTime; // 0x6d4(0x04)
	struct FJetPackPoseSpeedRange JetPack2PoseSpeedRangeX; // 0x6d8(0x08)
	struct FJetPackPoseSpeedRange JetPack2PoseSpeedRangeY; // 0x6e0(0x08)
	struct FJetPackPoseSpeedRange JetPack2PoseSpeedRangeZ; // 0x6e8(0x08)
	float JetPack2PoseRestoreSmoothSpeed; // 0x6f0(0x04)
	struct FJetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeX; // 0x6f4(0x08)
	struct FJetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeY; // 0x6fc(0x08)
	char pad_704[0xe]; // 0x704(0x0e)
	bool bNewJet; // 0x712(0x01)
	bool bIsJetFlying; // 0x713(0x01)
	char bEnableDamageReact : 1; // 0x714(0x01)
	char bEnableWeaponAdditiveA : 1; // 0x714(0x01)
	char bEnableHandIK : 1; // 0x714(0x01)
	char bEnableFootIK : 1; // 0x714(0x01)
	char bEnableWeaponAdditiveB : 1; // 0x714(0x01)
	char bEnableWeaponJitter : 1; // 0x714(0x01)
	char pad_714_6 : 2; // 0x714(0x01)
	char MaxLODDamageReact; // 0x715(0x01)
	char MaxLODWeaponAdditiveA; // 0x716(0x01)
	char MaxLODHandIK; // 0x717(0x01)
	char MaxLODFootIK; // 0x718(0x01)
	char MaxLODWeaponAdditiveB; // 0x719(0x01)
	char MaxLODWeaponJitter; // 0x71a(0x01)
	char bIsDead : 1; // 0x71b(0x01)
	char pad_71B_1 : 7; // 0x71b(0x01)
	float DeathAnimStartPosition; // 0x71c(0x04)
	struct TMap<enum class ESpecAnimInstType, struct UAnimInstance*> SpecAnimBPs; // 0x720(0x50)
	char bIsWalking : 1; // 0x770(0x01)
	char bIsCrouching : 1; // 0x770(0x01)
	char bIsFalling : 1; // 0x770(0x01)
	char bIsFlying : 1; // 0x770(0x01)
	char bIsSwimming : 1; // 0x770(0x01)
	char bIsSprinting : 1; // 0x770(0x01)
	char bIsInhibitSprinting : 1; // 0x770(0x01)
	char bIsSixDirRunForward : 1; // 0x770(0x01)
	char bIsVaulting : 1; // 0x771(0x01)
	char bShouldUpperBodyAdditiveBlend : 1; // 0x771(0x01)
	char pad_771_2 : 6; // 0x771(0x01)
	char pad_772[0x2]; // 0x772(0x02)
	enum class EWalkMode CurrentWalkMode; // 0x774(0x01)
	enum class EWalkMode LastWalkMode; // 0x775(0x01)
	enum class EAirMoveMode CurrentAirMoveMode; // 0x776(0x01)
	enum class EAirMoveMode LastAirMoveMode; // 0x777(0x01)
	enum class ECruiseAnimState CurrentCruiseState; // 0x778(0x01)
	char pad_779[0x7]; // 0x779(0x07)
	struct UAnimSequence* CruiseStartSequence; // 0x780(0x08)
	struct UAnimSequence* CruiseLoopSequence; // 0x788(0x08)
	struct UAnimSequence* CruiseEndSequence; // 0x790(0x08)
	float MinSpeedForSkydiveFlyingInputBonus; // 0x798(0x04)
	float MaxSpeedForSkydiveFlyingInputBonus; // 0x79c(0x04)
	float InputYThresholdToCalcInputYByCamera; // 0x7a0(0x04)
	float MinDeltaYawFromCameraToGetMaxInputY; // 0x7a4(0x04)
	enum class ESkydiveStage CurrentSkydiveStage; // 0x7a8(0x01)
	char pad_7A9[0x3]; // 0x7a9(0x03)
	float MinWallRunSurfaceAngle; // 0x7ac(0x04)
	float MaxWallRunSurfaceAngle; // 0x7b0(0x04)
	char pad_7B4[0x4]; // 0x7b4(0x04)
	enum class EWeaponStatus WeaponStatus; // 0x7b8(0x01)
	char bIsBolting : 1; // 0x7b9(0x01)
	char bIsReloading : 1; // 0x7b9(0x01)
	char bIsLeftHandDetaching : 1; // 0x7b9(0x01)
	char pad_7B9_3 : 1; // 0x7b9(0x01)
	char bIsInVehicle : 1; // 0x7b9(0x01)
	char pad_7B9_5 : 3; // 0x7b9(0x01)
	enum class ESkillAnimType CurrentSkillAnimType; // 0x7ba(0x01)
	char pad_7BB[0x1]; // 0x7bb(0x01)
	float SkillDistanceBlendRatio; // 0x7bc(0x04)

	void OnMontagePlayEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Solarland.SolarAnimInstance.OnMontagePlayEnded // (Final|Native|Public) // @ game+0x2743c10
	bool NeedResolveWeaponJitter(); // Function Solarland.SolarAnimInstance.NeedResolveWeaponJitter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2743970
	bool JetPack2IsDashingCompletelyOver(); // Function Solarland.SolarAnimInstance.JetPack2IsDashingCompletelyOver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27435a0
	bool IsHoldingWeapon(); // Function Solarland.SolarAnimInstance.IsHoldingWeapon // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2743570
	bool IsAiming(); // Function Solarland.SolarAnimInstance.IsAiming // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2743540
	float GetWallRunSurfaceAngle(); // Function Solarland.SolarAnimInstance.GetWallRunSurfaceAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27434f0
	enum class EWallRunState GetWallRunState(); // Function Solarland.SolarAnimInstance.GetWallRunState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27434c0
	struct FVector2D GetSkydiveFlyingInput(); // Function Solarland.SolarAnimInstance.GetSkydiveFlyingInput // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2743480
	int32_t GetOwnerGroupID(); // Function Solarland.SolarAnimInstance.GetOwnerGroupID // (Final|Native|Protected|BlueprintCallable) // @ game+0x2743450
	struct FVector GetJetPackDashAnimationBlend(); // Function Solarland.SolarAnimInstance.GetJetPackDashAnimationBlend // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2743410
	struct FVector GetInputVector(); // Function Solarland.SolarAnimInstance.GetInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x27433d0
	struct FVector GetFallingInputVector(); // Function Solarland.SolarAnimInstance.GetFallingInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2743390
	float GenJumpDirection(float InInputDirection); // Function Solarland.SolarAnimInstance.GenJumpDirection // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x27432f0
	float GenBackwardDirection(float InInputDirection); // Function Solarland.SolarAnimInstance.GenBackwardDirection // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2743250
	bool CheckNewJetAndReset(); // Function Solarland.SolarAnimInstance.CheckNewJetAndReset // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2743220
};

// Class Solarland.SolarAnimNotify_Damage
// Size: 0x38 (Inherited: 0x38)
struct USolarAnimNotify_Damage : UAnimNotify {
};

// Class Solarland.SolarAnoHelper
// Size: 0x38 (Inherited: 0x28)
struct USolarAnoHelper : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	bool bOpenAnoSDK; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)

	void SendAntiDataToSsmOnDs(struct FString AntiDataLog, struct ASolarPlayerController* PC); // Function Solarland.SolarAnoHelper.SendAntiDataToSsmOnDs // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void SendAntiDataToSsmOnClientNative(struct FString ExtraParam, enum class EAnoAntiDataType AntiType); // Function Solarland.SolarAnoHelper.SendAntiDataToSsmOnClientNative // (Final|Native|Public|BlueprintCallable) // @ game+0x2743da0
	void SendAntiDataToSsmOnClient(struct FString Param, enum class EAnoAntiDataType AntiType); // Function Solarland.SolarAnoHelper.SendAntiDataToSsmOnClient // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void InitializeBind(); // Function Solarland.SolarAnoHelper.InitializeBind // (Final|Native|Public|BlueprintCallable) // @ game+0x2743520
	struct FString GetAntiLogOnClient(enum class EAnoAntiDataType Type); // Function Solarland.SolarAnoHelper.GetAntiLogOnClient // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void AnoUnRegisterCallBack(); // Function Solarland.SolarAnoHelper.AnoUnRegisterCallBack // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void AnoSentDataToSvr(struct FAnoSDKAntiData Data); // Function Solarland.SolarAnoHelper.AnoSentDataToSvr // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void AnoSentCoreTimeData(struct FAnoSDKAntiData AntiData); // Function Solarland.SolarAnoHelper.AnoSentCoreTimeData // (Final|Native|Public|BlueprintCallable) // @ game+0x2743130
	void AnoSDKSendData(struct FAnoSDKAntiData AntiData); // Function Solarland.SolarAnoHelper.AnoSDKSendData // (Final|Native|Public|BlueprintCallable) // @ game+0x2743040
	void AnoSDKResume(); // Function Solarland.SolarAnoHelper.AnoSDKResume // (Final|Native|Public|BlueprintCallable) // @ game+0x2743020
	void AnoSDKPause(); // Function Solarland.SolarAnoHelper.AnoSDKPause // (Final|Native|Public|BlueprintCallable) // @ game+0x2743020
	void AnoChangeAntiDataFlow(struct FAnoSDKAntiData Data); // Function Solarland.SolarAnoHelper.AnoChangeAntiDataFlow // (Event|Public|BlueprintEvent) // @ game+0xb66830
};

// Class Solarland.SolarMeerkatManager
// Size: 0xd8 (Inherited: 0xb0)
struct USolarMeerkatManager : UActorComponent {
	struct UMeerkatSubScheduleMB* MBCheckInstance; // 0xb0(0x08)
	struct UMeerkatSubScheduleHp* HpCheckInstance; // 0xb8(0x08)
	struct UMeerkatSubScheduleAE* AECheckInstance; // 0xc0(0x08)
	struct UMeerkatSubScheduleAR* ARCheckInstance; // 0xc8(0x08)
	struct UMeerkatSubScheduleCC* CCCheckInstance; // 0xd0(0x08)
};

// Class Solarland.SolarApplicationLifetimeManager
// Size: 0x70 (Inherited: 0x30)
struct USolarApplicationLifetimeManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	int64_t AppWillDeactivateTimestamp; // 0x38(0x08)
	int64_t AppHasReactivatedTimestamp; // 0x40(0x08)
	char pad_48[0x28]; // 0x48(0x28)

	void ReceiveOnWindowMinimized(bool bIsMinimized); // Function Solarland.SolarApplicationLifetimeManager.ReceiveOnWindowMinimized // (Event|Protected|BlueprintEvent) // @ game+0xb66830
	void ReceiveOnStandardScreenSizeChange(int32_t SizeX, int32_t SizeY); // Function Solarland.SolarApplicationLifetimeManager.ReceiveOnStandardScreenSizeChange // (Event|Protected|BlueprintEvent) // @ game+0xb66830
	void ReceiveOnAppWillDeactivate(int64_t InTimestamp); // Function Solarland.SolarApplicationLifetimeManager.ReceiveOnAppWillDeactivate // (Event|Protected|BlueprintEvent) // @ game+0xb66830
	void ReceiveOnAppHasReactivated(int64_t InTimestamp); // Function Solarland.SolarApplicationLifetimeManager.ReceiveOnAppHasReactivated // (Event|Protected|BlueprintEvent) // @ game+0xb66830
	void ReceiveOnAppActivationStateChanged(bool AppActivated); // Function Solarland.SolarApplicationLifetimeManager.ReceiveOnAppActivationStateChanged // (Event|Protected|BlueprintEvent) // @ game+0xb66830
};

// Class Solarland.SolarAssetManager
// Size: 0x580 (Inherited: 0x438)
struct USolarAssetManager : UAssetManager {
	char pad_438[0x18]; // 0x438(0x18)
	struct FMulticastInlineDelegate OnAssetManagerPreloadCompleted; // 0x450(0x10)
	struct USolarChunkAssignData* ChunkAssignDataCache; // 0x460(0x08)
	struct TMap<struct FString, struct UObject*> CachedObjMap; // 0x468(0x50)
	char pad_4B8[0xc8]; // 0x4b8(0xc8)

	void UnLoadPrimaryAssetByLabelPathForLua(struct FString PrimaryAssetPath); // Function Solarland.SolarAssetManager.UnLoadPrimaryAssetByLabelPathForLua // (Final|Native|Protected) // @ game+0x2748af0
	void PreloadGameNormalAssets(struct USolarGameInstanceBase* GameInstancePtr); // Function Solarland.SolarAssetManager.PreloadGameNormalAssets // (Final|Native|Public|BlueprintCallable) // @ game+0x2748700
	void OnBindingActorDestory(struct AActor* Actor); // Function Solarland.SolarAssetManager.OnBindingActorDestory // (Final|Native|Protected) // @ game+0x2748510
	float GetPreloadAssetsProgress(); // Function Solarland.SolarAssetManager.GetPreloadAssetsProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x2747f20
};

// Class Solarland.SolarAssetManagerSettings
// Size: 0x260 (Inherited: 0x38)
struct USolarAssetManagerSettings : UDeveloperSettings {
	struct TArray<struct FPrimaryAssetTypeInfo> PrimaryAssetTypesToScan; // 0x38(0x10)
	struct TArray<struct FDirectoryPath> DirectoriesToExclude; // 0x48(0x10)
	struct TArray<struct FPrimaryAssetRulesOverride> PrimaryAssetRules; // 0x58(0x10)
	struct TArray<struct FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules; // 0x68(0x10)
	struct TMap<struct TSoftObjectPtr<UWorld>, enum class ESolarPlayStage> WorldPlayStageConfig; // 0x78(0x50)
	struct TMap<struct FString, enum class ESolarPlayStage> FolderDefaultPlayStageConfig; // 0xc8(0x50)
	bool bOnlyCookProductionAssets; // 0x118(0x01)
	bool bShouldManagerDetermineTypeAndName; // 0x119(0x01)
	bool bShouldGuessTypeAndNameInEditor; // 0x11a(0x01)
	bool bShouldAcquireMissingChunksOnLoad; // 0x11b(0x01)
	char pad_11C[0x4]; // 0x11c(0x04)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetIdRedirects; // 0x120(0x10)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetTypeRedirects; // 0x130(0x10)
	struct TArray<struct FAssetManagerRedirect> AssetPathRedirects; // 0x140(0x10)
	struct TSet<struct FName> MetaDataTagsForAssetRegistry; // 0x150(0x50)
	struct FSoftObjectPath ChunkAssignConfigPath; // 0x1a0(0x18)
	struct TArray<struct FPreloadBundle> PreloadBundles; // 0x1b8(0x10)
	struct TArray<struct FSoftObjectPath> PreloadAssets; // 0x1c8(0x10)
	struct TArray<struct FSoftClassPath> PreloadClassAssets; // 0x1d8(0x10)
	struct FSoftObjectPath ItemActorDataTable; // 0x1e8(0x18)
	struct FSoftObjectPath BackpackTrailAssemblingDataTable; // 0x200(0x18)
	struct FSoftObjectPath ItemResourceDataTable; // 0x218(0x18)
	struct FSoftObjectPath BuffEffectDataTable; // 0x230(0x18)
	struct FSoftObjectPath ScreenEffectDataTable; // 0x248(0x18)
};

// Class Solarland.SolarAssistAimInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarAssistAimInterface : UInterface {
};

// Class Solarland.SolarAssistAimSimpleActor
// Size: 0x2a8 (Inherited: 0x238)
struct ASolarAssistAimSimpleActor : AStaticMeshActor {
	char pad_238[0x8]; // 0x238(0x08)
	bool bSupportAssistAim; // 0x240(0x01)
	char pad_241[0x3]; // 0x241(0x03)
	struct FVector CenterOffset; // 0x244(0x0c)
	struct FWeaponAssistAimTargetConfig AssistAimTargetConfig; // 0x250(0x48)
	char pad_298[0x10]; // 0x298(0x10)

	void SetCurrentVelocity(struct FVector Velocity); // Function Solarland.SolarAssistAimSimpleActor.SetCurrentVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2748a60
	struct FVector GetCenterLocation(); // Function Solarland.SolarAssistAimSimpleActor.GetCenterLocation // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x2747ee0
};

// Class Solarland.SolarAttributeSubComponent
// Size: 0x168 (Inherited: 0xb0)
struct USolarAttributeSubComponent : UActorComponent {
	struct TMap<int32_t, struct USolarAttributeSubData*> AttributeSubs; // 0xb0(0x50)
	struct TArray<struct FSolarAttributeSubReplicateData> AttributeSubRepData; // 0x100(0x10)
	struct TMap<int32_t, float> ClientAttributeSubValues; // 0x110(0x50)
	char pad_160[0x8]; // 0x160(0x08)

	void RemoveModifier(int32_t AttributeSubID, struct FName& Name); // Function Solarland.SolarAttributeSubComponent.RemoveModifier // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27487b0
	void OnRep_AttributeSubRepDatas(); // Function Solarland.SolarAttributeSubComponent.OnRep_AttributeSubRepDatas // (Final|Native|Public) // @ game+0x27486e0
	void OnAttributeSubChanged(); // Function Solarland.SolarAttributeSubComponent.OnAttributeSubChanged // (Final|Native|Public) // @ game+0x27484f0
	float GetValue(int32_t AttributeSubID); // Function Solarland.SolarAttributeSubComponent.GetValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2747f50
	struct USolarAttributeSubSystem* GetAttributeSubSystem(); // Function Solarland.SolarAttributeSubComponent.GetAttributeSubSystem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2747e80
	struct USolarAttributeSubComponent* GetAttributeSubComponentFromActor(struct AActor* InActor); // Function Solarland.SolarAttributeSubComponent.GetAttributeSubComponentFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2747df0
	int32_t AddModifier(int32_t AttributeSubID, enum class EGameplayModOp InOpType, float Magnitude, struct FName& Name); // Function Solarland.SolarAttributeSubComponent.AddModifier // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2747a50
};

// Class Solarland.SolarAttributeSubData
// Size: 0x68 (Inherited: 0x28)
struct USolarAttributeSubData : UObject {
	struct USolarAttributeSubModifierGroup* LocalModifier; // 0x28(0x08)
	struct USolarAttributeSubModifierGroup* GlobalModifier; // 0x30(0x08)
	char pad_38[0x18]; // 0x38(0x18)
	int32_t AttributeID; // 0x50(0x04)
	float CurrentValue; // 0x54(0x04)
	float MaxValue; // 0x58(0x04)
	float MinValue; // 0x5c(0x04)
	float BaseValue; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)

	void OnModifierChanged(); // Function Solarland.SolarAttributeSubData.OnModifierChanged // (Final|Native|Protected) // @ game+0x27486c0
};

// Class Solarland.SolarAttributeSubModifierGroup
// Size: 0x58 (Inherited: 0x28)
struct USolarAttributeSubModifierGroup : UObject {
	char pad_28[0x30]; // 0x28(0x30)
};

// Class Solarland.SolarAttributeSubSystem
// Size: 0xd8 (Inherited: 0x30)
struct USolarAttributeSubSystem : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct TMap<int32_t, struct FSolarAttributeConfig> AttributeDefaultData; // 0x38(0x50)
	struct TMap<int32_t, struct USolarAttributeSubModifierGroup*> GlobalModifiers; // 0x88(0x50)

	float CharacterTakeDamage(struct USolarAttributeSubComponent* AttributeSubComp, float Damage); // Function Solarland.SolarAttributeSubSystem.CharacterTakeDamage // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	float CalcWeaponFireDamage(struct USolarAttributeSubComponent* AttributeSet, int32_t& ModeIdx); // Function Solarland.SolarAttributeSubSystem.CalcWeaponFireDamage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarAutoFireInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarAutoFireInterface : UInterface {

	bool CanTriggerWeaponAutoFire(struct ASolarCharacter* InSourceCharacter, struct FVector& InStartLocation, struct FHitResult& InAutoFireHitResult); // Function Solarland.SolarAutoFireInterface.CanTriggerWeaponAutoFire // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x2747bc0
};

// Class Solarland.SolarAutoNavLinkVolume
// Size: 0x2a0 (Inherited: 0x260)
struct ASolarAutoNavLinkVolume : AVolume {
	bool bOverrideGlobalSetting; // 0x260(0x01)
	char pad_261[0x3]; // 0x261(0x03)
	struct FAutoNavLinkSetting AutoNavLinkSetting; // 0x264(0x3c)
};

// Class Solarland.SolarAutoSaveDataTable
// Size: 0xc8 (Inherited: 0xc8)
struct USolarAutoSaveDataTable : UDataTable {
};

// Class Solarland.SolarBackpackRootComponent
// Size: 0x320 (Inherited: 0x320)
struct USolarBackpackRootComponent : USceneComponent {
};

// Class Solarland.SolarBackpackActor
// Size: 0x320 (Inherited: 0x228)
struct ASolarBackpackActor : AActor {
	struct USceneComponent* BackpackRoot; // 0x228(0x08)
	struct UBackpackVertAnimMeshComponent* BackpackMesh; // 0x230(0x08)
	struct ASolarCharacter* BackPackActorOwner; // 0x238(0x08)
	struct TArray<struct ASolarBackpackSFX*> BackpackSFX; // 0x240(0x10)
	struct ASolarBackpackSFX* BackpackOffgasSFX; // 0x250(0x08)
	char pad_258[0x13]; // 0x258(0x13)
	bool bEnableMeshEffect; // 0x26b(0x01)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct ASolarBackpackSFX* TrailClass; // 0x270(0x08)
	struct ASolarBackpackSFX* OffgasClass; // 0x278(0x08)
	struct TSet<struct UParticleSystemComponent*> ListenSet; // 0x280(0x50)
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct FString AssemblingId; // 0x2d8(0x10)
	struct FName KnapsackFlySoundName; // 0x2e8(0x08)
	struct FName StartKnapsackLandingSoundName; // 0x2f0(0x08)
	struct FName StopKnapsackLandingSoundName; // 0x2f8(0x08)
	struct FName StartWallRunSoundName; // 0x300(0x08)
	struct FName StopWallRunSoundName; // 0x308(0x08)
	struct FName PrimaryWeaponAttachSocketName; // 0x310(0x08)
	struct FName SecondaryWeaponAttachSocketName; // 0x318(0x08)

	void SetBackpackVisibilityByFlag(bool bNewVisibility, int32_t Flag); // Function Solarland.SolarBackpackActor.SetBackpackVisibilityByFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x2748990
	void RefreshActorEffect(); // Function Solarland.SolarBackpackActor.RefreshActorEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x2748790
	void OnMeshEffectFactorChange(); // Function Solarland.SolarBackpackActor.OnMeshEffectFactorChange // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnChildPSCompPreActive(struct UParticleSystemComponent* PSComponent); // Function Solarland.SolarBackpackActor.OnChildPSCompPreActive // (Final|Native|Protected) // @ game+0x2748630
	void OnChildPSCompFinish(struct UParticleSystemComponent* PSComponent); // Function Solarland.SolarBackpackActor.OnChildPSCompFinish // (Final|Native|Protected) // @ game+0x27485a0
	bool IsFly(); // Function Solarland.SolarBackpackActor.IsFly // (Final|Native|Public|BlueprintCallable) // @ game+0x2748050
	bool IsCharging(); // Function Solarland.SolarBackpackActor.IsCharging // (Final|Native|Public|BlueprintCallable) // @ game+0x2748020
	bool HasEnergy(); // Function Solarland.SolarBackpackActor.HasEnergy // (Final|Native|Public|BlueprintCallable) // @ game+0x2747ff0
	float GetBackpackOriginScale(); // Function Solarland.SolarBackpackActor.GetBackpackOriginScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2747eb0
};

// Class Solarland.SolarBackpackAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct USolarBackpackAnimInstance : UAnimInstance {
	char bIsInRoom : 1; // 0x268(0x01)
	char bIsFlying : 1; // 0x268(0x01)
};

// Class Solarland.SolarBackpackCompInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarBackpackCompInterface : UInterface {

	struct USolarBackpackComponent* GetSolarBackpackComponent(); // Function Solarland.SolarBackpackCompInterface.GetSolarBackpackComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x26525f0
};

// Class Solarland.SolarBackpackComponent
// Size: 0x450 (Inherited: 0xb0)
struct USolarBackpackComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	float DeathBoxEnergyRate; // 0xb8(0x04)
	float RebirthEnergyRate; // 0xbc(0x04)
	char pad_C0[0x60]; // 0xc0(0x60)
	struct FMulticastInlineDelegate OnWeaponCreateCompleteDelegate; // 0x120(0x10)
	char pad_130[0x78]; // 0x130(0x78)
	float InitialSolarCharge; // 0x1a8(0x04)
	float SolarChargeInterval; // 0x1ac(0x04)
	float InitialEnergyLimit; // 0x1b0(0x04)
	float InitialExtraEnergyLimit; // 0x1b4(0x04)
	float InitialExtraEnergyCharge; // 0x1b8(0x04)
	float InitialChargeCD; // 0x1bc(0x04)
	char pad_1C0[0x10]; // 0x1c0(0x10)
	float RechargeFrequencyFromSky; // 0x1d0(0x04)
	float RechargeFrequencyFromDeathBox; // 0x1d4(0x04)
	float RechargeFrequencyFromPile; // 0x1d8(0x04)
	float RechargeQuantityFromSky; // 0x1dc(0x04)
	float RechargeQuantityFromDeathBox; // 0x1e0(0x04)
	float RechargeQuantityFromPile; // 0x1e4(0x04)
	char pad_1E8[0x90]; // 0x1e8(0x90)
	float JetPackVerticalDashSpeedScale; // 0x278(0x04)
	float JetPackHorizontalDashSpeedScale; // 0x27c(0x04)
	struct TMap<int32_t, struct UGameplayAbility*> ItemAbilities; // 0x280(0x50)
	struct TMap<int32_t, struct FGameplayAbilitySpecHandle> GivenAbilityHandles; // 0x2d0(0x50)
	char pad_320[0x54]; // 0x320(0x54)
	bool bWeaponPartPickable; // 0x374(0x01)
	char pad_375[0x3]; // 0x375(0x03)
	struct TMap<int32_t, int32_t> defaultDeathBoxEnergyConfig; // 0x378(0x50)
	struct TMap<int32_t, struct FDateTime> DroppedItemIDMap; // 0x3c8(0x50)
	float DiscardItemDelayNoticeTime; // 0x418(0x04)
	char pad_41C[0x4]; // 0x41c(0x04)
	struct TArray<float> GradeRankProportion; // 0x420(0x10)
	struct TArray<int32_t> InitialGridNum; // 0x430(0x10)
	struct TArray<int32_t> CustomMode_Hunt_InitialGridNum; // 0x440(0x10)

	void WeaponCreateCompleteDelegate__DelegateSignature(enum class EWeaponSlotType SlotType, struct ASolarPlayerWeapon* WeaponPtr, struct USolarBackpackComponent* SolarBackpackComponent); // DelegateFunction Solarland.SolarBackpackComponent.WeaponCreateCompleteDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void UpdateCurrentExtraEnergy(float UpdateValue, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.UpdateCurrentExtraEnergy // (Final|Native|Public) // @ game+0x274f610
	void UpdateCurrentEnergy(float UpdateValue, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.UpdateCurrentEnergy // (Final|Native|Public) // @ game+0x274f540
	void UpdateConsumeSlotUI(); // Function Solarland.SolarBackpackComponent.UpdateConsumeSlotUI // (Final|Native|Public) // @ game+0x274f520
	bool TryTriggerAbility(int32_t InItemID); // Function Solarland.SolarBackpackComponent.TryTriggerAbility // (Final|Native|Protected) // @ game+0x274f480
	void TrySendDropItemTips(int32_t InDroppedItemID); // Function Solarland.SolarBackpackComponent.TrySendDropItemTips // (Final|Native|Public) // @ game+0x274f3f0
	float TakeDeathBoxEnergy(); // Function Solarland.SolarBackpackComponent.TakeDeathBoxEnergy // (Final|Native|Public) // @ game+0x274f3c0
	void SmoothEnergy(float Amount); // Function Solarland.SolarBackpackComponent.SmoothEnergy // (Final|Native|Public) // @ game+0x274f340
	void SetMaxPileMap(int32_t ItemID, int32_t MaxNum); // Function Solarland.SolarBackpackComponent.SetMaxPileMap // (Final|Native|Public) // @ game+0x274f270
	void SetBoxCharging(bool bSet); // Function Solarland.SolarBackpackComponent.SetBoxCharging // (Final|Native|Public) // @ game+0x274f1e0
	void SetBackPackGM(enum class EGmType gmtypy, int32_t ID, int32_t Num, int32_t Slot); // Function Solarland.SolarBackpackComponent.SetBackPackGM // (Final|Native|Public) // @ game+0x274e710
	bool ServerUseItem(int32_t ItemID, int32_t Num); // Function Solarland.SolarBackpackComponent.ServerUseItem // (Final|Native|Public) // @ game+0x274f110
	void ServerSetJetPackModule(int32_t NewJetPackModuleID, bool bForVertical); // Function Solarland.SolarBackpackComponent.ServerSetJetPackModule // (Final|Native|Public) // @ game+0x274f040
	void ServerSetEnergyState(enum class EEnergyState State); // Function Solarland.SolarBackpackComponent.ServerSetEnergyState // (Final|Native|Public) // @ game+0x274efc0
	void ServerRPCUpgradeWeapon(struct ASolarElectricShop* InTargetShop, struct ASolarPlayerWeapon* InTargetWeapon); // Function Solarland.SolarBackpackComponent.ServerRPCUpgradeWeapon // (Final|Native|Public) // @ game+0x274dc60
	void ServerRPCUpgradeShield(); // Function Solarland.SolarBackpackComponent.ServerRPCUpgradeShield // (Final|Native|Public) // @ game+0x274dc40
	void ServerRPCTakeWeaponPartToBag(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.ServerRPCTakeWeaponPartToBag // (Final|Native|Public) // @ game+0x274d570
	void ServerRPCTakeBagPartToWeapon(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.ServerRPCTakeBagPartToWeapon // (Final|Native|Public) // @ game+0x274d4a0
	void ServerRPCSwitchWeaponPart(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.ServerRPCSwitchWeaponPart // (Final|Native|Public) // @ game+0x274d3d0
	void ServerRPCPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarBackpackComponent.ServerRPCPurchaseEShopItems // (Final|Native|Public) // @ game+0x274eeb0
	void ServerRPCDisCardWeaponUICall(int32_t Slot); // Function Solarland.SolarBackpackComponent.ServerRPCDisCardWeaponUICall // (Final|Native|Public) // @ game+0x274ee20
	void ServerRPCDiscardWeaponPart(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.ServerRPCDiscardWeaponPart // (Final|Native|Public) // @ game+0x274d300
	void ServerRPCDiscardWeapon(int32_t InSlot); // Function Solarland.SolarBackpackComponent.ServerRPCDiscardWeapon // (Final|Native|Public) // @ game+0x274ee20
	void ServerRPCDisCardItemUICall(int32_t ID, int32_t Num); // Function Solarland.SolarBackpackComponent.ServerRPCDisCardItemUICall // (Final|Native|Public) // @ game+0x274ed50
	void ServerRPCDiscardItem(int32_t InItemID, int32_t InItemNum); // Function Solarland.SolarBackpackComponent.ServerRPCDiscardItem // (Final|Native|Public) // @ game+0x274ed50
	bool ServerDiscardWeapon(int32_t Slot, int32_t InTriggerType); // Function Solarland.SolarBackpackComponent.ServerDiscardWeapon // (Final|Native|Public) // @ game+0x274ec80
	bool ServerDiscardFromBackpackByType(enum class EItemType ItemType, bool InDropItem, int32_t InTriggerType); // Function Solarland.SolarBackpackComponent.ServerDiscardFromBackpackByType // (Final|Native|Public) // @ game+0x274eb70
	bool ServerDiscardFromBackpack(int32_t ItemID, int32_t Num, bool InDropItem, int32_t InTriggerType); // Function Solarland.SolarBackpackComponent.ServerDiscardFromBackpack // (Final|Native|Public) // @ game+0x274ea00
	void ServerConsumeExtraEnergy(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ServerConsumeExtraEnergy // (Final|Native|Public) // @ game+0x274e930
	void ServerConsumeEnergy(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ServerConsumeEnergy // (Final|Native|Public) // @ game+0x274da60
	void ServerClearJetModule(); // Function Solarland.SolarBackpackComponent.ServerClearJetModule // (Final|Native|Public) // @ game+0x274e910
	void ServerClearEnergyState(enum class EEnergyState State); // Function Solarland.SolarBackpackComponent.ServerClearEnergyState // (Final|Native|Public) // @ game+0x274e890
	void ServerClearAllItems(); // Function Solarland.SolarBackpackComponent.ServerClearAllItems // (Final|Native|Public) // @ game+0x274e870
	void ServerBackpackGM(enum class EGmType InGmType, int32_t InItemID, int32_t InItemNum, int32_t InSlot); // Function Solarland.SolarBackpackComponent.ServerBackpackGM // (Final|Native|Public) // @ game+0x274e710
	bool ServerAddWeaponToWeaponSysByDataCache(enum class EWeaponSlotType SlotType, struct FSolarItemData& WeaponData, bool bDestroyPrev, bool IsAutoPickup, int32_t InTriggerType, struct ASolarPlayerWeapon* WeaponActorExists); // Function Solarland.SolarBackpackComponent.ServerAddWeaponToWeaponSysByDataCache // (Final|Native|Public|HasOutParms) // @ game+0x274e4b0
	int32_t ServerAddToItemMapByIdAndNumForced(int32_t ItemID, int32_t Num); // Function Solarland.SolarBackpackComponent.ServerAddToItemMapByIdAndNumForced // (Final|Native|Public) // @ game+0x274e3e0
	int32_t ServerAddToItemMap(struct FSolarItemData ItemData); // Function Solarland.SolarBackpackComponent.ServerAddToItemMap // (Final|Native|Public) // @ game+0x274e2e0
	void ServerAddToEquipMap(struct FSolarItemData& ItemData, bool Bydefault, bool InDropItem); // Function Solarland.SolarBackpackComponent.ServerAddToEquipMap // (Final|Native|Public|HasOutParms) // @ game+0x274e140
	int32_t ServerAddToBackpackByIdAndNum(int32_t ItemID, int32_t Num, bool Bydefault, float CurValue, bool NeedReset, int32_t UserId, int32_t TriggerType, int32_t SourceType); // Function Solarland.SolarBackpackComponent.ServerAddToBackpackByIdAndNum // (Final|Native|Public) // @ game+0x274ded0
	int32_t ServerAddToBackpack(struct FSolarItemData& ItemData, bool Bydefault, int32_t TriggerType); // Function Solarland.SolarBackpackComponent.ServerAddToBackpack // (Final|Native|Public|HasOutParms) // @ game+0x274dd30
	void ReqUseEnergy(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ReqUseEnergy // (Final|Native|Public) // @ game+0x274da60
	void RequestUpgradeWeapon(struct ASolarElectricShop* InTargetShop, struct ASolarPlayerWeapon* InTargetWeapon); // Function Solarland.SolarBackpackComponent.RequestUpgradeWeapon // (Final|Native|Public) // @ game+0x274dc60
	void RequestUpgradeShield(); // Function Solarland.SolarBackpackComponent.RequestUpgradeShield // (Final|Native|Public) // @ game+0x274dc40
	void ReqesutPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarBackpackComponent.ReqesutPurchaseEShopItems // (Final|Native|Public) // @ game+0x274db30
	void RefreshWeaponPartsInBackPackUI(); // Function Solarland.SolarBackpackComponent.RefreshWeaponPartsInBackPackUI // (Final|Native|Public) // @ game+0x274da40
	void RefreshWeaponInBackPackUIInternal(); // Function Solarland.SolarBackpackComponent.RefreshWeaponInBackPackUIInternal // (Final|Native|Protected) // @ game+0x274da20
	void RefreshWeaponInBackPackUI(); // Function Solarland.SolarBackpackComponent.RefreshWeaponInBackPackUI // (Final|Native|Public) // @ game+0x274da00
	void RefreshItemInBackPackUI(); // Function Solarland.SolarBackpackComponent.RefreshItemInBackPackUI // (Final|Native|Public) // @ game+0x274d9e0
	void RefreshEquipInBackPackUI(); // Function Solarland.SolarBackpackComponent.RefreshEquipInBackPackUI // (Final|Native|Public) // @ game+0x274d9c0
	void RefreshBackPackUIState(); // Function Solarland.SolarBackpackComponent.RefreshBackPackUIState // (Final|Native|Public) // @ game+0x274d9a0
	void PurchaseEShopItemsResponse_Implementation(int32_t InProductID, bool bSuccess, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarBackpackComponent.PurchaseEShopItemsResponse_Implementation // (Final|Native|Public) // @ game+0x274d890
	int32_t PredictEnergy(float Amount); // Function Solarland.SolarBackpackComponent.PredictEnergy // (Final|Native|Public) // @ game+0x274d800
	void OnReceiveItemAbilityCoolDown(struct FGameplayTag& Tags, bool bAdd); // Function Solarland.SolarBackpackComponent.OnReceiveItemAbilityCoolDown // (Final|Native|Public|HasOutParms) // @ game+0x274d720
	bool NetUseEnergy(float InCostEnergy, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.NetUseEnergy // (Final|Native|Public) // @ game+0x274d640
	void NetTakeWeaponPartToBagLuaCall(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.NetTakeWeaponPartToBagLuaCall // (Final|Native|Public) // @ game+0x274d570
	void NetTakeBagPartToWeaponLuaCall(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.NetTakeBagPartToWeaponLuaCall // (Final|Native|Public) // @ game+0x274d4a0
	void NetSwitchWeaponPartLuaCall(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.NetSwitchWeaponPartLuaCall // (Final|Native|Public) // @ game+0x274d3d0
	void NetDiscardWeaponPartLuaCall(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.NetDiscardWeaponPartLuaCall // (Final|Native|Public) // @ game+0x274d300
	bool ModuleOverflow2(int32_t ModuleMax); // Function Solarland.SolarBackpackComponent.ModuleOverflow2 // (Final|Native|Public|Const) // @ game+0x274d1c0
	bool ModuleOverflow(int32_t ModuleMax); // Function Solarland.SolarBackpackComponent.ModuleOverflow // (Final|Native|Public|Const) // @ game+0x274d260
	void LogBackPackItem(); // Function Solarland.SolarBackpackComponent.LogBackPackItem // (Final|Native|Public) // @ game+0x274d1a0
	bool IsReviveItemRecommend(); // Function Solarland.SolarBackpackComponent.IsReviveItemRecommend // (Final|Native|Public) // @ game+0x274d170
	bool IsReviveItemPickable(); // Function Solarland.SolarBackpackComponent.IsReviveItemPickable // (Final|Native|Public) // @ game+0x274d140
	bool IsReviveItem(int32_t InItemID); // Function Solarland.SolarBackpackComponent.IsReviveItem // (Final|Native|Public) // @ game+0x274d0a0
	bool IsExtraEnergyID(int32_t ID); // Function Solarland.SolarBackpackComponent.IsExtraEnergyID // (Final|Native|Public) // @ game+0x274d000
	bool IsEquippedWeapon(int32_t InThisID); // Function Solarland.SolarBackpackComponent.IsEquippedWeapon // (Final|Native|Public) // @ game+0x274cf60
	bool IsEquippedOrHasBetterPart(int32_t PartType, int32_t Level); // Function Solarland.SolarBackpackComponent.IsEquippedOrHasBetterPart // (Final|Native|Public) // @ game+0x274ce90
	bool IsEnergyID(int32_t ID); // Function Solarland.SolarBackpackComponent.IsEnergyID // (Final|Native|Public) // @ game+0x274cdf0
	int32_t IsBetterWeaponThanEquiped(struct FSolarItemData& InItemData, int32_t InWeaponLevel, int32_t InWeaponExp); // Function Solarland.SolarBackpackComponent.IsBetterWeaponThanEquiped // (Final|Native|Public|HasOutParms) // @ game+0x274cc50
	bool IsBetterWeaponForBag(struct FSolarItemData& InItemData, int32_t InWeaponLevel, int32_t InWeaponExp); // Function Solarland.SolarBackpackComponent.IsBetterWeaponForBag // (Final|Native|Public|HasOutParms) // @ game+0x274cab0
	bool IsBetterScopeForBag(int32_t PartType, int32_t Level); // Function Solarland.SolarBackpackComponent.IsBetterScopeForBag // (Final|Native|Public) // @ game+0x274c9e0
	bool IsBetterPartForBag(int32_t PartType, int32_t Level); // Function Solarland.SolarBackpackComponent.IsBetterPartForBag // (Final|Native|Public) // @ game+0x274c910
	void InitDefaultItem(int32_t ItemID, int32_t Num); // Function Solarland.SolarBackpackComponent.InitDefaultItem // (Final|Native|Public) // @ game+0x274c840
	void InitDeathBoxEnergyRate(); // Function Solarland.SolarBackpackComponent.InitDeathBoxEnergyRate // (Final|Native|Public) // @ game+0x274c820
	bool HasEmptyWeaponSlot(); // Function Solarland.SolarBackpackComponent.HasEmptyWeaponSlot // (Final|Native|Public) // @ game+0x274c7f0
	bool GetWeaponSlotEmpty(int32_t Slot); // Function Solarland.SolarBackpackComponent.GetWeaponSlotEmpty // (Final|Native|Public) // @ game+0x274c750
	bool GetWeaponPartInBagClient(int32_t TargetPartType, int32_t& OutPartLevel, int32_t& OutItemID); // Function Solarland.SolarBackpackComponent.GetWeaponPartInBagClient // (Final|Native|Public|HasOutParms) // @ game+0x274c630
	struct FSolarItemData GetWeaponItemDataBySlot(int32_t Slot); // Function Solarland.SolarBackpackComponent.GetWeaponItemDataBySlot // (Final|Native|Public) // @ game+0x274c520
	bool GetWeaponDataBySolt(int32_t Slot, struct FSolarItemData& ItemData); // Function Solarland.SolarBackpackComponent.GetWeaponDataBySolt // (Final|Native|Public|HasOutParms) // @ game+0x274c3d0
	float GetTotalEnergy(); // Function Solarland.SolarBackpackComponent.GetTotalEnergy // (Final|Native|Protected) // @ game+0x274b9d0
	float GetQuantityFrom(enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.GetQuantityFrom // (Final|Native|Public) // @ game+0x274c340
	struct FSolarItemData GetNewItemData(int32_t ItemID, int32_t Num); // Function Solarland.SolarBackpackComponent.GetNewItemData // (Final|Native|Public) // @ game+0x274c1f0
	float GetMaxExtraEnergy(); // Function Solarland.SolarBackpackComponent.GetMaxExtraEnergy // (Final|Native|Public|Const) // @ game+0x274c1c0
	float GetMaxEnergy(); // Function Solarland.SolarBackpackComponent.GetMaxEnergy // (Final|Native|Public|Const) // @ game+0x274c1c0
	float GetMaxDeathBoxEnergyFromConfig(); // Function Solarland.SolarBackpackComponent.GetMaxDeathBoxEnergyFromConfig // (Final|Native|Public) // @ game+0x274c190
	int32_t GetItemNumById(int32_t ItemID); // Function Solarland.SolarBackpackComponent.GetItemNumById // (Final|Native|Public) // @ game+0x274c0f0
	int32_t GetItemMaxPile(int32_t ItemID); // Function Solarland.SolarBackpackComponent.GetItemMaxPile // (Final|Native|Public) // @ game+0x274c050
	bool GetItemDataByType(enum class EItemType ItemType, struct FSolarItemData& ItemData); // Function Solarland.SolarBackpackComponent.GetItemDataByType // (Final|Native|Public|HasOutParms) // @ game+0x274bf00
	bool GetItemDataById(int32_t ItemID, struct FSolarItemData& ItemData); // Function Solarland.SolarBackpackComponent.GetItemDataById // (Final|Native|Public|HasOutParms) // @ game+0x274bdb0
	float GetFrequencyFrom(enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.GetFrequencyFrom // (Final|Native|Public) // @ game+0x274bd20
	struct FSolarItemData GetEquipItemDataByType(enum class EItemType ItemType); // Function Solarland.SolarBackpackComponent.GetEquipItemDataByType // (Final|Native|Public) // @ game+0x274bc10
	int32_t GetEquipIdByType(enum class EItemType ItemType); // Function Solarland.SolarBackpackComponent.GetEquipIdByType // (Final|Native|Public) // @ game+0x274bb70
	float GetCurrExtraEnergy(); // Function Solarland.SolarBackpackComponent.GetCurrExtraEnergy // (Final|Native|Public|Const) // @ game+0x274b9d0
	struct FSolarItemData GetCurrentWeaponItemData(); // Function Solarland.SolarBackpackComponent.GetCurrentWeaponItemData // (Final|Native|Public) // @ game+0x274bae0
	bool GetCurrentWeaponIsOverloading(); // Function Solarland.SolarBackpackComponent.GetCurrentWeaponIsOverloading // (Final|Native|Public) // @ game+0x274bab0
	void GetCurrentEquipItems(struct TArray<int32_t>& OutArray); // Function Solarland.SolarBackpackComponent.GetCurrentEquipItems // (Final|Native|Public|HasOutParms) // @ game+0x274ba00
	float GetCurrEnergy(); // Function Solarland.SolarBackpackComponent.GetCurrEnergy // (Final|Native|Public|Const) // @ game+0x274b9d0
	struct ASolarCharacter* GetCharacterOwner(); // Function Solarland.SolarBackpackComponent.GetCharacterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x26ae600
	enum class EWeaponSlotType GetBestSuitSlotForCandidateWeapon(struct FSolarItemData& WeaponData, bool IsAutoPickup, enum class EWeaponSlotType PreferSlot); // Function Solarland.SolarBackpackComponent.GetBestSuitSlotForCandidateWeapon // (Final|Native|Public|HasOutParms) // @ game+0x274b830
	bool GetAnyScopeInBagClient(int32_t& OutPartType, int32_t& OutPartLevel, int32_t& OutItemID); // Function Solarland.SolarBackpackComponent.GetAnyScopeInBagClient // (Final|Native|Public|HasOutParms) // @ game+0x274b6f0
	float GetAbilityRemainingCD(int32_t InItemID); // Function Solarland.SolarBackpackComponent.GetAbilityRemainingCD // (Final|Native|Public) // @ game+0x274b650
	float GetAbilityDuration(int32_t InItemID); // Function Solarland.SolarBackpackComponent.GetAbilityDuration // (Final|Native|Public) // @ game+0x274b5b0
	void GameStatistics_ItemUseCount(struct FSolarItemData& InItemData); // Function Solarland.SolarBackpackComponent.GameStatistics_ItemUseCount // (Final|Native|Protected|HasOutParms) // @ game+0x274b4c0
	void ExecuteGM(struct FString InStrGM); // Function Solarland.SolarBackpackComponent.ExecuteGM // (Final|Native|Public) // @ game+0x274b420
	void EquipModuleByID(int32_t ModuleID); // Function Solarland.SolarBackpackComponent.EquipModuleByID // (Final|Native|Public) // @ game+0x274b390
	int32_t EquipModule(int32_t ID, float ModuleMax); // Function Solarland.SolarBackpackComponent.EquipModule // (Final|Native|Public) // @ game+0x274b2c0
	void EquipBatteryByID(int32_t BatteryID); // Function Solarland.SolarBackpackComponent.EquipBatteryByID // (Final|Native|Public) // @ game+0x274b230
	int32_t EquipBattery(int32_t ID, float BatteryMax, float Charge, float CD); // Function Solarland.SolarBackpackComponent.EquipBattery // (Final|Native|Public) // @ game+0x274b0d0
	void DiscardItemAndResetCharacterData(struct FSolarItemData& DiscardItem, bool DiscardDataOnly); // Function Solarland.SolarBackpackComponent.DiscardItemAndResetCharacterData // (Final|Native|Public|HasOutParms) // @ game+0x274af80
	void DiscardItem(struct FSolarItemData DiscardItem); // Function Solarland.SolarBackpackComponent.DiscardItem // (Final|Native|Public) // @ game+0x274ae90
	void DelayCheckClearAbility(int32_t InItemID); // Function Solarland.SolarBackpackComponent.DelayCheckClearAbility // (Final|Native|Protected) // @ game+0x274ae00
	void CommitEnergy(int32_t ID); // Function Solarland.SolarBackpackComponent.CommitEnergy // (Final|Native|Public) // @ game+0x274a8f0
	bool ClearBackpackItemByID(int32_t InItemID); // Function Solarland.SolarBackpackComponent.ClearBackpackItemByID // (Final|Native|Public) // @ game+0x274ad60
	void CheckToGiveAbility(int32_t InItemID); // Function Solarland.SolarBackpackComponent.CheckToGiveAbility // (Final|Native|Protected) // @ game+0x274acd0
	void CheckToClearAbility(int32_t InItemID); // Function Solarland.SolarBackpackComponent.CheckToClearAbility // (Final|Native|Protected) // @ game+0x274ac40
	bool CheckIsRecWeaponParts(int32_t ItemID); // Function Solarland.SolarBackpackComponent.CheckIsRecWeaponParts // (Final|Native|Public) // @ game+0x274aba0
	bool CheckIsEquippedDifferentScope(int32_t PartID); // Function Solarland.SolarBackpackComponent.CheckIsEquippedDifferentScope // (Final|Native|Public) // @ game+0x274ab00
	bool CheckCanAutoPickupWeaponPart(int32_t ItemID); // Function Solarland.SolarBackpackComponent.CheckCanAutoPickupWeaponPart // (Final|Native|Public) // @ game+0x274aa60
	float ChargeMain(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ChargeMain // (Final|Native|Public) // @ game+0x274a980
	float ChargeExtra(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ChargeExtra // (Final|Native|Public) // @ game+0x274a980
	void CancelEnergy(int32_t ID); // Function Solarland.SolarBackpackComponent.CancelEnergy // (Final|Native|Public) // @ game+0x274a8f0
	bool BatteryOverflow(int32_t BatteryMax); // Function Solarland.SolarBackpackComponent.BatteryOverflow // (Final|Native|Public|Const) // @ game+0x274a850
	enum class EItemModifyResult AddBackpackItemByID(int32_t InItemID, int32_t InItemNum, bool InDropItem); // Function Solarland.SolarBackpackComponent.AddBackpackItemByID // (Final|Native|Public) // @ game+0x274a740
};

// Class Solarland.BackpackTrailAssemblingInterface
// Size: 0x28 (Inherited: 0x28)
struct UBackpackTrailAssemblingInterface : UInterface {

	void OnBackpackTrailAssembling(struct FBackpackTrailAssemblingParams& Params, enum class EBackpackPropellingMode PropellingMode); // Function Solarland.BackpackTrailAssemblingInterface.OnBackpackTrailAssembling // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarLeggedVehicle
// Size: 0x1400 (Inherited: 0x13c0)
struct ASolarLeggedVehicle : ASolarVehiclePawn {
	struct USolarLeggedVehicleMovement* LeggedVehicleMovement; // 0x13c0(0x08)
	struct UCapsuleComponent* VehicleCapsule; // 0x13c8(0x08)
	struct UPrimitiveComponent* BlockForVehicleComp; // 0x13d0(0x08)
	float BlockForVehicleCollisionDelay; // 0x13d8(0x04)
	char pad_13DC[0xc]; // 0x13dc(0x0c)
	struct TArray<struct FVector_NetQuantize> InitialFootIkLocations; // 0x13e8(0x10)
	float StandOnVehicleRadiusMultiplier; // 0x13f8(0x04)
	char pad_13FC[0x4]; // 0x13fc(0x04)

	void OnStandOnVehicle(bool bOnVehicle); // Function Solarland.SolarLeggedVehicle.OnStandOnVehicle // (Final|Native|Protected) // @ game+0x282da60
	void OnRep_InitialFootIkLocations(); // Function Solarland.SolarLeggedVehicle.OnRep_InitialFootIkLocations // (Final|Native|Protected) // @ game+0x282da40
};

// Class Solarland.SolarBackpackerVehicle
// Size: 0x1460 (Inherited: 0x1400)
struct ASolarBackpackerVehicle : ASolarLeggedVehicle {
	struct UStaticMeshComponent* VehicleHitBox; // 0x1400(0x08)
	struct TSoftObjectPtr<UStaticMesh> BackpackMesh; // 0x1408(0x28)
	struct UStaticMesh* OriginalBackpackMesh; // 0x1430(0x08)
	int32_t BackpackerItemID; // 0x1438(0x04)
	char pad_143C[0x4]; // 0x143c(0x04)
	struct UGameplayEffect* SheildRecoverEffect; // 0x1440(0x08)
	struct ASolarCharacter* AttachedPlayer; // 0x1448(0x08)
	bool bShieldOpened; // 0x1450(0x01)
	bool bVehicleDroped; // 0x1451(0x01)
	char pad_1452[0xe]; // 0x1452(0x0e)

	void OnRep_VehicleDropped(); // Function Solarland.SolarBackpackerVehicle.OnRep_VehicleDropped // (Final|Native|Protected) // @ game+0x2754870
	void OnRep_ShieldChanged(); // Function Solarland.SolarBackpackerVehicle.OnRep_ShieldChanged // (Final|Native|Protected) // @ game+0x2754850
	void OnRep_AttachedToPlayer(); // Function Solarland.SolarBackpackerVehicle.OnRep_AttachedToPlayer // (Final|Native|Protected) // @ game+0x2754830
};

// Class Solarland.SolarBackpackSFX
// Size: 0x280 (Inherited: 0x228)
struct ASolarBackpackSFX : AActor {
	char pad_228[0x58]; // 0x228(0x58)

	void OnPropellingModeChanged(enum class EBackpackPropellingMode PropellingMode); // Function Solarland.SolarBackpackSFX.OnPropellingModeChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct UParticleSystemComponent* GetTrailEffectComponent(); // Function Solarland.SolarBackpackSFX.GetTrailEffectComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2753bb0
	void BackpackSFXLaunch(bool GroundDetected, struct FVector& GroundLocation, struct FVector& GroundNormal); // Function Solarland.SolarBackpackSFX.BackpackSFXLaunch // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x27522e0
	void BackpackSFXEnd(); // Function Solarland.SolarBackpackSFX.BackpackSFXEnd // (Native|Event|Public|BlueprintEvent) // @ game+0x1ae50f0
	void BackpackSFXBegin(enum class EFXJetType InJetType, bool GroundDetected); // Function Solarland.SolarBackpackSFX.BackpackSFXBegin // (Native|Event|Public|BlueprintEvent) // @ game+0x2752200
};

// Class Solarland.SolarBattleModel
// Size: 0x30 (Inherited: 0x28)
struct USolarBattleModel : USolarAbstractModel {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.BattleSpectatorItemData
// Size: 0x80 (Inherited: 0x28)
struct UBattleSpectatorItemData : UObject {
	struct USolarBattleSpectatorWidget* SpectatorWidget; // 0x28(0x08)
	char pad_30[0x50]; // 0x30(0x50)

	void Init(struct TMap<struct FString, struct FString> BattleData); // Function Solarland.BattleSpectatorItemData.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x2753ce0
	void GetBattleData(struct FString InDataName, struct FText& OutText); // Function Solarland.BattleSpectatorItemData.GetBattleData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x27535c0
};

// Class Solarland.SolarBattleSpectatorWidget
// Size: 0x400 (Inherited: 0x400)
struct USolarBattleSpectatorWidget : USolarUserWidget {

	void UpdatePageInfo(int32_t& CurrentPage, int32_t& TotalPage); // Function Solarland.SolarBattleSpectatorWidget.UpdatePageInfo // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetPageSize(int32_t PageSize); // Function Solarland.SolarBattleSpectatorWidget.SetPageSize // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetBattleDatas(struct TArray<struct UBattleSpectatorItemData*>& BattleDatas); // Function Solarland.SolarBattleSpectatorWidget.SetBattleDatas // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RequestStartPlayReplay(struct FString BattleID); // Function Solarland.SolarBattleSpectatorWidget.RequestStartPlayReplay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RequestBattleData(int32_t PageIndex); // Function Solarland.SolarBattleSpectatorWidget.RequestBattleData // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshBattleList(); // Function Solarland.SolarBattleSpectatorWidget.RefreshBattleList // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnStartPlayReplayFailed(struct FString BattleID); // Function Solarland.SolarBattleSpectatorWidget.OnStartPlayReplayFailed // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void AddBattleDatas(struct TArray<struct UBattleSpectatorItemData*>& BattleDatas); // Function Solarland.SolarBattleSpectatorWidget.AddBattleDatas // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarBlueCircle
// Size: 0x258 (Inherited: 0x228)
struct ASolarBlueCircle : AActor {
	float HightLimit; // 0x228(0x04)
	float MinimumDistance; // 0x22c(0x04)
	float FadeOutTime; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct UStaticMeshComponent* CenterStaticMeshComponent; // 0x238(0x08)
	struct UStaticMeshComponent* GlowStaticMeshComponent; // 0x240(0x08)
	char pad_248[0x10]; // 0x248(0x10)

	void SetBlueCircleEnd(); // Function Solarland.SolarBlueCircle.SetBlueCircleEnd // (Final|Native|Public) // @ game+0x2754c60
	void OnCustomGameStateChanged(enum class ESCMInGameState NewGameState); // Function Solarland.SolarBlueCircle.OnCustomGameStateChanged // (Final|Native|Public) // @ game+0x27547b0
	struct UStaticMeshComponent* GetGlowStaticMeshComponent(); // Function Solarland.SolarBlueCircle.GetGlowStaticMeshComponent // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct UStaticMeshComponent* GetCenterStaticMeshComponent(); // Function Solarland.SolarBlueCircle.GetCenterStaticMeshComponent // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void BlueCircleFadeout(); // Function Solarland.SolarBlueCircle.BlueCircleFadeout // (Final|Native|Public) // @ game+0x2752410
};

// Class Solarland.SolarBlueprintFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	bool WorldPosToWidgetPosForWorldMark(struct APlayerController* Controller, struct FVector& Pos, struct FVector2D& ScreenPos, float& AngleForArrow); // Function Solarland.SolarBlueprintFunctionLibrary.WorldPosToWidgetPosForWorldMark // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2756150
	bool WorldPosToWidgetPosForEmoji(struct APlayerController* Controller, struct FVector& Pos, struct FVector2D& ScreenPos); // Function Solarland.SolarBlueprintFunctionLibrary.WorldPosToWidgetPosForEmoji // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2756030
	bool WorldPosToWidgetPos(struct APlayerController* Controller, struct FVector& Pos, struct FVector2D& ScreenPos); // Function Solarland.SolarBlueprintFunctionLibrary.WorldPosToWidgetPos // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2755f10
	struct FVector2D WorldMarkWidgetPostProcessing(struct FVector2D& ScreenPos, struct FVector2D& RectangleOffset, float Radius); // Function Solarland.SolarBlueprintFunctionLibrary.WorldMarkWidgetPostProcessing // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2755de0
	struct FString UploadFileToUrl(struct FString URL, struct FString FilePath); // Function Solarland.SolarBlueprintFunctionLibrary.UploadFileToUrl // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2754a20
	void UnlockCursor(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.UnlockCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2755d60
	void TryGetLocalText(int32_t LocalTextId, bool& bSuccess, struct FString& LocalText); // Function Solarland.SolarBlueprintFunctionLibrary.TryGetLocalText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2755c30
	void TryGetHUDColorForPlayerLevel(struct UObject* WorldContext, int32_t PlayerLevel, bool& bFoundConfig, struct FLinearColor& BaseColor, struct FLinearColor& DecorateColor); // Function Solarland.SolarBlueprintFunctionLibrary.TryGetHUDColorForPlayerLevel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2755a60
	void Test_SolarBlueprintFunctionLibrary(); // Function Solarland.SolarBlueprintFunctionLibrary.Test_SolarBlueprintFunctionLibrary // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9b5550
	bool SphereTraceSingleWithObjectType(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, enum class EObjectTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Solarland.SolarBlueprintFunctionLibrary.SphereTraceSingleWithObjectType // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27555e0
	bool SphereTraceMultiWithObjectType(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, enum class EObjectTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Solarland.SolarBlueprintFunctionLibrary.SphereTraceMultiWithObjectType // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2755190
	void SortObjectArrayByName(struct TArray<struct UObject*>& inArray); // Function Solarland.SolarBlueprintFunctionLibrary.SortObjectArrayByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27550f0
	struct AActor* SolarSpawnActor(struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> SoftClass, struct FTransform& SpawnTransform, struct AActor* Owner, struct APawn* Instigator, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride); // Function Solarland.SolarBlueprintFunctionLibrary.SolarSpawnActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2754e30
	void SetUserFocus(struct APlayerController* PlayerController, struct UWidget* TargetWidget); // Function Solarland.SolarBlueprintFunctionLibrary.SetUserFocus // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2754d70
	void SetEditableRichTextCaretImage(struct UEditableRichTextBlock* EditableRichText, struct FSlateBrush& InCaretImage); // Function Solarland.SolarBlueprintFunctionLibrary.SetEditableRichTextCaretImage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2754c80
	void ReleaseFocus(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.ReleaseFocus // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2754be0
	void RebuildCursorWidgets(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.RebuildCursorWidgets // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2754b60
	struct FString PostResultToUrl(struct FString URL, struct FString Content); // Function Solarland.SolarBlueprintFunctionLibrary.PostResultToUrl // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2754a20
	struct FString PostResultAsFileToUrl(struct FString URL, struct FString Content, struct FString Filename); // Function Solarland.SolarBlueprintFunctionLibrary.PostResultAsFileToUrl // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2754890
	void LockCursor(struct APlayerController* PlayerController, struct UWidget* TargetWidget); // Function Solarland.SolarBlueprintFunctionLibrary.LockCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27546f0
	struct UPassiveSkillDataAsset* LoadPassiveSkillDataAssetForCharacter(struct UObject* WorldContext, int32_t CharacterId); // Function Solarland.SolarBlueprintFunctionLibrary.LoadPassiveSkillDataAssetForCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2754620
	bool LineTraceSingleWithObjectType(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class EObjectTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Solarland.SolarBlueprintFunctionLibrary.LineTraceSingleWithObjectType // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27541d0
	float K2_GetAsyncLoadPercentage(struct FName& PackageName); // Function Solarland.SolarBlueprintFunctionLibrary.K2_GetAsyncLoadPercentage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2754140
	bool IsUsedSteamSDKLogin(); // Function Solarland.SolarBlueprintFunctionLibrary.IsUsedSteamSDKLogin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x95aae0
	bool IsRenderingMobilePlatform(); // Function Solarland.SolarBlueprintFunctionLibrary.IsRenderingMobilePlatform // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2754110
	bool IsPlatformSwitch(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformSwitch // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x95aae0
	bool IsPlatformSupportLimChat(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformSupportLimChat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9ec880
	bool IsPlatformSteam(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformSteam // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x95aae0
	bool IsPlatformOffcialWin(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformOffcialWin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9ec880
	bool IsPlatformEpic(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformEpic // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x95aae0
	bool IsPlatformDesktopTemp(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformDesktopTemp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x95aae0
	bool IsPlatformDesktopExcludeSwitch(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformDesktopExcludeSwitch // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9ec880
	bool IsPlatformDesktop(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformDesktop // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x9ec880
	bool IsMobilePlatform(); // Function Solarland.SolarBlueprintFunctionLibrary.IsMobilePlatform // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27540e0
	bool IsLowMemoryDeivce(); // Function Solarland.SolarBlueprintFunctionLibrary.IsLowMemoryDeivce // (Final|Native|Static|Public) // @ game+0x2753fe0
	bool IsLowLevelGraphicsQuality(struct UObject* InObject); // Function Solarland.SolarBlueprintFunctionLibrary.IsLowLevelGraphicsQuality // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2753f50
	bool IsLowLevelDevice(struct UObject* InObject); // Function Solarland.SolarBlueprintFunctionLibrary.IsLowLevelDevice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2753ec0
	bool IsLowerLevelDevice(struct UObject* InObject, enum class ESolarGraphicsQualityLevel InLowerThanThis); // Function Solarland.SolarBlueprintFunctionLibrary.IsLowerLevelDevice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2754010
	bool IsGraphicsQualityPerformance(struct UObject* InObject); // Function Solarland.SolarBlueprintFunctionLibrary.IsGraphicsQualityPerformance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2753e30
	bool HasPassiveSkillDataAssetConfig(struct UObject* WorldContext, int32_t CharacterId); // Function Solarland.SolarBlueprintFunctionLibrary.HasPassiveSkillDataAssetConfig // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2753c10
	float GetViewportScale(); // Function Solarland.SolarBlueprintFunctionLibrary.GetViewportScale // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2753be0
	void GetTipsPosition(struct UObject* WorldContextObject, struct UWidget* FocusWidget, float Offset, struct FVector2D& FixedPos, int32_t& Dimsion); // Function Solarland.SolarBlueprintFunctionLibrary.GetTipsPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2753a00
	struct FIntPoint GetStandardScreenSize(); // Function Solarland.SolarBlueprintFunctionLibrary.GetStandardScreenSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x27539c0
	struct ASolarGameState* GetSolarGameState(struct UObject* WorldContextObject); // Function Solarland.SolarBlueprintFunctionLibrary.GetSolarGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2753930
	struct ASolarGameMode* GetSolarGameMode(struct UObject* WorldContextObject); // Function Solarland.SolarBlueprintFunctionLibrary.GetSolarGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27538a0
	struct FVector2D GetScreenSize(); // Function Solarland.SolarBlueprintFunctionLibrary.GetScreenSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2753860
	enum class ESolarDeviceLevel GetDeviceLevel(struct UObject* InObject); // Function Solarland.SolarBlueprintFunctionLibrary.GetDeviceLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27537d0
	enum class ESolarGraphicsQualityLevel GetCurQualityLevel(struct UObject* InObject); // Function Solarland.SolarBlueprintFunctionLibrary.GetCurQualityLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2753740
	struct TArray<struct FString> GetAssetDependencies(struct FName& Path); // Function Solarland.SolarBlueprintFunctionLibrary.GetAssetDependencies // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27534a0
	void GetActorsWithTagInSubLevelByName(struct UObject* WorldContextObject, struct FName& LevelName, struct FName& Tag, struct TArray<struct AActor*>& OutActors); // Function Solarland.SolarBlueprintFunctionLibrary.GetActorsWithTagInSubLevelByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2753320
	void ExitGame(bool bForce); // Function Solarland.SolarBlueprintFunctionLibrary.ExitGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27532a0
	struct FString EnumToString(struct FString Enum, int32_t EnumValue); // Function Solarland.SolarBlueprintFunctionLibrary.EnumToString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2753180
	void EnableInputAndHideCursor(struct ASolarPlayerController* Controller); // Function Solarland.SolarBlueprintFunctionLibrary.EnableInputAndHideCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2753100
	void EnableAnalogCursor(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.EnableAnalogCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2753080
	void DisableInputAndShowCursor(struct ASolarPlayerController* Controller); // Function Solarland.SolarBlueprintFunctionLibrary.DisableInputAndShowCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2753000
	void DisableAnalogCursor(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.DisableAnalogCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2752f80
	struct FMatrix CreatePlaneShadowProjectMatrix(struct FVector LightDir, struct FVector4 ShadowPlane); // Function Solarland.SolarBlueprintFunctionLibrary.CreatePlaneShadowProjectMatrix // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2752e70
	void ChangeSessionMode(bool& IfChangeToPCSession); // Function Solarland.SolarBlueprintFunctionLibrary.ChangeSessionMode // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2752df0
	bool CapsuleTraceSingleWithObjectType(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, enum class EObjectTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Solarland.SolarBlueprintFunctionLibrary.CapsuleTraceSingleWithObjectType // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2752920
	bool BoxTraceSingleWithObjectType(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, enum class EObjectTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Solarland.SolarBlueprintFunctionLibrary.BoxTraceSingleWithObjectType // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2752430
	void AbsoluteToViewport(struct UObject* WorldContextObject, struct FVector2D& AbsolutePosition, struct FVector2D& ViewPortPos); // Function Solarland.SolarBlueprintFunctionLibrary.AbsoluteToViewport // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x27520e0
};

// Class Solarland.SolarBombActor
// Size: 0x280 (Inherited: 0x228)
struct ASolarBombActor : AActor {
	bool bFireWater; // 0x228(0x01)
	char pad_229[0x3]; // 0x229(0x03)
	struct FBombingZoneBomb BombConfig; // 0x22c(0x1c)
	bool bAutoDestroyAfterFire; // 0x248(0x01)
	char pad_249[0xb]; // 0x249(0x0b)
	float TargetLandingTime; // 0x254(0x04)
	struct UParticleSystem* WaterBombEffect; // 0x258(0x08)
	struct UParticleSystem* BombEffect; // 0x260(0x08)
	struct UMaterialInstanceDynamic* GuideLine; // 0x268(0x08)
	struct UAkComponent* AkAudioComponent; // 0x270(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x278(0x08)

	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarBombActor.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x2759d00
};

// Class Solarland.SolarBombingZoneManager
// Size: 0x260 (Inherited: 0x228)
struct ASolarBombingZoneManager : AActor {
	struct ASolarBombActor* BPClass; // 0x228(0x08)
	struct TArray<struct FBombingZone> ZoneArray; // 0x230(0x10)
	char pad_240[0x4]; // 0x240(0x04)
	int32_t WeightInCar; // 0x244(0x04)
	int32_t WeightInPoision; // 0x248(0x04)
	int32_t WeightInRoom; // 0x24c(0x04)
	struct FVector2D LocationLimit; // 0x250(0x08)
	float NotifyTime; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)

	void OnCreateBombingZone(int32_t ID, bool bSpecificLocation, struct FVector TargetLocation); // Function Solarland.SolarBombingZoneManager.OnCreateBombingZone // (Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	struct FBombingZoneBomb GetBombData(int32_t ZoneId); // Function Solarland.SolarBombingZoneManager.GetBombData // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	bool CreateBombingZone(struct FBombingZone& Zone, bool bSpecificLocation, struct FVector TargetLocation); // Function Solarland.SolarBombingZoneManager.CreateBombingZone // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27592e0
};

// Class Solarland.SolarBotAIConfig
// Size: 0x78 (Inherited: 0x30)
struct USolarBotAIConfig : UDataAsset {
	struct FGameplayTagContainer IdentifierTags; // 0x30(0x20)
	struct USolarBotConfigSection_Battle* BattleSection; // 0x50(0x08)
	struct USolarBotConfigSection_Loot* LootSection; // 0x58(0x08)
	struct USolarBotConfigSection_Perception* PerceptionSection; // 0x60(0x08)
	struct TArray<struct USolarBotConfigSection*> CustomSections; // 0x68(0x10)
};

// Class Solarland.SolarBotControllerBase
// Size: 0x658 (Inherited: 0x358)
struct ASolarBotControllerBase : ASolarAIControllerBase {
	char pad_358[0x8]; // 0x358(0x08)
	struct FNavAgentProperties VehicleAgentProperties; // 0x360(0x30)
	struct USolarFollowingComponent* PathFollowingComp; // 0x390(0x08)
	char pad_398[0xc]; // 0x398(0x0c)
	float CharacterLookAtInterpSpeed; // 0x3a4(0x04)
	struct FVector2D MovementVector; // 0x3a8(0x08)
	char pad_3B0[0x28]; // 0x3b0(0x28)
	struct USolarBotAIConfig* BotConfigPreset; // 0x3d8(0x08)
	struct FSolarBotBattleConfigNew DefaultBotBattleConfig; // 0x3e0(0xd8)
	struct FSolarBotBattleConfig DefaultBattleConfig; // 0x4b8(0x158)
	bool bAimBoneWhenFire; // 0x610(0x01)
	char pad_611[0x3]; // 0x611(0x03)
	struct FName FireTargetBoneName; // 0x614(0x08)
	char pad_61C[0x14]; // 0x61c(0x14)
	float BotAIAttackRange; // 0x630(0x04)
	float BotAIAttackRangeUnArm; // 0x634(0x04)
	bool bCanAutoSwitchWeapon; // 0x638(0x01)
	char pad_639[0xf]; // 0x639(0x0f)
	float MinimumDistanceForRepeatedBoarding; // 0x648(0x04)
	char pad_64C[0xc]; // 0x64c(0x0c)

	void SetDynamicFireConfig(struct FBotSpecifiedFireConfig& AdditiveConfig); // Function Solarland.SolarBotControllerBase.SetDynamicFireConfig // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2765120
	void SetBotConfigPreset(struct USolarBotAIConfig* InConfig); // Function Solarland.SolarBotControllerBase.SetBotConfigPreset // (Native|Public|BlueprintCallable) // @ game+0x2765090
	void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarBotControllerBase.OnPlayerGetOffVehicle // (Final|Native|Protected) // @ game+0x2764900
	struct USolarFollowingComponent* GetSolarFollowingComponent(); // Function Solarland.SolarBotControllerBase.GetSolarFollowingComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x27645b0
	struct ASolarCharacter* GetPossessedCharacter(); // Function Solarland.SolarBotControllerBase.GetPossessedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2764580
	void GetOnVehicle(struct ASolarVehiclePawn* Vehicle); // Function Solarland.SolarBotControllerBase.GetOnVehicle // (Native|Public|BlueprintCallable) // @ game+0x27644f0
	void GetOffVehicle(); // Function Solarland.SolarBotControllerBase.GetOffVehicle // (Native|Public|BlueprintCallable) // @ game+0x1ae6450
	struct FBotFireConfig GetFireConfig(struct AActor* InTargetActor, bool bModified); // Function Solarland.SolarBotControllerBase.GetFireConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2764190
	void ClearAllDynamicFireConfig(); // Function Solarland.SolarBotControllerBase.ClearAllDynamicFireConfig // (Final|Native|Public|BlueprintCallable) // @ game+0x2763f40
};

// Class Solarland.SolarBotAIController
// Size: 0x880 (Inherited: 0x658)
struct ASolarBotAIController : ASolarBotControllerBase {
	char pad_658[0x8]; // 0x658(0x08)
	struct USolarBotLootComponent* BotLootComponent; // 0x660(0x08)
	struct USolarPerceptionComponent* BotPerceptionComponent; // 0x668(0x08)
	struct UNavigationQueryFilter* BPDefaultNavigationFilterClass; // 0x670(0x08)
	struct TMap<struct FGameplayTag, struct UBehaviorTree*> SubTreeMap; // 0x678(0x50)
	float MinSpecVehicleDeltaPitch; // 0x6c8(0x04)
	char pad_6CC[0x4]; // 0x6cc(0x04)
	struct FMulticastInlineDelegate OnBotAIDeath; // 0x6d0(0x10)
	bool bInitDefaultWeapon; // 0x6e0(0x01)
	char pad_6E1[0x3]; // 0x6e1(0x03)
	int32_t BotDefaultWeaponId; // 0x6e4(0x04)
	bool bSpawnDeathBox; // 0x6e8(0x01)
	char pad_6E9[0x3]; // 0x6e9(0x03)
	int32_t UniqueSpawnerID; // 0x6ec(0x04)
	int32_t DefaultDifficultyLevel; // 0x6f0(0x04)
	int32_t CurrentDifficultyLevel; // 0x6f4(0x04)
	char pad_6F8[0x8]; // 0x6f8(0x08)
	struct USolarBotShootSimulater* ShootSimulater; // 0x700(0x08)
	char pad_708[0x60]; // 0x708(0x60)
	enum class EBotAIType BotAIType; // 0x768(0x01)
	char pad_769[0x3]; // 0x769(0x03)
	int32_t BotFeature; // 0x76c(0x04)
	char pad_770[0x8]; // 0x770(0x08)
	struct UNgaiAIControllerComponent* NgaiComponent; // 0x778(0x08)
	char pad_780[0x10]; // 0x780(0x10)
	float ValidEmojiUseDistance; // 0x790(0x04)
	char pad_794[0xcc]; // 0x794(0xcc)
	float WorldMarkMessageDelayTime; // 0x860(0x04)
	char pad_864[0x1c]; // 0x864(0x1c)

	void UpdateDynamicSubtree(); // Function Solarland.SolarBotAIController.UpdateDynamicSubtree // (Final|Native|Public|BlueprintCallable) // @ game+0x275bb30
	void StopBehaviorTree(); // Function Solarland.SolarBotAIController.StopBehaviorTree // (Final|Native|Public|BlueprintCallable) // @ game+0x275b950
	void SetViewTargetWithBlend(struct AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function Solarland.SolarBotAIController.SetViewTargetWithBlend // (Native|Public|BlueprintCallable) // @ game+0x275b690
	bool SetupBotAITargetSelectConfig(); // Function Solarland.SolarBotAIController.SetupBotAITargetSelectConfig // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool SetupBotAIDifficulty(int32_t DifficultyLevel, bool bAsDefault); // Function Solarland.SolarBotAIController.SetupBotAIDifficulty // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool SetupBotAICanUseCharacterData(int32_t CharacterId, int32_t SkinId); // Function Solarland.SolarBotAIController.SetupBotAICanUseCharacterData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetLootSubtree(struct UBehaviorTree* BehaviorAsset); // Function Solarland.SolarBotAIController.SetLootSubtree // (Final|Native|Public|BlueprintCallable) // @ game+0x275a430
	void SetDynamicSubtree(struct FGameplayTag InjectTag, struct UBehaviorTree* BehaviorAsset); // Function Solarland.SolarBotAIController.SetDynamicSubtree // (Final|Native|Public|BlueprintCallable) // @ game+0x275a2d0
	bool SetBotConfigPresetByID(int32_t BotConfigPresetID); // Function Solarland.SolarBotAIController.SetBotConfigPresetByID // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetBattleSubtree(struct UBehaviorTree* BehaviorAsset); // Function Solarland.SolarBotAIController.SetBattleSubtree // (Final|Native|Public|BlueprintCallable) // @ game+0x275a170
	void OnReset(); // Function Solarland.SolarBotAIController.OnReset // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnEnterLanding(); // Function Solarland.SolarBotAIController.OnEnterLanding // (Native|Public) // @ game+0x275a070
	bool IsTeamLeader(); // Function Solarland.SolarBotAIController.IsTeamLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2759f00
	bool IsInPlayerTeam(); // Function Solarland.SolarBotAIController.IsInPlayerTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2759e00
	bool IsIndependent(); // Function Solarland.SolarBotAIController.IsIndependent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2759e30
	bool IsAccompanyingPlayer(); // Function Solarland.SolarBotAIController.IsAccompanyingPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2759dd0
	struct TArray<enum class ESolarTablesEnum_CharacterType> GetPreferPickHeroTypes(); // Function Solarland.SolarBotAIController.GetPreferPickHeroTypes // (Final|Native|Public|BlueprintCallable) // @ game+0x2759950
	char GetMyTeamID(); // Function Solarland.SolarBotAIController.GetMyTeamID // (Native|Public|Const) // @ game+0x2759910
	bool CanActivateVehicleAbility(int32_t SeatIndex, int32_t AbilityIndex); // Function Solarland.SolarBotAIController.CanActivateVehicleAbility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2759140
	float CalculateScoreForAITarget(struct AActor* AITargetActor); // Function Solarland.SolarBotAIController.CalculateScoreForAITarget // (Final|Native|Protected) // @ game+0x2758f70
};

// Class Solarland.SolarBotAIControllerInGuide
// Size: 0x890 (Inherited: 0x880)
struct ASolarBotAIControllerInGuide : ASolarBotAIController {
	struct TArray<struct FDeathBoxItemData> DeathBoxItems; // 0x878(0x10)
};

// Class Solarland.SolarBotAIControllerOnVehicle
// Size: 0x8c0 (Inherited: 0x880)
struct ASolarBotAIControllerOnVehicle : ASolarBotAIController {
	char pad_880[0x40]; // 0x880(0x40)

	void SetMoveStop(bool NeedStop); // Function Solarland.SolarBotAIControllerOnVehicle.SetMoveStop // (Final|Native|Public|BlueprintCallable) // @ game+0x275a4c0
	void SetFireStop(bool NeedStop); // Function Solarland.SolarBotAIControllerOnVehicle.SetFireStop // (Final|Native|Public|BlueprintCallable) // @ game+0x275a3a0
	void OnVehicleDriverGetOff(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarBotAIControllerOnVehicle.OnVehicleDriverGetOff // (Final|Native|Public) // @ game+0x275a0a0
};

// Class Solarland.SolarBotAITeamManager
// Size: 0x260 (Inherited: 0x28)
struct USolarBotAITeamManager : UObject {
	float UpdateInterval; // 0x28(0x04)
	float DefaultSeparateDistance; // 0x2c(0x04)
	float DefaultReturnDistance; // 0x30(0x04)
	char pad_34[0x5c]; // 0x34(0x5c)
	struct ASolarBotTeamVisualizer* DebugVisualizerClass; // 0x90(0x08)
	struct ASolarBotTeamVisualizer* DebugVisualizer; // 0x98(0x08)
	char pad_A0[0x10]; // 0xa0(0x10)
	struct TArray<struct USolarBotAIConfig*> CandidateBotConfigs; // 0xb0(0x10)
	struct TMap<struct ASolarCharacter*, struct ASolarBotAIController*> AllocatedCharacters; // 0xc0(0x50)
	struct TArray<struct ASolarCharacter*> AbandonedCharacters; // 0x110(0x10)
	struct TMap<enum class EBotInteractCondition, struct FBotEmojiSetting> EmojiTaskSettings; // 0x120(0x50)
	struct TMap<int32_t, enum class EBotInteractCondition> ResponseToVoiceType; // 0x170(0x50)
	struct TMap<enum class EWorldMarkType, enum class EBotInteractCondition> ResponseToMarkType; // 0x1c0(0x50)
	struct TMap<enum class EBotInteractCondition, struct FBotResponseSetting> ResponseTaskSettings; // 0x210(0x50)

	void UpdateAllocatedList(struct ASolarBotAIController* InController, struct TArray<struct ASolarCharacter*>& AliveCharacterArray); // Function Solarland.SolarBotAITeamManager.UpdateAllocatedList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x275ba40
	bool TryCancelCurrentRescueTarget(struct ASolarBotAIController* InController, struct ASolarCharacter* CancelledCharacter); // Function Solarland.SolarBotAITeamManager.TryCancelCurrentRescueTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x275b970
	bool ShouldTeamActivate(struct FSolarBotTeamInfo& BotInfo); // Function Solarland.SolarBotAITeamManager.ShouldTeamActivate // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x275b830
	void SetTeamBlackboardValueAsVector(int32_t TeamID, struct FName& KeyName, struct FVector VectorValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x275b4e0
	void SetTeamBlackboardValueAsString(int32_t TeamID, struct FName& KeyName, struct FString StringValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsString // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x275b2e0
	void SetTeamBlackboardValueAsRotator(int32_t TeamID, struct FName& KeyName, struct FRotator VectorValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsRotator // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x275b130
	void SetTeamBlackboardValueAsObject(int32_t TeamID, struct FName& KeyName, struct UObject* ObjectValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsObject // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x275af80
	void SetTeamBlackboardValueAsName(int32_t TeamID, struct FName& KeyName, struct FName NameValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x275add0
	void SetTeamBlackboardValueAsInt(int32_t TeamID, struct FName& KeyName, int32_t IntValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsInt // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x275ac20
	void SetTeamBlackboardValueAsFloat(int32_t TeamID, struct FName& KeyName, float FloatValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsFloat // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x275aa70
	void SetTeamBlackboardValueAsEnum(int32_t TeamID, struct FName& KeyName, char EnumValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsEnum // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x275a8c0
	void SetTeamBlackboardValueAsClass(int32_t TeamID, struct FName& KeyName, struct UObject* ClassValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x275a710
	void SetTeamBlackboardValueAsBool(int32_t TeamID, struct FName& KeyName, bool BoolValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsBool // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x275a550
	void SetBotDropOut(struct ASolarBotAIController* InController, bool bDropOut); // Function Solarland.SolarBotAITeamManager.SetBotDropOut // (Final|Native|Public|BlueprintCallable) // @ game+0x275a200
	void OnTeamDeactive(struct FSolarBotTeamInfo& TeamInfo); // Function Solarland.SolarBotAITeamManager.OnTeamDeactive // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnTeamActivate(struct FSolarBotTeamInfo& TeamInfo); // Function Solarland.SolarBotAITeamManager.OnTeamActivate // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnBotUnRegister(struct FSolarBotMemberInfo& BotInfo); // Function Solarland.SolarBotAITeamManager.OnBotUnRegister // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnBotStateChanged(struct FSolarBotMemberInfo& BotInfo, enum class ESolarBotMemberState OldState); // Function Solarland.SolarBotAITeamManager.OnBotStateChanged // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnBotRegister(struct FSolarBotMemberInfo& BotInfo); // Function Solarland.SolarBotAITeamManager.OnBotRegister // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	bool IsValidTeamID(int32_t InTeamId); // Function Solarland.SolarBotAITeamManager.IsValidTeamID // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x2759fd0
	bool IsTeamLeader(struct ASolarBotAIController* InController); // Function Solarland.SolarBotAITeamManager.IsTeamLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2759f30
	bool IsIndependent(struct ASolarBotAIController* InController); // Function Solarland.SolarBotAITeamManager.IsIndependent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2759e60
	bool GetTeamPlayerInfo(struct ASolarBotAIController* InController, struct TArray<struct ASolarCharacter*>& PlayerArray); // Function Solarland.SolarBotAITeamManager.GetTeamPlayerInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2759c00
	bool GetRescueInfo(struct ASolarBotAIController* InController, struct TArray<struct ASolarCharacter*>& DyingPlayerArray, struct TArray<struct ASolarCharacter*>& DeadPlayerArray, struct TArray<struct ASolarCharacter*>& DyingBotArray, struct TArray<struct ASolarCharacter*>& DeadBotArray); // Function Solarland.SolarBotAITeamManager.GetRescueInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x27599d0
	bool GetBotTeamInfo(struct ASolarBotAIController* InController, struct FSolarBotTeamInfo& OutTeamInfo); // Function Solarland.SolarBotAITeamManager.GetBotTeamInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x27597b0
	bool GetBotMemberInfo(struct ASolarBotAIController* InController, struct FSolarBotMemberInfo& OutMemberInfo); // Function Solarland.SolarBotAITeamManager.GetBotMemberInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x27594f0
	struct USolarBotAITeamManager* Get(struct UObject* Context); // Function Solarland.SolarBotAITeamManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2759460
	bool CheckBotTeamState(struct ASolarBotAIController* InController, enum class ESolarBotMemberState MemberState); // Function Solarland.SolarBotAITeamManager.CheckBotTeamState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2759210
	struct FVector CalculateTeamPosition(struct FSolarBotTeamInfo& TeamInfo); // Function Solarland.SolarBotAITeamManager.CalculateTeamPosition // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent|Const) // @ game+0x2759010
	bool AllocatedRescueTarget(struct ASolarBotAIController* InController, struct ASolarCharacter* RescuedCharacter); // Function Solarland.SolarBotAITeamManager.AllocatedRescueTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2758ea0
	void AbandonedCurrentRescueTarget(struct ASolarBotAIController* InController, struct ASolarCharacter* AbandonedCharacter); // Function Solarland.SolarBotAITeamManager.AbandonedCurrentRescueTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2758dd0
};

// Class Solarland.SolarBotBehaviorMonitor
// Size: 0x48 (Inherited: 0x28)
struct USolarBotBehaviorMonitor : UObject {
	char pad_28[0x20]; // 0x28(0x20)
};

// Class Solarland.SolarBotConfigSection
// Size: 0x30 (Inherited: 0x28)
struct USolarBotConfigSection : UObject {
	struct FGameplayTag SectionTag; // 0x28(0x08)
};

// Class Solarland.SolarBotConfigSection_Battle
// Size: 0x290 (Inherited: 0x30)
struct USolarBotConfigSection_Battle : USolarBotConfigSection {
	bool bEnableNewBattleConfig; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FSolarBotBattleConfigNew BotBattleConfig; // 0x38(0xd8)
	struct FSolarBotBattleConfig BattleConfig; // 0x110(0x158)
	struct FSolarBotUseSniperPosConfig SniperPosConfig; // 0x268(0x1c)
	char pad_284[0x4]; // 0x284(0x04)
	struct UBehaviorTree* BattleSubTree; // 0x288(0x08)
};

// Class Solarland.SolarBotConfigSection_Loot
// Size: 0xe0 (Inherited: 0x30)
struct USolarBotConfigSection_Loot : USolarBotConfigSection {
	struct FSolarBotLootValuationConfig ValuationConfig; // 0x30(0x44)
	struct FSolarBotLootSearchConfig SearchConfig; // 0x74(0x44)
	struct FSolarBotLootWeaponFeedConfig WeaponFeedConfig; // 0xb8(0x20)
	struct UBehaviorTree* LootSubTree; // 0xd8(0x08)
};

// Class Solarland.SolarBotConfigSection_Perception
// Size: 0xf0 (Inherited: 0x30)
struct USolarBotConfigSection_Perception : USolarBotConfigSection {
	struct FSolarBotThreatConfig ThreatConfig; // 0x30(0x70)
	struct TMap<enum class EWeaponType, struct FSolarBotThreatConfig> WPSpecificThreatConfig; // 0xa0(0x50)
};

// Class Solarland.SolarBotConfigSection_SafeArea
// Size: 0x38 (Inherited: 0x30)
struct USolarBotConfigSection_SafeArea : USolarBotConfigSection {
	struct FSolarBotSafeAreaConfig SafeAreaConfig; // 0x30(0x08)
};

// Class Solarland.SolarBotConfigSection_SkyDiving
// Size: 0x68 (Inherited: 0x30)
struct USolarBotConfigSection_SkyDiving : USolarBotConfigSection {
	struct FSolarBotSkyDivingConfig SkyDivingConfig; // 0x30(0x24)
	char pad_54[0x4]; // 0x54(0x04)
	struct TArray<struct FName> PreferLootZoneTags; // 0x58(0x10)
};

// Class Solarland.SolarBotLootComponent
// Size: 0x160 (Inherited: 0xb0)
struct USolarBotLootComponent : UActorComponent {
	struct FSolarBotLootValuationConfig DefaultValuationConfig; // 0xb0(0x44)
	char pad_F4[0x6c]; // 0xf4(0x6c)
};

// Class Solarland.SolarBotOnVehicleActionTrigger
// Size: 0x260 (Inherited: 0x230)
struct ASolarBotOnVehicleActionTrigger : ATriggerBox {
	int32_t VehicleStopAreaId; // 0x230(0x04)
	enum class EBotOnVehicleStopType StopType; // 0x234(0x01)
	char pad_235[0x3]; // 0x235(0x03)
	float MoveStopDelayTime; // 0x238(0x04)
	enum class EBotOnVehicleFireType FireType; // 0x23c(0x01)
	char pad_23D[0x3]; // 0x23d(0x03)
	float FireOffDelayTime; // 0x240(0x04)
	int32_t ActivateVehicleAbilitySeatIndex; // 0x244(0x04)
	char pad_248[0x18]; // 0x248(0x18)

	void OnUpdatedComponentOverlapEnd(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarBotOnVehicleActionTrigger.OnUpdatedComponentOverlapEnd // (Final|Native|Public) // @ game+0x2764e70
	void OnUpdatedComponentOverlapBegin(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarBotOnVehicleActionTrigger.OnUpdatedComponentOverlapBegin // (Final|Native|Public|HasOutParms) // @ game+0x2764c50
};

// Class Solarland.SolarBotOnVehicleOnLineCtrl
// Size: 0x8c0 (Inherited: 0x8c0)
struct ASolarBotOnVehicleOnLineCtrl : ASolarBotAIControllerOnVehicle {
};

// Class Solarland.SolarBotShootSimulater
// Size: 0xa8 (Inherited: 0x28)
struct USolarBotShootSimulater : UObject {
	struct ASolarBotAIController* OwnerController; // 0x28(0x08)
	struct AActor* LockedTargetActor; // 0x30(0x08)
	char pad_38[0x70]; // 0x38(0x70)
};

// Class Solarland.SolarBotSniperPosition
// Size: 0x248 (Inherited: 0x228)
struct ASolarBotSniperPosition : AActor {
	float ReachRadius; // 0x228(0x04)
	float ReachOffsetZ; // 0x22c(0x04)
	float AbandonRadius; // 0x230(0x04)
	float UsingCoolDown; // 0x234(0x04)
	char pad_238[0x10]; // 0x238(0x10)
};

// Class Solarland.SolarBotTeamConfig
// Size: 0x78 (Inherited: 0x30)
struct USolarBotTeamConfig : UDataAsset {
	bool bUseSpecificMemberPreset; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct USolarBotAIConfig*> SpecificMemberPresets; // 0x38(0x10)
	struct TArray<struct FSolarBotTeamBuildRule> BuildRules; // 0x48(0x10)
	struct FGameplayTagContainer ForbiddenTags; // 0x58(0x20)
};

// Class Solarland.SolarBotTeamVisualizer
// Size: 0x2e8 (Inherited: 0x228)
struct ASolarBotTeamVisualizer : AInfo {
	struct TArray<struct FColor> DrawDebugColors; // 0x228(0x10)
	struct UFont* TextFont; // 0x238(0x08)
	struct TArray<struct FBotTeamDebugInfo> BotTeamDebugInfos; // 0x240(0x10)
	float ScreamDebugInfoLifeTime; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)
	struct TMap<int32_t, struct FString> CharacterIDToNameMap; // 0x258(0x50)
	float DebugTextScale; // 0x2a8(0x04)
	float ScreamDebugInfoTriggerTime; // 0x2ac(0x04)
	struct TArray<struct FWarmBotDebugInfo> ScreamDebugInfos; // 0x2b0(0x10)
	struct FString DebugPrefix; // 0x2c0(0x10)
	char pad_2D0[0x18]; // 0x2d0(0x18)
};

// Class Solarland.SolarBotWarmSystemBase
// Size: 0x148 (Inherited: 0x28)
struct USolarBotWarmSystemBase : UObject {
	float UpdateInterval; // 0x28(0x04)
	int32_t MaxNumExtraExpItem; // 0x2c(0x04)
	int32_t MaxNumExtraWeaponPart; // 0x30(0x04)
	bool bRemoveOriginWeaponParts; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	struct TMap<enum class EWeaponType, struct FSolarWeaponPartBonusDropSetting> WeaponPartDropPriorityConfig; // 0x38(0x50)
	float WeaponPartBasePriorityPerLevel; // 0x88(0x04)
	char pad_8C[0xc]; // 0x8c(0x0c)
	struct FSolarBotTimelineGameSetting WarmSysGameSetting; // 0x98(0x88)
	char pad_120[0x28]; // 0x120(0x28)
};

// Class Solarland.SolarBotWarmSystemRegular
// Size: 0x270 (Inherited: 0x148)
struct USolarBotWarmSystemRegular : USolarBotWarmSystemBase {
	struct TMap<struct ASolarPlayerState*, struct FWarmTargetState> WarmTargets; // 0x148(0x50)
	struct TArray<struct FTimeItemsSetting> ItemsByTime; // 0x198(0x10)
	char pad_1A8[0x4]; // 0x1a8(0x04)
	float TriggerWarmServiceValue; // 0x1ac(0x04)
	float MaxGroupDistance; // 0x1b0(0x04)
	char MaxServiceBot; // 0x1b4(0x01)
	char pad_1B5[0x3]; // 0x1b5(0x03)
	int32_t TraceRecordLength; // 0x1b8(0x04)
	float LineTraceHeight; // 0x1bc(0x04)
	char pad_1C0[0x8]; // 0x1c0(0x08)
	float TraceRecordInterval; // 0x1c8(0x04)
	char pad_1CC[0x4]; // 0x1cc(0x04)
	struct UEnvQuery* TeleportLocEQS; // 0x1d0(0x08)
	enum class EEnvQueryRunMode TeleportLocEQSRunMode; // 0x1d8(0x01)
	char pad_1D9[0x3]; // 0x1d9(0x03)
	int32_t PopAllTriggerPlayerNum; // 0x1dc(0x04)
	int32_t PopAllTriggerTime; // 0x1e0(0x04)
	char pad_1E4[0x4]; // 0x1e4(0x04)
	struct UEnvQuery* PopAllBotEQS; // 0x1e8(0x08)
	enum class EEnvQueryRunMode PopAllBotEQSRunMode; // 0x1f0(0x01)
	char pad_1F1[0x3]; // 0x1f1(0x03)
	float RewardScore; // 0x1f4(0x04)
	char MaxNumFishingBot; // 0x1f8(0x01)
	char NumPlayerKillThreshold; // 0x1f9(0x01)
	char NumRealPlayerKillThreshold; // 0x1fa(0x01)
	char pad_1FB[0x5]; // 0x1fb(0x05)
	struct UEnvQuery* FishingTeleportEQS; // 0x200(0x08)
	enum class EEnvQueryRunMode FishingTeleportEQSRunMode; // 0x208(0x01)
	char pad_209[0x7]; // 0x209(0x07)
	struct UGameplayEffect* FishingInvisibleEffectClass; // 0x210(0x08)
	int32_t FishingBotCharacterID; // 0x218(0x04)
	int32_t FishingBotSkinID; // 0x21c(0x04)
	struct TArray<int32_t> FilterDamageWeaponIDs; // 0x220(0x10)
	struct TArray<int32_t> FilterDamageVehicleIDs; // 0x230(0x10)
	bool bCheckAccidentHit; // 0x240(0x01)
	char pad_241[0x3]; // 0x241(0x03)
	float LimitAccidentAngle; // 0x244(0x04)
	char ExReportMinAimbotThreshold; // 0x248(0x01)
	char ExReportMinBiteThreshold; // 0x249(0x01)
	char pad_24A[0x6]; // 0x24a(0x06)
	struct TArray<struct ASolarPlayerState*> SuspiciousPlayers; // 0x250(0x10)
	struct TArray<struct ASolarPlayerState*> FishingBots; // 0x260(0x10)

	void UpdateWarmTargetStateByEvent(struct ASolarPlayerState* InPS, enum class EUpdateWarmServiceEventType InEventType); // Function Solarland.SolarBotWarmSystemRegular.UpdateWarmTargetStateByEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2765240
	void StartPlayerWarmService(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotWarmSystemRegular.StartPlayerWarmService // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27651c0
	void RecordWarmTargetKDAState(struct ASolarPlayerState* InPS, struct ASolarPlayerState* KilledPC); // Function Solarland.SolarBotWarmSystemRegular.RecordWarmTargetKDAState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2764fd0
	void OnRequestWarmServiceSuccess(struct TArray<struct ASolarPlayerState*>& PlayerArray); // Function Solarland.SolarBotWarmSystemRegular.OnRequestWarmServiceSuccess // (Final|Native|Protected|HasOutParms) // @ game+0x2764ba0
	void OnRequestWarmServiceFail(struct TArray<struct ASolarPlayerState*>& PlayerArray); // Function Solarland.SolarBotWarmSystemRegular.OnRequestWarmServiceFail // (Final|Native|Protected|HasOutParms) // @ game+0x2764af0
	void OnPopBotForFishing(struct USolarPreservedBotPopTask* InTask, struct ASolarPlayerState* BotPS, struct FVector& TeleportLoc); // Function Solarland.SolarBotWarmSystemRegular.OnPopBotForFishing // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x27649d0
	float GetWarmScoreByEvent(struct ASolarPlayerState* InPS, enum class EUpdateWarmServiceEventType InEventType); // Function Solarland.SolarBotWarmSystemRegular.GetWarmScoreByEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2764830
	float GetTimeOutBattle(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotWarmSystemRegular.GetTimeOutBattle // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2764790
	float GetTimeBeforeOutPoisonCirecle(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotWarmSystemRegular.GetTimeBeforeOutPoisonCirecle // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x27646f0
	float GetTargetTickValue(struct ASolarPlayerState* InPS, struct FWarmTargetState& InState); // Function Solarland.SolarBotWarmSystemRegular.GetTargetTickValue // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x27645e0
	float GetLastBattleMVPScore(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotWarmSystemRegular.GetLastBattleMVPScore // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2764450
	char GetKilledPlayerNum(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotWarmSystemRegular.GetKilledPlayerNum // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x27643b0
	char GetKilledBotNum(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotWarmSystemRegular.GetKilledBotNum // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2764310
	float GetFrustrationValue(struct ASolarPlayerState* InPS); // Function Solarland.SolarBotWarmSystemRegular.GetFrustrationValue // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2764270
	char GetEnemyNumInRange(struct ASolarPlayerState* InPS, float RangeRadius); // Function Solarland.SolarBotWarmSystemRegular.GetEnemyNumInRange // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x27640c0
	int32_t GetActivePlayerNumBP(int32_t PlayerNum, int32_t PlayerTeamNum); // Function Solarland.SolarBotWarmSystemRegular.GetActivePlayerNumBP // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2763ff0
	struct USolarBotWarmSystemRegular* Get(struct UObject* Context); // Function Solarland.SolarBotWarmSystemRegular.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2763f60
};

// Class Solarland.SolarBotWarmSystemScript
// Size: 0x270 (Inherited: 0x148)
struct USolarBotWarmSystemScript : USolarBotWarmSystemBase {
	bool bUsePlayerLandTime; // 0x148(0x01)
	bool bEnableFinalDownsize; // 0x149(0x01)
	char pad_14A[0x2]; // 0x14a(0x02)
	float FinalDownsizeDuration; // 0x14c(0x04)
	char pad_150[0x108]; // 0x150(0x108)
	struct TArray<struct ASolarPlayerState*> DirtyBots; // 0x258(0x10)
	char pad_268[0x8]; // 0x268(0x08)

	void InitScriptTimeline(); // Function Solarland.SolarBotWarmSystemScript.InitScriptTimeline // (Final|Native|Public|BlueprintCallable) // @ game+0x2768eb0
	struct USolarBotWarmSystemScript* Get(struct UObject* Context); // Function Solarland.SolarBotWarmSystemScript.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2768d20
};

// Class Solarland.SolarBT_RandomSelecter
// Size: 0x90 (Inherited: 0x90)
struct USolarBT_RandomSelecter : UBTCompositeNode {
};

// Class Solarland.SolarBTD_CheckSelectKeyType
// Size: 0x98 (Inherited: 0x90)
struct USolarBTD_CheckSelectKeyType : UBTDecorator_BlackboardBase {
	enum class ESolarCharacterType CheckType; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class Solarland.SolarBTS_BotActionState
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTS_BotActionState : UBTService_BlackboardBase {
	enum class EBotActionState ActionState; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.SolarBTS_BotChangeQueryFilter
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTS_BotChangeQueryFilter : UBTService_BlackboardBase {
	struct UNavigationQueryFilter* TargetFilter; // 0x98(0x08)
};

// Class Solarland.SolarBTS_BotFocusTo
// Size: 0xc8 (Inherited: 0x98)
struct USolarBTS_BotFocusTo : UBTService_BlackboardBase {
	float LookAtSpeed; // 0x98(0x04)
	bool bUseFocusDirection; // 0x9c(0x01)
	bool bLocalDirection; // 0x9d(0x01)
	char pad_9E[0x2]; // 0x9e(0x02)
	struct FVector FocusDirection; // 0xa0(0x0c)
	struct FRotator DeltaRotation; // 0xac(0x0c)
	bool bRandomFocusDirection; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	float RandomPitchDeviation; // 0xbc(0x04)
	float RandomYawDeviation; // 0xc0(0x04)
	bool bRestorePreviousFocusOnCeaseRelevant; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
};

// Class Solarland.SolarBTS_TagStateUpdate
// Size: 0xb0 (Inherited: 0x70)
struct USolarBTS_TagStateUpdate : UBTService {
	struct FBlackboardKeySelector StateTagNameKey; // 0x70(0x28)
	struct TArray<struct FSolarAITagStateTransition> Transitions; // 0x98(0x10)
	struct FGameplayTag EnterStateTag; // 0xa8(0x08)
};

// Class Solarland.SolarBTS_BotInBattle
// Size: 0x178 (Inherited: 0xb0)
struct USolarBTS_BotInBattle : USolarBTS_TagStateUpdate {
	struct FBlackboardKeySelector EnemyActorKey; // 0xb0(0x28)
	struct FBlackboardKeySelector CanSeeEnemyKey; // 0xd8(0x28)
	struct FBlackboardKeySelector TacticalLocation; // 0x100(0x28)
	struct TMap<enum class EWeaponType, struct FVector2D> WeaponSuitableRangeConfig; // 0x128(0x50)
};

// Class Solarland.SolarBTS_BotInputMove
// Size: 0x80 (Inherited: 0x70)
struct USolarBTS_BotInputMove : UBTService {
	struct FVector2D InputDir; // 0x70(0x08)
	float DeviationAngle; // 0x78(0x04)
	bool bRandomInput; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
};

// Class Solarland.SolarBTS_BotInteractionTrigger
// Size: 0xd8 (Inherited: 0x70)
struct USolarBTS_BotInteractionTrigger : UBTService {
	enum class EBotInteractCondition ConditionToTrigger; // 0x70(0x01)
	bool bLoop; // 0x71(0x01)
	char pad_72[0x2]; // 0x72(0x02)
	float LoopInterval; // 0x74(0x04)
	float LoopRandomDeviation; // 0x78(0x04)
	char pad_7C[0xc]; // 0x7c(0x0c)
	struct TSet<enum class EBotInteractCondition> AllowedConditions; // 0x88(0x50)
};

// Class Solarland.SolarBTS_BotPrepareMode
// Size: 0x78 (Inherited: 0x70)
struct USolarBTS_BotPrepareMode : UBTService {
	float RatioWantWeapon; // 0x70(0x04)
	float RatioWantInteract; // 0x74(0x04)
};

// Class Solarland.SolarBTS_BotSearchControlPoint
// Size: 0x98 (Inherited: 0x98)
struct USolarBTS_BotSearchControlPoint : UBTService_BlueprintBase {

	struct ABattlegroundControlPoint* GetBestControlPoint(struct TArray<struct ABattlegroundControlPoint*>& InControlPoints, struct ASolarCharacter* OwnerChar); // Function Solarland.SolarBTS_BotSearchControlPoint.GetBestControlPoint // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2768db0
};

// Class Solarland.SolarBTS_BotSearchSupplies
// Size: 0xe8 (Inherited: 0x70)
struct USolarBTS_BotSearchSupplies : UBTService {
	bool bOverrideBotConfig; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	struct FSolarBotLootSearchConfig OverrideSearchConfig; // 0x74(0x44)
	bool bOverrideWeaponFeedConfig; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct FSolarBotLootWeaponFeedConfig OverrideWeaponFeedConfig; // 0xc0(0x20)
	float MaxDistanceToShieldUpgradeItemShop; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
};

// Class Solarland.SolarBTS_BotUpdateBunker
// Size: 0xb0 (Inherited: 0x70)
struct USolarBTS_BotUpdateBunker : UBTService {
	struct FBlackboardKeySelector BlackboardKeyEnemy; // 0x70(0x28)
	float FullBunkerHeight; // 0x98(0x04)
	float HalfBunkerHeight; // 0x9c(0x04)
	float MaxDistanceToBunker; // 0xa0(0x04)
	float MaxDistanceToTarget; // 0xa4(0x04)
	float MinDistanceToTarget; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.SolarBTS_BotUpdateOnVehicle
// Size: 0xa8 (Inherited: 0x98)
struct USolarBTS_BotUpdateOnVehicle : UBTService_BlackboardBase {
	bool bUsePathfindingDistance; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	float MinDistanceTakePassenger; // 0x9c(0x04)
	float MaxWaitTimeSeconds; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Solarland.SolarBTS_BotUpdateSafeArea
// Size: 0xa8 (Inherited: 0x70)
struct USolarBTS_BotUpdateSafeArea : UBTService {
	bool bOverrideBotConfig; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	struct FSolarBotSafeAreaConfig DefaultConfig; // 0x74(0x08)
	struct FVector SafeAreaSnapExtent; // 0x7c(0x0c)
	bool bAllowUseSpaceDistance; // 0x88(0x01)
	char pad_89[0x1f]; // 0x89(0x1f)
};

// Class Solarland.SolarBTS_BotUseSniperPos
// Size: 0x90 (Inherited: 0x70)
struct USolarBTS_BotUseSniperPos : UBTService {
	bool bOverrideBotConfig; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	struct FSolarBotUseSniperPosConfig DefaultConfig; // 0x74(0x1c)
};

// Class Solarland.SolarBTS_CheckCanAttack
// Size: 0xe8 (Inherited: 0x98)
struct USolarBTS_CheckCanAttack : UBTService_BlackboardBase {
	struct FBlackboardKeySelector BlackboardKeyInLineSight; // 0x98(0x28)
	struct FBlackboardKeySelector BlackboardKeyInLineSightEx; // 0xc0(0x28)
};

// Class Solarland.SolarBTS_CheckNeedFindVehicle
// Size: 0xf8 (Inherited: 0x98)
struct USolarBTS_CheckNeedFindVehicle : UBTService_BlackboardBase {
	bool bMarkOccupiedAfterVehicleSelected; // 0x98(0x01)
	bool bCleanTargetOnCeaseRelevant; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)
	struct TArray<struct ASolarVehiclePawn*> SolarWheeledVehicleClass; // 0xa0(0x10)
	bool bIgnoreVehicleInPoision; // 0xb0(0x01)
	bool bIgnoreVehicleOffNavmesh; // 0xb1(0x01)
	char pad_B2[0x2]; // 0xb2(0x02)
	struct FVector CheckOnNavmeshExtent; // 0xb4(0x0c)
	struct UNavigationQueryFilter* FilterClass; // 0xc0(0x08)
	struct TArray<int32_t> ExceptVehicleId; // 0xc8(0x10)
	float AcceptableRadius; // 0xd8(0x04)
	float MoveToDistanceFindVehicle; // 0xdc(0x04)
	float RangeFindVehicle; // 0xe0(0x04)
	float HealthTakingVehicle; // 0xe4(0x04)
	float MaxDistanceFindTeamVehicle; // 0xe8(0x04)
	bool bCheckSameTarget; // 0xec(0x01)
	char pad_ED[0x3]; // 0xed(0x03)
	float SameTargetDistThreshold; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
};

// Class Solarland.SolarBTS_CheckNeedRunEQS
// Size: 0x98 (Inherited: 0x98)
struct USolarBTS_CheckNeedRunEQS : UBTService_BlackboardBase {
};

// Class Solarland.SolarBTS_NgaiNearbySupplies
// Size: 0x78 (Inherited: 0x70)
struct USolarBTS_NgaiNearbySupplies : UBTService {
	char pad_70[0x8]; // 0x70(0x08)
};

// Class Solarland.SolarBTS_TeamTaskAllocation
// Size: 0x168 (Inherited: 0x98)
struct USolarBTS_TeamTaskAllocation : UBTService_BlueprintBase {
	float RescueAllocateThresholdScore; // 0x98(0x04)
	float RescueAbandonThresholdScore; // 0x9c(0x04)
	float RescuePunishScore; // 0xa0(0x04)
	float RescueRewardScore; // 0xa4(0x04)
	bool bNeedToRebornBotInBotTeam; // 0xa8(0x01)
	bool bNeedToRebornBotInPlayerTeam; // 0xa9(0x01)
	bool bDebugTaskScore; // 0xaa(0x01)
	bool bDebugEachTaskScore; // 0xab(0x01)
	struct FVector PoisonSnapExtent; // 0xac(0x0c)
	struct FSolarTaskScoringItem CustomTaskScoringItemList; // 0xb8(0x50)
	char pad_108[0x50]; // 0x108(0x50)
	struct ASolarBotAIController* SelfController; // 0x158(0x08)
	struct ASolarCharacter* SelfCharacter; // 0x160(0x08)

	void PostGetCurrentTaskScore(struct FSolarScoringItemStruct& InScoringItemStruct); // Function Solarland.SolarBTS_TeamTaskAllocation.PostGetCurrentTaskScore // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2769170
	float MoveToSafeAreaCostSec(struct ASolarBotAIController* InController); // Function Solarland.SolarBTS_TeamTaskAllocation.MoveToSafeAreaCostSec // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x27690d0
	float MoveToRescueTargetCostSec(struct ASolarBotAIController* InController, struct AActor* TeammateInDanger); // Function Solarland.SolarBTS_TeamTaskAllocation.MoveToRescueTargetCostSec // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2769000
	float MoveToPointCostSec(struct ASolarBotAIController* InController, struct FVector& CenterPoint, float InRadius); // Function Solarland.SolarBTS_TeamTaskAllocation.MoveToPointCostSec // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2768ed0
	void DebugEachTaskScoreItem(struct FSolarScoringItemStruct& TaskScore, enum class ESolarTaskScoringItemType& ItemType, float Score, float Value); // Function Solarland.SolarBTS_TeamTaskAllocation.DebugEachTaskScoreItem // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2768b80
	void DebugAllTaskScore(struct TArray<struct FSolarScoringItemStruct>& TaskScoresList); // Function Solarland.SolarBTS_TeamTaskAllocation.DebugAllTaskScore // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2768ad0
	bool CheckIfCharacterInSafeArea(struct AActor* InActor); // Function Solarland.SolarBTS_TeamTaskAllocation.CheckIfCharacterInSafeArea // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2768a30
	bool CheckIfCharacterInPoisonCircle(struct AActor* InActor); // Function Solarland.SolarBTS_TeamTaskAllocation.CheckIfCharacterInPoisonCircle // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2768990
	bool CheakIsLeader(struct ASolarBotAIController* InController); // Function Solarland.SolarBTS_TeamTaskAllocation.CheakIsLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27688f0
	bool CanRescueCurrentTarget(struct ASolarCharacter* RescueTarget); // Function Solarland.SolarBTS_TeamTaskAllocation.CanRescueCurrentTarget // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2768850
	bool CanAllocateCurrentTarget(struct ASolarBotAIController* InController); // Function Solarland.SolarBTS_TeamTaskAllocation.CanAllocateCurrentTarget // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x27687b0
};

// Class Solarland.SolarBTT_BotCharging
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_BotCharging : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_BotFire
// Size: 0x108 (Inherited: 0x98)
struct USolarBTT_BotFire : UBTTask_BlackboardBase {
	bool bEnableOffset; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	float OffsetRadiusMax; // 0x9c(0x04)
	float OffsetRadiusMin; // 0xa0(0x04)
	float MaxFireDuration; // 0xa4(0x04)
	bool bEnableShootSimulator; // 0xa8(0x01)
	bool bForceReset; // 0xa9(0x01)
	bool bOverrideDefaultShootConfig; // 0xaa(0x01)
	char pad_AB[0x1]; // 0xab(0x01)
	struct FSolarBotShootConfig ShootConfig; // 0xac(0x58)
	char pad_104[0x4]; // 0x104(0x04)
};

// Class Solarland.SolarBTT_BotContinueFire
// Size: 0x110 (Inherited: 0x108)
struct USolarBTT_BotContinueFire : USolarBTT_BotFire {
	float FireDurationTime; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
};

// Class Solarland.SolarBTT_BotCruise
// Size: 0x78 (Inherited: 0x70)
struct USolarBTT_BotCruise : UBTTaskNode {
	float SecDelayFollowJump; // 0x70(0x04)
	float SecDelayRandomDeviation; // 0x74(0x04)
};

// Class Solarland.SolarBTT_BotCruiseBehindTarget
// Size: 0xa0 (Inherited: 0x70)
struct USolarBTT_BotCruiseBehindTarget : UBTTaskNode {
	struct FBlackboardKeySelector TargetToFollow; // 0x70(0x28)
	float SecDelayFollowJump; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.SolarBTT_BotCruiseWhenNearest
// Size: 0xa0 (Inherited: 0x70)
struct USolarBTT_BotCruiseWhenNearest : UBTTaskNode {
	struct FBlackboardKeySelector TargetToCheck; // 0x70(0x28)
	float SecDelayRandomDeviation; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.SolarBTT_BotInputMove
// Size: 0x80 (Inherited: 0x70)
struct USolarBTT_BotInputMove : UBTTaskNode {
	struct FVector2D InputDir; // 0x70(0x08)
	float DeviationAngle; // 0x78(0x04)
	bool bRandomInput; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
};

// Class Solarland.SolarBTT_BotInteractWithShieldUpgradeItemShop
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_BotInteractWithShieldUpgradeItemShop : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_BotJet
// Size: 0xb8 (Inherited: 0x98)
struct USolarBTT_BotJet : UBTTask_BlackboardBase {
	enum class EJetPackMode JetPackMode; // 0x98(0x01)
	enum class EJetTaskFinishMode FinishMode; // 0x99(0x01)
	bool bTestBlock; // 0x9a(0x01)
	char pad_9B[0x1]; // 0x9b(0x01)
	float DisplacementExpected; // 0x9c(0x04)
	float MinDisplacementExpected; // 0xa0(0x04)
	bool bUseLocalInput; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	struct FVector2D LocalInput; // 0xa8(0x08)
	bool bSelectorAsTarget; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
};

// Class Solarland.SolarBTT_BotJump
// Size: 0x78 (Inherited: 0x70)
struct USolarBTT_BotJump : UBTTaskNode {
	enum class EJumpTaskFinishMode FinishMode; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Solarland.SolarBTT_BotLookAt
// Size: 0xb8 (Inherited: 0x98)
struct USolarBTT_BotLookAt : UBTTask_BlackboardBase {
	struct FRotator DeltaRotator; // 0x98(0x0c)
	bool bRandomRot; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	float LookAtSpeed; // 0xa8(0x04)
	bool bFinishTaskAfterReachTarget; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
	float ReachAngleTolerance; // 0xb0(0x04)
	float ReachTimeOut; // 0xb4(0x04)
};

// Class Solarland.SolarBTT_BotModifyShootParam
// Size: 0x88 (Inherited: 0x70)
struct USolarBTT_BotModifyShootParam : UBTTaskNode {
	enum class EBotShootTargetType ShootTargetType; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	float ShootDisperse; // 0x74(0x04)
	float HitRate; // 0x78(0x04)
	float DamageRate; // 0x7c(0x04)
	float DamageFactor; // 0x80(0x04)
	bool bModifyShootDisperse; // 0x84(0x01)
	bool bModifyHitRate; // 0x85(0x01)
	bool bModifyDamageRate; // 0x86(0x01)
	bool bModifyDamageFactor; // 0x87(0x01)
};

// Class Solarland.SolarBTT_BotMoveTo
// Size: 0xe0 (Inherited: 0xb0)
struct USolarBTT_BotMoveTo : UBTTask_MoveTo {
	struct FBlackboardKeySelector BBK_AcceptanceRadius; // 0xb0(0x28)
	bool bMoveToGoalOnLastSegment; // 0xd8(0x01)
	bool bStopMovementOnFinish; // 0xd9(0x01)
	char pad_DA[0x6]; // 0xda(0x06)
};

// Class Solarland.SolarBTT_BotOnceFire
// Size: 0x110 (Inherited: 0x108)
struct USolarBTT_BotOnceFire : USolarBTT_BotFire {
	int32_t OnceFireTimes; // 0x108(0x04)
	float OnceFireIntervalTime; // 0x10c(0x04)
};

// Class Solarland.SolarBTT_BotPickupItem
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTT_BotPickupItem : UBTTask_BlackboardBase {
	float MaxPickUpDistSq; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.SolarBTT_BotRechargeShield
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_BotRechargeShield : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_BotRescueTeammate
// Size: 0xc0 (Inherited: 0x70)
struct USolarBTT_BotRescueTeammate : UBTTaskNode {
	struct FBlackboardKeySelector CharacterToRescue; // 0x70(0x28)
	struct FBlackboardKeySelector TargetBox; // 0x98(0x28)
};

// Class Solarland.SolarBTT_BotRoleSkill
// Size: 0x140 (Inherited: 0x98)
struct USolarBTT_BotRoleSkill : UBTTask_BlackboardBase {
	struct FGameplayTag RoleAbilityTag; // 0x98(0x08)
	struct FBlackboardKeySelector LocationExpected; // 0xa0(0x28)
	float TimeOutSec; // 0xc8(0x04)
	float HoldSec; // 0xcc(0x04)
	bool bEndOnRelease; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	float ProjectileAngleAllowableError; // 0xd4(0x04)
	struct FBlackboardKeySelector SummonItemLocation; // 0xd8(0x28)
	struct FBlackboardKeySelector SummonItemRadius; // 0x100(0x28)
	struct FVector OffsetVec; // 0x128(0x0c)
	float SummonTestRadius; // 0x134(0x04)
	char pad_138[0x8]; // 0x138(0x08)
};

// Class Solarland.SolarBTT_BotSkyDiving
// Size: 0xf0 (Inherited: 0x70)
struct USolarBTT_BotSkyDiving : UBTTaskNode {
	struct FBlackboardKeySelector ActorFocused; // 0x70(0x28)
	struct FBlackboardKeySelector LocationFocused; // 0x98(0x28)
	bool bOverrideBotConfig; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	struct FSolarBotSkyDivingConfig DefaultConfig; // 0xc4(0x24)
	float DelaySecPreserved; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
};

// Class Solarland.SolarBTT_BotSprint
// Size: 0x78 (Inherited: 0x70)
struct USolarBTT_BotSprint : UBTTaskNode {
	bool bEnterSprint; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Solarland.SolarBTT_BotStopRoleAbility
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTT_BotStopRoleAbility : UBTTask_BlackboardBase {
	struct FGameplayTag AbilityTag; // 0x98(0x08)
};

// Class Solarland.SolarBTT_BotSwitchWeapon
// Size: 0x78 (Inherited: 0x70)
struct USolarBTT_BotSwitchWeapon : UBTTaskNode {
	enum class EWeaponType WeaponType; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Solarland.SolarBTT_BotTeleport
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTT_BotTeleport : UBTTask_BlackboardBase {
	bool bNoCheck; // 0x98(0x01)
	bool bTeleportVehicle; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)
};

// Class Solarland.SolarBTT_BotTreatment
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_BotTreatment : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_BotUpgradeShield
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTT_BotUpgradeShield : UBTTask_BlackboardBase {
	struct FGameplayTag ShieldUpdateAbilityTag; // 0x98(0x08)
};

// Class Solarland.SolarBTT_BotUseSkywardDiveLauncher
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_BotUseSkywardDiveLauncher : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_BotVehicleFire
// Size: 0x118 (Inherited: 0x108)
struct USolarBTT_BotVehicleFire : USolarBTT_BotFire {
	float DurationTime; // 0x108(0x04)
	float ChargePercentMin; // 0x10c(0x04)
	float ChargePercentMax; // 0x110(0x04)
	float SecFireAfterAimLocked; // 0x114(0x04)
};

// Class Solarland.SolarBTT_BotVehicleSkill
// Size: 0xa8 (Inherited: 0x98)
struct USolarBTT_BotVehicleSkill : UBTTask_BlackboardBase {
	int32_t SeatIndex; // 0x98(0x04)
	int32_t AbilityIndex; // 0x9c(0x04)
	bool bCancel; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
};

// Class Solarland.SolarBTT_BotWaitCruiseEnd
// Size: 0x70 (Inherited: 0x70)
struct USolarBTT_BotWaitCruiseEnd : UBTTaskNode {
};

// Class Solarland.SolarBTT_BotWeaponFire
// Size: 0xf8 (Inherited: 0x98)
struct USolarBTT_BotWeaponFire : UBTTask_BlackboardBase {
	float MaxFireDuration; // 0x98(0x04)
	bool bOverrideDefaultShootConfig; // 0x9c(0x01)
	bool bForceReset; // 0x9d(0x01)
	char pad_9E[0x2]; // 0x9e(0x02)
	struct FSolarBotShootConfig ShootConfig; // 0xa0(0x58)
};

// Class Solarland.SolarBTT_FindRandomLocation
// Size: 0xc8 (Inherited: 0x98)
struct USolarBTT_FindRandomLocation : UBTTask_BlackboardBase {
	struct FBlackboardKeySelector CenterBlackboardSelector; // 0x98(0x28)
	float SearchRadius; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
};

// Class Solarland.SolarBTT_GetOnOrOffVehicle
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTT_GetOnOrOffVehicle : UBTTask_BlackboardBase {
	bool bGetOnVehicle; // 0x98(0x01)
	bool bMarkBlockAfterOffVehicle; // 0x99(0x01)
	bool bProhibitionOfGettingOnOtherCar; // 0x9a(0x01)
	char pad_9B[0x5]; // 0x9b(0x05)
};

// Class Solarland.SolarBTT_RunBehaviorDynamic
// Size: 0x88 (Inherited: 0x88)
struct USolarBTT_RunBehaviorDynamic : UBTTask_RunBehaviorDynamic {
};

// Class Solarland.SolarBTT_SetBotAIEnemyTarget
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_SetBotAIEnemyTarget : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_SpawnVehicle
// Size: 0x108 (Inherited: 0x98)
struct USolarBTT_SpawnVehicle : UBTTask_BlackboardBase {
	struct TArray<int32_t> SpawnIds; // 0x98(0x10)
	bool bUsingSelectedSpawnId; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
	struct FBlackboardKeySelector SelectedSpawnId; // 0xb0(0x28)
	struct FBlackboardKeySelector SpawnedVehicle; // 0xd8(0x28)
	float SpawnHeightOffset; // 0x100(0x04)
	float SpawnFailedSec; // 0x104(0x04)
};

// Class Solarland.SolarBullet
// Size: 0x388 (Inherited: 0x228)
struct ASolarBullet : AActor {
	float TotalEffectTime; // 0x228(0x04)
	bool bAttached; // 0x22c(0x01)
	bool bShowHitCharacter; // 0x22d(0x01)
	bool bForceShowHitOnPenetrable; // 0x22e(0x01)
	bool bShowHitToTeammate; // 0x22f(0x01)
	bool bShowHitWater; // 0x230(0x01)
	char pad_231[0x7]; // 0x231(0x07)
	struct UParticleSystem* BulletEffect; // 0x238(0x08)
	struct UParticleSystem* TrajectoryEffect; // 0x240(0x08)
	struct UParticleSystem* TrajectoryEffectOther; // 0x248(0x08)
	struct FSoftObjectPath SimpleCanisterShotEffectPath; // 0x250(0x18)
	struct UParticleSystem* TrajectoryBeamEffect; // 0x268(0x08)
	struct UParticleSystem* TrajectoryBeamEffectOther; // 0x270(0x08)
	struct UParticleSystem* HitEffect; // 0x278(0x08)
	struct UParticleSystem* MuzzleEffect; // 0x280(0x08)
	bool bKeepOneActivate; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct UParticleSystem* MuzzleEffectScope; // 0x290(0x08)
	struct UParticleSystem* MuzzleEffectOther; // 0x298(0x08)
	struct UParticleSystem* FlameArresterMuzzleEffect; // 0x2a0(0x08)
	struct UParticleSystem* FlameArresterMuzzleEffectScope; // 0x2a8(0x08)
	struct UParticleSystem* FlameArresterMuzzleEffectOther; // 0x2b0(0x08)
	struct UParticleSystem* SpecialEffect; // 0x2b8(0x08)
	struct UParticleSystem* DecalEffect; // 0x2c0(0x08)
	struct UParticleSystem* DecalEffect2; // 0x2c8(0x08)
	struct FSoftObjectPath ShieldEffect; // 0x2d0(0x18)
	bool bOverrideCharacterHitFX; // 0x2e8(0x01)
	char pad_2E9[0x7]; // 0x2e9(0x07)
	struct TMap<enum class EPhysicalSurface, struct FSoftObjectPath> PhysicsHitEffects; // 0x2f0(0x50)
	float DecalLifeSpan; // 0x340(0x04)
	char pad_344[0x4]; // 0x344(0x04)
	struct UParticleSystem* ShellCaseEffect; // 0x348(0x08)
	struct UParticleSystem* ShellCaseEffectOnScope; // 0x350(0x08)
	bool CanExplodeWhenOutRange; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)
	struct FString HoldingPreViewSound_1P; // 0x360(0x10)
	struct FString HoldingPreViewSound_3P; // 0x370(0x10)
	char BulletCollisionType; // 0x380(0x01)
	char pad_381[0x7]; // 0x381(0x07)

	void OnPlayImpactEffect(struct UParticleSystemComponent* PSC); // Function Solarland.SolarBullet.OnPlayImpactEffect // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct FSoftObjectPath GetHitPhysicEffectPath(enum class EPhysicalSurface& HitSurface); // Function Solarland.SolarBullet.GetHitPhysicEffectPath // (Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x276c6f0
};

// Class Solarland.SolarBulletDecal
// Size: 0x238 (Inherited: 0x228)
struct ASolarBulletDecal : AActor {
	struct UParticleSystemComponent* DecalParticle; // 0x228(0x08)
	char pad_230[0x8]; // 0x230(0x08)
};

// Class Solarland.SolarBurstItemActor
// Size: 0x420 (Inherited: 0x408)
struct ASolarBurstItemActor : ASolarItemActor {
	char pad_408[0x8]; // 0x408(0x08)
	struct ASolarTreasureBoxActor* OwnerBox; // 0x410(0x08)
	struct USolarItemBurstShowComponent* BurstShowComponent; // 0x418(0x08)
};

// Class Solarland.SolarBurstItemComponent
// Size: 0xd8 (Inherited: 0xb0)
struct USolarBurstItemComponent : UActorComponent {
	int32_t OutcomeID; // 0xb0(0x04)
	struct FItemBurstParam BurstParam; // 0xb4(0x1c)
	bool bCanBurstItem; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)

	void BurstOutcomeItems(); // Function Solarland.SolarBurstItemComponent.BurstOutcomeItems // (Final|Native|Public|BlueprintCallable) // @ game+0x276c5f0
};

// Class Solarland.SolarBurstRocketBullet
// Size: 0x388 (Inherited: 0x228)
struct ASolarBurstRocketBullet : AActor {
	int32_t BurstSum; // 0x228(0x04)
	float BurstInterval; // 0x22c(0x04)
	float DamageRadius; // 0x230(0x04)
	float DamagePerBullet; // 0x234(0x04)
	struct TArray<enum class EObjectTypeQuery> CanDamageObjectTypes; // 0x238(0x10)
	float SpawnerAnimTime; // 0x248(0x04)
	struct FName SpawnerMeshMaterialParamName; // 0x24c(0x08)
	char pad_254[0x4]; // 0x254(0x04)
	struct UAmmoConfig* Ammo; // 0x258(0x08)
	struct FVector RocketSpawnerMeshOffset; // 0x260(0x0c)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct TArray<struct FName> MuzzleSocketNames; // 0x270(0x10)
	float SpawnerMoveInterpSpeed; // 0x280(0x04)
	float SpawnerMoveInterpMinSpeed; // 0x284(0x04)
	struct USkeletalMesh* SpawnerTemplateMesh; // 0x288(0x08)
	bool bUseForwardAxisY; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)
	struct USkeletalMeshComponent* SpawnerMesh; // 0x298(0x08)
	struct UAnimationAsset* SpawnerIdleAnim; // 0x2a0(0x08)
	struct UAnimationAsset* SpawnerFireAnim; // 0x2a8(0x08)
	struct FString SpawnerStartSoundName1P; // 0x2b0(0x10)
	struct FString SpawnerStartSoundName3P; // 0x2c0(0x10)
	struct FString SpawnerEndSoundName1P; // 0x2d0(0x10)
	struct FString SpawnerEndSoundName3P; // 0x2e0(0x10)
	struct FString FireSoundName1P; // 0x2f0(0x10)
	struct FString FireSoundName3P; // 0x300(0x10)
	struct FString FireImpactSoundName; // 0x310(0x10)
	bool bTeammateDamage; // 0x320(0x01)
	bool bDrawDebugAimLine; // 0x321(0x01)
	bool bDrawDebugExplodeSphere; // 0x322(0x01)
	bool bDrawDebugHitActor; // 0x323(0x01)
	char pad_324[0x4]; // 0x324(0x04)
	struct ASolarCharacter* OwnerCharacter; // 0x328(0x08)
	struct USolarWeaponGA_Rocket* OwnerRocketGA; // 0x330(0x08)
	struct UAkComponent* HitAkObj; // 0x338(0x08)
	struct FRotator PlayerRotation; // 0x340(0x0c)
	char pad_34C[0x14]; // 0x34c(0x14)
	struct TArray<struct ASolarProjBullet*> FiredBullets; // 0x360(0x10)
	char pad_370[0x8]; // 0x370(0x08)
	struct TArray<struct USplineComponent*> RocketPathArray; // 0x378(0x10)

	void ServerUpdateCharacterRotation(struct FRotator InRotation); // Function Solarland.SolarBurstRocketBullet.ServerUpdateCharacterRotation // (Net|Native|Event|Protected|NetServer|HasDefaults) // @ game+0x26e7f00
	void OnSingleRocketFire(struct ASolarCharacter* InOwnerCharacter, bool bIsLocalPlayer); // Function Solarland.SolarBurstRocketBullet.OnSingleRocketFire // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnServerSpawnFireRocket(struct FSpawnProjParam& InParam); // Function Solarland.SolarBurstRocketBullet.OnServerSpawnFireRocket // (Final|Native|Protected|HasOutParms) // @ game+0x276cac0
	void OnRocketStop(struct FHitResult& InHitResult); // Function Solarland.SolarBurstRocketBullet.OnRocketStop // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x276c9e0
	void OnBurstRocketDeactive(struct ASolarCharacter* InOwnerCharacter, bool bIsLocalPlayer); // Function Solarland.SolarBurstRocketBullet.OnBurstRocketDeactive // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnBurstRocketActive(struct ASolarCharacter* InOwnerCharacter, bool bIsLocalPlayer); // Function Solarland.SolarBurstRocketBullet.OnBurstRocketActive // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnBulletStopMove(struct FHitResult& HitResult, bool bBlocking); // Function Solarland.SolarBurstRocketBullet.OnBulletStopMove // (Final|Native|Protected|HasOutParms) // @ game+0x276c8b0
	struct USplineComponent* GetRocketPath(int32_t InIndex); // Function Solarland.SolarBurstRocketBullet.GetRocketPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x276c7e0
	void ExplodeAndDamageDirectly(struct FHitResult& HitResult); // Function Solarland.SolarBurstRocketBullet.ExplodeAndDamageDirectly // (Final|Native|Protected|HasOutParms) // @ game+0x276c610
};

// Class Solarland.SolarBusinessCardCharacter
// Size: 0x228 (Inherited: 0x228)
struct ASolarBusinessCardCharacter : AActor {

	void SetSkin(struct USkeletalMesh* LoadedSkinRes, struct UMaterialInterface* LoadedCharaSkinRes); // Function Solarland.SolarBusinessCardCharacter.SetSkin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarButton
// Size: 0x610 (Inherited: 0x150)
struct USolarButton : UContentWidget {
	struct USlateWidgetStyleAsset* Style; // 0x150(0x08)
	char pad_158[0x8]; // 0x158(0x08)
	struct FButtonStyle WidgetStyle; // 0x160(0x3e0)
	enum class ESolarImageFillType ImageFillType; // 0x540(0x01)
	char pad_541[0x3]; // 0x541(0x03)
	float ImageFillRatioHorizontal; // 0x544(0x04)
	float ImageFillRatioVertical; // 0x548(0x04)
	float ImageFillPixelLeft; // 0x54c(0x04)
	float ImageFillPixelTop; // 0x550(0x04)
	float ImageFillPixelRight; // 0x554(0x04)
	float ImageFillPixelBottom; // 0x558(0x04)
	struct FLinearColor ColorAndOpacity; // 0x55c(0x10)
	struct FLinearColor BackgroundColor; // 0x56c(0x10)
	bool bReleaseUnfocus; // 0x57c(0x01)
	bool bEnableClickSound; // 0x57d(0x01)
	char pad_57E[0x2]; // 0x57e(0x02)
	struct FString ClickSoundEventName; // 0x580(0x10)
	enum class EButtonClickMethod ClickMethod; // 0x590(0x01)
	enum class EButtonTouchMethod TouchMethod; // 0x591(0x01)
	enum class EButtonPressMethod PressMethod; // 0x592(0x01)
	bool IsFocusable; // 0x593(0x01)
	char pad_594[0x4]; // 0x594(0x04)
	struct FMulticastInlineDelegate OnClicked; // 0x598(0x10)
	struct FMulticastInlineDelegate OnPressed; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnReleased; // 0x5b8(0x10)
	struct FMulticastInlineDelegate OnHovered; // 0x5c8(0x10)
	struct FMulticastInlineDelegate OnUnhovered; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnFocusLosted; // 0x5e8(0x10)
	char pad_5F8[0x18]; // 0x5f8(0x18)

	void SetTouchMethod(enum class EButtonTouchMethod InTouchMethod); // Function Solarland.SolarButton.SetTouchMethod // (Final|Native|Public|BlueprintCallable) // @ game+0x276cf60
	void SetStyle(struct FButtonStyle& InStyle); // Function Solarland.SolarButton.SetStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x276ce80
	void SetPressMethod(enum class EButtonPressMethod InPressMethod); // Function Solarland.SolarButton.SetPressMethod // (Final|Native|Public|BlueprintCallable) // @ game+0x276ce00
	void SetImageFillType(enum class ESolarImageFillType InImageFillType); // Function Solarland.SolarButton.SetImageFillType // (Final|Native|Public|BlueprintCallable) // @ game+0x276cd80
	void SetColorAndOpacity(struct FLinearColor InColorAndOpacity); // Function Solarland.SolarButton.SetColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x276ccf0
	void SetClickMethod(enum class EButtonClickMethod InClickMethod); // Function Solarland.SolarButton.SetClickMethod // (Final|Native|Public|BlueprintCallable) // @ game+0x276cc70
	void SetBackgroundColor(struct FLinearColor InBackgroundColor); // Function Solarland.SolarButton.SetBackgroundColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x276cbe0
	bool IsPressed(); // Function Solarland.SolarButton.IsPressed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x276c880
};

// Class Solarland.SolarButtonSlot
// Size: 0x60 (Inherited: 0x38)
struct USolarButtonSlot : UPanelSlot {
	struct FMargin Padding; // 0x38(0x10)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x48(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x49(0x01)
	char pad_4A[0x16]; // 0x4a(0x16)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function Solarland.SolarButtonSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x278c200
	void SetPadding(struct FMargin InPadding); // Function Solarland.SolarButtonSlot.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x278c0e0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function Solarland.SolarButtonSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x278bd60
};

// Class Solarland.SolarCameraActor
// Size: 0x280 (Inherited: 0x228)
struct ASolarCameraActor : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct ASolarPlayerController* MasterPlayerController; // 0x230(0x08)
	char pad_238[0x48]; // 0x238(0x48)

	void SetViewTarget(struct AActor* InTarget); // Function Solarland.SolarCameraActor.SetViewTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x278c280
	struct AActor* GetViewTarget(); // Function Solarland.SolarCameraActor.GetViewTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x27829d0
	struct USolarNoSpringCameraComponent* GetCameraComponent(); // Function Solarland.SolarCameraActor.GetCameraComponent // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarCameraComponent
// Size: 0xa30 (Inherited: 0x950)
struct USolarCameraComponent : UCameraComponent {
	struct USolarSpringArmComponent* SpringArm; // 0x950(0x08)
	char pad_958[0x98]; // 0x958(0x98)
	float ConfigDistanceToTarget; // 0x9f0(0x04)
	struct FVector ConfigCameraOffset; // 0x9f4(0x0c)
	struct FVector ConfigTargetOffset; // 0xa00(0x0c)
	float ConfigFOV; // 0xa0c(0x04)
	float ViewPitchMax; // 0xa10(0x04)
	float ViewPitchMin; // 0xa14(0x04)
	float ViewYawMax; // 0xa18(0x04)
	float ViewYawMin; // 0xa1c(0x04)
	float CameraOccupiedRoom; // 0xa20(0x04)
	bool EnableDistanceSmooth; // 0xa24(0x01)
	bool EnableFOVSmooth; // 0xa25(0x01)
	bool bEnableCameraOffsetSmooth; // 0xa26(0x01)
	bool bEnableTargetOffsetSmooth; // 0xa27(0x01)
	char pad_A28[0x8]; // 0xa28(0x08)

	struct USolarCameraComponent* GetCameraComponentFromActor(struct AActor* InActor); // Function Solarland.SolarCameraComponent.GetCameraComponentFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2780910
};

// Class Solarland.SolarCameraCompsInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarCameraCompsInterface : UInterface {

	struct USolarSpringArmComponent* GetSolarSpringArmComponent(); // Function Solarland.SolarCameraCompsInterface.GetSolarSpringArmComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x26525f0
	struct USolarCameraComponent* GetSolarCameraComponent(); // Function Solarland.SolarCameraCompsInterface.GetSolarCameraComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x27821a0
};

// Class Solarland.SolarCameraShake
// Size: 0x180 (Inherited: 0x160)
struct USolarCameraShake : UCameraShake {
	struct UCameraAnimationSequence* AnimSequence; // 0x158(0x08)
	struct USequenceCameraShakePattern* SequenceShakePattern; // 0x160(0x08)
	char pad_170[0x10]; // 0x170(0x10)
};

// Class Solarland.SolarCapsuleActor
// Size: 0x390 (Inherited: 0x228)
struct ASolarCapsuleActor : AActor {
	struct FSoftObjectPath StartCruisingPath; // 0x228(0x18)
	struct FSoftObjectPath StopCruisingPath; // 0x240(0x18)
	struct FName CruiseCharacterBindingName; // 0x258(0x08)
	struct FName CruiseCapsuleBindingName; // 0x260(0x08)
	struct FName CruiseCameraBindingName; // 0x268(0x08)
	float SequenceCameraBlendDuration; // 0x270(0x04)
	char pad_274[0x4]; // 0x274(0x04)
	struct UAnimationAsset* CapsuleCruisingLoopAnim; // 0x278(0x08)
	struct UAnimSequence* CharacterCruiseLoopAnim; // 0x280(0x08)
	struct FSoftObjectPath CapsuleCruisingStopAnimPath; // 0x288(0x18)
	struct UAnimSequence* CharacterCruiseEndAnim; // 0x2a0(0x08)
	struct USkeletalMeshComponent* CapsuleSkeletalMesh; // 0x2a8(0x08)
	struct TArray<struct UStaticMeshComponent*> AirflowMeshEffects; // 0x2b0(0x10)
	struct TArray<struct UParticleSystemComponent*> AirflowParticleEffects; // 0x2c0(0x10)
	struct ALevelSequenceActor* SequenceActor; // 0x2d0(0x08)
	struct ACineCameraActor* SequenceCamera; // 0x2d8(0x08)
	struct ULevelSequence* StartCruisingSequence; // 0x2e0(0x08)
	struct ULevelSequence* StopCruisingSequence; // 0x2e8(0x08)
	struct UAnimationAsset* CapsuleCruisingEndAnim; // 0x2f0(0x08)
	struct ASolarCharacter* BoardedCharacterPrivate; // 0x2f8(0x08)
	struct UParticleSystemComponent* CloudParticleComponent; // 0x300(0x08)
	struct FSoftObjectPath CloudParticlePath; // 0x308(0x18)
	char pad_320[0x20]; // 0x320(0x20)
	struct UParticleSystem* CloudParticleAsset; // 0x340(0x08)
	char pad_348[0x8]; // 0x348(0x08)
	struct FSoftObjectPath CapsuleSinglyCruisingStopAnimPath; // 0x350(0x18)
	struct UAnimationAsset* CapsuleSinglyCruisingEndAnim; // 0x368(0x08)
	struct FName FX_MashCapsuleActorBindingName; // 0x370(0x08)
	struct ASkeletalMeshActor* FX_MashCapsuleActor; // 0x378(0x08)
	struct ULevelSequence* StartSingleCruiseSequence; // 0x380(0x08)
	float CharacterParachuteAnimTime; // 0x388(0x04)
	char pad_38C[0x4]; // 0x38c(0x04)

	void StopCruiseSequenceFinished(); // Function Solarland.SolarCapsuleActor.StopCruiseSequenceFinished // (Final|Native|Protected) // @ game+0x278cfb0
	void StartCruiseSequenceFinished(); // Function Solarland.SolarCapsuleActor.StartCruiseSequenceFinished // (Final|Native|Protected) // @ game+0x278cb20
	void PlayStopSinglyCruiseAnimation(); // Function Solarland.SolarCapsuleActor.PlayStopSinglyCruiseAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x2787360
	void PlayStopCruiseSequence(); // Function Solarland.SolarCapsuleActor.PlayStopCruiseSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x2787340
	void PlayStopCruiseAnimation(); // Function Solarland.SolarCapsuleActor.PlayStopCruiseAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x2787320
	void PlayStartCruiseSequence(); // Function Solarland.SolarCapsuleActor.PlayStartCruiseSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x2787300
	void PlayCruiseLoopAnimation(); // Function Solarland.SolarCapsuleActor.PlayCruiseLoopAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x27870c0
	void OnSingleCruiseLevelSequenceFinished(); // Function Solarland.SolarCapsuleActor.OnSingleCruiseLevelSequenceFinished // (Final|Native|Public) // @ game+0x2786d00
	void HideCapsuleAirflowVFX(); // Function Solarland.SolarCapsuleActor.HideCapsuleAirflowVFX // (Final|Native|Public|BlueprintCallable) // @ game+0x2782ea0
	struct ASolarCapsuleActor* CreateCapsuleActorForBoarder(struct ASolarCharacter* InBoarder, struct ASolarCapsuleActor* CapsuleActorClass); // Function Solarland.SolarCapsuleActor.CreateCapsuleActorForBoarder // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x277f500
};

// Class Solarland.SolarCapsuleRoot
// Size: 0x400 (Inherited: 0x228)
struct ASolarCapsuleRoot : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct USceneComponent* RootComp; // 0x230(0x08)
	struct UWidgetComponent* LocationSign; // 0x238(0x08)
	char pad_240[0x10]; // 0x240(0x10)
	float CatchupDuration; // 0x250(0x04)
	float CatchupBaseLerp; // 0x254(0x04)
	char pad_258[0x24]; // 0x258(0x24)
	struct FMiniMapAirlineData MiniMapData; // 0x27c(0x30)
	struct FUsingAirlineData CurrentAirline; // 0x2ac(0x44)
	float CruiseStartTime; // 0x2f0(0x04)
	struct FVector CruiseStartLoc; // 0x2f4(0x0c)
	struct FRotator CruiseStartRot; // 0x300(0x0c)
	int32_t ForceParachuteWarningTime; // 0x30c(0x04)
	float MaxAllowedSmoothDistance; // 0x310(0x04)
	float ClientSpeedScale; // 0x314(0x04)
	float ClientRotationSmoothSpeed; // 0x318(0x04)
	char pad_31C[0x1c]; // 0x31c(0x1c)
	struct UCapsuleFormationData* CapsuleFormationData; // 0x338(0x08)
	struct TMap<struct FVector, struct FTeamFormationUnit> CruiseFormation; // 0x340(0x50)
	struct TArray<struct FBoarderInfo> BoardingPlayerList; // 0x390(0x10)
	char pad_3A0[0x60]; // 0x3a0(0x60)

	void ServerUnBoardCharacter(struct ASolarCharacter* Character); // Function Solarland.SolarCapsuleRoot.ServerUnBoardCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x278b850
	void OnRep_MiniMapAirline(); // Function Solarland.SolarCapsuleRoot.OnRep_MiniMapAirline // (Final|Native|Protected) // @ game+0x2786250
	void OnRep_CurrentAirline(); // Function Solarland.SolarCapsuleRoot.OnRep_CurrentAirline // (Final|Native|Protected) // @ game+0x2785e80
	void LuaNotifyCruiseState(bool bStart); // Function Solarland.SolarCapsuleRoot.LuaNotifyCruiseState // (Final|Native|Public) // @ game+0x2784920
	struct FMiniMapAirlineData K2_GetAirlineData(); // Function Solarland.SolarCapsuleRoot.K2_GetAirlineData // (Final|Native|Public|BlueprintCallable) // @ game+0x2784470
	struct ASolarCapsuleRoot* GetSolarCapsuleRoot(struct UObject* WorldContextObject); // Function Solarland.SolarCapsuleRoot.GetSolarCapsuleRoot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27821d0
	float GetCruiseProgress(); // Function Solarland.SolarCapsuleRoot.GetCruiseProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x2780d50
	int32_t BoardingCharacter(struct FBoarderInfo& BoarderInfo); // Function Solarland.SolarCapsuleRoot.BoardingCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x277d310
};

// Class Solarland.SingleCapsuleRootActor
// Size: 0x268 (Inherited: 0x228)
struct ASingleCapsuleRootActor : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct FSingleCruiseParamForReplicated SingleCruiseParam; // 0x230(0x28)
	float ParachuteTime; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)
	enum class ESingleCruiseState SingleCruiseState; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)

	void OnRep_SingleCruiseState(enum class ESingleCruiseState LastCruiseState); // Function Solarland.SingleCapsuleRootActor.OnRep_SingleCruiseState // (Final|Native|Protected) // @ game+0x2786430
};

// Class Solarland.SolarInteractableActor
// Size: 0x238 (Inherited: 0x228)
struct ASolarInteractableActor : AActor {
	enum class EInteractableType InteractType; // 0x228(0x01)
	char pad_229[0xb]; // 0x229(0x0b)
	char bUseSceneActorOptimization; // 0x234(0x01)
	char pad_235[0x3]; // 0x235(0x03)

	void SetUserActor(struct AActor* InUser); // Function Solarland.SolarInteractableActor.SetUserActor // (Final|Native|Public|BlueprintCallable) // @ game+0x2811200
	void InteractWithActor(struct AActor* InActor); // Function Solarland.SolarInteractableActor.InteractWithActor // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct AActor* GetUserActor(); // Function Solarland.SolarInteractableActor.GetUserActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x28107b0
};

// Class Solarland.SolarCarPad
// Size: 0x2e8 (Inherited: 0x238)
struct ASolarCarPad : ASolarInteractableActor {
	float Duration; // 0x238(0x04)
	float SpeedMultiplier; // 0x23c(0x04)
	struct TMap<uint32_t, float> SpeedMultipliers; // 0x240(0x50)
	struct TMap<uint32_t, float> PitchOffsets; // 0x290(0x50)
	float DistanceThresholdForValidation; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)
};

// Class Solarland.SolarCharacterAIController
// Size: 0x360 (Inherited: 0x358)
struct ASolarCharacterAIController : ASolarAIControllerBase {
	char pad_358[0x8]; // 0x358(0x08)

	struct ASolarCharacter* GetSolarCharacter(); // Function Solarland.SolarCharacterAIController.GetSolarCharacter // (Native|Public|Const) // @ game+0x2790c30
};

// Class Solarland.SolarCharacterBillboardIconComponent
// Size: 0x3e0 (Inherited: 0x320)
struct USolarCharacterBillboardIconComponent : USceneComponent {
	struct UCharacterBillboardIconConfigDataAsset* ConfigDataAsset; // 0x318(0x08)
	enum class EMassInVisibilityWarningType ActiveMassInVisibilityWarningType; // 0x320(0x01)
	struct ASolarCharacter* CharacterOwner; // 0x328(0x08)
	struct UStaticMeshComponent* BillboardOne; // 0x330(0x08)
	struct UStaticMeshComponent* BillboardTwo; // 0x338(0x08)
	struct TMap<struct FGameplayTag, struct FSolarCharacterBillboardIconRuntimeInfo> ActiveIcons; // 0x340(0x50)
	char pad_391[0x2f]; // 0x391(0x2f)
	struct TArray<struct UStaticMeshComponent*> IdleComponents; // 0x3c0(0x10)
	char pad_3D0[0x10]; // 0x3d0(0x10)

	void K2_RemoveBillboardIcon(struct FGameplayTag IconTag); // Function Solarland.SolarCharacterBillboardIconComponent.K2_RemoveBillboardIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x2791230
	void K2_AddBillboardIcon(struct FGameplayTag IconTag, bool bUsingCount); // Function Solarland.SolarCharacterBillboardIconComponent.K2_AddBillboardIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x2791120
};

// Class Solarland.SolarCharacterCameraComponent
// Size: 0xb40 (Inherited: 0xa30)
struct USolarCharacterCameraComponent : USolarCameraComponent {
	struct ASolarCharacter* Character; // 0xa28(0x08)
	struct USolarCharacterCameraDataAsset* CharacterCameraConfig; // 0xa38(0x08)
	char pad_A40[0x100]; // 0xa40(0x100)

	float GetUnscaledFOV(); // Function Solarland.SolarCharacterCameraComponent.GetUnscaledFOV // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2790da0
	float GetStandardFOVScale(); // Function Solarland.SolarCharacterCameraComponent.GetStandardFOVScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2790d70
	float GetStandardFOV(); // Function Solarland.SolarCharacterCameraComponent.GetStandardFOV // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2790d50
	float GetCustomizedFOV(); // Function Solarland.SolarCharacterCameraComponent.GetCustomizedFOV // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2790b60
};

// Class Solarland.SolarCharacterCameraDataAsset
// Size: 0x360 (Inherited: 0x30)
struct USolarCharacterCameraDataAsset : UDataAsset {
	float ThirdPersonVerticalOffset; // 0x30(0x04)
	float ThirdPersonVerticalOffsetWhenCrouched; // 0x34(0x04)
	float ThirdPersonVerticalOffsetWhenCrouchMoving; // 0x38(0x04)
	float ThirdPersonHorizontalOffset; // 0x3c(0x04)
	struct UCurveFloat* FollowForwardOffsetCurve; // 0x40(0x08)
	float FollowForwardOffsetMultiplier; // 0x48(0x04)
	float CrouchCameraLagTime; // 0x4c(0x04)
	float UnCrouchCameraLagTime; // 0x50(0x04)
	float ShoulderShotVerticalOffset; // 0x54(0x04)
	float ShoulderShotVerticalOffsetWhenCrouched; // 0x58(0x04)
	float ShoulderShotHorizontalOffset; // 0x5c(0x04)
	float ShoulderShotDistanceToTarget; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct UCurveFloat* ShoulderShotFollowDistanceCurve; // 0x68(0x08)
	float ShoulderShotCameraFOV; // 0x70(0x04)
	float ShoulderShotCameraZoomInOutTime; // 0x74(0x04)
	float ScopeShotVerticalOffsetWithStanding; // 0x78(0x04)
	float ScopeShotVerticalOffsetWhenCrouch; // 0x7c(0x04)
	float DistanceToScopePivot; // 0x80(0x04)
	float ArmDistanceToCamera; // 0x84(0x04)
	float ScopeHorizontalOffset; // 0x88(0x04)
	float SwimDistanceToTarget; // 0x8c(0x04)
	float SwimDistSwitchSpeed; // 0x90(0x04)
	float TakeOffCamPitchMin; // 0x94(0x04)
	float TakeOffCamPitchMax; // 0x98(0x04)
	float LandingSpeedThreshold; // 0x9c(0x04)
	struct FCamEffectSettings ParkourCamSettings; // 0xa0(0x38)
	struct FVector CruiseCameraOffset; // 0xd8(0x0c)
	struct FVector CruiseTargetOffset; // 0xe4(0x0c)
	float CruiseDistanceToTarget; // 0xf0(0x04)
	struct FVector SkydiveCameraOffset; // 0xf4(0x0c)
	struct FVector SkydiveTargetOffset; // 0x100(0x0c)
	float SkydiveDistanceToTarget; // 0x10c(0x04)
	float SkydiveDistanceToTargetOnBoosting; // 0x110(0x04)
	float SkydiveViewPitchMax; // 0x114(0x04)
	float SkydiveViewPitchMin; // 0x118(0x04)
	struct FCameraSettings JetFlySettingsVertical; // 0x11c(0x20)
	struct FCameraSettings JetFlySettingsFront; // 0x13c(0x20)
	struct FCameraSettings JetFlySettingsBack; // 0x15c(0x20)
	struct FCameraSettings JetFlySettingsLeft; // 0x17c(0x20)
	struct FCameraSettings JetFlySettingsRight; // 0x19c(0x20)
	char pad_1BC[0x4]; // 0x1bc(0x04)
	struct FRuntimeFloatCurve JetFlyFadeInCurve; // 0x1c0(0x88)
	struct FRuntimeFloatCurve JetFlyFadeOutCurve; // 0x248(0x88)
	struct UCameraShake* CameraShakeSkydiveFlying; // 0x2d0(0x08)
	float CameraShakeSkydiveFlyingSpeedMin; // 0x2d8(0x04)
	float CameraShakeSkydiveFlyingSpeedMax; // 0x2dc(0x04)
	struct UCameraShake* CameraShakeJetPackLaunch; // 0x2e0(0x08)
	struct UCameraShake* CameraShakeLand; // 0x2e8(0x08)
	struct UCameraShake* CameraShakeVehicleEjectLaunch; // 0x2f0(0x08)
	float CameraShakeLandDistanceMin; // 0x2f8(0x04)
	float CameraShakeLandDistanceMax; // 0x2fc(0x04)
	struct TMap<enum class ECamShakeType, struct UCameraShake*> CamShakeConfig; // 0x300(0x50)
	float TargetOffsetLerpSpeed; // 0x350(0x04)
	float CustomizedCameraOffsetSmoothFactor; // 0x354(0x04)
	float CustomizedTargetOffsetSmoothFactor; // 0x358(0x04)
	char pad_35C[0x4]; // 0x35c(0x04)
};

// Class Solarland.SolarCharacterController
// Size: 0x28 (Inherited: 0x28)
struct USolarCharacterController : UInterface {

	void OnEnterLanding(); // Function Solarland.SolarCharacterController.OnEnterLanding // (Native|Public) // @ game+0x2796c80
	struct FString GetPlayerID(); // Function Solarland.SolarCharacterController.GetPlayerID // (Native|Public|Const) // @ game+0x2796460
};

// Class Solarland.SolarControllerCommon
// Size: 0x28 (Inherited: 0x28)
struct USolarControllerCommon : UInterface {
};

// Class Solarland.SolarDefaultCharacterController
// Size: 0x28 (Inherited: 0x28)
struct USolarDefaultCharacterController : USolarCharacterController {
};

// Class Solarland.SolarCharacterDataCollector
// Size: 0x38 (Inherited: 0x28)
struct USolarCharacterDataCollector : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Solarland.SolarCharacterDeathShowConfig
// Size: 0x58 (Inherited: 0x30)
struct USolarCharacterDeathShowConfig : UDataAsset {
	struct TArray<struct FSolarCharacterDeathEffectData> EffectArrayForKnockDown; // 0x30(0x10)
	struct TArray<struct FSolarCharacterDeathEffectData> EffectArrayForDeath; // 0x40(0x10)
	bool bPlayCommonComboKillSoundEffect; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Solarland.SolarCharacterGameplayAbility_Blueprint
// Size: 0x460 (Inherited: 0x460)
struct USolarCharacterGameplayAbility_Blueprint : USolarCharacterGameplayAbility {

	bool K2_OnActivateCharacterAbilityFromEvent(struct ASolarCharacter* Character, struct FGameplayAbilityActorInfo& ActorInfo, struct FGameplayAbilityActivationInfo& ActivationInfo, struct FGameplayEventData& EventData); // Function Solarland.SolarCharacterGameplayAbility_Blueprint.K2_OnActivateCharacterAbilityFromEvent // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2796890
	bool K2_OnActivateCharacterAbility(struct ASolarCharacter* Character, struct FGameplayAbilityActorInfo& ActorInfo, struct FGameplayAbilityActivationInfo& ActivationInfo); // Function Solarland.SolarCharacterGameplayAbility_Blueprint.K2_OnActivateCharacterAbility // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2796710
	bool K2_CanActivateCharacterAbility(struct ASolarCharacter* Character, struct FGameplayAbilityActorInfo& ActorInfo, struct FGameplayTagContainer& RelevantTags); // Function Solarland.SolarCharacterGameplayAbility_Blueprint.K2_CanActivateCharacterAbility // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2796570
};

// Class Solarland.SolarCharacterGASComponent
// Size: 0x1458 (Inherited: 0x13f0)
struct USolarCharacterGASComponent : USolarAbilitySystemComponent {
	char pad_13F0[0x68]; // 0x13f0(0x68)

	void NotifyTalentState(enum class EPlayerStateRepType InRepType, struct APlayerState* InPlayerState); // Function Solarland.SolarCharacterGASComponent.NotifyTalentState // (Final|Native|Protected) // @ game+0x2796bb0
	void GrantTalentWithPlayerState(struct APlayerState* InPlayerState); // Function Solarland.SolarCharacterGASComponent.GrantTalentWithPlayerState // (Final|Native|Protected) // @ game+0x27964e0
};

// Class Solarland.SingleCharacterModelBase
// Size: 0x30 (Inherited: 0x28)
struct USingleCharacterModelBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.SolarCharactersModelBase
// Size: 0x78 (Inherited: 0x28)
struct USolarCharactersModelBase : UObject {
	struct TMap<struct FString, struct USingleCharacterModelBase*> PlayersModel; // 0x28(0x50)
};

// Class Solarland.SolarCharacterSettings
// Size: 0x178 (Inherited: 0x38)
struct USolarCharacterSettings : UDeveloperSettings {
	struct TSoftObjectPtr<UCharacterGlobalConfig> CharacterGlobalConfig; // 0x38(0x28)
	struct TSoftObjectPtr<UCharacterGameplayTagsConfig> CharacterGameplayTagsConfig; // 0x60(0x28)
	struct TSoftObjectPtr<UMaterialChangePriorityTags> MaterialChangePriorityTags; // 0x88(0x28)
	struct TSoftObjectPtr<UVisibilityFlagTags> VisibilityFlagTags; // 0xb0(0x28)
	struct TSoftObjectPtr<UCharacterMontageTags> CharacterMontageTags; // 0xd8(0x28)
	struct TSoftObjectPtr<UDataTable> CharacterMontageMappingTable; // 0x100(0x28)
	struct TSoftObjectPtr<UDataTable> EmotionMontageMappingTable; // 0x128(0x28)
	struct TSoftObjectPtr<UCharacterBodyScaleConfigDataAsset> CharacterBodyScaleConfig; // 0x150(0x28)
};

// Class Solarland.SolarCharacterSettingsRuntime
// Size: 0x110 (Inherited: 0x30)
struct USolarCharacterSettingsRuntime : UWorldSubsystem {
	struct UCharacterGlobalConfig* CharacterGlobalConfigInstance; // 0x30(0x08)
	struct UCharacterGameplayTagsConfig* CharacterGameplayTagsConfigInstance; // 0x38(0x08)
	struct UMaterialChangePriorityTags* MaterialChangePriorityTagsInstance; // 0x40(0x08)
	struct UVisibilityFlagTags* VisibilityFlagTagsInstance; // 0x48(0x08)
	struct UCharacterMontageTags* CharacterMontageTagsInstance; // 0x50(0x08)
	struct UDataTable* CharacterMontageMappingDataTable; // 0x58(0x08)
	char pad_60[0x50]; // 0x60(0x50)
	struct UDataTable* EmotionMontageMappingDataTable; // 0xb0(0x08)
	char pad_B8[0x50]; // 0xb8(0x50)
	struct UCharacterBodyScaleConfigDataAsset* CharacterBodyScaleConfigInstance; // 0x108(0x08)
};

// Class Solarland.SolarSpringArmComponent
// Size: 0x400 (Inherited: 0x3a0)
struct USolarSpringArmComponent : USpringArmComponent {
	char pad_3A0[0x10]; // 0x3a0(0x10)
	float CameraLocationLagTime; // 0x3b0(0x04)
	bool HandleTargetOffsetAsRelativeValue; // 0x3b4(0x01)
	char pad_3B5[0x4b]; // 0x3b5(0x4b)

	struct USolarSpringArmComponent* GetSpringArmComponentFromActor(struct AActor* InActor); // Function Solarland.SolarSpringArmComponent.GetSpringArmComponentFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x28a7930
};

// Class Solarland.SolarCharacterSpringArmComponent
// Size: 0x420 (Inherited: 0x400)
struct USolarCharacterSpringArmComponent : USolarSpringArmComponent {
	struct USolarCharacterCameraComponent* Camera; // 0x3f8(0x08)
	struct ASolarCharacter* OwnerCharacter; // 0x400(0x08)
	char pad_410[0x10]; // 0x410(0x10)

	void UnregisterOverlappingObstacle(struct AActor* InObstacle); // Function Solarland.SolarCharacterSpringArmComponent.UnregisterOverlappingObstacle // (Final|Native|Public|BlueprintCallable) // @ game+0x279af30
	void RegisterOverlappingObstacle(struct AActor* InObstacle); // Function Solarland.SolarCharacterSpringArmComponent.RegisterOverlappingObstacle // (Final|Native|Public|BlueprintCallable) // @ game+0x279ada0
};

// Class Solarland.SolarCharacterUpgradeComponent
// Size: 0xd0 (Inherited: 0xb0)
struct USolarCharacterUpgradeComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct ASolarCharacter* Owner; // 0xb8(0x08)
	int32_t Experience; // 0xc0(0x04)
	int32_t Level; // 0xc4(0x04)
	int32_t CharacterId; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)

	void ServerExecuteGMLua(struct FString GMType, struct FString Param1, struct FString Param2); // Function Solarland.SolarCharacterUpgradeComponent.ServerExecuteGMLua // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ServerExecuteGM(struct FString GMType, struct FString Param1, struct FString Param2); // Function Solarland.SolarCharacterUpgradeComponent.ServerExecuteGM // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x279f310
	void PrepareConfigData(); // Function Solarland.SolarCharacterUpgradeComponent.PrepareConfigData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void NotifyLevelUp(int32_t OldLevel, int32_t NewLevel); // Function Solarland.SolarCharacterUpgradeComponent.NotifyLevelUp // (Final|Native|Public) // @ game+0x279f240
	void ClientOnLevelUpRpc(int32_t OldLevel, int32_t NewLevel); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnLevelUpRpc // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x279eff0
	void ClientOnLevelUpLua(int32_t OldLevel, int32_t NewLevel); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnLevelUpLua // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ClientOnAddNewExpLua(int32_t BehaviorType, int32_t AddExp); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnAddNewExpLua // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ClientOnAddNewExp_LuaCall(int32_t OldLevel, int32_t NewLevel); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnAddNewExp_LuaCall // (Final|Native|Public) // @ game+0x279ef20
	void ClientOnAddNewExp(int32_t BehaviorType, int32_t AddExp); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnAddNewExp // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x279ee50
	void CalculateCharacterExp(int32_t EventType, float InValue); // Function Solarland.SolarCharacterUpgradeComponent.CalculateCharacterExp // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarPile
// Size: 0x550 (Inherited: 0x298)
struct ASolarPile : ASolarMapElementBase {
	char pad_298[0x18]; // 0x298(0x18)
	struct UStaticMeshComponent* NormalMesh; // 0x2b0(0x08)
	struct USphereComponent* CollisionComp; // 0x2b8(0x08)
	struct TArray<struct UActorComponent*> ExtraChargingVFXComps; // 0x2c0(0x10)
	struct FSpawnedActorHandle CachedActorHandle; // 0x2d0(0x04)
	char pad_2D4[0x18]; // 0x2d4(0x18)
	enum class EChargingChannel Channel; // 0x2ec(0x01)
	enum class ESolarPileType PileType; // 0x2ed(0x01)
	char pad_2EE[0x2]; // 0x2ee(0x02)
	int32_t Zone; // 0x2f0(0x04)
	float MaxEnergy; // 0x2f4(0x04)
	float PowerRecoveryCD; // 0x2f8(0x04)
	float PowerRecoveryFrequency; // 0x2fc(0x04)
	float PowerRecoveryQuantity; // 0x300(0x04)
	bool bEnable; // 0x304(0x01)
	bool bBroken; // 0x305(0x01)
	bool bCanRecover; // 0x306(0x01)
	bool bIsActivated; // 0x307(0x01)
	int32_t Level; // 0x308(0x04)
	bool bIsLosingEnergy; // 0x30c(0x01)
	char pad_30D[0x3]; // 0x30d(0x03)
	int32_t OwnerTeam; // 0x310(0x04)
	struct TWeakObjectPtr<struct ASolarCharacter> OwnerCharacter; // 0x314(0x08)
	char pad_31C[0x4]; // 0x31c(0x04)
	struct FChargingInfo defaultChargingInfo; // 0x320(0x30)
	struct TArray<struct FChargingInfo> ChargingInfoList; // 0x350(0x10)
	float CurrentEnergy; // 0x360(0x04)
	char pad_364[0x4]; // 0x364(0x04)
	float SphereRadius; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)
	struct FTimerHandle RecoveryHandle; // 0x370(0x08)
	char pad_378[0x8]; // 0x378(0x08)
	struct FTimerHandle ServerChargingTimerHandle; // 0x380(0x08)
	struct FTimerHandle ClientChargingTimerHandle; // 0x388(0x08)
	struct TArray<struct UParticleSystemComponent*> ChargeParticleEffects; // 0x390(0x10)
	struct UAkComponent* AkAudioComponent; // 0x3a0(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x3a8(0x08)
	char pad_3B0[0x2]; // 0x3b0(0x02)
	bool bEnableHealth; // 0x3b2(0x01)
	char pad_3B3[0x1]; // 0x3b3(0x01)
	float MaxHealth; // 0x3b4(0x04)
	float ReducedHealth; // 0x3b8(0x04)
	float CurrentHealth; // 0x3bc(0x04)
	float TweenTimeSpeed; // 0x3c0(0x04)
	float RestTweenTime; // 0x3c4(0x04)
	float TargetOpacity; // 0x3c8(0x04)
	float CurrentOpacity; // 0x3cc(0x04)
	float OpacityTweenTime; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct UMaterialInstanceDynamic* DynamicMatChargingCircle; // 0x3d8(0x08)
	struct FChargingPilePreset ChargingPilePreset; // 0x3e0(0x150)
	struct UStaticMeshComponent* RangeRingMeshComp; // 0x530(0x08)
	struct UStaticMeshComponent* ChargeCircleMeshComp; // 0x538(0x08)
	bool bCharging; // 0x540(0x01)
	char pad_541[0xf]; // 0x541(0x0f)

	void ToggleExtraChargingVFX(bool Toggle); // Function Solarland.SolarPile.ToggleExtraChargingVFX // (Final|Native|Public|BlueprintCallable) // @ game+0x284f440
	void SetIsActivated(bool bActivated); // Function Solarland.SolarPile.SetIsActivated // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RemoveChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SolarPile.RemoveChargeParticle // (Final|Native|Protected|BlueprintCallable) // @ game+0x284f350
	void RemoveAllEffects(); // Function Solarland.SolarPile.RemoveAllEffects // (Final|Native|Protected|BlueprintCallable) // @ game+0x284f330
	void ReceivePileExpired(); // Function Solarland.SolarPile.ReceivePileExpired // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveEnergyChanged(); // Function Solarland.SolarPile.ReceiveEnergyChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveChargingPileInitialize(); // Function Solarland.SolarPile.ReceiveChargingPileInitialize // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveCharacterShowEffect(struct AActor* Other); // Function Solarland.SolarPile.ReceiveCharacterShowEffect // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveCharacterHideEffect(struct AActor* Other); // Function Solarland.SolarPile.ReceiveCharacterHideEffect // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void PlaySkillStartSound(); // Function Solarland.SolarPile.PlaySkillStartSound // (Native|Public|BlueprintCallable) // @ game+0x7f38d0
	void PlaySkillEndSound(); // Function Solarland.SolarPile.PlaySkillEndSound // (Native|Public|BlueprintCallable) // @ game+0x1ae5650
	void PlayRecoveryAnim(bool bStart); // Function Solarland.SolarPile.PlayRecoveryAnim // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void PlayChargingAnimation(bool Reverse); // Function Solarland.SolarPile.PlayChargingAnimation // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnUntrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarPile.OnUntrigger // (Final|Native|Protected) // @ game+0x284f1d0
	void OnTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarPile.OnTrigger // (Final|Native|Protected|HasOutParms) // @ game+0x284efb0
	void OnRep_IsLosingEnergyChanged(); // Function Solarland.SolarPile.OnRep_IsLosingEnergyChanged // (Final|Native|Public) // @ game+0x284ef90
	void OnRep_Energy(); // Function Solarland.SolarPile.OnRep_Energy // (Final|Native|Public) // @ game+0x284ef70
	void OnRep_Enable(); // Function Solarland.SolarPile.OnRep_Enable // (Final|Native|Public) // @ game+0x284ef50
	void OnRep_CurrentHealth(); // Function Solarland.SolarPile.OnRep_CurrentHealth // (Final|Native|Public) // @ game+0x284ef30
	void OnRep_ChargingInfoListChanged(); // Function Solarland.SolarPile.OnRep_ChargingInfoListChanged // (Final|Native|Public) // @ game+0x284ef10
	void OnRep_CanRecover(); // Function Solarland.SolarPile.OnRep_CanRecover // (Final|Native|Public) // @ game+0x284eef0
	void OnRep_Broken(); // Function Solarland.SolarPile.OnRep_Broken // (Final|Native|Public) // @ game+0x284eed0
	void OnRefreshRangeRing(); // Function Solarland.SolarPile.OnRefreshRangeRing // (Final|Native|Public|BlueprintCallable) // @ game+0x284eeb0
	void OnRefreshChargeCircle(bool InCharging); // Function Solarland.SolarPile.OnRefreshChargeCircle // (Final|Native|Public|BlueprintCallable) // @ game+0x284ee20
	void OnCharacterBatteryIdChanged(struct ASolarCharacter* InCharacter, float Frequency, float Quantity); // Function Solarland.SolarPile.OnCharacterBatteryIdChanged // (Final|Native|Public) // @ game+0x284ed10
	bool IsCharacterInRange(struct ASolarCharacter* InCharacter); // Function Solarland.SolarPile.IsCharacterInRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x284ec10
	bool IsAnyCharacterInRange(); // Function Solarland.SolarPile.IsAnyCharacterInRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x284ebe0
	struct FChargingInfo GetChargingInfoByCharacter(struct ASolarCharacter* Character); // Function Solarland.SolarPile.GetChargingInfoByCharacter // (Final|Native|Public) // @ game+0x284e1f0
	void GameStatisticsChargingPile(struct FChargingInfo& ChargingInfo, int32_t pileLevel, struct FVector Location, float energyUse); // Function Solarland.SolarPile.GameStatisticsChargingPile // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x284df40
	void CreateChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SolarPile.CreateChargeParticle // (Final|Native|Protected|BlueprintCallable) // @ game+0x284de90
	void ChangeColor(); // Function Solarland.SolarPile.ChangeColor // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool CanWork(); // Function Solarland.SolarPile.CanWork // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x284de30
};

// Class Solarland.SolarChargingPile
// Size: 0x550 (Inherited: 0x550)
struct ASolarChargingPile : ASolarPile {
};

// Class Solarland.PSOGatherVolume
// Size: 0x230 (Inherited: 0x228)
struct APSOGatherVolume : AActor {
	struct UBoxComponent* BoxComponent; // 0x228(0x08)
};

// Class Solarland.SolarCheatManager
// Size: 0x4b8 (Inherited: 0x78)
struct USolarCheatManager : UCheatManager {
	char pad_78[0x360]; // 0x78(0x360)
	struct FSoftObjectPath VehicleSpawnerMarkWidgetPath; // 0x3d8(0x18)
	struct TArray<struct UMapMarkBase*> VehicleSpawnerMarks; // 0x3f0(0x10)
	struct FSoftObjectPath PSOGatherCubeBPAssetPath; // 0x400(0x18)
	struct FSoftObjectPath PSOPlaneBPAssetPath; // 0x418(0x18)
	float PSOGatherCubeDistanceToCamera; // 0x430(0x04)
	char pad_434[0x4]; // 0x434(0x04)
	struct FString PSOGatherBPHuntAssetPath; // 0x438(0x10)
	struct FString PSOGatherBPTutorialAssetPath; // 0x448(0x10)
	char pad_458[0x48]; // 0x458(0x48)
	struct FSoftObjectPath AirShipBPAssetPath; // 0x4a0(0x18)

	void StopEffectScreen(int32_t InHandle); // Function Solarland.SolarCheatManager.StopEffectScreen // (Final|Exec|Native|Public) // @ game+0x27a2900
	void StopEffectActor(int32_t InHandle); // Function Solarland.SolarCheatManager.StopEffectActor // (Final|Exec|Native|Public) // @ game+0x27a2870
	void StartPSOGatheringiOSTutorial(); // Function Solarland.SolarCheatManager.StartPSOGatheringiOSTutorial // (Final|Exec|Native|Public) // @ game+0x9043b0
	void StartPSOGatheringiOSHunt(); // Function Solarland.SolarCheatManager.StartPSOGatheringiOSHunt // (Final|Exec|Native|Public) // @ game+0x9043b0
	void StartPSOGathering(); // Function Solarland.SolarCheatManager.StartPSOGathering // (Final|Exec|Native|Public) // @ game+0x27a2850
	void StartEffectScreen(struct FString RowName); // Function Solarland.SolarCheatManager.StartEffectScreen // (Final|Exec|Native|Public) // @ game+0x27a27b0
	void StartEffectActor(struct FString RowName); // Function Solarland.SolarCheatManager.StartEffectActor // (Final|Exec|Native|Public) // @ game+0x27a2710
	void SpawnVehicleWithVehicleID(int32_t VehicleID); // Function Solarland.SolarCheatManager.SpawnVehicleWithVehicleID // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a2680
	void SpawnVehicleWithSkinID(int32_t SkinId, float LocationX, float LocationY, float LocationZ); // Function Solarland.SolarCheatManager.SpawnVehicleWithSkinID // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a2520
	void SpawnVehicle(int32_t SpawnID); // Function Solarland.SolarCheatManager.SpawnVehicle // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a2490
	void SpawnTreasureBox(int32_t TreasureBoxID); // Function Solarland.SolarCheatManager.SpawnTreasureBox // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a2400
	void SpawnSolarRadar(struct FString BpPath); // Function Solarland.SolarCheatManager.SpawnSolarRadar // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a2360
	void SpawnPSOGatherCube(); // Function Solarland.SolarCheatManager.SpawnPSOGatherCube // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a21d0
	void SpawnPSO_BP_ObjectByPath(struct FString BpPath, float DestLocationX, float DestLocationY, float DestLocationZ); // Function Solarland.SolarCheatManager.SpawnPSO_BP_ObjectByPath // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a21f0
	void SpawnOutcomeContent(int32_t OutcomeID); // Function Solarland.SolarCheatManager.SpawnOutcomeContent // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a2140
	void SpawnChargingPile(struct FString BpPath); // Function Solarland.SolarCheatManager.SpawnChargingPile // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a20a0
	void SpawnAirdrop(int32_t AirdropID); // Function Solarland.SolarCheatManager.SpawnAirdrop // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a2010
	void SolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed); // Function Solarland.SolarCheatManager.SolarWeaponSpreadForWeapon // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a1e10
	void SolarWeaponReload(int32_t PrimaryAmmoCap, int32_t SecondaryAmmoCap); // Function Solarland.SolarCheatManager.SolarWeaponReload // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a1d40
	void SolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod); // Function Solarland.SolarCheatManager.SolarWeaponOverload // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a1be0
	void SolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead); // Function Solarland.SolarCheatManager.SolarWeaponFiringMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a1a00
	void SolarTestReportAbnormalPlayerWeapon(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InAttackLocation, struct FString InHitLocation, struct FString InHitBoneScale, struct FString InWeaponBlueprintName); // Function Solarland.SolarCheatManager.SolarTestReportAbnormalPlayerWeapon // (Final|Exec|Native|Public) // @ game+0x27a1750
	void SolarTestReportAbnormalPlayerVehicle(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InVehiclePreviousLocation, struct FString InVehiclePresentLocation, struct FString InVehicleBlueprintName); // Function Solarland.SolarCheatManager.SolarTestReportAbnormalPlayerVehicle // (Final|Exec|Native|Public) // @ game+0x27a14f0
	void SolarTestReportAbnormalPlayer(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue); // Function Solarland.SolarCheatManager.SolarTestReportAbnormalPlayer // (Final|Exec|Native|Public) // @ game+0x27a13a0
	void SolarTeleport(float DestLocationX, float DestLocationY, float DestLocationZ); // Function Solarland.SolarCheatManager.SolarTeleport // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a1280
	void SolarServerCmd(struct FString Cmd); // Function Solarland.SolarCheatManager.SolarServerCmd // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a11e0
	void SolarGMSetPlayerValueInternal(struct FString InType, struct FString InValue); // Function Solarland.SolarCheatManager.SolarGMSetPlayerValueInternal // (Final|Native|Public) // @ game+0x27a00f0
	void SolarGM_WeaponShowCurrentInfo(); // Function Solarland.SolarCheatManager.SolarGM_WeaponShowCurrentInfo // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_UnforbidCharacterUniqueSkillCD(); // Function Solarland.SolarCheatManager.SolarGM_UnforbidCharacterUniqueSkillCD // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_TestEnsureMsgWithBP(); // Function Solarland.SolarCheatManager.SolarGM_TestEnsureMsgWithBP // (Final|Exec|Native|Public|Const) // @ game+0x9043b0
	void SolarGM_TestEnsureMsg(); // Function Solarland.SolarCheatManager.SolarGM_TestEnsureMsg // (Final|Exec|Native|Public|Const) // @ game+0x9043b0
	void SolarGM_TestCrashWithBP(); // Function Solarland.SolarCheatManager.SolarGM_TestCrashWithBP // (Final|Exec|Native|Public|Const) // @ game+0x9043b0
	void SolarGM_TestCrash(); // Function Solarland.SolarCheatManager.SolarGM_TestCrash // (Final|Exec|Native|Public|Const) // @ game+0x9043b0
	void SolarGM_TeleportToBotAI(uint32_t CtrlIndex); // Function Solarland.SolarCheatManager.SolarGM_TeleportToBotAI // (Final|Exec|Native|Public) // @ game+0x27a1150
	void SolarGM_SummonItemIgnoreBombDamage(bool bIgnore); // Function Solarland.SolarCheatManager.SolarGM_SummonItemIgnoreBombDamage // (Final|Exec|Native|Public) // @ game+0x26446a0
	void SolarGM_StopBotAIBehaviorTree(bool bStop); // Function Solarland.SolarCheatManager.SolarGM_StopBotAIBehaviorTree // (Final|Exec|Native|Public) // @ game+0x27a10c0
	void SolarGM_SpawnBotAIAtCrosshairByNum(int32_t Num); // Function Solarland.SolarCheatManager.SolarGM_SpawnBotAIAtCrosshairByNum // (Final|Exec|Native|Public) // @ game+0x27a1030
	void SolarGM_ShowEmojiBubble(int32_t EmojiID); // Function Solarland.SolarCheatManager.SolarGM_ShowEmojiBubble // (Final|Exec|Native|Public) // @ game+0x27a0fa0
	void SolarGM_ShowAspectRatio(float InDuration); // Function Solarland.SolarCheatManager.SolarGM_ShowAspectRatio // (Final|Exec|Native|Public) // @ game+0xb67d60
	void SolarGM_SetWeaponAdditionalBaseDamage(float AdditionalBaseDamage, bool bSelfOnly); // Function Solarland.SolarCheatManager.SolarGM_SetWeaponAdditionalBaseDamage // (Final|Exec|Native|Public) // @ game+0x27a0ec0
	void SolarGM_SetPlayerValue(struct FString InType, struct FString InValue); // Function Solarland.SolarCheatManager.SolarGM_SetPlayerValue // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a0dc0
	void SolarGM_SetPlayerLevel(int32_t InLv); // Function Solarland.SolarCheatManager.SolarGM_SetPlayerLevel // (Final|Exec|Native|Public) // @ game+0x27a0d30
	void SolarGM_SetEMPForceFieldTestRange(float InRadius, float InHeight); // Function Solarland.SolarCheatManager.SolarGM_SetEMPForceFieldTestRange // (Final|Exec|Native|Public) // @ game+0x27a0c60
	void SolarGM_SetEMPForceFieldCoreSize(float InX, float InY, float InZ); // Function Solarland.SolarCheatManager.SolarGM_SetEMPForceFieldCoreSize // (Final|Exec|Native|Public) // @ game+0x27a07f0
	void SolarGM_SetCharacterRoleAbilitySkillCDDuration(float InCD); // Function Solarland.SolarCheatManager.SolarGM_SetCharacterRoleAbilitySkillCDDuration // (Final|Exec|Native|Public) // @ game+0xb67d60
	void SolarGM_SetAssistAimTargetVelocityFollowMaxSpeed(float MaxHorizontalSpeed, float MaxVerticalSpeed); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetVelocityFollowMaxSpeed // (Final|Exec|Native|Public) // @ game+0x27a0c60
	void SolarGM_SetAssistAimTargetConfig_TargetVelocityFollowTriggerExtent(struct FString BodyType, struct FString status, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_TargetVelocityFollowTriggerExtent // (Final|Exec|Native|Public) // @ game+0x27a0ae0
	void SolarGM_SetAssistAimTargetConfig_LockAimingExtent(struct FString BodyType, struct FString status, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_LockAimingExtent // (Final|Exec|Native|Public) // @ game+0x27a0ae0
	void SolarGM_SetAssistAimTargetConfig_GlobalSensitivityScaleTriggerExtent(struct FString BodyType, struct FString status, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_GlobalSensitivityScaleTriggerExtent // (Final|Exec|Native|Public) // @ game+0x27a0ae0
	void SolarGM_SetAssistAimTargetConfig_BaseFollowTriggerExtent(struct FString BodyType, struct FString status, struct FString CharacterTagStr, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_BaseFollowTriggerExtent // (Final|Exec|Native|Public) // @ game+0x27a0910
	void SolarGM_SetAssistAimTargetConfig_BaseFollowStopExtent(struct FString BodyType, struct FString status, struct FString CharacterTagStr, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_BaseFollowStopExtent // (Final|Exec|Native|Public) // @ game+0x27a0910
	void SolarGM_SetAssistAimCurveScales(float TargetVelocityFollowHorizontalRatioCurveScale, float TargetVelocityFollowVerticalRatioCurveScale, float GlobalSensitivityScaleCurveScale); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimCurveScales // (Final|Exec|Native|Public) // @ game+0x27a07f0
	void SolarGM_SetAssistAimBaseFollowSpeed(struct FString StatusTagStr, float HorizontalSpeed, float VerticalSpeed); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimBaseFollowSpeed // (Final|Exec|Native|Public) // @ game+0x27a06c0
	void SolarGM_RestoreRecommend(); // Function Solarland.SolarCheatManager.SolarGM_RestoreRecommend // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_ResetCharacterUniqueSkillCD(); // Function Solarland.SolarCheatManager.SolarGM_ResetCharacterUniqueSkillCD // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_PlayerUpgrade(int32_t InLv); // Function Solarland.SolarCheatManager.SolarGM_PlayerUpgrade // (Final|Exec|Native|Public) // @ game+0x27a0630
	void SolarGM_MarkVehicleSpawnLocationInMap(int32_t Index); // Function Solarland.SolarCheatManager.SolarGM_MarkVehicleSpawnLocationInMap // (Final|Exec|Native|Public) // @ game+0x27a05a0
	void SolarGM_KillAllAI(bool KillBot); // Function Solarland.SolarCheatManager.SolarGM_KillAllAI // (Final|Exec|Native|Public) // @ game+0x27a0510
	void SolarGM_GainExperience(int32_t InExp); // Function Solarland.SolarCheatManager.SolarGM_GainExperience // (Final|Exec|Native|Public) // @ game+0x27a0480
	void SolarGM_ClearCharacterUniqueSkillCD(); // Function Solarland.SolarCheatManager.SolarGM_ClearCharacterUniqueSkillCD // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_CleanUpShootingTarget(); // Function Solarland.SolarCheatManager.SolarGM_CleanUpShootingTarget // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_CharacterUpgradeBattleUpgradeEffectLevel(int32_t UpgradeTo); // Function Solarland.SolarCheatManager.SolarGM_CharacterUpgradeBattleUpgradeEffectLevel // (Final|Exec|Native|Public) // @ game+0x1ae6850
	void SolarGM_CharacterSuicide(); // Function Solarland.SolarCheatManager.SolarGM_CharacterSuicide // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_CharacterSelectBattleUpgradeEffect(int32_t Level, int32_t SelectedIndex); // Function Solarland.SolarCheatManager.SolarGM_CharacterSelectBattleUpgradeEffect // (Final|Exec|Native|Public) // @ game+0x27a03b0
	void SolarGM_CharacterEnableDebugAutoMove(bool bEnabled, float SwitchInterval); // Function Solarland.SolarCheatManager.SolarGM_CharacterEnableDebugAutoMove // (Final|Exec|Native|Public) // @ game+0x27a02e0
	void SolarGM_CharacterDisplayCameraInfo(); // Function Solarland.SolarCheatManager.SolarGM_CharacterDisplayCameraInfo // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_CharacterDamageSelf(int32_t InDamage); // Function Solarland.SolarCheatManager.SolarGM_CharacterDamageSelf // (Final|Exec|Native|Public) // @ game+0x1ae6850
	void SolarGM_CharacterChangeTailFlameId(int32_t InTailFlameId); // Function Solarland.SolarCheatManager.SolarGM_CharacterChangeTailFlameId // (Final|Exec|Native|Public) // @ game+0x1ae6850
	void SolarGM_CharacterChangeBagId(int32_t InBagId); // Function Solarland.SolarCheatManager.SolarGM_CharacterChangeBagId // (Final|Exec|Native|Public) // @ game+0x1ae6850
	void SolarGM_CallAirdropByAirShipHere(); // Function Solarland.SolarCheatManager.SolarGM_CallAirdropByAirShipHere // (Final|Exec|Native|Public) // @ game+0x27a02c0
	void SolarGM_CallAirdropByAirShip(float Loc_X, float Loc_Y); // Function Solarland.SolarCheatManager.SolarGM_CallAirdropByAirShip // (Final|Exec|Native|Public) // @ game+0x27a01f0
	void SolarAsyncLoad(struct FString ResPath); // Function Solarland.SolarCheatManager.SolarAsyncLoad // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x27a0050
	void SolarAmmoSpreadPerBullet(int32_t AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed); // Function Solarland.SolarCheatManager.SolarAmmoSpreadPerBullet // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x279fe30
	void SolarAmmoRangeSpeedDamage(int32_t AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload); // Function Solarland.SolarCheatManager.SolarAmmoRangeSpeedDamage // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x279fb80
	void SolarAmmoFiring(int32_t AmmoIndex, int32_t FireCostType, int32_t FireCostPerAttack, int32_t FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval); // Function Solarland.SolarCheatManager.SolarAmmoFiring // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x279f920
	void SolarAmmoBoltAndMag(int32_t AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag); // Function Solarland.SolarCheatManager.SolarAmmoBoltAndMag // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x279f780
	void SolarAmmoBasicMovement(int32_t AmmoIndex, int32_t TimedExplode, int32_t BounceTimes, float LifeTime, float BaseReloadTime, int32_t TrajectoryType, float CustomValue); // Function Solarland.SolarCheatManager.SolarAmmoBasicMovement // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x279f560
	void SetGameplayVibrateIntensity(struct FString Category, struct FString Intensity); // Function Solarland.SolarCheatManager.SetGameplayVibrateIntensity // (Final|Exec|Native|Public) // @ game+0x279f460
	void ExecuteGMCommandsInCustomMode(struct FString CommandParameters, struct FString ArgsStr); // Function Solarland.SolarCheatManager.ExecuteGMCommandsInCustomMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x279f0c0
};

// Class Solarland.SolarCheckBox
// Size: 0xaf0 (Inherited: 0xad0)
struct USolarCheckBox : UCheckBox {
	char pad_AD0[0x8]; // 0xad0(0x08)
	struct UWidget* OnGroup; // 0xad8(0x08)
	struct UWidget* OffGroup; // 0xae0(0x08)
	enum class ESlateVisibility CheckedGroupVisibility; // 0xae8(0x01)
	enum class ESlateVisibility UncheckedGroupVisibility; // 0xae9(0x01)
	char pad_AEA[0x6]; // 0xaea(0x06)

	void OnStateChanged(bool bIsChecked); // Function Solarland.SolarCheckBox.OnStateChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x27a69c0
	void ManualSetIsChecked(bool InIsChecked, bool bBroadCast); // Function Solarland.SolarCheckBox.ManualSetIsChecked // (Final|Native|Public|BlueprintCallable) // @ game+0x27a65a0
};

// Class Solarland.SolarCheckButton
// Size: 0x600 (Inherited: 0x5d0)
struct USolarCheckButton : UButton {
	struct FMulticastInlineDelegate OnClickedEvent; // 0x5d0(0x10)
	char pad_5E0[0x8]; // 0x5e0(0x08)
	struct UWidget* OnGroup; // 0x5e8(0x08)
	struct UWidget* OffGroup; // 0x5f0(0x08)
	bool bChecked; // 0x5f8(0x01)
	char pad_5F9[0x7]; // 0x5f9(0x07)

	void SetButtonIndex(int32_t InButtonIndex); // Function Solarland.SolarCheckButton.SetButtonIndex // (Native|Public) // @ game+0x27a6fd0
	void OnStateChanged(bool bIsChecked); // Function Solarland.SolarCheckButton.OnStateChanged // (Native|Protected|BlueprintCallable) // @ game+0x27a6a50
	bool IsChecked(); // Function Solarland.SolarCheckButton.IsChecked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27a6450
	struct FMulticastInlineDelegate GetOnClickedEvent(); // Function Solarland.SolarCheckButton.GetOnClickedEvent // (Native|Public) // @ game+0x27a62f0
	int32_t GetButtonIndex(); // Function Solarland.SolarCheckButton.GetButtonIndex // (Native|Public|Const) // @ game+0x27a5f70
};

// Class Solarland.SolarCheckButtonGroup
// Size: 0x198 (Inherited: 0x160)
struct USolarCheckButtonGroup : UNamedSlot {
	struct FMulticastInlineDelegate OnStateChangedEvent; // 0x160(0x10)
	bool IsChildrenAutoSetState; // 0x170(0x01)
	bool bDelayStateChanged; // 0x171(0x01)
	char pad_172[0x6]; // 0x172(0x06)
	struct UPanelWidget* GroupRoot; // 0x178(0x08)
	char pad_180[0x18]; // 0x180(0x18)

	void SetSelectPrev(); // Function Solarland.SolarCheckButtonGroup.SetSelectPrev // (Final|Native|Public|BlueprintCallable) // @ game+0x27a75d0
	void SetSelectNext(); // Function Solarland.SolarCheckButtonGroup.SetSelectNext // (Final|Native|Public|BlueprintCallable) // @ game+0x27a75b0
	void SetSelectLast(); // Function Solarland.SolarCheckButtonGroup.SetSelectLast // (Final|Native|Public|BlueprintCallable) // @ game+0x27a7590
	void SetSelectIndex(int32_t Index); // Function Solarland.SolarCheckButtonGroup.SetSelectIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x27a7500
	void SetChildrenAutoSetState(bool InEnable); // Function Solarland.SolarCheckButtonGroup.SetChildrenAutoSetState // (Final|Native|Public|BlueprintCallable) // @ game+0x27a70f0
	void RevertLastCheck(); // Function Solarland.SolarCheckButtonGroup.RevertLastCheck // (Final|Native|Public|BlueprintCallable) // @ game+0x27a6fb0
	void OnStateChanged(int32_t ButtonIndex); // Function Solarland.SolarCheckButtonGroup.OnStateChanged // (Final|Native|Public) // @ game+0x27a6ae0
	void OnCheckButtonGroupStateChangedEvent__DelegateSignature(int32_t InLastButtonIndex); // DelegateFunction Solarland.SolarCheckButtonGroup.OnCheckButtonGroupStateChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	bool IsSelectTypePrev(); // Function Solarland.SolarCheckButtonGroup.IsSelectTypePrev // (Final|Native|Protected|Const) // @ game+0x27a64e0
	bool IsSelectTypeNone(); // Function Solarland.SolarCheckButtonGroup.IsSelectTypeNone // (Final|Native|Protected|Const) // @ game+0x27a64b0
	bool IsSelectTypeNext(); // Function Solarland.SolarCheckButtonGroup.IsSelectTypeNext // (Final|Native|Protected|Const) // @ game+0x27a6480
	int32_t GetLastSelectIndex(); // Function Solarland.SolarCheckButtonGroup.GetLastSelectIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27a6030
};

// Class Solarland.SolarCheckButtonInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarCheckButtonInterface : UInterface {

	void OnStateChange(int32_t InIndex); // Function Solarland.SolarCheckButtonInterface.OnStateChange // (Native|Public) // @ game+0x27a6930
	void ManualChangeState(bool bIsChecked); // Function Solarland.SolarCheckButtonInterface.ManualChangeState // (Native|Public) // @ game+0x27a6510
};

// Class Solarland.SolarCheckButtonWidget
// Size: 0x420 (Inherited: 0x400)
struct USolarCheckButtonWidget : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct FMulticastInlineDelegate OnClickedEvent; // 0x408(0x10)
	char pad_418[0x8]; // 0x418(0x08)

	void SetButtonIndex(int32_t InButtonIndex); // Function Solarland.SolarCheckButtonWidget.SetButtonIndex // (Native|Public) // @ game+0x27a7060
	void PostClickedEvent(); // Function Solarland.SolarCheckButtonWidget.PostClickedEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x27a6f90
	void OnStateChanged(bool bIsChecked); // Function Solarland.SolarCheckButtonWidget.OnStateChanged // (Native|Protected) // @ game+0x27a6b70
	void OnSelected(bool bSelected); // Function Solarland.SolarCheckButtonWidget.OnSelected // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct FMulticastInlineDelegate GetOnClickedEvent(); // Function Solarland.SolarCheckButtonWidget.GetOnClickedEvent // (Native|Public) // @ game+0x27a6330
	int32_t GetButtonIndex(); // Function Solarland.SolarCheckButtonWidget.GetButtonIndex // (Native|Public|Const) // @ game+0x27a5fb0
};

// Class Solarland.SolarChunkAssignData
// Size: 0x90 (Inherited: 0x30)
struct USolarChunkAssignData : UDataAsset {
	struct TArray<struct FDirectoryPath> DirectoriesToNeverClean; // 0x30(0x10)
	struct TMap<struct FString, struct FChunkAssignRule> Rules; // 0x40(0x50)
};

// Class Solarland.SolarSafeArea
// Size: 0x468 (Inherited: 0x280)
struct ASolarSafeArea : ASCMMapElementBase {
	char pad_280[0x4]; // 0x280(0x04)
	int32_t CurrentIndex; // 0x284(0x04)
	float TargetTime; // 0x288(0x04)
	float BeginShrinkTime; // 0x28c(0x04)
	float DamageValue; // 0x290(0x04)
	struct FVector BeginLocation; // 0x294(0x0c)
	float BeginScale; // 0x2a0(0x04)
	enum class ESafeAreaStatus AreaStatus; // 0x2a4(0x01)
	char pad_2A5[0x10]; // 0x2a5(0x10)
	bool IsLocalPlayerCameraInSafeArea; // 0x2b5(0x01)
	bool IsLocalViewFocusedCharacterInSafeArea; // 0x2b6(0x01)
	char pad_2B7[0x51]; // 0x2b7(0x51)
	bool bCanCausingDamage; // 0x308(0x01)
	char pad_309[0x3]; // 0x309(0x03)
	float FirstDamageDelay; // 0x30c(0x04)
	float DamageInterval; // 0x310(0x04)
	char pad_314[0x4]; // 0x314(0x04)
	struct FString LeaveSafeAreaSoundName; // 0x318(0x10)
	struct FString EnterSafeAreaSoundName; // 0x328(0x10)
	struct FString InPoisonPerSecSoundName; // 0x338(0x10)
	float InPoisonSoundSecond; // 0x348(0x04)
	int32_t WarningNotificationIndex; // 0x34c(0x04)
	struct TMap<int32_t, int32_t> NoticeDataMap; // 0x350(0x50)
	struct TMap<int32_t, struct FString> SoundEventNameDataMap; // 0x3a0(0x50)
	struct TMap<int32_t, int32_t> QuickVoiceDataMap; // 0x3f0(0x50)
	int32_t ShrinkEndNotificationIndex; // 0x440(0x04)
	int32_t ShrinkEndNoticeId; // 0x444(0x04)
	struct FString ShrinkEndSoundEventName; // 0x448(0x10)
	struct ASolarPlayerController* LocalController; // 0x458(0x08)
	char pad_460[0x8]; // 0x460(0x08)

	void StartShrink(); // Function Solarland.SolarSafeArea.StartShrink // (Native|Protected|BlueprintCallable) // @ game+0x1ae48d0
	void ShowPoisonPerSecond(); // Function Solarland.SolarSafeArea.ShowPoisonPerSecond // (BlueprintCosmetic|Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1ae6410
	void ShowPoisonEffect(bool bShow); // Function Solarland.SolarSafeArea.ShowPoisonEffect // (BlueprintCosmetic|Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2892790
	void ShowEffectInside(bool bInside); // Function Solarland.SolarSafeArea.ShowEffectInside // (BlueprintCosmetic|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void Resume(); // Function Solarland.SolarSafeArea.Resume // (Exec|Native|Public) // @ game+0x8265e0
	void ReceiveShrinkEnd(); // Function Solarland.SolarSafeArea.ReceiveShrinkEnd // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveActorLeaveSafeAreaCircle(struct AActor* Actor); // Function Solarland.SolarSafeArea.ReceiveActorLeaveSafeAreaCircle // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveActorEnterSafeAreaCircle(struct AActor* Actor); // Function Solarland.SolarSafeArea.ReceiveActorEnterSafeAreaCircle // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void Pause(); // Function Solarland.SolarSafeArea.Pause // (Exec|Native|Public|BlueprintCallable) // @ game+0x1ae65d0
	void OnRep_CurrentIndexChange(); // Function Solarland.SolarSafeArea.OnRep_CurrentIndexChange // (Final|Native|Protected) // @ game+0x2892660
	bool IsPause(); // Function Solarland.SolarSafeArea.IsPause // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2892630
	bool IsLocationInTargetSafeArea(struct FVector& InLocation); // Function Solarland.SolarSafeArea.IsLocationInTargetSafeArea // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2892590
	bool IsLocationInSafeAreaDetailed(struct FVector& InLocation, bool& OutInTargetSafeArea); // Function Solarland.SolarSafeArea.IsLocationInSafeAreaDetailed // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x28924a0
	bool IsLocationInSafeArea(struct FVector& InLocation); // Function Solarland.SolarSafeArea.IsLocationInSafeArea // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2892400
	bool IsLocationInPoisonArea(struct FVector& InLocation); // Function Solarland.SolarSafeArea.IsLocationInPoisonArea // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2892360
	bool IsLocationInCurrentSafeArea(struct FVector& InLocation); // Function Solarland.SolarSafeArea.IsLocationInCurrentSafeArea // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x28922c0
	bool IsActorInSafeArea(struct AActor* InActor); // Function Solarland.SolarSafeArea.IsActorInSafeArea // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2892220
	void GMStartShrinkArea(); // Function Solarland.SolarSafeArea.GMStartShrinkArea // (Final|Exec|Native|Public) // @ game+0x2891760
	float GetShrinkTargetTime(); // Function Solarland.SolarSafeArea.GetShrinkTargetTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28921e0
	enum class ESafeAreaStatus GetSafeAreaStatus(); // Function Solarland.SolarSafeArea.GetSafeAreaStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28921c0
	struct FVector GetNextAreaLocation(); // Function Solarland.SolarSafeArea.GetNextAreaLocation // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x2892180
	int32_t GetCurrentIndex(); // Function Solarland.SolarSafeArea.GetCurrentIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2891980
	float GetCurrentDamage(); // Function Solarland.SolarSafeArea.GetCurrentDamage // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2891940
	struct FVector GetCurrentAreaBeginLocation(); // Function Solarland.SolarSafeArea.GetCurrentAreaBeginLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2891900
	float GetBeginShrinkTime(); // Function Solarland.SolarSafeArea.GetBeginShrinkTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2891820
	enum class EActorInSafeAreaStatus GetActorInSafeAreaStatus(struct AActor* InActor); // Function Solarland.SolarSafeArea.GetActorInSafeAreaStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2891780
};

// Class Solarland.SolarCircleSafeArea
// Size: 0x4c8 (Inherited: 0x468)
struct ASolarCircleSafeArea : ASolarSafeArea {
	struct TMap<float, struct UCurveFloat*> MiniMapScaleMap; // 0x468(0x50)
	struct TArray<struct FCircleSafeAreaInfo> SafeAreaConfigArr; // 0x4b8(0x10)

	void SetNextSafeArea(struct FCircleSafeAreaInfo& AreaInfo); // Function Solarland.SolarCircleSafeArea.SetNextSafeArea // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27a7470
	void Init(struct FVector& InSafeAreaCenterPos, float InPoisonCircleRadius); // Function Solarland.SolarCircleSafeArea.Init // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27a6370
	float GetNextSafeAreaRadius(); // Function Solarland.SolarCircleSafeArea.GetNextSafeAreaRadius // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x27a62b0
	struct UCurveFloat* GetMiniMapFOVCurveByRadius(float InRadius); // Function Solarland.SolarCircleSafeArea.GetMiniMapFOVCurveByRadius // (Final|Native|Public) // @ game+0x27a6220
	float GetCurrentSafeAreaRadius(); // Function Solarland.SolarCircleSafeArea.GetCurrentSafeAreaRadius // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27a5ff0
};

// Class Solarland.SolarCityName
// Size: 0x300 (Inherited: 0x228)
struct ASolarCityName : AActor {
	struct USolarStrongholdNamesConfig* NameConfigCN; // 0x228(0x08)
	struct USolarStrongholdNamesConfig* NameConfigEN; // 0x230(0x08)
	struct UTexture* NameTextureCN; // 0x238(0x08)
	struct UTexture* NameTextureEN; // 0x240(0x08)
	struct UMaterialInterface* NameMaterial; // 0x248(0x08)
	struct FString PointName; // 0x250(0x10)
	struct UMaterialInterface* TextMaterial; // 0x260(0x08)
	struct FSoftObjectPath FontPath; // 0x268(0x18)
	float BaseScale; // 0x280(0x04)
	float HightLimit; // 0x284(0x04)
	float MinimumDistance; // 0x288(0x04)
	int32_t LocTextID; // 0x28c(0x04)
	bool bCapitalsLock; // 0x290(0x01)
	char pad_291[0x3]; // 0x291(0x03)
	float GradientFadeTime; // 0x294(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct FSoftObjectPath PreviewFontPath; // 0x2a0(0x18)
	char pad_2B8[0x8]; // 0x2b8(0x08)
	struct UMaterialInstanceDynamic* MaterialDynamic; // 0x2c0(0x08)
	struct UMaterialInstanceDynamic* TextMaterialDynamic; // 0x2c8(0x08)
	char pad_2D0[0x30]; // 0x2d0(0x30)

	void SetSolarCityNameTickAndShow(enum class EReplayCameraMode OldMode, enum class EReplayCameraMode CurMode); // Function Solarland.SolarCityName.SetSolarCityNameTickAndShow // (Final|Native|Public|BlueprintCallable) // @ game+0x27a7680
	void SetSolarCityNameTick(bool bNeedTick); // Function Solarland.SolarCityName.SetSolarCityNameTick // (Final|Native|Public|BlueprintCallable) // @ game+0x27a75f0
	void SetForceDisplay(bool bDisplay); // Function Solarland.SolarCityName.SetForceDisplay // (Final|Native|Public|BlueprintCallable) // @ game+0x27a7180
	void OnCharacterOnRep(); // Function Solarland.SolarCityName.OnCharacterOnRep // (Final|Native|Protected) // @ game+0x27a6740
	struct TArray<struct FString> GetLocalizationCityNamesWithAllLanguages(); // Function Solarland.SolarCityName.GetLocalizationCityNamesWithAllLanguages // (Final|Native|Protected|BlueprintCallable) // @ game+0x27a6140
	struct FString GetLocalizationCityName(bool bGetNameWithLang); // Function Solarland.SolarCityName.GetLocalizationCityName // (Final|Native|Protected|BlueprintCallable) // @ game+0x27a6060
};

// Class Solarland.SolarCombatRegenerationInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarCombatRegenerationInterface : UInterface {
};

// Class Solarland.SolarCommonTextBlock
// Size: 0x490 (Inherited: 0x450)
struct USolarCommonTextBlock : UCommonTextBlock {
	bool bEnableLocText; // 0x448(0x01)
	int32_t LocTextID; // 0x44c(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x450(0x01)
	char pad_456[0x2]; // 0x456(0x02)
	struct FSlateFontSizeForLang SpecialLangFont; // 0x458(0x18)
	char pad_470[0x20]; // 0x470(0x20)

	void SetLocTextID(int32_t InLocTextID); // Function Solarland.SolarCommonTextBlock.SetLocTextID // (Native|Public|BlueprintCallable) // @ game+0xbe4a50
	void SetLocLangTextData(struct FText InText, bool InEnableLocText, int32_t InLocTextID, enum class ESolarSupportLanguages InPreviewLang, struct FSlateFontSizeForLang InSlateFontSizeForLang); // Function Solarland.SolarCommonTextBlock.SetLocLangTextData // (Native|Public|BlueprintCallable) // @ game+0x27a7210
};

// Class Solarland.SolarComponentKeyWidget
// Size: 0x2a0 (Inherited: 0x260)
struct USolarComponentKeyWidget : UUserWidget {
	struct FString ActionName; // 0x260(0x10)
	struct FString KeyBoardText; // 0x270(0x10)
	struct TArray<struct FString> KeyBoardTextArray; // 0x280(0x10)
	struct FMulticastInlineDelegate UpdateKeyboardMappingDelegate; // 0x290(0x10)

	void UpdateKeyboardMappingInternal(struct FString ModifyActionName); // Function Solarland.SolarComponentKeyWidget.UpdateKeyboardMappingInternal // (Final|Native|Public|BlueprintCallable) // @ game+0x277cdc0
	void OnUpdateKeyboardMapping(struct TSet<struct FString>& ActionNames); // Function Solarland.SolarComponentKeyWidget.OnUpdateKeyboardMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27a6d50
};

// Class Solarland.ControllerRelevancyInterface
// Size: 0x28 (Inherited: 0x28)
struct UControllerRelevancyInterface : UInterface {
};

// Class Solarland.SolarControllerRelevancySubsystem
// Size: 0x190 (Inherited: 0x30)
struct USolarControllerRelevancySubsystem : UWorldSubsystem {
	char pad_30[0x160]; // 0x30(0x160)

	void OnActorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarControllerRelevancySubsystem.OnActorEndPlay // (Final|Native|Private) // @ game+0x27a6670
};

// Class Solarland.SolarCrosshairSubsystem
// Size: 0x128 (Inherited: 0x30)
struct USolarCrosshairSubsystem : UWorldSubsystem {
	char pad_30[0x7c]; // 0x30(0x7c)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> ActivedPlayerWeapon; // 0xac(0x08)
	char pad_B4[0x34]; // 0xb4(0x34)
	struct TArray<struct UVehicleWeaponScopeWidget*> CachedVehicleWeaponScopes; // 0xe8(0x10)
	char pad_F8[0x30]; // 0xf8(0x30)

	void VehicleWeaponForbid(bool InbEntry); // Function Solarland.SolarCrosshairSubsystem.VehicleWeaponForbid // (Final|Native|Protected) // @ game+0x27a7750
	void ClearVehicleScopeUI(); // Function Solarland.SolarCrosshairSubsystem.ClearVehicleScopeUI // (Final|Native|Public) // @ game+0x27a5f50
};

// Class Solarland.SolarCrosshairWidgetInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarCrosshairWidgetInterface : UInterface {

	void OnUpdateReload(float InReloadProgress, int32_t InReloadAmmo, int32_t InMaxAmmo); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateReload // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x27a6e80
	void OnUpdateOverload(float InOverloadProgress, float InOverloadWarningRate, bool InbOverloadState); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateOverload // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateCoolDown(float InReloadProgress); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateCoolDown // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateCharge(bool InbCharging, int32_t InChargeMode, float InChargeProgress); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateCharge // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateAmmo(int32_t InReservedAmmo, int32_t InMaxAmmo, float InAmmoProgress, bool InbFirst); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateAmmo // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x27a6c00
	void OnReloadFinish(bool InbReloadSuccess, int32_t InReloadAmmo, int32_t InReservedAmmo, int32_t InMaxAmmo, float InAmmoProgress); // Function Solarland.SolarCrosshairWidgetInterface.OnReloadFinish // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x27a6780
	void OnInsufficientAmmo(); // Function Solarland.SolarCrosshairWidgetInterface.OnInsufficientAmmo // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x27a6760
	void OnChangeReloadState(bool InbQuitState, bool bReloadSpeedup); // Function Solarland.SolarCrosshairWidgetInterface.OnChangeReloadState // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnChangeOverloadState(bool InbQuitState); // Function Solarland.SolarCrosshairWidgetInterface.OnChangeOverloadState // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnActiveCrosshair(struct UUserWidget* InActiveCrosshair); // Function Solarland.SolarCrosshairWidgetInterface.OnActiveCrosshair // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarCustomModeBoxSafeArea
// Size: 0x468 (Inherited: 0x468)
struct ASolarCustomModeBoxSafeArea : ASolarSafeArea {

	bool PointInBox(struct FVector& Pos, struct UBoxComponent* Box); // Function Solarland.SolarCustomModeBoxSafeArea.PointInBox // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x27abe10
};

// Class Solarland.SolarDamageTextInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarDamageTextInterface : UInterface {

	void RequestPlayDamageTextByDatas(struct TArray<struct FSolarDamageText>& InSolarDamageTextDatas); // Function Solarland.SolarDamageTextInterface.RequestPlayDamageTextByDatas // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x27ac0d0
	void RequestPlayDamageText(struct FSolarDamageText& InSolarDamageText); // Function Solarland.SolarDamageTextInterface.RequestPlayDamageText // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x27abfe0
};

// Class Solarland.SolarDamageTextSlotWidget
// Size: 0x4f0 (Inherited: 0x400)
struct USolarDamageTextSlotWidget : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct TMap<enum class ESolarDamageTextType, struct FSolarDamageTextData> TextDatas; // 0x410(0x50)
	struct TMap<enum class ESolarDamageTextType, struct FSolarDamageTextIconData> IconDatas; // 0x460(0x50)
	uint32_t UniqueId; // 0x4b0(0x04)
	char pad_4B4[0x4]; // 0x4b4(0x04)
	struct UImage* Img_Crit; // 0x4b8(0x08)
	struct UWidgetAnimation* Crit_Anim; // 0x4c0(0x08)
	struct UWidgetAnimation* Text_Special_Anim; // 0x4c8(0x08)
	struct UHorizontalBox* Panel_DamageText; // 0x4d0(0x08)
	int32_t DamageForSpecialAnimation; // 0x4d8(0x04)
	float OptimizeModeVisibilityTime; // 0x4dc(0x04)
	enum class ESlateDetailMode OptimizeModeDetailMode; // 0x4e0(0x01)
	char pad_4E1[0xf]; // 0x4e1(0x0f)

	void OptimizeModeHideWidget(); // Function Solarland.SolarDamageTextSlotWidget.OptimizeModeHideWidget // (Final|Native|Private) // @ game+0x27abdf0
	void OnCharacterDeath(struct ASolarCharacter* InCharacter); // Function Solarland.SolarDamageTextSlotWidget.OnCharacterDeath // (Final|Native|Protected) // @ game+0x27ab400
};

// Class Solarland.SolarDamageTextWidget
// Size: 0x730 (Inherited: 0x400)
struct USolarDamageTextWidget : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct TMap<enum class ESolarDamageTextType, struct FSolarDamageTextStyle> FloatDamageTextConfig; // 0x408(0x50)
	struct TMap<enum class ESolarDamageTextType, struct FSolarDamageTextStyle> StackDamageTextConfig; // 0x458(0x50)
	struct FSolarDamageTextOffsetData DefaultOffsetData; // 0x4a8(0x0c)
	char pad_4B4[0x4]; // 0x4b4(0x04)
	struct TMap<struct AActor*, struct FSolarDamageTextOffsetData> OffsetMap; // 0x4b8(0x50)
	struct FVector2D FloatDamageTextOffset; // 0x508(0x08)
	struct FVector2D DamageTextDisplayAreaRatio; // 0x510(0x08)
	int32_t FloatDamageTextMaxinum; // 0x518(0x04)
	float FloatDamageTextScaleMaximum; // 0x51c(0x04)
	float FloatDamageTextScaleMinimum; // 0x520(0x04)
	float StackDamageTextScaleMaximum; // 0x524(0x04)
	float StackDamageTextScaleMinimum; // 0x528(0x04)
	float StackDamageTextHitScaleRatio; // 0x52c(0x04)
	float HeadShotDamageTextScaleRatio; // 0x530(0x04)
	char pad_534[0x4]; // 0x534(0x04)
	struct TArray<struct USolarDamageTextSlotWidget*> AllDamageTextSlotWidget; // 0x538(0x10)
	struct TArray<struct UVerticalBox*> DamageTextGroups; // 0x548(0x10)
	struct TMap<uint32_t, struct FSolarDamageTextGroupData> DamageTextGroupDatas; // 0x558(0x50)
	struct TMap<uint32_t, struct FSolarDamageTextGroupData> PendingSlotWidgetDatas; // 0x5a8(0x50)
	struct FRuntimeFloatCurve OBSlotScaleCurve; // 0x5f8(0x88)
	struct TMap<enum class ESlateDetailMode, int32_t> FloatDamageTextMaxinumBasedOnDetailMode; // 0x680(0x50)
	struct TMap<enum class ESlateDetailMode, int32_t> FloatDamageTextWidgetPoolBasedOnDetailMode; // 0x6d0(0x50)
	struct USolarDamageTextSlotWidget* FloatDamageTextWidget; // 0x720(0x08)
	char pad_728[0x8]; // 0x728(0x08)

	void UpdatePendingSlotWidgetDatas(uint32_t UniqueId); // Function Solarland.SolarDamageTextWidget.UpdatePendingSlotWidgetDatas // (Final|Native|Protected) // @ game+0x27ac2c0
	void RequestDisplayDamageText(struct FSolarDamageText& InDamageTextData); // Function Solarland.SolarDamageTextWidget.RequestDisplayDamageText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27abef0
};

// Class Solarland.SolarDeathViewSkillWidget
// Size: 0x470 (Inherited: 0x400)
struct USolarDeathViewSkillWidget : USolarUserWidget {
	struct UOverlay* WeaponSkill; // 0x400(0x08)
	struct UImage* Img_Bg; // 0x408(0x08)
	struct UImage* Img_Light; // 0x410(0x08)
	struct UImage* ProgressCD; // 0x418(0x08)
	struct UImage* icon_WeaponSkill; // 0x420(0x08)
	struct FLinearColor CurrentProgressState; // 0x428(0x10)
	struct FName ProgressParameterName; // 0x438(0x08)
	struct FLinearColor OnCDColor; // 0x440(0x10)
	struct FLinearColor UnCDColor; // 0x450(0x10)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> CurrentPlayerWeapon; // 0x460(0x08)
	bool bCoolDown; // 0x468(0x01)
	char pad_469[0x7]; // 0x469(0x07)

	void UpdateSkillVisibility(); // Function Solarland.SolarDeathViewSkillWidget.UpdateSkillVisibility // (Final|Native|Protected) // @ game+0x27ac370
	void UpdateSkillIcon(); // Function Solarland.SolarDeathViewSkillWidget.UpdateSkillIcon // (Final|Native|Protected) // @ game+0x27ac350
	void UpdateCurrentPlayerWeapon(); // Function Solarland.SolarDeathViewSkillWidget.UpdateCurrentPlayerWeapon // (Final|Native|Protected) // @ game+0x27ac2a0
	void UpdateCDProgress(bool bForceUpdate); // Function Solarland.SolarDeathViewSkillWidget.UpdateCDProgress // (Final|Native|Protected) // @ game+0x27ac210
	void SwitchSkillState(bool InbCD); // Function Solarland.SolarDeathViewSkillWidget.SwitchSkillState // (Final|Native|Protected|BlueprintCallable) // @ game+0x27ac180
};

// Class Solarland.SolarDeathViewWeaponPanelWidget
// Size: 0x460 (Inherited: 0x400)
struct USolarDeathViewWeaponPanelWidget : USolarUserWidget {
	struct USolarWeaponSlotWidgetMobile* Weapon_2; // 0x400(0x08)
	struct USolarWeaponSlotWidgetMobile* Weapon_3; // 0x408(0x08)
	struct USolarWeaponSlotWidgetMobile* Weapon_4; // 0x410(0x08)
	struct USolarWeaponSlotWidgetMobile* Weapon_PC_2; // 0x418(0x08)
	struct USolarWeaponSlotWidgetMobile* Weapon_PC_3; // 0x420(0x08)
	struct UWidgetAnimation* Anim_ManuallyDesktopLayout; // 0x428(0x08)
	char pad_430[0x20]; // 0x430(0x20)
	struct TArray<struct USolarWeaponSlotWidgetMobile*> WeaponWidgetArray; // 0x450(0x10)

	void OnWeaponSlotUpdateParts(int32_t InWeaponSlotID); // Function Solarland.SolarDeathViewWeaponPanelWidget.OnWeaponSlotUpdateParts // (Final|Native|Private) // @ game+0x27abbc0
	void OnUpdateAmmo(int32_t InWeaponSlotID); // Function Solarland.SolarDeathViewWeaponPanelWidget.OnUpdateAmmo // (Final|Native|Private) // @ game+0x27abb30
	void OnEquipWeapon(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InPlayerWeapon); // Function Solarland.SolarDeathViewWeaponPanelWidget.OnEquipWeapon // (Final|Native|Private) // @ game+0x27aba60
	void OnActiveWeapon(int32_t InWeaponSlotID, struct AActor* InActivedWeapon); // Function Solarland.SolarDeathViewWeaponPanelWidget.OnActiveWeapon // (Final|Native|Private) // @ game+0x27ab190
};

// Class Solarland.SolarDeathViewWeaponWidget
// Size: 0x498 (Inherited: 0x400)
struct USolarDeathViewWeaponWidget : USolarUserWidget {
	struct UCanvasPanel* Panel_Empty; // 0x400(0x08)
	struct UCanvasPanel* Panel_Weapon; // 0x408(0x08)
	struct UCanvasPanel* Panel_Hold; // 0x410(0x08)
	struct UImage* img_Mask; // 0x418(0x08)
	struct UImage* Img_Weapon; // 0x420(0x08)
	struct UImage* img_WeaponBg_2; // 0x428(0x08)
	struct UImage* img_WeaponBg; // 0x430(0x08)
	struct UImage* img_WeaponBg_3; // 0x438(0x08)
	struct UTextBlock* Txt_Bullets; // 0x440(0x08)
	struct UTextBlock* Txt_Bullets_1; // 0x448(0x08)
	struct USizeBox* SizeBox_1; // 0x450(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> OwnerPlayerWeapon; // 0x458(0x08)
	struct FTimerHandle LoadWeaponDataTimerHandle; // 0x460(0x08)
	char pad_468[0x10]; // 0x468(0x10)
	struct FLinearColor ExtraAmmoColor; // 0x478(0x10)
	struct FLinearColor AmmoDefaultColor; // 0x488(0x10)

	void OnWeaponUpgrade(int32_t InLevel, uint32_t InWeaponUniqueID); // Function Solarland.SolarDeathViewWeaponWidget.OnWeaponUpgrade // (Final|Native|Private) // @ game+0x27abd20
	void OnWeaponUpdateAmmoCount(int32_t InFireModeType, struct ASolarWeapon* InWeapon); // Function Solarland.SolarDeathViewWeaponWidget.OnWeaponUpdateAmmoCount // (Final|Native|Private) // @ game+0x27abc50
	void OnCharacterLevelChanged(int32_t InNewLevel); // Function Solarland.SolarDeathViewWeaponWidget.OnCharacterLevelChanged // (Final|Native|Private) // @ game+0x27ab490
	void AsyncLoadWeaponData(); // Function Solarland.SolarDeathViewWeaponWidget.AsyncLoadWeaponData // (Final|Native|Private) // @ game+0x27aaa80
};

// Class Solarland.SolarDebugDrawer
// Size: 0x28 (Inherited: 0x28)
struct USolarDebugDrawer : UInterface {
};

// Class Solarland.SolarDebugDrawerManager
// Size: 0x2a0 (Inherited: 0x228)
struct ASolarDebugDrawerManager : AActor {
	char pad_228[0x78]; // 0x228(0x78)
};

// Class Solarland.SolarDecorationActor
// Size: 0x228 (Inherited: 0x228)
struct ASolarDecorationActor : AActor {
};

// Class Solarland.SolarDecorationComponent
// Size: 0x370 (Inherited: 0x320)
struct USolarDecorationComponent : USceneComponent {
	struct FSoftObjectPath ChildActorPath; // 0x318(0x18)
	bool bHideAllDecorationComponents; // 0x330(0x01)
	struct AActor* ChildActorClass; // 0x338(0x08)
	struct UChildActorComponent* ChildActorComponent; // 0x340(0x08)
	char pad_349[0x7]; // 0x349(0x07)
	struct FSoftClassPath ChildActorClassPath; // 0x350(0x18)
	char pad_368[0x8]; // 0x368(0x08)
};

// Class Solarland.SolarDemoNetDriver
// Size: 0x1608 (Inherited: 0x14c8)
struct USolarDemoNetDriver : UDemoNetDriver {
	struct TSet<struct UObject*> AlwaysRecordClasses; // 0x14c8(0x50)
	struct TSet<struct AActor*> RelevantActors; // 0x1518(0x50)
	struct TSet<struct AActor*> ReplicatedActors; // 0x1568(0x50)
	struct TMap<struct UNetConnection*, struct FString> CacheConnectionToPlayerID; // 0x15b8(0x50)
};

// Class Solarland.SolarDestructibleActor
// Size: 0x278 (Inherited: 0x238)
struct ASolarDestructibleActor : AStaticMeshActor {
	struct TArray<enum class ECollisionChannel> OnHitIgnoreChannels; // 0x238(0x10)
	float AddForceCoefficient; // 0x248(0x04)
	float BrokenDestroyTime; // 0x24c(0x04)
	bool bChildDetachOnBroken; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)
	struct FString BrokenSoundName; // 0x258(0x10)
	struct FVector BrokenSoundLocationOffset; // 0x268(0x0c)
	char pad_274[0x4]; // 0x274(0x04)

	void OnDestructibleActorHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FHitResult& Hit, float SpeedDifference); // Function Solarland.SolarDestructibleActor.OnDestructibleActorHit // (Final|Native|Public|HasOutParms) // @ game+0x27ab520
	void OnClientBrokenEffect(); // Function Solarland.SolarDestructibleActor.OnClientBrokenEffect // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnBroken(struct ASolarVehiclePawn* VehiclePawn, float SpeedDifference, struct FVector Impulse, struct FVector ImpactPoint); // Function Solarland.SolarDestructibleActor.OnBroken // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x27ab260
};

// Class Solarland.SolarDownloaderManager
// Size: 0xc0 (Inherited: 0x30)
struct USolarDownloaderManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnDownloaderProgress; // 0x38(0x10)
	struct FMulticastInlineDelegate OnDownloaderSuccess; // 0x48(0x10)
	struct FMulticastInlineDelegate OnDownloaderFailed; // 0x58(0x10)
	bool bIsDownloaderEnabled; // 0x68(0x01)
	bool bSupportFileCache; // 0x69(0x01)
	char pad_6A[0x2]; // 0x6a(0x02)
	int32_t CacheExpiredSeconds; // 0x6c(0x04)
	struct TMap<struct FString, struct UDownloaderHttpTask*> TaskMap; // 0x70(0x50)

	void OnDownloaderSuccessBroadcastNextTick(struct FString InUrl, struct FDownloaderResponse& InResponse); // Function Solarland.SolarDownloaderManager.OnDownloaderSuccessBroadcastNextTick // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27ab930
	void OnDownloaderProgressBroadcastNextTick(struct FString InUrl, int32_t& BytesSent, int32_t& BytesReceived); // Function Solarland.SolarDownloaderManager.OnDownloaderProgressBroadcastNextTick // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27ab800
	void OnDownloaderFailedBroadcastNextTick(struct FString InUrl, enum class EDownloaderFailedType& InFailedType, int32_t& InErrorCode); // Function Solarland.SolarDownloaderManager.OnDownloaderFailedBroadcastNextTick // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27ab6c0
	void LaunchTask(struct FString InUrl); // Function Solarland.SolarDownloaderManager.LaunchTask // (Final|Native|Public|BlueprintCallable) // @ game+0x27ab0f0
	bool IsTaskExist(struct FString InUrl); // Function Solarland.SolarDownloaderManager.IsTaskExist // (Final|Native|Public|BlueprintCallable) // @ game+0x27ab040
	bool IsManagerEnable(); // Function Solarland.SolarDownloaderManager.IsManagerEnable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2644140
	struct FDownloaderTaskInfo GetTaskInfo(struct FString InUrl); // Function Solarland.SolarDownloaderManager.GetTaskInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27aaed0
	struct FString GetTaskCachePath(struct FString InUrl); // Function Solarland.SolarDownloaderManager.GetTaskCachePath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27aade0
	struct USolarDownloaderManager* Get(); // Function Solarland.SolarDownloaderManager.Get // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x27aadb0
	void DownloadCallbackToLuaInternal(); // Function Solarland.SolarDownloaderManager.DownloadCallbackToLuaInternal // (Event|Protected|BlueprintEvent) // @ game+0xb66830
	void CreateDownloaderTask(struct FDownloaderTaskInfo& InTaskInfo, struct FDelegate& SuccessHandle, struct FDelegate& FailedHandle, struct FDelegate& ProgressHandle); // Function Solarland.SolarDownloaderManager.CreateDownloaderTask // (Final|Native|Public|HasOutParms) // @ game+0x27aab50
	bool CanTaskLoadFromCache(struct FString InUrl); // Function Solarland.SolarDownloaderManager.CanTaskLoadFromCache // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27aaaa0
};

// Class Solarland.SolarDownloadManager
// Size: 0x160 (Inherited: 0x30)
struct USolarDownloadManager : UGameInstanceSubsystem {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnCDNURLSelectionChanged; // 0x38(0x10)
	char pad_48[0x18]; // 0x48(0x18)
	struct FString CDNResBaseURL; // 0x60(0x10)
	struct TMap<struct FName, struct USolarlandFileDownloader*> ActivedFileDownloaders; // 0x70(0x50)
	struct TMap<struct FName, struct USolarlandContentStringDownloader*> ActivedContentStringDownloaders; // 0xc0(0x50)
	struct TMap<struct FName, struct USolarlandPakMounter*> ActiveMounters; // 0x110(0x50)

	void SetNextCDNURL(); // Function Solarland.SolarDownloadManager.SetNextCDNURL // (Final|Native|Public|BlueprintCallable) // @ game+0x27afbe0
	void SetCurrentCDNURL(struct FString CDNURL); // Function Solarland.SolarDownloadManager.SetCurrentCDNURL // (Final|Native|Public|BlueprintCallable) // @ game+0x27afa10
	void SetCDNURLList(struct TArray<struct FString>& InCDNURLList); // Function Solarland.SolarDownloadManager.SetCDNURLList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27af940
	struct USolarlandPakMounter* RequirePaksMount(struct TArray<struct FLocalFileInfo>& InPakInfos, struct FName& InMountTag, int32_t InMountOrder, bool bInIncreasedOrder); // Function Solarland.SolarDownloadManager.RequirePaksMount // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27af4c0
	struct USolarlandFileDownloader* RequireFilesDownload(struct TArray<struct FDownloadFileInfo>& InFileInfos, struct FString InLocalDir, struct FName& InDownloadTag, bool bInUseChunk, bool bInForceRedownload); // Function Solarland.SolarDownloadManager.RequireFilesDownload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27af290
	struct USolarlandContentStringDownloader* RequireContentStringDownload(struct FString InUrl, struct FName& InDownloadTag, bool bInUseChunk, bool bInForceRedownload); // Function Solarland.SolarDownloadManager.RequireContentStringDownload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27af0f0
	void OnCDNURLSelectionChanged__DelegateSignature(struct FString CurrentCDNURL); // DelegateFunction Solarland.SolarDownloadManager.OnCDNURLSelectionChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	bool IsLocalBuild(); // Function Solarland.SolarDownloadManager.IsLocalBuild // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27ae890
	bool IsCurrentCDNURLAvailable(); // Function Solarland.SolarDownloadManager.IsCurrentCDNURLAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27ae800
	struct USolarlandPakMounter* GetMounterByTag(struct FName& InMountTag); // Function Solarland.SolarDownloadManager.GetMounterByTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27ae740
	struct USolarlandFileDownloader* GetFileDownloaderByTag(struct FName& InDownloadTag); // Function Solarland.SolarDownloadManager.GetFileDownloaderByTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27ae6a0
	struct USolarDownloadManager* GetDownloadManager(struct UObject* WorldContextObject); // Function Solarland.SolarDownloadManager.GetDownloadManager // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x27ae610
	struct FString GetCurrentCDNURL(); // Function Solarland.SolarDownloadManager.GetCurrentCDNURL // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27ae5e0
	struct USolarlandContentStringDownloader* GetContentStringDownloaderByTag(struct FName& InDownloadTag); // Function Solarland.SolarDownloadManager.GetContentStringDownloaderByTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27ae540
};

// Class Solarland.SolarDragDropOperation
// Size: 0xd0 (Inherited: 0x88)
struct USolarDragDropOperation : UDragDropOperation {
	int32_t dropId; // 0x88(0x04)
	int32_t DropNum; // 0x8c(0x04)
	int32_t DropWeaponSlot; // 0x90(0x04)
	int32_t DropItemType; // 0x94(0x04)
	struct FString DropName; // 0x98(0x10)
	int32_t DropFromGridType; // 0xa8(0x04)
	int32_t DropFromIndex; // 0xac(0x04)
	struct AActor* DropActor; // 0xb0(0x08)
	int32_t DropGrade; // 0xb8(0x04)
	int32_t DropFromPickupType; // 0xbc(0x04)
	int32_t DropFromThisID; // 0xc0(0x04)
	int32_t DropWeaponPartType; // 0xc4(0x04)
	int32_t DropLevel; // 0xc8(0x04)
	enum class EUIDragSourceType DragSourceType; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)
};

// Class Solarland.SolarDriveControlBase
// Size: 0x550 (Inherited: 0x400)
struct USolarDriveControlBase : USolarUserWidget {
	struct ASolarPlayerController* SolarPC; // 0x400(0x08)
	struct ASolarVehiclePawn* VehiclePawn; // 0x408(0x08)
	char pad_410[0x8]; // 0x410(0x08)
	struct UCanvasPanel* Panel_SwitchSeat; // 0x418(0x08)
	struct UCheckBoxGroup* SeatFlag; // 0x420(0x08)
	char pad_428[0x18]; // 0x428(0x18)
	struct USolarVehicleHealthWidget* VehicleHealthWidget; // 0x440(0x08)
	char pad_448[0x80]; // 0x448(0x80)
	struct UCanvasPanel* Panel_Warning_Danger; // 0x4c8(0x08)
	struct UImage* Img_Danger_Mask; // 0x4d0(0x08)
	struct UProgressBar* ProgressBar_Danger; // 0x4d8(0x08)
	struct UCanvasPanel* Panel_ProgressBar_Danger; // 0x4e0(0x08)
	int32_t DangerOptimizeFrequency; // 0x4e8(0x04)
	char pad_4EC[0x3c]; // 0x4ec(0x3c)
	struct UCanvasPanel* Panel_ScopeUI; // 0x528(0x08)
	char pad_530[0x10]; // 0x530(0x10)
	struct USolarAdapterWidget* CarInfo_AdapterWidget; // 0x540(0x08)
	struct USolarVehicleInfoWidget* VehicleInfoWidget; // 0x548(0x08)

	void ShowDriveControl(enum class EDriveState InDriveState, struct FVehicleControlUserSettings& InDriverSettings); // Function Solarland.SolarDriveControlBase.ShowDriveControl // (Native|Public|HasOutParms) // @ game+0x27afd10
	void SetOnVehicleUI(enum class EDriveState InDriveState); // Function Solarland.SolarDriveControlBase.SetOnVehicleUI // (Final|Native|Public|BlueprintCallable) // @ game+0x27afc00
	void ScopeUIStateChanged(bool BOpened); // Function Solarland.SolarDriveControlBase.ScopeUIStateChanged // (Native|Public) // @ game+0x27af730
	void RefreshOccupiedSeats(bool bSwtichVehicleSeatPlayer); // Function Solarland.SolarDriveControlBase.RefreshOccupiedSeats // (Native|Protected) // @ game+0x27af060
	void RefreshHealthPercentUI(); // Function Solarland.SolarDriveControlBase.RefreshHealthPercentUI // (Final|Native|Protected) // @ game+0x27af040
	void RefreshAbilityActivation(bool bInActivated, bool bCanCancel, int32_t InAbilityIndex, float InDurationTime); // Function Solarland.SolarDriveControlBase.RefreshAbilityActivation // (Native|Protected) // @ game+0x27aeed0
	void OnVehicleWeaponChanged(); // Function Solarland.SolarDriveControlBase.OnVehicleWeaponChanged // (Final|Native|Protected) // @ game+0x27aeeb0
	void OnVehicleTypeChange(); // Function Solarland.SolarDriveControlBase.OnVehicleTypeChange // (Native|Public) // @ game+0x1ad7160
	void OnVehicleSkinUpdate(struct ASolarVehiclePawn* VehicleComp); // Function Solarland.SolarDriveControlBase.OnVehicleSkinUpdate // (Final|Native|Protected) // @ game+0x27aee20
	void OnSelfHealingChanged(bool bActived); // Function Solarland.SolarDriveControlBase.OnSelfHealingChanged // (Final|Native|Protected) // @ game+0x27aeb40
	void OnLocalWeaponSystemVehicleInitialized(); // Function Solarland.SolarDriveControlBase.OnLocalWeaponSystemVehicleInitialized // (Final|Native|Protected) // @ game+0x27aeb20
	void HiddenDriveControl(); // Function Solarland.SolarDriveControlBase.HiddenDriveControl // (Native|Public|BlueprintCallable) // @ game+0x1ad6e00
	struct TArray<struct UUserWidget*> GetVehicleSkillWidgets(); // Function Solarland.SolarDriveControlBase.GetVehicleSkillWidgets // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ClearVehicleHandle(); // Function Solarland.SolarDriveControlBase.ClearVehicleHandle // (Native|Public) // @ game+0xbd9710
	void BP_ApplyVehicleUI(enum class EDriveState InDriveState); // Function Solarland.SolarDriveControlBase.BP_ApplyVehicleUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ApplyVehicleUI(enum class EDriveState InDriveState); // Function Solarland.SolarDriveControlBase.ApplyVehicleUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void AddScopeToPanel(struct UUserWidget* InChildWidget, bool bInSpectate); // Function Solarland.SolarDriveControlBase.AddScopeToPanel // (Final|Native|Public) // @ game+0x27ae170
};

// Class Solarland.SolarDriveControlWidgetPC
// Size: 0x558 (Inherited: 0x550)
struct USolarDriveControlWidgetPC : USolarDriveControlBase {
	struct UWidgetSwitcher* WidgetSwitcher_GetOff; // 0x550(0x08)
};

// Class Solarland.SolarDriveControWidgetMobile
// Size: 0x730 (Inherited: 0x550)
struct USolarDriveControWidgetMobile : USolarDriveControlBase {
	char pad_550[0x20]; // 0x550(0x20)
	struct UVehicleMoveWidget* Joy_Mode1_D; // 0x570(0x08)
	struct UVehicleMoveWidget* Joy_Mode2_D; // 0x578(0x08)
	struct UCanvasPanel* Sprint; // 0x580(0x08)
	char pad_588[0x8]; // 0x588(0x08)
	struct UImage* Img_SprintActive; // 0x590(0x08)
	struct USolarTextBlock* Txt_Sprint; // 0x598(0x08)
	struct UCanvasPanel* SprintActiveOncePanel; // 0x5a0(0x08)
	struct USolarInputButton* BT_DriveLeft; // 0x5a8(0x08)
	struct USolarInputButton* BT_DriveRight; // 0x5b0(0x08)
	struct UImage* Img_SprintLock; // 0x5b8(0x08)
	struct UImage* FX_CircleLoop; // 0x5c0(0x08)
	char pad_5C8[0x8]; // 0x5c8(0x08)
	struct UCheckBoxGroup* SeatFlag_Expand; // 0x5d0(0x08)
	struct UCanvasPanel* BT_Switch_Normal; // 0x5d8(0x08)
	struct UCanvasPanel* BT_Switch_Expand; // 0x5e0(0x08)
	struct USolarButton* BT_ChangeSeat; // 0x5e8(0x08)
	struct UButton* Btn_SeatClose; // 0x5f0(0x08)
	char pad_5F8[0x10]; // 0x5f8(0x10)
	struct UCanvasPanel* Panel_VehicleFire; // 0x608(0x08)
	struct UCanvasPanel* Panel_Reload; // 0x610(0x08)
	struct UCanvasPanel* Panel_Gunsight; // 0x618(0x08)
	struct USolarInputButton* BT_Drive_Shot; // 0x620(0x08)
	struct UCanvasPanel* Panel_QuickADS; // 0x628(0x08)
	struct UProgressBar* QuickAds_Progress_CD; // 0x630(0x08)
	struct USolarTextBlock* QuickAds_Txt_Progress; // 0x638(0x08)
	struct USolarTextBlock* Txt_Fire; // 0x640(0x08)
	struct UWidgetSwitcher* WGS_Vehicle_PrimaryFire; // 0x648(0x08)
	char pad_650[0x10]; // 0x650(0x10)
	struct USolarInputButton* BT_Weapon_Exit; // 0x660(0x08)
	struct UButton* BT_Drive_Out; // 0x668(0x08)
	struct UButton* BT_Jet_Out; // 0x670(0x08)
	struct UWidgetAnimation* Anim_Drive_Out_Enter; // 0x678(0x08)
	struct UCanvasPanel* Panel_Drive_Out; // 0x680(0x08)
	struct UImage* Img_vx_Circle; // 0x688(0x08)
	char pad_690[0x8]; // 0x690(0x08)
	struct UCanvasPanel* Panel_DriveCarup; // 0x698(0x08)
	struct UCanvasPanel* Panel_DriveCardown; // 0x6a0(0x08)
	struct UCanvasPanel* Container_Driver; // 0x6a8(0x08)
	struct USolarInputButton* BT_Trumpet_Shot; // 0x6b0(0x08)
	struct USolarInputButton* BT_Drive_Drift; // 0x6b8(0x08)
	struct UCanvasPanel* Car_Control_UI_Vehicle; // 0x6c0(0x08)
	struct UCanvasPanel* Drive_Mode_2; // 0x6c8(0x08)
	struct UCanvasPanel* Drive_Mode_3; // 0x6d0(0x08)
	struct USolarInputButton* BT_Drive_R; // 0x6d8(0x08)
	struct USolarInputButton* BT_Drive_Return; // 0x6e0(0x08)
	struct UWalkWidgetNew* SteeringJoyStick; // 0x6e8(0x08)
	struct UImage* Img_Steering; // 0x6f0(0x08)
	struct UCheckBox* CheckBox_Steeting_Right; // 0x6f8(0x08)
	struct UCheckBox* CheckBox_Steeting_Left; // 0x700(0x08)
	struct UCanvasPanel* Panel_Flying; // 0x708(0x08)
	struct UProgressBar* ProgressBar_Flying; // 0x710(0x08)
	float EjectionBtnScaleMagnification; // 0x718(0x04)
	struct FVector2D EjectionBtnMaxScale; // 0x71c(0x08)
	char pad_724[0xc]; // 0x724(0x0c)

	void StopAutoMove(bool bResetJoy); // Function Solarland.SolarDriveControWidgetMobile.StopAutoMove // (Final|Native|Protected|BlueprintCallable) // @ game+0x27afdf0
	void SetVehicleWeaponAbilityActivated(bool bInActive); // Function Solarland.SolarDriveControWidgetMobile.SetVehicleWeaponAbilityActivated // (Final|Native|Protected) // @ game+0x27afc80
	void SetFlyingProgressVisible(bool bInVisible); // Function Solarland.SolarDriveControWidgetMobile.SetFlyingProgressVisible // (Final|Native|Protected) // @ game+0x27afb50
	void ResetDriverControlInput(bool bIgnoreSprint); // Function Solarland.SolarDriveControWidgetMobile.ResetDriverControlInput // (Final|Native|Public|BlueprintCallable) // @ game+0x27af6a0
	void OnSwitchRotateInAir(bool bOpen); // Function Solarland.SolarDriveControWidgetMobile.OnSwitchRotateInAir // (Final|Native|Protected|BlueprintCallable) // @ game+0x27aed90
	void OnSteeringInput(float Offset); // Function Solarland.SolarDriveControWidgetMobile.OnSteeringInput // (Final|Native|Protected) // @ game+0x27aed10
	void OnSprintLockIconActiveFunc(struct FVector2D& SprintPosition); // Function Solarland.SolarDriveControWidgetMobile.OnSprintLockIconActiveFunc // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x27aec80
	void OnSprintIconHideFunc(); // Function Solarland.SolarDriveControWidgetMobile.OnSprintIconHideFunc // (Final|Native|Protected) // @ game+0x27aec60
	void OnSprintIconActiveFunc(struct FVector2D& SprintPosition); // Function Solarland.SolarDriveControWidgetMobile.OnSprintIconActiveFunc // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x27aebd0
	void OnJetEnterAnimFinished(); // Function Solarland.SolarDriveControWidgetMobile.OnJetEnterAnimFinished // (Final|Native|Protected) // @ game+0x27aeb00
	void OnExpandSeatFlagChanged(struct TArray<struct UCheckBox*>& ChildChangedArray, int32_t CheckedChildIndex); // Function Solarland.SolarDriveControWidgetMobile.OnExpandSeatFlagChanged // (Final|Native|Protected|HasOutParms) // @ game+0x27aea00
	void OnDriverVehicleHit(float SpeedDifferenceInKM); // Function Solarland.SolarDriveControWidgetMobile.OnDriverVehicleHit // (Final|Native|Protected) // @ game+0x27ae980
	void OnDriverSettingSaved(); // Function Solarland.SolarDriveControWidgetMobile.OnDriverSettingSaved // (Final|Native|Protected) // @ game+0x27ae960
	void OnDriveDownPressed(); // Function Solarland.SolarDriveControWidgetMobile.OnDriveDownPressed // (Final|Native|Protected) // @ game+0x27ae940
	void OnCloseExpandSwitchClicked(); // Function Solarland.SolarDriveControWidgetMobile.OnCloseExpandSwitchClicked // (Final|Native|Protected) // @ game+0x27ae920
	void OnChangeSeatReleased(); // Function Solarland.SolarDriveControWidgetMobile.OnChangeSeatReleased // (Final|Native|Protected) // @ game+0x27ae900
	void OnChangeSeatPressed(); // Function Solarland.SolarDriveControWidgetMobile.OnChangeSeatPressed // (Final|Native|Protected) // @ game+0x27ae8e0
	void OnChangeSeatHolding(); // Function Solarland.SolarDriveControWidgetMobile.OnChangeSeatHolding // (Final|Native|Protected) // @ game+0x27ae8c0
	void InputSprintLockStart(); // Function Solarland.SolarDriveControWidgetMobile.InputSprintLockStart // (Final|Native|Protected) // @ game+0x27ae7e0
	bool CanSwitchVehicleSeatByTags(); // Function Solarland.SolarDriveControWidgetMobile.CanSwitchVehicleSeatByTags // (Final|Native|Protected) // @ game+0x27ae260
	void BeginAutoMove(); // Function Solarland.SolarDriveControWidgetMobile.BeginAutoMove // (Final|Native|Protected) // @ game+0x27ae240
	void ApplyCustomizeLayoutEx(int32_t LayoutType, enum class EVehicleControlUIType VehicleControlUIType); // Function Solarland.SolarDriveControWidgetMobile.ApplyCustomizeLayoutEx // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarEasyAntiCheatComponent
// Size: 0xd0 (Inherited: 0xb0)
struct USolarEasyAntiCheatComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct USolarEasyAntiCheatManager* AntiCheatManager; // 0xb8(0x08)
	struct AActor* Owner; // 0xc0(0x08)
	char pad_C8[0x8]; // 0xc8(0x08)

	void ServerOnUnRegisterClient(); // Function Solarland.SolarEasyAntiCheatComponent.ServerOnUnRegisterClient // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xc697e0
	void ServerOnRegisterClient(struct FString ProductID); // Function Solarland.SolarEasyAntiCheatComponent.ServerOnRegisterClient // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x27af8a0
	void ServerOnReceiveClientNotifyMessage(uint32_t DataLenBytes, struct FString Data); // Function Solarland.SolarEasyAntiCheatComponent.ServerOnReceiveClientNotifyMessage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x27af7c0
	void ClientOnReceiveServerNotifyMessage(uint32_t DataLenBytes, struct FString Data); // Function Solarland.SolarEasyAntiCheatComponent.ClientOnReceiveServerNotifyMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x27ae3c0
	void ClientOnActionRequired(int32_t ClientAction, int32_t ActionReason, struct FString Details); // Function Solarland.SolarEasyAntiCheatComponent.ClientOnActionRequired // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x27ae290
};

// Class Solarland.SolarEasyAntiCheatManager
// Size: 0xd8 (Inherited: 0x28)
struct USolarEasyAntiCheatManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	bool EnableAntiCheat; // 0x30(0x01)
	bool bEnableAntiCheatLauncherCheck; // 0x31(0x01)
	char pad_32[0xa6]; // 0x32(0xa6)

	void TestSendDSAction(int32_t ActionReason, struct FString ActionDetials); // Function Solarland.SolarEasyAntiCheatManager.TestSendDSAction // (Final|Native|Public|BlueprintCallable) // @ game+0x27afe80
	void SwitchAntiCheatState(); // Function Solarland.SolarEasyAntiCheatManager.SwitchAntiCheatState // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void SetEOSOpenIDToken(struct FString OpenIDToken); // Function Solarland.SolarEasyAntiCheatManager.SetEOSOpenIDToken // (Final|Native|Public|BlueprintCallable) // @ game+0x27afab0
	void SendSteamAntiCheatRequest(int32_t ErrorCode); // Function Solarland.SolarEasyAntiCheatManager.SendSteamAntiCheatRequest // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void ReportAntiCheatBI(int32_t ErrorCode); // Function Solarland.SolarEasyAntiCheatManager.ReportAntiCheatBI // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool IsLaunchbyEOSBootstrapper(); // Function Solarland.SolarEasyAntiCheatManager.IsLaunchbyEOSBootstrapper // (Final|Native|Public|BlueprintCallable) // @ game+0x27ae860
	bool IsEOSSettingChanged(); // Function Solarland.SolarEasyAntiCheatManager.IsEOSSettingChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x27ae830
	void EasyAntiCheatLogin(struct FString AppToken); // Function Solarland.SolarEasyAntiCheatManager.EasyAntiCheatLogin // (Final|Native|Public|BlueprintCallable) // @ game+0x27ae4a0
	void AntiCheatLauncherCheck(); // Function Solarland.SolarEasyAntiCheatManager.AntiCheatLauncherCheck // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool AntiCheatEosSettingCheck(); // Function Solarland.SolarEasyAntiCheatManager.AntiCheatEosSettingCheck // (Event|Public|BlueprintEvent) // @ game+0xb66830
};

// Class Solarland.SolarEffectExecution
// Size: 0x68 (Inherited: 0x40)
struct USolarEffectExecution : UGameplayEffectExecutionCalculation {
	struct USolarEffectExecutionProxy* CDOProxyClass; // 0x40(0x08)
	struct USolarEffectExecutionProxy* CDOProxy; // 0x48(0x08)
	char pad_50[0x18]; // 0x50(0x18)
};

// Class Solarland.SolarEffectExecutionProxy
// Size: 0x30 (Inherited: 0x28)
struct USolarEffectExecutionProxy : UObject {
	struct TWeakObjectPtr<struct USolarEffectExecution> CDOOwner; // 0x28(0x08)

	void Execute(struct FGameplayEffectCustomExecutionParameters& ExecutionParams, struct FGameplayEffectCustomExecutionOutput& OutExecutionOutput); // Function Solarland.SolarEffectExecutionProxy.Execute // (Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x2d0d160
	struct USolarEffectExecutionProxy* CreateProxy(struct USolarEffectExecution* InCDOOwner, struct USolarEffectExecutionProxy* ProxyClass); // Function Solarland.SolarEffectExecutionProxy.CreateProxy // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x27b2960
};

// Class Solarland.SolarEffectInitiatorInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarEffectInitiatorInterface : UInterface {
};

// Class Solarland.SolarEffectRecipientInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarEffectRecipientInterface : UInterface {

	void ResponseAbilityEffectHitResult(struct AActor* InEffectInitiator, struct FHitResult& InHitResult, float InDamage); // Function Solarland.SolarEffectRecipientInterface.ResponseAbilityEffectHitResult // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarElectricShop
// Size: 0x450 (Inherited: 0x238)
struct ASolarElectricShop : ASolarInteractableActor {
	int32_t MaxWeaponLevel; // 0x238(0x04)
	int32_t MaxShieldLevel; // 0x23c(0x04)
	struct TArray<float> UpgradeEnergyCosts; // 0x240(0x10)
	struct UStaticMeshComponent* ShopMesh; // 0x250(0x08)
	struct USphereComponent* CollisionComp; // 0x258(0x08)
	int32_t SpawnID; // 0x260(0x04)
	bool bSpecificShopID; // 0x264(0x01)
	char pad_265[0x3]; // 0x265(0x03)
	struct TSoftObjectPtr<UDataTable> ShopMeshPathTable; // 0x268(0x28)
	bool bIfShowInMap; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)
	struct TSoftClassPtr<UObject> MapIcon; // 0x298(0x28)
	int32_t MapIconID; // 0x2c0(0x04)
	float MaxTirggerAngle; // 0x2c4(0x04)
	int32_t ShopID; // 0x2c8(0x04)
	bool bIsBroken; // 0x2cc(0x01)
	char pad_2CD[0x3]; // 0x2cd(0x03)
	float TirggerDistance; // 0x2d0(0x04)
	enum class EShopModelAnimType CurrentModeAnimType; // 0x2d4(0x01)
	enum class EShopModelAnimType WantedModeAnimType; // 0x2d5(0x01)
	char pad_2D6[0x2]; // 0x2d6(0x02)
	struct TArray<struct TWeakObjectPtr<struct ASolarCharacter>> InstigateCharacters; // 0x2d8(0x10)
	struct UDataTable* ShopMeshDataTable; // 0x2e8(0x08)
	struct TArray<struct FElectricShopSection> ItemSections; // 0x2f0(0x10)
	struct TArray<struct FElectricShopCDRecord> ItemCDRecords; // 0x300(0x10)
	struct TArray<float> PoolRefreshTimeList; // 0x310(0x10)
	struct TArray<struct FPoolRefreshInfo> PoolRefreshInfoList; // 0x320(0x10)
	int32_t CurPoolGroupID; // 0x330(0x04)
	char pad_334[0x14]; // 0x334(0x14)
	struct TArray<struct UMapMarkBase*> MapMarkArray; // 0x348(0x10)
	struct TArray<struct FTimerHandle> CachedHandles; // 0x358(0x10)
	float DemoRotationSpeed; // 0x368(0x04)
	float DemoSwtichTime; // 0x36c(0x04)
	float DemoOffsetFromZ; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
	struct TSoftObjectPtr<UDataTable> ItemDemoBPTable; // 0x378(0x28)
	struct UDataTable* ItemDemoBPDataTable; // 0x3a0(0x08)
	struct TMap<struct FSoftObjectPath, struct AElectricShopItemDemo*> DemoActorMap; // 0x3a8(0x50)
	struct AElectricShopItemDemo* CurDemo; // 0x3f8(0x08)
	struct FTimerHandle DemoLoopPlaybackHandle; // 0x400(0x08)
	struct TArray<struct AElectricShopItemDemo*> SpawnedDemoActorList; // 0x408(0x10)
	char pad_418[0x28]; // 0x418(0x28)
	struct TArray<struct UObject*> CachedDemoItemsClass; // 0x440(0x10)

	void UpgradeWeaponResponse(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.UpgradeWeaponResponse // (Net|Native|Event|NetMulticast|Public) // @ game+0x27b4030
	void UpgradeShieldResponse(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.UpgradeShieldResponse // (Net|Native|Event|NetMulticast|Public) // @ game+0x27b3fa0
	bool ServerUpgradeWeapon(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ServerUpgradeWeapon // (Final|Native|Public) // @ game+0x27b3ed0
	bool ServerUpgradeShield(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ServerUpgradeShield // (Final|Native|Public) // @ game+0x27b3e30
	void ServerStatisticElectricShop(struct ASolarCharacter* ActivateCharacter, enum class EShopStatisticType StatisticType, int32_t InValueA, int32_t InValueB); // Function Solarland.SolarElectricShop.ServerStatisticElectricShop // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x27b3ce0
	bool ServerPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ServerPurchaseEShopItems // (Final|Native|Public) // @ game+0x27b3bd0
	bool RemoveInstigator(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.RemoveInstigator // (Final|Native|Public) // @ game+0x27b3b30
	bool RefreshSellingItem(int32_t InProductID); // Function Solarland.SolarElectricShop.RefreshSellingItem // (Final|Native|Protected) // @ game+0x27b3a90
	void RefreshItemCDRecords(struct FElectricShopItem& InItem, struct FString InPlayerID); // Function Solarland.SolarElectricShop.RefreshItemCDRecords // (Final|Native|Protected|HasOutParms) // @ game+0x27b3990
	void PurchaseEShopItemsResponse(int32_t InProductID, bool bSuccess, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.PurchaseEShopItemsResponse // (Net|Native|Event|NetMulticast|Public) // @ game+0x27b3870
	void OnShopIDReplicatedBP(); // Function Solarland.SolarElectricShop.OnShopIDReplicatedBP // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnRep_ShopID(); // Function Solarland.SolarElectricShop.OnRep_ShopID // (Final|Native|Protected) // @ game+0x27b3750
	void OnRep_ItemSections(); // Function Solarland.SolarElectricShop.OnRep_ItemSections // (Final|Native|Protected) // @ game+0x27b3710
	void OnRep_ItemCDRecords(); // Function Solarland.SolarElectricShop.OnRep_ItemCDRecords // (Final|Native|Protected) // @ game+0x27b36f0
	void OnRep_CurPoolGroupID(int32_t PrePoolGroupID); // Function Solarland.SolarElectricShop.OnRep_CurPoolGroupID // (Final|Native|Protected) // @ game+0x27b3660
	void OnPlayWeaponUpgradeAnim(); // Function Solarland.SolarElectricShop.OnPlayWeaponUpgradeAnim // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayPurchaseAnim(); // Function Solarland.SolarElectricShop.OnPlayPurchaseAnim // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayIdleAnim(); // Function Solarland.SolarElectricShop.OnPlayIdleAnim // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarElectricShop.OnEndOverlap // (Final|Native|Protected) // @ game+0x27b32f0
	void OnCurrentAnimFinish(); // Function Solarland.SolarElectricShop.OnCurrentAnimFinish // (Final|Native|Protected|BlueprintCallable) // @ game+0x27b32d0
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarElectricShop.OnBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x27b30b0
	bool IsProductRecommendEquipType(enum class EItemType ProductType); // Function Solarland.SolarElectricShop.IsProductRecommendEquipType // (Final|Native|Public) // @ game+0x27b3010
	bool IsInteractable(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.IsInteractable // (Final|Native|Public) // @ game+0x27b2f70
	void InitWeaponUpgradeEnergyCost(); // Function Solarland.SolarElectricShop.InitWeaponUpgradeEnergyCost // (Final|Native|Public) // @ game+0x27b2f30
	void InitializeElectricShop(); // Function Solarland.SolarElectricShop.InitializeElectricShop // (Final|Native|Public) // @ game+0x27b2f50
	float GetServerWorldTime(); // Function Solarland.SolarElectricShop.GetServerWorldTime // (Final|Native|Protected) // @ game+0x27b2f00
	float GetRemainingCD(int32_t ProductID); // Function Solarland.SolarElectricShop.GetRemainingCD // (Final|Native|Public) // @ game+0x27b2e60
	float GetDiscountedPrice(struct ASolarCharacter* BuyerCharacter, float Price); // Function Solarland.SolarElectricShop.GetDiscountedPrice // (Final|Native|Public) // @ game+0x27b2d90
	void GetDiscountedItem(struct ASolarCharacter* BuyerCharacter, struct FElectricShopItem& OutItem); // Function Solarland.SolarElectricShop.GetDiscountedItem // (Final|Native|Public|HasOutParms) // @ game+0x27b2cb0
	bool GetCurrentItem(int32_t InProductID, struct FElectricShopItem& OutItem); // Function Solarland.SolarElectricShop.GetCurrentItem // (Final|Native|Public|HasOutParms) // @ game+0x27b2bc0
	struct FString GetBuyerID(int32_t ProductID); // Function Solarland.SolarElectricShop.GetBuyerID // (Final|Native|Public) // @ game+0x27b2ae0
	struct FElectricShopItem GenerateNewItem(int32_t InProductID); // Function Solarland.SolarElectricShop.GenerateNewItem // (Final|Native|Protected) // @ game+0x27b2a30
	void ClientUpgradeWeaponSuccess(); // Function Solarland.SolarElectricShop.ClientUpgradeWeaponSuccess // (Final|Native|Protected) // @ game+0x27b2940
	void ClientUpgradeShieldSuccess(); // Function Solarland.SolarElectricShop.ClientUpgradeShieldSuccess // (Final|Native|Protected) // @ game+0x27b2940
	void ClientUpdateModelAnim(); // Function Solarland.SolarElectricShop.ClientUpdateModelAnim // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ClientPurchaseSuccess(); // Function Solarland.SolarElectricShop.ClientPurchaseSuccess // (Final|Native|Protected) // @ game+0x27b2920
	void ClientHUDUpgradeWeaponSuccess(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDUpgradeWeaponSuccess // (Final|Native|Protected) // @ game+0x27b2850
	void ClientHUDUpgradeShieldSuccess(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDUpgradeShieldSuccess // (Final|Native|Protected) // @ game+0x27b27c0
	void ClientHUDPurchaseSuccess(int32_t InProductID, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDPurchaseSuccess // (Final|Native|Protected) // @ game+0x27b26f0
	void ClientHUDPoolRefresh(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDPoolRefresh // (Final|Native|Protected) // @ game+0x27b2660
	void ClientHUDItemRefresh(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDItemRefresh // (Final|Native|Protected) // @ game+0x27b25d0
	void ClientHUDCDRefresh(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDCDRefresh // (Final|Native|Protected) // @ game+0x27b2540
	void AddInstigator(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.AddInstigator // (Final|Native|Public) // @ game+0x27b2420
};

// Class Solarland.ElectricShopItemDemo
// Size: 0x230 (Inherited: 0x228)
struct AElectricShopItemDemo : AActor {
	char pad_228[0x8]; // 0x228(0x08)
};

// Class Solarland.SolarEnergyShield
// Size: 0x790 (Inherited: 0x4b0)
struct ASolarEnergyShield : ASummonItemBase {
	char pad_4B0[0x8]; // 0x4b0(0x08)
	struct UParticleSystem* HitEffect; // 0x4b8(0x08)
	struct UParticleSystem* ExplodeEffect; // 0x4c0(0x08)
	struct TSoftObjectPtr<UParticleSystem> VehicleWholeShieldBrokenEffect; // 0x4c8(0x28)
	struct FVector HitEffectScale; // 0x4f0(0x0c)
	char OwnerTeam; // 0x4fc(0x01)
	char pad_4FD[0x3]; // 0x4fd(0x03)
	struct TMap<enum class ESolarSummonSoundType, struct FString> StartSoundMap; // 0x500(0x50)
	struct TMap<enum class ESolarSummonSoundType, struct FString> LoopSoundMap; // 0x550(0x50)
	struct TMap<enum class ESolarSummonSoundType, struct FString> HitSoundMap; // 0x5a0(0x50)
	struct TMap<enum class ESolarSummonSoundType, struct FString> EndSoundMap; // 0x5f0(0x50)
	struct TMap<enum class ESolarSummonSoundType, struct FString> BrokenSoundMap; // 0x640(0x50)
	struct FString CollisionName; // 0x690(0x10)
	struct FString ShieldMeshName; // 0x6a0(0x10)
	struct FString DecalMeshName; // 0x6b0(0x10)
	struct TArray<struct FMatUpdateParams> BeginMatUpdateParams; // 0x6c0(0x10)
	struct TArray<struct FMatUpdateParams> DeathMatUpdateParams; // 0x6d0(0x10)
	struct TArray<struct FMatUpdateParams> HealthMatUpdateParams; // 0x6e0(0x10)
	struct TArray<struct UMaterialInterface*> EnemyShieldMaterials; // 0x6f0(0x10)
	struct TArray<struct UMaterialInterface*> EnemyDecalMaterials; // 0x700(0x10)
	struct UParticleSystem* EnemyHitEffect; // 0x710(0x08)
	struct UParticleSystem* EnemyExplodeEffect; // 0x718(0x08)
	struct TMap<struct TWeakObjectPtr<struct AActor>, float> OverlapActorsTimeMap; // 0x720(0x50)
	float OverlapActorIntervalTime; // 0x770(0x04)
	float BounceForceToUniqueSkill; // 0x774(0x04)
	struct UPrimitiveComponent* CollisionCpt; // 0x778(0x08)
	struct UStaticMeshComponent* ShieldMesh; // 0x780(0x08)
	struct UStaticMeshComponent* DecalMesh; // 0x788(0x08)

	void PlayHitEffectOnVehicleWholeShield(int32_t IndexToPlayHitEffect, struct FVector& HitLocation); // Function Solarland.SolarEnergyShield.PlayHitEffectOnVehicleWholeShield // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	void PlayHitEffect(struct FHitResult& HitResult); // Function Solarland.SolarEnergyShield.PlayHitEffect // (Final|Native|Public|HasOutParms) // @ game+0x27b3790
	void OnRep_OwnerTeam(); // Function Solarland.SolarEnergyShield.OnRep_OwnerTeam // (Final|Native|Protected) // @ game+0x27b3730
	void ChangeColor(bool IsChanged); // Function Solarland.SolarEnergyShield.ChangeColor // (Native|Event|Public|BlueprintEvent) // @ game+0x27b24b0
};

// Class Solarland.SolarEnergyBubble
// Size: 0x830 (Inherited: 0x790)
struct ASolarEnergyBubble : ASolarEnergyShield {
	struct UStaticMeshComponent* HandMesh; // 0x790(0x08)
	struct UParticleSystem* HandMeshStartEffect; // 0x798(0x08)
	struct UParticleSystem* HandMeshStartEffectEnemy; // 0x7a0(0x08)
	float HandMeshStartEffectDelay; // 0x7a8(0x04)
	float TraceUpOffset; // 0x7ac(0x04)
	float MeshHeight; // 0x7b0(0x04)
	float RotateSpeed; // 0x7b4(0x04)
	struct UProjectileMovementComponent* ProjectileMovementComponent; // 0x7b8(0x08)
	struct FName ReleaseEnergyBubbleNotify; // 0x7c0(0x08)
	struct FName VFXTagName; // 0x7c8(0x08)
	struct FVector InitVelocity; // 0x7d0(0x0c)
	char pad_7DC[0x4]; // 0x7dc(0x04)
	struct FTransform HandMeshRelativeTransform; // 0x7e0(0x30)
	char pad_810[0x8]; // 0x810(0x08)
	struct USceneComponent* VFXComponent; // 0x818(0x08)
	char pad_820[0x10]; // 0x820(0x10)

	void PlayHandMeshStartEffect(); // Function Solarland.SolarEnergyBubble.PlayHandMeshStartEffect // (Final|Native|Protected) // @ game+0x27b3770
	void OnProjectileStop(struct FHitResult& InImpactResult); // Function Solarland.SolarEnergyBubble.OnProjectileStop // (Final|Native|Protected|HasOutParms) // @ game+0x27b3580
	void OnProjectileBounce(struct FHitResult& InImpactResult, struct FVector& InImpactVelocity); // Function Solarland.SolarEnergyBubble.OnProjectileBounce // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x27b3450
};

// Class Solarland.SolarEngine
// Size: 0xe60 (Inherited: 0xe60)
struct USolarEngine : UGameEngine {
};

// Class Solarland.SolarEQC_GetAITarget
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_GetAITarget : UEnvQueryContext {

	void ProvideSingleActor(struct UObject* QuerierObject, struct AActor* QuerierActor, struct AActor*& ResultingActor); // Function Solarland.SolarEQC_GetAITarget.ProvideSingleActor // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x2d0d160
};

// Class Solarland.SolarEQC_OwnerBackRotation
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_OwnerBackRotation : UEnvQueryContext {
};

// Class Solarland.SolarEQC_WarmTarget
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_WarmTarget : UEnvQueryContext {
};

// Class Solarland.SolarEQC_WarmTargetActors
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_WarmTargetActors : UEnvQueryContext {
};

// Class Solarland.SolarEQC_WarmTargetTrailCenter
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_WarmTargetTrailCenter : UEnvQueryContext {
};

// Class Solarland.SolarEQC_WarmTargetNearbyPlayers
// Size: 0x30 (Inherited: 0x28)
struct USolarEQC_WarmTargetNearbyPlayers : UEnvQueryContext {
	float DistanceThreshold; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Solarland.SolarEQC_WarmPopLocation
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_WarmPopLocation : UEnvQueryContext {
};

// Class Solarland.SolarEQC_NearbyPOILocation
// Size: 0x30 (Inherited: 0x28)
struct USolarEQC_NearbyPOILocation : UEnvQueryContext {
	float MaxDetectRadius; // 0x28(0x04)
	float MinDetectRadius; // 0x2c(0x04)
};

// Class Solarland.SolarEQT_AgentPathFinding
// Size: 0x2c8 (Inherited: 0x280)
struct USolarEQT_AgentPathFinding : UEnvQueryTest_Pathfinding {
	bool bOverrideOwnerAgentProperty; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
	struct FNavAgentProperties NavAgentProperties; // 0x288(0x30)
	bool bUseCustomRecastQueryExtent; // 0x2b8(0x01)
	char pad_2B9[0x3]; // 0x2b9(0x03)
	struct FVector CustomRecastQueryExtent; // 0x2bc(0x0c)
};

// Class Solarland.SolarEQT_CheckInEffectArea
// Size: 0x260 (Inherited: 0x1f8)
struct USolarEQT_CheckInEffectArea : UEnvQueryTest {
	bool bOverridePerceptionConfig; // 0x1f8(0x01)
	char pad_1F9[0x7]; // 0x1f9(0x07)
	struct FPerceivableEAInfluenceConfig InfluenceConfig; // 0x200(0x60)
};

// Class Solarland.SolarEQT_CheckInSafeArea
// Size: 0x1f8 (Inherited: 0x1f8)
struct USolarEQT_CheckInSafeArea : UEnvQueryTest {
};

// Class Solarland.SolarEQT_MoveProbe
// Size: 0x210 (Inherited: 0x1f8)
struct USolarEQT_MoveProbe : UEnvQueryTest {
	int32_t NumDivideRound; // 0x1f8(0x04)
	float ReferTraceDist; // 0x1fc(0x04)
	float MinDistAsNoObstacle; // 0x200(0x04)
	int32_t MaxNumDirNoObstacle; // 0x204(0x04)
	int32_t MinNumDirNoObstacle; // 0x208(0x04)
	float TraceOffsetZ; // 0x20c(0x04)
};

// Class Solarland.SolarEQT_NavProject
// Size: 0x210 (Inherited: 0x1f8)
struct USolarEQT_NavProject : UEnvQueryTest {
	struct UNavigationQueryFilter* NavigationFilter; // 0x1f8(0x08)
	float ProjectDown; // 0x200(0x04)
	float ProjectUp; // 0x204(0x04)
	float ExtentX; // 0x208(0x04)
	char pad_20C[0x4]; // 0x20c(0x04)
};

// Class Solarland.SolarEQT_TraceLimit
// Size: 0x318 (Inherited: 0x2d8)
struct USolarEQT_TraceLimit : UEnvQueryTest_Trace {
	bool bWantsHit; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	struct FAIDataProviderBoolValue StartPenetratingValid; // 0x2e0(0x38)
};

// Class Solarland.SolarEQTHavePlayerInRange
// Size: 0x218 (Inherited: 0x1f8)
struct USolarEQTHavePlayerInRange : UEnvQueryTest {
	float TraceRange; // 0x1f8(0x04)
	bool bIgnoreSpectatePlayer; // 0x1fc(0x01)
	char pad_1FD[0x3]; // 0x1fd(0x03)
	float TraceStartOffsetZ; // 0x200(0x04)
	char pad_204[0x14]; // 0x204(0x14)
};

// Class Solarland.SolarEventSubsystem
// Size: 0x80 (Inherited: 0x30)
struct USolarEventSubsystem : UGameInstanceSubsystem {
	char pad_30[0x50]; // 0x30(0x50)
};

// Class Solarland.SolarExternalToolsWidget
// Size: 0x400 (Inherited: 0x400)
struct USolarExternalToolsWidget : USolarUserWidget {

	struct UWidget* GetTopWidget(struct UWidget* InWidget); // Function Solarland.SolarExternalToolsWidget.GetTopWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27be990
};

// Class Solarland.SolarFireCircle
// Size: 0x248 (Inherited: 0x238)
struct ASolarFireCircle : ASolarInteractableActor {
	struct USolarAkGameObject* SolarAkGameObject; // 0x238(0x08)
	struct UAkComponent* AkAudioComponent; // 0x240(0x08)

	void InitializeSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarFireCircle.InitializeSolarAkGameObject // (Final|Native|Private) // @ game+0x27beaf0
};

// Class Solarland.SolarTrailEffect
// Size: 0x228 (Inherited: 0x228)
struct ASolarTrailEffect : AActor {

	void OnFinished(); // Function Solarland.SolarTrailEffect.OnFinished // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct FTransform GetTrackingTransform(struct ASolarCharacter* Character); // Function Solarland.SolarTrailEffect.GetTrackingTransform // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x27bea20
	void AttachToCharacter(struct ASolarCharacter* Character); // Function Solarland.SolarTrailEffect.AttachToCharacter // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x27b3fa0
};

// Class Solarland.SolarTrailProxyComponent
// Size: 0x340 (Inherited: 0x320)
struct USolarTrailProxyComponent : USceneComponent {
	struct TWeakObjectPtr<struct ASolarCharacter> PlayerBeingTracked; // 0x318(0x08)
	char pad_328[0x18]; // 0x328(0x18)
};

// Class Solarland.SkydiveTrailEffect
// Size: 0x230 (Inherited: 0x228)
struct ASkydiveTrailEffect : AActor {
	struct ASolarFlyTrail* FlyTrailManager; // 0x228(0x08)

	void UpdateTrailEffect(float CurrentTime); // Function Solarland.SkydiveTrailEffect.UpdateTrailEffect // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x27bf1f0
	void OnTrailFinish(); // Function Solarland.SkydiveTrailEffect.OnTrailFinish // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x8266a0
	void InitEffectAppearance(bool IsDefender, bool IsSameTeamWithLocalPlayer); // Function Solarland.SkydiveTrailEffect.InitEffectAppearance // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void InitAppearanceByPlayerState(struct ASolarPlayerState* PlayerState); // Function Solarland.SkydiveTrailEffect.InitAppearanceByPlayerState // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1b0c4c0
	void AddTrailPoint(float Timestamp, struct FVector& Location, struct FVector& Velocity); // Function Solarland.SkydiveTrailEffect.AddTrailPoint // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x27be310
};

// Class Solarland.SolarFlyTrail
// Size: 0x570 (Inherited: 0x228)
struct ASolarFlyTrail : AActor {
	struct TArray<struct USolarTrailProxyComponent*> CachedProxyComponents; // 0x228(0x10)
	struct FSoftObjectPath TrailEffectClass; // 0x238(0x18)
	struct TSoftClassPtr<UObject> FallbackTrailEffectClass; // 0x250(0x28)
	struct UObject* CachedTrailEffectClass; // 0x278(0x08)
	char pad_280[0x50]; // 0x280(0x50)
	struct FCharacterSkydiveTrailStaticInfoContainer SkydiveTrailStaticInfo; // 0x2d0(0x120)
	struct FPackedSkydiveTrailFrameInfoContainer SkydiveTrailFrameInfo; // 0x3f0(0x120)
	struct ASkydiveTrailEffect* SkydiveTrailEffectClass; // 0x510(0x08)
	struct TMap<struct ASolarPlayerState*, struct FCharacterSkydiveTrailData> SkydiveTrailData; // 0x518(0x50)
	struct ASolarPlayerState* LocalPlayerSkydiveTrailProxy; // 0x568(0x08)

	void OnRep_TrailEffectClass(); // Function Solarland.SolarFlyTrail.OnRep_TrailEffectClass // (Final|Native|Protected) // @ game+0x27beec0
};

// Class Solarland.SolarFlyTrailSettings
// Size: 0x60 (Inherited: 0x38)
struct USolarFlyTrailSettings : UDeveloperSettings {
	struct TSoftClassPtr<UObject> DefaultFlyTrailClass; // 0x38(0x28)
};

// Class Solarland.SolarFollowingComponent
// Size: 0x3e0 (Inherited: 0x2a0)
struct USolarFollowingComponent : UCrowdFollowingComponent {
	bool bEnableOffmeshDetect; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	float MinDetectInterval; // 0x2a4(0x04)
	uint32_t MaxDetectIteration; // 0x2a8(0x04)
	struct FVector InitialOffmeshSolveExtent; // 0x2ac(0x0c)
	float MinZDiffDetectUndergroud; // 0x2b8(0x04)
	float AgentSwimingHalfHeightPct; // 0x2bc(0x04)
	float AgentNormalHalfHeightPct; // 0x2c0(0x04)
	float ReachTestCheckAngleWV; // 0x2c4(0x04)
	float MinSpeedLastSegmentWV; // 0x2c8(0x04)
	float TurningSpeedWV; // 0x2cc(0x04)
	float TurningSteeringThresholdWV; // 0x2d0(0x04)
	float BlockDetectionDistanceCharacter; // 0x2d4(0x04)
	float BlockDetectionDistanceVehicle; // 0x2d8(0x04)
	char pad_2DC[0x10]; // 0x2dc(0x10)
	bool bEnableSolveBlock; // 0x2ec(0x01)
	char pad_2ED[0x3b]; // 0x2ed(0x3b)
	struct ASolarVehiclePawn* VehicleActor; // 0x328(0x08)
	char pad_330[0xc]; // 0x330(0x0c)
	float SensorTraceDistance; // 0x33c(0x04)
	bool bEnableDebug; // 0x340(0x01)
	char pad_341[0x3]; // 0x341(0x03)
	float RightSensorAlpha; // 0x344(0x04)
	float CentralSensorAlpha; // 0x348(0x04)
	float LeftSensorAlpha; // 0x34c(0x04)
	float SteeringAngle; // 0x350(0x04)
	float VehicleSteeringSensitivity; // 0x354(0x04)
	float BrakingForce; // 0x358(0x04)
	float DecelerationDistance; // 0x35c(0x04)
	float VehicleDecelerationSpeed; // 0x360(0x04)
	float VehicleTurningSpeed; // 0x364(0x04)
	float CheckReverseDistance; // 0x368(0x04)
	float HoverCheckBlockSpeed; // 0x36c(0x04)
	float WheeledCheckBlockSpeed; // 0x370(0x04)
	float LeggedVehicleCheckBlockSpeed; // 0x374(0x04)
	char pad_378[0x4]; // 0x378(0x04)
	float CheckBlockTime; // 0x37c(0x04)
	char pad_380[0x8]; // 0x380(0x08)
	int32_t TryReverseTimes; // 0x388(0x04)
	float TryReverseDurationTime; // 0x38c(0x04)
	char pad_390[0x8]; // 0x390(0x08)
	float SolveBlockGoFrontTime; // 0x398(0x04)
	char pad_39C[0x4]; // 0x39c(0x04)
	bool bPathFinish; // 0x3a0(0x01)
	char pad_3A1[0x1b]; // 0x3a1(0x1b)
	bool bKeepVelocityDuringRVO; // 0x3bc(0x01)
	char pad_3BD[0x3]; // 0x3bd(0x03)
	struct TArray<struct FVehicleDetector> DetectorList; // 0x3c0(0x10)
	float BlockAlpha; // 0x3d0(0x04)
	bool bNeedReFindPath; // 0x3d4(0x01)
	char pad_3D5[0x3]; // 0x3d5(0x03)
	int32_t VehicleBlockedLocationCheckCount; // 0x3d8(0x04)
	float VehicleBlockedLocationDistance; // 0x3dc(0x04)

	void SetVehicle(struct AActor* VehicleActorIn); // Function Solarland.SolarFollowingComponent.SetVehicle // (Final|Native|Public) // @ game+0x27bf160
	void OnUpdatedCharacterMovementModeChanged(struct ACharacter* Character, enum class EMovementMode PrevMovementMode, char PreviousCustomMode); // Function Solarland.SolarFollowingComponent.OnUpdatedCharacterMovementModeChanged // (Native|Protected) // @ game+0x27befc0
	void OnUpdatedCharacterLanded(struct FHitResult& Hit); // Function Solarland.SolarFollowingComponent.OnUpdatedCharacterLanded // (Native|Protected|HasOutParms) // @ game+0x27beee0
};

// Class Solarland.SolarFontManager
// Size: 0x38 (Inherited: 0x28)
struct USolarFontManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UFont* ChineseFont; // 0x30(0x08)

	void SaveChineseFontSetting(bool bHasLoad); // Function Solarland.SolarFontManager.SaveChineseFontSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x27bf0d0
	bool MergeCompositeFont(struct FString NewFontAssetPath); // Function Solarland.SolarFontManager.MergeCompositeFont // (Final|Native|Public|BlueprintCallable) // @ game+0x27bed10
	struct UFont* LoadNewFont(struct FString NewFontAssetPath); // Function Solarland.SolarFontManager.LoadNewFont // (Final|Native|Public|BlueprintCallable) // @ game+0x27bec60
	bool IsNeedMergeChineseFont(bool bAutoLoad); // Function Solarland.SolarFontManager.IsNeedMergeChineseFont // (Final|Native|Public|BlueprintCallable) // @ game+0x27bebc0
	void Init(); // Function Solarland.SolarFontManager.Init // (Event|Public|BlueprintEvent) // @ game+0xb66830
};

// Class Solarland.SolarFreeFallComponent
// Size: 0xc8 (Inherited: 0xb0)
struct USolarFreeFallComponent : UActorComponent {
	char pad_B0[0x18]; // 0xb0(0x18)

	void OnFreeFallFinished(struct FHitResult& HitResult); // Function Solarland.SolarFreeFallComponent.OnFreeFallFinished // (Final|Native|Public|HasOutParms) // @ game+0x27bedc0
};

// Class Solarland.SolarFuncBotController
// Size: 0x658 (Inherited: 0x658)
struct ASolarFuncBotController : ASolarBotControllerBase {
};

// Class Solarland.SolarFunctionalityCharacter
// Size: 0x2300 (Inherited: 0x22e0)
struct ASolarFunctionalityCharacter : ASolarCharacter {
	bool bNeedPlayerState; // 0x22d8(0x01)
	bool bNeedPickupComponent; // 0x22d9(0x01)
	struct FString SolarPlayerID; // 0x22e0(0x10)
	struct FFuncCharacterBackpackInfo BackpackInfo; // 0x22f0(0x08)
	bool bSameAllyWithInstigator; // 0x22f8(0x01)
	bool bSameTeamWithInstigator; // 0x22f9(0x01)
	char pad_22FC[0x4]; // 0x22fc(0x04)

	void OnRep_BackpackInfo(); // Function Solarland.SolarFunctionalityCharacter.OnRep_BackpackInfo // (Final|Native|Protected) // @ game+0x27beea0
};

// Class Solarland.SolarItemCountActor
// Size: 0x248 (Inherited: 0x228)
struct ASolarItemCountActor : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct UTextRenderComponent* TextPtr; // 0x230(0x08)
	struct FString TextPrefix; // 0x238(0x10)

	void SetItemCount(int32_t count); // Function Solarland.SolarItemCountActor.SetItemCount // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarFXExpItemCountActor
// Size: 0x248 (Inherited: 0x248)
struct ASolarFXExpItemCountActor : ASolarItemCountActor {
};

// Class Solarland.SolarFXShieldItemCountActor
// Size: 0x248 (Inherited: 0x248)
struct ASolarFXShieldItemCountActor : ASolarItemCountActor {
};

// Class Solarland.SolarGameConfigManager
// Size: 0xf0 (Inherited: 0x28)
struct USolarGameConfigManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UDataTable* WeaponDTInstance; // 0x30(0x08)
	struct UDataTable* WeaponAppearanceDTInstance; // 0x38(0x08)
	struct UDataTable* ItemActorDTInstance; // 0x40(0x08)
	struct UDataTable* BackpackTrailAssembingDTInstance; // 0x48(0x08)
	struct UDataTable* CharacterDTInstance; // 0x50(0x08)
	struct UDataTable* ItemResourceDTInstance; // 0x58(0x08)
	struct UDataTable* BuffEffectDTInstance; // 0x60(0x08)
	struct UDataTable* ScreenEffectDTInstance; // 0x68(0x08)
	struct UGlobalWeaponConfig* WeaponsConfigAsset; // 0x70(0x08)
	struct UGlobalVehicleWeaponConfig* GlobalVehicleWeaponConfigAsset; // 0x78(0x08)
	struct UGlobalHandheldWeaponConfig* GlobalHandheldWeaponConfigAsset; // 0x80(0x08)
	struct USolarRoleSkillDataConfig* RoleConfigAsset; // 0x88(0x08)
	float HeadHitValue; // 0x90(0x04)
	float ShieldReducePhy; // 0x94(0x04)
	float ShieldReduceEn; // 0x98(0x04)
	float ArmorReducePhy; // 0x9c(0x04)
	float ArmorReduceEn; // 0xa0(0x04)
	int32_t BackpackEnergyID; // 0xa4(0x04)
	int32_t BackpackExtraEnergyID; // 0xa8(0x04)
	int32_t MedicineItemId; // 0xac(0x04)
	int32_t RadarItemId; // 0xb0(0x04)
	int32_t ShieldRechargerItemId; // 0xb4(0x04)
	int32_t ShieldBigRechargerItemId; // 0xb8(0x04)
	float UnPickupItemTime; // 0xbc(0x04)
	float UnAutoPickupItemTime; // 0xc0(0x04)
	float AutoPickupTime; // 0xc4(0x04)
	float AutoMarkCDTime; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct TArray<int32_t> AutoMarkItemTypeList; // 0xd0(0x10)
	float AutoMarkTeammateDistance; // 0xe0(0x04)
	float AutoMarkDamagingCharacterDistance; // 0xe4(0x04)
	float PickupCapsuleRadius; // 0xe8(0x04)
	float PickupCapsuleHalfHeight; // 0xec(0x04)

	void OnInitialized(); // Function Solarland.SolarGameConfigManager.OnInitialized // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct USolarRoleSkillDataConfig* GetSolarRoleSkillDataConfig(); // Function Solarland.SolarGameConfigManager.GetSolarRoleSkillDataConfig // (Final|Native|Public|Const) // @ game+0x27be970
	struct FLinearColor GetLowQualityColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetLowQualityColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x27be8d0
	struct FLinearColor GetHUDDecorateColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetHUDDecorateColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x27be790
	struct FLinearColor GetHUDColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetHUDColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x27be6f0
	struct FLinearColor GetHUDBGColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetHUDBGColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x27be650
	struct FLinearColor GetHighQualityColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetHighQualityColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x27be830
	struct UGlobalWeaponConfig* GetGlobalWeaponConfig(); // Function Solarland.SolarGameConfigManager.GetGlobalWeaponConfig // (Final|Native|Public|Const) // @ game+0x27be620
	struct UGlobalVehicleWeaponConfig* GetGlobalVehicleWeaponConfig(); // Function Solarland.SolarGameConfigManager.GetGlobalVehicleWeaponConfig // (Final|Native|Public|Const) // @ game+0x27be5f0
	struct UGlobalHandheldWeaponConfig* GetGlobalHandheldWeaponConfig(); // Function Solarland.SolarGameConfigManager.GetGlobalHandheldWeaponConfig // (Final|Native|Public|Const) // @ game+0x27be5c0
	struct FString GetFGByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetFGByQuality // (Final|Native|Public) // @ game+0x27be4e0
	struct FLinearColor GetColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x27be440
};

// Class Solarland.SolarGameInstanceBase
// Size: 0xa60 (Inherited: 0x348)
struct USolarGameInstanceBase : USolarArchitecture {
	char pad_348[0x8]; // 0x348(0x08)
	struct FSoftObjectPath LoginMap; // 0x350(0x18)
	struct FSoftObjectPath LobbyMap; // 0x368(0x18)
	struct FSoftObjectPath EntryMap; // 0x380(0x18)
	struct FSoftObjectPath GameMap; // 0x398(0x18)
	struct FSoftObjectPath SettlementMap; // 0x3b0(0x18)
	struct FSoftObjectPath ConfigServerMap; // 0x3c8(0x18)
	struct FString ConfigBattleAddr; // 0x3e0(0x10)
	int32_t ConfigBattlePort; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct FString ConfigBackendAddr; // 0x3f8(0x10)
	int32_t ConfigBackendPort; // 0x408(0x04)
	int32_t BuildNumber; // 0x40c(0x04)
	struct TSoftClassPtr<UObject> SaveGameClass; // 0x410(0x28)
	struct FSoftClassPath DefaultOperationLayout; // 0x438(0x18)
	struct FSoftClassPath DefaultLockSettings; // 0x450(0x18)
	struct FSoftClassPath ReplayManagerClass; // 0x468(0x18)
	struct FSoftClassPath DefaultGameModeLockSettings; // 0x480(0x18)
	bool bNeedRebootButNot; // 0x498(0x01)
	char pad_499[0x3]; // 0x499(0x03)
	int32_t LastChoosedVoiceLangID; // 0x49c(0x04)
	struct FString CachedNetworkErrorString; // 0x4a0(0x10)
	struct USolarOperationUIElement* CachedDefaultOperationLayout; // 0x4b0(0x08)
	bool bBaseManagersInit; // 0x4b8(0x01)
	bool bGameManagersInit; // 0x4b9(0x01)
	bool bLuaManagersInit; // 0x4ba(0x01)
	char pad_4BB[0x5]; // 0x4bb(0x05)
	struct FMulticastInlineDelegate OnBaseManagersInit; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnGameManagersInit; // 0x4d0(0x10)
	struct FMulticastInlineDelegate OnLuaManagersInit; // 0x4e0(0x10)
	char pad_4F0[0x178]; // 0x4f0(0x178)
	struct UGameArgs* GameArgsManager; // 0x668(0x08)
	struct UUIManager* UIManager; // 0x670(0x08)
	struct UUINavigationManager* UINavigationManager; // 0x678(0x08)
	struct USeparatedPkgManager* SolarSepPkgManager; // 0x680(0x08)
	struct USolarInputMappingManager* SolarInputMappingManager; // 0x688(0x08)
	struct USolarTimerManager* SolarTimerManager; // 0x690(0x08)
	struct USolarMainPlayerModel* MainPlayerModel; // 0x698(0x08)
	struct USolarGameConfigManager* GameConfigManager; // 0x6a0(0x08)
	struct UBattlePassConfigInfo* BattlePassConfigInfo; // 0x6a8(0x08)
	struct USolarLuaHelper* SolarLuaHelper; // 0x6b0(0x08)
	struct USolarAnoHelper* SolarAnoHelper; // 0x6b8(0x08)
	struct USolarTableManager* SolarTableManager; // 0x6c0(0x08)
	struct USolarTcpNetworkManager* SolarTcpNetworkManager; // 0x6c8(0x08)
	struct USolarUDPManager* SolarUDPManager; // 0x6d0(0x08)
	struct USolarAssetManager* SolarAssetManager; // 0x6d8(0x08)
	struct USolarItemManager* SolarItemManager; // 0x6e0(0x08)
	struct USolarInteractableManager* SolarInteractableManager; // 0x6e8(0x08)
	struct USolarPlatformHelper* SolarPlatformHelper; // 0x6f0(0x08)
	struct USolarMapManager* SolarMapManager; // 0x6f8(0x08)
	struct UWeaponGrowthManager* WeaponGrowthManager; // 0x700(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x708(0x08)
	struct UIMChatObject* SolarIMChatObject; // 0x710(0x08)
	struct USolarLuaManager* SolarLuaManager; // 0x718(0x08)
	struct USolarGameStatistics* SolarGameStatistics; // 0x720(0x08)
	struct USolarWeaponMergeMeshManager* WeaponMergeMeshManager; // 0x728(0x08)
	struct UCrashReportManager* CrashReportManager; // 0x730(0x08)
	struct USolarPopPanelManager* SolarPopPanelManager; // 0x738(0x08)
	struct USolarApplicationLifetimeManager* SolarApplicationLifetimeManager; // 0x740(0x08)
	struct USolarHomeActorManager* SolarHomeActorManager; // 0x748(0x08)
	struct USolarGameplayLogger* SolarGameplayLoggger; // 0x750(0x08)
	struct USolarAttributeSubSystem* SolarAttributeSubSystem; // 0x758(0x08)
	struct USCustomizedGameModeManager* CustomizedGameManager; // 0x760(0x08)
	struct USolarRedHintManager* SolarRedHintMgr; // 0x768(0x08)
	struct USolarGameModeSelectionManager* SolarGameModeSelectionMgr; // 0x770(0x08)
	struct USolarPingFpsManager* SolarPingFpsMgr; // 0x778(0x08)
	struct USolarGameUserSettingsMgr* SolarGameUserSettingsMgr; // 0x780(0x08)
	struct USolarLoginManager* SolarLoginManager; // 0x788(0x08)
	struct USolarLockSettingsMgr* SolarLockSettingsMgr; // 0x790(0x08)
	struct USolarGameProgressManager* SolarGameProgressMgr; // 0x798(0x08)
	struct USolarABTestManager* SolarABTestManager; // 0x7a0(0x08)
	struct USolarHttpManager* SolarHttpManager; // 0x7a8(0x08)
	struct USolarActivityManager* SolarActivityManager; // 0x7b0(0x08)
	struct USolarTutorialManager* SolarTutorialManager; // 0x7b8(0x08)
	struct USolarReplayManager* SolarReplayManager; // 0x7c0(0x08)
	struct USolarSaveGame* SolarSaveGame; // 0x7c8(0x08)
	struct TSoftClassPtr<UObject> SettlementManagerClass; // 0x7d0(0x28)
	struct USettlementStageManager* SettlementManager; // 0x7f8(0x08)
	struct UCGMCrossLevelDataMgr* CrossLevelDataMgr; // 0x800(0x08)
	char pad_808[0x18]; // 0x808(0x18)
	struct TSoftClassPtr<UObject> SolarGraphicSettingsClass; // 0x820(0x28)
	struct USolarAccessLuaDataUtils* LuaDataAccessUtils; // 0x848(0x08)
	struct USolarAkSoundManager* SolarAkSoundManager; // 0x850(0x08)
	bool bIsDedicatedServerStressTest; // 0x858(0x01)
	char pad_859[0x7]; // 0x859(0x07)
	struct UKeyMappingManager* KeyMappingManager; // 0x860(0x08)
	struct USolarEasyAntiCheatManager* SolarEasyAntiCheatManager; // 0x868(0x08)
	struct USolarSpecialEffectsMgr* SolarSpecialEffectsManager; // 0x870(0x08)
	struct USolarFontManager* SolarFontManager; // 0x878(0x08)
	struct USolarDownloaderManager* SolarDownloaderManager; // 0x880(0x08)
	char pad_888[0x8]; // 0x888(0x08)
	struct USolarGraphicSettings* SolarGraphicSettings; // 0x890(0x08)
	struct UAndroidInputManager* AndroidInputManager; // 0x898(0x08)
	struct UProtectBaseManager* ProtectBaseManager; // 0x8a0(0x08)
	char pad_8A8[0x10]; // 0x8a8(0x10)
	struct FMulticastInlineDelegate OnPatchComplete; // 0x8b8(0x10)
	struct FMulticastInlineDelegate OnTouchInputDelegate; // 0x8c8(0x10)
	struct FRegistedActorContainer CachedRegistedActors; // 0x8d8(0x50)
	char pad_928[0x18]; // 0x928(0x18)
	bool IsHotPatched; // 0x940(0x01)
	char pad_941[0x3]; // 0x941(0x03)
	bool bCheatedInGame; // 0x944(0x01)
	bool bAbnormalInGame; // 0x945(0x01)
	char pad_946[0x2]; // 0x946(0x02)
	struct FText KickOutReason; // 0x948(0x18)
	struct TArray<struct FAntiCheatSetting> AntiCheatSettings; // 0x960(0x10)
	struct FScreenshotConfig ScreenshotConfig; // 0x970(0x50)
	struct FString AntiCheatConfig; // 0x9c0(0x10)
	struct FString DynamicTaskConfig; // 0x9d0(0x10)
	struct FString ScreenshotZoneMap; // 0x9e0(0x10)
	char pad_9F0[0x68]; // 0x9f0(0x68)
	bool bLaunchServerTravelSuccess; // 0xa58(0x01)
	char pad_A59[0x7]; // 0xa59(0x07)

	void UpdateScreenshotSetting(); // Function Solarland.SolarGameInstanceBase.UpdateScreenshotSetting // (Final|Native|Public) // @ game+0x27c4680
	void UpdateAntiCheatSetting(); // Function Solarland.SolarGameInstanceBase.UpdateAntiCheatSetting // (Final|Native|Public) // @ game+0x27c4660
	void TestEnsureMsgInternal(); // Function Solarland.SolarGameInstanceBase.TestEnsureMsgInternal // (Final|Native|Protected|BlueprintCallable) // @ game+0x9043b0
	void TestCrashInternal(); // Function Solarland.SolarGameInstanceBase.TestCrashInternal // (Final|Native|Protected|BlueprintCallable) // @ game+0x27c4640
	void SolarGm_UploadLogFile(); // Function Solarland.SolarGameInstanceBase.SolarGm_UploadLogFile // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_Tut(struct FString Cmd, struct TArray<struct FString>& Args); // Function Solarland.SolarGameInstanceBase.SolarGM_Tut // (Final|Exec|Native|Public|HasOutParms) // @ game+0x27c3fe0
	void SolarGM_TriggerSteamAntiCheat(int32_t ActionReason, struct FString ActionDetials); // Function Solarland.SolarGameInstanceBase.SolarGM_TriggerSteamAntiCheat // (Final|Exec|Native|Public) // @ game+0x27c4380
	void SolarGM_TransmitGMLua(struct FString playerName, struct TArray<struct FString>& GmArray); // Function Solarland.SolarGameInstanceBase.SolarGM_TransmitGMLua // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void SolarGM_TransmitGM(struct FString playerName, struct TArray<struct FString>& transmitGm); // Function Solarland.SolarGameInstanceBase.SolarGM_TransmitGM // (Final|Exec|Native|Public|HasOutParms) // @ game+0x27c3fe0
	void SolarGm_TestGamepadVibrateEffect(struct FString ClipName, int32_t Duration, int32_t Loop, int32_t Priority, int32_t Interval, int32_t Amplitude); // Function Solarland.SolarGameInstanceBase.SolarGm_TestGamepadVibrateEffect // (Final|Exec|Native|Public) // @ game+0x27c4460
	void SolarGM_TestEnsureMsgWithBP(); // Function Solarland.SolarGameInstanceBase.SolarGM_TestEnsureMsgWithBP // (Exec|Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SolarGM_TestEnsureMsg(); // Function Solarland.SolarGameInstanceBase.SolarGM_TestEnsureMsg // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_TestCrashWithBP(); // Function Solarland.SolarGameInstanceBase.SolarGM_TestCrashWithBP // (Exec|Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SolarGM_TestCrash(); // Function Solarland.SolarGameInstanceBase.SolarGM_TestCrash // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGm_SwitchFastFont(bool bIsEnable); // Function Solarland.SolarGameInstanceBase.SolarGm_SwitchFastFont // (Final|Exec|Native|Public) // @ game+0x26446a0
	void SolarGM_StopRecordingReplay(); // Function Solarland.SolarGameInstanceBase.SolarGM_StopRecordingReplay // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_StopPlayingReplay(); // Function Solarland.SolarGameInstanceBase.SolarGM_StopPlayingReplay // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_StartRecordingLocalReplay(struct FString Filename); // Function Solarland.SolarGameInstanceBase.SolarGM_StartRecordingLocalReplay // (Final|Exec|Native|Public) // @ game+0x277cdc0
	void SolarGM_StartRecordHighlight(struct FString SessionNameOverride); // Function Solarland.SolarGameInstanceBase.SolarGM_StartRecordHighlight // (Final|Exec|Native|Public) // @ game+0x277cdc0
	void SolarGm_SetSkydivingIconUpdateRate(float InRate); // Function Solarland.SolarGameInstanceBase.SolarGm_SetSkydivingIconUpdateRate // (Final|Exec|Native|Public) // @ game+0xb67d60
	void SolarGM_SetQuality(int32_t InQuality); // Function Solarland.SolarGameInstanceBase.SolarGM_SetQuality // (Final|Exec|Native|Public) // @ game+0x1ae6850
	void SolarGM_RequestWatchingLiveOfPlayer(struct FString PlayerId); // Function Solarland.SolarGameInstanceBase.SolarGM_RequestWatchingLiveOfPlayer // (Final|Exec|Native|Public) // @ game+0x277cdc0
	void SolarGM_RequestReplayList(int32_t PageIndex, int32_t PageSize); // Function Solarland.SolarGameInstanceBase.SolarGM_RequestReplayList // (Final|Exec|Native|Public) // @ game+0x27a03b0
	void SolarGM_RequestPlayReplayByIdx(uint32_t Index); // Function Solarland.SolarGameInstanceBase.SolarGM_RequestPlayReplayByIdx // (Final|Exec|Native|Public) // @ game+0x27c42f0
	void SolarGM_RequestPlayReplayByBattleID(struct FString InBattleID, bool IsLive); // Function Solarland.SolarGameInstanceBase.SolarGM_RequestPlayReplayByBattleID // (Final|Exec|Native|Public) // @ game+0x27c4210
	void SolarGM_RequestPlayReplay(struct FString InBattleID, struct FString DownloadUrl); // Function Solarland.SolarGameInstanceBase.SolarGM_RequestPlayReplay // (Final|Exec|Native|Public) // @ game+0x27c4110
	void SolarGM_PlayLocalReplay(struct FString Filename); // Function Solarland.SolarGameInstanceBase.SolarGM_PlayLocalReplay // (Final|Exec|Native|Public) // @ game+0x277cdc0
	void SolarGM_PlayHighlight(struct FString Filename); // Function Solarland.SolarGameInstanceBase.SolarGM_PlayHighlight // (Final|Exec|Native|Public) // @ game+0x277cdc0
	void SolarGM_LobbyLua(struct FString CmdName, struct TArray<struct FString>& Params); // Function Solarland.SolarGameInstanceBase.SolarGM_LobbyLua // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void SolarGM_Lobby(struct FString CmdName, struct TArray<struct FString>& Params); // Function Solarland.SolarGameInstanceBase.SolarGM_Lobby // (Final|Exec|Native|Public|HasOutParms) // @ game+0x27c3fe0
	void SolarGM_LoadLevelInstance(struct FString arg1); // Function Solarland.SolarGameInstanceBase.SolarGM_LoadLevelInstance // (Final|Exec|Native|Public) // @ game+0x27c3ef0
	void SolarGM_KickMeOut(); // Function Solarland.SolarGameInstanceBase.SolarGM_KickMeOut // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_GoHome(); // Function Solarland.SolarGameInstanceBase.SolarGM_GoHome // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGm_EnableLuaCallStackProfile(bool bIsEnable); // Function Solarland.SolarGameInstanceBase.SolarGm_EnableLuaCallStackProfile // (Final|Exec|Native|Public) // @ game+0x26446a0
	void SolarGM_AddWeaponExpLua(int32_t weaponid, int32_t count); // Function Solarland.SolarGameInstanceBase.SolarGM_AddWeaponExpLua // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SolarGM_AddWeaponExp(int32_t weaponid, int32_t count); // Function Solarland.SolarGameInstanceBase.SolarGM_AddWeaponExp // (Final|Exec|Native|Public) // @ game+0x27a03b0
	void SolarGM_AddItemLua(int32_t ItemID, int32_t count); // Function Solarland.SolarGameInstanceBase.SolarGM_AddItemLua // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SolarGM_AddItem(int32_t ItemID, int32_t count); // Function Solarland.SolarGameInstanceBase.SolarGM_AddItem // (Final|Exec|Native|Public) // @ game+0x27a03b0
	void ShutDownPCSDK(); // Function Solarland.SolarGameInstanceBase.ShutDownPCSDK // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ShutDownLimSdk(); // Function Solarland.SolarGameInstanceBase.ShutDownLimSdk // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ShutdownAnoSDK(); // Function Solarland.SolarGameInstanceBase.ShutdownAnoSDK // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void SetIsFirstLaunch(bool bIsFirst); // Function Solarland.SolarGameInstanceBase.SetIsFirstLaunch // (Final|Native|Public|BlueprintCallable) // @ game+0x27c3e60
	void SetClientInitConfig(struct TArray<char>& ConfigData); // Function Solarland.SolarGameInstanceBase.SetClientInitConfig // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27c3db0
	void SetClientConfigFile(int64_t TaskID, struct TArray<char>& ConfigFile); // Function Solarland.SolarGameInstanceBase.SetClientConfigFile // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27c3cc0
	void SetCleanUpfile(bool bCleanCache); // Function Solarland.SolarGameInstanceBase.SetCleanUpfile // (Final|Native|Public|BlueprintCallable) // @ game+0x27c3c30
	bool ServerTravel(struct FString Map, int32_t ListenPort, bool bSpectator, bool bSkipGameNotify, struct FString options); // Function Solarland.SolarGameInstanceBase.ServerTravel // (Final|Native|Public|BlueprintCallable) // @ game+0x27c3a70
	void SaveGame(); // Function Solarland.SolarGameInstanceBase.SaveGame // (Final|Native|Public|BlueprintCallable) // @ game+0x27c3a50
	void RequestShutDown(struct FString reason); // Function Solarland.SolarGameInstanceBase.RequestShutDown // (Final|Exec|Native|Public) // @ game+0x27c39b0
	void ReportLoadingInfoToBI(struct TArray<struct FString>& LoadingInfo, float LoadingTime, bool bIsFinished); // Function Solarland.SolarGameInstanceBase.ReportLoadingInfoToBI // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void RegisterNetworkManager(); // Function Solarland.SolarGameInstanceBase.RegisterNetworkManager // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnStartBattle(struct FString InBattleID); // Function Solarland.SolarGameInstanceBase.OnStartBattle // (Final|Native|Public|BlueprintCallable) // @ game+0x27c3910
	void OnManagersInitialized__DelegateSignature(); // DelegateFunction Solarland.SolarGameInstanceBase.OnManagersInitialized__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnHotPatchComplete(); // Function Solarland.SolarGameInstanceBase.OnHotPatchComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x27c38f0
	void OnDisconnect(); // Function Solarland.SolarGameInstanceBase.OnDisconnect // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void LuaStartGameFrameWork(); // Function Solarland.SolarGameInstanceBase.LuaStartGameFrameWork // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void LuaInitGameFrameWork(); // Function Solarland.SolarGameInstanceBase.LuaInitGameFrameWork // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	bool IsStandalone(); // Function Solarland.SolarGameInstanceBase.IsStandalone // (Final|Native|Public|BlueprintCallable) // @ game+0x27c38c0
	bool IsSolarServer(struct UObject* WorldContextObject); // Function Solarland.SolarGameInstanceBase.IsSolarServer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27c3830
	bool IsSkipLogin(); // Function Solarland.SolarGameInstanceBase.IsSkipLogin // (Final|Native|Public|BlueprintCallable) // @ game+0x27c3800
	bool IsServerOrStandalone(); // Function Solarland.SolarGameInstanceBase.IsServerOrStandalone // (Final|Native|Public|BlueprintCallable) // @ game+0x27c37d0
	bool IsListenServer(); // Function Solarland.SolarGameInstanceBase.IsListenServer // (Final|Native|Public|BlueprintCallable) // @ game+0x27c37a0
	bool IsGIsEditor(); // Function Solarland.SolarGameInstanceBase.IsGIsEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x2783600
	bool IsFirstLaunchAfterVersionUpdate(); // Function Solarland.SolarGameInstanceBase.IsFirstLaunchAfterVersionUpdate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3780
	bool IsEditor(); // Function Solarland.SolarGameInstanceBase.IsEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x2783600
	bool IsDedicatedServerStressTest(); // Function Solarland.SolarGameInstanceBase.IsDedicatedServerStressTest // (Final|Native|Public|BlueprintCallable) // @ game+0x27c3760
	bool IsDedicatedServer(); // Function Solarland.SolarGameInstanceBase.IsDedicatedServer // (Final|Native|Public|BlueprintCallable) // @ game+0x27c3730
	bool IsClientOrStandalone(); // Function Solarland.SolarGameInstanceBase.IsClientOrStandalone // (Final|Native|Public|BlueprintCallable) // @ game+0x27c3700
	bool IsClient(); // Function Solarland.SolarGameInstanceBase.IsClient // (Final|Native|Public|BlueprintCallable) // @ game+0x27c36d0
	void InitLuaClasses(); // Function Solarland.SolarGameInstanceBase.InitLuaClasses // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void InitGameManagers(); // Function Solarland.SolarGameInstanceBase.InitGameManagers // (Final|Native|Protected|BlueprintCallable) // @ game+0x27c36b0
	bool HasCommandlineParam(struct FString Param); // Function Solarland.SolarGameInstanceBase.HasCommandlineParam // (Final|Native|Public|BlueprintCallable) // @ game+0x27c3600
	void GoHomeLuaCall(); // Function Solarland.SolarGameInstanceBase.GoHomeLuaCall // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct USolarWeaponMergeMeshManager* GetWeaponMergeMeshManager(); // Function Solarland.SolarGameInstanceBase.GetWeaponMergeMeshManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c35d0
	struct UWeaponGrowthManager* GetWeaponGrowthManager(); // Function Solarland.SolarGameInstanceBase.GetWeaponGrowthManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c35a0
	int32_t GetWarmGameType(); // Function Solarland.SolarGameInstanceBase.GetWarmGameType // (Final|Native|Public|BlueprintCallable) // @ game+0x27c3570
	struct UUINavigationManager* GetUINavigationManager(); // Function Solarland.SolarGameInstanceBase.GetUINavigationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3540
	struct USolarVibrateManager* GetSolarVibrateManager(); // Function Solarland.SolarGameInstanceBase.GetSolarVibrateManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3510
	struct USolarTutorialManager* GetSolarTutorialManager(); // Function Solarland.SolarGameInstanceBase.GetSolarTutorialManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c34e0
	struct USolarTimerManager* GetSolarTimerManager(); // Function Solarland.SolarGameInstanceBase.GetSolarTimerManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c34b0
	struct USolarTcpNetworkManager* GetSolarTcpNetworkManager(); // Function Solarland.SolarGameInstanceBase.GetSolarTcpNetworkManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3480
	struct USolarTableManager* GetSolarTableManager(); // Function Solarland.SolarGameInstanceBase.GetSolarTableManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3450
	struct USolarSaveGame* GetSolarSaveGame(); // Function Solarland.SolarGameInstanceBase.GetSolarSaveGame // (Final|Native|Public|BlueprintCallable) // @ game+0x27c3420
	struct USolarReplayManager* GetSolarReplayManager(); // Function Solarland.SolarGameInstanceBase.GetSolarReplayManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c33f0
	struct USolarRedHintManager* GetSolarRedHintManager(); // Function Solarland.SolarGameInstanceBase.GetSolarRedHintManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c33c0
	struct USolarPopPanelManager* GetSolarPopPanelManager(); // Function Solarland.SolarGameInstanceBase.GetSolarPopPanelManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3390
	struct USolarPlatformHelper* GetSolarPlatformHelper(); // Function Solarland.SolarGameInstanceBase.GetSolarPlatformHelper // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3360
	struct USolarPingFpsManager* GetSolarPingFpsManager(); // Function Solarland.SolarGameInstanceBase.GetSolarPingFpsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3330
	struct USolarMapManager* GetSolarMapManager(); // Function Solarland.SolarGameInstanceBase.GetSolarMapManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3300
	struct USolarMainPlayerModel* GetSolarMainPlayerModel(); // Function Solarland.SolarGameInstanceBase.GetSolarMainPlayerModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c32d0
	struct USolarLuaManager* GetSolarLuaManager(); // Function Solarland.SolarGameInstanceBase.GetSolarLuaManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c32a0
	struct USolarLuaHelper* GetSolarLuaHelper(); // Function Solarland.SolarGameInstanceBase.GetSolarLuaHelper // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3270
	struct USolarLoginManager* GetSolarLoginManager(); // Function Solarland.SolarGameInstanceBase.GetSolarLoginManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3250
	struct USolarLockSettingsMgr* GetSolarLockSettingsManager(); // Function Solarland.SolarGameInstanceBase.GetSolarLockSettingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3220
	struct USolarItemManager* GetSolarItemManager(); // Function Solarland.SolarGameInstanceBase.GetSolarItemManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c31f0
	struct USolarInteractableManager* GetSolarInteractableManager(); // Function Solarland.SolarGameInstanceBase.GetSolarInteractableManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c31c0
	struct USolarInputMappingManager* GetSolarInputMappingManager(); // Function Solarland.SolarGameInstanceBase.GetSolarInputMappingManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3190
	struct UIMChatObject* GetSolarIMChatObject(); // Function Solarland.SolarGameInstanceBase.GetSolarIMChatObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3160
	struct USolarHttpManager* GetSolarHttpManager(); // Function Solarland.SolarGameInstanceBase.GetSolarHttpManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3140
	struct USolarHomeActorManager* GetSolarHomeActorManager(); // Function Solarland.SolarGameInstanceBase.GetSolarHomeActorManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3110
	struct USolarGameUserSettingsMgr* GetSolarGameUserSettingsManager(); // Function Solarland.SolarGameInstanceBase.GetSolarGameUserSettingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c30b0
	struct USolarGameplayLogger* GetSolarGameplayLogger(); // Function Solarland.SolarGameInstanceBase.GetSolarGameplayLogger // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c30e0
	struct USolarGameModeSelectionManager* GetSolarGameModeSelectionManager(); // Function Solarland.SolarGameInstanceBase.GetSolarGameModeSelectionManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c3080
	struct USolarGameInstanceBase* GetSolarGameInstanceBase(struct UObject* WorldContextObject); // Function Solarland.SolarGameInstanceBase.GetSolarGameInstanceBase // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27c2ff0
	struct USolarEasyAntiCheatManager* GetSolarEasyAntiCheatManager(); // Function Solarland.SolarGameInstanceBase.GetSolarEasyAntiCheatManager // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2fc0
	struct USolarDownloaderManager* GetSolarDownloaderManager(); // Function Solarland.SolarGameInstanceBase.GetSolarDownloaderManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2f90
	struct USolarAnoHelper* GetSolarAnoHelperStatic(struct UObject* WorldContextObject); // Function Solarland.SolarGameInstanceBase.GetSolarAnoHelperStatic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27c2f00
	struct USolarAnoHelper* GetSolarAnoHelper(); // Function Solarland.SolarGameInstanceBase.GetSolarAnoHelper // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2ed0
	struct USolarAkSoundManager* GetSolarAkSoundManager(); // Function Solarland.SolarGameInstanceBase.GetSolarAkSoundManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2eb0
	struct USolarAkGameObject* GetSolarAkGameObject(); // Function Solarland.SolarGameInstanceBase.GetSolarAkGameObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2e80
	struct USolarActivityManager* GetSolarActivityManager(); // Function Solarland.SolarGameInstanceBase.GetSolarActivityManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2e60
	struct USolarABTestManager* GetSolarABTestManager(); // Function Solarland.SolarGameInstanceBase.GetSolarABTestManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2e40
	struct USettlementStageManager* GetSettlementStageManager(); // Function Solarland.SolarGameInstanceBase.GetSettlementStageManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2e20
	struct USeparatedPkgManager* GetSeparatedPkgManager(); // Function Solarland.SolarGameInstanceBase.GetSeparatedPkgManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2df0
	int32_t GetRuleID(); // Function Solarland.SolarGameInstanceBase.GetRuleID // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2dc0
	int32_t GetRTCType(); // Function Solarland.SolarGameInstanceBase.GetRTCType // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2d60
	int32_t GetRankMatchID(); // Function Solarland.SolarGameInstanceBase.GetRankMatchID // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2d90
	struct UProtectBaseManager* GetProtectBaseManager(); // Function Solarland.SolarGameInstanceBase.GetProtectBaseManager // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2d30
	int32_t GetPort(); // Function Solarland.SolarGameInstanceBase.GetPort // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2d00
	enum class ESolarPlayStage GetPlayStage(); // Function Solarland.SolarGameInstanceBase.GetPlayStage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2cb0
	struct ASolarCharacter* GetPlayerCharacter(); // Function Solarland.SolarGameInstanceBase.GetPlayerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2cd0
	struct FString GetPIEServerURL(); // Function Solarland.SolarGameInstanceBase.GetPIEServerURL // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2c30
	int32_t GetPIEInstance(); // Function Solarland.SolarGameInstanceBase.GetPIEInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2c00
	int32_t GetNumMode(); // Function Solarland.SolarGameInstanceBase.GetNumMode // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2bd0
	struct FString GetNetModeString(); // Function Solarland.SolarGameInstanceBase.GetNetModeString // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2b50
	enum class ESolarNetMode GetNetMode(); // Function Solarland.SolarGameInstanceBase.GetNetMode // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2b20
	int32_t GetMaxPlayer(); // Function Solarland.SolarGameInstanceBase.GetMaxPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2af0
	struct FString GetMatchMode(); // Function Solarland.SolarGameInstanceBase.GetMatchMode // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2a70
	struct UKeyMappingManager* GetKeyMappingManager(); // Function Solarland.SolarGameInstanceBase.GetKeyMappingManager // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2a40
	bool GetIsMutiPlayer(); // Function Solarland.SolarGameInstanceBase.GetIsMutiPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2a10
	struct USolarGameStatistics* GetGameStatistics(); // Function Solarland.SolarGameInstanceBase.GetGameStatistics // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c29e0
	int32_t GetGameModeGroupID(); // Function Solarland.SolarGameInstanceBase.GetGameModeGroupID // (Final|Native|Public|BlueprintCallable) // @ game+0x27c29b0
	struct USolarGameConfigManager* GetGameConfigManager(); // Function Solarland.SolarGameInstanceBase.GetGameConfigManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2980
	int32_t GetEntryID(); // Function Solarland.SolarGameInstanceBase.GetEntryID // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2950
	int32_t GetEloStart(); // Function Solarland.SolarGameInstanceBase.GetEloStart // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2920
	int32_t GetEloEnd(); // Function Solarland.SolarGameInstanceBase.GetEloEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x27c28f0
	struct USolarOperationUIElement* GetDefaultOperationLayout(); // Function Solarland.SolarGameInstanceBase.GetDefaultOperationLayout // (Final|Native|Public) // @ game+0x27c28c0
	struct USCustomizedGameModeManager* GetCustomizedGameManager(); // Function Solarland.SolarGameInstanceBase.GetCustomizedGameManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2890
	struct UCGMCrossLevelDataMgr* GetCrossLevelDataMgr(); // Function Solarland.SolarGameInstanceBase.GetCrossLevelDataMgr // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2870
	struct UCrashReportManager* GetCrashReportManager(); // Function Solarland.SolarGameInstanceBase.GetCrashReportManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2840
	struct FString GetCommandlineParam(struct FString Param); // Function Solarland.SolarGameInstanceBase.GetCommandlineParam // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2750
	int32_t GetClientNumber(); // Function Solarland.SolarGameInstanceBase.GetClientNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2720
	void GetCategorizedActorsOfType(struct UObject* WorldContextObject, enum class EActorRegisterType InActorType, struct TArray<struct AActor*>& OutActors); // Function Solarland.SolarGameInstanceBase.GetCategorizedActorsOfType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27c2600
	void GetCategorizedActorsByBits(struct UObject* WorldContextObject, char InActorBit, struct TArray<struct AActor*>& OutActors); // Function Solarland.SolarGameInstanceBase.GetCategorizedActorsByBits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27c24e0
	struct ABlueCircleManager* GetBlueCircleManager(); // Function Solarland.SolarGameInstanceBase.GetBlueCircleManager // (Final|Native|Public|BlueprintCallable) // @ game+0x27c24b0
	int32_t GetBattleVoiceID(); // Function Solarland.SolarGameInstanceBase.GetBattleVoiceID // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2480
	struct UBattlePassConfigInfo* GetBattlePassConfigInfo(); // Function Solarland.SolarGameInstanceBase.GetBattlePassConfigInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2450
	struct FString GetBattleKey(); // Function Solarland.SolarGameInstanceBase.GetBattleKey // (Final|Native|Public|BlueprintCallable) // @ game+0x27c23d0
	struct FString GetBattleID(); // Function Solarland.SolarGameInstanceBase.GetBattleID // (Final|Native|Public|BlueprintCallable) // @ game+0x27c2350
	struct USolarAssetManager* GetAssetManager(); // Function Solarland.SolarGameInstanceBase.GetAssetManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27c2320
	int64_t GetAppActiveTimestampInterval(); // Function Solarland.SolarGameInstanceBase.GetAppActiveTimestampInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x27c22f0
	void ExecuteCommandArray(struct TArray<struct FString>& cmdArray); // Function Solarland.SolarGameInstanceBase.ExecuteCommandArray // (Final|Native|Public|HasOutParms) // @ game+0x27c2220
	void ExecuteCommand(struct FString Cmd); // Function Solarland.SolarGameInstanceBase.ExecuteCommand // (Final|Native|Public) // @ game+0x27c2180
	void ExecuteChangeAudioModeLuaCall(bool bTurnOn); // Function Solarland.SolarGameInstanceBase.ExecuteChangeAudioModeLuaCall // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ExecuteBackKeyLuaCall(); // Function Solarland.SolarGameInstanceBase.ExecuteBackKeyLuaCall // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ExecGameArgs(struct FString Args, struct FString& FailReason, enum class EBoolean& Branches); // Function Solarland.SolarGameInstanceBase.ExecGameArgs // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27c2020
	void ClientTravel(struct FString URL, enum class ETravelType TravelType, bool bSeamless, int32_t FGuid_A, int32_t FGuid_B, int32_t FGuid_C, int32_t FGuid_D); // Function Solarland.SolarGameInstanceBase.ClientTravel // (Final|Native|Public|BlueprintCallable) // @ game+0x27c1df0
	void ClearGameManagers(); // Function Solarland.SolarGameInstanceBase.ClearGameManagers // (Final|Native|Protected|BlueprintCallable) // @ game+0x27c1dd0
	void CheckSavedDirFiles(struct TArray<struct FString>& Files); // Function Solarland.SolarGameInstanceBase.CheckSavedDirFiles // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void Browse(struct FString URL, enum class ETravelType TravelType); // Function Solarland.SolarGameInstanceBase.Browse // (Final|Native|Public|BlueprintCallable) // @ game+0x27c1cf0
	void AsyncDownLoadConfigFile(int64_t TaskID, struct FString URL); // Function Solarland.SolarGameInstanceBase.AsyncDownLoadConfigFile // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarGameMode_HandleElementRPC
// Size: 0xb8 (Inherited: 0xb0)
struct USolarGameMode_HandleElementRPC : UActorComponent {
	struct FName ComponentTagName; // 0xb0(0x08)

	void OnRep_ComponentName(); // Function Solarland.SolarGameMode_HandleElementRPC.OnRep_ComponentName // (Final|Native|Public) // @ game+0x27c8840
};

// Class Solarland.SGameMode_ModeConfig
// Size: 0x1d8 (Inherited: 0x30)
struct USGameMode_ModeConfig : UDataAsset {
	struct FSoftObjectPath BP_Mode; // 0x30(0x18)
	struct FSoftObjectPath BP_Reward; // 0x48(0x18)
	struct FSoftObjectPath RewardMap; // 0x60(0x18)
	struct FSoftObjectPath JobStructure; // 0x78(0x18)
	struct FSoftObjectPath DataStructure; // 0x90(0x18)
	struct FSoftObjectPath AttributeModifier; // 0xa8(0x18)
	struct FSoftObjectPath WellEffectJobRelationTable; // 0xc0(0x18)
	struct FSoftObjectPath BadEffectJobRelationTable; // 0xd8(0x18)
	struct FString UIConfig; // 0xf0(0x10)
	struct FSCustomMode_GameModeSetting GameModeSetting; // 0x100(0x68)
	struct TArray<struct FSGameMode_LevelConfig> Levels; // 0x168(0x10)
	struct TMap<struct FString, struct FString> Arguments; // 0x178(0x50)
	bool bDestroyItemOnDiscard; // 0x1c8(0x01)
	bool bDestroyWeaponOnDiscard; // 0x1c9(0x01)
	char pad_1CA[0x2]; // 0x1ca(0x02)
	float AllowJoinBattleLifeTime; // 0x1cc(0x04)
	bool bAllowJoinAITeammate; // 0x1d0(0x01)
	bool bConsiderPotentialPlayerWhenSpawnAI; // 0x1d1(0x01)
	char pad_1D2[0x6]; // 0x1d2(0x06)
};

// Class Solarland.SGameMode_EditorSaveData
// Size: 0x38 (Inherited: 0x28)
struct USGameMode_EditorSaveData : USaveGame {
	struct FString ConfigPath; // 0x28(0x10)
};

// Class Solarland.SolarGameModeData
// Size: 0xf8 (Inherited: 0x28)
struct USolarGameModeData : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	int32_t GameModeId; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct USGameMode_ModeConfig* CurrentModeData; // 0x38(0x08)
	struct FString ModeConfigPath; // 0x40(0x10)
	struct FString ModeParamsStr; // 0x50(0x10)
	struct UDataTable* JobDataTable; // 0x60(0x08)
	struct UDataTable* BoardDataTable; // 0x68(0x08)
	struct UDataTable* AttributeDataTable; // 0x70(0x08)
	char pad_78[0x30]; // 0x78(0x30)
	struct TMap<struct FString, struct FString> ModeParams; // 0xa8(0x50)

	void ReadConfigData(); // Function Solarland.SolarGameModeData.ReadConfigData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void InitModeParams(struct FString ParamStr); // Function Solarland.SolarGameModeData.InitModeParams // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SidesOperationAuthorityConfig
// Size: 0x80 (Inherited: 0x30)
struct USidesOperationAuthorityConfig : UDataAsset {
	struct TMap<struct FString, bool> OperationAuthority; // 0x30(0x50)

	bool GetOperationAuthority(struct FString SelfSide, struct FString OtherSide); // Function Solarland.SidesOperationAuthorityConfig.GetOperationAuthority // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x27c8370
};

// Class Solarland.SolarGameMode_ElementManager
// Size: 0x108 (Inherited: 0x28)
struct USolarGameMode_ElementManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct ASolarMapElementBase*> ElementsList; // 0x30(0x10)
	struct TArray<struct ASolarPlayerStart*> PlayerStartList; // 0x40(0x10)
	struct TMap<struct FName, struct USolarGameMode_HandleElementRPC*> HandleActorRPCBPs; // 0x50(0x50)
	struct TMap<struct FString, struct ASolarMapElementBase*> ElementMap; // 0xa0(0x50)
	char pad_F0[0x18]; // 0xf0(0x18)
};

// Class Solarland.SolarGameModeLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarGameModeLibrary : UObject {

	void UnBindEventOnItemUsed(struct UObject* WorldContextObject, struct FDelegate& Deletage); // Function Solarland.SolarGameModeLibrary.UnBindEventOnItemUsed // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27cf520
	void SwitchWeapon(struct ASolarCharacter* TargetPlayer, enum class EWeaponSlotType InWeaponSlot); // Function Solarland.SolarGameModeLibrary.SwitchWeapon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cf460
	void StopLoadingScreen(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.StopLoadingScreen // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x27cf3e0
	void StaticCastAbility(struct AActor* SourceActor, struct ASolarCharacter* TargetActor, struct ASolarAbility* Ability, bool ValidSourceLocation, struct FVector& SourceLocation, struct FVector& HitLocation, struct FName& HitBoneName, float Scale, struct FString InExtraInfo); // Function Solarland.SolarGameModeLibrary.StaticCastAbility // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27cf0f0
	struct ULoadingWidgetBase* StartLoadingScreen(struct UObject* WorldContextObject, struct ULoadingWidgetBase* LoadingScreenClass); // Function Solarland.SolarGameModeLibrary.StartLoadingScreen // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x27cf020
	void SpawnItemAtTransform(struct UObject* WorldContextObject, int32_t ItemID, int32_t ItemNum, struct FTransform& trans); // Function Solarland.SolarGameModeLibrary.SpawnItemAtTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27cee90
	void SolarButtonCallReleased(struct USolarButton* Button); // Function Solarland.SolarGameModeLibrary.SolarButtonCallReleased // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cee10
	void SolarButtonCallPressed(struct USolarButton* Button); // Function Solarland.SolarGameModeLibrary.SolarButtonCallPressed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27ced90
	void SolarButtonCallClick(struct USolarButton* Button); // Function Solarland.SolarGameModeLibrary.SolarButtonCallClick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27ced10
	void ShowWidget(struct UObject* WorldContextObject, struct USolarUserWidget* WidgetClass, struct USolarUserWidget*& OutWidget, enum class EUIRoot UILayer); // Function Solarland.SolarGameModeLibrary.ShowWidget // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27cebb0
	void ShowWeapon(struct ASolarCharacter* TargetPlayer); // Function Solarland.SolarGameModeLibrary.ShowWeapon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27ceb30
	void ShowNoticeOnLocalWithoutLocalization(struct UObject* WorldContextObject, struct UUINoticeBase* InNoticeClass, float InTime, struct FString InText, struct UObject* InIcon, int32_t InNoticeColor); // Function Solarland.SolarGameModeLibrary.ShowNoticeOnLocalWithoutLocalization // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27ce950
	void ShowNoticeOnLocalWithLocalization(struct UObject* WorldContextObject, int32_t NoticeId); // Function Solarland.SolarGameModeLibrary.ShowNoticeOnLocalWithLocalization // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27ce890
	void SetMiniMapFOV(struct UObject* WorldContextObject, float TargetFOV, float PlayTime, bool WithIconScale); // Function Solarland.SolarGameModeLibrary.SetMiniMapFOV // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27ce740
	void SetCharacterMeleeAttackState(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, bool CanAttack); // Function Solarland.SolarGameModeLibrary.SetCharacterMeleeAttackState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27ce640
	void SetActorOwnerToLocalController(struct UObject* TargetObject); // Function Solarland.SolarGameModeLibrary.SetActorOwnerToLocalController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27ce5c0
	void RemoveMarkFromRotationBar(struct UObject* WorldContextObject, struct URotationBarMarkWidget* InRotationMark); // Function Solarland.SolarGameModeLibrary.RemoveMarkFromRotationBar // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27ce500
	void RemoveMarkFromMap(struct UObject* WorldContextObject, struct UMapMarkBase* InMapMark); // Function Solarland.SolarGameModeLibrary.RemoveMarkFromMap // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27ce440
	bool RemoveMapElement(struct UObject* WorldContextObject, struct ASolarMapElementBase* Target); // Function Solarland.SolarGameModeLibrary.RemoveMapElement // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27ce370
	void RemoveDotLineToMapFrame(struct UObject* WorldContextObject, int32_t DotLineID); // Function Solarland.SolarGameModeLibrary.RemoveDotLineToMapFrame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27ce2b0
	void RemoveActorWorldMark(struct UObject* WorldContextObject, struct UActorMarkBase* InActorMark); // Function Solarland.SolarGameModeLibrary.RemoveActorWorldMark // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27ce1f0
	struct URotationBarMarkWidget* RegisterMarkToRotationBar(struct UObject* WorldContextObject, struct URotationBarMarkWidget* InRotationBarMarkClass, struct FVector& InMarkPos, int32_t InZOrder); // Function Solarland.SolarGameModeLibrary.RegisterMarkToRotationBar // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27ce090
	struct UMapMarkBase* RegisterMarkToMapFrame(struct UObject* WorldContextObject, struct UMapMarkBase* InMapMarkClass, struct FVector2D& Pivot, int32_t ZOrder); // Function Solarland.SolarGameModeLibrary.RegisterMarkToMapFrame // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27cdf30
	struct TArray<struct UMapMarkBase*> RegisterMarkToMap(struct UObject* WorldContextObject, struct UMapMarkBase* InMapMarkClass, struct FVector& InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int32_t ZOrder); // Function Solarland.SolarGameModeLibrary.RegisterMarkToMap // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27cdd00
	int32_t RegisterDotLineToMapFrame(struct UObject* WorldContextObject, struct AActor* StartPointActor, struct AActor* EndPointActor, struct FLinearColor& DotLineColor); // Function Solarland.SolarGameModeLibrary.RegisterDotLineToMapFrame // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27cdbb0
	struct UActorMarkBase* RegisterActorMarkOnActor(struct UObject* WorldContextObject, struct UActorMarkBase* InActorMarkClass, struct AActor* FollowActor); // Function Solarland.SolarGameModeLibrary.RegisterActorMarkOnActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x271d2b0
	void PlayerOutBySelf(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.PlayerOutBySelf // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cdb30
	void PlayAudioInGame(struct FString InAudioName); // Function Solarland.SolarGameModeLibrary.PlayAudioInGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cdaa0
	void MarkVictory(struct ASolarPlayerState* InPlayerState, int32_t Result); // Function Solarland.SolarGameModeLibrary.MarkVictory // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cd9e0
	void KillCharacter(struct UObject* Killer, struct ASolarCharacter* TargetCharacter, struct ASolarAbility* AbilityClass); // Function Solarland.SolarGameModeLibrary.KillCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cd8e0
	bool IsSecondCustomGameMode(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.IsSecondCustomGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27cd850
	void HideRotationBar(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.HideRotationBar // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cd7d0
	void HidePowerBar(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.HidePowerBar // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cd750
	void HideBattle(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.HideBattle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cd6d0
	void HideAllPlayerNav(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.HideAllPlayerNav // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cd650
	void HiddenWeapon(struct ASolarCharacter* TargetPlayer); // Function Solarland.SolarGameModeLibrary.HiddenWeapon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cd5d0
	void GotoLobby(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GotoLobby // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cd550
	void GlobalLogGameStateStatistics(struct UObject* WorldContextObject, struct FString InLogName, struct TMap<struct FString, struct FString>& LogValues); // Function Solarland.SolarGameModeLibrary.GlobalLogGameStateStatistics // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27cd3a0
	int32_t GetWramGameType(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetWramGameType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27cd310
	struct FSoftObjectPath GetWeaponUIIcon(struct UObject* WorldContextObject, int32_t WeaponItemID); // Function Solarland.SolarGameModeLibrary.GetWeaponUIIcon // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x27cd1f0
	struct USkeletalMesh* GetWeaponMesh(struct UObject* WorldContextObject, int32_t WeaponItemID, float& SpawnOffset); // Function Solarland.SolarGameModeLibrary.GetWeaponMesh // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27cd0e0
	struct FString GetNoticeFormatText(struct UObject* WorldContextObject, int32_t InLocalizationID, struct TMap<struct FString, struct FString>& FormatContext); // Function Solarland.SolarGameModeLibrary.GetNoticeFormatText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27197b0
	struct APawn* GetLocalCharacter(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetLocalCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27cd050
	struct USolarItemManager* GetItemManager(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetItemManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27ccfc0
	struct USolarGameMode_ElementManager* GetElementManager(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetElementManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27ccf30
	struct USolarGameMode_HandleElementRPC* GetElementHandleRPCComponent(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetElementHandleRPCComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27ccea0
	bool GetElementByID(struct UObject* WorldContextObject, struct FString ElementID, struct ASolarMapElementBase*& TargetElement); // Function Solarland.SolarGameModeLibrary.GetElementByID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27ccd70
	void GetDropItemDataByOutComeData(struct UObject* WorldContextObject, struct TArray<struct FSolarGameMode_DropItemData>& OutcomeData, struct TArray<struct FSolarGameMode_DropItemData>& TargetData); // Function Solarland.SolarGameModeLibrary.GetDropItemDataByOutComeData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27ccc20
	void GetCharacterID(struct ASolarCharacter* Character, int32_t& CharacterId, int32_t& SkinId, int32_t& ColorID); // Function Solarland.SolarGameModeLibrary.GetCharacterID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27ccab0
	struct UUserWidget* GetBattleControlWidget(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetBattleControlWidget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27cca20
	struct UUserWidget* GetBattleBackpackWidget(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetBattleBackpackWidget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27cc990
	bool GetBackpackWeaponBySlot(struct ASolarCharacter* Character, int32_t Slot, struct FSolarItemData& ItemData); // Function Solarland.SolarGameModeLibrary.GetBackpackWeaponBySlot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27cc800
	bool GetBackpackItemDataByType(struct ASolarCharacter* Character, int32_t ItemType, struct FSolarItemData& ItemData); // Function Solarland.SolarGameModeLibrary.GetBackpackItemDataByType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27cc670
	bool GetBackpackItemDataByID(struct ASolarCharacter* Character, int32_t ItemID, struct FSolarItemData& ItemData); // Function Solarland.SolarGameModeLibrary.GetBackpackItemDataByID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27cc4e0
	int32_t GetAILevelCurrentMatch(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetAILevelCurrentMatch // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27cc3d0
	struct FString GetActualBuildVersion(); // Function Solarland.SolarGameModeLibrary.GetActualBuildVersion // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cc460
	struct ASolarMapElementBase* GenerateMapElement(struct UObject* WorldContextObject, struct ASolarMapElementBase* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct AActor* Owner, struct APawn* Instigator, struct FString ElementID, struct FString Side, struct FString Job, struct TArray<struct FName>& Tags, enum class ESGameMode_ElementType ElementType, enum class EElementStateType State, enum class EElementVisibilityType Visibility, bool IsPersistent); // Function Solarland.SolarGameModeLibrary.GenerateMapElement // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x27cbf10
	struct TArray<struct ASolarPlayerStart*> FindPlayerStart(struct UObject* WorldContextObject, struct TArray<struct FString>& Sides, struct TArray<struct FString>& Jobs, struct TArray<struct FString>& Tags); // Function Solarland.SolarGameModeLibrary.FindPlayerStart // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27cbca0
	struct TArray<struct ASolarMapElementBase*> FindElementsByClass(struct UObject* WorldContextObject, struct TArray<struct UObject*>& ElementClasses, struct TArray<struct FString>& Sides, struct TArray<struct FString>& Jobs, struct TArray<struct FString>& Tags); // Function Solarland.SolarGameModeLibrary.FindElementsByClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27cb9d0
	struct TArray<struct ASolarMapElementBase*> FindElements(struct UObject* WorldContextObject, struct TArray<struct FString>& ElementTypes, struct TArray<struct FString>& Sides, struct TArray<struct FString>& Jobs, struct TArray<struct FString>& Tags); // Function Solarland.SolarGameModeLibrary.FindElements // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27cb6e0
	struct ASolarMapElementBase* FindElementByID(struct UObject* WorldContextObject, struct FString InElementID); // Function Solarland.SolarGameModeLibrary.FindElementByID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27cb600
	bool DestoryDeadCharacter(struct ASolarCharacter* TargetCharacter); // Function Solarland.SolarGameModeLibrary.DestoryDeadCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cb570
	void CharacterEnterDeath(struct ASolarCharacter* TargetCharacter, struct FSolarPointDamageEvent& DamageEvent, bool bEnterDying, bool bSpawnDeathBox, enum class EHealthChangeType ChangeType, struct AController* EventInstigator, float DamageValue); // Function Solarland.SolarGameModeLibrary.CharacterEnterDeath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27cb2f0
	void ChangeMiniMapToTargetID(struct UObject* WorldContextObject, int32_t InMapID); // Function Solarland.SolarGameModeLibrary.ChangeMiniMapToTargetID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cb230
	void ButtonCallReleased(struct UButton* Button); // Function Solarland.SolarGameModeLibrary.ButtonCallReleased // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cb1b0
	void ButtonCallPressed(struct UButton* Button); // Function Solarland.SolarGameModeLibrary.ButtonCallPressed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cb130
	void ButtonCallClick(struct UButton* Button); // Function Solarland.SolarGameModeLibrary.ButtonCallClick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27cb0b0
	void BindWidgetVisibilityChanged(struct UObject* WorldContextObject, struct FDelegate& Event); // Function Solarland.SolarGameModeLibrary.BindWidgetVisibilityChanged // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27cafd0
	void BindEventOnItemUsed(struct UObject* WorldContextObject, struct FDelegate& Deletage); // Function Solarland.SolarGameModeLibrary.BindEventOnItemUsed // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27caef0
	void ApplyAbility(struct UObject* SourceObject, struct TArray<struct ASolarCharacter*>& TargetCharacters, struct TArray<struct ASolarAbility*>& Abilities); // Function Solarland.SolarGameModeLibrary.ApplyAbility // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27cada0
	void AddItem(struct ASolarCharacter* SolarCharacter, int32_t ItemID, int32_t ItemNum); // Function Solarland.SolarGameModeLibrary.AddItem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27caca0
};

// Class Solarland.SolarGameModeLockSettings
// Size: 0x98 (Inherited: 0x28)
struct USolarGameModeLockSettings : USaveGame {
	struct TMap<int32_t, bool> GameModeLockStatus; // 0x28(0x50)
	struct TArray<int32_t> LobbyGameModeRecIDs; // 0x78(0x10)
	struct TArray<int32_t> GameModeGuideIDs; // 0x88(0x10)

	void CopyFrom(struct USolarGameModeLockSettings* InLockSettings); // Function Solarland.SolarGameModeLockSettings.CopyFrom // (Final|Native|Public) // @ game+0x27d34c0
};

// Class Solarland.SolarGameModeSelectionManager
// Size: 0x60 (Inherited: 0x30)
struct USolarGameModeSelectionManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct USolarGameModeLockSettings* CurGameModeLockSettings; // 0x38(0x08)
	char pad_40[0x18]; // 0x40(0x18)
	struct USolarGameModeLockSettings* DefaultGameModeLockSettings; // 0x58(0x08)

	void SaveGameModeLockSettings(); // Function Solarland.SolarGameModeSelectionManager.SaveGameModeLockSettings // (Final|Native|Public) // @ game+0x27d55c0
	void LoadGameModeLockSettings(); // Function Solarland.SolarGameModeSelectionManager.LoadGameModeLockSettings // (Final|Native|Public) // @ game+0x27d4df0
};

// Class Solarland.PlayerStatisticsData
// Size: 0xb8 (Inherited: 0x28)
struct UPlayerStatisticsData : UObject {
	struct FMulticastInlineDelegate OnPlayerStatDataUpdate; // 0x28(0x10)
	struct FMulticastInlineDelegate OnIncreaseWeaponKillNum; // 0x38(0x10)
	char pad_48[0x70]; // 0x48(0x70)

	struct FVector GetValue_Vector(enum class EStatisticsType InType); // Function Solarland.PlayerStatisticsData.GetValue_Vector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x27d4560
	void GetValue_MapKeyWithValueInt(enum class EStatisticsType InType, struct TArray<int32_t>& OutValue); // Function Solarland.PlayerStatisticsData.GetValue_MapKeyWithValueInt // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27d4470
	void GetValue_MapKeyWithValueFloat(enum class EStatisticsType InType, struct TArray<int32_t>& OutValue); // Function Solarland.PlayerStatisticsData.GetValue_MapKeyWithValueFloat // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27d4380
	int32_t GetValue_IntFromMap(enum class EStatisticsType InType, int32_t IntKey); // Function Solarland.PlayerStatisticsData.GetValue_IntFromMap // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x27d42b0
	void GetValue_IntArray(enum class EStatisticsType InType, struct TArray<int32_t>& OutResult); // Function Solarland.PlayerStatisticsData.GetValue_IntArray // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27d40b0
	int32_t GetValue_Int(enum class EStatisticsType InType); // Function Solarland.PlayerStatisticsData.GetValue_Int // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x27d3f30
	float GetValue_FloatFromMap(enum class EStatisticsType InType, int32_t IntKey, bool Floor); // Function Solarland.PlayerStatisticsData.GetValue_FloatFromMap // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x27d3e20
	void GetValue_FloatArray(enum class EStatisticsType InType, struct TArray<float>& OutResult); // Function Solarland.PlayerStatisticsData.GetValue_FloatArray // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27d3d30
	float GetValue_Float(enum class EStatisticsType InType, bool Floor); // Function Solarland.PlayerStatisticsData.GetValue_Float // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x27d3c60
};

// Class Solarland.SideStatisticsData
// Size: 0x78 (Inherited: 0x28)
struct USideStatisticsData : UObject {
	char pad_28[0x50]; // 0x28(0x50)
};

// Class Solarland.SolarGameModeStatisticsComponent
// Size: 0x150 (Inherited: 0xd0)
struct USolarGameModeStatisticsComponent : UGameModeCompBase {
	char pad_D0[0x10]; // 0xd0(0x10)
	struct TMap<struct FString, struct UPlayerStatisticsData*> AllPlayerStatData; // 0xe0(0x50)
	struct TArray<enum class EStatisticsType> SpecialFuncTag; // 0x130(0x10)
	char pad_140[0x10]; // 0x140(0x10)

	struct TArray<int32_t> GetValue_IntArray(struct FString InPlayerID, enum class EStatisticsType InType); // Function Solarland.SolarGameModeStatisticsComponent.GetValue_IntArray // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x27d41a0
	int32_t GetValue_Int(struct FString InPlayerID, enum class EStatisticsType InType); // Function Solarland.SolarGameModeStatisticsComponent.GetValue_Int // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x27d3fc0
	struct UPlayerStatisticsData* GetPlayerStatData(struct FString InPlayerID); // Function Solarland.SolarGameModeStatisticsComponent.GetPlayerStatData // (Final|Native|Public) // @ game+0x27d3bb0
};

// Class Solarland.SolarGameplayAbilitySet
// Size: 0x40 (Inherited: 0x30)
struct USolarGameplayAbilitySet : UDataAsset {
	struct TArray<struct UGameplayAbility*> Abilities; // 0x30(0x10)
};

// Class Solarland.SolarGameplayCueManager
// Size: 0x310 (Inherited: 0x310)
struct USolarGameplayCueManager : UGameplayCueManager {
};

// Class Solarland.SolarGameplayLogger
// Size: 0x38 (Inherited: 0x28)
struct USolarGameplayLogger : UObject {
	struct TArray<enum class ELogChannel> DefaultChannels; // 0x28(0x10)

	void SolarDebugLog(enum class ELogChannel Channel, struct FString Message); // Function Solarland.SolarGameplayLogger.SolarDebugLog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27d5670
	void EnableDebugLogChannel(enum class ELogChannel Channel); // Function Solarland.SolarGameplayLogger.EnableDebugLogChannel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27d3750
	void DisableDebugLogChannel(enum class ELogChannel Channel); // Function Solarland.SolarGameplayLogger.DisableDebugLogChannel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27d36e0
};

// Class Solarland.SolarGameplaySmokeComponent
// Size: 0x108 (Inherited: 0xb0)
struct USolarGameplaySmokeComponent : UActorComponent {
	float SmokeRadius; // 0xb0(0x04)
	float LocalPlayerCheckRadiusWithCamera; // 0xb4(0x04)
	float DetectDistance; // 0xb8(0x04)
	char DetectTargetFlag; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
	struct FGameplayCueTag InSmokeBaseCueTag; // 0xc0(0x08)
	struct FGameplayCueTag TeamPerspectiveCueTag; // 0xc8(0x08)
	struct FGameplayCueTag HawkeyePerspectiveCueTag; // 0xd0(0x08)
	bool bEnableSmokeDamage; // 0xd8(0x01)
	char pad_D9[0x3]; // 0xd9(0x03)
	float DamageDistance; // 0xdc(0x04)
	float DamagePerTime; // 0xe0(0x04)
	float DamageFreq; // 0xe4(0x04)
	char pad_E8[0x20]; // 0xe8(0x20)

	void SetIsValid(bool bInIsValid); // Function Solarland.SolarGameplaySmokeComponent.SetIsValid // (Final|Native|Public|BlueprintCallable) // @ game+0x27d55e0
};

// Class Solarland.SolarGameplayTagLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarGameplayTagLibrary : UBlueprintFunctionLibrary {

	bool K2_RequestGameplayTag(struct FName TagName, struct FGameplayTag& OutTagFound); // Function Solarland.SolarGameplayTagLibrary.K2_RequestGameplayTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27d4d10
	struct FGameplayTagContainer DiffTags(struct FGameplayTagContainer TagsA, struct FGameplayTagContainer& TagsB); // Function Solarland.SolarGameplayTagLibrary.DiffTags // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27d3550
};

// Class Solarland.SolarGameplayTagSystem
// Size: 0x80 (Inherited: 0x30)
struct USolarGameplayTagSystem : UEngineSubsystem {
	struct TMap<struct FName, struct UDataAsset*> LoadedTagReflectors; // 0x30(0x50)
};

// Class Solarland.SolarGameProgressManager
// Size: 0x128 (Inherited: 0x30)
struct USolarGameProgressManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnGameStart; // 0x38(0x10)
	char pad_48[0xe0]; // 0x48(0xe0)

	void OnWorldConditionsCompleted(); // Function Solarland.SolarGameProgressManager.OnWorldConditionsCompleted // (Final|Native|Protected) // @ game+0x27d53e0
	void OnStreamingLevelComplete(); // Function Solarland.SolarGameProgressManager.OnStreamingLevelComplete // (Final|Native|Protected) // @ game+0x27d53c0
	void OnShadersCompileComplete(); // Function Solarland.SolarGameProgressManager.OnShadersCompileComplete // (Final|Native|Protected) // @ game+0x27d53a0
	void OnGameStart__DelegateSignature(); // DelegateFunction Solarland.SolarGameProgressManager.OnGameStart__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void K2_ReceiveGlobalConditionCompleted(struct UObject* WorldContextObject, struct FGameplayTag CompletedCondition); // Function Solarland.SolarGameProgressManager.K2_ReceiveGlobalConditionCompleted // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x27d4c50
	void K2_ReceiveConditionCompleted(struct UObject* WorldContextObject, struct FGameplayTag CompletedCondition); // Function Solarland.SolarGameProgressManager.K2_ReceiveConditionCompleted // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x27d4b90
	void K2_OnGlobalConditionCompleted(struct FGameplayTag CompletedCondition); // Function Solarland.SolarGameProgressManager.K2_OnGlobalConditionCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x27d4b00
	void K2_OnConditionCompleted(struct UWorld* CurrentWorld, struct FGameplayTag CompletedCondition); // Function Solarland.SolarGameProgressManager.K2_OnConditionCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x27d4a30
	bool IsGameStartNeedCondition(struct UObject* WorldContextObject, struct FGameplayTag& InCondition); // Function Solarland.SolarGameProgressManager.IsGameStartNeedCondition // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27d4950
	bool IsConditionInList(struct FGameplayTag& InCondition, struct UWorld* WorldCheck); // Function Solarland.SolarGameProgressManager.IsConditionInList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x27d4860
	bool IsAllStartGameConditionCompleted(struct UWorld* WorldCheck); // Function Solarland.SolarGameProgressManager.IsAllStartGameConditionCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x27d47c0
	bool InitGameStartCondition(struct UWorld* CurrentWorld, struct FGameplayTagContainer ConditionList); // Function Solarland.SolarGameProgressManager.InitGameStartCondition // (Final|Native|Public|BlueprintCallable) // @ game+0x27d4690
	bool HasGameStarted(struct UObject* WorldContextObject); // Function Solarland.SolarGameProgressManager.HasGameStarted // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27d4600
	struct USolarGameProgressManager* Get(struct UObject* WorldContextObject); // Function Solarland.SolarGameProgressManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27d3980
};

// Class Solarland.SolarGameSession
// Size: 0x240 (Inherited: 0x240)
struct ASolarGameSession : AGameSession {
};

// Class Solarland.SolarGameSettingsRange
// Size: 0x180 (Inherited: 0x28)
struct USolarGameSettingsRange : UObject {
	struct FSoundSettingsRange SoundSettings; // 0x28(0x20)
	struct FSensitivitySettingsRange SensitivitySettings; // 0x48(0x120)
	struct FGraphicsSettingsRange GraphicsSettings; // 0x168(0x18)
};

// Class Solarland.SolarGameSettingsRangePC
// Size: 0x198 (Inherited: 0x180)
struct USolarGameSettingsRangePC : USolarGameSettingsRange {
	struct FMouseAndKeyboardSettingsRange KeyboardControlSettings; // 0x180(0x08)
	struct FGamepadSettingsRange GamepadSettings; // 0x188(0x10)
};

// Class Solarland.SolarGameStateBase
// Size: 0x300 (Inherited: 0x298)
struct ASolarGameStateBase : AGameStateBase {
	char pad_298[0x8]; // 0x298(0x08)
	struct FGameStartConditionList GameStartConditions; // 0x2a0(0x58)
	struct USolarGameplayConfigComponent* GameplayConfigComponent; // 0x2f8(0x08)
};

// Class Solarland.SolarGameStatistics
// Size: 0x98 (Inherited: 0x28)
struct USolarGameStatistics : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FString PlayerIdName; // 0x30(0x10)
	struct FString LogTypeName; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)
	struct USolarGameInstanceBase* Owner; // 0x58(0x08)
	struct FSolarGameStatisticsLogHeadInfo LogHeadInfo; // 0x60(0x28)
	char pad_88[0x10]; // 0x88(0x10)

	struct FSolarGameStatisticsLogHeadInfo StaticGetLogHeadInfo(); // Function Solarland.SolarGameStatistics.StaticGetLogHeadInfo // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x27dbae0
	void SetSwapLogFileSize(int32_t InSize); // Function Solarland.SolarGameStatistics.SetSwapLogFileSize // (Final|Native|Protected|BlueprintCallable) // @ game+0x27db990
	void SetSwapLogFileInterval(int32_t InInterval); // Function Solarland.SolarGameStatistics.SetSwapLogFileInterval // (Final|Native|Protected|BlueprintCallable) // @ game+0x27db910
	void SetLogValueSeparater(struct FString InValueSeparater); // Function Solarland.SolarGameStatistics.SetLogValueSeparater // (Final|Native|Protected|BlueprintCallable) // @ game+0x27db7a0
	void SetLogTerminator(struct FString InTerminator); // Function Solarland.SolarGameStatistics.SetLogTerminator // (Final|Native|Protected|BlueprintCallable) // @ game+0x27db6c0
	void SetLogFileNameSuffix(struct FString InLogFileNameSuffix); // Function Solarland.SolarGameStatistics.SetLogFileNameSuffix // (Final|Native|Protected|BlueprintCallable) // @ game+0x27db5e0
	void SetLogFileNamePrefix(struct FString InLogFileNamePrefix); // Function Solarland.SolarGameStatistics.SetLogFileNamePrefix // (Final|Native|Protected|BlueprintCallable) // @ game+0x27db500
	void SetLogFileExtension(struct FString InLogFileExtension); // Function Solarland.SolarGameStatistics.SetLogFileExtension // (Final|Native|Protected|BlueprintCallable) // @ game+0x27db420
	void SetLogFileDir(struct FString InLogFileDir); // Function Solarland.SolarGameStatistics.SetLogFileDir // (Final|Native|Protected|BlueprintCallable) // @ game+0x27db340
	void SetLogElementSeparater(struct FString InElementSeparater); // Function Solarland.SolarGameStatistics.SetLogElementSeparater // (Final|Native|Protected|BlueprintCallable) // @ game+0x27db260
	void SetLogCheckIntervalMS(int32_t InLogCheckIntervalMS); // Function Solarland.SolarGameStatistics.SetLogCheckIntervalMS // (Final|Native|Protected|BlueprintCallable) // @ game+0x27db1e0
	void ReceiveShutdown(); // Function Solarland.SolarGameStatistics.ReceiveShutdown // (Event|Protected|BlueprintEvent) // @ game+0xb66830
	void ReceiveInit(); // Function Solarland.SolarGameStatistics.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0xb66830
	void NotifyBattleStart(struct FString InBattleID); // Function Solarland.SolarGameStatistics.NotifyBattleStart // (Final|Native|Public|BlueprintCallable) // @ game+0x27da850
	void NotifyBattleEnd(); // Function Solarland.SolarGameStatistics.NotifyBattleEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x27da830
	void LogInternal(struct FString InLog); // Function Solarland.SolarGameStatistics.LogInternal // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x27da440
	void LogGameStats_KeyValues(struct FString InKey, struct TArray<struct FString>& InValues); // Function Solarland.SolarGameStatistics.LogGameStats_KeyValues // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27da320
	void LogGameStats_KeyValue(struct FString InKey, struct FString InValue); // Function Solarland.SolarGameStatistics.LogGameStats_KeyValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27da230
	void LogGameStats_Key(struct FString InKey); // Function Solarland.SolarGameStatistics.LogGameStats_Key // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27da1a0
	bool IsUseEmptyHeadData(struct FString InPlayerID); // Function Solarland.SolarGameStatistics.IsUseEmptyHeadData // (Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetSwapLogFileSize(); // Function Solarland.SolarGameStatistics.GetSwapLogFileSize // (Final|Native|Public|BlueprintCallable) // @ game+0x27d9c00
	int32_t GetSwapLogFileInterval(); // Function Solarland.SolarGameStatistics.GetSwapLogFileInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x27d9be0
	struct FString GetSCMLogDataString(bool bIncludeStatistics, struct ASolarPlayerState* InPS); // Function Solarland.SolarGameStatistics.GetSCMLogDataString // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FString GetProperLogElement(struct FString InElement); // Function Solarland.SolarGameStatistics.GetProperLogElement // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x27d99a0
	struct FString GetLogValueSeparater(); // Function Solarland.SolarGameStatistics.GetLogValueSeparater // (Final|Native|Public|BlueprintCallable) // @ game+0x27d9230
	struct FString GetLogTerminator(); // Function Solarland.SolarGameStatistics.GetLogTerminator // (Final|Native|Public|BlueprintCallable) // @ game+0x27d9170
	struct FSolarGameStatisticsLogHeadInfo GetLogHeadInfo(); // Function Solarland.SolarGameStatistics.GetLogHeadInfo // (Final|Native|Protected|BlueprintCallable) // @ game+0x27d9110
	struct FString GetLogFileNameSuffix(); // Function Solarland.SolarGameStatistics.GetLogFileNameSuffix // (Final|Native|Public|BlueprintCallable) // @ game+0x27d9050
	struct FString GetLogFileNamePrefix(); // Function Solarland.SolarGameStatistics.GetLogFileNamePrefix // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8f90
	struct FString GetLogFileExtension(); // Function Solarland.SolarGameStatistics.GetLogFileExtension // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8ed0
	struct FString GetLogFileDir(); // Function Solarland.SolarGameStatistics.GetLogFileDir // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8e10
	struct FString GetLogElementSeparater(); // Function Solarland.SolarGameStatistics.GetLogElementSeparater // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8d50
	struct FString GetLogDataString(bool bIncludeStatistics, struct FString InPlayerID); // Function Solarland.SolarGameStatistics.GetLogDataString // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetLogCheckIntervalMS(); // Function Solarland.SolarGameStatistics.GetLogCheckIntervalMS // (Final|Native|Public|BlueprintCallable) // @ game+0x27d8d30
	struct FString GetHeadDataString(struct FString InPlayerID); // Function Solarland.SolarGameStatistics.GetHeadDataString // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FString GetEmptyHeadDataString(); // Function Solarland.SolarGameStatistics.GetEmptyHeadDataString // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool CanReportBIWrapper(struct FString InLogType); // Function Solarland.SolarGameStatistics.CanReportBIWrapper // (Event|Public|BlueprintEvent) // @ game+0xb66830
};

// Class Solarland.SolarGameUserSettings
// Size: 0x298 (Inherited: 0x38)
struct USolarGameUserSettings : UDeveloperSettings {
	struct FPickupUserSettings PickupSettings; // 0x38(0x18)
	struct FGraphicsUserSettings GraphicsSettings; // 0x50(0x60)
	struct FWeaponUserSettings WeaponSettings; // 0xb0(0x20)
	struct FLanguageUserSettings LanguageSettings; // 0xd0(0x03)
	struct FCharacterVoiceUserSettings CharacterVoiceSettings; // 0xd3(0x01)
	char pad_D4[0x4]; // 0xd4(0x04)
	struct FSoundUserSettings SoundSettings; // 0xd8(0x60)
	struct FBasicUserSettings BasicSettings; // 0x138(0x11)
	char pad_149[0x7]; // 0x149(0x07)
	struct FPersonalityUserSettings PersonalitySettings; // 0x150(0x88)
	struct FSensitivityUserSettings SensitivitySettings; // 0x1d8(0x94)
	struct FShakeUserSettings ShakeSettings; // 0x26c(0x01)
	struct FVehicleControlUserSettings DriverSettings; // 0x26d(0x05)
	struct FChatOperatorUserSettings ChatOperatorSettings; // 0x272(0x02)
	char pad_274[0x4]; // 0x274(0x04)
	struct FSoftClassPath DefaultSettingsRangePath; // 0x278(0x18)
	bool bIsSynchronized; // 0x290(0x01)
	enum class EConfigVersion ConfigVersion; // 0x291(0x01)
	bool bFirstTimeLanunchGame; // 0x292(0x01)
	char pad_293[0x5]; // 0x293(0x05)

	struct FString ToJsonObjectString(); // Function Solarland.SolarGameUserSettings.ToJsonObjectString // (Final|Native|Public|Const) // @ game+0x27e89b0
	bool IsEnableGamepadInput(); // Function Solarland.SolarGameUserSettings.IsEnableGamepadInput // (Final|Native|Public|Const) // @ game+0x27e8980
	struct FWeaponUserSettings GetWeaponSettings(); // Function Solarland.SolarGameUserSettings.GetWeaponSettings // (Native|Public|Const) // @ game+0x27e8940
	struct FSoundUserSettings GetSoundSettings(); // Function Solarland.SolarGameUserSettings.GetSoundSettings // (Native|Public|Const) // @ game+0x27e8900
	struct FShakeUserSettings GetShakeSettings(); // Function Solarland.SolarGameUserSettings.GetShakeSettings // (Native|Public|Const) // @ game+0x27e88c0
	struct FSensitivityUserSettings GetSensitivitySettings(); // Function Solarland.SolarGameUserSettings.GetSensitivitySettings // (Native|Public|Const) // @ game+0x27e8830
	struct FPickupUserSettings GetPickupSettings(); // Function Solarland.SolarGameUserSettings.GetPickupSettings // (Native|Public|Const) // @ game+0x27e87f0
	struct FPersonalityUserSettings GetPersonalitySettings(); // Function Solarland.SolarGameUserSettings.GetPersonalitySettings // (Native|Public|Const) // @ game+0x27e87b0
	struct FLanguageUserSettings GetLanguageSettings(); // Function Solarland.SolarGameUserSettings.GetLanguageSettings // (Native|Public|Const) // @ game+0x27e8770
	struct FGraphicsUserSettings GetGraphicsSettings(); // Function Solarland.SolarGameUserSettings.GetGraphicsSettings // (Native|Public|Const) // @ game+0x27e8730
	bool GetEnableOpponentPerspectiveByDefault(); // Function Solarland.SolarGameUserSettings.GetEnableOpponentPerspectiveByDefault // (Final|Native|Public|Const) // @ game+0x27e8700
	struct FVehicleControlUserSettings GetDriverSettings(); // Function Solarland.SolarGameUserSettings.GetDriverSettings // (Native|Public|Const) // @ game+0x27e86c0
	float GetDefaultCustomizedCharacterCameraFOV(); // Function Solarland.SolarGameUserSettings.GetDefaultCustomizedCharacterCameraFOV // (Final|Native|Public|Const) // @ game+0x27e8690
	struct FChatOperatorUserSettings GetChatOperatorSettings(); // Function Solarland.SolarGameUserSettings.GetChatOperatorSettings // (Native|Public|Const) // @ game+0x27e8650
	struct FCharacterVoiceUserSettings GetCharacterVoiceSettings(); // Function Solarland.SolarGameUserSettings.GetCharacterVoiceSettings // (Native|Public|Const) // @ game+0x27e8610
	struct FBasicUserSettings GetBasicSettings(); // Function Solarland.SolarGameUserSettings.GetBasicSettings // (Native|Public|Const) // @ game+0x27e85d0
	void FromJsonObjectString(struct FString JsonStr); // Function Solarland.SolarGameUserSettings.FromJsonObjectString // (Final|Native|Public) // @ game+0x27e8350
	bool CheckJsonObjectString(struct FString JsonStr); // Function Solarland.SolarGameUserSettings.CheckJsonObjectString // (Final|Native|Public|Const) // @ game+0x27e8090
};

// Class Solarland.SolarGameUserSettingsMgr
// Size: 0xc8 (Inherited: 0x28)
struct USolarGameUserSettingsMgr : UObject {
	struct USolarGameUserSettings* MobileGameUserSettings; // 0x28(0x08)
	struct USolarGameUserSettingsPC* DesktopGameUserSettings; // 0x30(0x08)
	struct USolarGameUserSettings* CurGameUserSettings; // 0x38(0x08)
	struct USolarGameSettingsRange* MobileGameSettingsRange; // 0x40(0x08)
	struct USolarGameSettingsRange* DesktopGameSettingsRange; // 0x48(0x08)
	struct USolarGameSettingsRange* DefaultGameSettingsRange; // 0x50(0x08)
	bool bIsDefalutSettings; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct USolarGameInstanceBase* SolarGameInstance; // 0x60(0x08)
	char pad_68[0x60]; // 0x68(0x60)

	void SynchronizeInputSettings(); // Function Solarland.SolarGameUserSettingsMgr.SynchronizeInputSettings // (Final|Native|Private) // @ game+0x27ef5a0
	void SaveGameSettingsByPlatform(struct USolarGameUserSettings* InGameUserSettings); // Function Solarland.SolarGameUserSettingsMgr.SaveGameSettingsByPlatform // (Final|Native|Public) // @ game+0x27ef510
	void SaveGameSettings(); // Function Solarland.SolarGameUserSettingsMgr.SaveGameSettings // (Final|Native|Public) // @ game+0x27ef4f0
	void ResetToDefaultByPlatform(struct USolarGameUserSettings* InGameUserSettings, enum class ESolarGameUserSettingPart SettingPart); // Function Solarland.SolarGameUserSettingsMgr.ResetToDefaultByPlatform // (Final|Native|Public) // @ game+0x27ef420
	void ResetToDefault(enum class ESolarGameUserSettingPart SettingPart); // Function Solarland.SolarGameUserSettingsMgr.ResetToDefault // (Final|Native|Public) // @ game+0x27ef3a0
	void RefreshValid(struct USolarGameInstanceBase* GameInstance, bool SaveIfDirty); // Function Solarland.SolarGameUserSettingsMgr.RefreshValid // (Final|Native|Public) // @ game+0x27ef2d0
	void RefreshDynamicShadow(); // Function Solarland.SolarGameUserSettingsMgr.RefreshDynamicShadow // (Final|Native|Public) // @ game+0x27ef2b0
	void RefreshAnalogCursorSpeed(); // Function Solarland.SolarGameUserSettingsMgr.RefreshAnalogCursorSpeed // (Final|Native|Public) // @ game+0x27ef290
	void OnSettingConfigSaved(); // Function Solarland.SolarGameUserSettingsMgr.OnSettingConfigSaved // (Final|Native|Public) // @ game+0x27ef270
	void OnScreenDamageEffectSettingChanged(); // Function Solarland.SolarGameUserSettingsMgr.OnScreenDamageEffectSettingChanged // (Final|Native|Public) // @ game+0x27ef250
	void OnPickupSettingChanged(); // Function Solarland.SolarGameUserSettingsMgr.OnPickupSettingChanged // (Final|Native|Public) // @ game+0x27ef230
	void OnOffScreenSettingChanged(); // Function Solarland.SolarGameUserSettingsMgr.OnOffScreenSettingChanged // (Final|Native|Public) // @ game+0x27ef210
	bool IsLowLevelDevice(); // Function Solarland.SolarGameUserSettingsMgr.IsLowLevelDevice // (Final|Native|Public) // @ game+0x27ef1e0
	bool IsHighlightMomentOpen(); // Function Solarland.SolarGameUserSettingsMgr.IsHighlightMomentOpen // (Final|Native|Public) // @ game+0x27ef1b0
	bool IsEnableGamepadInput(); // Function Solarland.SolarGameUserSettingsMgr.IsEnableGamepadInput // (Final|Native|Public|Const) // @ game+0x27ef180
	bool IsDefaultEnableDynamicShadow(); // Function Solarland.SolarGameUserSettingsMgr.IsDefaultEnableDynamicShadow // (Final|Native|Public) // @ game+0x27ef150
	void InitializeSettings(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarGameUserSettingsMgr.InitializeSettings // (Final|Native|Public) // @ game+0x92e240
	void Init(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarGameUserSettingsMgr.Init // (Final|Native|Public) // @ game+0x27ef0c0
	struct USolarGameUserSettings* GetMobileGameUserSettings(); // Function Solarland.SolarGameUserSettingsMgr.GetMobileGameUserSettings // (Final|Native|Public|Const) // @ game+0x27ef090
	struct USolarGameSettingsRange* GetMobileGameSettingsRange(); // Function Solarland.SolarGameUserSettingsMgr.GetMobileGameSettingsRange // (Final|Native|Public|Const) // @ game+0x27ef060
	struct USolarGameUserSettingsPC* GetDesktopGameUserSettings(); // Function Solarland.SolarGameUserSettingsMgr.GetDesktopGameUserSettings // (Final|Native|Public|Const) // @ game+0x27ef030
	struct USolarGameSettingsRange* GetDesktopGameSettingsRange(); // Function Solarland.SolarGameUserSettingsMgr.GetDesktopGameSettingsRange // (Final|Native|Public|Const) // @ game+0x27ef000
	int32_t GetCurNativeRefreshRate(); // Function Solarland.SolarGameUserSettingsMgr.GetCurNativeRefreshRate // (Final|Native|Public) // @ game+0x27eefd0
	bool FixConfigVersionByPlatform(struct USolarGameUserSettings* InGameUserSettings); // Function Solarland.SolarGameUserSettingsMgr.FixConfigVersionByPlatform // (Final|Native|Public) // @ game+0x27eef30
	bool FixConfigVersion(); // Function Solarland.SolarGameUserSettingsMgr.FixConfigVersion // (Final|Native|Public) // @ game+0x27eef00
};

// Class Solarland.SolarGameUserSettingsPC
// Size: 0x5b0 (Inherited: 0x298)
struct USolarGameUserSettingsPC : USolarGameUserSettings {
	struct FSensitivityUserSettings SensitivitySettingsKeyboard; // 0x298(0x94)
	struct FSensitivityUserSettings SensitivitySettingsGamepad; // 0x32c(0x94)
	struct FMouseAndKeyboardSettings KeyboardControlSettings; // 0x3c0(0x0c)
	char pad_3CC[0x4]; // 0x3cc(0x04)
	struct FGamepadSettings GamepadSettings; // 0x3d0(0xe0)
	struct FGamepadAdvancedSettings GamepadAdvancedSettings; // 0x4b0(0x3c)
	char pad_4EC[0x4]; // 0x4ec(0x04)
	struct FGraphicsUserSettingsPC GraphicsSettingsPC; // 0x4f0(0xa8)
	bool bEnableCursorNoticePanel; // 0x598(0x01)
	char pad_599[0x7]; // 0x599(0x07)
	struct FMulticastInlineDelegate OnSolarSelectMonitorCompleted; // 0x5a0(0x10)
};

// Class Solarland.SolarLeggedVehicleAnimInstance
// Size: 0x400 (Inherited: 0x340)
struct USolarLeggedVehicleAnimInstance : USolarVehicleAnimInstance {
	char pad_340[0x8]; // 0x340(0x08)
	float YawDifference; // 0x348(0x04)
	enum class EVehicleRotateAnimationType VehicleRotateType; // 0x34c(0x01)
	char pad_34D[0x3]; // 0x34d(0x03)
	struct FVector RotationBlend; // 0x350(0x0c)
	float ProceduralWalkingAlpha; // 0x35c(0x04)
	struct FVector BodyRelativeLocation; // 0x360(0x0c)
	struct FRotator BodyRelativeRotator; // 0x36c(0x0c)
	struct FVector FLFootIKEffectorLocation; // 0x378(0x0c)
	struct FVector FRFootIKEffectorLocation; // 0x384(0x0c)
	struct FVector MLFootIKEffectorLocation; // 0x390(0x0c)
	struct FVector MRFootIKEffectorLocation; // 0x39c(0x0c)
	struct FVector BLFootIKEffectorLocation; // 0x3a8(0x0c)
	struct FVector BRFootIKEffectorLocation; // 0x3b4(0x0c)
	float FLFootIKAlpha; // 0x3c0(0x04)
	float FRFootIKAlpha; // 0x3c4(0x04)
	float MLFootIKAlpha; // 0x3c8(0x04)
	float MRFootIKAlpha; // 0x3cc(0x04)
	float BLFootIKAlpha; // 0x3d0(0x04)
	float BRFootIKAlpha; // 0x3d4(0x04)
	struct TArray<float> FootRotatorOffsets; // 0x3d8(0x10)
	float LeftFootLocationX; // 0x3e8(0x04)
	float RightFootLocationX; // 0x3ec(0x04)
	float LeaningDegree; // 0x3f0(0x04)
	char pad_3F4[0xc]; // 0x3f4(0x0c)

	void SetLandBrakingLocomotion(); // Function Solarland.SolarLeggedVehicleAnimInstance.SetLandBrakingLocomotion // (Final|Native|Public|BlueprintCallable) // @ game+0x282dd00
	void ResetOverrideLocomotion(); // Function Solarland.SolarLeggedVehicleAnimInstance.ResetOverrideLocomotion // (Final|Native|Public|BlueprintCallable) // @ game+0x282db10
	void AnimNotify_EnableInput(); // Function Solarland.SolarLeggedVehicleAnimInstance.AnimNotify_EnableInput // (Final|Native|Public) // @ game+0x282d590
	void AnimNotify_EnableIK(); // Function Solarland.SolarLeggedVehicleAnimInstance.AnimNotify_EnableIK // (Final|Native|Public) // @ game+0x282d570
	void AnimNotify_DisableInput(); // Function Solarland.SolarLeggedVehicleAnimInstance.AnimNotify_DisableInput // (Final|Native|Public) // @ game+0x282d550
	void AnimNotify_DisableIK(); // Function Solarland.SolarLeggedVehicleAnimInstance.AnimNotify_DisableIK // (Final|Native|Public) // @ game+0x282d530
};

// Class Solarland.SolarGatlingVehicleAnimInstance
// Size: 0x430 (Inherited: 0x400)
struct USolarGatlingVehicleAnimInstance : USolarLeggedVehicleAnimInstance {
	bool bDashing; // 0x3f8(0x01)
	bool bVehicleRotating; // 0x3f9(0x01)
	float GatlingRollSpeed; // 0x3fc(0x04)
	struct FRotator DashingWeaponYawRot; // 0x400(0x0c)
	struct FRotator DashingWeaponPicthRot; // 0x40c(0x0c)
	struct FName PitchRotParentBone; // 0x418(0x08)
	float WeaponRotAlpha; // 0x420(0x04)
	char pad_42A[0x6]; // 0x42a(0x06)

	void AnimNotify_LeftRotate(); // Function Solarland.SolarGatlingVehicleAnimInstance.AnimNotify_LeftRotate // (Final|Native|Public) // @ game+0x27eeee0
	void AnimNotify_EnterRotate(); // Function Solarland.SolarGatlingVehicleAnimInstance.AnimNotify_EnterRotate // (Final|Native|Public) // @ game+0x27eeec0
};

// Class Solarland.SolarGauntletController
// Size: 0x38 (Inherited: 0x30)
struct USolarGauntletController : UGauntletTestController {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarGauntletBPAutoTestController
// Size: 0x38 (Inherited: 0x38)
struct USolarGauntletBPAutoTestController : USolarGauntletController {
};

// Class Solarland.SolarGauntletBPBase
// Size: 0x238 (Inherited: 0x228)
struct ASolarGauntletBPBase : AActor {
	char pad_228[0x10]; // 0x228(0x10)

	void StopTesting(float Delay); // Function Solarland.SolarGauntletBPBase.StopTesting // (Native|Public|BlueprintCallable) // @ game+0x27f3ee0
	void SendLocalCharactorMoveTo(struct FVector Vector); // Function Solarland.SolarGauntletBPBase.SendLocalCharactorMoveTo // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x27f3a90
};

// Class Solarland.SolarGauntletClientController
// Size: 0x38 (Inherited: 0x38)
struct USolarGauntletClientController : USolarGauntletController {
};

// Class Solarland.SolarGauntletClientSmokeController
// Size: 0x50 (Inherited: 0x38)
struct USolarGauntletClientSmokeController : USolarGauntletController {
	char pad_38[0x18]; // 0x38(0x18)
};

// Class Solarland.SolarGauntletBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarGauntletBlueprintLibrary : UBlueprintFunctionLibrary {

	void EndTest(int32_t ExitCode); // Function Solarland.SolarGauntletBlueprintLibrary.EndTest // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27f3340
	void BookmarkEnd(struct FString Message); // Function Solarland.SolarGauntletBlueprintLibrary.BookmarkEnd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27f29b0
	void BookmarkBegin(struct FString Message); // Function Solarland.SolarGauntletBlueprintLibrary.BookmarkBegin // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x27f2920
};

// Class Solarland.SolarGauntletPSOGatherBP
// Size: 0x238 (Inherited: 0x238)
struct ASolarGauntletPSOGatherBP : ASolarGauntletBPBase {

	void StartSpecificPSOGathering(); // Function Solarland.SolarGauntletPSOGatherBP.StartSpecificPSOGathering // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void StartPSOGathering(); // Function Solarland.SolarGauntletPSOGatherBP.StartPSOGathering // (Final|Native|Public|BlueprintCallable) // @ game+0x27f3ec0
	void SendTravelToNextLevel(float InFirstDelay); // Function Solarland.SolarGauntletPSOGatherBP.SendTravelToNextLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x27f3c10
	void SendStartLevelScriptEvent(struct FString FunctionName); // Function Solarland.SolarGauntletPSOGatherBP.SendStartLevelScriptEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x27f3b20
};

// Class Solarland.SolarGauntletPSOGatherController
// Size: 0x98 (Inherited: 0x38)
struct USolarGauntletPSOGatherController : USolarGauntletController {
	char pad_38[0x60]; // 0x38(0x60)
};

// Class Solarland.SolarGauntletPureAIDSReportController
// Size: 0x48 (Inherited: 0x38)
struct USolarGauntletPureAIDSReportController : USolarGauntletController {
	char pad_38[0x10]; // 0x38(0x10)
};

// Class Solarland.SolarGauntletReplayController
// Size: 0x40 (Inherited: 0x38)
struct USolarGauntletReplayController : USolarGauntletController {
	char pad_38[0x8]; // 0x38(0x08)

	void OnPostEndPlay(); // Function Solarland.SolarGauntletReplayController.OnPostEndPlay // (Final|Native|Private) // @ game+0x27f3a30
};

// Class Solarland.SolarGauntletServerController
// Size: 0x50 (Inherited: 0x38)
struct USolarGauntletServerController : USolarGauntletController {
	char pad_38[0x18]; // 0x38(0x18)
};

// Class Solarland.SolarGauntletServerSmokeController
// Size: 0x38 (Inherited: 0x38)
struct USolarGauntletServerSmokeController : USolarGauntletController {
};

// Class Solarland.SolarGlobalEventBase
// Size: 0x28 (Inherited: 0x28)
struct USolarGlobalEventBase : UObject {
};

// Class Solarland.SolarGlobalEventSystem
// Size: 0x120 (Inherited: 0x30)
struct USolarGlobalEventSystem : UGameInstanceSubsystem {
	struct TMap<struct USolarGlobalEventBase*, struct FMulticastInlineDelegate> ListenerEventsByClass; // 0x30(0x50)
	struct TMap<struct FName, struct FMulticastInlineDelegate> ListenerEventsByName; // 0x80(0x50)
	struct TMap<struct FGameplayTag, struct FMulticastInlineDelegate> ListenerEventsByGameplayTag; // 0xd0(0x50)

	void UnbindGlobalEventByName(struct FName EventName, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.UnbindGlobalEventByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27f4450
	void UnbindGlobalEventByGameplayTag(struct FGameplayTag EventGameplayTag, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.UnbindGlobalEventByGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27f4360
	void UnbindGlobalEventByClass(struct USolarGlobalEventBase* EventClass, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.UnbindGlobalEventByClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27f4270
	void UnbindAllGlobalEventsByName(struct UObject* Unsubscriber, struct FName EventName); // Function Solarland.SolarGlobalEventSystem.UnbindAllGlobalEventsByName // (Final|Native|Public|BlueprintCallable) // @ game+0x27f41a0
	void UnbindAllGlobalEventsByGameplayTag(struct UObject* Unsubscriber, struct FGameplayTag EventGameplayTag); // Function Solarland.SolarGlobalEventSystem.UnbindAllGlobalEventsByGameplayTag // (Final|Native|Public|BlueprintCallable) // @ game+0x27f40d0
	void UnbindAllGlobalEventsByClass(struct UObject* Unsubscriber, struct USolarGlobalEventBase* EventClass); // Function Solarland.SolarGlobalEventSystem.UnbindAllGlobalEventsByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x27f4000
	void GetAllBoundObjectsToEventByName(struct FName EventName, struct TArray<struct UObject*>& Objects); // Function Solarland.SolarGlobalEventSystem.GetAllBoundObjectsToEventByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27f37b0
	void GetAllBoundObjectsToEventByGameplayTag(struct FGameplayTag EventGameplayTag, struct TArray<struct UObject*>& Objects); // Function Solarland.SolarGlobalEventSystem.GetAllBoundObjectsToEventByGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27f36c0
	void GetAllBoundObjectsToEventByClass(struct USolarGlobalEventBase* EventClass, struct TArray<struct UObject*>& Objects); // Function Solarland.SolarGlobalEventSystem.GetAllBoundObjectsToEventByClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x27f35d0
	void GetAllActiveGlobalEventsClass(struct TArray<struct USolarGlobalEventBase*>& Events); // Function Solarland.SolarGlobalEventSystem.GetAllActiveGlobalEventsClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x27f3520
	void GetAllActiveGlobalEventNames(struct TArray<struct FName>& Events); // Function Solarland.SolarGlobalEventSystem.GetAllActiveGlobalEventNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x27f3470
	void GetAllActiveGlobalEventGameplayTag(struct TArray<struct FGameplayTag>& Events); // Function Solarland.SolarGlobalEventSystem.GetAllActiveGlobalEventGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x27f33c0
	void ClearGlobalEventByName(struct FName EventName, bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearGlobalEventByName // (Final|Native|Public|BlueprintCallable) // @ game+0x27f3270
	void ClearGlobalEventByGameplayTag(struct FGameplayTag EventGameplayTag, bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearGlobalEventByGameplayTag // (Final|Native|Public|BlueprintCallable) // @ game+0x27f31a0
	void ClearGlobalEventByClass(struct USolarGlobalEventBase* EventClass, bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearGlobalEventByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x27f30d0
	void ClearAllGlobalEventsClass(bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearAllGlobalEventsClass // (Final|Native|Public|BlueprintCallable) // @ game+0x27f3040
	void ClearAllGlobalEventNames(bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearAllGlobalEventNames // (Final|Native|Public|BlueprintCallable) // @ game+0x27f2fb0
	void ClearAllGlobalEventGameplayTags(bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearAllGlobalEventGameplayTags // (Final|Native|Public|BlueprintCallable) // @ game+0x27f2f20
	void CallGlobalEventByName(struct UObject* Publisher, struct FName EventName, struct UObject* Payload, struct TArray<struct FString>& MetaData); // Function Solarland.SolarGlobalEventSystem.CallGlobalEventByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27f2d80
	void CallGlobalEventByGameplayTag(struct UObject* Publisher, struct FGameplayTag EventGameplayTag, struct UObject* Payload, struct TArray<struct FString>& MetaData); // Function Solarland.SolarGlobalEventSystem.CallGlobalEventByGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27f2be0
	void CallGlobalEventByClass(struct UObject* Publisher, struct USolarGlobalEventBase* EventClass, struct UObject* Payload, struct TArray<struct FString>& MetaData); // Function Solarland.SolarGlobalEventSystem.CallGlobalEventByClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27f2a40
	void BindGlobalEventByName(struct FName EventName, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.BindGlobalEventByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27f2830
	void BindGlobalEventByGameplayTag(struct FGameplayTag EventGameplayTag, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.BindGlobalEventByGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27f2740
	void BindGlobalEventByClass(struct USolarGlobalEventBase* EventClass, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.BindGlobalEventByClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x27f2650
};

// Class Solarland.SolarGlobalRepInfo
// Size: 0x360 (Inherited: 0x228)
struct ASolarGlobalRepInfo : AInfo {
	struct FSolarShieldItemShopDataArray ShieldItemShopInteractInfo; // 0x228(0x130)
	int32_t ShieldUpgradeItemShopGroupID; // 0x358(0x04)
	char pad_35C[0x4]; // 0x35c(0x04)

	void OnRep_ShieldUpgradeItemShopGroupID(); // Function Solarland.SolarGlobalRepInfo.OnRep_ShieldUpgradeItemShopGroupID // (Final|Native|Public) // @ game+0x27f3a70
	void OnRep_ShieldItemShopInteractInfo(); // Function Solarland.SolarGlobalRepInfo.OnRep_ShieldItemShopInteractInfo // (Final|Native|Public) // @ game+0x27f3a50
};

// Class Solarland.SolarPostProcessSettingItem
// Size: 0x1770 (Inherited: 0x28)
struct USolarPostProcessSettingItem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FColorGradingItem ColorGradingItem[0x4]; // 0x30(0x1740)

	void SetPostSettingsByIndex(int32_t Index, struct FPostProcessSettings PPSettings); // Function Solarland.SolarPostProcessSettingItem.SetPostSettingsByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x27f3d90
	struct FPostProcessSettings GetPostSettingsByIndex(int32_t Index); // Function Solarland.SolarPostProcessSettingItem.GetPostSettingsByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x27f38a0
};

// Class Solarland.SolarGraphicSettings
// Size: 0x2e8 (Inherited: 0x28)
struct USolarGraphicSettings : UObject {
	uint32_t CurrentActiveColorThemeIndex; // 0x28(0x04)
	struct FFrameRateLevelItem FrameRateLevelItem[0x5]; // 0x2c(0x50)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct TMap<enum class ESolarGraphicsQualityLevel, enum class ESolarFrameRateLevel> DefaultQualityToDefaultFrameRateLevel; // 0x80(0x50)
	struct TMap<enum class ESolarGraphicsQualityLevel, struct FMaxQualityConfig> DefaultAndCurQualityToMaxFrameRateLevel; // 0xd0(0x50)
	int32_t MobileMaxFrameRate; // 0x120(0x04)
	int32_t HighRefreshRateThreshold; // 0x124(0x04)
	int32_t DefaultMSAALevel; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct FContentScaleFactorLevelItem ContentScaleFactorLevelItems[0x4]; // 0x130(0x160)
	struct TMap<enum class ESolarDeviceLevel, enum class ESolarContentScaleFactorLevel> DefaultContentScaleFactorLevel; // 0x290(0x50)
	char pad_2E0[0x8]; // 0x2e0(0x08)
};

// Class Solarland.SolarGroundPreviewActor
// Size: 0x4a0 (Inherited: 0x228)
struct ASolarGroundPreviewActor : ASolarDormantActor {
	char pad_228[0x48]; // 0x228(0x48)
	struct FSolarItemData ItemData; // 0x270(0xb8)
	float SpawnOffset; // 0x328(0x04)
	char pad_32C[0x4]; // 0x32c(0x04)
	struct USphereComponent* SphereComponent; // 0x330(0x08)
	struct TArray<struct FSoftObjectPath> DiscardMatPath; // 0x338(0x10)
	struct FSoftObjectPath OutlineMatPath; // 0x348(0x18)
	char pad_360[0x8]; // 0x360(0x08)
	struct TArray<char> MarkedTeamIdList; // 0x368(0x10)
	int32_t WeaponLevel; // 0x378(0x04)
	enum class EWeaponType WeaponType; // 0x37c(0x01)
	char pad_37D[0x3]; // 0x37d(0x03)
	int32_t FireModeNameLocalizationID; // 0x380(0x04)
	char pad_384[0xc]; // 0x384(0x0c)
	struct FSlateBrush TriggerIcon; // 0x390(0xe0)
	int32_t weaponid; // 0x470(0x04)
	bool bIsItemWeapon; // 0x474(0x01)
	bool bIsSummonVehicleWeapon; // 0x475(0x01)
	bool bIsAntiVehicleWeapon; // 0x476(0x01)
	char pad_477[0x1]; // 0x477(0x01)
	struct USkeletalMeshComponent* SkeletalMeshComp; // 0x478(0x08)
	struct USolarItemBurstShowComponent* BurstShowComponent; // 0x480(0x08)
	char pad_488[0x8]; // 0x488(0x08)
	struct FSolarLandscapeListenerConfig LandscapeListenerConfig; // 0x490(0x10)

	void UnMarkThisItem(char TeamID); // Function Solarland.SolarGroundPreviewActor.UnMarkThisItem // (Native|Public) // @ game+0x27f3f70
	void SetItemData(struct FSolarItemData& _ItemData); // Function Solarland.SolarGroundPreviewActor.SetItemData // (Native|Public|HasOutParms) // @ game+0x27f3c90
	void OnRep_ItemDataChange(); // Function Solarland.SolarGroundPreviewActor.OnRep_ItemDataChange // (Native|Public) // @ game+0x1ae6410
	void NotifyThisItemWasPickedUp(); // Function Solarland.SolarGroundPreviewActor.NotifyThisItemWasPickedUp // (Final|Native|Public) // @ game+0x27f3a10
	void MarkThisItem(char TeamID); // Function Solarland.SolarGroundPreviewActor.MarkThisItem // (Native|Public) // @ game+0x27f3980
	int32_t GetQuality(); // Function Solarland.SolarGroundPreviewActor.GetQuality // (Native|Public) // @ game+0x27f3940
};

// Class Solarland.SolarHealAndArmorPile
// Size: 0x670 (Inherited: 0x550)
struct ASolarHealAndArmorPile : ASolarPile {
	float HealQuantity; // 0x548(0x04)
	float HealFrequency; // 0x54c(0x04)
	struct UMaterialInstanceDynamic* DynamicMatHealPile; // 0x550(0x08)
	float MaterialDynamicOffSetYBegin; // 0x558(0x04)
	float MaterialDynamicOffSetYEnd; // 0x55c(0x04)
	float MaterialDynamicOffSetYCur; // 0x560(0x04)
	struct UUserWidget* FullEffectWidgetClass; // 0x568(0x08)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleStartPath; // 0x570(0x28)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleLoopPath; // 0x598(0x28)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleEndPath; // 0x5c0(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleStartPath; // 0x5e8(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleLoopPath; // 0x610(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleEndPath; // 0x638(0x28)
	struct UParticleSystemComponent* RangeLoopEffect; // 0x660(0x08)
	char pad_66C[0x4]; // 0x66c(0x04)

	void ClientHealPileSound(struct ASolarCharacter* ChargingCharacter, enum class EPileHealingType HealingType); // Function Solarland.SolarHealAndArmorPile.ClientHealPileSound // (Net|Native|Event|NetMulticast|Protected|NetClient) // @ game+0x27f9ee0
};

// Class Solarland.SolarHealthPointModule
// Size: 0x28 (Inherited: 0x28)
struct USolarHealthPointModule : UBlueprintFunctionLibrary {

	void InitCharacterHealth(struct ASolarCharacter* InCharacter, float InHealth); // Function Solarland.SolarHealthPointModule.InitCharacterHealth // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x27fb870
	void InflictDamageWithHitResult(struct UObject* WorldContextObject, struct FSolarDamageInfo& DamageInfo, struct FHitResult& HitResult); // Function Solarland.SolarHealthPointModule.InflictDamageWithHitResult // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27fb700
	void InflictDamageWithDamageEvent(struct AActor* TargetActor, float DamageTaken, struct FSolarPointDamageEvent& DamageEvent, struct AController* InstigatorController); // Function Solarland.SolarHealthPointModule.InflictDamageWithDamageEvent // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x27fb560
};

// Class Solarland.SolarHitTraceActor
// Size: 0x288 (Inherited: 0x228)
struct ASolarHitTraceActor : AActor {
	struct FHitTraceInfo HitTraceInfo; // 0x228(0x28)
	float RadiusValue; // 0x250(0x04)
	float HeightValue; // 0x254(0x04)
	float RadiusValueWithCameraSphere; // 0x258(0x04)
	float DistanceFromCamera; // 0x25c(0x04)
	float RestrictedZoneRadius; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
	struct ASolarCharacter* CharacterOwner; // 0x268(0x08)
	struct UCurveFloat* HitDistanceOffsetCurve; // 0x270(0x08)
	struct UCurveFloat* HitPitchVerticalValueCurve; // 0x278(0x08)
	struct UCurveFloat* HitPitchHorizontalValueCurve; // 0x280(0x08)

	void UpdateTraceActor(); // Function Solarland.SolarHitTraceActor.UpdateTraceActor // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarHitTraceComponent
// Size: 0xd8 (Inherited: 0xb0)
struct USolarHitTraceComponent : UActorComponent {
	char pad_B0[0x10]; // 0xb0(0x10)
	struct ASolarCharacter* CharacterOwner; // 0xc0(0x08)
	struct TArray<struct ASolarHitTraceActor*> CreatedHitTraceActors; // 0xc8(0x10)

	void OnHitTraceActorDestroyed(struct AActor* Actor); // Function Solarland.SolarHitTraceComponent.OnHitTraceActorDestroyed // (Final|Native|Protected) // @ game+0x27fbeb0
	void OnCharacterTakeDamage(struct FHitTraceInfo& HitTraceInfo); // Function Solarland.SolarHitTraceComponent.OnCharacterTakeDamage // (Final|Native|Public|HasOutParms) // @ game+0x27fbbf0
};

// Class Solarland.SolarHomeConnectedGraph
// Size: 0xd0 (Inherited: 0x28)
struct USolarHomeConnectedGraph : UObject {
	struct TSet<struct ASolarHomeActor*> ConnectedFloors; // 0x28(0x50)
	struct TSet<struct ASolarHomeActor*> BaseWalls; // 0x78(0x50)
	char pad_C8[0x8]; // 0xc8(0x08)
};

// Class Solarland.SolarHomeActor
// Size: 0x3c0 (Inherited: 0x228)
struct ASolarHomeActor : AActor {
	struct UStaticMeshComponent* StaticMeshComp; // 0x228(0x08)
	struct FHomeActorStaticData HomeActorStaticData; // 0x230(0x38)
	struct FHomeActorServerData HomeActorServerData; // 0x268(0x68)
	struct TMap<struct FName, struct FHomeOriginalShader> OriginalShaders; // 0x2d0(0x50)
	char pad_320[0x10]; // 0x320(0x10)
	struct USolarHomeActorManager* HomeActorMgr; // 0x330(0x08)
	struct TArray<struct UBoxComponent*> BoxComps; // 0x338(0x10)
	struct TMap<struct ASolarHomeActor*, int32_t> HitHomeActors; // 0x348(0x50)
	struct USolarHomeConnectedGraph* CurrentConnectedGraph; // 0x398(0x08)
	struct TArray<struct ASolarHomeActor*> NeighborFloors; // 0x3a0(0x10)
	struct TArray<struct ASolarHomeActor*> NeighborWalls; // 0x3b0(0x10)

	void UpdateHomeActor(struct FHomeActorServerData& NewServerData); // Function Solarland.SolarHomeActor.UpdateHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x27fd810
	void UpdateHitHomeActors(struct ASolarHomeActor* NewActor, bool isAdd); // Function Solarland.SolarHomeActor.UpdateHitHomeActors // (Final|Native|Private) // @ game+0x27fd740
	void SetStaticData(struct FHomeActorStaticData& NewData); // Function Solarland.SolarHomeActor.SetStaticData // (Final|Native|Protected|HasOutParms) // @ game+0x27fce20
	void SetServerData(struct FHomeActorServerData& NewData); // Function Solarland.SolarHomeActor.SetServerData // (Final|Native|Protected|HasOutParms) // @ game+0x27fcca0
	void SetMaterial(struct FHomeActorServerData& InServerData, bool bPlaceable); // Function Solarland.SolarHomeActor.SetMaterial // (Final|Native|Protected|HasOutParms) // @ game+0x27fcad0
	void OnOverlayEnd(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarHomeActor.OnOverlayEnd // (Final|Native|Private) // @ game+0x27fc300
	void OnOverlayBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarHomeActor.OnOverlayBegin // (Final|Native|Private|HasOutParms) // @ game+0x27fc0e0
	void OnOverLap(struct AActor* OtherActor, bool isHitBegin); // Function Solarland.SolarHomeActor.OnOverLap // (Final|Native|Private) // @ game+0x27fc010
	void OnCreatedByServer(struct FHomeActorStaticData& NewStaticData, struct FHomeActorServerData& NewServerData); // Function Solarland.SolarHomeActor.OnCreatedByServer // (Final|Native|Public|HasOutParms) // @ game+0x27fbca0
	void OnCanSaveChanged(bool bNewCanSave); // Function Solarland.SolarHomeActor.OnCanSaveChanged // (Final|Native|Private) // @ game+0x27fbb60
	struct UDataTable* GetTextureDataTable(); // Function Solarland.SolarHomeActor.GetTextureDataTable // (Final|Native|Private) // @ game+0x27fb4d0
	struct UStaticMeshComponent* GetStaticMeshComp(); // Function Solarland.SolarHomeActor.GetStaticMeshComp // (Final|Native|Public) // @ game+0x1cbf3d0
	struct FHomeActorStaticData GetStaticData(); // Function Solarland.SolarHomeActor.GetStaticData // (Final|Native|Public|Const) // @ game+0x27fb300
	struct USolarHomeShaderConfig* GetShaderConfig(); // Function Solarland.SolarHomeActor.GetShaderConfig // (Final|Native|Private) // @ game+0x27fb2a0
	struct FHomeActorServerData GetServerData(); // Function Solarland.SolarHomeActor.GetServerData // (Final|Native|Public|Const) // @ game+0x27fb270
	bool GetNextLegalRotator(float RotAngle, struct FRotator& OutNextRot); // Function Solarland.SolarHomeActor.GetNextLegalRotator // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x27fb180
	enum class EHomeActorSurfaceDir GetHitSurface(struct FVector& HitNormal); // Function Solarland.SolarHomeActor.GetHitSurface // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x27fa790
	bool GetCanSave(); // Function Solarland.SolarHomeActor.GetCanSave // (Final|Native|Public) // @ game+0x27fa670
	bool CanSelected(); // Function Solarland.SolarHomeActor.CanSelected // (Final|Native|Public) // @ game+0x27f9a60
	bool CanRemove(); // Function Solarland.SolarHomeActor.CanRemove // (Final|Native|Public) // @ game+0x27f9a30
};

// Class Solarland.SolarHomeActorManager
// Size: 0x650 (Inherited: 0x28)
struct USolarHomeActorManager : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	struct TMap<struct FString, struct ASolarHomeActor*> SpawnedHomeActors; // 0x40(0x50)
	struct TMap<struct FIntVector, struct ASolarHomeActor*> SpawnedConstructsLocKey; // 0x90(0x50)
	struct TMap<struct FIntVector, struct ASolarHomeActor*> PreviewConstructsLocKey; // 0xe0(0x50)
	struct TSet<struct USolarHomeConnectedGraph*> ConnectedGraphSet; // 0x130(0x50)
	struct TMap<struct FString, struct ASolarHomeActor*> ClippingHomeActors; // 0x180(0x50)
	struct TMap<struct FString, struct ASolarHomeActor*> InValidHomeActors; // 0x1d0(0x50)
	struct TMap<struct FString, struct USubPoolOfHomeActor*> HomeActorPools; // 0x220(0x50)
	struct TMap<int32_t, struct FHomeActorStaticData> StaticDataMap; // 0x270(0x50)
	struct TMap<struct FString, struct UObject*> HomeActorClassPool; // 0x2c0(0x50)
	char pad_310[0x68]; // 0x310(0x68)
	struct TMap<struct FIntVector, struct ASolarHomeBaseSpace*> SpawnedSpacesLocKey; // 0x378(0x50)
	struct TMap<struct FIntVector, struct ASolarHomeBaseSpace*> ShowsSpacesLocKey; // 0x3c8(0x50)
	char pad_418[0x58]; // 0x418(0x58)
	struct UDataTable* HomeObjectTable; // 0x470(0x08)
	struct USolarHomeShaderConfig* ShaderConfig; // 0x478(0x08)
	struct UDataTable* TextureDataTable; // 0x480(0x08)
	struct UDataTable* IconDataTable; // 0x488(0x08)
	struct UDataTable* PicDataTable; // 0x490(0x08)
	int32_t BuildCountPerFrame; // 0x498(0x04)
	char pad_49C[0x14]; // 0x49c(0x14)
	struct ASolarHomeSpaceSpawner* HomeSpaceSpawner; // 0x4b0(0x08)
	struct ASolarHomePlayerController* HomePlayerCtrl; // 0x4b8(0x08)
	char pad_4C0[0x20]; // 0x4c0(0x20)
	struct ASolarWaterActorNew* WaterActor; // 0x4e0(0x08)
	struct TMap<struct FHomeShaderData, struct UMaterialInstanceDynamic*> HomeObjShadersPool; // 0x4e8(0x50)
	char pad_538[0x41]; // 0x538(0x41)
	bool bIsConstruct; // 0x579(0x01)
	bool IsLoadingOpen; // 0x57a(0x01)
	char pad_57B[0x2d]; // 0x57b(0x2d)
	struct TSet<struct ASolarHomeDragUI*> CacheDragUIs; // 0x5a8(0x50)
	struct TSet<struct ASolarHomeDragUI*> UsedDragUIs; // 0x5f8(0x50)
	char pad_648[0x8]; // 0x648(0x08)

	void UpdateCanSendSaveMsg(); // Function Solarland.SolarHomeActorManager.UpdateCanSendSaveMsg // (Final|Native|Private) // @ game+0x27fd720
	void UpdateCameraLayer(int32_t NewLayer); // Function Solarland.SolarHomeActorManager.UpdateCameraLayer // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool TrySelectHomeActor(struct FString& SelectedThisID, bool bSelect); // Function Solarland.SolarHomeActorManager.TrySelectHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x27fd620
	bool TrySaveAllHomeActors(); // Function Solarland.SolarHomeActorManager.TrySaveAllHomeActors // (Final|Native|Public) // @ game+0x27fd5f0
	void TryResetAllHomeActors(); // Function Solarland.SolarHomeActorManager.TryResetAllHomeActors // (Final|Native|Public) // @ game+0x27fd5d0
	void TryRemoveHomeActors(struct TArray<struct FString>& RemoveThisID); // Function Solarland.SolarHomeActorManager.TryRemoveHomeActors // (Final|Native|Public|HasOutParms) // @ game+0x27fd500
	void TryRemoveHomeActor(struct FString& RemoveThisID); // Function Solarland.SolarHomeActorManager.TryRemoveHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x27fd450
	void TryRemoveAllInvalidHomeActors(); // Function Solarland.SolarHomeActorManager.TryRemoveAllInvalidHomeActors // (Final|Native|Public) // @ game+0x27fd430
	void TryRemoveAllHomeActors(); // Function Solarland.SolarHomeActorManager.TryRemoveAllHomeActors // (Final|Native|Public) // @ game+0x27fd410
	void TryDyeHomeActor(struct FString& DyeThisID, struct FString& SlotName, struct FString& TexturesID); // Function Solarland.SolarHomeActorManager.TryDyeHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x27fd290
	void TryCreateHomeActorsNoLimit(struct TArray<struct FHomeBuildReqData>& ReqDataArr); // Function Solarland.SolarHomeActorManager.TryCreateHomeActorsNoLimit // (Final|Native|Public|HasOutParms) // @ game+0x27fd1b0
	void TryCreateHomeActors(struct TArray<struct FHomeBuildReqData>& ReqData); // Function Solarland.SolarHomeActorManager.TryCreateHomeActors // (Final|Native|Public|HasOutParms) // @ game+0x27fd0d0
	void TryCreateHomeActor(struct FHomeBuildReqData& ReqData); // Function Solarland.SolarHomeActorManager.TryCreateHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x27fcfa0
	void TryConfirmHomeActor(struct FString& SelectedThisID, bool bCancel); // Function Solarland.SolarHomeActorManager.TryConfirmHomeActor // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void TryCancelHomeActor(struct FString& SelectedThisID); // Function Solarland.SolarHomeActorManager.TryCancelHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x27fcef0
	void SetLastSelectingThisID(struct FString& InThisID); // Function Solarland.SolarHomeActorManager.SetLastSelectingThisID // (Final|Native|Public|HasOutParms) // @ game+0x27fca20
	void SetLastCreateThisID(struct FString& InThisID); // Function Solarland.SolarHomeActorManager.SetLastCreateThisID // (Final|Native|Public|HasOutParms) // @ game+0x27fc970
	void SetIsConstruct(bool bNewConstruct); // Function Solarland.SolarHomeActorManager.SetIsConstruct // (Final|Native|Public) // @ game+0x27fc8e0
	void SetHomeActorValid(struct ASolarHomeActor* TargetActor, bool bNewValid); // Function Solarland.SolarHomeActorManager.SetHomeActorValid // (Final|Native|Public) // @ game+0x27fc810
	void SetHoldingType(enum class EHomeActor_SecondType NewType); // Function Solarland.SolarHomeActorManager.SetHoldingType // (Final|Native|Public) // @ game+0x27fc780
	void SetDragUILoc(struct ASolarHomeDragUI* TargetUI, struct FVector& NewLoc); // Function Solarland.SolarHomeActorManager.SetDragUILoc // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x27fc6b0
	void SetCurSelectingThisID(struct FString& InThisID, bool bSelected); // Function Solarland.SolarHomeActorManager.SetCurSelectingThisID // (Final|Native|Public|HasOutParms) // @ game+0x27fc5b0
	void SetCurBuildingID(int32_t NewItemID); // Function Solarland.SolarHomeActorManager.SetCurBuildingID // (Final|Native|Public) // @ game+0x27fc520
	void SelectHomeActor_Request(struct FString& SelectedThisID, bool bSelect); // Function Solarland.SolarHomeActorManager.SelectHomeActor_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void SelectHomeActor_Other(struct FString ThisID); // Function Solarland.SolarHomeActorManager.SelectHomeActor_Other // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SaveBuilding_Request(bool bSave); // Function Solarland.SolarHomeActorManager.SaveBuilding_Request // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RotateHomeActor(struct ASolarHomeActor* TargetHomeActor, int32_t DeltaAngle); // Function Solarland.SolarHomeActorManager.RotateHomeActor // (Final|Native|Public) // @ game+0x27fc450
	void RemoveHomeActors_Request(struct TArray<struct FString>& WillRemoveThisIDs); // Function Solarland.SolarHomeActorManager.RemoveHomeActors_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void RemoveHomeActor_Request(struct FString& WillRemoveThisID); // Function Solarland.SolarHomeActorManager.RemoveHomeActor_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void RemoveAllHomeActors_Request(); // Function Solarland.SolarHomeActorManager.RemoveAllHomeActors_Request // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnSelectingThisIDChanged(bool bSelect, struct FString& NewThisID); // Function Solarland.SolarHomeActorManager.OnSelectingThisIDChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnSelectingActorCanSaveChanged(bool bNewCanSave); // Function Solarland.SolarHomeActorManager.OnSelectingActorCanSaveChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool OnIsDragChanged(bool bIsDrag); // Function Solarland.SolarHomeActorManager.OnIsDragChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnInvalidActorsCountChanged(int32_t NewCount); // Function Solarland.SolarHomeActorManager.OnInvalidActorsCountChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnHoldingTypeChanged(enum class EHomeActor_SecondType OldType, enum class EHomeActor_SecondType NewType); // Function Solarland.SolarHomeActorManager.OnHoldingTypeChanged // (Final|Native|Public) // @ game+0x27fbf40
	void NotifyWhenWallDevicePutOnOtherPlace(); // Function Solarland.SolarHomeActorManager.NotifyWhenWallDevicePutOnOtherPlace // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void NotifyWhenFloorDevicePutOnOtherPlace(); // Function Solarland.SolarHomeActorManager.NotifyWhenFloorDevicePutOnOtherPlace // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void NotifyWhenClickActorOnOtherFloor(); // Function Solarland.SolarHomeActorManager.NotifyWhenClickActorOnOtherFloor // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void NotifyWhenCeilingDevicePutOnOtherPlace(); // Function Solarland.SolarHomeActorManager.NotifyWhenCeilingDevicePutOnOtherPlace // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void NotifyLoadingUIChanged(bool bShow); // Function Solarland.SolarHomeActorManager.NotifyLoadingUIChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void MoveDevice(struct ASolarHomeActor* TargetHomeActor, struct ASolarHomeActor* ParHomeActor, enum class EHomeActorSurfaceDir HitDir, struct FVector& NewLoc); // Function Solarland.SolarHomeActorManager.MoveDevice // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x27fba00
	void MoveConstruct(struct ASolarHomeActor* TargetHomeActor, struct ASolarHomeBaseSpace* NewSpace); // Function Solarland.SolarHomeActorManager.MoveConstruct // (Final|Native|Public) // @ game+0x27fb930
	bool HasFoundation(); // Function Solarland.SolarHomeActorManager.HasFoundation // (Final|Native|Public) // @ game+0x27fb530
	struct UDataTable* GetTextureDataTable(); // Function Solarland.SolarHomeActorManager.GetTextureDataTable // (Final|Native|Public) // @ game+0x27fb500
	struct FHomeActorStaticData GetStaticDataByItemID(int32_t ItemID); // Function Solarland.SolarHomeActorManager.GetStaticDataByItemID // (Final|Native|Public) // @ game+0x27fb380
	struct USolarHomeShaderConfig* GetShaderConfig(); // Function Solarland.SolarHomeActorManager.GetShaderConfig // (Final|Native|Public) // @ game+0x27fb2d0
	void GetMeshDefaultMat(int64_t InItemID, struct TArray<struct FBuildMeshSlotData>& OutData); // Function Solarland.SolarHomeActorManager.GetMeshDefaultMat // (Final|Native|Public|HasOutParms) // @ game+0x27fb060
	struct FString GetLastCreateThisID(); // Function Solarland.SolarHomeActorManager.GetLastCreateThisID // (Final|Native|Public|Const) // @ game+0x27fafa0
	int32_t GetInvalidActorsCount(); // Function Solarland.SolarHomeActorManager.GetInvalidActorsCount // (Final|Native|Public) // @ game+0x27faf80
	struct ASolarHomeSpaceSpawner* GetHomeSpaceSpawner(); // Function Solarland.SolarHomeActorManager.GetHomeSpaceSpawner // (Final|Native|Public) // @ game+0x27faf50
	struct ASolarHomePlayerController* GetHomePlayerCtrl(); // Function Solarland.SolarHomeActorManager.GetHomePlayerCtrl // (Final|Native|Public) // @ game+0x27faf20
	bool GetHomePicConfig(struct FString Name, struct FHomePic& OutConfig); // Function Solarland.SolarHomeActorManager.GetHomePicConfig // (Final|Native|Public|HasOutParms) // @ game+0x27fadb0
	bool GetHomeObjectConfig(int32_t InItemID, struct FHomeObject& OutConfig); // Function Solarland.SolarHomeActorManager.GetHomeObjectConfig // (Final|Native|Public|HasOutParms) // @ game+0x27fac30
	bool GetHomeIconConfig(struct FString Name, struct FHomeIcon& OutConfig); // Function Solarland.SolarHomeActorManager.GetHomeIconConfig // (Final|Native|Public|HasOutParms) // @ game+0x27faaa0
	enum class EHomeActor_SecondType GetHomeActorSecondType(int32_t ItemID); // Function Solarland.SolarHomeActorManager.GetHomeActorSecondType // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	enum class EHomeActor_FirstType GetHomeActorFirstType(int32_t ItemID); // Function Solarland.SolarHomeActorManager.GetHomeActorFirstType // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct ASolarHomeActor* GetHomeActorByThisID(struct FString& InThisID); // Function Solarland.SolarHomeActorManager.GetHomeActorByThisID // (Final|Native|Public|HasOutParms) // @ game+0x27fa9c0
	struct ASolarHomeActor* GetHomeActorByLoc(struct FVector& InLoc); // Function Solarland.SolarHomeActorManager.GetHomeActorByLoc // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x27fa830
	struct FString GetCurSelectingThisID(); // Function Solarland.SolarHomeActorManager.GetCurSelectingThisID // (Final|Native|Public|Const) // @ game+0x27fa6d0
	enum class EHomeActor_SecondType GetCurHoldingItemType(); // Function Solarland.SolarHomeActorManager.GetCurHoldingItemType // (Final|Native|Public|Const) // @ game+0x27fa6b0
	int32_t GetCurBuildingID(); // Function Solarland.SolarHomeActorManager.GetCurBuildingID // (Final|Native|Public|Const) // @ game+0x27fa690
	bool GetActorCanSave(struct ASolarHomeActor* InActor); // Function Solarland.SolarHomeActorManager.GetActorCanSave // (Final|Native|Public) // @ game+0x27fa5d0
	void ExportHomeActorDataToPath(struct FString FilePath); // Function Solarland.SolarHomeActorManager.ExportHomeActorDataToPath // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void DyeingHomeActor_Request(struct FString& WillDyeingThisID, struct FString& SlotName, struct FString& TexturesID); // Function Solarland.SolarHomeActorManager.DyeingHomeActor_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void DeSelectAllHomeActors_Request(); // Function Solarland.SolarHomeActorManager.DeSelectAllHomeActors_Request // (Final|Native|Public) // @ game+0x27fa5b0
	void CreateHomeActors_Request(struct TArray<struct FHomeBuildReqData>& WillCreateDatas); // Function Solarland.SolarHomeActorManager.CreateHomeActors_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void CreateHomeActor_Request(struct FHomeBuildReqData& WillCreateData); // Function Solarland.SolarHomeActorManager.CreateHomeActor_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ClientUpdateHomeActor_UseQueue(struct FHomeActorServerData& UpdateData); // Function Solarland.SolarHomeActorManager.ClientUpdateHomeActor_UseQueue // (Final|Native|Public|HasOutParms) // @ game+0x27fa430
	void ClientUpdateHomeActor(struct FHomeActorServerData& UpdateData); // Function Solarland.SolarHomeActorManager.ClientUpdateHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x27fa2b0
	void ClientRemoveHomeActor_UseQueue(struct FHomeActorServerData& RemoveData); // Function Solarland.SolarHomeActorManager.ClientRemoveHomeActor_UseQueue // (Final|Native|Public|HasOutParms) // @ game+0x27fa130
	void ClientRemoveHomeActor(struct FHomeActorServerData& RemoveData); // Function Solarland.SolarHomeActorManager.ClientRemoveHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x27f9fb0
	void ClientCreateHomeActor_UseQueue(struct FHomeActorServerData& WillCreateData, enum class EHomeLoadingChangeType InLoadingType); // Function Solarland.SolarHomeActorManager.ClientCreateHomeActor_UseQueue // (Final|Native|Public|HasOutParms) // @ game+0x27f9d20
	bool ClientCreateHomeActor(struct FHomeActorServerData& WillCreateData, bool InIsConstruct); // Function Solarland.SolarHomeActorManager.ClientCreateHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x27f9b40
	void Clear(); // Function Solarland.SolarHomeActorManager.Clear // (Final|Native|Public) // @ game+0x27f9b20
	void ChangeCameraLayer(int32_t DeltaLayer); // Function Solarland.SolarHomeActorManager.ChangeCameraLayer // (Final|Native|Public) // @ game+0x27f9a90
	bool CanPreviewWithBuilding(int32_t TypeID); // Function Solarland.SolarHomeActorManager.CanPreviewWithBuilding // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool CanDevicePlace(enum class EHomeActor_SecondType DeviceType, struct ASolarHomeActor*& HitConstruct, enum class EHomeActorSurfaceDir& HitDir); // Function Solarland.SolarHomeActorManager.CanDevicePlace // (Final|Native|Public|HasOutParms) // @ game+0x27f9910
};

// Class Solarland.SolarHomeBaseSpace
// Size: 0x250 (Inherited: 0x228)
struct ASolarHomeBaseSpace : AActor {
	struct USolarHomeActorManager* HomeActorMgr; // 0x228(0x08)
	struct TArray<struct UBoxComponent*> BoxComps; // 0x230(0x10)
	struct FBaseSpaceData BaseSpaceData; // 0x240(0x0c)
	char pad_24C[0x4]; // 0x24c(0x04)

	void UpdateHomeSpaceByData(struct FBaseSpaceData& NewData); // Function Solarland.SolarHomeBaseSpace.UpdateHomeSpaceByData // (Final|Native|Protected|HasOutParms) // @ game+0x2801ea0
	void ShowBaseSpace(); // Function Solarland.SolarHomeBaseSpace.ShowBaseSpace // (Final|Native|Public) // @ game+0x2801de0
	void OnBaseSpaceUnOccupied(); // Function Solarland.SolarHomeBaseSpace.OnBaseSpaceUnOccupied // (Final|Native|Public) // @ game+0x28016c0
	void OnBaseSpaceOccupied(); // Function Solarland.SolarHomeBaseSpace.OnBaseSpaceOccupied // (Final|Native|Public) // @ game+0x28016a0
	void OnBaseSpaceCreated(int32_t Layer, enum class EHomeActor_SecondType BaseSpaceType); // Function Solarland.SolarHomeBaseSpace.OnBaseSpaceCreated // (Final|Native|Public) // @ game+0x28015d0
	void HideBaseSpace(); // Function Solarland.SolarHomeBaseSpace.HideBaseSpace // (Final|Native|Public) // @ game+0x28010f0
	struct FBaseSpaceData GetData(); // Function Solarland.SolarHomeBaseSpace.GetData // (Final|Native|Public|Const) // @ game+0x2800eb0
};

// Class Solarland.SolarHomeBuildComponent
// Size: 0xe0 (Inherited: 0xb0)
struct USolarHomeBuildComponent : UActorComponent {
	char pad_B0[0x10]; // 0xb0(0x10)
	struct USolarHomeActorManager* HomeActorMgr; // 0xc0(0x08)
	float MinCheckDistance; // 0xc8(0x04)
	float MaxCheckDistance; // 0xcc(0x04)
	bool IsBuilding; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	int32_t HoldingItemID; // 0xd4(0x04)
	struct ASolarHomeBaseSpace* HittingActor; // 0xd8(0x08)

	void StopBuild(); // Function Solarland.SolarHomeBuildComponent.StopBuild // (Final|Native|Public) // @ game+0x2801e60
	void StartBuild(); // Function Solarland.SolarHomeBuildComponent.StartBuild // (Final|Native|Public) // @ game+0x2801e00
	void SetBuildingId(int32_t NewItemID); // Function Solarland.SolarHomeBuildComponent.SetBuildingId // (Final|Native|Public) // @ game+0x2801cd0
	void SelecteHomeActor(struct ASolarHomeActor* WillSelectedActor); // Function Solarland.SolarHomeBuildComponent.SelecteHomeActor // (Final|Native|Protected) // @ game+0x2801c40
	void InitHomeBuildComponent(); // Function Solarland.SolarHomeBuildComponent.InitHomeBuildComponent // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct ASolarCharacter* GetSolarOwner(); // Function Solarland.SolarHomeBuildComponent.GetSolarOwner // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x28010c0
	void GetHitResult(struct ASolarHomeActor*& HitHomeActor, struct ASolarHomeBaseSpace*& HitBaseSapce, struct FVector& OutHitNormal, struct FVector& OutHitLocation); // Function Solarland.SolarHomeBuildComponent.GetHitResult // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2800ee0
	void EndBuild(); // Function Solarland.SolarHomeBuildComponent.EndBuild // (Final|Native|Protected) // @ game+0x2800e60
	void EmitBuilding(); // Function Solarland.SolarHomeBuildComponent.EmitBuilding // (Final|Native|Public) // @ game+0x2800e40
	void CreateHomeActor(struct FHomeBuildReqData& ReqData); // Function Solarland.SolarHomeBuildComponent.CreateHomeActor // (Final|Native|Protected|HasOutParms) // @ game+0x2800d10
	bool CanAttachSpace(int32_t ActorId, struct ASolarHomeBaseSpace* WillAttachHomeSpace); // Function Solarland.SolarHomeBuildComponent.CanAttachSpace // (Final|Native|Protected) // @ game+0x28008e0
	void BeginBuild(); // Function Solarland.SolarHomeBuildComponent.BeginBuild // (Final|Native|Protected) // @ game+0x2800860
};

// Class Solarland.SolarHomeCameraManager
// Size: 0x250 (Inherited: 0xb0)
struct USolarHomeCameraManager : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FCameraMovementParameters CameraMovementSetting; // 0xb8(0x68)
	char pad_120[0x14]; // 0x120(0x14)
	struct FVector LookAtLocation; // 0x134(0x0c)
	struct USolarHomeActorManager* HomeActorMgr; // 0x140(0x08)
	char pad_148[0x8]; // 0x148(0x08)
	struct ASolarHomeSpaceSpawner* CacheHomeSpaceSpawner; // 0x150(0x08)
	struct ACameraActor* BuildCamera; // 0x158(0x08)
	struct AActor* BattleCamera; // 0x160(0x08)
	struct UCameraComponent* BuildCameraComp; // 0x168(0x08)
	char pad_170[0xe0]; // 0x170(0xe0)

	void UpdateSliderScaleUI(float InScale); // Function Solarland.SolarHomeCameraManager.UpdateSliderScaleUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void UpdateCameraDistanceUI(float InPercent, float InScale); // Function Solarland.SolarHomeCameraManager.UpdateCameraDistanceUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetNormalCameraTarget(); // Function Solarland.SolarHomeCameraManager.SetNormalCameraTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2801dc0
	void SetConstructionCameraTarget(); // Function Solarland.SolarHomeCameraManager.SetConstructionCameraTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2801d80
	void RotateCameraSpin(float Value); // Function Solarland.SolarHomeCameraManager.RotateCameraSpin // (Final|Native|Public|BlueprintCallable) // @ game+0x2801bc0
	void RotateCameraPitch(float Value); // Function Solarland.SolarHomeCameraManager.RotateCameraPitch // (Final|Native|Public|BlueprintCallable) // @ game+0x2801b40
	void MoveCameraRight(float Value); // Function Solarland.SolarHomeCameraManager.MoveCameraRight // (Final|Native|Public|BlueprintCallable) // @ game+0x28014c0
	void MoveCameraForward(float Value); // Function Solarland.SolarHomeCameraManager.MoveCameraForward // (Final|Native|Public|BlueprintCallable) // @ game+0x2801440
	void MoveCamera(int32_t Index, struct FVector& Location, struct TMap<int32_t, struct FVector> FingerLocations); // Function Solarland.SolarHomeCameraManager.MoveCamera // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x28011e0
	bool ChangeCameraMode(enum class EHomeCameraMode InMode); // Function Solarland.SolarHomeCameraManager.ChangeCameraMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2800b50
	void ChangeCameraDistancePercent(bool IsDoubleFinger, float InPercent); // Function Solarland.SolarHomeCameraManager.ChangeCameraDistancePercent // (Final|Native|Public) // @ game+0x2800a80
	void ChangeCameraDistanceDiff(bool IsDoubleFinger, float InValue); // Function Solarland.SolarHomeCameraManager.ChangeCameraDistanceDiff // (Final|Native|Public) // @ game+0x28009b0
};

// Class Solarland.SolarHomeCharacter
// Size: 0x22e0 (Inherited: 0x22e0)
struct ASolarHomeCharacter : ASolarCharacter {
	struct USolarHomeBuildComponent* SolarHomeBuildComponent; // 0x22d8(0x08)

	void MoveToBuildWait(struct FVector& WaitLoc); // Function Solarland.SolarHomeCharacter.MoveToBuildWait // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2801540
	void CharacterResetOfflinePos(struct FVector& Loc, uint32_t Roll, uint32_t yawPitch); // Function Solarland.SolarHomeCharacter.CharacterResetOfflinePos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2800be0
	void Building(); // Function Solarland.SolarHomeCharacter.Building // (Final|Native|Public) // @ game+0x28008c0
};

// Class Solarland.SolarHomeDragUI
// Size: 0x240 (Inherited: 0x228)
struct ASolarHomeDragUI : AActor {
	char pad_228[0x18]; // 0x228(0x18)
};

// Class Solarland.SolarHomeFloorActor
// Size: 0x3c0 (Inherited: 0x3c0)
struct ASolarHomeFloorActor : ASolarHomeActor {
};

// Class Solarland.SolarHomeMeshConfig
// Size: 0x80 (Inherited: 0x30)
struct USolarHomeMeshConfig : UDataAsset {
	struct TMap<int64_t, struct FBuildMeshData> MeshData; // 0x30(0x50)
};

// Class Solarland.SolarHomePlayerController
// Size: 0x10e0 (Inherited: 0xe48)
struct ASolarHomePlayerController : ASolarPlayerController {
	struct UInputComponent* ConstructionInputComponent; // 0xe48(0x08)
	struct USolarHomeActorManager* HomeActorMgr; // 0xe50(0x08)
	struct ASolarHomeActor* DragActor; // 0xe58(0x08)
	float MinCheckDistance; // 0xe60(0x04)
	float MaxCheckDistance; // 0xe64(0x04)
	struct ASolarHomeSpaceSpawner* CacheHomeSpaceSpawner; // 0xe68(0x08)
	bool bIsViewMode; // 0xe70(0x01)
	bool bIsConstruction; // 0xe71(0x01)
	char pad_E72[0x6]; // 0xe72(0x06)
	struct UAkComponent* AkAudioComponent; // 0xe78(0x08)
	float MoveCheckDis; // 0xe80(0x04)
	char pad_E84[0x194]; // 0xe84(0x194)
	float CheckDis; // 0x1018(0x04)
	char pad_101C[0x94]; // 0x101c(0x94)
	struct USolarHomeCameraManager* CameraManager; // 0x10b0(0x08)
	struct FVector LookAtLocation; // 0x10b8(0x0c)
	struct FVector OriginalLookAtLocation; // 0x10c4(0x0c)
	struct AActor* CurrentViewTarget; // 0x10d0(0x08)
	struct AActor* OriginalViewTarget; // 0x10d8(0x08)

	void StopBuilding(); // Function Solarland.SolarHomePlayerController.StopBuilding // (Final|Native|Public) // @ game+0x2801e80
	void StartFadeOutEffect(); // Function Solarland.SolarHomePlayerController.StartFadeOutEffect // (Final|Native|Public) // @ game+0x2801e40
	void StartBuilding(); // Function Solarland.SolarHomePlayerController.StartBuilding // (Final|Native|Public) // @ game+0x2801e20
	void SolarGM_Home_ResetLayer(int32_t InLayer); // Function Solarland.SolarHomePlayerController.SolarGM_Home_ResetLayer // (Final|Exec|Native|Public) // @ game+0x1ae6850
	void SolarGM_FillUpHome(); // Function Solarland.SolarHomePlayerController.SolarGM_FillUpHome // (Final|Exec|Native|Public) // @ game+0x9043b0
	void SolarGM_ExportHomeActorToPath(struct FString FilePath); // Function Solarland.SolarHomePlayerController.SolarGM_ExportHomeActorToPath // (Final|Exec|Native|Public) // @ game+0x277cdc0
	void ShowBuildMainUI(bool bShow); // Function Solarland.SolarHomePlayerController.ShowBuildMainUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetNormalCameraTarget(); // Function Solarland.SolarHomePlayerController.SetNormalCameraTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2801da0
	void SetConstructionCameraTarget(); // Function Solarland.SolarHomePlayerController.SetConstructionCameraTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2801d60
	void SendMoveToBackend(struct FServerMoveData& MoveData); // Function Solarland.SolarHomePlayerController.SendMoveToBackend // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ResetConstructionCamera(); // Function Solarland.SolarHomePlayerController.ResetConstructionCamera // (Final|Exec|Native|Public) // @ game+0x2801b20
	void ResetCameraRotation(); // Function Solarland.SolarHomePlayerController.ResetCameraRotation // (Final|Native|Public) // @ game+0x2801b00
	void OnTouchMove(int32_t Index, struct FVector& Location); // Function Solarland.SolarHomePlayerController.OnTouchMove // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2801a10
	void OnTouchEnd(int32_t Index, struct FVector& Location); // Function Solarland.SolarHomePlayerController.OnTouchEnd // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2801940
	void OnTouchBegin(int32_t Index, struct FVector& Location); // Function Solarland.SolarHomePlayerController.OnTouchBegin // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2801870
	void OnDragBegin(struct FVector& Location); // Function Solarland.SolarHomePlayerController.OnDragBegin // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x28017e0
	void OnCameraRight(float Value); // Function Solarland.SolarHomePlayerController.OnCameraRight // (Final|Native|Public) // @ game+0x2801760
	void OnCameraForward(float Value); // Function Solarland.SolarHomePlayerController.OnCameraForward // (Final|Native|Public) // @ game+0x28016e0
	bool GetIsConstruction(); // Function Solarland.SolarHomePlayerController.GetIsConstruction // (Final|Native|Public|Const) // @ game+0x28010a0
	int32_t GetCameraCurrentLayer(); // Function Solarland.SolarHomePlayerController.GetCameraCurrentLayer // (Final|Native|Public) // @ game+0x2800e80
	void BindConstructionInput(); // Function Solarland.SolarHomePlayerController.BindConstructionInput // (Final|Native|Public) // @ game+0x28008a0
	void BindBattleInput(); // Function Solarland.SolarHomePlayerController.BindBattleInput // (Final|Native|Public) // @ game+0x2800880
};

// Class Solarland.SolarHomePlayerWait
// Size: 0x2a0 (Inherited: 0x298)
struct ASolarHomePlayerWait : ASolarMapElementBase {
	int32_t TeamIndex; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
};

// Class Solarland.SolarHomeShaderConfig
// Size: 0x110 (Inherited: 0x30)
struct USolarHomeShaderConfig : UDataAsset {
	struct FSoftObjectPath EmissiveMatPath; // 0x30(0x18)
	struct FSoftObjectPath MaskedMatPath; // 0x48(0x18)
	struct FSoftObjectPath TranslucentMatPath; // 0x60(0x18)
	struct FSoftObjectPath DeleteEmissiveMatPath; // 0x78(0x18)
	struct FSoftObjectPath DeleteMaskedMatPath; // 0x90(0x18)
	struct FSoftObjectPath DeleteTranslucentMatPath; // 0xa8(0x18)
	struct FLinearColor PrdinaryColor; // 0xc0(0x10)
	struct FLinearColor PlaceableColor; // 0xd0(0x10)
	struct FLinearColor UnPlaceableColor; // 0xe0(0x10)
	struct FLinearColor PlaceableColorOther; // 0xf0(0x10)
	float BreathLightTimeScale; // 0x100(0x04)
	float PlaceableEmissveA; // 0x104(0x04)
	float UnPlaceableEmissveA; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
};

// Class Solarland.SolarHomeSpaceSpawner
// Size: 0x3c0 (Inherited: 0x298)
struct ASolarHomeSpaceSpawner : ASolarMapElementBase {
	struct USolarHomeActorManager* HomeActorMgr; // 0x298(0x08)
	struct TMap<enum class EHomeActor_SecondType, struct UObject*> TypeClassMap; // 0x2a0(0x50)
	struct TMap<float, int32_t> LayerMap; // 0x2f0(0x50)
	char pad_340[0x20]; // 0x340(0x20)
	float FloorUnit; // 0x360(0x04)
	float WallUnit; // 0x364(0x04)
	float BaseUnit; // 0x368(0x04)
	float RoundOnBase; // 0x36c(0x04)
	float RoundOnFloor; // 0x370(0x04)
	float ArrowOnBase; // 0x374(0x04)
	float ArrowOnFloor; // 0x378(0x04)
	float ArrowToWall; // 0x37c(0x04)
	char pad_380[0x8]; // 0x380(0x08)
	struct TArray<struct FTransform> BasisFloorsTransArr; // 0x388(0x10)
	char pad_398[0x20]; // 0x398(0x20)
	bool IsAirWallOpen; // 0x3b8(0x01)
	char pad_3B9[0x7]; // 0x3b9(0x07)

	void OpenAirWall(); // Function Solarland.SolarHomeSpaceSpawner.OpenAirWall // (Final|Native|Public) // @ game+0x2801ae0
	void Init(int32_t InBuildWidth, int32_t InBuildHeight); // Function Solarland.SolarHomeSpaceSpawner.Init // (Final|Native|Public) // @ game+0x2801110
	bool GetIsAirWallOpen(); // Function Solarland.SolarHomeSpaceSpawner.GetIsAirWallOpen // (Final|Native|Public) // @ game+0x2801080
	void CloseAirWall(); // Function Solarland.SolarHomeSpaceSpawner.CloseAirWall // (Final|Native|Public) // @ game+0x2800cf0
};

// Class Solarland.SolarHomeSummonWallActor
// Size: 0x238 (Inherited: 0x228)
struct ASolarHomeSummonWallActor : AActor {
	float UsingEffectSecondTime; // 0x228(0x04)
	char pad_22C[0x4]; // 0x22c(0x04)
	struct UStaticMeshComponent* SummonStaticMeshComp; // 0x230(0x08)

	void SetEffectPlayAllTime(float SecondTime); // Function Solarland.SolarHomeSummonWallActor.SetEffectPlayAllTime // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarHomeTrigger
// Size: 0x228 (Inherited: 0x228)
struct ASolarHomeTrigger : AActor {

	void OnActorExitLua(int32_t ID); // Function Solarland.SolarHomeTrigger.OnActorExitLua // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnActorExit(int32_t ID); // Function Solarland.SolarHomeTrigger.OnActorExit // (Final|Native|Public|BlueprintCallable) // @ game+0x28057c0
	void OnActorEnterLua(int32_t ID); // Function Solarland.SolarHomeTrigger.OnActorEnterLua // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnActorEnter(int32_t ID); // Function Solarland.SolarHomeTrigger.OnActorEnter // (Final|Native|Public|BlueprintCallable) // @ game+0x2805730
};

// Class Solarland.SolarHoverCraftVehicle
// Size: 0x1470 (Inherited: 0x13e0)
struct ASolarHoverCraftVehicle : ASolarHoverVehicle {
	float MeshOffsetWithoutDriver; // 0x13e0(0x04)
	float MeshOffsetLerpSpeed; // 0x13e4(0x04)
	struct TMap<enum class EHoverCraftHitType, float> HoverCraftHitImpulseMul; // 0x13e8(0x50)
	float HoverCraftHitImpulseLimit; // 0x1438(0x04)
	char pad_143C[0x4]; // 0x143c(0x04)
	struct UBoxComponent* BodyBoxComp; // 0x1440(0x08)
	struct TArray<int32_t> BodyTraceExceptVehicleTypeIDs; // 0x1448(0x10)
	char pad_1458[0x18]; // 0x1458(0x18)

	void OnHoverCraftVehicleHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarHoverCraftVehicle.OnHoverCraftVehicleHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x28059f0
	void CheckBody(); // Function Solarland.SolarHoverCraftVehicle.CheckBody // (Final|Native|Protected) // @ game+0x28050f0
};

// Class Solarland.SolarHoverCraftVehicleAnimInstance
// Size: 0x3d0 (Inherited: 0x380)
struct USolarHoverCraftVehicleAnimInstance : USolarHoverVehicleAnimInstance {
	struct ASolarHoverVehicle* MyHoverCraftVehicle; // 0x378(0x08)
	struct USolarHoverVehicleMovement* MyHoverCraftVehicleMoveComp; // 0x380(0x08)
	bool bStartUp; // 0x388(0x01)
	float MaxStartUpSpeed; // 0x390(0x04)
	bool bDrop; // 0x394(0x01)
	bool bInAir; // 0x395(0x01)
	char pad_397[0x1]; // 0x397(0x01)
	float CompressMinValue[0x4]; // 0x398(0x10)
	float CompressFullRateValue[0x4]; // 0x3a8(0x10)
	float CompressXValue; // 0x3b8(0x04)
	float CompressYValue; // 0x3bc(0x04)
	bool bCompress; // 0x3c0(0x01)
	char pad_3C1[0xf]; // 0x3c1(0x0f)

	void AnimNotify_StartUpLeft(); // Function Solarland.SolarHoverCraftVehicleAnimInstance.AnimNotify_StartUpLeft // (Final|Native|Public) // @ game+0x2804f10
	void AnimNotify_IdleEnter(); // Function Solarland.SolarHoverCraftVehicleAnimInstance.AnimNotify_IdleEnter // (Final|Native|Public) // @ game+0x2804ef0
	void AnimNotify_DropLeft(); // Function Solarland.SolarHoverCraftVehicleAnimInstance.AnimNotify_DropLeft // (Final|Native|Public) // @ game+0x2804ed0
	void AnimNotify_CompressLeft(); // Function Solarland.SolarHoverCraftVehicleAnimInstance.AnimNotify_CompressLeft // (Final|Native|Public) // @ game+0x2804eb0
};

// Class Solarland.SolarHoverMotorAnimInstance
// Size: 0x390 (Inherited: 0x380)
struct USolarHoverMotorAnimInstance : USolarHoverVehicleAnimInstance {
	struct FVector VehicleWeaponLeftOffset; // 0x378(0x0c)
	struct FVector VehicleWeaponRightOffset; // 0x384(0x0c)
};

// Class Solarland.SolarHoverVehicleMovement
// Size: 0x960 (Inherited: 0x138)
struct USolarHoverVehicleMovement : UPawnMovementComponent {
	char pad_138[0xf8]; // 0x138(0xf8)
	struct USkeletalMeshComponent* VehicleMesh; // 0x230(0x08)
	float MinLocationDiffForThrusterTrace; // 0x238(0x04)
	float MinRotationDiffForThrusterTrace; // 0x23c(0x04)
	float DriverJustOnTimer; // 0x240(0x04)
	struct FVector MassOffset; // 0x244(0x0c)
	float HoverForce; // 0x250(0x04)
	float HoverSpringCoefficient; // 0x254(0x04)
	float HoverDampingCoefficient; // 0x258(0x04)
	float HoverHeight; // 0x25c(0x04)
	float MinHoverHeight; // 0x260(0x04)
	float BouncinessForMinHoverHeight; // 0x264(0x04)
	struct TArray<struct FThrusterData> ThrusterDataArray; // 0x268(0x10)
	struct UCurveFloat* DustEffectScaleCurve; // 0x278(0x08)
	float HoverHeightBlendSpeed; // 0x280(0x04)
	float ThrusterTargetAnimationBlendSpeed; // 0x284(0x04)
	float YawDegreeDifference; // 0x288(0x04)
	float SpoilerRotateSpeed; // 0x28c(0x04)
	float MaxRudderRoll; // 0x290(0x04)
	float MinRudderRoll; // 0x294(0x04)
	float MaxRudderYaw; // 0x298(0x04)
	float MinRudderYaw; // 0x29c(0x04)
	float MeshLeaningTime; // 0x2a0(0x04)
	float MeshRecoverTime; // 0x2a4(0x04)
	float MeshRotateThreshold; // 0x2a8(0x04)
	struct FRotator ClockwiseMeshRotator; // 0x2ac(0x0c)
	struct FRuntimeFloatCurve AccelerationCurve; // 0x2b8(0x88)
	float MaxSideMovingSpeed; // 0x340(0x04)
	float MaxBackwardMovingSpeed; // 0x344(0x04)
	float DecelerationDegree; // 0x348(0x04)
	float DecelerationOnInput; // 0x34c(0x04)
	float DecelerationOnMovingDirection; // 0x350(0x04)
	float MinDecelerationOnMovingDirection; // 0x354(0x04)
	struct FGameplayTagContainer IgnoreDecelerationOnMovingDirectionTags; // 0x358(0x20)
	struct FRuntimeFloatCurve DecelerationOnSide; // 0x378(0x88)
	struct FRuntimeFloatCurve AccelerationMultiplierForSideVelocity; // 0x400(0x88)
	float MaxControllableDegree; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)
	struct FGameplayTagContainer InAirControllableTags; // 0x490(0x20)
	float AdditionalDegreeForStabilize; // 0x4b0(0x04)
	char pad_4B4[0x4]; // 0x4b4(0x04)
	struct FRuntimeFloatCurve StabilizeDampingCurve; // 0x4b8(0x88)
	struct FRuntimeFloatCurve StabilizeSpeedCurve; // 0x540(0x88)
	float TimerForAntiStuck; // 0x5c8(0x04)
	float StuckAcceleration; // 0x5cc(0x04)
	float StuckAccelerationLerpSpeed; // 0x5d0(0x04)
	float GravityAcceleration; // 0x5d4(0x04)
	float GravityWithoutDriver; // 0x5d8(0x04)
	float LandingDuration; // 0x5dc(0x04)
	float MaximumVelocityOnZWithoutDriver; // 0x5e0(0x04)
	float DecelerationRateWithoutDriver; // 0x5e4(0x04)
	float AngularDampingWithoutDriver; // 0x5e8(0x04)
	float WaterLineForFloatingForce; // 0x5ec(0x04)
	float UpwardAccelerationFloatingOnWater; // 0x5f0(0x04)
	float WaterAlignSpeed; // 0x5f4(0x04)
	float WaterHeightWithoutDriver; // 0x5f8(0x04)
	struct FPIDController UpwardForcePIDController; // 0x5fc(0x1c)
	float RotateAccelaration; // 0x618(0x04)
	float RotateDecelaration; // 0x61c(0x04)
	float MaxAngularSpeed; // 0x620(0x04)
	float HoverHeightMultiplierAfterBroken; // 0x624(0x04)
	float ParticleMultiplierAfterBroken; // 0x628(0x04)
	char pad_62C[0x4]; // 0x62c(0x04)
	struct TArray<struct FVehicleVFX> ThrusterParticles; // 0x630(0x10)
	struct FVehicleVFX MovementParticles[0x4]; // 0x640(0x240)
	char pad_880[0x90]; // 0x880(0x90)
	struct TArray<struct FThrusterState> ThrusterStateArray; // 0x910(0x10)
	struct ASolarHoverVehicle* VehiclePawn; // 0x920(0x08)
	struct USolarNetMovementComponent* VehicleNetMovement; // 0x928(0x08)
	struct UAkComponent* AkComponent; // 0x930(0x08)
	char pad_938[0x28]; // 0x938(0x28)

	void OnVehicleHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarHoverVehicleMovement.OnVehicleHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2805ca0
	void OnDriverGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarHoverVehicleMovement.OnDriverGetOnVehicle // (Final|Native|Protected) // @ game+0x2805920
	void OnDriverGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarHoverVehicleMovement.OnDriverGetOffVehicle // (Final|Native|Protected) // @ game+0x2805850
};

// Class Solarland.SolarHoverVehicleStencilAnimInstance
// Size: 0x2a0 (Inherited: 0x270)
struct USolarHoverVehicleStencilAnimInstance : UAnimInstance {
	struct FVector FLThrusterBoneScale; // 0x268(0x0c)
	struct FVector FRThrusterBoneScale; // 0x274(0x0c)
	struct FVector BLThrusterBoneScale; // 0x280(0x0c)
	struct FVector BRThrusterBoneScale; // 0x28c(0x0c)
	struct TWeakObjectPtr<struct USolarHoverVehicleAnimInstance> VehicleAnim; // 0x298(0x08)
};

// Class Solarland.SolarHPProgressBoard
// Size: 0x308 (Inherited: 0x260)
struct USolarHPProgressBoard : UUserWidget {
	struct UImage* ProgressBoard; // 0x260(0x08)
	struct UMaterialInstance* ProgressShader; // 0x268(0x08)
	float Speed; // 0x270(0x04)
	float RechargeSpeed; // 0x274(0x04)
	float RechargeTime; // 0x278(0x04)
	int32_t RechargeIndex; // 0x27c(0x04)
	bool bDebugMode; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	float Percent1; // 0x284(0x04)
	float Percent2; // 0x288(0x04)
	float Percent3; // 0x28c(0x04)
	float Percent4; // 0x290(0x04)
	bool bNeedAlternateColor; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	struct FLinearColor IncreaseColor; // 0x298(0x10)
	struct FLinearColor DecreaseColor; // 0x2a8(0x10)
	char pad_2B8[0x50]; // 0x2b8(0x50)

	void UpdateMaxValue(float Max); // Function Solarland.SolarHPProgressBoard.UpdateMaxValue // (Final|Native|Public|BlueprintCallable) // @ game+0x28067f0
	void UpdateCurrentValue(float Current); // Function Solarland.SolarHPProgressBoard.UpdateCurrentValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2806770
	void SetSpacing(float InValue); // Function Solarland.SolarHPProgressBoard.SetSpacing // (Final|Native|Public|BlueprintCallable) // @ game+0x28065c0
	void SetProgressColorByID(struct FLinearColor& InColor, int32_t InID); // Function Solarland.SolarHPProgressBoard.SetProgressColorByID // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	void SetPreAddColor(); // Function Solarland.SolarHPProgressBoard.SetPreAddColor // (Final|Native|Public|BlueprintCallable) // @ game+0x28065a0
	void SetPercentageByIndex(float Percent, int32_t Index); // Function Solarland.SolarHPProgressBoard.SetPercentageByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x28064d0
	void SetFragment(float Num); // Function Solarland.SolarHPProgressBoard.SetFragment // (Final|Native|Public|BlueprintCallable) // @ game+0x2806450
	void SetCurrentValueInstantly(float Current); // Function Solarland.SolarHPProgressBoard.SetCurrentValueInstantly // (Final|Native|Public|BlueprintCallable) // @ game+0x28063d0
	void SetAlternateColor(struct FLinearColor& InColor, bool IsChangeBoth, bool IsForIncrease); // Function Solarland.SolarHPProgressBoard.SetAlternateColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x28062a0
	void PreAddValue(float InCurrentValue, float InChangeValue, enum class EShieldRechargeState RechargeState, bool bInFixPreAdd, bool bInAdaptiveRecharge); // Function Solarland.SolarHPProgressBoard.PreAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2806060
	void InitProgressBoard(float Current, float Max, float Fragment); // Function Solarland.SolarHPProgressBoard.InitProgressBoard // (Final|Native|Public|BlueprintCallable) // @ game+0x28054f0
	void InitProgress(); // Function Solarland.SolarHPProgressBoard.InitProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x28054d0
	struct FLinearColor GetAlternateColor(bool bIncrease); // Function Solarland.SolarHPProgressBoard.GetAlternateColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x28052f0
	void DoMinusValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarHPProgressBoard.DoMinusValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2805220
	void DoAddValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarHPProgressBoard.DoAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2805150
	void CancelAddValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarHPProgressBoard.CancelAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2805020
};

// Class Solarland.SolarHttpManager
// Size: 0x148 (Inherited: 0x30)
struct USolarHttpManager : USolarGameManager {
	char pad_30[0x18]; // 0x30(0x18)
	struct TMap<struct FString, int32_t> ReportStr2ReprotTimes; // 0x48(0x50)
	int32_t ReportRetryTimes; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FMulticastInlineDelegate OnImgUploaded; // 0xa0(0x10)
	char pad_B0[0x1c]; // 0xb0(0x1c)
	int32_t Jank; // 0xcc(0x04)
	int32_t BigJank; // 0xd0(0x04)
	float FPS25; // 0xd4(0x04)
	char pad_D8[0x28]; // 0xd8(0x28)
	int32_t PeakPlayerNum; // 0x100(0x04)
	int32_t PeakAINum; // 0x104(0x04)
	int32_t PeakVehicleNum; // 0x108(0x04)
	char pad_10C[0x3c]; // 0x10c(0x3c)

	void UploadToHTTP(struct FString URL, struct FString str); // Function Solarland.SolarHttpManager.UploadToHTTP // (Final|Native|Public|BlueprintCallable) // @ game+0x2806aa0
	void UploadImg(int32_t& AppId, int32_t& AppUid, struct FString AppToken, int32_t& GameID, int32_t& Uid, struct FString SourceImgPath); // Function Solarland.SolarHttpManager.UploadImg // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2806870
	struct FString StringToBase64(struct FString str); // Function Solarland.SolarHttpManager.StringToBase64 // (Final|Native|Public|BlueprintCallable) // @ game+0x2806680
	void StopRecordJank(); // Function Solarland.SolarHttpManager.StopRecordJank // (Final|Native|Public|BlueprintCallable) // @ game+0x2806660
	void StartRecordJank(); // Function Solarland.SolarHttpManager.StartRecordJank // (Final|Native|Public|BlueprintCallable) // @ game+0x2806640
	void ResetPerfData(bool bKeepCurrentData); // Function Solarland.SolarHttpManager.ResetPerfData // (Final|Native|Public|BlueprintCallable) // @ game+0x2806210
	void ReportAbnormalPlayerWeaponToBackend(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InAttackLocation, struct FString InHitLocation, struct FString InHitBoneScale, struct FString InWeaponBlueprintName); // Function Solarland.SolarHttpManager.ReportAbnormalPlayerWeaponToBackend // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void ReportAbnormalPlayerVehicleToBackend(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InVehiclePreviousLocation, struct FString InVehiclePresentLocation, struct FString InVehicleBlueprintName); // Function Solarland.SolarHttpManager.ReportAbnormalPlayerVehicleToBackend // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void ReportAbnormalPlayerToBackend(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue); // Function Solarland.SolarHttpManager.ReportAbnormalPlayerToBackend // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void ReportAbnormalPlayerBaittingToBackend(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InDamageType, struct FString InBotLocation, struct FString InPlayerLocation); // Function Solarland.SolarHttpManager.ReportAbnormalPlayerBaittingToBackend // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void ReCordOnlineError(struct FString InStr); // Function Solarland.SolarHttpManager.ReCordOnlineError // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void OnImgUploaded__DelegateSignature(int32_t RespCode, struct FString RespMsg, struct FString ImgUrl); // DelegateFunction Solarland.SolarHttpManager.OnImgUploaded__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	bool IsFileSizeExceedLimit(struct FString SourceImgPath, int64_t& SizeLimit); // Function Solarland.SolarHttpManager.IsFileSizeExceedLimit // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2805630
	void InitializeDelegates(); // Function Solarland.SolarHttpManager.InitializeDelegates // (Final|Native|Public|BlueprintCallable) // @ game+0x2805610
	bool GetIsUploading(); // Function Solarland.SolarHttpManager.GetIsUploading // (Final|Native|Public|BlueprintCallable) // @ game+0x28054b0
	struct FString GetHttpReportUrl(); // Function Solarland.SolarHttpManager.GetHttpReportUrl // (Final|Native|Public|BlueprintCallable) // @ game+0x2805430
	float GetAvgNum(int32_t PerfType); // Function Solarland.SolarHttpManager.GetAvgNum // (Final|Native|Public|BlueprintCallable) // @ game+0x2805390
	void ClearDelegates(); // Function Solarland.SolarHttpManager.ClearDelegates // (Final|Native|Public|BlueprintCallable) // @ game+0x2805130
	void CleanPerfDirtyData(); // Function Solarland.SolarHttpManager.CleanPerfDirtyData // (Final|Native|Public|BlueprintCallable) // @ game+0x2805110
	struct FString Base64ToMD5(struct FString str); // Function Solarland.SolarHttpManager.Base64ToMD5 // (Final|Native|Public|BlueprintCallable) // @ game+0x2804f30
};

// Class Solarland.SolarHUDEventSubsystem
// Size: 0x50 (Inherited: 0x30)
struct USolarHUDEventSubsystem : UWorldSubsystem {
	struct FMulticastInlineDelegate OnSettingConfigSaved; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPickupSettingChanged; // 0x40(0x10)

	void SimpleTriggerDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarHUDEventSubsystem.SimpleTriggerDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void ClearDelegates(); // Function Solarland.SolarHUDEventSubsystem.ClearDelegates // (Final|Native|Protected) // @ game+0x2809ce0
	void BroadcastOnSettingConfigSaved(); // Function Solarland.SolarHUDEventSubsystem.BroadcastOnSettingConfigSaved // (Final|Native|Public) // @ game+0x2724c80
	void BroadcastOnPickupSettingChanged(); // Function Solarland.SolarHUDEventSubsystem.BroadcastOnPickupSettingChanged // (Final|Native|Public) // @ game+0x2809840
};

// Class Solarland.SolarHUDInGame
// Size: 0x4d8 (Inherited: 0x318)
struct ASolarHUDInGame : ASolarHUD {
	struct FMulticastInlineDelegate OnVJetForbiddenChanged; // 0x318(0x10)
	struct FMulticastInlineDelegate OnHJetForbiddenChanged; // 0x328(0x10)
	struct FMulticastInlineDelegate OnVJetTotalTimesSet; // 0x338(0x10)
	struct FMulticastInlineDelegate OnHJetTotalTimesSet; // 0x348(0x10)
	struct FMulticastInlineDelegate OnVJetRestTimesSet; // 0x358(0x10)
	struct FMulticastInlineDelegate OnHJetRestTimesSet; // 0x368(0x10)
	struct FMulticastInlineDelegate OnVJetChargeStateChanged; // 0x378(0x10)
	struct FMulticastInlineDelegate OnVJetCDStateChanged; // 0x388(0x10)
	struct FMulticastInlineDelegate OnHJetChargeStateChanged; // 0x398(0x10)
	struct FMulticastInlineDelegate OnHJetCDStateChanged; // 0x3a8(0x10)
	struct FMulticastInlineDelegate OnVJetTimesCharging; // 0x3b8(0x10)
	struct FMulticastInlineDelegate OnHJetTimesCharging; // 0x3c8(0x10)
	struct FMulticastInlineDelegate OnVJetCoolingDown; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnHJetCoolingDown; // 0x3e8(0x10)
	struct FMulticastInlineDelegate OnVJetModuleLevelChanged; // 0x3f8(0x10)
	struct FMulticastInlineDelegate OnHJetModuleLevelChanged; // 0x408(0x10)
	char pad_418[0x10]; // 0x418(0x10)
	struct FMulticastInlineDelegate OnSkydiveFlyStateChanged; // 0x428(0x10)
	struct FMulticastInlineDelegate OnSkydiveAltitudeUpdate; // 0x438(0x10)
	struct FMulticastInlineDelegate OnSkydiveSpeedUpdate; // 0x448(0x10)
	char pad_458[0x40]; // 0x458(0x40)
	struct FMulticastInlineDelegate OnTeammateStateChanged; // 0x498(0x10)
	struct FMulticastInlineDelegate OnCharacterRescueStateChanged; // 0x4a8(0x10)
	char pad_4B8[0x20]; // 0x4b8(0x20)

	void ShowDiePage(); // Function Solarland.SolarHUDInGame.ShowDiePage // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OpenSetting(); // Function Solarland.SolarHUDInGame.OpenSetting // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OpenMap(); // Function Solarland.SolarHUDInGame.OpenMap // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnTimeToEndMessage(int32_t TimeToEnd); // Function Solarland.SolarHUDInGame.OnTimeToEndMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x280a2a0
	void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh); // DelegateFunction Solarland.SolarHUDInGame.OnTeammateStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarHUDInGame.OnSpectateTargetChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed); // DelegateFunction Solarland.SolarHUDInGame.OnSkydiveSpeedUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSkydiveFlyStateChanged__DelegateSignature(bool bInFly); // DelegateFunction Solarland.SolarHUDInGame.OnSkydiveFlyStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSkydiveDataUpdate__DelegateSignature(float NewData); // DelegateFunction Solarland.SolarHUDInGame.OnSkydiveDataUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue); // DelegateFunction Solarland.SolarHUDInGame.OnSkydiveAltitudeUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnReceiveBeginPlay(); // Function Solarland.SolarHUDInGame.OnReceiveBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPlayerNumberChange(); // Function Solarland.SolarHUDInGame.OnPlayerNumberChange // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter); // DelegateFunction Solarland.SolarHUDInGame.OnMarkButtonTouchMoved__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered); // DelegateFunction Solarland.SolarHUDInGame.OnMarkButtonHoverChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnMarkButtonDragSelectEnded__DelegateSignature(); // DelegateFunction Solarland.SolarHUDInGame.OnMarkButtonDragSelectEnded__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnMarkButtonBeenLoopPressed__DelegateSignature(); // DelegateFunction Solarland.SolarHUDInGame.OnMarkButtonBeenLoopPressed__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnJetTimesChanged__DelegateSignature(int32_t NewTimes); // DelegateFunction Solarland.SolarHUDInGame.OnJetTimesChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnJetModuleLevelChanged__DelegateSignature(int32_t NewLevel); // DelegateFunction Solarland.SolarHUDInGame.OnJetModuleLevelChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnJetFlyStateChanged__DelegateSignature(bool bStart); // DelegateFunction Solarland.SolarHUDInGame.OnJetFlyStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnJetFlyForbiddenChanged__DelegateSignature(bool bForbidden); // DelegateFunction Solarland.SolarHUDInGame.OnJetFlyForbiddenChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent); // DelegateFunction Solarland.SolarHUDInGame.OnJetFlyDataUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterRescueStateChanged__DelegateSignature(enum class ERescueState NewRescueState); // DelegateFunction Solarland.SolarHUDInGame.OnCharacterRescueStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterEnterWater__DelegateSignature(); // DelegateFunction Solarland.SolarHUDInGame.OnCharacterEnterWater__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCharacterDead__DelegateSignature(); // DelegateFunction Solarland.SolarHUDInGame.OnCharacterDead__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCapsulePlayerNumChange(int32_t CurrentNum, int32_t Total); // Function Solarland.SolarHUDInGame.OnCapsulePlayerNumChange // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void NotifyBombingEnd(int32_t BombId); // Function Solarland.SolarHUDInGame.NotifyBombingEnd // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void NotifyBombingBegin(int32_t BombId, struct FVector Location, float Radius); // Function Solarland.SolarHUDInGame.NotifyBombingBegin // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	void MarkWarningOnWorld(); // Function Solarland.SolarHUDInGame.MarkWarningOnWorld // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void MarkPointOnWorld(); // Function Solarland.SolarHUDInGame.MarkPointOnWorld // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool HasBegunPlay(); // Function Solarland.SolarHUDInGame.HasBegunPlay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2809f70
	void HandleSendQuickMessage(struct FString NickName, struct FString Message, bool IsLocalPlayer, bool bSound); // Function Solarland.SolarHUDInGame.HandleSendQuickMessage // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void CloseSetting(); // Function Solarland.SolarHUDInGame.CloseSetting // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void CloseMap(); // Function Solarland.SolarHUDInGame.CloseMap // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void BroadcastSkydiveSpeed_Internal(); // Function Solarland.SolarHUDInGame.BroadcastSkydiveSpeed_Internal // (Final|Native|Protected) // @ game+0x2809cc0
	void BroadcastSkydiveSpeed(); // Function Solarland.SolarHUDInGame.BroadcastSkydiveSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x2809ca0
	void BroadcastOnVJetTotalTimesSetDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetTotalTimesSetDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809c60
	void BroadcastOnVJetTotalTimesSet_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetTotalTimesSet_Internal // (Final|Native|Protected) // @ game+0x2809c80
	void BroadcastOnVJetTimesChargingDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetTimesChargingDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809c20
	void BroadcastOnVJetTimesCharging_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetTimesCharging_Internal // (Final|Native|Protected) // @ game+0x2809c40
	void BroadcastOnVJetRestTimesSetDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetRestTimesSetDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809be0
	void BroadcastOnVJetRestTimesSet_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetRestTimesSet_Internal // (Final|Native|Protected) // @ game+0x2809c00
	void BroadcastOnVJetModuleLevelChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetModuleLevelChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809ba0
	void BroadcastOnVJetModuleLevelChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetModuleLevelChanged_Internal // (Final|Native|Protected) // @ game+0x2809bc0
	void BroadcastOnVJetForbiddenChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetForbiddenChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809b60
	void BroadcastOnVJetForbiddenChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetForbiddenChanged_Internal // (Final|Native|Protected) // @ game+0x2809b80
	void BroadcastOnVJetCoolingDownDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetCoolingDownDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809b20
	void BroadcastOnVJetCoolingDown_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetCoolingDown_Internal // (Final|Native|Protected) // @ game+0x2809b40
	void BroadcastOnVJetChargeStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetChargeStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809ae0
	void BroadcastOnVJetChargeStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetChargeStateChanged_Internal // (Final|Native|Protected) // @ game+0x2809b00
	void BroadcastOnVJetCDStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetCDStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809aa0
	void BroadcastOnVJetCDStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetCDStateChanged_Internal // (Final|Native|Protected) // @ game+0x2809ac0
	void BroadcastOnTeammateStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnTeammateStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809a60
	void BroadcastOnTeammateStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnTeammateStateChanged_Internal // (Final|Native|Protected) // @ game+0x2809a80
	void BroadcastOnSkydiveFlyStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnSkydiveFlyStateChanged_Internal // (Final|Native|Protected) // @ game+0x2809a40
	void BroadcastOnSkydiveFlyStateChanged(); // Function Solarland.SolarHUDInGame.BroadcastOnSkydiveFlyStateChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x2809a20
	void BroadcastOnShowGameNoticeDelegateDeprecated(int32_t InNoticeID, struct TMap<struct FString, struct FString>& InNoticeParams); // Function Solarland.SolarHUDInGame.BroadcastOnShowGameNoticeDelegateDeprecated // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28098e0
	void BroadcastOnRefreshBackpackWeaponPartDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnRefreshBackpackWeaponPartDelegate // (Final|Native|Public) // @ game+0x28098c0
	void BroadcastOnRefreshBackpackWeaponDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnRefreshBackpackWeaponDelegate // (Final|Native|Public) // @ game+0x28098a0
	void BroadcastOnRefreshBackpackItemDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnRefreshBackpackItemDelegate // (Final|Native|Public) // @ game+0x2809880
	void BroadcastOnRefreshBackpackEquipDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnRefreshBackpackEquipDelegate // (Final|Native|Public) // @ game+0x2809860
	void BroadcastOnHJetTotalTimesSetDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetTotalTimesSetDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809800
	void BroadcastOnHJetTotalTimesSet_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetTotalTimesSet_Internal // (Final|Native|Protected) // @ game+0x2809820
	void BroadcastOnHJetTimesChargingDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetTimesChargingDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x28097c0
	void BroadcastOnHJetTimesCharging_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetTimesCharging_Internal // (Final|Native|Protected) // @ game+0x28097e0
	void BroadcastOnHJetRestTimesSetDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetRestTimesSetDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809780
	void BroadcastOnHJetRestTimesSet_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetRestTimesSet_Internal // (Final|Native|Protected) // @ game+0x28097a0
	void BroadcastOnHJetModuleLevelChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetModuleLevelChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809740
	void BroadcastOnHJetModuleLevelChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetModuleLevelChanged_Internal // (Final|Native|Protected) // @ game+0x2809760
	void BroadcastOnHJetForbiddenChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetForbiddenChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809700
	void BroadcastOnHJetForbiddenChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetForbiddenChanged_Internal // (Final|Native|Protected) // @ game+0x2809720
	void BroadcastOnHJetCoolingDownDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetCoolingDownDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x28096c0
	void BroadcastOnHJetCoolingDown_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetCoolingDown_Internal // (Final|Native|Protected) // @ game+0x28096e0
	void BroadcastOnHJetChargeStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetChargeStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809680
	void BroadcastOnHJetChargeStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetChargeStateChanged_Internal // (Final|Native|Protected) // @ game+0x28096a0
	void BroadcastOnHJetCDStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetCDStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x2809640
	void BroadcastOnHJetCDStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetCDStateChanged_Internal // (Final|Native|Protected) // @ game+0x2809660
	void BroadcastOnBindPickupDelegates(); // Function Solarland.SolarHUDInGame.BroadcastOnBindPickupDelegates // (Final|Native|Public) // @ game+0x2809620
	void BroadcastOnBindItemPanelDelegates(); // Function Solarland.SolarHUDInGame.BroadcastOnBindItemPanelDelegates // (Final|Native|Public) // @ game+0x2809600
	void BroadcastOnBindHPPanelDelegates(); // Function Solarland.SolarHUDInGame.BroadcastOnBindHPPanelDelegates // (Final|Native|Public) // @ game+0x28095e0
	void BindLocalPlayerSpectateDelegates(struct ASolarSpectateInfo* LocalSpecInfo); // Function Solarland.SolarHUDInGame.BindLocalPlayerSpectateDelegates // (Final|Native|Private) // @ game+0x2809550
};

// Class Solarland.SolarHyperLinkRichText
// Size: 0xab0 (Inherited: 0xaa0)
struct USolarHyperLinkRichText : URichTextBlock {
	struct FMulticastInlineDelegate OnHyperLinkClicked; // 0xaa0(0x10)
};

// Class Solarland.SolarImage
// Size: 0x330 (Inherited: 0x138)
struct USolarImage : UWidget {
	char pad_138[0x8]; // 0x138(0x08)
	struct FSlateBrush Brush; // 0x140(0xe0)
	enum class ESolarImageFillType FillType; // 0x220(0x01)
	char pad_221[0x7]; // 0x221(0x07)
	struct FSolarImageProgressInfo ImageProgressInfo; // 0x228(0x20)
	struct FDelegate BrushDelegate; // 0x248(0x10)
	struct FLinearColor ColorAndOpacity; // 0x258(0x10)
	struct FDelegate ColorAndOpacityDelegate; // 0x268(0x10)
	bool bEnableLocImage; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)
	struct FText ImagePath; // 0x280(0x18)
	int32_t LocTextID; // 0x298(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x29c(0x01)
	char pad_29D[0x3]; // 0x29d(0x03)
	struct FDelegate OnMouseButtonDownEvent; // 0x2a0(0x10)
	struct FDelegate OnMouseButtonUpEvent; // 0x2b0(0x10)
	struct FDelegate OnMouseMoveEvent; // 0x2c0(0x10)
	char pad_2D0[0x60]; // 0x2d0(0x60)

	void UpdateImageAsync(int32_t NewLocTextID); // Function Solarland.SolarImage.UpdateImageAsync // (Final|Native|Protected) // @ game+0x280ba30
	void UpdateImage(int32_t NewLocTextID); // Function Solarland.SolarImage.UpdateImage // (Final|Native|Protected) // @ game+0x280b9a0
	void SetOpacity(float InOpacity); // Function Solarland.SolarImage.SetOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x280b800
	void SetImageProgressInfo(struct FSolarImageProgressInfo& InSolarImageProgressInfo); // Function Solarland.SolarImage.SetImageProgressInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x280b750
	void SetImageProgressByInfo(struct FSolarImageProgressInfo& InSolarImageProgressInfo); // Function Solarland.SolarImage.SetImageProgressByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x280b6a0
	void SetImageProgress(float InProgress); // Function Solarland.SolarImage.SetImageProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x280b620
	void SetImageFillType(enum class ESolarImageFillType InImageFillType); // Function Solarland.SolarImage.SetImageFillType // (Final|Native|Public|BlueprintCallable) // @ game+0x280b5a0
	void SetColorAndOpacity(struct FLinearColor InColorAndOpacity); // Function Solarland.SolarImage.SetColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x280b480
	void SetBrushTintColor(struct FSlateColor TintColor); // Function Solarland.SolarImage.SetBrushTintColor // (Final|Native|Public|BlueprintCallable) // @ game+0x280b2a0
	void SetBrushSize(struct FVector2D DesiredSize); // Function Solarland.SolarImage.SetBrushSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x280b1a0
	void SetBrushResourceObject(struct UObject* ResourceObject); // Function Solarland.SolarImage.SetBrushResourceObject // (Final|Native|Public|BlueprintCallable) // @ game+0x280b080
	void SetBrushFromTextureDynamic(struct UTexture2DDynamic* Texture, bool bMatchSize); // Function Solarland.SolarImage.SetBrushFromTextureDynamic // (Native|Public|BlueprintCallable) // @ game+0x280aee0
	void SetBrushFromTexture(struct UTexture2D* Texture, bool bMatchSize); // Function Solarland.SolarImage.SetBrushFromTexture // (Native|Public|BlueprintCallable) // @ game+0x280ad40
	void SetBrushFromSoftTexture(struct TSoftObjectPtr<UTexture2D> SoftTexture, bool bMatchSize); // Function Solarland.SolarImage.SetBrushFromSoftTexture // (Native|Public|BlueprintCallable) // @ game+0x280aa80
	void SetBrushFromSoftMaterial(struct TSoftObjectPtr<UMaterialInterface> SoftMaterial); // Function Solarland.SolarImage.SetBrushFromSoftMaterial // (Native|Public|BlueprintCallable) // @ game+0x280a860
	void SetBrushFromMaterial(struct UMaterialInterface* Material); // Function Solarland.SolarImage.SetBrushFromMaterial // (Native|Public|BlueprintCallable) // @ game+0xbe4930
	void SetBrushFromAtlasInterface(struct TScriptInterface<ISlateTextureAtlasInterface> AtlasRegion, bool bMatchSize); // Function Solarland.SolarImage.SetBrushFromAtlasInterface // (Native|Public|BlueprintCallable) // @ game+0x280a5d0
	void SetBrushFromAsset(struct USlateBrushAsset* Asset); // Function Solarland.SolarImage.SetBrushFromAsset // (Native|Public|BlueprintCallable) // @ game+0x280a4b0
	void SetBrush(struct FSlateBrush& InBrush); // Function Solarland.SolarImage.SetBrush // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x280a350
	float GetImageProgressByInfo(struct FSolarImageProgressInfo& InSolarImageProgressInfo); // Function Solarland.SolarImage.GetImageProgressByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2809e30
	struct UMaterialInstanceDynamic* GetDynamicMaterial(); // Function Solarland.SolarImage.GetDynamicMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x2809dd0
};

// Class Solarland.SolarImageURL
// Size: 0x440 (Inherited: 0x138)
struct USolarImageURL : UWidget {
	struct FString URL; // 0x138(0x10)
	bool bDownloadFailedResetToPlaceholder; // 0x148(0x01)
	bool bDownloadFailedAutoRetry; // 0x149(0x01)
	char pad_14A[0x2]; // 0x14a(0x02)
	int32_t AutoRetryDelayTime; // 0x14c(0x04)
	int32_t AutoRetryTimes; // 0x150(0x04)
	char pad_154[0xc]; // 0x154(0x0c)
	struct FSlateBrush Brush; // 0x160(0xe0)
	struct FSlateBrush PlaceholderBrush; // 0x240(0xe0)
	enum class TextureFilter Filter; // 0x320(0x01)
	char pad_321[0x3]; // 0x321(0x03)
	struct FDelegate BrushDelegate; // 0x324(0x10)
	struct FLinearColor ColorAndOpacity; // 0x334(0x10)
	struct FDelegate ColorAndOpacityDelegate; // 0x344(0x10)
	bool bFlipForRightToLeftFlowDirection; // 0x354(0x01)
	char pad_355[0x3]; // 0x355(0x03)
	struct FDelegate OnMouseButtonDownEvent; // 0x358(0x10)
	struct FMulticastInlineDelegate OnURLDownloadFinish; // 0x368(0x10)
	char pad_378[0xc8]; // 0x378(0xc8)

	void URLDownloadFinish__DelegateSignature(bool bSuccess); // DelegateFunction Solarland.SolarImageURL.URLDownloadFinish__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void UpdateURLImage(); // Function Solarland.SolarImageURL.UpdateURLImage // (Native|Public|BlueprintCallable) // @ game+0x280bac0
	void SetURLForNextTick(struct FString URLForNextTick); // Function Solarland.SolarImageURL.SetURLForNextTick // (Final|Native|Public) // @ game+0x280b900
	void SetOpacity(float InOpacity); // Function Solarland.SolarImageURL.SetOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x280b880
	void SetColorAndOpacity(struct FLinearColor InColorAndOpacity); // Function Solarland.SolarImageURL.SetColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x280b510
	void SetBrushTintColor(struct FSlateColor TintColor); // Function Solarland.SolarImageURL.SetBrushTintColor // (Final|Native|Public|BlueprintCallable) // @ game+0x280b390
	void SetBrushSize(struct FVector2D DesiredSize); // Function Solarland.SolarImageURL.SetBrushSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x280b220
	void SetBrushResourceObject(struct UObject* ResourceObject); // Function Solarland.SolarImageURL.SetBrushResourceObject // (Final|Native|Public|BlueprintCallable) // @ game+0x280b110
	void SetBrushFromTextureDynamic(struct UTexture2DDynamic* Texture, bool bMatchSize); // Function Solarland.SolarImageURL.SetBrushFromTextureDynamic // (Native|Public|BlueprintCallable) // @ game+0x280afb0
	void SetBrushFromTexture(struct UTexture2D* Texture, bool bMatchSize); // Function Solarland.SolarImageURL.SetBrushFromTexture // (Native|Public|BlueprintCallable) // @ game+0x280ae10
	void SetBrushFromSoftTexture(struct TSoftObjectPtr<UTexture2D> SoftTexture, bool bMatchSize); // Function Solarland.SolarImageURL.SetBrushFromSoftTexture // (Native|Public|BlueprintCallable) // @ game+0x280abe0
	void SetBrushFromSoftMaterial(struct TSoftObjectPtr<UMaterialInterface> SoftMaterial); // Function Solarland.SolarImageURL.SetBrushFromSoftMaterial // (Native|Public|BlueprintCallable) // @ game+0x280a970
	void SetBrushFromMaterial(struct UMaterialInterface* Material); // Function Solarland.SolarImageURL.SetBrushFromMaterial // (Native|Public|BlueprintCallable) // @ game+0x280a7d0
	void SetBrushFromAtlasInterface(struct TScriptInterface<ISlateTextureAtlasInterface> AtlasRegion, bool bMatchSize); // Function Solarland.SolarImageURL.SetBrushFromAtlasInterface // (Native|Public|BlueprintCallable) // @ game+0x280a6d0
	void SetBrushFromAsset(struct USlateBrushAsset* Asset); // Function Solarland.SolarImageURL.SetBrushFromAsset // (Native|Public|BlueprintCallable) // @ game+0x280a540
	void SetBrush(struct FSlateBrush& InBrush); // Function Solarland.SolarImageURL.SetBrush // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x280a400
	void ResetToPlaceholder(); // Function Solarland.SolarImageURL.ResetToPlaceholder // (Native|Public|BlueprintCallable) // @ game+0x280a330
	void OnDownloadImageSuccess(struct FString InUrl, struct FDownloaderResponse& InResponse); // Function Solarland.SolarImageURL.OnDownloadImageSuccess // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x280a170
	void OnDownloadImageFailed(struct FString InUrl, enum class EDownloaderFailedType& InFailedType, int32_t& InErrorCode); // Function Solarland.SolarImageURL.OnDownloadImageFailed // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x280a030
	void LoadURLImage(struct UTexture2DDynamic* Texture); // Function Solarland.SolarImageURL.LoadURLImage // (Native|Public|BlueprintCallable) // @ game+0x2809fa0
	struct FString GetUrl(); // Function Solarland.SolarImageURL.GetUrl // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2809ef0
	struct UMaterialInstanceDynamic* GetDynamicMaterial(); // Function Solarland.SolarImageURL.GetDynamicMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x2809e00
	enum class EImageURLDownloadState GetDownloadState(); // Function Solarland.SolarImageURL.GetDownloadState // (Native|Public|BlueprintCallable) // @ game+0x2809da0
	void DownloadImage(struct FString InUrl); // Function Solarland.SolarImageURL.DownloadImage // (Native|Public|BlueprintCallable) // @ game+0x2809d00
	void CancelDownload(); // Function Solarland.SolarImageURL.CancelDownload // (Native|Public|BlueprintCallable) // @ game+0x1ad6b50
};

// Class Solarland.SolarInputActionContext
// Size: 0x218 (Inherited: 0x28)
struct USolarInputActionContext : UObject {
	char pad_28[0x20]; // 0x28(0x20)
	struct UInputMappingContext* InputMappingContext; // 0x48(0x08)
	struct TMap<struct FKey, struct UInputAction*> KeyChordInputActionDict; // 0x50(0x50)
	struct TMap<struct FName, struct FSolarInputActionEntry> ActionInputActionDict; // 0xa0(0x50)
	struct TMap<struct FName, struct FSolarInputActionEntry> ChordActionInputActionDict; // 0xf0(0x50)
	struct UInputAction* NullInputAction; // 0x140(0x08)
	char pad_148[0xd0]; // 0x148(0xd0)
};

// Class Solarland.SolarInputButton
// Size: 0x5f0 (Inherited: 0x5d0)
struct USolarInputButton : UButton {
	struct FSolarVirtualInput VirtualActionInput; // 0x5c8(0x20)
};

// Class Solarland.SolarInputComponent
// Size: 0x178 (Inherited: 0x168)
struct USolarInputComponent : UEnhancedInputComponent {
	char pad_168[0x10]; // 0x168(0x10)
};

// Class Solarland.InputTriggerDownOne
// Size: 0x48 (Inherited: 0x40)
struct UInputTriggerDownOne : UInputTrigger {
	char pad_40[0x1]; // 0x40(0x01)
	bool bIsOneShot; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
};

// Class Solarland.InputTriggerPressedOld
// Size: 0x48 (Inherited: 0x40)
struct UInputTriggerPressedOld : UInputTrigger {
	char pad_40[0x8]; // 0x40(0x08)
};

// Class Solarland.InputTriggerReleasedOld
// Size: 0x40 (Inherited: 0x40)
struct UInputTriggerReleasedOld : UInputTrigger {
};

// Class Solarland.InputTriggerPressedAndReleased
// Size: 0x40 (Inherited: 0x40)
struct UInputTriggerPressedAndReleased : UInputTrigger {
};

// Class Solarland.InputTriggerTriggered
// Size: 0x40 (Inherited: 0x40)
struct UInputTriggerTriggered : UInputTrigger {
};

// Class Solarland.InputTriggerDoubleTap
// Size: 0x48 (Inherited: 0x40)
struct UInputTriggerDoubleTap : UInputTrigger {
	float Delay; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Solarland.InputModifierConstBool
// Size: 0x30 (Inherited: 0x28)
struct UInputModifierConstBool : UInputModifier {
	float ConstValue; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Solarland.SolarInputKeyMapSubsystem
// Size: 0x48 (Inherited: 0x30)
struct USolarInputKeyMapSubsystem : UEngineSubsystem {
	char pad_30[0x18]; // 0x30(0x18)

	bool IsContainsKey(struct FKey& InKey); // Function Solarland.SolarInputKeyMapSubsystem.IsContainsKey // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28107e0
};

// Class Solarland.SolarInputManager
// Size: 0x300 (Inherited: 0xb0)
struct USolarInputManager : UActorComponent {
	char pad_B0[0x18]; // 0xb0(0x18)
	struct USolarPlayerSensitivitys* SenSetting; // 0xc8(0x08)
	char pad_D0[0x38]; // 0xd0(0x38)
	struct FTouchHandler TouchHandler; // 0x108(0x180)
	char pad_288[0x78]; // 0x288(0x78)

	void SetTouchScaler(float InVal); // Function Solarland.SolarInputManager.SetTouchScaler // (Final|Native|Public|BlueprintCallable) // @ game+0x2811160
	void SetNoiseThresholdFactor(float InVal); // Function Solarland.SolarInputManager.SetNoiseThresholdFactor // (Final|Native|Public|BlueprintCallable) // @ game+0x28110c0
	void SetMouseScaler(struct FVector2D InVal); // Function Solarland.SolarInputManager.SetMouseScaler // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2811020
	void SetMinNoiseMultiplier(float InVal); // Function Solarland.SolarInputManager.SetMinNoiseMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x2810f80
	void SetCurveVerticalFix(struct FVector2D InVec); // Function Solarland.SolarInputManager.SetCurveVerticalFix // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2810ee0
	void SetCurveVerticalFactor(struct FVector2D InVec); // Function Solarland.SolarInputManager.SetCurveVerticalFactor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2810e40
	void SetCurveHorizonFix(struct FVector2D InVec); // Function Solarland.SolarInputManager.SetCurveHorizonFix // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2810da0
	void SetCurveHorizonFactor(struct FVector2D InVec); // Function Solarland.SolarInputManager.SetCurveHorizonFactor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2810d00
	void OnCacheNeedUpdate(); // Function Solarland.SolarInputManager.OnCacheNeedUpdate // (Final|Native|Private) // @ game+0x28108f0
	float GetTouchScaler(); // Function Solarland.SolarInputManager.GetTouchScaler // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2810780
	struct FVector2D GetTouchOutputScale(); // Function Solarland.SolarInputManager.GetTouchOutputScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2810740
	float GetNoiseThresholdFactor(); // Function Solarland.SolarInputManager.GetNoiseThresholdFactor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x28106d0
	struct FVector2D GetMouseScaler(); // Function Solarland.SolarInputManager.GetMouseScaler // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2810690
	float GetMinNoiseMultiplier(); // Function Solarland.SolarInputManager.GetMinNoiseMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2810650
	struct FVector2D GetFixedOutput(); // Function Solarland.SolarInputManager.GetFixedOutput // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x28105e0
	struct FVector2D GetDeltaMove(); // Function Solarland.SolarInputManager.GetDeltaMove // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x28105a0
	struct FVector2D GetCurveVerticalFix(); // Function Solarland.SolarInputManager.GetCurveVerticalFix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2810560
	struct FVector2D GetCurveVerticalFactor(); // Function Solarland.SolarInputManager.GetCurveVerticalFactor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2810520
	struct FVector2D GetCurveHorizonFix(); // Function Solarland.SolarInputManager.GetCurveHorizonFix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x28104e0
	struct FVector2D GetCurveHorizonFactor(); // Function Solarland.SolarInputManager.GetCurveHorizonFactor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x28104a0
	struct FVector2D GetAverageDeltaMove(); // Function Solarland.SolarInputManager.GetAverageDeltaMove // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x28103f0
};

// Class Solarland.SolarInputMappingManager
// Size: 0xc8 (Inherited: 0x30)
struct USolarInputMappingManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnInputMappingUpdate; // 0x38(0x10)
	struct FMulticastInlineDelegate OnInputDeviceChanged; // 0x48(0x10)
	struct TMap<struct FString, struct FInputKeyMappingEntry> KeyMappingEntryDict; // 0x58(0x50)
	struct TArray<struct FInputKeyMappingEntry> CacheKeyMappingEntries; // 0xa8(0x10)
	struct TArray<struct UInputAction*> PreCacheInputActions; // 0xb8(0x10)

	void SplitInputChord(struct FInputChord& InInputChord, struct FString& KeyStr1, struct FString& KeyStr2); // Function Solarland.SolarInputMappingManager.SplitInputChord // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2811290
	bool IsInputTypeGamepad(); // Function Solarland.SolarInputMappingManager.IsInputTypeGamepad // (Final|Native|Public|Const) // @ game+0x28108c0
	void InputDeviceChangedDelegate__DelegateSignature(struct FInputDeviceProxy InputDeviceProxy); // DelegateFunction Solarland.SolarInputMappingManager.InputDeviceChangedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	struct TArray<struct FInputKeyMappingEntry> GetKeyMappingEntries(); // Function Solarland.SolarInputMappingManager.GetKeyMappingEntries // (Event|Protected|BlueprintEvent|Const) // @ game+0xb66830
	enum class ECommonInputType GetCurrentInputType(); // Function Solarland.SolarInputMappingManager.GetCurrentInputType // (Final|Native|Public|Const) // @ game+0x2810470
	struct FName GetCurrentGamepadType(); // Function Solarland.SolarInputMappingManager.GetCurrentGamepadType // (Final|Native|Public|Const) // @ game+0x2810430
	struct FInputKeyMappingEntry FindKeyMappingEntry(struct FString ActionID); // Function Solarland.SolarInputMappingManager.FindKeyMappingEntry // (Final|Native|Public|Const) // @ game+0x2810310
	struct FInputKeyMappingEntry CreateKeyMappingEntry(struct FString InActionID, struct FString InActionName, enum class ESolarTablesEnum_InputActionType InActionType, float InScale, struct FString InKeyStr1, struct FString InKeyStr2, struct FString InKeyStr3, enum class ESolarTablesEnum_InputTriggerType InInputTriggerType1, enum class ESolarTablesEnum_InputTriggerType InInputTriggerType2, enum class ESolarTablesEnum_InputTriggerType InInputTriggerType3); // Function Solarland.SolarInputMappingManager.CreateKeyMappingEntry // (Final|Native|Static|Protected) // @ game+0x280feb0
	bool CreateInputChord(struct FString KeyStr1, struct FString KeyStr2, struct FInputChord& OutInputChord); // Function Solarland.SolarInputMappingManager.CreateInputChord // (Final|Native|Static|Protected|HasOutParms) // @ game+0x280fd10
	void ApplyKeyMappings(); // Function Solarland.SolarInputMappingManager.ApplyKeyMappings // (Final|Native|Protected) // @ game+0x280fcf0
};

// Class Solarland.SolarInputModePolicyComponent
// Size: 0x180 (Inherited: 0xb0)
struct USolarInputModePolicyComponent : UActorComponent {
	char pad_B0[0xd0]; // 0xb0(0xd0)
};

// Class Solarland.SolarInputSetting
// Size: 0x230 (Inherited: 0x38)
struct USolarInputSetting : UDeveloperSettings {
	struct FVector2D TouchScaler; // 0x38(0x08)
	float NoiseThresholdFactor; // 0x40(0x04)
	float MinNoiseMultiplier; // 0x44(0x04)
	bool bEnableAccMode; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float AccConfigThreshold; // 0x4c(0x04)
	float ConstantThreshold; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct FSoftObjectPath TouchDistHorizCurve; // 0x58(0x18)
	struct FSoftObjectPath TouchDistVertCurve; // 0x70(0x18)
	struct FVector2D TouchDistHorizCurveScale; // 0x88(0x08)
	struct FVector2D TouchDistVertCurveScale; // 0x90(0x08)
	struct FVector2D TouchDistHorizCurveOffset; // 0x98(0x08)
	struct FVector2D TouchDistVertCurveOffset; // 0xa0(0x08)
	struct FSoftObjectPath TouchHorizCurve; // 0xa8(0x18)
	struct FSoftObjectPath TouchVertCurve; // 0xc0(0x18)
	struct FVector2D TouchHorizCurveScale; // 0xd8(0x08)
	struct FVector2D TouchVertCurveScale; // 0xe0(0x08)
	struct FVector2D TouchHorizCurveOffset; // 0xe8(0x08)
	struct FVector2D TouchVertCurveOffset; // 0xf0(0x08)
	float MaxMagnitudeThreshold; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct TMap<struct FName, struct FSoftObjectPath> InputActionPaths; // 0x100(0x50)
	struct TSet<struct FName> InputActionOneShotBlackList; // 0x150(0x50)
	struct FSoftObjectPath DefaultInputActionPath; // 0x1a0(0x18)
	struct FSoftObjectPath DefaultInputActionChordPath; // 0x1b8(0x18)
	struct FSoftObjectPath DefaultInputActionModifyKeyPath; // 0x1d0(0x18)
	struct FSoftObjectPath DefaultInputActionTapPath; // 0x1e8(0x18)
	struct FSoftObjectPath DefaultInputActionDoubleTapPath; // 0x200(0x18)
	struct FSoftObjectPath DefaultInputActionHoldPath; // 0x218(0x18)

	struct USolarInputSetting* GetInputSettings(); // Function Solarland.SolarInputSetting.GetInputSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2810620
};

// Class Solarland.SolarInputSubsystem
// Size: 0x88 (Inherited: 0x30)
struct USolarInputSubsystem : UWorldSubsystem {
	char pad_30[0x48]; // 0x30(0x48)
	struct FInputDeviceProxy CurrentInputDeviceProxy; // 0x78(0x0c)
	char pad_84[0x4]; // 0x84(0x04)

	bool TestInputActionFlag(enum class EInputActionFlags InFlagBit); // Function Solarland.SolarInputSubsystem.TestInputActionFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2811450
	void RemoveInputActionFlag(enum class EInputActionFlags InFlagBit); // Function Solarland.SolarInputSubsystem.RemoveInputActionFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x2810c80
	void OnLocalPlayerAddedEvent(struct ULocalPlayer* NewLocalPlayer); // Function Solarland.SolarInputSubsystem.OnLocalPlayerAddedEvent // (Final|Native|Private) // @ game+0x2810b50
	void OnInputMethodChanged(enum class ECommonInputType InInputType); // Function Solarland.SolarInputSubsystem.OnInputMethodChanged // (Final|Native|Private) // @ game+0x2810ad0
	void OnGamepadTypeChanged(struct FName InGamepadType); // Function Solarland.SolarInputSubsystem.OnGamepadTypeChanged // (Final|Native|Private) // @ game+0x2810a40
	void OnControllerConnectionChange(bool bIsConnected, int32_t UserId, int32_t ControllerId); // Function Solarland.SolarInputSubsystem.OnControllerConnectionChange // (Final|Native|Private) // @ game+0x2810930
	void AddInputActionFlag(enum class EInputActionFlags InFlagBit); // Function Solarland.SolarInputSubsystem.AddInputActionFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x280fc70
};

// Class Solarland.SolarInteractableManager
// Size: 0x98 (Inherited: 0x30)
struct USolarInteractableManager : USolarGameManager {
	char pad_30[0x10]; // 0x30(0x10)
	int32_t ZoneNum; // 0x40(0x04)
	int32_t TotalNum; // 0x44(0x04)
	struct TArray<struct FRadarStationCollection> CurrRadarStations; // 0x48(0x10)
	struct TArray<struct ASolarElectricShop*> CurrElectricShops; // 0x58(0x10)
	struct TArray<struct TWeakObjectPtr<struct ASolarShieldUpgradeItemShop>> ActiveShieldUpgradeItemShopList; // 0x68(0x10)
	struct FString SceneObjectLevelName; // 0x78(0x10)
	struct TWeakObjectPtr<struct ASolarGlobalRepInfo> GlobalMapRepInfo; // 0x88(0x08)
	char pad_90[0x8]; // 0x90(0x08)

	void OnSceneObjectsLoadComplete(struct FString LevelName); // Function Solarland.SolarInteractableManager.OnSceneObjectsLoadComplete // (Final|Native|Public) // @ game+0x2810be0
	void OnClientShowShieldUpgradeItemShops(); // Function Solarland.SolarInteractableManager.OnClientShowShieldUpgradeItemShops // (Final|Native|Public|BlueprintCallable) // @ game+0x2810910
	int32_t GetShieldUpgradeItemShopGroupID(); // Function Solarland.SolarInteractableManager.GetShieldUpgradeItemShopGroupID // (Final|Native|Public|BlueprintCallable) // @ game+0x2810710
};

// Class Solarland.SolarInteractionItemWidget
// Size: 0x418 (Inherited: 0x400)
struct USolarInteractionItemWidget : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct USolarInteractionListWidget* InteractionList; // 0x408(0x08)
	struct FGameplayTag InteractionType; // 0x410(0x08)

	void FadeOut(); // Function Solarland.SolarInteractionItemWidget.FadeOut // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ad6de0
	void FadeIn(); // Function Solarland.SolarInteractionItemWidget.FadeIn // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ad6e00
};

// Class Solarland.SolarInteractionListWidget
// Size: 0x440 (Inherited: 0x400)
struct USolarInteractionListWidget : USolarUserWidget {
	struct TArray<struct USolarInteractionItemWidget*> ItemWidgets; // 0x400(0x10)
	struct TArray<struct USolarInteractionTriggerWidget*> TriggerWidgets; // 0x410(0x10)
	char pad_420[0x8]; // 0x420(0x08)
	struct USolarInteractionItemWidget* FocusedActiveItem; // 0x428(0x08)
	char pad_430[0x4]; // 0x430(0x04)
	float RefreshActiveWidgetInterval; // 0x434(0x04)
	char pad_438[0x8]; // 0x438(0x08)

	void OnTryCancelInteraction(); // Function Solarland.SolarInteractionListWidget.OnTryCancelInteraction // (Final|Native|Protected) // @ game+0x28158a0
	void OnStopInteractionCountDown(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionListWidget.OnStopInteractionCountDown // (Final|Native|Protected|HasOutParms) // @ game+0x2815760
	void OnStartInteractionCountDown(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionListWidget.OnStartInteractionCountDown // (Final|Native|Protected|HasOutParms) // @ game+0x2815620
	bool OnInteractionTriggered(); // Function Solarland.SolarInteractionListWidget.OnInteractionTriggered // (Final|Native|Protected) // @ game+0x2815390
	void OnInteractionTriggerDisappear(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.SolarInteractionListWidget.OnInteractionTriggerDisappear // (Final|Native|Protected|HasOutParms) // @ game+0x2815260
	void OnInteractionTriggerAppear(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.SolarInteractionListWidget.OnInteractionTriggerAppear // (Final|Native|Protected|HasOutParms) // @ game+0x2815130
	void OnHideInteractionListRequested(); // Function Solarland.SolarInteractionListWidget.OnHideInteractionListRequested // (Final|Native|Protected) // @ game+0x28150f0
	void OnCancelHideInteractionListRequested(); // Function Solarland.SolarInteractionListWidget.OnCancelHideInteractionListRequested // (Final|Native|Protected) // @ game+0x2814ef0
};

// Class Solarland.SolarInteractionOpenAirdropWidget
// Size: 0x430 (Inherited: 0x418)
struct USolarInteractionOpenAirdropWidget : USolarInteractionItemWidget {
	char pad_418[0x8]; // 0x418(0x08)
	struct USolarBattleModel* BattleViewModel; // 0x420(0x08)
	char pad_428[0x8]; // 0x428(0x08)

	void UpdateProgress(struct ASolarTreasureBoxActor* InBoxActor, float InProgress); // Function Solarland.SolarInteractionOpenAirdropWidget.UpdateProgress // (Final|Native|Protected) // @ game+0x2815b70
	void UnBindDelegates(); // Function Solarland.SolarInteractionOpenAirdropWidget.UnBindDelegates // (Final|Native|Protected) // @ game+0x9043b0
	bool TryOpenAirdropBox(); // Function Solarland.SolarInteractionOpenAirdropWidget.TryOpenAirdropBox // (Final|Native|Protected) // @ game+0x2815b40
	void SetTBoxActor(struct ASolarTreasureBoxActor* InBoxActor); // Function Solarland.SolarInteractionOpenAirdropWidget.SetTBoxActor // (Final|Native|Protected) // @ game+0x2815a90
	void SetSelfVisibility(bool InShow); // Function Solarland.SolarInteractionOpenAirdropWidget.SetSelfVisibility // (Final|Native|Protected) // @ game+0x2815a00
	void SetAirdropBoxActor(struct AActor* InBoxActor); // Function Solarland.SolarInteractionOpenAirdropWidget.SetAirdropBoxActor // (Final|Native|Protected) // @ game+0x28158e0
	void RefreshToSelfOpening(); // Function Solarland.SolarInteractionOpenAirdropWidget.RefreshToSelfOpening // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshToOtherOpening(); // Function Solarland.SolarInteractionOpenAirdropWidget.RefreshToOtherOpening // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshToCanOpen(); // Function Solarland.SolarInteractionOpenAirdropWidget.RefreshToCanOpen // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshProgressDisplay(float Progress, float InMaxOpenTime); // Function Solarland.SolarInteractionOpenAirdropWidget.RefreshProgressDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnPressCancelButtonPC(); // Function Solarland.SolarInteractionOpenAirdropWidget.OnPressCancelButtonPC // (Final|Native|Protected) // @ game+0x2815450
	bool OnPressButtonPC(); // Function Solarland.SolarInteractionOpenAirdropWidget.OnPressButtonPC // (Final|Native|Protected) // @ game+0x2815490
	void OnPressButtonOpen(); // Function Solarland.SolarInteractionOpenAirdropWidget.OnPressButtonOpen // (Final|Native|Protected|BlueprintCallable) // @ game+0x2815470
	void OnPressButtonCancel(); // Function Solarland.SolarInteractionOpenAirdropWidget.OnPressButtonCancel // (Final|Native|Protected|BlueprintCallable) // @ game+0x2815450
	void OnOpenCharacterChanged(struct AAirDropTreasureBox* InBoxActor); // Function Solarland.SolarInteractionOpenAirdropWidget.OnOpenCharacterChanged // (Final|Native|Protected) // @ game+0x28153c0
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.SolarInteractionOpenAirdropWidget.OnDrivingStateChanged // (Final|Native|Protected) // @ game+0x2814fa0
	void OnBtnActiveChanged(bool Inactive); // Function Solarland.SolarInteractionOpenAirdropWidget.OnBtnActiveChanged // (Final|Native|Protected) // @ game+0x26446a0
	void OnAirdropProgressChanged(struct AAirDropTreasureBox* InBoxActor); // Function Solarland.SolarInteractionOpenAirdropWidget.OnAirdropProgressChanged // (Final|Native|Protected) // @ game+0x2814d90
	void HideSelfByThisID(int64_t InThisID); // Function Solarland.SolarInteractionOpenAirdropWidget.HideSelfByThisID // (Final|Native|Protected) // @ game+0x2814ce0
	void ForceCancel(); // Function Solarland.SolarInteractionOpenAirdropWidget.ForceCancel // (Final|Native|Protected) // @ game+0x2814ca0
	bool BSameThisID(int64_t InThisID); // Function Solarland.SolarInteractionOpenAirdropWidget.BSameThisID // (Final|Native|Protected) // @ game+0x2814be0
	void BindDelegates(); // Function Solarland.SolarInteractionOpenAirdropWidget.BindDelegates // (Final|Native|Protected) // @ game+0x2814c80
};

// Class Solarland.SolarInteractionRescueTeammateWidget
// Size: 0x470 (Inherited: 0x418)
struct USolarInteractionRescueTeammateWidget : USolarInteractionItemWidget {
	int32_t FastReliefSkillCharacterID; // 0x418(0x04)
	char pad_41C[0x54]; // 0x41c(0x54)

	void WrappedStopCountDownProgress(int32_t InActionID); // Function Solarland.SolarInteractionRescueTeammateWidget.WrappedStopCountDownProgress // (Final|Native|Protected) // @ game+0x2815ec0
	void WrappedStartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionRescueTeammateWidget.WrappedStartCountDownProgress // (Final|Native|Protected|HasOutParms) // @ game+0x2815c40
	void StopCountDownProgress(int32_t InActionID); // Function Solarland.SolarInteractionRescueTeammateWidget.StopCountDownProgress // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void StartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionRescueTeammateWidget.StartCountDownProgress // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshToPreInteracting(); // Function Solarland.SolarInteractionRescueTeammateWidget.RefreshToPreInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshToNonCancellableInteracting(); // Function Solarland.SolarInteractionRescueTeammateWidget.RefreshToNonCancellableInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshToCancellableInteracting(); // Function Solarland.SolarInteractionRescueTeammateWidget.RefreshToCancellableInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnRescueButtonVisibilitySet(bool bShow); // Function Solarland.SolarInteractionRescueTeammateWidget.OnRescueButtonVisibilitySet // (Final|Native|Protected) // @ game+0x2815560
	void OnRescueButtonClicked(); // Function Solarland.SolarInteractionRescueTeammateWidget.OnRescueButtonClicked // (Final|Native|Protected|BlueprintCallable) // @ game+0x26fe0f0
	void OnProgressiveInteractCompleted(); // Function Solarland.SolarInteractionRescueTeammateWidget.OnProgressiveInteractCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x2815500
	void OnProgressiveInteractCanceled(); // Function Solarland.SolarInteractionRescueTeammateWidget.OnProgressiveInteractCanceled // (Final|Native|Protected|BlueprintCallable) // @ game+0x28154c0
	void OnCharacterIDSet(int32_t InCharacterId); // Function Solarland.SolarInteractionRescueTeammateWidget.OnCharacterIDSet // (Final|Native|Protected) // @ game+0x2814f10
	void EnablePassiveBuffDisplay(int32_t CharacterId, int32_t LocalTextId); // Function Solarland.SolarInteractionRescueTeammateWidget.EnablePassiveBuffDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void DisablePassiveBuffDisplay(); // Function Solarland.SolarInteractionRescueTeammateWidget.DisablePassiveBuffDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarInteractionTriggerWidget
// Size: 0x4a8 (Inherited: 0x418)
struct USolarInteractionTriggerWidget : USolarInteractionItemWidget {
	char pad_418[0x90]; // 0x418(0x90)

	void WrappedStopCountDownProgress(int32_t InActionID); // Function Solarland.SolarInteractionTriggerWidget.WrappedStopCountDownProgress // (Final|Native|Public) // @ game+0x2815f50
	void WrappedStartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionTriggerWidget.WrappedStartCountDownProgress // (Final|Native|Public|HasOutParms) // @ game+0x2815d80
	void StopCountDownProgress(int32_t InActionID); // Function Solarland.SolarInteractionTriggerWidget.StopCountDownProgress // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void StartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionTriggerWidget.StartCountDownProgress // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshToPreInteracting(); // Function Solarland.SolarInteractionTriggerWidget.RefreshToPreInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshToNonCancellableInteracting(); // Function Solarland.SolarInteractionTriggerWidget.RefreshToNonCancellableInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshToCancellableInteracting(); // Function Solarland.SolarInteractionTriggerWidget.RefreshToCancellableInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnProgressiveInteractCompleted(); // Function Solarland.SolarInteractionTriggerWidget.OnProgressiveInteractCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x2815520
	void OnProgressiveInteractCanceled(); // Function Solarland.SolarInteractionTriggerWidget.OnProgressiveInteractCanceled // (Final|Native|Protected|BlueprintCallable) // @ game+0x28154e0
	void OnInteractButtonTriggered(); // Function Solarland.SolarInteractionTriggerWidget.OnInteractButtonTriggered // (Final|Native|Protected|BlueprintCallable) // @ game+0x2815110
	void InitByTriggerInfo(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.SolarInteractionTriggerWidget.InitByTriggerInfo // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void EnablePassiveBuffDisplay(int32_t CharacterId, int32_t LocalTextId); // Function Solarland.SolarInteractionTriggerWidget.EnablePassiveBuffDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void EnableButonEnterCD(float CD); // Function Solarland.SolarInteractionTriggerWidget.EnableButonEnterCD // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void DisablePassiveBuffDisplay(); // Function Solarland.SolarInteractionTriggerWidget.DisablePassiveBuffDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	bool CanTriggerInteract(); // Function Solarland.SolarInteractionTriggerWidget.CanTriggerInteract // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarInteractionVolume
// Size: 0x250 (Inherited: 0x230)
struct ASolarInteractionVolume : ATriggerBox {
	char pad_230[0x18]; // 0x230(0x18)
	bool DisableInteractionVolume; // 0x248(0x01)
	bool DebugDrawVolume; // 0x249(0x01)
	char pad_24A[0x6]; // 0x24a(0x06)

	void OnEndOverlap(struct AActor* ThisActor, struct AActor* OtherActor); // Function Solarland.SolarInteractionVolume.OnEndOverlap // (Final|Native|Public) // @ game+0x2815020
	void OnBeginOverlap(struct AActor* ThisActor, struct AActor* OtherActor); // Function Solarland.SolarInteractionVolume.OnBeginOverlap // (Final|Native|Public) // @ game+0x2814e20
};

// Class Solarland.SolarIrisSettings
// Size: 0x78 (Inherited: 0x38)
struct USolarIrisSettings : UDeveloperSettings {
	struct FString BaseURL; // 0x38(0x10)
	struct FString GameID; // 0x48(0x10)
	struct FString RegionID; // 0x58(0x10)
	struct FString KeyStr; // 0x68(0x10)
};

// Class Solarland.SolarIronManVehicle
// Size: 0x18e0 (Inherited: 0x13e0)
struct ASolarIronManVehicle : ASolarHoverVehicle {
	struct FName LeftHandSocket; // 0x13e0(0x08)
	struct FName RightHandSocket; // 0x13e8(0x08)
	struct FName LeftFootSocket; // 0x13f0(0x08)
	struct FName RightFootSocket; // 0x13f8(0x08)
	struct FName BackPackSocket; // 0x1400(0x08)
	struct TSoftObjectPtr<UAnimMontage> RotationLaserMontage; // 0x1408(0x28)
	struct FVector BoxHalfSize; // 0x1430(0x0c)
	int32_t QuerySameActorMaxNum; // 0x143c(0x04)
	float VehicleSpeedThresholdFromStandToLie; // 0x1440(0x04)
	char pad_1444[0xc]; // 0x1444(0x0c)
	struct FVehicleVFX LeftHandBulletEffect; // 0x1450(0x90)
	struct FVehicleVFX LeftHandMuzzleEffect; // 0x14e0(0x90)
	struct FVehicleVFX RightHandBulletEffect; // 0x1570(0x90)
	struct FVehicleVFX RightHandMuzzleEffect; // 0x1600(0x90)
	struct FVehicleVFX HitEffect; // 0x1690(0x90)
	struct TArray<struct FVehicleVFX> IronManJetEffectInfo; // 0x1720(0x10)
	struct TArray<enum class ECollisionChannel> HitDecalExceptObjTypes; // 0x1730(0x10)
	struct TSoftObjectPtr<UParticleSystem> HitDecalParticle; // 0x1740(0x28)
	struct FVector HitDecalScale; // 0x1768(0x0c)
	float HitDecalInterval; // 0x1774(0x04)
	float HitDecalBeginTime; // 0x1778(0x04)
	float HitDecalEndTime; // 0x177c(0x04)
	float HitDecalLength; // 0x1780(0x04)
	char pad_1784[0x4]; // 0x1784(0x04)
	float SmoothRotationSpeed; // 0x1788(0x04)
	float MaxJetEffectFXkgValue; // 0x178c(0x04)
	struct FName JetEffectFXkgName; // 0x1790(0x08)
	struct UGameplayEffect* CanNotSwitchSeat; // 0x1798(0x08)
	char pad_17A0[0x50]; // 0x17a0(0x50)
	struct UStaticMesh* IronManStaticMeshWithDriver; // 0x17f0(0x08)
	struct UStaticMesh* IronManStaticMeshWithNoDriver; // 0x17f8(0x08)
	float MaxSpeedAfterCollision; // 0x1800(0x04)
	bool bAddRiderSeat; // 0x1804(0x01)
	char pad_1805[0x3]; // 0x1805(0x03)
	struct FVehicleSeatSlot RiderSeatSlot; // 0x1808(0xd8)
};

// Class Solarland.SolarIronManVehicleAnimInstance
// Size: 0x4c0 (Inherited: 0x380)
struct USolarIronManVehicleAnimInstance : USolarHoverVehicleAnimInstance {
	struct TMap<struct FName, struct FTransform> SocketToTransform; // 0x380(0x50)
	struct FTransform LeftHandTransform; // 0x3d0(0x30)
	struct FTransform RightHandTransform; // 0x400(0x30)
	struct FTransform LeftFootTransform; // 0x430(0x30)
	struct FTransform RightFootTransform; // 0x460(0x30)
	struct FTransform BackPackTransform; // 0x490(0x30)
};

// Class Solarland.SolarItemBurstShowComponent
// Size: 0x3f0 (Inherited: 0x320)
struct USolarItemBurstShowComponent : USceneComponent {
	char pad_320[0x20]; // 0x320(0x20)
	bool bLandedOnServer; // 0x340(0x01)
	char pad_341[0x3]; // 0x341(0x03)
	float BurstTimeTotal; // 0x344(0x04)
	struct FSyncBurstItemParam BurstItemParam; // 0x348(0x28)
	char pad_370[0x80]; // 0x370(0x80)

	void OnRep_BurstItemParam(); // Function Solarland.SolarItemBurstShowComponent.OnRep_BurstItemParam // (Final|Native|Protected) // @ game+0x2815540
};

// Class Solarland.SolarItemCardViewWidget
// Size: 0x410 (Inherited: 0x400)
struct USolarItemCardViewWidget : USolarUserWidget {
	enum class ESolarItemQualityType QualityType; // 0x400(0x01)
	enum class ESolarItemSelectType SelectType; // 0x401(0x01)
	enum class ESolarItemLockType LockType; // 0x402(0x01)
	enum class ESolarItemDownloadType DownloadType; // 0x403(0x01)
	enum class ESolarItemMarkType MarkType; // 0x404(0x01)
	enum class ESolarItemLimitType LimitType; // 0x405(0x01)
	enum class ESolarItemUseType UseType; // 0x406(0x01)
	enum class ESolarItemBuyType BuyType; // 0x407(0x01)
	enum class ESolarItemOwnType OwnType; // 0x408(0x01)
	enum class ESolarRedHintType RedHintType; // 0x409(0x01)
	enum class ESolarItemShowType ShowType; // 0x40a(0x01)
	enum class EClassType CharacterBuildType; // 0x40b(0x01)
	enum class ESolarItemPrivilegeType PrivilegeType; // 0x40c(0x01)
	char pad_40D[0x3]; // 0x40d(0x03)

	void ReflashItemView(); // Function Solarland.SolarItemCardViewWidget.ReflashItemView // (Final|Native|Public|BlueprintCallable) // @ game+0x28158c0
	void OnUseChanged(enum class ESolarItemUseType InType); // Function Solarland.SolarItemCardViewWidget.OnUseChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnShowTypeChanged(enum class ESolarItemShowType InType); // Function Solarland.SolarItemCardViewWidget.OnShowTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnSelectedChanged(enum class ESolarItemSelectType InType); // Function Solarland.SolarItemCardViewWidget.OnSelectedChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnrRedHintChanged(enum class ESolarRedHintType InType); // Function Solarland.SolarItemCardViewWidget.OnrRedHintChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnQualityChanged(enum class ESolarItemQualityType InType); // Function Solarland.SolarItemCardViewWidget.OnQualityChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnPrivilegeTypeChanged(enum class ESolarItemPrivilegeType InType); // Function Solarland.SolarItemCardViewWidget.OnPrivilegeTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnOwnChanged(enum class ESolarItemOwnType InType); // Function Solarland.SolarItemCardViewWidget.OnOwnChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnMarkedChanged(enum class ESolarItemMarkType InType); // Function Solarland.SolarItemCardViewWidget.OnMarkedChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnLockedChanged(enum class ESolarItemLockType InType); // Function Solarland.SolarItemCardViewWidget.OnLockedChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnLimitChanged(enum class ESolarItemLimitType InType); // Function Solarland.SolarItemCardViewWidget.OnLimitChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnDownloadedChanged(enum class ESolarItemDownloadType InType); // Function Solarland.SolarItemCardViewWidget.OnDownloadedChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnBuyChanged(enum class ESolarItemBuyType InType); // Function Solarland.SolarItemCardViewWidget.OnBuyChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnBuildTypeChanged(enum class EClassType InType); // Function Solarland.SolarItemCardViewWidget.OnBuildTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarItemComponent
// Size: 0xc0 (Inherited: 0xb0)
struct USolarItemComponent : UActorComponent {
	struct ASolarCharacter* OwnerChara; // 0xb0(0x08)
	char pad_B8[0x8]; // 0xb8(0x08)

	void UseItemRequestLuaCall(int32_t ItemID, int32_t Num); // Function Solarland.SolarItemComponent.UseItemRequestLuaCall // (Final|Native|Public) // @ game+0x2828370
	void OnPlayerBackpackItemUpdate(); // Function Solarland.SolarItemComponent.OnPlayerBackpackItemUpdate // (Final|Native|Public) // @ game+0x2827100
	bool CanUseMedicine(); // Function Solarland.SolarItemComponent.CanUseMedicine // (Final|Native|Public) // @ game+0x2823af0
};

// Class Solarland.SolarItemInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarItemInterface : UInterface {
};

// Class Solarland.SolarItemManager
// Size: 0x718 (Inherited: 0x28)
struct USolarItemManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct ASolarItemRootActor* RootActor; // 0x30(0x08)
	struct TMap<int32_t, struct TWeakObjectPtr<struct AActor>> SpawnedActors; // 0x38(0x50)
	char pad_88[0x50]; // 0x88(0x50)
	struct TArray<struct ASolarItemSpawner*> ItemSpawners; // 0xd8(0x10)
	struct TArray<struct ASolarItemSpawner*> NSItemSpanwers; // 0xe8(0x10)
	struct ASolarVehicleSpawnerSets* SolarVehicleSpawnerSets; // 0xf8(0x08)
	char pad_100[0x50]; // 0x100(0x50)
	struct TMap<int32_t, struct ASolarItemSpawner*> ItemSpawnersMap; // 0x150(0x50)
	struct TMap<int32_t, struct ASolarAirDropSpawner*> AirDropSpawnersMap; // 0x1a0(0x50)
	struct TMap<int32_t, struct FSolarItemSpawnerArray> NSItemSpawnerMap; // 0x1f0(0x50)
	struct TMap<int32_t, struct FOutcomeData> ItemOutcomeDatas; // 0x240(0x50)
	struct TMap<int32_t, struct FOutcomeDataCollection> OutcomeCollection; // 0x290(0x50)
	struct TMap<int32_t, struct FSimpleDropItemDataCollection> OriginDropItemDatas; // 0x2e0(0x50)
	struct TMap<int32_t, struct FFinalDropDataCollection> AirDropItemDatas; // 0x330(0x50)
	struct TMap<int32_t, int32_t> AirDropChestIndexMap; // 0x380(0x50)
	struct TMap<int32_t, int32_t> UsedAirDropChestIndexMap; // 0x3d0(0x50)
	struct TMap<int32_t, int32_t> MaxPileMap; // 0x420(0x50)
	struct FRandomStream ItemStream; // 0x470(0x08)
	float DelaySpawnTime; // 0x478(0x04)
	char pad_47C[0x4]; // 0x47c(0x04)
	struct TArray<struct FString> SubLevelNames; // 0x480(0x10)
	bool BInitSpawner; // 0x490(0x01)
	bool BSpawnerDestoryed; // 0x491(0x01)
	char pad_492[0x6]; // 0x492(0x06)
	struct FTimerHandle ItemInitSpawnerHandle; // 0x498(0x08)
	float DelayInitSpawnerTime; // 0x4a0(0x04)
	char pad_4A4[0x4]; // 0x4a4(0x04)
	struct FTimerHandle ItemLoopSpawnHandle; // 0x4a8(0x08)
	float SpawnLoopInterval; // 0x4b0(0x04)
	float SpawnMinDisSquared; // 0x4b4(0x04)
	float SpawnMaxHeightOffset; // 0x4b8(0x04)
	float ChestSpawnMinDisSquared; // 0x4bc(0x04)
	float VehicleSpawnMinDisSquared; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)
	struct UDataTable* ItemResReferenceTable; // 0x4c8(0x08)
	struct FString ItemResReferenceTablePath; // 0x4d0(0x10)
	char pad_4E0[0x38]; // 0x4e0(0x38)
	bool BOpenLog; // 0x518(0x01)
	char pad_519[0x3]; // 0x519(0x03)
	int32_t FirstSpawnerIndex; // 0x51c(0x04)
	int32_t FirstTBoxIndex; // 0x520(0x04)
	int32_t FirstAirDropIndex; // 0x524(0x04)
	int32_t FirstVehicleIndex; // 0x528(0x04)
	int32_t ChestKeyCode; // 0x52c(0x04)
	int32_t Level1OutcomeID; // 0x530(0x04)
	int32_t Level2OutcomeID; // 0x534(0x04)
	int32_t Level3OutcomeID; // 0x538(0x04)
	char pad_53C[0xd4]; // 0x53c(0xd4)
	struct TMap<int32_t, enum class EItemType> ItemID2Types; // 0x610(0x50)
	char pad_660[0x10]; // 0x660(0x10)
	int64_t ThisIdRefCount; // 0x670(0x08)
	int64_t ServerNowSeconds; // 0x678(0x08)
	struct FString RootActorBpPath; // 0x680(0x10)
	float CheckDropRadius; // 0x690(0x04)
	float CheckDropHeight; // 0x694(0x04)
	float DropLineTraceLength; // 0x698(0x04)
	float DropUnitOffset; // 0x69c(0x04)
	struct USolarMapManager* MapManager; // 0x6a0(0x08)
	struct TArray<struct ASolarAirDropSpawner*> ActiveAirDropBox; // 0x6a8(0x10)
	char pad_6B8[0x30]; // 0x6b8(0x30)
	struct TArray<struct TWeakObjectPtr<struct AAirDropTreasureBox>> AirDropsList; // 0x6e8(0x10)
	struct TArray<struct TWeakObjectPtr<struct ADeathTreasureBox>> DeathTreasureBoxList; // 0x6f8(0x10)
	char pad_708[0x10]; // 0x708(0x10)

	void UpdateItemParams(); // Function Solarland.SolarItemManager.UpdateItemParams // (Final|Native|Protected) // @ game+0x2828350
	bool TryDropAtLocation(struct ASolarCharacterBase* Owner, struct FVector& CheckPos, bool bIsDeathBox); // Function Solarland.SolarItemManager.TryDropAtLocation // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x2828220
	void SplitBurstItems(struct FSolarItemData Source, struct TArray<struct FSolarItemData>& SplitedPile); // Function Solarland.SolarItemManager.SplitBurstItems // (Final|Native|Public|HasOutParms) // @ game+0x2828050
	void SpawnTreasureBoxByID(int32_t TreasureId, struct FTransform trans, struct TArray<struct FSolarItemData> ItemsToSpawn, struct ASolarCharacter* SummonCharacter, float InSpawnDelay, float InStartHeight); // Function Solarland.SolarItemManager.SpawnTreasureBoxByID // (Final|Native|Public|HasDefaults) // @ game+0x2827d60
	void SpawnMutipleItems(struct ASolarCharacter* InCharacter, int32_t InItemID, int32_t InPerCount, int32_t InTotalCount); // Function Solarland.SolarItemManager.SpawnMutipleItems // (Final|Native|Public) // @ game+0x2827c00
	void SpawnItemsByOutcomeID(int32_t OutcomeID, struct FTransform& trans); // Function Solarland.SolarItemManager.SpawnItemsByOutcomeID // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2827ae0
	void SpawnItems(int32_t ItemID, int32_t ItemNum, struct FTransform trans); // Function Solarland.SolarItemManager.SpawnItems // (Final|Native|Public|HasDefaults) // @ game+0x2827960
	struct FSolarItemData SpawnItemData(int32_t ItemID); // Function Solarland.SolarItemManager.SpawnItemData // (Final|Native|Public) // @ game+0x2827850
	void SpawnDeathBox(struct ASolarCharacterBase* Owner, struct FRotator& Rotator, struct TArray<struct FSolarItemData>& DataTarray, int32_t& DeathBoxId, struct TArray<struct ASolarPlayerWeapon*>& DeathBoxWeaponArray, float& CurrEnergyValue, float& CurrExtraEnergyValue, int32_t& MonsterID); // Function Solarland.SolarItemManager.SpawnDeathBox // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2827500
	void SpawnAirDropByID(int32_t ChestID, struct FVector Location, struct TArray<struct FSolarItemData> ItemsToSpawn); // Function Solarland.SolarItemManager.SpawnAirDropByID // (Final|Native|Public|HasDefaults) // @ game+0x2827350
	void ServerAddExtraGlobalOutcome(struct TArray<int32_t>& InExtraIDs); // Function Solarland.SolarItemManager.ServerAddExtraGlobalOutcome // (Final|Native|Public|HasOutParms) // @ game+0x28272a0
	void ResetThisID(); // Function Solarland.SolarItemManager.ResetThisID // (Final|Native|Public) // @ game+0x2827280
	bool RefreshOutcomePoolContent(struct FOutcomeData& InOutcomeData); // Function Solarland.SolarItemManager.RefreshOutcomePoolContent // (Final|Native|Public|HasOutParms) // @ game+0x28271b0
	void OnUpdateServerNowSeconds(int32_t InNowSeconds); // Function Solarland.SolarItemManager.OnUpdateServerNowSeconds // (Final|Native|Public) // @ game+0x2827120
	void OnCustomGameStateChanged(enum class ESCMInGameState InNewState); // Function Solarland.SolarItemManager.OnCustomGameStateChanged // (Final|Native|Public) // @ game+0x2827080
	void OnAsyncLoadTreasureBoxComplete(struct FSoftClassPath SClassPath, struct FSolarItemData BoxItemData, struct TArray<struct FSolarItemData> ItemDataList, struct FTransform trans, struct ASolarCharacter* InCharacter, float InSpawnDelay, float InStartHeight); // Function Solarland.SolarItemManager.OnAsyncLoadTreasureBoxComplete // (Final|Native|Protected|HasDefaults) // @ game+0x2826c30
	void OnAsyncLoadItemComplete(struct FSoftClassPath SClassPath, struct FSolarItemData ItemData, struct FTransform trans); // Function Solarland.SolarItemManager.OnAsyncLoadItemComplete // (Final|Native|Protected|HasDefaults) // @ game+0x28269b0
	void OnAsyncLoadDiscardItemComplete(struct FSoftClassPath SClassPath, struct ASolarCharacter* Owner, struct FSolarItemData ItemData); // Function Solarland.SolarItemManager.OnAsyncLoadDiscardItemComplete // (Final|Native|Protected|HasDefaults) // @ game+0x28267b0
	void OnAsyncLoadDeathBoxComplete(struct UObject* DeathBoxClass, struct ASolarCharacterBase* Owner, struct FRotator Rotator, struct TArray<struct FSolarItemData> DataTarray, struct FSolarItemData DeathBoxData, struct TArray<struct ASolarPlayerWeapon*> DeathBoxWeaponArray, float CurrEnergyValue, float CurrExtraEnergyValue, int32_t MonsterID); // Function Solarland.SolarItemManager.OnAsyncLoadDeathBoxComplete // (Final|Native|Protected|HasDefaults) // @ game+0x2826360
	void OnAsyncLoadAirdropComplete(struct FSoftClassPath SClassPath, struct FSolarItemData BoxItemData, struct TArray<struct FSolarItemData> ItemDataList, struct FVector Location); // Function Solarland.SolarItemManager.OnAsyncLoadAirdropComplete // (Final|Native|Protected|HasDefaults) // @ game+0x2826070
	void NotifySpawnerDestroy(); // Function Solarland.SolarItemManager.NotifySpawnerDestroy // (Final|Native|Public) // @ game+0x9043b0
	void NotifyAvailableAirDropsNumChanged(); // Function Solarland.SolarItemManager.NotifyAvailableAirDropsNumChanged // (Final|Native|Public) // @ game+0x2826050
	void NotifyAirDropOpened(); // Function Solarland.SolarItemManager.NotifyAirDropOpened // (Final|Native|Public) // @ game+0x2826030
	void NetStartAirDrops(int32_t SpawnerID, int32_t ChestID); // Function Solarland.SolarItemManager.NetStartAirDrops // (Final|Native|Public) // @ game+0x2825f60
	bool NetRunSpecOutcomesAndItems(struct TMap<int32_t, int32_t>& InOutcomeMap, struct TMap<int32_t, int32_t>& InItemMap, struct TArray<struct FSolarItemData>& OutItemArray); // Function Solarland.SolarItemManager.NetRunSpecOutcomesAndItems // (Final|Native|Public|HasOutParms) // @ game+0x2825bd0
	bool NetRunSpecOutcome(int32_t InData, struct TArray<struct FSolarItemData>& OutItemArray); // Function Solarland.SolarItemManager.NetRunSpecOutcome // (Final|Native|Public|HasOutParms) // @ game+0x2825a70
	void NetRunGlobalDrop(); // Function Solarland.SolarItemManager.NetRunGlobalDrop // (Final|Native|Public) // @ game+0x2825a50
	void NetRunDrop(enum class ESpawnStage InSpecifiedStage); // Function Solarland.SolarItemManager.NetRunDrop // (Final|Native|Public) // @ game+0x28259d0
	bool NetDropOutcomeContent(int32_t TargetContentID, struct FOutcomeData& OutcomeData, struct TMap<int32_t, struct FSimpleDropItemDataCollection>& InDropItemDatas, bool fromSpawner, struct FTransform& trans); // Function Solarland.SolarItemManager.NetDropOutcomeContent // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2825740
	bool NetDropOutcome(struct FOutcomeData& OutcomeData, int32_t& OutTargetContentID); // Function Solarland.SolarItemManager.NetDropOutcome // (Final|Native|Public|HasOutParms) // @ game+0x2825620
	void NetDropGlobalOutcome(struct FGlobalOutcomeData& GlobalOutcomeData); // Function Solarland.SolarItemManager.NetDropGlobalOutcome // (Final|Native|Public|HasOutParms) // @ game+0x2825470
	void LoadSpawnerLevelComplete(); // Function Solarland.SolarItemManager.LoadSpawnerLevelComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x2825450
	void LoadItemSpawnerLevels(); // Function Solarland.SolarItemManager.LoadItemSpawnerLevels // (Final|Native|Public|BlueprintCallable) // @ game+0x2825430
	bool IsPosBlocked(struct FVector& CheckPos); // Function Solarland.SolarItemManager.IsPosBlocked // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x2825390
	bool IsInSafeArea(struct FVector& Location); // Function Solarland.SolarItemManager.IsInSafeArea // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x28252f0
	void InitWeaponPartLevel(struct FSolarItemData& InItemData); // Function Solarland.SolarItemManager.InitWeaponPartLevel // (Final|Native|Public|HasOutParms) // @ game+0x2825200
	void InitWeaponLevel(struct FSolarItemData& InItemData); // Function Solarland.SolarItemManager.InitWeaponLevel // (Final|Native|Public|HasOutParms) // @ game+0x2825110
	void InitItemDataShieldValue(struct FSolarItemData& InItemData); // Function Solarland.SolarItemManager.InitItemDataShieldValue // (Final|Native|Public|HasOutParms) // @ game+0x2825020
	int64_t IncreaseThisID(); // Function Solarland.SolarItemManager.IncreaseThisID // (Final|Native|Public) // @ game+0x2824ff0
	int32_t GetVehicleGroupIDByVehicleID(int32_t InVehicleID); // Function Solarland.SolarItemManager.GetVehicleGroupIDByVehicleID // (Final|Native|Static|Public) // @ game+0x2824f60
	struct FSolarVehicleData GetVehicleConfigData(int32_t InVehicleID); // Function Solarland.SolarItemManager.GetVehicleConfigData // (Final|Native|Static|Public) // @ game+0x2824e90
	int32_t GetServerNowSeconds(); // Function Solarland.SolarItemManager.GetServerNowSeconds // (Final|Native|Public) // @ game+0x2824e60
	int32_t GetRankSeasonID(); // Function Solarland.SolarItemManager.GetRankSeasonID // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetRandomIDInMap(int32_t TotalWeight, struct TMap<int32_t, int32_t>& WeightIDMap); // Function Solarland.SolarItemManager.GetRandomIDInMap // (Final|Native|Public|HasOutParms) // @ game+0x2824c90
	int32_t GetRandomAirDropIDInMap(); // Function Solarland.SolarItemManager.GetRandomAirDropIDInMap // (Final|Native|Public) // @ game+0x2824c60
	int32_t GetOutcomeIdByTreasureBoxId(int32_t TreasureBoxID); // Function Solarland.SolarItemManager.GetOutcomeIdByTreasureBoxId // (Final|Native|Public) // @ game+0x2824bc0
	struct FOutcomeData GetOutcomeDataByID(int32_t OutcomeID); // Function Solarland.SolarItemManager.GetOutcomeDataByID // (Final|Native|Public) // @ game+0x2824af0
	struct FOutcomeContentData GetOutcomeContentDataByID(int32_t ContentID); // Function Solarland.SolarItemManager.GetOutcomeContentDataByID // (Final|Native|Public) // @ game+0x28249c0
	bool GetItemResReference(int32_t InItemID, struct FItemResReference& OutData); // Function Solarland.SolarItemManager.GetItemResReference // (Final|Native|Public|HasOutParms) // @ game+0x2824890
	int32_t GetItemPrize(int32_t InItemID); // Function Solarland.SolarItemManager.GetItemPrize // (Final|Native|Public) // @ game+0x28247f0
	int32_t GetItemMaxPileByID(int32_t InItemID); // Function Solarland.SolarItemManager.GetItemMaxPileByID // (Final|Native|Public) // @ game+0x2824750
	bool GetGlobalOutcomeData(int32_t GamePlayMode, struct TArray<struct FGlobalOutcomeData>& GlobalOutcomeDatas); // Function Solarland.SolarItemManager.GetGlobalOutcomeData // (Final|Native|Public|HasOutParms) // @ game+0x2824620
	int32_t GetEntryID(); // Function Solarland.SolarItemManager.GetEntryID // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool GetCurrItemSubLevels(struct FString InMapName, struct TArray<struct FString>& OutSubLevelNames); // Function Solarland.SolarItemManager.GetCurrItemSubLevels // (Final|Native|Public|HasOutParms) // @ game+0x28244f0
	struct FOutcomeData GetCookedOutcomeDataByID(int32_t OutcomeID); // Function Solarland.SolarItemManager.GetCookedOutcomeDataByID // (Final|Native|Public) // @ game+0x2824420
	bool GetChestsFromChestSpawn(int32_t ChestSpawnID, struct TArray<int32_t>& ChestIDs); // Function Solarland.SolarItemManager.GetChestsFromChestSpawn // (Final|Native|Public|HasOutParms) // @ game+0x2824320
	int32_t GetAvailableAirDropsNum(); // Function Solarland.SolarItemManager.GetAvailableAirDropsNum // (Final|Native|Public) // @ game+0x28242f0
	bool GetAirDropChestIDsByGamePlayMode(int32_t GamePlayMode, struct TArray<int32_t>& ChestIDs); // Function Solarland.SolarItemManager.GetAirDropChestIDsByGamePlayMode // (Final|Native|Public|HasOutParms) // @ game+0x28241f0
	struct TArray<struct ASolarAirDropSpawner*> GetActiveAirDropBox(); // Function Solarland.SolarItemManager.GetActiveAirDropBox // (Final|Native|Public|BlueprintCallable) // @ game+0x2824170
	void FindTransformForBoxItem(struct ASolarTreasureBoxActor* TargetActor, struct FTransform& InTrans, bool bUseNewLocation); // Function Solarland.SolarItemManager.FindTransformForBoxItem // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2824010
	struct FRotator FindRotationForDropItem(struct AActor* TargetActor, struct FVector& FindTargetPos); // Function Solarland.SolarItemManager.FindRotationForDropItem // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2823f20
	bool FindPosForDropItem(struct ASolarCharacterBase* Owner, struct FVector& FindTargetPos, bool bPreferCenter, bool bIsDeathBox); // Function Solarland.SolarItemManager.FindPosForDropItem // (Final|Native|Private|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2823d90
	struct FSolarItemData CreateItemDataByKey(int32_t InItemID); // Function Solarland.SolarItemManager.CreateItemDataByKey // (Final|Native|Public) // @ game+0x2823c80
	void ConvertToItemdataAndSetToSpawners(); // Function Solarland.SolarItemManager.ConvertToItemdataAndSetToSpawners // (Final|Native|Public) // @ game+0x2823c60
	void ClearSpawnLoopTimer(); // Function Solarland.SolarItemManager.ClearSpawnLoopTimer // (Final|Native|Public) // @ game+0x2823c40
	void CheckSpawnItemByDis(); // Function Solarland.SolarItemManager.CheckSpawnItemByDis // (Final|Native|Public) // @ game+0x2823c20
	bool CheckPointInCircle(struct FVector2D Center, float Radius, struct FVector2D PlayerPoint); // Function Solarland.SolarItemManager.CheckPointInCircle // (Final|Native|Public|HasDefaults) // @ game+0x2823b20
	void AddOneDropDataToTempDatas(int32_t SpawnerID, int32_t InItemID, int32_t InItemNum, struct TMap<int32_t, struct FSimpleDropItemDataCollection>& InDropItemDatas); // Function Solarland.SolarItemManager.AddOneDropDataToTempDatas // (Final|Native|Public|HasOutParms) // @ game+0x2823930
	bool AddExtraGlobalOutcomeData(struct TArray<int32_t> InExtraGlobalOutcomeIDs, struct TArray<struct FGlobalOutcomeData>& GlobalOutcomeDatas); // Function Solarland.SolarItemManager.AddExtraGlobalOutcomeData // (Final|Native|Public|HasOutParms) // @ game+0x28237a0
	void AddAirDropToList(struct AAirDropTreasureBox* AirDrop); // Function Solarland.SolarItemManager.AddAirDropToList // (Final|Native|Public) // @ game+0x2823710
};

// Class Solarland.SolarItemResourceDataTable
// Size: 0xc8 (Inherited: 0xc8)
struct USolarItemResourceDataTable : UDataTable {
};

// Class Solarland.SolarItemRootActor
// Size: 0x240 (Inherited: 0x228)
struct ASolarItemRootActor : AActor {
	int32_t MAX_LOAD_NUM; // 0x228(0x04)
	int32_t MAX_SPAWN_NUM; // 0x22c(0x04)
	int32_t CurrLoadNum; // 0x230(0x04)
	int32_t CurrSpawnNum; // 0x234(0x04)
	int32_t TempFrame; // 0x238(0x04)
	int32_t FrameInterval; // 0x23c(0x04)
};

// Class Solarland.SolarJoyStick
// Size: 0x1e0 (Inherited: 0x138)
struct USolarJoyStick : UWidget {
	struct FSolarVirtualInput VirtualActionInput; // 0x138(0x20)
	struct FSolarVirtualInput VirtualAxisXInput; // 0x158(0x20)
	struct FSolarVirtualInput VirtualAxisYInput; // 0x178(0x20)
	struct FMulticastInlineDelegate OnTouchPressed; // 0x198(0x10)
	struct FMulticastInlineDelegate OnTouchReleased; // 0x1a8(0x10)
	struct FMulticastInlineDelegate OnTouchMoveX; // 0x1b8(0x10)
	struct FMulticastInlineDelegate OnTouchMoveY; // 0x1c8(0x10)
	char pad_1D8[0x8]; // 0x1d8(0x08)

	void ResetControlInput(); // Function Solarland.SolarJoyStick.ResetControlInput // (Native|Public|BlueprintCallable) // @ game+0x282abc0
};

// Class Solarland.SolarKeyMapButton
// Size: 0x630 (Inherited: 0x610)
struct USolarKeyMapButton : USolarButton {
	struct FSolarVirtualInput VirtualActionInput; // 0x608(0x20)
	bool IsFocus; // 0x628(0x01)
};

// Class Solarland.SolarLocalMessage
// Size: 0x28 (Inherited: 0x28)
struct USolarLocalMessage : ULocalMessage {
};

// Class Solarland.SolarKillEffectMessage
// Size: 0x28 (Inherited: 0x28)
struct USolarKillEffectMessage : USolarLocalMessage {
};

// Class Solarland.SolarKillNotifyMessage
// Size: 0x28 (Inherited: 0x28)
struct USolarKillNotifyMessage : USolarLocalMessage {
};

// Class Solarland.SolarlandContentStringDownloader
// Size: 0xa8 (Inherited: 0x28)
struct USolarlandContentStringDownloader : UObject {
	struct FMulticastInlineDelegate OnContentStringDownloaded; // 0x28(0x10)
	struct FMulticastInlineDelegate OnContentStringDownloading; // 0x38(0x10)
	struct FMulticastInlineDelegate OnContentStringFailed; // 0x48(0x10)
	char pad_58[0x21]; // 0x58(0x21)
	bool bForceRedownload; // 0x79(0x01)
	char pad_7A[0xa]; // 0x7a(0x0a)
	int32_t ChunkSize; // 0x84(0x04)
	char pad_88[0x20]; // 0x88(0x20)

	void StartDownload(); // Function Solarland.SolarlandContentStringDownloader.StartDownload // (Final|Native|Public|BlueprintCallable) // @ game+0x282ac20
	bool IsCurrentDownloading(); // Function Solarland.SolarlandContentStringDownloader.IsCurrentDownloading // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x903e90
};

// Class Solarland.SolarlandDownloadModule
// Size: 0x30 (Inherited: 0x30)
struct USolarlandDownloadModule : UEngineSubsystem {
};

// Class Solarland.SolarlandDownloadSetting
// Size: 0x70 (Inherited: 0x28)
struct USolarlandDownloadSetting : UObject {
	bool bPrepareDownloadWithApplocationStart; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct FString CDNURLPrefix; // 0x30(0x10)
	struct FString ExtraCDNURLPrefix; // 0x40(0x10)
	struct FString ServerListFileName; // 0x50(0x10)
	struct FString FileVersion; // 0x60(0x10)
};

// Class Solarland.SolarlandFileDownloader
// Size: 0x110 (Inherited: 0x28)
struct USolarlandFileDownloader : UObject {
	struct FMulticastInlineDelegate OnEachFileDownloaded; // 0x28(0x10)
	struct FMulticastInlineDelegate OnDownloadCompleted; // 0x38(0x10)
	struct FMulticastInlineDelegate OnEachFileDownloading; // 0x48(0x10)
	struct FMulticastInlineDelegate OnFileDownloadFailed; // 0x58(0x10)
	struct FMulticastInlineDelegate OnHashCheckFailedFileDownloader; // 0x68(0x10)
	char pad_78[0x31]; // 0x78(0x31)
	bool bForceRedownload; // 0xa9(0x01)
	char pad_AA[0x2a]; // 0xaa(0x2a)
	int32_t ChunkSize; // 0xd4(0x04)
	char pad_D8[0x38]; // 0xd8(0x38)

	void StartDownload(); // Function Solarland.SolarlandFileDownloader.StartDownload // (Final|Native|Public|BlueprintCallable) // @ game+0x282ac40
	bool IsCurrentDownloading(); // Function Solarland.SolarlandFileDownloader.IsCurrentDownloading // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x903e90
};

// Class Solarland.SolarlandPakMounter
// Size: 0x88 (Inherited: 0x28)
struct USolarlandPakMounter : UObject {
	struct FMulticastInlineDelegate OnMountCompleted; // 0x28(0x10)
	struct FMulticastInlineDelegate OnMountFailed; // 0x38(0x10)
	char pad_48[0x39]; // 0x48(0x39)
	bool bMounting; // 0x81(0x01)
	char pad_82[0x6]; // 0x82(0x06)
};

// Class Solarland.SolarLandscapeListener
// Size: 0x28 (Inherited: 0x28)
struct USolarLandscapeListener : UInterface {
};

// Class Solarland.SolarLandscapeModifier
// Size: 0x28 (Inherited: 0x28)
struct USolarLandscapeModifier : UInterface {
};

// Class Solarland.SolarLayoutUserWidget
// Size: 0x418 (Inherited: 0x400)
struct USolarLayoutUserWidget : USolarUserWidget {
	enum class ELayoutDataType SaveLayoutType; // 0x400(0x01)
	enum class ELayoutDataType LoadLayoutType; // 0x401(0x01)
	char pad_402[0x6]; // 0x402(0x06)
	struct TArray<struct FLayoutDataEntry> LayoutDataEntries; // 0x408(0x10)
};

// Class Solarland.SolarLeggedVehicleMovement
// Size: 0x9f0 (Inherited: 0x138)
struct USolarLeggedVehicleMovement : UPawnMovementComponent {
	float LandingSweepTraceDistance; // 0x138(0x04)
	float LandedVFXHeightThreshold; // 0x13c(0x04)
	struct TMap<enum class EPhysicalSurface, struct FVehicleVFX> JumpLandedVFXs; // 0x140(0x50)
	struct FVehicleLocomotionData LocomotionDatas[0x3]; // 0x190(0x54)
	float MaxControllableDegreeOffset; // 0x1e4(0x04)
	float WalkableFloorAngle; // 0x1e8(0x04)
	float GravityZ; // 0x1ec(0x04)
	bool bDelayInputForOneFrame; // 0x1f0(0x01)
	bool bEnableProceduralAnimation; // 0x1f1(0x01)
	bool bAdvancedProceduralAnimation; // 0x1f2(0x01)
	char pad_1F3[0x1]; // 0x1f3(0x01)
	float StepHeight; // 0x1f4(0x04)
	float StepDistanceForward; // 0x1f8(0x04)
	float StepDistanceRight; // 0x1fc(0x04)
	float StepSequencePercent; // 0x200(0x04)
	float MinStepDuration; // 0x204(0x04)
	float MinDistanceToUnplant; // 0x208(0x04)
	float MinDistanceToUnplantInStatic; // 0x20c(0x04)
	float FixFeetTargetsAfterPercent; // 0x210(0x04)
	float FeetTipBonesRotationInterpSpeed; // 0x214(0x04)
	struct FRuntimeFloatCurve SpeedCurve; // 0x218(0x88)
	struct FRuntimeFloatCurve HeightCurve; // 0x2a0(0x88)
	struct FRuntimeFloatCurve BodyRelativeZCurve; // 0x328(0x88)
	float AdditionalBodyRelativeZ; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)
	struct UCurveVector* BodyRelativeRotatorCurve; // 0x3b8(0x08)
	float BodyTransformLerpSpeedWithoutDriver; // 0x3c0(0x04)
	float TraceLength; // 0x3c4(0x04)
	float DistanceCheckMultiplier; // 0x3c8(0x04)
	float RadiusCheckMultiplier; // 0x3cc(0x04)
	float BodyAlignTerrainBlendSpeed; // 0x3d0(0x04)
	float BodyZOffsetMultiplier; // 0x3d4(0x04)
	float MaxBodyZOffset; // 0x3d8(0x04)
	float MinBodyZOffset; // 0x3dc(0x04)
	float MinBodyAlignPitchDegree; // 0x3e0(0x04)
	float MaxBodyAlignPitchDegree; // 0x3e4(0x04)
	float MinBodyAlignRollDegree; // 0x3e8(0x04)
	float MaxBodyAlignRollDegree; // 0x3ec(0x04)
	float SkipIkTraceDurationWhenReceiveUpdateFromServer; // 0x3f0(0x04)
	bool bRotateOnInput; // 0x3f4(0x01)
	char pad_3F5[0x3]; // 0x3f5(0x03)
	float MinRotateDegree; // 0x3f8(0x04)
	float LerpSpeedWithinMinRotateDegree; // 0x3fc(0x04)
	float DegreeForRotatePiAnimation; // 0x400(0x04)
	float DegreeForRotateHalfPiAnimation; // 0x404(0x04)
	struct FFindFloorResult CurrentFloor; // 0x408(0x94)
	char pad_49C[0x4]; // 0x49c(0x04)
	struct FLeggedVehiclePostPhysicsTickFunction PostPhysicsTickFunction; // 0x4a0(0x30)
	char pad_4D0[0xd0]; // 0x4d0(0xd0)
	bool bAlwaysCheckFloor; // 0x5a0(0x01)
	char pad_5A1[0x3]; // 0x5a1(0x03)
	float MaxStepHeight; // 0x5a4(0x04)
	float PerchRadiusThreshold; // 0x5a8(0x04)
	float PerchAdditionalHeight; // 0x5ac(0x04)
	bool bCanWalkOffLedges; // 0x5b0(0x01)
	bool bIgnoreBaseRotation; // 0x5b1(0x01)
	char pad_5B2[0x2]; // 0x5b2(0x02)
	float LedgeCheckThreshold; // 0x5b4(0x04)
	bool bJumpIgnoreInput; // 0x5b8(0x01)
	char pad_5B9[0x3]; // 0x5b9(0x03)
	float JumpZVelocity; // 0x5bc(0x04)
	float JumpXYVelocityOnInput; // 0x5c0(0x04)
	struct FGameplayTag JumpFailedTagForNotice; // 0x5c4(0x08)
	int32_t JumpFailedNoticeID; // 0x5cc(0x04)
	struct FVehicleLocomotionData LandBrakingLocomotion; // 0x5d0(0x1c)
	float AirControl; // 0x5ec(0x04)
	float AirControlBoostMultiplier; // 0x5f0(0x04)
	float AirControlBoostVelocityThreshold; // 0x5f4(0x04)
	float FallingLateralFriction; // 0x5f8(0x04)
	int32_t MaxJumpApexAttemptsPerSimulation; // 0x5fc(0x04)
	bool bNotifyApex; // 0x600(0x01)
	char pad_601[0x3]; // 0x601(0x03)
	float JumpOffJumpZFactor; // 0x604(0x04)
	float JumpVelocityBasedOnCamera; // 0x608(0x04)
	char pad_60C[0x4]; // 0x60c(0x04)
	struct FRuntimeFloatCurve JumpVelocityPitchBasedOnCamera; // 0x610(0x88)
	float MoveSpeedFactorForPiRotation; // 0x698(0x04)
	float MoveSpeedFactorForHalfPiRotation; // 0x69c(0x04)
	float MinFootIKEffectorZ; // 0x6a0(0x04)
	float MaxFootIKEffectorZ; // 0x6a4(0x04)
	struct TArray<struct FVehicleFootIKData> FootIKDataArray; // 0x6a8(0x10)
	float IKSweepTraceRadius; // 0x6b8(0x04)
	float IKEffectorBlendSpeed; // 0x6bc(0x04)
	float FloorAndMeshAngleForDoubleSweep; // 0x6c0(0x04)
	int32_t MaxBrokenWeakPointForLocomotion; // 0x6c4(0x04)
	float RefreshBoneTransformTimerForDedicatedServer; // 0x6c8(0x04)
	char pad_6CC[0x4]; // 0x6cc(0x04)
	struct TArray<struct FVehicleVFX> WeakPointParticles; // 0x6d0(0x10)
	float MaxJoyStickYaw; // 0x6e0(0x04)
	float MinJoyStickYaw; // 0x6e4(0x04)
	float MaxJoyStickPitch; // 0x6e8(0x04)
	float MinJoyStickPitch; // 0x6ec(0x04)
	float RotationBlendSpeed; // 0x6f0(0x04)
	float MaxFootZValueForAlignGround; // 0x6f4(0x04)
	struct FName LeaningBone; // 0x6f8(0x08)
	enum class EAxis LeaningBoneForwardAxis; // 0x700(0x01)
	char pad_701[0x3]; // 0x701(0x03)
	float SpeedThresholdForLeaning; // 0x704(0x04)
	float LeaningAnimationBlendSpeed; // 0x708(0x04)
	float LeaningDegree; // 0x70c(0x04)
	float BaseDegreeForLeaningDegree; // 0x710(0x04)
	int32_t MaxSimulationIterations; // 0x714(0x04)
	float MaxSimulationTimeStep; // 0x718(0x04)
	float LandingTimerForAnitCheating; // 0x71c(0x04)
	float EnablePhysicsCollisionTimer; // 0x720(0x04)
	char pad_724[0x4]; // 0x724(0x04)
	struct USkeletalMeshComponent* VehicleMesh; // 0x728(0x08)
	struct UCapsuleComponent* UpdatedCapsule; // 0x730(0x08)
	struct ASolarVehiclePawn* VehiclePawn; // 0x738(0x08)
	struct USceneComponent* DeferredUpdatedMoveComponent; // 0x740(0x08)
	struct USolarVehicleStateMachine* VehicleStateMachine; // 0x748(0x08)
	char pad_750[0x2a0]; // 0x750(0x2a0)

	void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarLeggedVehicleMovement.OnPlayerGetOnVehicle // (Final|Native|Protected) // @ game+0x282d970
	void OnCapsuleComponentHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarLeggedVehicleMovement.OnCapsuleComponentHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x282d790
	void EnableFootIK(bool bEnable, bool bResetAlpha, bool bResetStandOnStatic); // Function Solarland.SolarLeggedVehicleMovement.EnableFootIK // (Final|Native|Public|BlueprintCallable) // @ game+0x282d640
};

// Class Solarland.SolarLeggedVehicleStencilAnimInstance
// Size: 0x2b0 (Inherited: 0x270)
struct USolarLeggedVehicleStencilAnimInstance : UAnimInstance {
	struct FVector FLFootIKEffectorLocation; // 0x268(0x0c)
	struct FVector FRFootIKEffectorLocation; // 0x274(0x0c)
	struct FVector BLFootIKEffectorLocation; // 0x280(0x0c)
	struct FVector BRFootIKEffectorLocation; // 0x28c(0x0c)
	float FLFootIKAlpha; // 0x298(0x04)
	float FRFootIKAlpha; // 0x29c(0x04)
	float BLFootIKAlpha; // 0x2a0(0x04)
	float BRFootIKAlpha; // 0x2a4(0x04)
	struct TWeakObjectPtr<struct USolarLeggedVehicleAnimInstance> VehicleAnim; // 0x2a8(0x08)
};

// Class Solarland.SolarListView
// Size: 0xc10 (Inherited: 0xbf0)
struct USolarListView : UListView {
	struct FMulticastInlineDelegate OnFocusLosted; // 0xbf0(0x10)
	struct FMulticastInlineDelegate OnListViewScrolled; // 0xc00(0x10)

	void SetClampScoll(bool InValue); // Function Solarland.SolarListView.SetClampScoll // (Final|Native|Public) // @ game+0x282dbe0
};

// Class Solarland.SolarListViewItem
// Size: 0x30 (Inherited: 0x28)
struct USolarListViewItem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.SolarLobbyAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct USolarLobbyAnimInstance : UAnimInstance {
	bool bPlayIdleShow; // 0x268(0x01)
	bool bInIdleShow; // 0x269(0x01)
	bool bResetToIdle; // 0x26a(0x01)
	bool EnableAnimSound; // 0x26b(0x01)

	void ShowRecommendUI(bool bVisible); // Function Solarland.SolarLobbyAnimInstance.ShowRecommendUI // (Final|Native|Public|BlueprintCallable) // @ game+0x282dd20
	void SetEnableAnimSound(bool InEnableAnimSound); // Function Solarland.SolarLobbyAnimInstance.SetEnableAnimSound // (Final|Native|Public|BlueprintCallable) // @ game+0x282dc70
	void SetCharacterInIdleShow(bool IsPlayingIdleShow); // Function Solarland.SolarLobbyAnimInstance.SetCharacterInIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x282db50
	void SetCharacterCanBeLooked(bool IsVisible); // Function Solarland.SolarLobbyAnimInstance.SetCharacterCanBeLooked // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ResetToIdle(); // Function Solarland.SolarLobbyAnimInstance.ResetToIdle // (Final|Native|Public|BlueprintCallable) // @ game+0x282db30
	void RefreshTick(); // Function Solarland.SolarLobbyAnimInstance.RefreshTick // (Final|Native|Public|BlueprintCallable) // @ game+0x282daf0
	void RandIdleShow(); // Function Solarland.SolarLobbyAnimInstance.RandIdleShow // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void LookAtFunctionSwitcher(bool bOpen); // Function Solarland.SolarLobbyAnimInstance.LookAtFunctionSwitcher // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void KawaiiPhysicsSwitcher(bool bOpen); // Function Solarland.SolarLobbyAnimInstance.KawaiiPhysicsSwitcher // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void GetCameraLocation(struct FString ModuleCameraName); // Function Solarland.SolarLobbyAnimInstance.GetCameraLocation // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ExitAnimFinish(); // Function Solarland.SolarLobbyAnimInstance.ExitAnimFinish // (Final|Native|Public|BlueprintCallable) // @ game+0x282d770
	void AnimPlayIdleShow(bool Enable); // Function Solarland.SolarLobbyAnimInstance.AnimPlayIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x282d5b0
};

// Class Solarland.SolarLobbyCharacterData
// Size: 0x298 (Inherited: 0x30)
struct USolarLobbyCharacterData : UDataAsset {
	struct FSoftObjectPath SkinShareImage; // 0x30(0x18)
	struct FSoftObjectPath SkinBackgroundShare; // 0x48(0x18)
	struct FSoftObjectPath Mesh; // 0x60(0x18)
	struct FSoftObjectPath Material; // 0x78(0x18)
	struct TMap<uint16_t, struct FCharacterTransformData> CharacterTransformData; // 0x90(0x50)
	struct TArray<struct FSoftObjectPath> MaterialArray; // 0xe0(0x10)
	struct TMap<struct FString, struct TSoftObjectPtr<UMaterialInterface>> CharacterChangeMat; // 0xf0(0x50)
	struct FSoftObjectPath AnimBlueprint; // 0x140(0x18)
	struct FSoftObjectPath WinAnimation; // 0x158(0x18)
	struct TArray<struct FSoftObjectPath> IdleShowList; // 0x170(0x10)
	struct FSoftObjectPath LobbyIdleAnimation; // 0x180(0x18)
	struct FSoftObjectPath AccessoryBlueprint; // 0x198(0x18)
	struct FSoftObjectPath EnterAnim; // 0x1b0(0x18)
	struct FSoftObjectPath ExitAnim; // 0x1c8(0x18)
	struct FSoftObjectPath RefuseAnim; // 0x1e0(0x18)
	struct FSoftObjectPath EncounterIdleAnim; // 0x1f8(0x18)
	struct TArray<struct FSoftObjectPath> EncounterIdleShowList; // 0x210(0x10)
	struct FSoftObjectPath RecommendAnimBlueprint; // 0x220(0x18)
	bool bParameterChanged; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)
	struct TArray<struct FPSAttachElem> PSAttachArray; // 0x240(0x10)
	struct FSoftObjectPath IdleShowSequence; // 0x250(0x18)
	struct FSoftObjectPath LeftHandProp; // 0x268(0x18)
	struct FSoftObjectPath RightHandProp; // 0x280(0x18)
};

// Class Solarland.SolarLobbyCharacter
// Size: 0x438 (Inherited: 0x288)
struct ASolarLobbyCharacter : APawn {
	char pad_288[0x8]; // 0x288(0x08)
	struct TSoftObjectPtr<UCurveVector> DissolveCurvePath; // 0x290(0x28)
	struct TSoftObjectPtr<UMaterialInterface> DissolveMatPath; // 0x2b8(0x28)
	struct TSoftObjectPtr<UCurveVector> FresnelCurvePath; // 0x2e0(0x28)
	struct TSoftObjectPtr<UMaterialInterface> FresnelMatPath; // 0x308(0x28)
	struct TSoftObjectPtr<UParticleSystem> SwitchParticleEffectPath; // 0x330(0x28)
	char pad_358[0x8]; // 0x358(0x08)
	float SwitchEffectInterval; // 0x360(0x04)
	float SelfDelayShowSeconds; // 0x364(0x04)
	char pad_368[0x8]; // 0x368(0x08)
	struct UAkComponent* AkAudioComponent; // 0x370(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x378(0x08)
	struct USkeletalMeshComponent* SkeletalMesh; // 0x380(0x08)
	struct USkeletalMeshComponent* MirrorSkeletalMesh; // 0x388(0x08)
	struct AActor* LobbyAccessory; // 0x390(0x08)
	struct AActor* MirrorLobbyAccessory; // 0x398(0x08)
	struct USkeletalMeshComponent* DissovleSkeletalMesh; // 0x3a0(0x08)
	struct USkeletalMeshComponent* FresnelSkeletalMesh; // 0x3a8(0x08)
	struct USkeletalMeshComponent* MirrorDissovleSkeletalMesh; // 0x3b0(0x08)
	struct USkeletalMeshComponent* MirrorFresnelSkeletalMesh; // 0x3b8(0x08)
	struct UMaterialInterface* DissovleMat; // 0x3c0(0x08)
	struct UMaterialInterface* FresnelMat; // 0x3c8(0x08)
	struct UCurveVector* DissovleCurve; // 0x3d0(0x08)
	struct UCurveVector* FresnelCurve; // 0x3d8(0x08)
	char pad_3E0[0x8]; // 0x3e0(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> DynamicDissovleMats; // 0x3e8(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> DynamicFresnelMats; // 0x3f8(0x10)
	char pad_408[0x14]; // 0x408(0x14)
	bool bCanPlayVoiceInIdleShow; // 0x41c(0x01)
	bool bOpenMirror; // 0x41d(0x01)
	bool CharacterIsVisiblity; // 0x41e(0x01)
	char pad_41F[0x1]; // 0x41f(0x01)
	int32_t CurSkinId; // 0x420(0x04)
	int32_t CurChunkId; // 0x424(0x04)
	bool bIsPlayIdleShow; // 0x428(0x01)
	char pad_429[0x7]; // 0x429(0x07)
	struct UObject* AnimBPClass; // 0x430(0x08)

	void UpdateLobbyAccessory(struct FString InAccessoryPath); // Function Solarland.SolarLobbyCharacter.UpdateLobbyAccessory // (Final|Native|Public|BlueprintCallable) // @ game+0x2838ac0
	void StopPlayIdleShow(); // Function Solarland.SolarLobbyCharacter.StopPlayIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x2838730
	void StartPlaySwitchEffect(); // Function Solarland.SolarLobbyCharacter.StartPlaySwitchEffect // (Final|Native|Public) // @ game+0x28381d0
	void StartPlayFresnelSwitchEffect(); // Function Solarland.SolarLobbyCharacter.StartPlayFresnelSwitchEffect // (Final|Native|Public) // @ game+0x28381b0
	void StartPlayDissovleSwitchEffect(); // Function Solarland.SolarLobbyCharacter.StartPlayDissovleSwitchEffect // (Final|Native|Public) // @ game+0x2838190
	void SetSwitchEffetComp(struct USkeletalMeshComponent* EffectComp, struct USkeletalMeshComponent* DefaultComp, struct UMaterialInterface* EffectMat, struct TArray<struct UMaterialInstanceDynamic*>& DyniamEffectMats); // Function Solarland.SolarLobbyCharacter.SetSwitchEffetComp // (Final|Native|Public|HasOutParms) // @ game+0x2837280
	void SetPropVisiable(bool isVisiable); // Function Solarland.SolarLobbyCharacter.SetPropVisiable // (Final|Native|Public|BlueprintCallable) // @ game+0x2836a90
	void SetMeshVisibility(bool IsVisible); // Function Solarland.SolarLobbyCharacter.SetMeshVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x2836950
	void SetIsPlayIdleShow(bool InIsPlayIdleShow); // Function Solarland.SolarLobbyCharacter.SetIsPlayIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x28368c0
	void SetCharacterRotationByDelta(float InDeltaYaw); // Function Solarland.SolarLobbyCharacter.SetCharacterRotationByDelta // (Final|Native|Public|BlueprintCallable) // @ game+0x2836730
	void SetCharacterMeshAndMat(int32_t InSkinID, bool IsForce); // Function Solarland.SolarLobbyCharacter.SetCharacterMeshAndMat // (Final|Native|Public|BlueprintCallable) // @ game+0x2836660
	void SetCharacterByLoadedData(struct USolarLobbyCharacterData* InData); // Function Solarland.SolarLobbyCharacter.SetCharacterByLoadedData // (Final|Native|Public|BlueprintCallable) // @ game+0x28365d0
	void PlayIdleShow(); // Function Solarland.SolarLobbyCharacter.PlayIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x2835de0
	void OpenLookAtAndSetPostProcessABPCameraLocation(bool bOpen, struct FString ModuleCameraName); // Function Solarland.SolarLobbyCharacter.OpenLookAtAndSetPostProcessABPCameraLocation // (Final|Native|Public|BlueprintCallable) // @ game+0x2835cf0
	bool IsCanOpenMirror(); // Function Solarland.SolarLobbyCharacter.IsCanOpenMirror // (Native|Event|Public|BlueprintEvent) // @ game+0x28356e0
	bool IsCanOpenChangeAnim(); // Function Solarland.SolarLobbyCharacter.IsCanOpenChangeAnim // (Native|Event|Public|BlueprintEvent) // @ game+0x28356b0
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarLobbyCharacter.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x2835540
	void InitCharacterByLua(); // Function Solarland.SolarLobbyCharacter.InitCharacterByLua // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct USolarAkGameObject* GetSolarAkGameObject(); // Function Solarland.SolarLobbyCharacter.GetSolarAkGameObject // (Final|Native|Public|BlueprintCallable) // @ game+0x2835010
	struct USolarLobbyCharacterData* GetLobbySkinResourceBySkinId(int32_t InSkinID, bool IsLowRes); // Function Solarland.SolarLobbyCharacter.GetLobbySkinResourceBySkinId // (Final|Native|Public|BlueprintCallable) // @ game+0x2834b60
	bool GetIsPlayIdleShow(); // Function Solarland.SolarLobbyCharacter.GetIsPlayIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x2834850
	struct USolarLobbyAnimInstance* GetCharAnimInstance(); // Function Solarland.SolarLobbyCharacter.GetCharAnimInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x2834360
	void DetachCharacterSocketPS(); // Function Solarland.SolarLobbyCharacter.DetachCharacterSocketPS // (Final|Native|Protected) // @ game+0x2833680
	void DelayShowSelf(struct USolarLobbyCharacterData* InData); // Function Solarland.SolarLobbyCharacter.DelayShowSelf // (Final|Native|Public) // @ game+0x2833410
	void ClearSwitchEffect(); // Function Solarland.SolarLobbyCharacter.ClearSwitchEffect // (Final|Native|Public) // @ game+0x2832a60
	void ClearCharacterByLua(); // Function Solarland.SolarLobbyCharacter.ClearCharacterByLua // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void AttachCharacterSocketPS(struct TArray<struct FPSAttachElem>& PSAttachArray); // Function Solarland.SolarLobbyCharacter.AttachCharacterSocketPS // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x2832580
};

// Class Solarland.SolarLobbyPlayerController
// Size: 0x5b8 (Inherited: 0x5a8)
struct ASolarLobbyPlayerController : ASolarPlayerControllerBase {
	char pad_5A8[0x10]; // 0x5a8(0x10)

	void SolarGM_StartWarmup(); // Function Solarland.SolarLobbyPlayerController.SolarGM_StartWarmup // (Exec|Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetTotalFrameCount(); // Function Solarland.SolarLobbyPlayerController.GetTotalFrameCount // (Final|Native|Protected|Const) // @ game+0x28350e0
};

// Class Solarland.SolarLocalizationToolsWidget
// Size: 0x400 (Inherited: 0x400)
struct USolarLocalizationToolsWidget : USolarExternalToolsWidget {
};

// Class Solarland.SolarLockSettings
// Size: 0x78 (Inherited: 0x28)
struct USolarLockSettings : USaveGame {
	struct TMap<int32_t, bool> FeaturesLockStatus; // 0x28(0x50)

	void CopyFrom(struct USolarLockSettings* InLockSettings); // Function Solarland.SolarLockSettings.CopyFrom // (Final|Native|Public) // @ game+0x2832d40
};

// Class Solarland.SolarLockSettingsMgr
// Size: 0x50 (Inherited: 0x28)
struct USolarLockSettingsMgr : UObject {
	struct USolarLockSettings* CurLockSettings; // 0x28(0x08)
	struct USolarGameInstanceBase* SolarGameInstance; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)
	struct USolarLockSettings* DefaultLockSettings; // 0x48(0x08)

	void SaveLockSettings(); // Function Solarland.SolarLockSettingsMgr.SaveLockSettings // (Final|Native|Public) // @ game+0x2836290
	void LoadLockSettings(); // Function Solarland.SolarLockSettingsMgr.LoadLockSettings // (Final|Native|Public) // @ game+0x2835a70
	void Init(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarLockSettingsMgr.Init // (Final|Native|Public) // @ game+0x28354b0
};

// Class Solarland.SolarLoginManager
// Size: 0x38 (Inherited: 0x30)
struct USolarLoginManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)

	void InitFromLogin(); // Function Solarland.SolarLoginManager.InitFromLogin // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void Init(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarLoginManager.Init // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarUploaderSetting
// Size: 0x50 (Inherited: 0x38)
struct USolarUploaderSetting : UDeveloperSettings {
	struct FString SolarLogServerUrl; // 0x38(0x10)
	bool bEnableAutoUpload; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Solarland.SolarLootZone
// Size: 0x2d8 (Inherited: 0x228)
struct ASolarLootZone : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct TArray<struct ASolarItemSpawner*> OwnningItemSpawners; // 0x230(0x10)
	struct TMap<struct ASolarItemSpawner*, struct FItemSpawnerGraphNode> SpawnerPathGraph; // 0x240(0x50)
	struct TArray<struct FLootZonePath> LootZonePathGraph; // 0x290(0x10)
	float MaxRadius; // 0x2a0(0x04)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct TArray<struct TSoftObjectPtr<ASolarChargingPile>> OwnningChargingPiles; // 0x2a8(0x10)
	struct TArray<struct TSoftObjectPtr<ASolarBotSniperPosition>> OwnningSniperPosition; // 0x2b8(0x10)
	struct TArray<struct FVector> OwnningPOIs; // 0x2c8(0x10)
};

// Class Solarland.SolarLowMemoryDeviceSettings
// Size: 0x50 (Inherited: 0x38)
struct USolarLowMemoryDeviceSettings : UDeveloperSettings {
	bool EnableLowMemDevice; // 0x38(0x01)
	bool EnableLowMemDeviceDebugMode; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
	struct TArray<struct FString> AdditionalCommand; // 0x40(0x10)
};

// Class Solarland.SolarLuaHelper
// Size: 0x50 (Inherited: 0x28)
struct USolarLuaHelper : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UDataTable* KeyMappingInfoDataTable; // 0x30(0x08)
	struct UDataTable* KeyMappingDisplayInfoDataTable; // 0x38(0x08)
	struct TArray<struct FSolarPlayerReport> SettleTeamReports; // 0x40(0x10)

	bool WriteFile(struct FString FilePath, struct FString Content); // Function Solarland.SolarLuaHelper.WriteFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2838bb0
	void UnloadCharacterOwnedBanks(struct UObject* WorldContextObject, int32_t CharacterId, enum class ESolarAudioDetailLoadMode Mode); // Function Solarland.SolarLuaHelper.UnloadCharacterOwnedBanks // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28389c0
	void UnloadAllCharacterOwnedBanks(struct UObject* WorldContextObject, enum class ESolarAudioDetailLoadMode Mode); // Function Solarland.SolarLuaHelper.UnloadAllCharacterOwnedBanks // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2838900
	void UELogWarning(struct FString str); // Function Solarland.SolarLuaHelper.UELogWarning // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x273f5d0
	void UELogNetwork(struct FString str); // Function Solarland.SolarLuaHelper.UELogNetwork // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x273f5d0
	void UELogError(struct FString str); // Function Solarland.SolarLuaHelper.UELogError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x273f5d0
	void UELog(struct FString str); // Function Solarland.SolarLuaHelper.UELog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x273f5d0
	struct UObject* TryLoadBySoftObjectPath(struct FSoftObjectPath& ObjectPath); // Function Solarland.SolarLuaHelper.TryLoadBySoftObjectPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2838850
	bool TryConvertFilenameToLongPackageName(struct FString InFilename, struct FString& OutPackageName); // Function Solarland.SolarLuaHelper.TryConvertFilenameToLongPackageName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2838750
	void TryCancelJoinCustomServerRoom(); // Function Solarland.SolarLuaHelper.TryCancelJoinCustomServerRoom // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void StaticSetGlobalRTPCValue(struct FString RTPC, float Value, int32_t InterpolationTimeMs); // Function Solarland.SolarLuaHelper.StaticSetGlobalRTPCValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2838610
	void StaticSetAkState(struct FName StateGroup, struct FName State); // Function Solarland.SolarLuaHelper.StaticSetAkState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2838550
	void StaticSetAkBusConfig(struct FString BusName, enum class AkChannelConfiguration ChannelConfiguration); // Function Solarland.SolarLuaHelper.StaticSetAkBusConfig // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2838480
	void StaticPostAkEventByNameGlobal(struct FString InEventName); // Function Solarland.SolarLuaHelper.StaticPostAkEventByNameGlobal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28383f0
	int32_t StaticPostAkEventByNameAndWaitForEnd(struct UObject* WorldContextObject, struct FString InEventName, struct FLatentActionInfo LatentInfo); // Function Solarland.SolarLuaHelper.StaticPostAkEventByNameAndWaitForEnd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2838290
	int32_t StaticPostAkEventByName(struct FString InEventName); // Function Solarland.SolarLuaHelper.StaticPostAkEventByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28381f0
	void SolarSetVSyncEnabled(bool bEnable); // Function Solarland.SolarLuaHelper.SolarSetVSyncEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2838110
	void SolarSetSSRQuality(char InQuality); // Function Solarland.SolarLuaHelper.SolarSetSSRQuality // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837ec0
	void SolarSetSSGIQuality(char InQuality); // Function Solarland.SolarLuaHelper.SolarSetSSGIQuality // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837e50
	void SolarSetSSGIEnabled(bool bEnable); // Function Solarland.SolarLuaHelper.SolarSetSSGIEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837dd0
	void SolarSetSSAOIntensity(float InIntensity); // Function Solarland.SolarLuaHelper.SolarSetSSAOIntensity // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837d50
	void SolarSetShadowQuality(int32_t InQuality); // Function Solarland.SolarLuaHelper.SolarSetShadowQuality // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2838090
	void SolarSetShadowFilterMethod(char InMethod); // Function Solarland.SolarLuaHelper.SolarSetShadowFilterMethod // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2838020
	void SolarSetShadowDistanceScale(float InScale); // Function Solarland.SolarLuaHelper.SolarSetShadowDistanceScale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837fa0
	void SolarSetScreenPercentage(char InPercentage); // Function Solarland.SolarLuaHelper.SolarSetScreenPercentage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837f30
	void SolarSetResolution(int32_t InWidth, int32_t InHeight); // Function Solarland.SolarLuaHelper.SolarSetResolution // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837c90
	void SolarSetMSAAEnabled(bool bEnable); // Function Solarland.SolarLuaHelper.SolarSetMSAAEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837ab0
	void SolarSetMotionBlurQuality(char InQuality); // Function Solarland.SolarLuaHelper.SolarSetMotionBlurQuality // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837c20
	void SolarSetMobileAmbientOcclusionQuality(char InLevel); // Function Solarland.SolarLuaHelper.SolarSetMobileAmbientOcclusionQuality // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837bb0
	void SolarSetMaxCSMResolution(int32_t InResolution); // Function Solarland.SolarLuaHelper.SolarSetMaxCSMResolution // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837b30
	void SolarSetLightShaftEnabled(bool bEnable); // Function Solarland.SolarLuaHelper.SolarSetLightShaftEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837a30
	void SolarSetGraphicsQuality(enum class ESolarGraphicsQualityLevel InLevel); // Function Solarland.SolarLuaHelper.SolarSetGraphicsQuality // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28379c0
	void SolarSetFrameRate(enum class ESolarFrameRateLevel FrameRateLevel); // Function Solarland.SolarLuaHelper.SolarSetFrameRate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837950
	void SolarSetFeatureLevel(char FeatureLevel); // Function Solarland.SolarLuaHelper.SolarSetFeatureLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28378e0
	void SolarSetColorGrading(enum class ESolarColorTheme InTheme); // Function Solarland.SolarLuaHelper.SolarSetColorGrading // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837870
	void SolarSetColorGain(float InGainScale); // Function Solarland.SolarLuaHelper.SolarSetColorGain // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28377f0
	void SolarSetAntiAliasingMethodPC(char InMethod); // Function Solarland.SolarLuaHelper.SolarSetAntiAliasingMethodPC // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837780
	void SolarSetAnisotropy(char InAnisotropy); // Function Solarland.SolarLuaHelper.SolarSetAnisotropy // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837710
	void SolarSetAmbientOcclusionRadiusScale(float InScale); // Function Solarland.SolarLuaHelper.SolarSetAmbientOcclusionRadiusScale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837690
	void SolarSetAmbientOcclusionLevels(char InLevel); // Function Solarland.SolarLuaHelper.SolarSetAmbientOcclusionLevels // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837620
	void SolarSelectMonitor(char MonitorIndex); // Function Solarland.SolarLuaHelper.SolarSelectMonitor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28375b0
	void SolarRefreshContentScaleFactorLevel(); // Function Solarland.SolarLuaHelper.SolarRefreshContentScaleFactorLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837590
	bool SolarGetTextureStreamingEnable(); // Function Solarland.SolarLuaHelper.SolarGetTextureStreamingEnable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837560
	char SolarGetMonitorNum(); // Function Solarland.SolarLuaHelper.SolarGetMonitorNum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837530
	void SolarEnableTextureStreaming(bool bEnable); // Function Solarland.SolarLuaHelper.SolarEnableTextureStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28374b0
	void SolarEnableDynamicShadow(bool bEnable); // Function Solarland.SolarLuaHelper.SolarEnableDynamicShadow // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837430
	int32_t ShouldEnterLobby(); // Function Solarland.SolarLuaHelper.ShouldEnterLobby // (Final|Native|Static|Public) // @ game+0x2837400
	void SetSwitch(struct USolarAkGameObject* SolarAkGameObject, struct FString SwitchGroup, struct FString SwitchState); // Function Solarland.SolarLuaHelper.SetSwitch // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2837150
	void SetSkeletalMeshMatFromConfig(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FSoftObjectPath& NewMatResPath, int32_t ElementIndex); // Function Solarland.SolarLuaHelper.SetSkeletalMeshMatFromConfig // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2837020
	void SetSkeletalMeshMat(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FString NewMatResPath, int32_t ElementIndex); // Function Solarland.SolarLuaHelper.SetSkeletalMeshMat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2836f10
	void SetSkeletalMeshFromConfig(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FSoftObjectPath& NewMeshResPath); // Function Solarland.SolarLuaHelper.SetSkeletalMeshFromConfig // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2836e30
	void SetSkeletalMesh(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FString NewMeshResPath); // Function Solarland.SolarLuaHelper.SetSkeletalMesh // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2836d60
	void SetSkeletalAnimBPFromConfig(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FSoftObjectPath& NewAnimBPResPath); // Function Solarland.SolarLuaHelper.SetSkeletalAnimBPFromConfig // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2836c80
	void SetSkeletalAnimBP(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FString NewAnimBPResPath); // Function Solarland.SolarLuaHelper.SetSkeletalAnimBP // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2836bb0
	void SetRenderBatch(int32_t Mode); // Function Solarland.SolarLuaHelper.SetRenderBatch // (Final|Native|Public) // @ game+0x2836b20
	void SetPostProcessSettingsPC(); // Function Solarland.SolarLuaHelper.SetPostProcessSettingsPC // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2836a70
	void SetPlayerSettlementReport(struct FSolarGameModeInfo& GameInfo); // Function Solarland.SolarLuaHelper.SetPlayerSettlementReport // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xb66830
	void SetPlayerNameColorByVIPState(struct UTextBlock* TextWidget, char VipType); // Function Solarland.SolarLuaHelper.SetPlayerNameColorByVIPState // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void SetPatchBuildVersion(struct FString Version); // Function Solarland.SolarLuaHelper.SetPatchBuildVersion // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28369e0
	void SetEnableSoftwareCursorWidgets(bool bIsEnabled); // Function Solarland.SolarLuaHelper.SetEnableSoftwareCursorWidgets // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2836840
	void SetCurThirdPartyInfo(struct FString InCurThirdPartyInfo); // Function Solarland.SolarLuaHelper.SetCurThirdPartyInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28367b0
	void SetChangeListNumber(struct FString ChangeListNum); // Function Solarland.SolarLuaHelper.SetChangeListNumber // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2836540
	void SetCanChangeInputType(struct APlayerController* InPlayerController, bool bCanChange); // Function Solarland.SolarLuaHelper.SetCanChangeInputType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2836480
	void SetActorYawByDeltaRotatedImpl(struct AActor* InActor, float InDeltaYaw, bool bCheckCharaCanBeRotated); // Function Solarland.SolarLuaHelper.SetActorYawByDeltaRotatedImpl // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2836370
	void SetActorYawByDelta(struct AActor* InActor, float InDeltaYaw); // Function Solarland.SolarLuaHelper.SetActorYawByDelta // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28362b0
	void ResumeBatching(); // Function Solarland.SolarLuaHelper.ResumeBatching // (Final|Native|Static|Public) // @ game+0x2836270
	struct UObject* ResolveSoftObjectPath(struct FSoftObjectPath& ObjectPath); // Function Solarland.SolarLuaHelper.ResolveSoftObjectPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x28361c0
	void ResetIOSgestureRecognizers(); // Function Solarland.SolarLuaHelper.ResetIOSgestureRecognizers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9b5550
	void ReloadVoiceBanks(); // Function Solarland.SolarLuaHelper.ReloadVoiceBanks // (Final|Native|Public|BlueprintCallable) // @ game+0x28361a0
	struct FString ReadFileContent(struct FString FilePath); // Function Solarland.SolarLuaHelper.ReadFileContent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28360c0
	int32_t PostAkEventByName(struct USolarAkGameObject* SolarAkGameObject, struct FString InEventName); // Function Solarland.SolarLuaHelper.PostAkEventByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2835fe0
	void PlayVoiceLocaly(int32_t CharacterId, int32_t SkinId, enum class EPassiveTriggeredVoice Type); // Function Solarland.SolarLuaHelper.PlayVoiceLocaly // (Final|Native|Public) // @ game+0x2835ed0
	void PlayMusicByName(struct UObject* WorldContextObject, struct FString InEventName); // Function Solarland.SolarLuaHelper.PlayMusicByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2835e00
	void OnBroadcastModeChanged(bool bOpen); // Function Solarland.SolarLuaHelper.OnBroadcastModeChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x2835c60
	bool MoveFile(struct FString DestFilePath, struct FString SrcFilePath); // Function Solarland.SolarLuaHelper.MoveFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2835b70
	struct UObject* LoadObject_WithOuter(struct UObject* Outer, struct FString ObjectName); // Function Solarland.SolarLuaHelper.LoadObject_WithOuter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2835a90
	struct TArray<char> LoadFileToArray(struct FString FilePath); // Function Solarland.SolarLuaHelper.LoadFileToArray // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2835990
	void LoadCharacterOwnedBanks(struct UObject* WorldContextObject, int32_t CharacterId, enum class ESolarAudioDetailLoadMode Mode); // Function Solarland.SolarLuaHelper.LoadCharacterOwnedBanks // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2835890
	void LoadAllCharacterOwnedBanks(struct UObject* WorldContextObject, enum class ESolarAudioDetailLoadMode Mode); // Function Solarland.SolarLuaHelper.LoadAllCharacterOwnedBanks // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28357d0
	bool IsWorldTearingDown(); // Function Solarland.SolarLuaHelper.IsWorldTearingDown // (Final|Native|Public) // @ game+0x28357a0
	bool IsLocalBuild(); // Function Solarland.SolarLuaHelper.IsLocalBuild // (Final|Native|Static|Public) // @ game+0x27ae890
	bool IsInputTypeGamepad(struct APlayerController* InPlayerController); // Function Solarland.SolarLuaHelper.IsInputTypeGamepad // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2835710
	bool IsBattlePassInfoUpdated(struct ASolarPlayerState* InPlayerState); // Function Solarland.SolarLuaHelper.IsBattlePassInfoUpdated // (Final|Native|Public|BlueprintCallable) // @ game+0x2835610
	bool HasReviveItemManager(struct UObject* InWorldContext); // Function Solarland.SolarLuaHelper.HasReviveItemManager // (Final|Native|Static|Public) // @ game+0x2835340
	struct FString HashMd5(struct FString InputText); // Function Solarland.SolarLuaHelper.HashMd5 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x28353d0
	void HandleSelectAll(struct UEditableRichTextBlock* EditableRichTextBlock); // Function Solarland.SolarLuaHelper.HandleSelectAll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28352c0
	void HandlePaste(struct UEditableRichTextBlock* EditableRichTextBlock); // Function Solarland.SolarLuaHelper.HandlePaste // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2835240
	void HandleCut(struct UEditableRichTextBlock* EditableRichTextBlock); // Function Solarland.SolarLuaHelper.HandleCut // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28351c0
	void HandleCopy(struct UEditableRichTextBlock* EditableRichTextBlock); // Function Solarland.SolarLuaHelper.HandleCopy // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2835140
	int64_t GetUtcNowTimestamp(); // Function Solarland.SolarLuaHelper.GetUtcNowTimestamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2835110
	struct FString GetTaskDesc(int32_t TaskID); // Function Solarland.SolarLuaHelper.GetTaskDesc // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FString GetSourceCommitHash(); // Function Solarland.SolarLuaHelper.GetSourceCommitHash // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2835060
	struct FString GetSourceBuildVersion(); // Function Solarland.SolarLuaHelper.GetSourceBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2835060
	struct ASolarGameState* GetSolarGameState(); // Function Solarland.SolarLuaHelper.GetSolarGameState // (Final|Native|Public|Const) // @ game+0x2835030
	struct FString GetShortName(struct FString LongName); // Function Solarland.SolarLuaHelper.GetShortName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2834f30
	struct TArray<struct FString> GetServersUrlList(); // Function Solarland.SolarLuaHelper.GetServersUrlList // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2834eb0
	struct FString GetServerEnvTag(); // Function Solarland.SolarLuaHelper.GetServerEnvTag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2834e30
	struct FVector2D GetScreenSizeXY(); // Function Solarland.SolarLuaHelper.GetScreenSizeXY // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2834df0
	struct FString GetPatchBuildVersion(); // Function Solarland.SolarLuaHelper.GetPatchBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2834d70
	int32_t GetMonsterDropItemOutcomeID(int32_t MonsterAICharID, int32_t StrengthGrade); // Function Solarland.SolarLuaHelper.GetMonsterDropItemOutcomeID // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetMonsterDeathBoxID(int32_t MonsterAICharID); // Function Solarland.SolarLuaHelper.GetMonsterDeathBoxID // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct FString GetMainBuildVersion(); // Function Solarland.SolarLuaHelper.GetMainBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2834cf0
	struct ASolarReplayPlayerController* GetLocalSolarReplayPlayerController(); // Function Solarland.SolarLuaHelper.GetLocalSolarReplayPlayerController // (Final|Native|Public) // @ game+0x2834cc0
	struct ASolarPlayerState* GetLocalSolarPlayerState(); // Function Solarland.SolarLuaHelper.GetLocalSolarPlayerState // (Final|Native|Public|Const) // @ game+0x2834c90
	struct ASolarPlayerController* GetLocalSolarPlayerController(); // Function Solarland.SolarLuaHelper.GetLocalSolarPlayerController // (Final|Native|Public) // @ game+0x2834c60
	struct APlayerController* GetLocalPlayerController(); // Function Solarland.SolarLuaHelper.GetLocalPlayerController // (Final|Native|Public) // @ game+0x2834c30
	struct FKey GetLeftMouseKeyDown(); // Function Solarland.SolarLuaHelper.GetLeftMouseKeyDown // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2834aa0
	void GetKeyMappingInfoByRowName(struct FString RowName, struct FKeyMappingRowInfo& OutClassInfo); // Function Solarland.SolarLuaHelper.GetKeyMappingInfoByRowName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2834870
	struct FString GetHostByDomainName(struct FString DomainName, bool bAppendPort); // Function Solarland.SolarLuaHelper.GetHostByDomainName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2834730
	struct FString GetGameModeParam(int32_t GameModeId, struct FString Key); // Function Solarland.SolarLuaHelper.GetGameModeParam // (Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetFileSize(struct FString FilePath); // Function Solarland.SolarLuaHelper.GetFileSize // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2834690
	struct FString GetExtBackdoorUrl(); // Function Solarland.SolarLuaHelper.GetExtBackdoorUrl // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2834610
	struct UEmojiBubbleSubsystem* GetEmojiBubbleSubsystem(struct USolarGameInstanceBase* GI); // Function Solarland.SolarLuaHelper.GetEmojiBubbleSubsystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2834580
	bool GetCurrentInputType(struct APlayerController* InPlayerController, enum class ECommonInputType& OutInputType); // Function Solarland.SolarLuaHelper.GetCurrentInputType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x28344a0
	struct UCommonInputSubsystem* GetCommonInputSubsystem(struct APlayerController* PlayerController); // Function Solarland.SolarLuaHelper.GetCommonInputSubsystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2834410
	struct FString GetClipboardPasteText(); // Function Solarland.SolarLuaHelper.GetClipboardPasteText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2834390
	struct FString GetChangeListNumber(); // Function Solarland.SolarLuaHelper.GetChangeListNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x28342e0
	struct FString GetBuildVariation(); // Function Solarland.SolarLuaHelper.GetBuildVariation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2834260
	struct FString GetBuildMode(); // Function Solarland.SolarLuaHelper.GetBuildMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x28341e0
	bool GetBroadcastState(); // Function Solarland.SolarLuaHelper.GetBroadcastState // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FString GetBroadcastPlayerName(struct FString SolarPlayerID); // Function Solarland.SolarLuaHelper.GetBroadcastPlayerName // (Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetBroadcastPlayerId(int32_t PlayerId); // Function Solarland.SolarLuaHelper.GetBroadcastPlayerId // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FString GetBroadcastHeroName(struct FString SolarPlayerID); // Function Solarland.SolarLuaHelper.GetBroadcastHeroName // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FVector GetBoneLocationByName(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FName BoneName, enum class EBoneSpaces Space); // Function Solarland.SolarLuaHelper.GetBoneLocationByName // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x28340d0
	struct FString GetBackdoorUrl(); // Function Solarland.SolarLuaHelper.GetBackdoorUrl // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2834050
	struct FString GetAndroidPkgName(); // Function Solarland.SolarLuaHelper.GetAndroidPkgName // (Final|Native|Static|Public) // @ game+0x2833fd0
	struct TArray<struct FString> GetAllLoadedPackagesPath(); // Function Solarland.SolarLuaHelper.GetAllLoadedPackagesPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2833f50
	void GetAllKeyMappingInfoFromTable(struct TArray<struct FKeyMappingRowInfo>& OutKeyMappingInfo); // Function Solarland.SolarLuaHelper.GetAllKeyMappingInfoFromTable // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2833d80
	struct FString GetActualBuildVersion(); // Function Solarland.SolarLuaHelper.GetActualBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x27cc460
	struct FString GetAbsolutePathForWrite(struct FString FilePath); // Function Solarland.SolarLuaHelper.GetAbsolutePathForWrite // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2833ca0
	struct FString GetAbsolutePathForRead(struct FString FilePath); // Function Solarland.SolarLuaHelper.GetAbsolutePathForRead // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2833bc0
	struct FColor FromHex(struct FString HexString); // Function Solarland.SolarLuaHelper.FromHex // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2833b20
	struct TArray<struct FString> FindFilesRecursive(struct FString Directory, struct FString Filename); // Function Solarland.SolarLuaHelper.FindFilesRecursive // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28339e0
	struct TArray<struct FString> FindFiles(struct FString Directory, struct FString FileExtension); // Function Solarland.SolarLuaHelper.FindFiles // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28338a0
	void EndOfPlayInEditor(struct UObject* InWorldContext, struct FString EndReason, bool bPopMsgBox); // Function Solarland.SolarLuaHelper.EndOfPlayInEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2833740
	void DoLuaDebug(struct TArray<struct FString>& cmdArray); // Function Solarland.SolarLuaHelper.DoLuaDebug // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xb66830
	bool DirectoryExist(struct FString TargetDirectory); // Function Solarland.SolarLuaHelper.DirectoryExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28336a0
	bool DeleteFile(struct FString FilePath); // Function Solarland.SolarLuaHelper.DeleteFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28335e0
	bool DeleteDirectoryRecursively(struct FString Path); // Function Solarland.SolarLuaHelper.DeleteDirectoryRecursively // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2833540
	bool DeleteDirectory(struct FString Path); // Function Solarland.SolarLuaHelper.DeleteDirectory // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28334a0
	struct FString DecodeFileRawData(struct TArray<char>& InDonwloadRawData, bool bNeedDecode); // Function Solarland.SolarLuaHelper.DecodeFileRawData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x28332d0
	struct FString DecodeFile(struct FString InFilePath); // Function Solarland.SolarLuaHelper.DecodeFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28331f0
	struct ULevelStreamingDynamic* CreateStreamInstance(struct UWorld* World, struct FString PackageName); // Function Solarland.SolarLuaHelper.CreateStreamInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2833110
	struct AActor* CreateEmptySkeletalMeshActor(); // Function Solarland.SolarLuaHelper.CreateEmptySkeletalMeshActor // (Final|Native|Public|BlueprintCallable) // @ game+0x28330e0
	struct UMaterialInstanceDynamic* CreateDynamicMaterial(struct ACameraActor* CameraActor, struct FString TemplateMatResPath, int32_t RTSizeX, int32_t RTSizeY, enum class ETextureRenderTargetFormat RenderTargetFormat); // Function Solarland.SolarLuaHelper.CreateDynamicMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x2832f10
	bool CreateDirectoryTree(struct FString Path); // Function Solarland.SolarLuaHelper.CreateDirectoryTree // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2832e70
	bool CreateDirectory(struct FString Path); // Function Solarland.SolarLuaHelper.CreateDirectory // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2832dd0
	bool CopyFile(struct FString DestFilePath, struct FString SrcFilePath); // Function Solarland.SolarLuaHelper.CopyFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2832c50
	void ConvertKeyMappingName(struct FKey& Key, struct FString& OutDisplayName); // Function Solarland.SolarLuaHelper.ConvertKeyMappingName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2832b10
	void CloseVirtualKeyboard(); // Function Solarland.SolarLuaHelper.CloseVirtualKeyboard // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9b5550
	void ClipboardCopyText(struct FString Content); // Function Solarland.SolarLuaHelper.ClipboardCopyText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2832a80
	void ClearSkeletalMeshMat(struct USkeletalMeshComponent* SkeletalMeshComponent); // Function Solarland.SolarLuaHelper.ClearSkeletalMeshMat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28329e0
	bool CheckIsNeedDownLoad(int32_t ChunkID); // Function Solarland.SolarLuaHelper.CheckIsNeedDownLoad // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2832950
	bool CanExecuteSelectAll(struct UEditableRichTextBlock* EditableRichTextBlock); // Function Solarland.SolarLuaHelper.CanExecuteSelectAll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28328c0
	bool CanExecutePaste(struct UEditableRichTextBlock* EditableRichTextBlock); // Function Solarland.SolarLuaHelper.CanExecutePaste // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2832830
	bool CanExecuteCut(struct UEditableRichTextBlock* EditableRichTextBlock); // Function Solarland.SolarLuaHelper.CanExecuteCut // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28327a0
	bool CanExecuteCopy(struct UEditableRichTextBlock* EditableRichTextBlock); // Function Solarland.SolarLuaHelper.CanExecuteCopy // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2832710
	void BindMenuWidgetToEditableText(struct UEditableRichTextBlock* EditableRichTextBlock, struct UWidget* InMenuWidget); // Function Solarland.SolarLuaHelper.BindMenuWidgetToEditableText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2832650
	void ApplyVehicleSkinPreview(struct UObject* PreviewVehicleObj, int32_t SkinId, int32_t PageType, struct FVector DefaultLoc); // Function Solarland.SolarLuaHelper.ApplyVehicleSkinPreview // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2832430
};

// Class Solarland.LuaErrorWidgetBase
// Size: 0x260 (Inherited: 0x260)
struct ULuaErrorWidgetBase : UUserWidget {

	void ShowLuaError(struct TArray<struct FString>& LuaErrorMsgs); // Function Solarland.LuaErrorWidgetBase.ShowLuaError // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarLuaManager
// Size: 0xd8 (Inherited: 0x28)
struct USolarLuaManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FMulticastInlineDelegate OnHandleLuaException; // 0x30(0x10)
	char pad_40[0x10]; // 0x40(0x10)
	struct FSoftObjectPath LuaErrorWidgetPath; // 0x50(0x18)
	char pad_68[0x8]; // 0x68(0x08)
	struct ULuaErrorWidgetBase* LuaErrorWidget; // 0x70(0x08)
	char pad_78[0x60]; // 0x78(0x60)

	void SetLuaErrorPopWidget(struct ULuaErrorWidgetBase* Widget); // Function Solarland.SolarLuaManager.SetLuaErrorPopWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x283d7f0
	void OnLuaContextCleanup(bool bFullCleanup); // Function Solarland.SolarLuaManager.OnLuaContextCleanup // (Event|Public|BlueprintEvent) // @ game+0xb66830
	enum class ESolarBuildConfiguration GetBuildConfiguration(); // Function Solarland.SolarLuaManager.GetBuildConfiguration // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x283c620
	void AddToDoNotShowAgainList(struct FString Msg); // Function Solarland.SolarLuaManager.AddToDoNotShowAgainList // (Final|Native|Public|BlueprintCallable) // @ game+0x283c200
};

// Class Solarland.SolarMainPlayerModel
// Size: 0x30 (Inherited: 0x28)
struct USolarMainPlayerModel : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	void SyncFromPlayerData(int32_t InAccountFlag); // Function Solarland.SolarMainPlayerModel.SyncFromPlayerData // (Final|Native|Public) // @ game+0x283d880
	bool IsAccountFlagOn(); // Function Solarland.SolarMainPlayerModel.IsAccountFlagOn // (Final|Native|Public|Const) // @ game+0x283d210
};

// Class Solarland.SolarMapManager
// Size: 0x288 (Inherited: 0x30)
struct USolarMapManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMapData MapData; // 0x38(0x3c)
	struct FVehicleData VehicleData; // 0x74(0x10)
	struct FMiniMapAirlineData CurAirlineData; // 0x84(0x30)
	struct FVector AirlineActorLoc; // 0xb4(0x0c)
	int32_t CurrentMapID; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct FString CurrentMapName; // 0xc8(0x10)
	char pad_D8[0x70]; // 0xd8(0x70)
	struct UVisualSoundConfig* BattlePromptConfig; // 0x148(0x08)
	struct UGameModeGlobalSetting* GameModeGlobalSetting; // 0x150(0x08)
	struct FBattlePromptData BattlePromptData; // 0x158(0x18)
	char pad_170[0x118]; // 0x170(0x118)

	struct FVector2D WorldLocationToMiniMap(struct FVector WorldLocation); // Function Solarland.SolarMapManager.WorldLocationToMiniMap // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x283d9d0
	float WorldLengthToMiniMap(float WorldLength); // Function Solarland.SolarMapManager.WorldLengthToMiniMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x283d930
	void UnInitMapData(); // Function Solarland.SolarMapManager.UnInitMapData // (Final|Native|Public|BlueprintCallable) // @ game+0x283d910
	void ReceiveInitMapData(int32_t MapID); // Function Solarland.SolarMapManager.ReceiveInitMapData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnLeaveParachuting(); // Function Solarland.SolarMapManager.OnLeaveParachuting // (Final|Native|Public) // @ game+0x283d540
	void OnEnterParachuting(); // Function Solarland.SolarMapManager.OnEnterParachuting // (Final|Native|Public) // @ game+0x283d520
	struct FVector2D Normal2D(struct FVector2D VectorToTransForm); // Function Solarland.SolarMapManager.Normal2D // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x283d490
	struct FVector MiniMapToWorldLocation(struct FVector2D PositionXY, float Z); // Function Solarland.SolarMapManager.MiniMapToWorldLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x283d3b0
	bool IsOutOfBound(struct FVector2D PlayerNavPos); // Function Solarland.SolarMapManager.IsOutOfBound // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x283d320
	bool IsMiniMapAirlineDataValid(struct FMiniMapAirlineData& InData); // Function Solarland.SolarMapManager.IsMiniMapAirlineDataValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x283d240
	void InitMapData(int32_t MapID); // Function Solarland.SolarMapManager.InitMapData // (Final|Native|Public|BlueprintCallable) // @ game+0x283d160
	struct ASolarCharacter* GetViewportFocusedCharacter(); // Function Solarland.SolarMapManager.GetViewportFocusedCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x283d090
	bool GetSafeAreaInfo(struct FSafeAreaMapInfo& OutAreaInfo); // Function Solarland.SolarMapManager.GetSafeAreaInfo // (Final|Native|Public|HasOutParms) // @ game+0x283cfd0
	struct FVector GetRandomVectorFromMapDarkData(struct UObject* WorldContextObject, enum class EMapDarkDataType InType, bool GetWhiteArea); // Function Solarland.SolarMapManager.GetRandomVectorFromMapDarkData // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x283cea0
	struct UCurveFloat* GetMiniMapFOVCurve(float InRadius); // Function Solarland.SolarMapManager.GetMiniMapFOVCurve // (Final|Native|Public) // @ game+0x283cca0
	int32_t GetLenegthFromPlayerToMarkPoint(struct FVector MarkPosRealWorld, struct FVector CurrentPlayerLocation); // Function Solarland.SolarMapManager.GetLenegthFromPlayerToMarkPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x283cbb0
	bool GetIntersectionOnMapFrame(struct FVector2D TeamMatePos, struct FVector2D MapAPos, float MapFrameHeight, float MapFrameWidth, struct FVector2D& InterSecionList, enum class EDirection& CrossDirection); // Function Solarland.SolarMapManager.GetIntersectionOnMapFrame // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x283c990
	float GetDistanceToSafeArea(struct FSafeAreaMapInfo& AreaInfo, struct FVector& FromLocation); // Function Solarland.SolarMapManager.GetDistanceToSafeArea // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x283c890
	int32_t GetCurrentMapID(); // Function Solarland.SolarMapManager.GetCurrentMapID // (Final|Native|Public|BlueprintCallable) // @ game+0x283c860
	struct FMiniMapAirlineData GetCurAirlineData(); // Function Solarland.SolarMapManager.GetCurAirlineData // (Final|Native|Public|BlueprintCallable) // @ game+0x283c820
	struct UVisualSoundConfig* GetBattlePromptConfig(); // Function Solarland.SolarMapManager.GetBattlePromptConfig // (Final|Native|Protected) // @ game+0x283c5f0
	struct FVector2D FixNavPos(struct FVector2D PlayerNavPos); // Function Solarland.SolarMapManager.FixNavPos // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x283c560
	bool CheckMapDarkDataWithVector(struct FVector InVector, enum class EMapDarkDataType InType, bool GetWhiteArea); // Function Solarland.SolarMapManager.CheckMapDarkDataWithVector // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x283c440
	bool CheckIfMarkedPointValid(struct FVector2D& InMarkedPoint); // Function Solarland.SolarMapManager.CheckIfMarkedPointValid // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x283c3a0
	float CalculatePoisonDistance(struct FSafeAreaMapInfo& AreaInfo, struct FVector& FromLocation); // Function Solarland.SolarMapManager.CalculatePoisonDistance // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x283c2a0
};

// Class Solarland.SolarMapSelectPoint
// Size: 0x3d0 (Inherited: 0x298)
struct ASolarMapSelectPoint : ASolarMapElementBase {
	int32_t MapID; // 0x298(0x04)
	struct FMapSelectPointCellConfig MapCellConfig; // 0x29c(0x14)
	struct UMapSelectPointNoticeMap* SelectPointNoticeMapWidgetClass; // 0x2b0(0x08)
	struct UMapSelectPointCellWidget* CellWidgetClass; // 0x2b8(0x08)
	struct USolarMapManager* MapManager; // 0x2c0(0x08)
	struct USolarGameMode_ElementManager* ElementManager; // 0x2c8(0x08)
	struct UMapSelectPointNoticeMap* SelectPointNoticeMap; // 0x2d0(0x08)
	struct TMap<struct FString, struct UMapSelectPointCellWidget*> WidgetInCells; // 0x2d8(0x50)
	char pad_328[0x50]; // 0x328(0x50)
	struct TMap<struct FString, struct FMapSelectPointCellData> AllCellsData; // 0x378(0x50)
	char pad_3C8[0x8]; // 0x3c8(0x08)

	void SetCellSelectionAccess(struct FMapSelectPointCellAddress& InCellAdr, enum class EMapCellSelectionAccess InNewState); // Function Solarland.SolarMapSelectPoint.SetCellSelectionAccess // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x283d690
	void ServerSetCellSelectionAccess(struct FString InAddress, enum class EMapCellSelectionAccess InNewState); // Function Solarland.SolarMapSelectPoint.ServerSetCellSelectionAccess // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x283d5a0
	void OnNoticeMapInitialized(); // Function Solarland.SolarMapSelectPoint.OnNoticeMapInitialized // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnInitSelectPoint(int32_t InMapID); // Function Solarland.SolarMapSelectPoint.OnInitSelectPoint // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnCellBeSelected(struct FMapSelectPointCellAddress& CellAddress, bool IsSelected); // Function Solarland.SolarMapSelectPoint.OnCellBeSelected // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void InitSelectPointData(); // Function Solarland.SolarMapSelectPoint.InitSelectPointData // (Final|Native|Public|BlueprintCallable) // @ game+0x283d1f0
	struct UUserWidget* GetWidgetInCell(struct FMapSelectPointCellAddress& InCellAdr); // Function Solarland.SolarMapSelectPoint.GetWidgetInCell // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x283d0c0
	struct UUserWidget* GetSelectPointNoticeMapWidget(); // Function Solarland.SolarMapSelectPoint.GetSelectPointNoticeMapWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x283d070
	struct TArray<struct ASolarPlayerStart*> GetPlayerStartsInCell(struct FMapSelectPointCellAddress& InCellAdr, struct TArray<struct FString>& InTags); // Function Solarland.SolarMapSelectPoint.GetPlayerStartsInCell // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x283cd30
	enum class EMapCellSelectionAccess GetCellSelectState(struct FMapSelectPointCellAddress& InCellAdr); // Function Solarland.SolarMapSelectPoint.GetCellSelectState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x283c780
	bool GetCellPositionOnBigMap(struct FMapSelectPointCellAddress& InCellAdr, struct FVector2D& LU_Pos, struct FVector2D& RD_Pos); // Function Solarland.SolarMapSelectPoint.GetCellPositionOnBigMap // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x283c650
};

// Class Solarland.SolarMapVehicleObject
// Size: 0x50 (Inherited: 0x28)
struct USolarMapVehicleObject : UObject {
	struct TSoftObjectPtr<UTexture2D> SoftVehicleIcon; // 0x28(0x28)
};

// Class Solarland.SolarMapVehicleTabSlot
// Size: 0x410 (Inherited: 0x400)
struct USolarMapVehicleTabSlot : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)
	struct UImage* Img_Car; // 0x408(0x08)

	void SetEmpty(bool bEmpty); // Function Solarland.SolarMapVehicleTabSlot.SetEmpty // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarMapVehicleWidget
// Size: 0x478 (Inherited: 0x400)
struct USolarMapVehicleWidget : USolarUserWidget {
	struct UButton* Btn_EnableTaskPanel; // 0x400(0x08)
	struct UTileView* VehicleList; // 0x408(0x08)
	bool bExpand; // 0x410(0x01)
	char pad_411[0x7]; // 0x411(0x07)
	struct TMap<int32_t, struct TSoftObjectPtr<UTexture2D>> VehicleSpawnerTypeIcons; // 0x418(0x50)
	struct TArray<struct UObject*> MapVehicleObjects; // 0x468(0x10)

	void SetExpand(bool bInExpand); // Function Solarland.SolarMapVehicleWidget.SetExpand // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnBtnEnableTaskPanelClicked(); // Function Solarland.SolarMapVehicleWidget.OnBtnEnableTaskPanelClicked // (Final|Native|Public) // @ game+0x2842050
	void InitVehicleList(); // Function Solarland.SolarMapVehicleWidget.InitVehicleList // (Final|Native|Public) // @ game+0x2841f60
};

// Class Solarland.SolarMath
// Size: 0x28 (Inherited: 0x28)
struct USolarMath : UObject {

	float TanInRadian(float Value); // Function Solarland.SolarMath.TanInRadian // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2842670
	float TanInDegree(float Value); // Function Solarland.SolarMath.TanInDegree // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x28425e0
	float SinInRadian(float Value); // Function Solarland.SolarMath.SinInRadian // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2842550
	float SinInDegree(float Value); // Function Solarland.SolarMath.SinInDegree // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x28424c0
	float CosInRadian(float Value); // Function Solarland.SolarMath.CosInRadian // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2841eb0
	float CosInDegree(float Value); // Function Solarland.SolarMath.CosInDegree // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2841e20
	float Clamp01(float Value); // Function Solarland.SolarMath.Clamp01 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2841d90
	float AtanInRadian(float Value); // Function Solarland.SolarMath.AtanInRadian // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x28419f0
	float AtanInDegree(float Value); // Function Solarland.SolarMath.AtanInDegree // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2841960
	float AsinInRadian(float Value); // Function Solarland.SolarMath.AsinInRadian // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x28418d0
	float AsinInDegree(float Value); // Function Solarland.SolarMath.AsinInDegree // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2841840
	float AcosInRadian(float Value); // Function Solarland.SolarMath.AcosInRadian // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x28417b0
	float AcosInDegree(float Value); // Function Solarland.SolarMath.AcosInDegree // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2841720
};

// Class Solarland.SolarMetaAttributeSet
// Size: 0x50 (Inherited: 0x30)
struct USolarMetaAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData Damage; // 0x30(0x10)
	struct FGameplayAttributeData ShieldDamage; // 0x40(0x10)
};

// Class Solarland.MobilePlatform
// Size: 0x290 (Inherited: 0x228)
struct AMobilePlatform : AActor {
	struct USplineComponent* SplineComponent; // 0x228(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x230(0x08)
	struct TArray<struct FMobilePlatformSplinePoint> PointInfos; // 0x238(0x10)
	float ConfigDefaultSpeed; // 0x248(0x04)
	float ConfigDefaultDelayTime; // 0x24c(0x04)
	float CurrentSpeed; // 0x250(0x04)
	float CurrentDistance; // 0x254(0x04)
	float TotalDistance; // 0x258(0x04)
	float DelayTime; // 0x25c(0x04)
	int32_t PointNum; // 0x260(0x04)
	int32_t PointIndex; // 0x264(0x04)
	struct FVector MoveVecter; // 0x268(0x0c)
	struct FVector MeshExtend; // 0x274(0x0c)
	char pad_280[0x10]; // 0x280(0x10)

	void UpdateRotation(float DeltaSeconds); // Function Solarland.MobilePlatform.UpdateRotation // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2842900
	void UpdateOverlapActor(float DeltaSeconds, struct AActor* InActor); // Function Solarland.MobilePlatform.UpdateOverlapActor // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2842820
	void UpdateLocation(float DeltaSeconds); // Function Solarland.MobilePlatform.UpdateLocation // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2842790
	void UpdateCurrentDistance(float DeltSeconds); // Function Solarland.MobilePlatform.UpdateCurrentDistance // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2842700
	void OnEnterPoint(); // Function Solarland.MobilePlatform.OnEnterPoint // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1ae6410
	void OnEndOverlap(struct AActor* ThisActor, struct AActor* OtherActor); // Function Solarland.MobilePlatform.OnEndOverlap // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2842210
	void OnBeginOverlap(struct AActor* ThisActor, struct AActor* OtherActor); // Function Solarland.MobilePlatform.OnBeginOverlap // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2841f80
	void Init(); // Function Solarland.MobilePlatform.Init // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x8265e0
	struct UShapeComponent* GetCollisionComponent(); // Function Solarland.MobilePlatform.GetCollisionComponent // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	bool CheckNeedOverlap(float DeltaSeconds, struct AActor* InActor); // Function Solarland.MobilePlatform.CheckNeedOverlap // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2841cb0
};

// Class Solarland.SolarModMagnitudeCalc
// Size: 0x68 (Inherited: 0x40)
struct USolarModMagnitudeCalc : UGameplayModMagnitudeCalculation {
	struct UModMagnitudeCalcProxy* CDOProxyClass; // 0x40(0x08)
	struct UModMagnitudeCalcProxy* CDOProxy; // 0x48(0x08)
	char pad_50[0x18]; // 0x50(0x18)
};

// Class Solarland.SolarMoveToCostSecAction
// Size: 0x98 (Inherited: 0x30)
struct USolarMoveToCostSecAction : UBlueprintAsyncActionBase {
	char pad_30[0x48]; // 0x30(0x48)
	struct FMulticastInlineDelegate OnCalcMoveToCostSuc; // 0x78(0x10)
	struct FMulticastInlineDelegate OnCalcMoveToCostFailed; // 0x88(0x10)

	struct USolarMoveToCostSecAction* CalcMoveToCostSec(struct UObject* WorldContextObject, struct ASolarBotAIController* BotController, struct FVector MoveToLocation, struct AActor* MoveToActor, float AcceptRadius, bool bAllowPartialPath, bool bProjectGoalLocation); // Function Solarland.SolarMoveToCostSecAction.CalcMoveToCostSec // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2841a80
};

// Class Solarland.SolarNavArea_Jet
// Size: 0x48 (Inherited: 0x48)
struct USolarNavArea_Jet : UNavArea {
};

// Class Solarland.SolarNavArea_Vault
// Size: 0x48 (Inherited: 0x48)
struct USolarNavArea_Vault : UNavArea {
};

// Class Solarland.SolarNavArea_Water
// Size: 0x48 (Inherited: 0x48)
struct USolarNavArea_Water : UNavArea {
};

// Class Solarland.SolarNavLink_Jet
// Size: 0x290 (Inherited: 0x278)
struct ASolarNavLink_Jet : ANavLinkProxy {
	float JetTimeout; // 0x278(0x04)
	bool bNoFail; // 0x27c(0x01)
	bool bMarkInValidAfterFailedUse; // 0x27d(0x01)
	char pad_27E[0x12]; // 0x27e(0x12)
};

// Class Solarland.SolarNavLink_Vault
// Size: 0x2a0 (Inherited: 0x278)
struct ASolarNavLink_Vault : ANavLinkProxy {
	float VaultTimeOut; // 0x278(0x04)
	bool bNoFail; // 0x27c(0x01)
	bool bMarkInValidAfterFailedUse; // 0x27d(0x01)
	char pad_27E[0x2]; // 0x27e(0x02)
	float MaxDistancePrecision; // 0x280(0x04)
	float PassDetactionExtentZ; // 0x284(0x04)
	char pad_288[0x18]; // 0x288(0x18)
};

// Class Solarland.SolarNavLinkCustomComponent
// Size: 0x1a0 (Inherited: 0x190)
struct USolarNavLinkCustomComponent : UNavLinkCustomComponent {
	char pad_190[0x10]; // 0x190(0x10)
};

// Class Solarland.SolarNavLinkManager
// Size: 0x290 (Inherited: 0x278)
struct ASolarNavLinkManager : ANavLinkProxy {
	struct USolarNavLinkRegisterComponent* SolarSmartLinkComp; // 0x278(0x08)
	char pad_280[0x10]; // 0x280(0x10)
};

// Class Solarland.SolarNavLinkRegisterComponent
// Size: 0x260 (Inherited: 0x190)
struct USolarNavLinkRegisterComponent : UNavLinkCustomComponent {
	struct TMap<uint32_t, struct FSmartLinkInstance> SmartLinkMap; // 0x190(0x50)
	char pad_1E0[0x50]; // 0x1e0(0x50)
	enum class ENavLinkType LinkType; // 0x230(0x01)
	char pad_231[0x3]; // 0x231(0x03)
	struct FVector VaultPoint; // 0x234(0x0c)
	struct FVector VaultDirect; // 0x240(0x0c)
	enum class EVaultType VaultAnimate; // 0x24c(0x01)
	char pad_24D[0x3]; // 0x24d(0x03)
	struct FVector VaultLandPoint; // 0x250(0x0c)
	char pad_25C[0x4]; // 0x25c(0x04)
};

// Class Solarland.SolarNavModifierComponent
// Size: 0x150 (Inherited: 0x140)
struct USolarNavModifierComponent : UNavModifierComponent {
	char pad_140[0x10]; // 0x140(0x10)

	void OnVehicleRootHit(struct UPrimitiveComponent* HitComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarNavModifierComponent.OnVehicleRootHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x28422e0
	void OnDriverGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarNavModifierComponent.OnDriverGetOnVehicle // (Final|Native|Protected) // @ game+0x2842140
	void OnDriverGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarNavModifierComponent.OnDriverGetOffVehicle // (Final|Native|Protected) // @ game+0x2842070
};

// Class Solarland.SolarNavQueryFilter
// Size: 0x50 (Inherited: 0x48)
struct USolarNavQueryFilter : UNavigationQueryFilter {
	uint32_t MaxSearchNode; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Solarland.SolarNavQueryFilter_ExcludeJet
// Size: 0x50 (Inherited: 0x50)
struct USolarNavQueryFilter_ExcludeJet : USolarNavQueryFilter {
};

// Class Solarland.SolarNavQueryFilter_JetInvalid
// Size: 0x50 (Inherited: 0x50)
struct USolarNavQueryFilter_JetInvalid : USolarNavQueryFilter {
};

// Class Solarland.SolarNavWeedActor
// Size: 0x248 (Inherited: 0x228)
struct ASolarNavWeedActor : ATargetPoint {
	char pad_228[0x20]; // 0x228(0x20)
};

// Class Solarland.SolarNetMovementComponent
// Size: 0x6a0 (Inherited: 0xb0)
struct USolarNetMovementComponent : UActorComponent {
	char pad_B0[0x34]; // 0xb0(0x34)
	float InterpolatedBackTime; // 0xe4(0x04)
	float ServerBufferCheckMinSpeed; // 0xe8(0x04)
	float ServerBufferIgnoreCheckTimer; // 0xec(0x04)
	float AtRestThresholdCount; // 0xf0(0x04)
	enum class EExtrapolationMode ExtrapolationMode; // 0xf4(0x01)
	bool bUseExtrapolationTimeLimit; // 0xf5(0x01)
	char pad_F6[0x2]; // 0xf6(0x02)
	float ExtrapolationTimeLimit; // 0xf8(0x04)
	bool bUseExtrapolationDistanceLimit; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	float ExtrapolationDistanceLimit; // 0x100(0x04)
	float SendPositionThreshold; // 0x104(0x04)
	float SendRotationThreshold; // 0x108(0x04)
	float SendVelocityThreshold; // 0x10c(0x04)
	float SendAngularVelocityThreshold; // 0x110(0x04)
	float ResetTimeOffsetsThreshold; // 0x114(0x04)
	float UsingRepLocationThreshold; // 0x118(0x04)
	float LinearVelcolityForPositionThreshold; // 0x11c(0x04)
	float ReceivedPositionThreshold; // 0x120(0x04)
	float AngularVelocityForRotationThreshold; // 0x124(0x04)
	float ReceivedRotationThreshold; // 0x128(0x04)
	float PositionSnapThreshold; // 0x12c(0x04)
	float RotationSnapThreshold; // 0x130(0x04)
	float PositionLerpSpeed; // 0x134(0x04)
	float RotationLerpSpeed; // 0x138(0x04)
	float SpeedOfLerp; // 0x13c(0x04)
	enum class ESyncMode SyncPosition; // 0x140(0x01)
	enum class ESyncMode SyncRotation; // 0x141(0x01)
	enum class ESyncMode SyncVelocity; // 0x142(0x01)
	enum class ESyncMode SyncAngularVelocity; // 0x143(0x01)
	bool bSyncDesiredYaw; // 0x144(0x01)
	bool isPositionCompressed; // 0x145(0x01)
	bool isRotationCompressed; // 0x146(0x01)
	bool isVelocityCompressed; // 0x147(0x01)
	bool isAngularVelocityCompressed; // 0x148(0x01)
	char pad_149[0x3]; // 0x149(0x03)
	float SendRate; // 0x14c(0x04)
	float TimeSmoothing; // 0x150(0x04)
	bool bUsingOriginRebasing; // 0x154(0x01)
	bool bAlwaysSendOrigin; // 0x155(0x01)
	char pad_156[0x3a]; // 0x156(0x3a)
	struct UPrimitiveComponent* PrimitiveComponent; // 0x190(0x08)
	struct USceneComponent* RelativeComponent; // 0x198(0x08)
	struct ASolarVehiclePawn* PreviousBaseVehicleActor; // 0x1a0(0x08)
	char pad_1A8[0x368]; // 0x1a8(0x368)
	float AtRestPositionThreshold; // 0x510(0x04)
	float AtRestRotationThreshold; // 0x514(0x04)
	char pad_518[0x10]; // 0x518(0x10)
	struct ASolarVehiclePawn* VehiclePawn; // 0x528(0x08)
	char pad_530[0x170]; // 0x530(0x170)
};

// Class Solarland.SolarNightComesActor
// Size: 0x648 (Inherited: 0x4b0)
struct ASolarNightComesActor : ASummonItemBase {
	float BeginEffectDuration; // 0x4b0(0x04)
	float OngoingEffectDuration; // 0x4b4(0x04)
	float OngoingEffectClearDelay; // 0x4b8(0x04)
	float EndEffectDuration; // 0x4bc(0x04)
	float VisualEffectBeginDelay_AfterBeginEffect; // 0x4c0(0x04)
	float VisualEffectEndDelay_AfterEndEffect; // 0x4c4(0x04)
	struct UParticleSystem* BeginEffect; // 0x4c8(0x08)
	struct UParticleSystem* OngoingEffect; // 0x4d0(0x08)
	struct UParticleSystem* EndEffect; // 0x4d8(0x08)
	struct UParticleSystem* ItemEffect; // 0x4e0(0x08)
	struct UParticleSystem* ItemExplodeEffect; // 0x4e8(0x08)
	struct UParticleSystem* ItemDisappearEffect; // 0x4f0(0x08)
	float EffectRadius; // 0x4f8(0x04)
	float NightfellRadius; // 0x4fc(0x04)
	float NightFellRadius_WithBuff; // 0x500(0x04)
	float NightFellCapacity; // 0x504(0x04)
	float NightfellFadeness; // 0x508(0x04)
	char pad_50C[0x4]; // 0x50c(0x04)
	struct UCurveFloat* ItemFellRadiusCurve; // 0x510(0x08)
	bool bShowDebug; // 0x518(0x01)
	bool bOpenVisualFell; // 0x519(0x01)
	char pad_51A[0x2]; // 0x51a(0x02)
	float UpdateEffectingCharacterInterval; // 0x51c(0x04)
	struct UStaticMeshComponent* StaticMeshCollision; // 0x520(0x08)
	struct USkeletalMeshComponent* ItemSkeletalMesh; // 0x528(0x08)
	struct FVector EffectScale; // 0x530(0x0c)
	char pad_53C[0x4]; // 0x53c(0x04)
	struct UAnimationAsset* StartAnim; // 0x540(0x08)
	struct FString StartLoopSound; // 0x548(0x10)
	struct FString EndLoopSound; // 0x558(0x10)
	struct FString EnterSound; // 0x568(0x10)
	struct FString ExitSound; // 0x578(0x10)
	struct FString ExplodeSound; // 0x588(0x10)
	struct FString HitBy1pSound; // 0x598(0x10)
	float MeshVisibleDelay; // 0x5a8(0x04)
	int32_t PerspectiveMeshSortPriority; // 0x5ac(0x04)
	struct UMaterialInterface* StencilMaterial; // 0x5b0(0x08)
	struct UGameplayEffect* NightComesContinousEffect; // 0x5b8(0x08)
	enum class ENightComesState CurrentState; // 0x5c0(0x01)
	char pad_5C1[0x37]; // 0x5c1(0x37)
	struct UParticleSystemComponent* BeginEffectHandle; // 0x5f8(0x08)
	struct UParticleSystemComponent* OngingEffectHandle; // 0x600(0x08)
	struct UParticleSystemComponent* EndEffectHandle; // 0x608(0x08)
	struct UParticleSystemComponent* ItemEffectHandle; // 0x610(0x08)
	struct ASolarCharacter* InstigatorCharacter; // 0x618(0x08)
	char pad_620[0x10]; // 0x620(0x10)
	struct TArray<struct AActor*> EffectingActors; // 0x630(0x10)
	char pad_640[0x8]; // 0x640(0x08)

	void OnRep_NightComesState(); // Function Solarland.SolarNightComesActor.OnRep_NightComesState // (Final|Native|Private) // @ game+0x2846e40
	void OnMeshVisible(); // Function Solarland.SolarNightComesActor.OnMeshVisible // (Final|Native|Protected) // @ game+0x2846ba0
	void OnGoingPhase(); // Function Solarland.SolarNightComesActor.OnGoingPhase // (Final|Native|Protected) // @ game+0x2846b80
	void OnEndPhase(); // Function Solarland.SolarNightComesActor.OnEndPhase // (Final|Native|Public) // @ game+0x2846b60
	void OnComponentEndOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarNightComesActor.OnComponentEndOverlap // (Final|Native|Protected) // @ game+0x2846a00
	void OnComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarNightComesActor.OnComponentBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x28467e0
	void OnBeginPhase(); // Function Solarland.SolarNightComesActor.OnBeginPhase // (Final|Native|Protected) // @ game+0x2846610
	void LocalRemoveSelf(); // Function Solarland.SolarNightComesActor.LocalRemoveSelf // (Final|Native|Public) // @ game+0x2846590
	void EndVisualEffect(); // Function Solarland.SolarNightComesActor.EndVisualEffect // (Final|Native|Protected) // @ game+0x2846160
	void BeginVisualEffect(); // Function Solarland.SolarNightComesActor.BeginVisualEffect // (Final|Native|Protected) // @ game+0x28460b0
};

// Class Solarland.SolarNoSpringCameraComponent
// Size: 0xa50 (Inherited: 0xa30)
struct USolarNoSpringCameraComponent : USolarCameraComponent {
	char pad_A30[0x20]; // 0xa30(0x20)
};

// Class Solarland.SolarNPC
// Size: 0x4e0 (Inherited: 0x4d0)
struct ASolarNPC : ACharacter {
	struct USphereComponent* InteractionCollision; // 0x4c8(0x08)
	struct ASolarCharacter* LookAtPlayer; // 0x4d0(0x08)
	float LookYaw; // 0x4d8(0x04)
};

// Class Solarland.SolarObjGameplayAbility
// Size: 0x418 (Inherited: 0x400)
struct USolarObjGameplayAbility : UGameplayAbility {
	struct UGameplayEffect* ActivateEffect; // 0x400(0x08)
	float CostEnergy; // 0x408(0x04)
	char pad_40C[0xc]; // 0x40c(0x0c)

	struct ASolarInteractableActor* GetAbilityInstigator(); // Function Solarland.SolarObjGameplayAbility.GetAbilityInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2846240
	struct AActor* GetAbilityEffectUser(); // Function Solarland.SolarObjGameplayAbility.GetAbilityEffectUser // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2846210
};

// Class Solarland.SolarObjAbilityRadar
// Size: 0x428 (Inherited: 0x418)
struct USolarObjAbilityRadar : USolarObjGameplayAbility {
	struct ASolarRadarBase* RadarClass; // 0x418(0x08)
	float LifeTime; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)

	void K2_ApplyRadarAbility(struct ASolarRadarBase* SpawnedRadar); // Function Solarland.SolarObjAbilityRadar.K2_ApplyRadarAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x2846500
};

// Class Solarland.SolarObjAbilitySystemComponent
// Size: 0x1348 (Inherited: 0x12f8)
struct USolarObjAbilitySystemComponent : UAbilitySystemComponent {
	char pad_12F8[0x10]; // 0x12f8(0x10)
	struct FGameplayTagContainer NotifyTags; // 0x1308(0x20)
	struct FGameplayTagContainer RepNotifiedTags; // 0x1328(0x20)

	void OnRep_RepNotifiedTags(struct FGameplayTagContainer& Previous); // Function Solarland.SolarObjAbilitySystemComponent.OnRep_RepNotifiedTags // (Native|Protected|HasOutParms) // @ game+0x2846e60
};

// Class Solarland.SolarObjectPoolManager
// Size: 0xd0 (Inherited: 0x30)
struct USolarObjectPoolManager : UGameInstanceSubsystem {
	struct TMap<struct FName, struct FObjectArray> CachedMap; // 0x30(0x50)
	char pad_80[0x50]; // 0x80(0x50)

	struct TArray<struct UObject*> PushObjectArray(struct TArray<struct UObject*> ObjectArray, struct FName Tag); // Function Solarland.SolarObjectPoolManager.PushObjectArray // (Final|Native|Public|BlueprintCallable) // @ game+0x2847280
	bool PushObject(struct UObject* Object, struct FName Tag); // Function Solarland.SolarObjectPoolManager.PushObject // (Final|Native|Public|BlueprintCallable) // @ game+0x28471b0
	struct UObject* PopObjectByTag(struct FName Tag); // Function Solarland.SolarObjectPoolManager.PopObjectByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x2847110
	struct USolarObjectPoolManager* Get(struct UObject* WorldContextObject); // Function Solarland.SolarObjectPoolManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2846180
	void CleanUp(); // Function Solarland.SolarObjectPoolManager.CleanUp // (Final|Native|Public|BlueprintCallable) // @ game+0x266dc60
};

// Class Solarland.SolarOBUIModel
// Size: 0xe8 (Inherited: 0x28)
struct USolarOBUIModel : UObject {
	char pad_28[0x60]; // 0x28(0x60)
	struct FMulticastInlineDelegate OnAnyTeamKillCountChanged; // 0x88(0x10)
	char pad_98[0x50]; // 0x98(0x50)

	void SimpleDynamicMulticastDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarOBUIModel.SimpleDynamicMulticastDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void RegisterEvents(); // Function Solarland.SolarOBUIModel.RegisterEvents // (Final|Native|Public) // @ game+0x2847400
	void OnTeamSettled(struct ASolarTeamInfo* Team); // Function Solarland.SolarOBUIModel.OnTeamSettled // (Final|Native|Private) // @ game+0x2847080
	void OnTeamKillCountChanged(struct ASolarTeamInfo* TeamInfo); // Function Solarland.SolarOBUIModel.OnTeamKillCountChanged // (Final|Native|Private) // @ game+0x2846ff0
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.SolarOBUIModel.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x2846f20
	void OnRemainTeamsCountChanged(char TeamsCount); // Function Solarland.SolarOBUIModel.OnRemainTeamsCountChanged // (Final|Native|Private|Const) // @ game+0x2846dc0
	void OnRemainPlayersCountChanged(char PlayersCount); // Function Solarland.SolarOBUIModel.OnRemainPlayersCountChanged // (Final|Native|Private|Const) // @ game+0x2846d40
	void OnPlayingScrubCharactersCreated(); // Function Solarland.SolarOBUIModel.OnPlayingScrubCharactersCreated // (Final|Native|Public) // @ game+0x2846d20
	void OnPlayerLeaveTeam(struct ASolarTeamInfo* TeamInfo, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarOBUIModel.OnPlayerLeaveTeam // (Final|Native|Public) // @ game+0x2846bc0
	void OnPlayerKillCountChanged(struct ASolarPlayerState* InPlayerState); // Function Solarland.SolarOBUIModel.OnPlayerKillCountChanged // (Final|Native|Private) // @ game+0x2846c90
	void OnPlayerJoinTeam(struct ASolarTeamInfo* TeamInfo, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarOBUIModel.OnPlayerJoinTeam // (Final|Native|Public) // @ game+0x2846bc0
	void OnCheatersPlayerIDChanged(); // Function Solarland.SolarOBUIModel.OnCheatersPlayerIDChanged // (Final|Native|Public) // @ game+0x28467c0
	void Init(); // Function Solarland.SolarOBUIModel.Init // (Final|Native|Public) // @ game+0x2846310
};

// Class Solarland.SolarOperationUIElement
// Size: 0x68 (Inherited: 0x28)
struct USolarOperationUIElement : UObject {
	struct TArray<struct FOperationUIElement> CharacterOperationUI; // 0x28(0x10)
	struct TArray<struct FOperationUIElement> DirectionOperationUI; // 0x38(0x10)
	struct TArray<struct FOperationUIElement> SteeringOperationUI; // 0x48(0x10)
	struct TArray<struct FOperationUIElement> JoyStickOperationUI; // 0x58(0x10)
};

// Class Solarland.SolarOrnamentChildActor
// Size: 0x228 (Inherited: 0x228)
struct ASolarOrnamentChildActor : AActor {
};

// Class Solarland.SolarOrnamentHackerBall
// Size: 0x280 (Inherited: 0x228)
struct ASolarOrnamentHackerBall : ASolarOrnamentChildActor {
	struct ASolarCharacter* OwnerCharacter; // 0x228(0x08)
	struct USkeletalMeshComponent* OwnerMeshComp; // 0x230(0x08)
	struct FName SoftAttachBoneName; // 0x238(0x08)
	struct FName SoftAttachSecondBoneName; // 0x240(0x08)
	char pad_248[0x8]; // 0x248(0x08)
	struct FTransform AttachRelativeTransform; // 0x250(0x30)
};

// Class Solarland.SolarPawn
// Size: 0x28 (Inherited: 0x28)
struct USolarPawn : UInterface {
};

// Class Solarland.SolarPerceptionComponent
// Size: 0x330 (Inherited: 0x180)
struct USolarPerceptionComponent : UAIPerceptionComponent {
	struct FSolarBotThreatConfig DefaultThreatConfig; // 0x180(0x70)
	struct TMap<enum class EPerceivableEffectAreaType, struct AActor*> ConfigAreaTypeIdentifyMap; // 0x1f0(0x50)
	struct FPerceivableEAInfluenceConfig EffectAreasInfluenceConfig; // 0x240(0x60)
	float MaxInfluenceRadius; // 0x2a0(0x04)
	float SmokeGrenadeAffectRadius; // 0x2a4(0x04)
	float EnergyBubbleAffectRadius; // 0x2a8(0x04)
	float SummonWallAffectRadius; // 0x2ac(0x04)
	float UAVShieldAffectRadius; // 0x2b0(0x04)
	float UAVRescueAffectRadius; // 0x2b4(0x04)
	bool bTargetSelectEnabled; // 0x2b8(0x01)
	char pad_2B9[0x7]; // 0x2b9(0x07)
	struct TArray<struct FName> ForbiddenTags; // 0x2c0(0x10)
	char pad_2D0[0x38]; // 0x2d0(0x38)
	int32_t MaxNumCachedDamage; // 0x308(0x04)
	char pad_30C[0x24]; // 0x30c(0x24)

	void UpdateSenseConfig(float NewSightRadius, float SightLoseRange); // Function Solarland.SolarPerceptionComponent.UpdateSenseConfig // (Final|Native|Public|BlueprintCallable) // @ game+0x28475b0
	void SetTargetSelectEnabled(bool bInEnable); // Function Solarland.SolarPerceptionComponent.SetTargetSelectEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x2847520
	void SetForbiddenTags(struct TArray<struct FName>& Tags, bool bCleanExists); // Function Solarland.SolarPerceptionComponent.SetForbiddenTags // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2847420
	void OnBotPerceptionUpdated(struct AActor* Actor, struct FAIStimulus Stimulus); // Function Solarland.SolarPerceptionComponent.OnBotPerceptionUpdated // (Final|Native|Protected) // @ game+0x2846630
	bool IsInEffectAreaOfType(enum class EPerceivableEffectAreaType Type, struct AActor* InTestActor); // Function Solarland.SolarPerceptionComponent.IsInEffectAreaOfType // (Final|Native|Public|BlueprintCallable) // @ game+0x2846430
	bool IsInAnyEffectArea(struct TArray<struct FPerceivableEffectArea>& ActiveEffectAreas, struct AActor* InTestActor); // Function Solarland.SolarPerceptionComponent.IsInAnyEffectArea // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2846330
	float GetTargetCurrentThreatValue(struct ASolarCharacter* ThreatTarget); // Function Solarland.SolarPerceptionComponent.GetTargetCurrentThreatValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2846270
	void ClearCurrentThreat(bool bCleanBestTarget); // Function Solarland.SolarPerceptionComponent.ClearCurrentThreat // (Final|Native|Public|BlueprintCallable) // @ game+0x28460d0
};

// Class Solarland.SolarPickupComponent
// Size: 0xa70 (Inherited: 0x560)
struct USolarPickupComponent : UCapsuleComponent {
	struct ASolarCharacter* OwnerChar; // 0x560(0x08)
	char pad_568[0x8]; // 0x568(0x08)
	float PickUpHighlyThresholdFactor; // 0x570(0x04)
	char pad_574[0x1]; // 0x574(0x01)
	bool bWantedClearItemData; // 0x575(0x01)
	char pad_576[0x12]; // 0x576(0x12)
	struct TMap<enum class EPickupItemType, struct USolarPickupHandlerBase*> PickupHandlerMap; // 0x588(0x50)
	struct USolarPickupHandlerBase* NormalPickupHandler; // 0x5d8(0x08)
	bool GlobalPickup; // 0x5e0(0x01)
	char pad_5E1[0x3]; // 0x5e1(0x03)
	struct TWeakObjectPtr<struct AAirDropTreasureBox> TagetAirDropBox; // 0x5e4(0x08)
	char pad_5EC[0xc]; // 0x5ec(0x0c)
	struct FActorArrayMap NormalPickupItems; // 0x5f8(0x50)
	struct TArray<struct AActor*> ProccessedList; // 0x648(0x10)
	struct TArray<struct AActor*> SortedPickupActors; // 0x658(0x10)
	char pad_668[0x1]; // 0x668(0x01)
	bool bPickupListVisible; // 0x669(0x01)
	bool bPickupListCollapsed; // 0x66a(0x01)
	char pad_66B[0x5]; // 0x66b(0x05)
	struct UUIManager* UIManager; // 0x670(0x08)
	struct USolarItemManager* ItemManager; // 0x678(0x08)
	char pad_680[0x52]; // 0x680(0x52)
	bool GlobalAutoPickup; // 0x6d2(0x01)
	char pad_6D3[0x1]; // 0x6d3(0x01)
	float UnAutoPickupItemTime; // 0x6d4(0x04)
	float AutoPickupTime; // 0x6d8(0x04)
	char pad_6DC[0x4]; // 0x6dc(0x04)
	bool StopAutoPickupWhenClose; // 0x6e0(0x01)
	bool bReqPickItem; // 0x6e1(0x01)
	char pad_6E2[0x1e]; // 0x6e2(0x1e)
	bool bPickupCheckBoxOpen; // 0x700(0x01)
	char pad_701[0x7]; // 0x701(0x07)
	struct FTimerHandle AutoPickupTimer; // 0x708(0x08)
	char pad_710[0x38]; // 0x710(0x38)
	struct FMulticastInlineDelegate OnItemDataSet; // 0x748(0x10)
	struct FMulticastInlineDelegate UpdateCheckBoxesVisibility; // 0x758(0x10)
	struct FMulticastInlineDelegate OnUpdateCheckBoxesHighLight; // 0x768(0x10)
	struct FMulticastInlineDelegate OnUpdateCheckBoxesStates; // 0x778(0x10)
	struct FMulticastInlineDelegate OnPickupListClear; // 0x788(0x10)
	struct FMulticastInlineDelegate OnTogglePickupList; // 0x798(0x10)
	bool ListenFireReslutFlag; // 0x7a8(0x01)
	char pad_7A9[0x3]; // 0x7a9(0x03)
	float DelayedDisplayTime; // 0x7ac(0x04)
	struct FTimerHandle AutoShowPickupListHandle; // 0x7b0(0x08)
	struct FTimerHandle DelayProcessFireResultHandle; // 0x7b8(0x08)
	struct FTimerHandle EnsuredAutoShowHandle; // 0x7c0(0x08)
	struct TArray<struct FString> FireResultMsgs; // 0x7c8(0x10)
	char pad_7D8[0x10]; // 0x7d8(0x10)
	struct TArray<struct TWeakObjectPtr<struct ADeathTreasureBox>> NearByDeathboxes; // 0x7e8(0x10)
	struct TWeakObjectPtr<struct ADeathTreasureBox> NearestResurrectBox; // 0x7f8(0x08)
	bool LastResurrecteBtnVisbile; // 0x800(0x01)
	char pad_801[0x3]; // 0x801(0x03)
	float CheckResurrectInterval; // 0x804(0x04)
	float TempResurrectInterval; // 0x808(0x04)
	float CheckStopResurrectInterval; // 0x80c(0x04)
	float TempStopResurrectInterval; // 0x810(0x04)
	char pad_814[0x4]; // 0x814(0x04)
	int32_t PickupRecommendPriority; // 0x818(0x04)
	char pad_81C[0x4]; // 0x81c(0x04)
	struct TMap<enum class EItemType, int32_t> ItemPriorityMap; // 0x820(0x50)
	struct TMap<enum class EItemType, int32_t> ItemMutiPickupMap; // 0x870(0x50)
	struct TMap<enum class EWeaponPartType, int32_t> WeaponPartPriorityMap; // 0x8c0(0x50)
	struct TMap<int32_t, int32_t> WeaponPartIDPriorityMap; // 0x910(0x50)
	struct TWeakObjectPtr<struct AActor> PendingFirstItemActor; // 0x960(0x08)
	char pad_968[0x108]; // 0x968(0x108)

	void UpdateResurrection(float InDeltaTime); // Function Solarland.SolarPickupComponent.UpdateResurrection // (Final|Native|Protected) // @ game+0x284b550
	void UpdateItemUI(bool bForce); // Function Solarland.SolarPickupComponent.UpdateItemUI // (Final|Native|Public) // @ game+0x284b4c0
	void UpdateCheckboxSwitches(bool InPickupOpen); // Function Solarland.SolarPickupComponent.UpdateCheckboxSwitches // (Final|Native|Public) // @ game+0x284b430
	void TryReqPickupItem(struct ASolarItemActor* ItemActor, bool IsAutoPickup, int32_t TargetIndex); // Function Solarland.SolarPickupComponent.TryReqPickupItem // (Final|Native|Public) // @ game+0x284b320
	void TryPickupTreasureItem(struct ASolarTreasureBoxActor* PickActor, struct FSolarItemData& ItemData, int32_t TargetIndex); // Function Solarland.SolarPickupComponent.TryPickupTreasureItem // (Final|Native|Public|HasOutParms) // @ game+0x284b190
	void TryPickupItem(struct AActor* PickActor, int32_t TargetIndex); // Function Solarland.SolarPickupComponent.TryPickupItem // (Final|Native|Public) // @ game+0x284b0c0
	bool TryOpenAirDropTreasureBox(struct AAirDropTreasureBox* AirDropTreasureBox); // Function Solarland.SolarPickupComponent.TryOpenAirDropTreasureBox // (Final|Native|Public) // @ game+0x284b020
	void TryClearDirtyData(bool bForce); // Function Solarland.SolarPickupComponent.TryClearDirtyData // (Final|Native|Public) // @ game+0x284af90
	void TryChangePickupListVisibility(enum class EPickupListChangeReason InReason, bool InVisibility); // Function Solarland.SolarPickupComponent.TryChangePickupListVisibility // (Final|Native|Public) // @ game+0x284aec0
	bool TryCancelOpenAirDropTreasureBox(struct AAirDropTreasureBox* AirDropTreasureBox); // Function Solarland.SolarPickupComponent.TryCancelOpenAirDropTreasureBox // (Final|Native|Public) // @ game+0x284ae20
	void TogglePickupList(bool InVisibility); // Function Solarland.SolarPickupComponent.TogglePickupList // (Final|Native|Public) // @ game+0x284ad90
	void StopListenFireInput(bool bIsInstantlyStop); // Function Solarland.SolarPickupComponent.StopListenFireInput // (Final|Native|Public) // @ game+0x284ad00
	void StopAutoPickupTimer(); // Function Solarland.SolarPickupComponent.StopAutoPickupTimer // (Final|Native|Public) // @ game+0x284ace0
	void StartListenFireInput(); // Function Solarland.SolarPickupComponent.StartListenFireInput // (Final|Native|Public) // @ game+0x284acc0
	void StartAutoPickupTimer(); // Function Solarland.SolarPickupComponent.StartAutoPickupTimer // (Final|Native|Public) // @ game+0x284aca0
	bool ShouldPickupTreasureBoxItem(struct ASolarTreasureBoxActor* InTreasureBox); // Function Solarland.SolarPickupComponent.ShouldPickupTreasureBoxItem // (Final|Native|Public) // @ game+0x284ac00
	void SetStopAutoPickupWhenClose(bool InStopAutoPickupWhenClose); // Function Solarland.SolarPickupComponent.SetStopAutoPickupWhenClose // (Final|Native|Public) // @ game+0x284ab70
	void SetPickupSwitchInLua(bool IsOpen); // Function Solarland.SolarPickupComponent.SetPickupSwitchInLua // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetPickupSwitch(bool IsOpen); // Function Solarland.SolarPickupComponent.SetPickupSwitch // (Final|Native|Public) // @ game+0x284aae0
	void SetPickupListVisibility(bool InVisibility); // Function Solarland.SolarPickupComponent.SetPickupListVisibility // (Final|Native|Public) // @ game+0x284aa50
	void SetPickupCapsuleSize(struct FVector& Size); // Function Solarland.SolarPickupComponent.SetPickupCapsuleSize // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x284a9c0
	void SetAutoPickupSwitch(bool InCanAutoPickup); // Function Solarland.SolarPickupComponent.SetAutoPickupSwitch // (Final|Native|Public) // @ game+0x284a930
	void RestartPickupTimer(); // Function Solarland.SolarPickupComponent.RestartPickupTimer // (Final|Native|Public) // @ game+0x284a910
	void ReqPickupWeapon(struct AActor* WeaponData, bool IsAutoPickup, int32_t TargetIndex); // Function Solarland.SolarPickupComponent.ReqPickupWeapon // (Final|Native|Public) // @ game+0x284a800
	void ReqPickupTreasureItem(struct ASolarTreasureBoxActor* TreasureBox, int64_t ItemThisID, bool IsAutoPickup, int32_t TargetIndex, enum class EItemType InItemType, bool bSorted); // Function Solarland.SolarPickupComponent.ReqPickupTreasureItem // (Final|Native|Public) // @ game+0x284a620
	void ReqPickupItem(struct ASolarItemActor* ItemActor, bool IsAutoPickup, int32_t TargetIndex); // Function Solarland.SolarPickupComponent.ReqPickupItem // (Final|Native|Public) // @ game+0x284a510
	void ReqOpenTreasureBox(struct ASolarTreasureBoxActor* TreasureBox); // Function Solarland.SolarPickupComponent.ReqOpenTreasureBox // (Final|Native|Public) // @ game+0x284a480
	void RemoveNearbyDeathbox(struct ADeathTreasureBox* InDeathBox); // Function Solarland.SolarPickupComponent.RemoveNearbyDeathbox // (Final|Native|Public) // @ game+0x284a3f0
	void RefreshResurrectBtn(); // Function Solarland.SolarPickupComponent.RefreshResurrectBtn // (Final|Native|Public) // @ game+0x284a3d0
	void RefreshPickupTimer(); // Function Solarland.SolarPickupComponent.RefreshPickupTimer // (Final|Native|Public) // @ game+0x284a3b0
	void RefreshItemUI(); // Function Solarland.SolarPickupComponent.RefreshItemUI // (Final|Native|Public) // @ game+0x284a390
	void RecheckPendingActors(); // Function Solarland.SolarPickupComponent.RecheckPendingActors // (Final|Native|Protected) // @ game+0x284a370
	void ReceiveFireResult(struct FString InFireResultMsg); // Function Solarland.SolarPickupComponent.ReceiveFireResult // (Final|Native|Public) // @ game+0x284a2d0
	void ProcessFireResultMsgs(); // Function Solarland.SolarPickupComponent.ProcessFireResultMsgs // (Final|Native|Public) // @ game+0x284a2b0
	void OnWeaponUpgrade(struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarPickupComponent.OnWeaponUpgrade // (Final|Native|Protected) // @ game+0x284a220
	void OnWeaponSlotEquip(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarPickupComponent.OnWeaponSlotEquip // (Final|Native|Protected) // @ game+0x284a150
	void OnUsingSkillStatusChanged(); // Function Solarland.SolarPickupComponent.OnUsingSkillStatusChanged // (Final|Native|Public) // @ game+0x284a130
	void OnUpdateItemUIDataChanged(struct UObject* Object, int32_t OldItemID, int32_t NewItemID); // Function Solarland.SolarPickupComponent.OnUpdateItemUIDataChanged // (Final|Native|Protected) // @ game+0x284a020
	void OnTreasureBoxStateChange(int64_t ThisID, enum class ETreasureBoxState State); // Function Solarland.SolarPickupComponent.OnTreasureBoxStateChange // (Final|Native|Public) // @ game+0x2849f50
	void OnPickupSettingChanged(); // Function Solarland.SolarPickupComponent.OnPickupSettingChanged // (Final|Native|Public) // @ game+0x2849f30
	void OnPickupConfirmHandle(); // Function Solarland.SolarPickupComponent.OnPickupConfirmHandle // (Final|Native|Public) // @ game+0x2849f10
	void OnPickupActorEnd(struct AActor* ItemActor); // Function Solarland.SolarPickupComponent.OnPickupActorEnd // (Final|Native|Protected) // @ game+0x2849e80
	void OnPickupActorBegin(struct AActor* ItemActor); // Function Solarland.SolarPickupComponent.OnPickupActorBegin // (Final|Native|Protected) // @ game+0x2849df0
	void OnEquipChanged(); // Function Solarland.SolarPickupComponent.OnEquipChanged // (Final|Native|Protected) // @ game+0x2849dd0
	void OnCharacterDeathBegin(); // Function Solarland.SolarPickupComponent.OnCharacterDeathBegin // (Final|Native|Public) // @ game+0x2849db0
	void OnActorDestroyed(struct AActor* Actor); // Function Solarland.SolarPickupComponent.OnActorDestroyed // (Final|Native|Protected) // @ game+0x2849d20
	void MarkDirtyForTick(); // Function Solarland.SolarPickupComponent.MarkDirtyForTick // (Final|Native|Public|BlueprintCallable) // @ game+0x2849d00
	bool IsValidItemActor(struct AActor* ItemActor); // Function Solarland.SolarPickupComponent.IsValidItemActor // (Final|Native|Public) // @ game+0x2849c60
	bool IsNeedReplace(enum class EItemType InType, struct FSolarItemData& InItemData); // Function Solarland.SolarPickupComponent.IsNeedReplace // (Final|Native|Public|HasOutParms) // @ game+0x2849b10
	bool IsEquipItem(enum class EItemType InType); // Function Solarland.SolarPickupComponent.IsEquipItem // (Final|Native|Public) // @ game+0x2849a70
	bool IsCharacterInAir(); // Function Solarland.SolarPickupComponent.IsCharacterInAir // (Final|Native|Public) // @ game+0x2849a40
	void InitPickupPriorityMaps(); // Function Solarland.SolarPickupComponent.InitPickupPriorityMaps // (Final|Native|Protected) // @ game+0x2849a20
	struct FSolarItemData GetTreasureItemDataByThisID(struct ASolarTreasureBoxActor* TreasureBox, int64_t ItemThisID); // Function Solarland.SolarPickupComponent.GetTreasureItemDataByThisID // (Final|Native|Public) // @ game+0x28498d0
	int32_t GetPickupWeaponPartTypePriority(struct FSolarItemData& InItemData); // Function Solarland.SolarPickupComponent.GetPickupWeaponPartTypePriority // (Final|Native|Protected|HasOutParms|Const) // @ game+0x28497d0
	int32_t GetPickupTypePriority(enum class EItemType InItemType); // Function Solarland.SolarPickupComponent.GetPickupTypePriority // (Final|Native|Protected|Const) // @ game+0x2849730
	struct AActor* GetPickupTreasureBoxActor(); // Function Solarland.SolarPickupComponent.GetPickupTreasureBoxActor // (Final|Native|Public) // @ game+0x2849700
	int32_t GetPickupPriority(struct FSolarItemData& InItemType); // Function Solarland.SolarPickupComponent.GetPickupPriority // (Final|Native|Protected|HasOutParms|Const) // @ game+0x2849600
	struct ADeathTreasureBox* GetNearestResurrectBox(); // Function Solarland.SolarPickupComponent.GetNearestResurrectBox // (Final|Native|Public|Const) // @ game+0x28495d0
	struct TMap<int32_t, struct FActorArray> GetItemDataMap(); // Function Solarland.SolarPickupComponent.GetItemDataMap // (Final|Native|Protected) // @ game+0x2849500
	int32_t GetItemDataCount(enum class EPickupItemType PickupItemType); // Function Solarland.SolarPickupComponent.GetItemDataCount // (Final|Native|Protected) // @ game+0x2849470
	bool GetIsGlobalPickup(); // Function Solarland.SolarPickupComponent.GetIsGlobalPickup // (Final|Native|Public) // @ game+0x2849440
	bool GetIsAutoPickupHomeItems(); // Function Solarland.SolarPickupComponent.GetIsAutoPickupHomeItems // (Final|Native|Public) // @ game+0x2783600
	void DoStopOpeningAirDropBox(); // Function Solarland.SolarPickupComponent.DoStopOpeningAirDropBox // (Final|Native|Public) // @ game+0x2849420
	void DoOpenAirDropBox(); // Function Solarland.SolarPickupComponent.DoOpenAirDropBox // (Final|Native|Public) // @ game+0x2849400
	void DetectNearestResurrectTarget(); // Function Solarland.SolarPickupComponent.DetectNearestResurrectTarget // (Final|Native|Public) // @ game+0x28493e0
	void CloseItemUI(); // Function Solarland.SolarPickupComponent.CloseItemUI // (Final|Native|Public) // @ game+0x28493c0
	void ClearAutoShowPickupListHandle(); // Function Solarland.SolarPickupComponent.ClearAutoShowPickupListHandle // (Final|Native|Public) // @ game+0x28493a0
	void ClearAllTimer(); // Function Solarland.SolarPickupComponent.ClearAllTimer // (Final|Native|Public) // @ game+0x2849380
	void CheckToShowConfirm(struct FSolarItemData& ItemData); // Function Solarland.SolarPickupComponent.CheckToShowConfirm // (Final|Native|Public|HasOutParms) // @ game+0x2849290
	bool CheckIsItemMaximizing(int32_t ItemID); // Function Solarland.SolarPickupComponent.CheckIsItemMaximizing // (Final|Native|Public) // @ game+0x28491f0
	bool CanResurrectOwner(struct ADeathTreasureBox* InDeathBox, float& OutDistance); // Function Solarland.SolarPickupComponent.CanResurrectOwner // (Final|Native|Public|HasOutParms) // @ game+0x2849110
	bool CanMutiAutoPickup(enum class EItemType InItemType); // Function Solarland.SolarPickupComponent.CanMutiAutoPickup // (Final|Native|Protected|Const) // @ game+0x2849070
	void CallHUDSetTreasureBoxActor(struct AActor* InActor); // Function Solarland.SolarPickupComponent.CallHUDSetTreasureBoxActor // (Final|Native|Public) // @ game+0x2848fe0
	void CallHUDSetAirdropBoxActor(struct AActor* InActor); // Function Solarland.SolarPickupComponent.CallHUDSetAirdropBoxActor // (Final|Native|Public) // @ game+0x2848f50
	void CallHUDSetActiveResurrectBtn(bool Inactive); // Function Solarland.SolarPickupComponent.CallHUDSetActiveResurrectBtn // (Final|Native|Public) // @ game+0x2848ec0
	void CallHUDSetActiveOpenBoxProgress(bool Inactive); // Function Solarland.SolarPickupComponent.CallHUDSetActiveOpenBoxProgress // (Final|Native|Public) // @ game+0x2848e30
	void CallHUDSetActiveOpenBoxBtn(bool Inactive); // Function Solarland.SolarPickupComponent.CallHUDSetActiveOpenBoxBtn // (Final|Native|Public) // @ game+0x2848da0
	void CallHUDHideOpenBoxUIByThisID(int64_t InThisID); // Function Solarland.SolarPickupComponent.CallHUDHideOpenBoxUIByThisID // (Final|Native|Public) // @ game+0x2848d10
	void CallHUDHideAirdropBoxUIByThisID(int64_t InThisID); // Function Solarland.SolarPickupComponent.CallHUDHideAirdropBoxUIByThisID // (Final|Native|Public) // @ game+0x2848c80
	void AddNearbyDeathbox(struct ADeathTreasureBox* InDeathBox); // Function Solarland.SolarPickupComponent.AddNearbyDeathbox // (Final|Native|Public) // @ game+0x2848bf0
};

// Class Solarland.SolarPickupHandlerBase
// Size: 0x48 (Inherited: 0x28)
struct USolarPickupHandlerBase : UObject {
	enum class EPickupItemType Type; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct USolarPickupComponent* OwnerComponent; // 0x30(0x08)
	struct USolarItemManager* ItemManager; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)
};

// Class Solarland.SolarPickupHandlerNormal
// Size: 0x58 (Inherited: 0x48)
struct USolarPickupHandlerNormal : USolarPickupHandlerBase {
	char pad_48[0x10]; // 0x48(0x10)
};

// Class Solarland.SolarPingFpsManager
// Size: 0x40 (Inherited: 0x28)
struct USolarPingFpsManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	char GetPingDS; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float GetPingBackend; // 0x34(0x04)
	float Fps; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	char GetPingBattleServer(); // Function Solarland.SolarPingFpsManager.GetPingBattleServer // (Final|Native|Public|BlueprintCallable) // @ game+0x284e8b0
	float GetPacketsLossRate(); // Function Solarland.SolarPingFpsManager.GetPacketsLossRate // (Final|Native|Public|BlueprintCallable) // @ game+0x284e800
	float GetAverageFPS(); // Function Solarland.SolarPingFpsManager.GetAverageFPS // (Final|Native|Public|BlueprintCallable) // @ game+0x284e0e0
};

// Class Solarland.SolarPingFpsWidget
// Size: 0x5a0 (Inherited: 0x400)
struct USolarPingFpsWidget : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct UImage* Img_Ping; // 0x410(0x08)
	struct USolarTextBlock* Txt_Ping; // 0x418(0x08)
	struct USolarTextBlock* Txt_ms; // 0x420(0x08)
	struct USolarTextBlock* Txt_fps_2; // 0x428(0x08)
	struct USolarTextBlock* Txt_GraphicQuality; // 0x430(0x08)
	struct USolarTextBlock* Txt_FOV; // 0x438(0x08)
	char pad_440[0x10]; // 0x440(0x10)
	struct TMap<enum class ESolarGraphicsQualityLevel, int32_t> PCGraphicQualityToLocTextIDMap; // 0x450(0x50)
	struct TMap<enum class ESolarGraphicsQualityLevel, int32_t> MobileGraphicQualityToLocTextIDMap; // 0x4a0(0x50)
	struct FLinearColor ImgLowDelayColor; // 0x4f0(0x10)
	struct FLinearColor ImgMediumDelayColor; // 0x500(0x10)
	struct FLinearColor ImgHighDelayColor; // 0x510(0x10)
	struct FSlateColor TxtLowDelayColor; // 0x520(0x28)
	struct FSlateColor TxtMediumDelayColor; // 0x548(0x28)
	struct FSlateColor TxtHighDelayColor; // 0x570(0x28)
	float RefreshFpsInterval; // 0x598(0x04)
	char pad_59C[0x4]; // 0x59c(0x04)

	void UpdatePing(float InPing); // Function Solarland.SolarPingFpsWidget.UpdatePing // (Final|Native|Public) // @ game+0x284f4d0
	void CreateUpdateUIFpsTimer(); // Function Solarland.SolarPingFpsWidget.CreateUpdateUIFpsTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x284df20
	void ClearUpdateUIFpsTimer(); // Function Solarland.SolarPingFpsWidget.ClearUpdateUIFpsTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x284de70
};

// Class Solarland.SolarPlatformHelper
// Size: 0xf0 (Inherited: 0x28)
struct USolarPlatformHelper : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USolarPlatformStats* SolarPlatformStats; // 0x30(0x08)
	struct USolarGameInstanceBase* SolarGameInstanceBase; // 0x38(0x08)
	char pad_40[0xb0]; // 0x40(0xb0)

	bool UseRenderThread(); // Function Solarland.SolarPlatformHelper.UseRenderThread // (Final|Native|Static|Public) // @ game+0x284f550
	bool SupportsMultithreading(); // Function Solarland.SolarPlatformHelper.SupportsMultithreading // (Final|Native|Static|Public) // @ game+0x284f410
	double Seconds(); // Function Solarland.SolarPlatformHelper.Seconds // (Final|Native|Static|Public) // @ game+0x284f3e0
	void ReceiveShutdown(); // Function Solarland.SolarPlatformHelper.ReceiveShutdown // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveInit(); // Function Solarland.SolarPlatformHelper.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	bool IsThisApplicationForeground(); // Function Solarland.SolarPlatformHelper.IsThisApplicationForeground // (Final|Native|Static|Public) // @ game+0x284ece0
	bool IsRunningOnBattery(); // Function Solarland.SolarPlatformHelper.IsRunningOnBattery // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x284ecb0
	bool IsNightMode(); // Function Solarland.SolarPlatformHelper.IsNightMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x95aae0
	bool Is64bitOperatingSystem(); // Function Solarland.SolarPlatformHelper.Is64bitOperatingSystem // (Final|Native|Static|Public) // @ game+0x284ebb0
	int64_t GetVideoMemory(); // Function Solarland.SolarPlatformHelper.GetVideoMemory // (Final|Native|Static|Public) // @ game+0x284eb80
	struct FString GetUniqueDeviceId(); // Function Solarland.SolarPlatformHelper.GetUniqueDeviceId // (Final|Native|Public|Const) // @ game+0x284eb40
	struct FString GetTimeZoneId(); // Function Solarland.SolarPlatformHelper.GetTimeZoneId // (Final|Native|Static|Public) // @ game+0x9f0760
	struct FString GetSuitableStringWithUnitOfBytes(uint64_t NumberOfBytes, struct FString ExtraUnit); // Function Solarland.SolarPlatformHelper.GetSuitableStringWithUnitOfBytes // (Final|Native|Static|Public) // @ game+0x284ea20
	struct USolarPlatformStats* GetSolarPlatformStats(); // Function Solarland.SolarPlatformHelper.GetSolarPlatformStats // (Final|Native|Public|Const) // @ game+0x284e9f0
	int32_t GetSimultaneousInstanceId(); // Function Solarland.SolarPlatformHelper.GetSimultaneousInstanceId // (Final|Native|Public|Const) // @ game+0x284e9c0
	struct FString GetPrimaryGPUBrand(); // Function Solarland.SolarPlatformHelper.GetPrimaryGPUBrand // (Final|Native|Static|Public) // @ game+0x284e8e0
	struct FString GetPathVarDelimiter(); // Function Solarland.SolarPlatformHelper.GetPathVarDelimiter // (Final|Native|Static|Public) // @ game+0x284e830
	void GetOSVersions(struct FString& out_OSVersionLabel, struct FString& out_OSSubVersionLabel); // Function Solarland.SolarPlatformHelper.GetOSVersions // (Final|Native|Static|Public|HasOutParms) // @ game+0x284e6f0
	struct FString GetOSVersion(); // Function Solarland.SolarPlatformHelper.GetOSVersion // (Final|Native|Static|Public) // @ game+0x9f05c0
	uint32_t GetMoniterWidth(); // Function Solarland.SolarPlatformHelper.GetMoniterWidth // (Final|Native|Static|Public) // @ game+0x284e690
	int32_t GetMoniterRefreshRate(); // Function Solarland.SolarPlatformHelper.GetMoniterRefreshRate // (Final|Native|Static|Public) // @ game+0x284e660
	uint32_t GetMoniterHeight(); // Function Solarland.SolarPlatformHelper.GetMoniterHeight // (Final|Native|Static|Public) // @ game+0x284e630
	int32_t GetMaxPathLength(); // Function Solarland.SolarPlatformHelper.GetMaxPathLength // (Final|Native|Static|Public) // @ game+0x284e600
	struct UGameUserSettings* GetGameUserSettings(); // Function Solarland.SolarPlatformHelper.GetGameUserSettings // (Final|Native|Public) // @ game+0x284e5d0
	struct FString GetEnvironmentVariable(struct FString VariableName); // Function Solarland.SolarPlatformHelper.GetEnvironmentVariable // (Final|Native|Static|Public) // @ game+0x284e4c0
	struct UEngine* GetEngine(); // Function Solarland.SolarPlatformHelper.GetEngine // (Final|Native|Public) // @ game+0x284e490
	bool GetDiskTotalAndFreeSpace(struct FString InPath, uint64_t& TotalNumberOfBytes, uint64_t& NumberOfFreeBytes); // Function Solarland.SolarPlatformHelper.GetDiskTotalAndFreeSpace // (Final|Native|Static|Public|HasOutParms) // @ game+0x284e350
	float GetDeviceTemperatureLevel(); // Function Solarland.SolarPlatformHelper.GetDeviceTemperatureLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x284e320
	struct FString GetDeviceMakeAndModel(); // Function Solarland.SolarPlatformHelper.GetDeviceMakeAndModel // (Final|Native|Static|Public) // @ game+0x9f0080
	struct FString GetDefaultDeviceProfileName(); // Function Solarland.SolarPlatformHelper.GetDefaultDeviceProfileName // (Final|Native|Static|Public) // @ game+0x284e2a0
	struct FString GetCPUVendor(); // Function Solarland.SolarPlatformHelper.GetCPUVendor // (Final|Native|Static|Public) // @ game+0x284e170
	uint32_t GetCPUInfo(); // Function Solarland.SolarPlatformHelper.GetCPUInfo // (Final|Native|Static|Public) // @ game+0x284e140
	struct FString GetCPUChipset(); // Function Solarland.SolarPlatformHelper.GetCPUChipset // (Final|Native|Static|Public) // @ game+0x9eff00
	struct FString GetCPUBrand(); // Function Solarland.SolarPlatformHelper.GetCPUBrand // (Final|Native|Static|Public) // @ game+0x9eff80
	int32_t GetBatteryLevel(); // Function Solarland.SolarPlatformHelper.GetBatteryLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x284e110
	struct FString ClipboardPaste(); // Function Solarland.SolarPlatformHelper.ClipboardPaste // (Final|Native|Static|Public) // @ game+0x2834390
	void ClipboardCopy(struct FString str); // Function Solarland.SolarPlatformHelper.ClipboardCopy // (Final|Native|Static|Public) // @ game+0x2832a80
};

// Class Solarland.SolarPlatformStats
// Size: 0x60 (Inherited: 0x28)
struct USolarPlatformStats : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	uint64_t MaxUsedPhysical; // 0x30(0x08)
	char pad_38[0x28]; // 0x38(0x28)

	void ReceiveWorldCleanup(struct UWorld* World, bool bSessionEnded, bool bCleanupResources); // Function Solarland.SolarPlatformStats.ReceiveWorldCleanup // (Event|Protected|BlueprintEvent) // @ game+0xb66830
	void ReceiveShutdown(); // Function Solarland.SolarPlatformStats.ReceiveShutdown // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceivePostWorldInitialization(struct UWorld* World); // Function Solarland.SolarPlatformStats.ReceivePostWorldInitialization // (Event|Protected|BlueprintEvent) // @ game+0xb66830
	void ReceiveInit(); // Function Solarland.SolarPlatformStats.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	uint64_t GetRHIUsedMemory(); // Function Solarland.SolarPlatformStats.GetRHIUsedMemory // (Final|Native|Public) // @ game+0x284e960
	float GetRenderThreadTime(); // Function Solarland.SolarPlatformStats.GetRenderThreadTime // (Final|Native|Public) // @ game+0x284e990
	int32_t GetNumDrawCalls(); // Function Solarland.SolarPlatformStats.GetNumDrawCalls // (Final|Native|Public) // @ game+0x284e6c0
	int32_t GetMinFPS(); // Function Solarland.SolarPlatformStats.GetMinFPS // (Event|Public|BlueprintEvent) // @ game+0xb66830
	float GetGameThreadTime(); // Function Solarland.SolarPlatformStats.GetGameThreadTime // (Final|Native|Public) // @ game+0x284e5a0
	int32_t GetAverageFPS(); // Function Solarland.SolarPlatformStats.GetAverageFPS // (Event|Public|BlueprintEvent) // @ game+0xb66830
};

// Class Solarland.SolarPlayerActivityHeatComponent
// Size: 0x190 (Inherited: 0xb0)
struct USolarPlayerActivityHeatComponent : UActorComponent {
	char pad_B0[0x10]; // 0xb0(0x10)
	float WeaponScore; // 0xc0(0x04)
	float VehicleScore; // 0xc4(0x04)
	float AbilityScore; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct UCurveFloat* DistScoreCurve; // 0xd0(0x08)
	float DefenderOrReaperScore; // 0xd8(0x04)
	float FirstKillTimeBefore; // 0xdc(0x04)
	float LastKillTimeLater; // 0xe0(0x04)
	char pad_E4[0xac]; // 0xe4(0xac)

	void ReceiveKillInfoNotify(struct ASolarPlayerState* InKiller, struct ASolarPlayerState* InVictim, struct FSolarPointDamageEvent& DamageEvent); // Function Solarland.SolarPlayerActivityHeatComponent.ReceiveKillInfoNotify // (Final|Native|Public|HasOutParms) // @ game+0x285fbe0
	void ReceiveActivityHeatFragmentsFromReplay(struct FString PlayerId, struct FReplayActivityHeatFragment& NewFragment); // Function Solarland.SolarPlayerActivityHeatComponent.ReceiveActivityHeatFragmentsFromReplay // (Final|Native|Private|HasOutParms) // @ game+0x285fac0
	void OnPlayerWin(struct FString SolarPlayerID); // Function Solarland.SolarPlayerActivityHeatComponent.OnPlayerWin // (Final|Native|Public|BlueprintCallable) // @ game+0x285e990
	void OnPlayerResurrectionParachute(struct FString SolarPlayerID); // Function Solarland.SolarPlayerActivityHeatComponent.OnPlayerResurrectionParachute // (Final|Native|Public|BlueprintCallable) // @ game+0x285e790
	void OnPlayerDeath(struct FString SolarPlayerID); // Function Solarland.SolarPlayerActivityHeatComponent.OnPlayerDeath // (Final|Native|Public|BlueprintCallable) // @ game+0x285e620
	void OnPlayerCruiseEnded(struct FString SolarPlayerID); // Function Solarland.SolarPlayerActivityHeatComponent.OnPlayerCruiseEnded // (Final|Native|Public) // @ game+0x285e580
	struct TArray<struct FReplayActivityHeatFragment> GetPlayerActivityHeatFragmentsById(struct FString SolarPlayerID); // Function Solarland.SolarPlayerActivityHeatComponent.GetPlayerActivityHeatFragmentsById // (Final|Native|Public|BlueprintCallable) // @ game+0x285c110
	void FillInPlayerActivityHeatKillDetail(struct ASolarPlayerState* InKiller, struct ASolarPlayerState* InVictim, struct FSolarPointDamageEvent& DamageEvent, struct FPlayerActivityHeatKillDetail& OutKillDetail); // Function Solarland.SolarPlayerActivityHeatComponent.FillInPlayerActivityHeatKillDetail // (Final|Native|Public|HasOutParms) // @ game+0x285b830
	int32_t AddPlayerActivityHeatRawData(struct FString SolarPlayerID, enum class EPlayerActivityHeatType ActivityHeatType); // Function Solarland.SolarPlayerActivityHeatComponent.AddPlayerActivityHeatRawData // (Final|Native|Public) // @ game+0x2859d20
};

// Class Solarland.SolarPlayerCameraManager
// Size: 0x30d0 (Inherited: 0x30a0)
struct ASolarPlayerCameraManager : APlayerCameraManager {
	struct TWeakObjectPtr<struct AActor> OldViewTarget; // 0x30a0(0x08)
	struct UCameraModifier_CameraShakeWithCurve* CachedCameraShakeModWithCurve; // 0x30a8(0x08)
	char pad_30B0[0x20]; // 0x30b0(0x20)

	void OnPlayerGetOnViewTargetVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarPlayerCameraManager.OnPlayerGetOnViewTargetVehicle // (Final|Native|Protected) // @ game+0x285e6c0
	struct FMinimalViewInfo GetDebugPOV(); // Function Solarland.SolarPlayerCameraManager.GetDebugPOV // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x285bcc0
};

// Class Solarland.SinglePlayerHPModel
// Size: 0x58 (Inherited: 0x30)
struct USinglePlayerHPModel : USingleCharacterModelBase {
	char pad_30[0x28]; // 0x30(0x28)

	void OnRescueStateChanged(enum class ERescueState InRescueState); // Function Solarland.SinglePlayerHPModel.OnRescueStateChanged // (Final|Native|Private) // @ game+0x2873d10
	void OnHPValueChanged(struct ASolarCharacter* Character); // Function Solarland.SinglePlayerHPModel.OnHPValueChanged // (Final|Native|Private) // @ game+0x2872e10
};

// Class Solarland.SolarPlayersHPModel
// Size: 0x78 (Inherited: 0x78)
struct USolarPlayersHPModel : USolarCharactersModelBase {
};

// Class Solarland.SolarPlayerInput
// Size: 0x660 (Inherited: 0x600)
struct USolarPlayerInput : UEnhancedPlayerInput {
	char pad_600[0x60]; // 0x600(0x60)
};

// Class Solarland.SolarWeapon
// Size: 0x910 (Inherited: 0x228)
struct ASolarWeapon : AActor {
	char pad_228[0x128]; // 0x228(0x128)
	struct FMulticastInlineDelegate OnWeaponUnhold; // 0x350(0x10)
	struct FWeaponMechanicalState WeaponState; // 0x360(0x50)
	char pad_3B0[0x1]; // 0x3b0(0x01)
	enum class EShootingOpt PrimaryShootingOption; // 0x3b1(0x01)
	char pad_3B2[0x2]; // 0x3b2(0x02)
	struct FImpactDisplayInfo ImpactInfo; // 0x3b4(0x10)
	char pad_3C4[0xc]; // 0x3c4(0x0c)
	enum class ESCMDamageType DefaultDamageType; // 0x3d0(0x01)
	char pad_3D1[0x7]; // 0x3d1(0x07)
	struct USolarVirtualBulletCollector* VirtualBulletCollector; // 0x3d8(0x08)
	char pad_3E0[0x18]; // 0x3e0(0x18)
	enum class EWeaponOverloadState OverloadState; // 0x3f8(0x01)
	char pad_3F9[0x3]; // 0x3f9(0x03)
	float OverloadAccum; // 0x3fc(0x04)
	char pad_400[0x10]; // 0x400(0x10)
	struct UCurveFloat* OverloadCurve; // 0x410(0x08)
	char pad_418[0x4]; // 0x418(0x04)
	float GatlingRollSpeed; // 0x41c(0x04)
	float GatlingHoldTime; // 0x420(0x04)
	float GatlingRollSpeedInterp; // 0x424(0x04)
	int32_t GatlingRepState; // 0x428(0x04)
	char pad_42C[0x1c]; // 0x42c(0x1c)
	float FireChargingTime; // 0x448(0x04)
	int32_t FireChargingPhase; // 0x44c(0x04)
	float FireChargingSumTime; // 0x450(0x04)
	char pad_454[0x8]; // 0x454(0x08)
	float ChargeAnimationRate; // 0x45c(0x04)
	struct UGameplayEffect* ChargingEffect; // 0x460(0x08)
	char pad_468[0x8]; // 0x468(0x08)
	struct TWeakObjectPtr<struct UAbilitySystemComponent> OwnerGAS; // 0x470(0x08)
	char pad_478[0x8]; // 0x478(0x08)
	struct UCurveFloat* NormalOverloadCoolingCurve; // 0x480(0x08)
	char pad_488[0x8]; // 0x488(0x08)
	struct TArray<struct FFireMode> FireModes; // 0x490(0x10)
	struct AActor* WeaponHolder; // 0x4a0(0x08)
	struct ASolarCharacterBase* ControlWeaponCharacter; // 0x4a8(0x08)
	struct TArray<struct FGameplayAbilitySpecHandle> EquippedAbilityHandles; // 0x4b0(0x10)
	char pad_4C0[0x8]; // 0x4c0(0x08)
	struct ASolarCharacterBase* OldControlWeaponCharacter; // 0x4c8(0x08)
	struct AActor* AimTarget; // 0x4d0(0x08)
	struct ASolarWeaponProjectileSpline* ProjSplineClass; // 0x4d8(0x08)
	struct ASolarWeaponProjectileSpline* ProjSpline; // 0x4e0(0x08)
	struct TArray<enum class EShootingOpt> ShootingOptArray; // 0x4e8(0x10)
	bool bShowSpecialEffect; // 0x4f8(0x01)
	char pad_4F9[0x7]; // 0x4f9(0x07)
	struct USingleWeaponConfig* Config; // 0x500(0x08)
	struct UTexture2D* WeaponIcon; // 0x508(0x08)
	struct UGlobalWeaponConfig* WeaponsConfig; // 0x510(0x08)
	int32_t weaponid; // 0x518(0x04)
	char pad_51C[0x8]; // 0x51c(0x08)
	bool bTeamDamageEnable; // 0x524(0x01)
	bool bInfiniteAmmo; // 0x525(0x01)
	bool bInfinitePackageAmmo; // 0x526(0x01)
	char pad_527[0x1]; // 0x527(0x01)
	int32_t ExtraAmmo; // 0x528(0x04)
	char pad_52C[0x4]; // 0x52c(0x04)
	struct TMap<struct TWeakObjectPtr<struct UParticleSystem>, struct UParticleLoopListener*> LoopParticlesMap; // 0x530(0x50)
	int32_t ClipRemainAmmoCount; // 0x580(0x04)
	char pad_584[0x4]; // 0x584(0x04)
	struct TMap<enum class ECharacterMontage, struct FWeaponAnimationInfo> WeaponAnimationMap; // 0x588(0x50)
	bool bResetMuzzleIndexWhenStopFire; // 0x5d8(0x01)
	bool bResetMuzzleIndexAfterReload; // 0x5d9(0x01)
	char pad_5DA[0xe]; // 0x5da(0x0e)
	struct TArray<struct FCameraShakeData> WeaponFireCameraShakes; // 0x5e8(0x10)
	struct TArray<struct FCameraShakeData> WeaponScopeFireCameraShakes; // 0x5f8(0x10)
	struct TArray<struct FCameraShakeData> UsingSkillCameraShakes; // 0x608(0x10)
	struct TArray<struct FCameraShakeData> WeaponChargingCameraShakes; // 0x618(0x10)
	char pad_628[0x1]; // 0x628(0x01)
	bool bUseEmptyActor; // 0x629(0x01)
	char pad_62A[0x6]; // 0x62a(0x06)
	struct FSoftObjectPath FightMeshPath; // 0x630(0x18)
	struct USkeletalMeshComponent* Mesh; // 0x648(0x08)
	struct USkeletalMesh* OriginalMesh; // 0x650(0x08)
	struct UWeaponAnimInstance* OriginalAnimBP; // 0x658(0x08)
	struct USolarAkGameObject* SolarAkGameObjectPrivate; // 0x660(0x08)
	int32_t SoundFireAutoCount; // 0x668(0x04)
	bool bTriggerSoundFireAuto; // 0x66c(0x01)
	char pad_66D[0x3]; // 0x66d(0x03)
	int32_t OldSoundFireAutoCount; // 0x670(0x04)
	bool bTriggerSoundB9A04Skill; // 0x674(0x01)
	bool bTriggerSoundFireBurst; // 0x675(0x01)
	char pad_676[0x2]; // 0x676(0x02)
	int32_t SkillFireCount; // 0x678(0x04)
	int32_t SingleFireCount; // 0x67c(0x04)
	int32_t FireOverloadCount; // 0x680(0x04)
	int32_t FireLastCount; // 0x684(0x04)
	char pad_688[0x60]; // 0x688(0x60)
	struct FOverrideBulletStruct OverrideBullet; // 0x6e8(0x18)
	bool bLoadInitAssets; // 0x700(0x01)
	bool bLoadAllCfgAssets; // 0x701(0x01)
	char pad_702[0x6]; // 0x702(0x06)
	struct TMap<struct FFireUniqueID, float> FireHitVerifyMap; // 0x708(0x50)
	char pad_758[0x8]; // 0x758(0x08)
	bool bDetectedEnemy; // 0x760(0x01)
	char pad_761[0x7]; // 0x761(0x07)
	struct TArray<struct UParticleSystemComponent*> GatlingOverHeatPSCs; // 0x768(0x10)
	bool bTracingAimTarget; // 0x778(0x01)
	char pad_779[0xf]; // 0x779(0x0f)
	struct UMaterialInterface* SpecialFireChargeMaterial; // 0x788(0x08)
	struct TMap<int32_t, struct FColor> SpecialFireChargeColorMap; // 0x790(0x50)
	bool bPerspectiveForReplay; // 0x7e0(0x01)
	char pad_7E1[0x1f]; // 0x7e1(0x1f)
	enum class ESolarWeaponSpreadState CurrentSpreadState; // 0x800(0x01)
	char pad_801[0x3]; // 0x801(0x03)
	int32_t ContinuousAddSpreadByFireCount; // 0x804(0x04)
	bool bLastAddSpreadByFireIsHipFire; // 0x808(0x01)
	int8_t LastAddSpreadByFireFireMode; // 0x809(0x01)
	char pad_80A[0x2]; // 0x80a(0x02)
	float LastAddSpreadByFireTime; // 0x80c(0x04)
	float SpreadPrepareTimer; // 0x810(0x04)
	float PendingBaseSpread; // 0x814(0x04)
	float TargetBaseSpread; // 0x818(0x04)
	float PendingAddSpread; // 0x81c(0x04)
	float TargetAddSpread; // 0x820(0x04)
	char pad_824[0x5c]; // 0x824(0x5c)
	struct FHitResult AimHitResult; // 0x880(0x88)
	char pad_908[0x8]; // 0x908(0x08)

	void WeaponStateOnRepReload(); // Function Solarland.SolarWeapon.WeaponStateOnRepReload // (Final|Native|Private) // @ game+0x2996190
	int32_t WeaponPostAkEventByName(struct FString InEventName1); // Function Solarland.SolarWeapon.WeaponPostAkEventByName // (Native|Public|BlueprintCallable) // @ game+0x29960e0
	bool VerifyLastClipAmmo(int32_t InFireModeType, int32_t InLastClipAmmo); // Function Solarland.SolarWeapon.VerifyLastClipAmmo // (Final|Native|Protected) // @ game+0x2996010
	bool UseEnergy(int32_t Mode); // Function Solarland.SolarWeapon.UseEnergy // (Final|Native|Public|Const) // @ game+0x2995f70
	bool TryHitOperation(struct FFireUniqueID& FireUniqueID, int32_t FireMode, struct FVector& StartLocation, struct FVector& WeaponLocation, float ServerTime, float DamageScale, struct FBulletHitDetailData& HitDetailData, bool IsNotDelay); // Function Solarland.SolarWeapon.TryHitOperation // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2995cd0
	void StopVibrate(); // Function Solarland.SolarWeapon.StopVibrate // (Final|Native|Public) // @ game+0x2995cb0
	void StopSoundDelay(float DelayTime); // Function Solarland.SolarWeapon.StopSoundDelay // (Final|Native|Public) // @ game+0x2995c30
	void StopSound(enum class EShootingSoundOpt Opt, int32_t idx); // Function Solarland.SolarWeapon.StopSound // (Final|Native|Public) // @ game+0x2995b60
	void StopGatlingSound(); // Function Solarland.SolarWeapon.StopGatlingSound // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void StartSound(enum class EShootingSoundOpt Opt, int32_t idx); // Function Solarland.SolarWeapon.StartSound // (Final|Native|Public) // @ game+0x2995a90
	void StartAsyncLoading(); // Function Solarland.SolarWeapon.StartAsyncLoading // (Final|Native|Public) // @ game+0x2995a70
	struct ASolarProjBullet* SpawnProjWithFireID(struct FSpawnBulletParam& Param, struct FFireUniqueID& FireID, bool Local); // Function Solarland.SolarWeapon.SpawnProjWithFireID // (Final|Native|Protected|HasOutParms) // @ game+0x29958e0
	void ShowSpecialEffect(bool bShow); // Function Solarland.SolarWeapon.ShowSpecialEffect // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2995850
	void SetWeaponAnimState(enum class EWeaponAnimState InWeaponAnimState); // Function Solarland.SolarWeapon.SetWeaponAnimState // (Final|Native|Public|BlueprintCallable) // @ game+0x29957d0
	void SetReservedAmmoForce(int32_t InFireModeType, int32_t InAmount); // Function Solarland.SolarWeapon.SetReservedAmmoForce // (Final|Native|Public|BlueprintCallable) // @ game+0x2995700
	void SetPrimaryShootingOption(enum class EShootingOpt Opt); // Function Solarland.SolarWeapon.SetPrimaryShootingOption // (Final|Native|Public|BlueprintCallable) // @ game+0x2995680
	void SetLastFireTime(int32_t InFireModeType, float InFireTime); // Function Solarland.SolarWeapon.SetLastFireTime // (Final|Native|Public) // @ game+0x29955b0
	void ServerWeaponSound(enum class EShootingSoundOpt Opt, bool TriggerSound); // Function Solarland.SolarWeapon.ServerWeaponSound // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x29954d0
	void ServerVirtualBulletShotHit(struct TArray<struct FSolarVirtualBulletHitParameter> AllHitParams, struct APawn* SourcePawn); // Function Solarland.SolarWeapon.ServerVirtualBulletShotHit // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x29953a0
	void ServerVirtualBulletShot(struct FSolarVirtualBulletSpawnParameter InParameter, float InTimestamp); // Function Solarland.SolarWeapon.ServerVirtualBulletShot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x29952a0
	void ServerUpdateMechanicalState(enum class EWeaponMechanicalUniqueState NewMechanicalState, enum class EWeaponMechanicalSideFlag NewSubFlags); // Function Solarland.SolarWeapon.ServerUpdateMechanicalState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x29951d0
	void ServerUpdateGatlingRepState(int32_t InState); // Function Solarland.SolarWeapon.ServerUpdateGatlingRepState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2995140
	void ServerSpawnProjWithVelocity(struct FSpawnProjParam Param); // Function Solarland.SolarWeapon.ServerSpawnProjWithVelocity // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x29950b0
	void ServerSpawnProjWithFireID(struct FSpawnBulletParam Param, struct FFireUniqueID FireID); // Function Solarland.SolarWeapon.ServerSpawnProjWithFireID // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2994f90
	void ServerSetTracingAimTarget(bool InbTracingAimTarget); // Function Solarland.SolarWeapon.ServerSetTracingAimTarget // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2994f00
	void ServerSetPrimaryOption(enum class EShootingOpt Opt); // Function Solarland.SolarWeapon.ServerSetPrimaryOption // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2994e80
	void ServerSetHipFire(bool InbHipFire); // Function Solarland.SolarWeapon.ServerSetHipFire // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2994df0
	void ServerResetFireCount(); // Function Solarland.SolarWeapon.ServerResetFireCount // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1ae5130
	void ServerRequestDropWeapon(); // Function Solarland.SolarWeapon.ServerRequestDropWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x7ec1b0
	void ServerPlayAnimWithNetMulticast(enum class ECharacterMontage InMontageType, float ExpectAnimLength); // Function Solarland.SolarWeapon.ServerPlayAnimWithNetMulticast // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2994d20
	void ServerInstantLineShot(char ModeIndex, struct FVector_NetQuantize Start, struct FVector_NetQuantize End, float DamageScale, struct FMutiBulletHitData HitData); // Function Solarland.SolarWeapon.ServerInstantLineShot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2994b30
	void ServerFireChargeShoot(struct UAmmoConfig* InAmmo, int8_t InFireChargingPhase, int32_t InFireChargingTime); // Function Solarland.SolarWeapon.ServerFireChargeShoot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2994a20
	void ServerFireChargePhaseChange(int8_t InFireChargingPhase); // Function Solarland.SolarWeapon.ServerFireChargePhaseChange // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x29949a0
	void ServerChangeOverloadState(enum class EWeaponOverloadState InState); // Function Solarland.SolarWeapon.ServerChangeOverloadState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2994920
	void ServerCanisterShot(struct FVector_NetQuantize Start, struct FVector_NetQuantize End, struct FMutiBulletHitData HitData); // Function Solarland.SolarWeapon.ServerCanisterShot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x29947f0
	void ServerAddExpWithReason(int32_t InExp, int32_t InReasonID); // Function Solarland.SolarWeapon.ServerAddExpWithReason // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x26bd560
	void RuntimeUpdateData(int32_t Cmd, struct FString Params); // Function Solarland.SolarWeapon.RuntimeUpdateData // (Final|Native|Public) // @ game+0x2994710
	void ReceivePlayImpactPositionEffect(struct UParticleSystemComponent* PSC, struct FVector& Position, float Scale); // Function Solarland.SolarWeapon.ReceivePlayImpactPositionEffect // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveChargingState(int32_t Index, enum class EWeaponSkillChargedState State); // Function Solarland.SolarWeapon.ReceiveChargingState // (Native|Event|Protected|BlueprintEvent) // @ game+0x2994640
	void PrimaryCost(); // Function Solarland.SolarWeapon.PrimaryCost // (Native|Protected) // @ game+0x1ae4ff0
	void PlayVibrate(enum class EWeaponVibrateType InType); // Function Solarland.SolarWeapon.PlayVibrate // (Final|Native|Private) // @ game+0x29945c0
	void PlayReloadRestoreVibrate(); // Function Solarland.SolarWeapon.PlayReloadRestoreVibrate // (Final|Native|Public) // @ game+0x29945a0
	void PlayReloadGetOldVibrate(); // Function Solarland.SolarWeapon.PlayReloadGetOldVibrate // (Final|Native|Public) // @ game+0x2994580
	void PlayFireVibrate(); // Function Solarland.SolarWeapon.PlayFireVibrate // (Final|Native|Public) // @ game+0x2994560
	void PlayChargeVibrate(); // Function Solarland.SolarWeapon.PlayChargeVibrate // (Final|Native|Public) // @ game+0x2994540
	void PlayBulletHitEffect(struct FHitResult& HitResult, struct ASolarBullet* Bullet, bool bForce, struct APawn* HitCauser, float HitEffectScale); // Function Solarland.SolarWeapon.PlayBulletHitEffect // (Final|Native|Public|HasOutParms) // @ game+0x2994350
	void PlayBoltVibrate(); // Function Solarland.SolarWeapon.PlayBoltVibrate // (Final|Native|Public) // @ game+0x2994330
	void PlayAutoSingleSound(); // Function Solarland.SolarWeapon.PlayAutoSingleSound // (Final|Native|Public) // @ game+0x2994310
	void PlayAnimWithNetMulticast(enum class ECharacterMontage InMontageType, float ExpectAnimLength, bool bNeedNetMulticast, int32_t AnimCount); // Function Solarland.SolarWeapon.PlayAnimWithNetMulticast // (Native|Public|BlueprintCallable) // @ game+0x29941a0
	void OnRep_WeaponState(); // Function Solarland.SolarWeapon.OnRep_WeaponState // (Final|Native|Public) // @ game+0x2994180
	void OnRep_TracingAimTarget(); // Function Solarland.SolarWeapon.OnRep_TracingAimTarget // (Final|Native|Public) // @ game+0x2994160
	void OnRep_SoundFireSkillCast(); // Function Solarland.SolarWeapon.OnRep_SoundFireSkillCast // (Final|Native|Public) // @ game+0x2994140
	void OnRep_SoundFireSingle(); // Function Solarland.SolarWeapon.OnRep_SoundFireSingle // (Final|Native|Public) // @ game+0x2994120
	void OnRep_SoundFireOverload(); // Function Solarland.SolarWeapon.OnRep_SoundFireOverload // (Final|Native|Public) // @ game+0x2994100
	void OnRep_SoundFireLast(); // Function Solarland.SolarWeapon.OnRep_SoundFireLast // (Final|Native|Public) // @ game+0x29940e0
	void OnRep_SoundFireBurst(); // Function Solarland.SolarWeapon.OnRep_SoundFireBurst // (Final|Native|Public) // @ game+0x29940c0
	void OnRep_SoundFireAutoCount(); // Function Solarland.SolarWeapon.OnRep_SoundFireAutoCount // (Final|Native|Public) // @ game+0x29940a0
	void OnRep_SoundB9A04Skill(); // Function Solarland.SolarWeapon.OnRep_SoundB9A04Skill // (Final|Native|Public) // @ game+0x2994080
	void OnRep_OverloadStateChange(enum class EWeaponOverloadState PreviousState); // Function Solarland.SolarWeapon.OnRep_OverloadStateChange // (Final|Native|Public) // @ game+0x2994000
	void OnRep_ImpactPosition(); // Function Solarland.SolarWeapon.OnRep_ImpactPosition // (Final|Native|Protected) // @ game+0x2993fe0
	void OnRep_FireModes(); // Function Solarland.SolarWeapon.OnRep_FireModes // (Native|Public) // @ game+0x1ae47f0
	void OnRep_FireChargingPhase(int32_t InOldFireChargingPhase); // Function Solarland.SolarWeapon.OnRep_FireChargingPhase // (Final|Native|Public) // @ game+0x2993f50
	void OnRep_ExtraAmmo(); // Function Solarland.SolarWeapon.OnRep_ExtraAmmo // (Final|Native|Public) // @ game+0x2993f30
	void OnRep_ControlWeaponCharacterChanged(struct ASolarCharacterBase* OldCharacter); // Function Solarland.SolarWeapon.OnRep_ControlWeaponCharacterChanged // (Final|Native|Protected) // @ game+0x2993ea0
	void OnRep_ClipRemainAmmoCount(int32_t LastClipRemainAmmoCount); // Function Solarland.SolarWeapon.OnRep_ClipRemainAmmoCount // (Final|Native|Protected) // @ game+0x2993e10
	void OnPlayMuzzleEffect(); // Function Solarland.SolarWeapon.OnPlayMuzzleEffect // (Native|Event|Protected|BlueprintEvent) // @ game+0x826920
	void OnLoadInitAssetComplete(); // Function Solarland.SolarWeapon.OnLoadInitAssetComplete // (Native|Protected) // @ game+0x1ae5590
	void OnLoadCfgAssetsComplete(); // Function Solarland.SolarWeapon.OnLoadCfgAssetsComplete // (Native|Protected) // @ game+0x1ae5190
	void OnInternalUnControlled(); // Function Solarland.SolarWeapon.OnInternalUnControlled // (Native|Protected) // @ game+0x1ae6810
	void OnInternalControlled(struct ASolarCharacterBase* OwnerChar); // Function Solarland.SolarWeapon.OnInternalControlled // (Native|Protected) // @ game+0x2993cf0
	void OnInstantLineShotHit(struct FHitResult& InHit, float DamageScale); // Function Solarland.SolarWeapon.OnInstantLineShotHit // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnInitFlowComplete(); // Function Solarland.SolarWeapon.OnInitFlowComplete // (Native|Protected) // @ game+0x1ae6210
	void OnGatlingRollChange(bool bIncrease); // Function Solarland.SolarWeapon.OnGatlingRollChange // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnFireChargeBurstCountChange(int32_t BurstSum); // Function Solarland.SolarWeapon.OnFireChargeBurstCountChange // (Native|Event|Public|BlueprintEvent) // @ game+0x2993c60
	enum class EShootingOpt NextShootingPrimaryOption(); // Function Solarland.SolarWeapon.NextShootingPrimaryOption // (Final|Native|Public) // @ game+0x29938b0
	void LuaStopSoundWithParameters(enum class EShootingSoundOpt Opt, int32_t idx, struct FPlaySoundParams& Params); // Function Solarland.SolarWeapon.LuaStopSoundWithParameters // (Final|Native|Protected|HasOutParms) // @ game+0x2993780
	void LuaStartSoundWithParameters(enum class EShootingSoundOpt Opt, int32_t idx, struct FPlaySoundParams& Params); // Function Solarland.SolarWeapon.LuaStartSoundWithParameters // (Final|Native|Protected|HasOutParms) // @ game+0x2993650
	void LoadInitAsset(); // Function Solarland.SolarWeapon.LoadInitAsset // (Final|Native|Public|BlueprintCallable) // @ game+0x2993630
	void LoadAllCfgAssets(); // Function Solarland.SolarWeapon.LoadAllCfgAssets // (Final|Native|Public|BlueprintCallable) // @ game+0x2993610
	struct UAmmoConfig* K2_GetOverrideAmmoConfigBase(int32_t ModeIndex); // Function Solarland.SolarWeapon.K2_GetOverrideAmmoConfigBase // (Final|Native|Protected|BlueprintCallable) // @ game+0x2993570
	struct USingleWeaponConfig* K2_GetCurrentConfig(); // Function Solarland.SolarWeapon.K2_GetCurrentConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2993540
	bool IsVisible(); // Function Solarland.SolarWeapon.IsVisible // (Native|Public) // @ game+0x2993510
	bool IsShowCoolDownWidget(); // Function Solarland.SolarWeapon.IsShowCoolDownWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2993470
	bool IsShotAimEnemy(); // Function Solarland.SolarWeapon.IsShotAimEnemy // (Native|Public|Const) // @ game+0x2993440
	bool IsScopeOpen(); // Function Solarland.SolarWeapon.IsScopeOpen // (Native|Public|Const) // @ game+0x2993410
	bool IsOpenedScope(); // Function Solarland.SolarWeapon.IsOpenedScope // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29933e0
	bool IsHipFire(); // Function Solarland.SolarWeapon.IsHipFire // (Final|Native|Public|Const) // @ game+0x29933b0
	bool IsEnergyID(int32_t BulletItemID); // Function Solarland.SolarWeapon.IsEnergyID // (Final|Native|Public|Const) // @ game+0x2993310
	bool IsControlled(); // Function Solarland.SolarWeapon.IsControlled // (Final|Native|Public|Const) // @ game+0x29932d0
	bool IsCanFire(); // Function Solarland.SolarWeapon.IsCanFire // (Final|Native|Public) // @ game+0x29932a0
	struct UParticleSystemComponent* InternalPlayEffectAttached(struct UParticleSystem* ps, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FAttachedEffectParam Param); // Function Solarland.SolarWeapon.InternalPlayEffectAttached // (Final|Native|Protected) // @ game+0x2993100
	struct UParticleSystemComponent* InternalPlayEffectAtLocation(struct UObject* WorldContext, struct UParticleSystem* ps, struct FVector& Location, struct FLocationEffectParam Param, bool bUseDistScale); // Function Solarland.SolarWeapon.InternalPlayEffectAtLocation // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2992f00
	void InternalClientPlayFiringEffects(); // Function Solarland.SolarWeapon.InternalClientPlayFiringEffects // (Native|Protected) // @ game+0x1ae6730
	bool InSameTeam(); // Function Solarland.SolarWeapon.InSameTeam // (Native|Protected) // @ game+0x2992ed0
	void InitConfigs(); // Function Solarland.SolarWeapon.InitConfigs // (Native|Public|BlueprintCallable) // @ game+0x1ae4e70
	bool ImmediatelyFire(int32_t idx, bool bEnable); // Function Solarland.SolarWeapon.ImmediatelyFire // (Final|Native|Public) // @ game+0x2992e00
	bool HasLoadInitAsset(); // Function Solarland.SolarWeapon.HasLoadInitAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2992de0
	bool HasLoadAllCfgAssets(); // Function Solarland.SolarWeapon.HasLoadAllCfgAssets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2992dc0
	bool HasInitConfigs(); // Function Solarland.SolarWeapon.HasInitConfigs // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2992d90
	enum class EWeaponType GetWeaponType(); // Function Solarland.SolarWeapon.GetWeaponType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2992d60
	struct FString GetWeaponTextType(); // Function Solarland.SolarWeapon.GetWeaponTextType // (Final|Native|Public) // @ game+0x2992ce0
	uint32_t GetWeaponNoticeID(struct FName& InNoticeType); // Function Solarland.SolarWeapon.GetWeaponNoticeID // (Final|Native|Public|HasOutParms) // @ game+0x2992c40
	int32_t GetWeaponLevel(); // Function Solarland.SolarWeapon.GetWeaponLevel // (Native|Public|Const) // @ game+0x2992c10
	int32_t GetWeaponID(); // Function Solarland.SolarWeapon.GetWeaponID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2992bc0
	struct UTexture2D* GetWeaponIcon(); // Function Solarland.SolarWeapon.GetWeaponIcon // (Final|Native|Public) // @ game+0x2992be0
	enum class ESolarWeaponBrand GetWeaponBrand(); // Function Solarland.SolarWeapon.GetWeaponBrand // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2992b90
	struct UAnimMontage* GetWeaponAnimSequence(enum class ECharacterMontage InMontageType); // Function Solarland.SolarWeapon.GetWeaponAnimSequence // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2992850
	struct FWeaponAnimationInfo GetWeaponAnimationInfo(enum class ECharacterMontage InMontageType); // Function Solarland.SolarWeapon.GetWeaponAnimationInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2992990
	struct FSlateBrush GetTriggerIcon(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetTriggerIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2992600
	int32_t GetSpareAmmo(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetSpareAmmo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2992560
	float GetSoundRTPCValue(); // Function Solarland.SolarWeapon.GetSoundRTPCValue // (Final|Native|Protected) // @ game+0x2992530
	struct USolarAkGameObject* GetSolarAkGameObject(); // Function Solarland.SolarWeapon.GetSolarAkGameObject // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2992500
	int32_t GetSkinID(); // Function Solarland.SolarWeapon.GetSkinID // (Native|Public|Const) // @ game+0x29924d0
	float GetShotGunSpreadSeed(); // Function Solarland.SolarWeapon.GetShotGunSpreadSeed // (Native|Event|Protected|BlueprintEvent) // @ game+0x2992490
	struct FVector GetShotDir(bool NeedSpread); // Function Solarland.SolarWeapon.GetShotDir // (Native|Protected|HasDefaults|Const) // @ game+0x29923e0
	struct FVector GetShootingTraceStartLocation(); // Function Solarland.SolarWeapon.GetShootingTraceStartLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x29923a0
	struct FString GetShootingPrimaryShootingOptionName(enum class EShootingOpt Opt); // Function Solarland.SolarWeapon.GetShootingPrimaryShootingOptionName // (Final|Native|Public) // @ game+0x29922c0
	int32_t GetReservedAmmo(int32_t idx); // Function Solarland.SolarWeapon.GetReservedAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x2992220
	float GetReloadProgress(); // Function Solarland.SolarWeapon.GetReloadProgress // (Final|Native|Public|Const) // @ game+0x29921f0
	int32_t GetPrimaryShootingOptionIndex(); // Function Solarland.SolarWeapon.GetPrimaryShootingOptionIndex // (Final|Native|Public) // @ game+0x29921c0
	float GetPostFireDuration(int32_t idx); // Function Solarland.SolarWeapon.GetPostFireDuration // (Final|Native|Public) // @ game+0x2992120
	struct UWeaponPartsComponent* GetPartsComponent(); // Function Solarland.SolarWeapon.GetPartsComponent // (Native|Public|Const) // @ game+0x29920f0
	float GetOverloadPercent(); // Function Solarland.SolarWeapon.GetOverloadPercent // (Final|Native|Public) // @ game+0x29920c0
	float GetOverloadMaxValue(); // Function Solarland.SolarWeapon.GetOverloadMaxValue // (Native|Protected|BlueprintCallable) // @ game+0x2992080
	struct ASolarWeaponProjectileSpline* GetOrCreateWeaponProjectileSpline(); // Function Solarland.SolarWeapon.GetOrCreateWeaponProjectileSpline // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2992050
	int32_t GetMaxAmmo(int32_t idx, bool bWithExtraAmmoByChaAbility); // Function Solarland.SolarWeapon.GetMaxAmmo // (Native|Public|BlueprintCallable) // @ game+0x2991f80
	float GetLastFireTime(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetLastFireTime // (Final|Native|Public|Const) // @ game+0x2991ee0
	bool GetIsVehicleMounted(); // Function Solarland.SolarWeapon.GetIsVehicleMounted // (Final|Native|Public|Const) // @ game+0x2991eb0
	bool GetIsSupportSecondaryFire(); // Function Solarland.SolarWeapon.GetIsSupportSecondaryFire // (Final|Native|Public) // @ game+0x2991e80
	bool GetIsSupportAutoFire(); // Function Solarland.SolarWeapon.GetIsSupportAutoFire // (Final|Native|Public|Const) // @ game+0x2991e50
	bool GetIsSupportAssistAim(); // Function Solarland.SolarWeapon.GetIsSupportAssistAim // (Final|Native|Public|Const) // @ game+0x2991e20
	bool GetIsQuickScope(); // Function Solarland.SolarWeapon.GetIsQuickScope // (Native|Public) // @ game+0x2991df0
	bool GetIsCoolDown(int32_t Mode); // Function Solarland.SolarWeapon.GetIsCoolDown // (Final|Native|Public) // @ game+0x2991d50
	struct UGlobalWeaponConfig* GetGlobalWeaponConfig(); // Function Solarland.SolarWeapon.GetGlobalWeaponConfig // (Final|Native|Public|Const) // @ game+0x2991d20
	int32_t GetFireModeNameLocalizationID(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetFireModeNameLocalizationID // (Final|Native|Public) // @ game+0x2991c80
	float GetFireInterval(int32_t idx); // Function Solarland.SolarWeapon.GetFireInterval // (Native|Public) // @ game+0x2991be0
	void GetFireChargeInfo(int32_t& OutChargingPhase, float& OutChargingTime, float& OutRate, struct FFireChargeData& OutChargeData); // Function Solarland.SolarWeapon.GetFireChargeInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x29919a0
	float GetFireCD(int32_t idx); // Function Solarland.SolarWeapon.GetFireCD // (Final|Native|Public) // @ game+0x2991900
	struct UParticleSystem* GetDedicatedKillEffect(); // Function Solarland.SolarWeapon.GetDedicatedKillEffect // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29918d0
	struct FSoftObjectPath GetDedicatedDissolvedDeathFXPath(); // Function Solarland.SolarWeapon.GetDedicatedDissolvedDeathFXPath // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2991840
	struct UActorEffect* GetDedicatedDissolvedDeathActorEffectClass(); // Function Solarland.SolarWeapon.GetDedicatedDissolvedDeathActorEffectClass // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2991800
	struct FWeaponDebugFlag GetDebugFlag(); // Function Solarland.SolarWeapon.GetDebugFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29917c0
	int32_t GetCurScopeType(); // Function Solarland.SolarWeapon.GetCurScopeType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2991220
	enum class EShootingOpt GetCurrentShootingPrimaryOption(); // Function Solarland.SolarWeapon.GetCurrentShootingPrimaryOption // (Final|Native|Public) // @ game+0x2991790
	enum class EWeaponScopeType GetCurrentScopeType(); // Function Solarland.SolarWeapon.GetCurrentScopeType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2991760
	struct FFireChargeData GetCurrentFireChargeData(struct UAmmoConfig* InAmmo); // Function Solarland.SolarWeapon.GetCurrentFireChargeData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29914d0
	struct UAmmoConfig* GetCurrentFireChargeAmmoData(struct UAmmoConfig* InAmmo); // Function Solarland.SolarWeapon.GetCurrentFireChargeAmmoData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2991430
	int32_t GetCurrentClipAmmo(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetCurrentClipAmmo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2991390
	bool GetCurrentChargeModePercent(int32_t InFireModeType, int32_t& OutChargeMode, float& OutChargePercent); // Function Solarland.SolarWeapon.GetCurrentChargeModePercent // (Final|Native|Public|HasOutParms) // @ game+0x2991260
	int32_t GetCostPerAttack(); // Function Solarland.SolarWeapon.GetCostPerAttack // (Final|Native|Public|Const) // @ game+0x29911f0
	struct ASolarCharacterBase* GetControlWeaponCharacter(); // Function Solarland.SolarWeapon.GetControlWeaponCharacter // (Final|Native|Public|Const) // @ game+0x29911c0
	float GetChargingPercent(int32_t idx); // Function Solarland.SolarWeapon.GetChargingPercent // (Final|Native|Public) // @ game+0x2991120
	void GetBulletHitEffectRot(struct FHitResult& HitResult, struct ASolarBullet* Bullet, struct FRotator& TargetPos, bool bIsHittedShield); // Function Solarland.SolarWeapon.GetBulletHitEffectRot // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2990f80
	void GetBulletHitEffectPos(struct FHitResult& HitResult, struct FVector& TargetRot, float Offset); // Function Solarland.SolarWeapon.GetBulletHitEffectPos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2990e00
	struct ASolarBullet* GetBulletDefaultObject(int32_t idx, struct UAmmoConfig* AmmoCfg); // Function Solarland.SolarWeapon.GetBulletDefaultObject // (Final|Native|Public) // @ game+0x2990d30
	struct ASolarBullet* GetBulletClass(int32_t idx, struct UAmmoConfig* AmmoCfg); // Function Solarland.SolarWeapon.GetBulletClass // (Final|Native|Public) // @ game+0x2990c60
	float GetBotAIDamageFactor(); // Function Solarland.SolarWeapon.GetBotAIDamageFactor // (Final|Native|Public) // @ game+0x2990c30
	enum class ETriggerType GetAmmoTriggerType(int32_t fireModeType); // Function Solarland.SolarWeapon.GetAmmoTriggerType // (Final|Native|Public|Const) // @ game+0x2990b90
	int32_t GetAmmoItemID(int32_t idx); // Function Solarland.SolarWeapon.GetAmmoItemID // (Final|Native|Public) // @ game+0x2990af0
	bool GetAllInitAssetPath(struct TArray<struct FSoftObjectPath>& PathArray); // Function Solarland.SolarWeapon.GetAllInitAssetPath // (Native|Protected|HasOutParms) // @ game+0x2990a10
	bool GetAllCfgAssetsPath(struct TArray<struct FSoftObjectPath>& PathArray); // Function Solarland.SolarWeapon.GetAllCfgAssetsPath // (Native|Protected|HasOutParms) // @ game+0x2990930
	struct UAkComponent* GetAkComponent(); // Function Solarland.SolarWeapon.GetAkComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29908f0
	void GetAimStartEnd(struct UAmmoConfig* InAmmo, struct FVector& OutStart, struct FVector& OutEnd, struct AActor*& OutTargetActor, bool NeedSpread); // Function Solarland.SolarWeapon.GetAimStartEnd // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2990710
	bool FireVerify_Location(int32_t FireMode, struct FVector& StartLocation, struct FVector& WeaponLocation, float ServerTime, struct FBulletHitDetailData& HitDetailData); // Function Solarland.SolarWeapon.FireVerify_Location // (Final|Native|Protected|HasOutParms|HasDefaults|Const) // @ game+0x2990520
	bool FireVerify_EffectRange(int32_t FireMode, struct FVector& StartLocation, struct FVector& WeaponLocation, float ServerTime, struct FBulletHitDetailData& HitDetailData); // Function Solarland.SolarWeapon.FireVerify_EffectRange // (Final|Native|Protected|HasOutParms|HasDefaults|Const) // @ game+0x2990330
	bool FireVerify_Block(int32_t FireMode, struct FVector& StartLocation, struct FVector& WeaponLocation, float ServerTime, struct FBulletHitDetailData& HitDetailData); // Function Solarland.SolarWeapon.FireVerify_Block // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2990140
	bool FireValidate(int32_t idx, float InLastShootTime); // Function Solarland.SolarWeapon.FireValidate // (Final|Native|Protected) // @ game+0x2990070
	enum class ECharacterMontage FindMontageKeyFromWeaponAnim(struct UAnimMontage* InAnimation); // Function Solarland.SolarWeapon.FindMontageKeyFromWeaponAnim // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x298fe00
	void EnterOverloadState(); // Function Solarland.SolarWeapon.EnterOverloadState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void DestroyWeaponProjectileSpline(); // Function Solarland.SolarWeapon.DestroyWeaponProjectileSpline // (Final|Native|Protected|BlueprintCallable) // @ game+0x298fde0
	void ClientVirtualBulletShot(struct FSolarVirtualBulletSpawnParameter InParameter); // Function Solarland.SolarWeapon.ClientVirtualBulletShot // (Net|Native|Event|NetMulticast|Public) // @ game+0x298fd40
	void ClientPlayFiringEffects(); // Function Solarland.SolarWeapon.ClientPlayFiringEffects // (Net|Native|Event|NetMulticast|Protected|NetClient) // @ game+0x8265e0
	void ClientPlayAnimWithNetMulticast(enum class ECharacterMontage InMontageType, float ExpectAnimLength); // Function Solarland.SolarWeapon.ClientPlayAnimWithNetMulticast // (Net|Native|Event|NetMulticast|Public) // @ game+0x298fc70
	void ClientNotifyUpdateReservedAmmoForce(int32_t InFireModeType, int32_t InAmount); // Function Solarland.SolarWeapon.ClientNotifyUpdateReservedAmmoForce // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x298fba0
	void ClientInstantLineShot(char ModeIndex, struct TArray<struct FHitResult> HitResults, struct FVector_NetQuantize End, float DamageScale); // Function Solarland.SolarWeapon.ClientInstantLineShot // (Net|Native|Event|NetMulticast|Public) // @ game+0x298fa30
	void ClientFireChargeShoot(struct UAmmoConfig* InAmmo, int8_t InFireChargingPhase, int32_t InFireChargingTime); // Function Solarland.SolarWeapon.ClientFireChargeShoot // (Net|Native|Event|NetMulticast|Public) // @ game+0x298f920
	void ClientCanisterShot(struct FVector_NetQuantize Start, struct TArray<struct FWeaponShotHitResult> ValidHits, struct FVector_NetQuantize Target); // Function Solarland.SolarWeapon.ClientCanisterShot // (Net|Native|Event|NetMulticast|Public) // @ game+0x298f800
	void ClearFireHitVerify(); // Function Solarland.SolarWeapon.ClearFireHitVerify // (Final|Native|Protected) // @ game+0x298f7e0
	bool CheckOpenParticleOptimization(int32_t Bias); // Function Solarland.SolarWeapon.CheckOpenParticleOptimization // (Final|Native|Public|BlueprintCallable) // @ game+0x298f740
	bool CanOverload(); // Function Solarland.SolarWeapon.CanOverload // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x298f720
	bool CanCauseTeamDamage(); // Function Solarland.SolarWeapon.CanCauseTeamDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x298f6f0
	float CalcScale(struct FFireMode& Mode); // Function Solarland.SolarWeapon.CalcScale // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x298f630
	int32_t CalcCost(struct FFireMode& Mode); // Function Solarland.SolarWeapon.CalcCost // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x298f570
};

// Class Solarland.SolarPlayerWeapon
// Size: 0xda0 (Inherited: 0x910)
struct ASolarPlayerWeapon : ASolarWeapon {
	char pad_910[0xc8]; // 0x910(0xc8)
	float SpawnOffset; // 0x9d8(0x04)
	char pad_9DC[0x24]; // 0x9dc(0x24)
	struct FSolarItemData ItemData; // 0xa00(0xb8)
	struct TArray<char> MarkedTeamIdList; // 0xab8(0x10)
	char bUseSceneActorOptimization; // 0xac8(0x01)
	char pad_AC9[0x7]; // 0xac9(0x07)
	struct USphereComponent* SphereComponent; // 0xad0(0x08)
	struct FVector_NetQuantize DroppedLocation; // 0xad8(0x0c)
	char pad_AE4[0x4]; // 0xae4(0x04)
	struct ASolarCharacter* WeaponOwner; // 0xae8(0x08)
	struct UWeaponAnimationComponent* WeaponAnimationComponent; // 0xaf0(0x08)
	enum class EItemDiscardState WeaponCurrentDiscardState; // 0xaf8(0x01)
	enum class EItemState WeaponCurrentState; // 0xaf9(0x01)
	char pad_AFA[0x6]; // 0xafa(0x06)
	struct TArray<struct FSoftObjectPath> DiscardMatPath; // 0xb00(0x10)
	struct FSoftObjectPath HoldMeshMaterialPath; // 0xb10(0x18)
	struct UMaterialInterface* OutlineBaseMat; // 0xb28(0x08)
	enum class EWeaponAttachState AttachState; // 0xb30(0x01)
	char pad_B31[0x7]; // 0xb31(0x07)
	struct TArray<struct UParticleSystemComponent*> SkinExtraPSCArray; // 0xb38(0x10)
	char pad_B48[0x10]; // 0xb48(0x10)
	struct UMaterialInstanceDynamic* MeshSubpassMaterial; // 0xb58(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> MeshDiscardMaterialArray; // 0xb60(0x10)
	struct UWeaponSkinData* WeaponSkinData; // 0xb70(0x08)
	int32_t WeaponSkinID; // 0xb78(0x04)
	int32_t ScopePartID; // 0xb7c(0x04)
	int32_t GripPartID; // 0xb80(0x04)
	int32_t StockPartID; // 0xb84(0x04)
	int32_t MuzzlePartID; // 0xb88(0x04)
	int32_t ClipPartID; // 0xb8c(0x04)
	int32_t DefaultSkinID; // 0xb90(0x04)
	char pad_B94[0xc]; // 0xb94(0x0c)
	bool bIsAutoDrop; // 0xba0(0x01)
	char pad_BA1[0x3]; // 0xba1(0x03)
	float LifespanAfterAutoDrop; // 0xba4(0x04)
	bool bUsed; // 0xba8(0x01)
	char pad_BA9[0x7]; // 0xba9(0x07)
	struct UParticleSystem* SkinDedicatedSpecialEffect; // 0xbb0(0x08)
	struct UParticleSystem* MeshEffectForFPP; // 0xbb8(0x08)
	struct UParticleSystem* MeshEffectForTPP; // 0xbc0(0x08)
	struct UParticleSystemComponent* MeshEffectEmitterForFPP; // 0xbc8(0x08)
	struct UParticleSystemComponent* MeshEffectEmitterForTPP; // 0xbd0(0x08)
	char pad_BD8[0x198]; // 0xbd8(0x198)
	struct UWeaponRecoilComponent* RecoilComponent; // 0xd70(0x08)
	struct UWeaponSpreadAndRecoil* SpreadAndRecoil; // 0xd78(0x08)
	char pad_D80[0x4]; // 0xd80(0x04)
	struct FSolarLandscapeListenerConfig LandscapeListenerConfig; // 0xd84(0x10)
	char pad_D94[0xc]; // 0xd94(0x0c)

	void UpdateCharacterState(enum class ECharacterStateForWeapon CharacterState, bool bIsOnGround, bool bResetState); // Function Solarland.SolarPlayerWeapon.UpdateCharacterState // (Final|Native|Public) // @ game+0x287a250
	void UpdateCharacterPosture(bool IsCrouch); // Function Solarland.SolarPlayerWeapon.UpdateCharacterPosture // (Final|Native|Public) // @ game+0x287a1c0
	void SetOpenScopeOnVehicle(bool InbOpenScope); // Function Solarland.SolarPlayerWeapon.SetOpenScopeOnVehicle // (Final|Native|Public) // @ game+0x2879820
	void SetDedicatedSkinEffect(struct UWeaponSkinData* InSkinData); // Function Solarland.SolarPlayerWeapon.SetDedicatedSkinEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x2879790
	void RequestUnlimitedAmmo(bool InEnable); // Function Solarland.SolarPlayerWeapon.RequestUnlimitedAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x2879700
	void PostUpdateAppearance(); // Function Solarland.SolarPlayerWeapon.PostUpdateAppearance // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnSetWeaponSkinMesh(struct USkeletalMesh* InMesh, struct UObject* InAnimClass); // Function Solarland.SolarPlayerWeapon.OnSetWeaponSkinMesh // (Final|Native|Public) // @ game+0x2879630
	void OnRep_WeaponCurrentStateChanged(); // Function Solarland.SolarPlayerWeapon.OnRep_WeaponCurrentStateChanged // (Final|Native|Protected) // @ game+0x2879610
	void OnRep_WeaponCurrentDiscardStateChanged(); // Function Solarland.SolarPlayerWeapon.OnRep_WeaponCurrentDiscardStateChanged // (Final|Native|Protected) // @ game+0x28795f0
	void OnRep_AttachState(); // Function Solarland.SolarPlayerWeapon.OnRep_AttachState // (Final|Native|Protected) // @ game+0x28795d0
	void OnClientMeshLodChanged(int32_t LOD); // Function Solarland.SolarPlayerWeapon.OnClientMeshLodChanged // (Native|Protected) // @ game+0x2879230
	void NotifyThisItemWasPickedUp(); // Function Solarland.SolarPlayerWeapon.NotifyThisItemWasPickedUp // (Final|Native|Protected) // @ game+0x2879170
	void K2_SwitchDrawDistance(bool Hold); // Function Solarland.SolarPlayerWeapon.K2_SwitchDrawDistance // (Native|Event|Protected|BlueprintEvent) // @ game+0x28790e0
	void K2_PlaySoundGroup(struct FName SoundGroupName, struct FSoundGroupPlayContextByCharacter Context); // Function Solarland.SolarPlayerWeapon.K2_PlaySoundGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x2878fc0
	void K2_OnHold(bool bLocal); // Function Solarland.SolarPlayerWeapon.K2_OnHold // (Native|Event|Public|BlueprintEvent) // @ game+0x2878f30
	void K2_OnDrop(); // Function Solarland.SolarPlayerWeapon.K2_OnDrop // (Native|Event|Public|BlueprintEvent) // @ game+0x1ae5730
	bool IsOpenedScopeOnVehicle(); // Function Solarland.SolarPlayerWeapon.IsOpenedScopeOnVehicle // (Final|Native|Public|Const) // @ game+0x2878f10
	bool IsItemWeapon(); // Function Solarland.SolarPlayerWeapon.IsItemWeapon // (Native|Public) // @ game+0x2878ee0
	bool IsExistPart(enum class EWeaponPartType& PartType); // Function Solarland.SolarPlayerWeapon.IsExistPart // (Native|Public|HasOutParms|Const) // @ game+0x2878e30
	void Hold(bool bInHold); // Function Solarland.SolarPlayerWeapon.Hold // (Native|Public) // @ game+0x2878cd0
	bool HasScope(); // Function Solarland.SolarPlayerWeapon.HasScope // (Native|Public) // @ game+0x2878ca0
	float GetWeaponSilencerMagnitude(); // Function Solarland.SolarPlayerWeapon.GetWeaponSilencerMagnitude // (Final|Native|Public) // @ game+0x2878c70
	struct UPlayerWeaponRecoilComponent* GetRecoilComp(); // Function Solarland.SolarPlayerWeapon.GetRecoilComp // (Final|Native|Protected) // @ game+0x2878b40
	int32_t GetQualityByLevel(int32_t Level); // Function Solarland.SolarPlayerWeapon.GetQualityByLevel // (Final|Native|Public) // @ game+0x2878aa0
	int32_t GetQuality(); // Function Solarland.SolarPlayerWeapon.GetQuality // (Native|Public) // @ game+0x2878a60
	enum class EItemState GetItemCurrentState(); // Function Solarland.SolarPlayerWeapon.GetItemCurrentState // (Native|Public|BlueprintCallable) // @ game+0x2878a20
	bool GetIsHolded(); // Function Solarland.SolarPlayerWeapon.GetIsHolded // (Final|Native|Public) // @ game+0x2878a00
	struct FVector GetFPPLocation(); // Function Solarland.SolarPlayerWeapon.GetFPPLocation // (Native|Public|HasDefaults|Const) // @ game+0x2878990
	float GetFire2AnimPlayRate(); // Function Solarland.SolarPlayerWeapon.GetFire2AnimPlayRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28789d0
	float GetDistanceToEyeWhenScope(); // Function Solarland.SolarPlayerWeapon.GetDistanceToEyeWhenScope // (Native|Public) // @ game+0x2878950
	struct FVector GetCurrentScopeAimCenterPoint(); // Function Solarland.SolarPlayerWeapon.GetCurrentScopeAimCenterPoint // (Native|Public|HasDefaults) // @ game+0x2878870
	struct UWeaponPartClipComp* GetCurrentClip(); // Function Solarland.SolarPlayerWeapon.GetCurrentClip // (Native|Public) // @ game+0x2878840
	void ClearSkinExtraPSC(); // Function Solarland.SolarPlayerWeapon.ClearSkinExtraPSC // (Final|Native|Protected) // @ game+0x28786c0
	void ClearDedicatedSkinEffect(); // Function Solarland.SolarPlayerWeapon.ClearDedicatedSkinEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x28786a0
};

// Class Solarland.SolarPlayerItemWeapon
// Size: 0xda0 (Inherited: 0xda0)
struct ASolarPlayerItemWeapon : ASolarPlayerWeapon {
};

// Class Solarland.SolarPlayerNormalWeapon
// Size: 0xdb0 (Inherited: 0xda0)
struct ASolarPlayerNormalWeapon : ASolarPlayerWeapon {
	struct UWeaponPartsComponent* WeaponPartsComponent; // 0xda0(0x08)
	char pad_DA8[0x8]; // 0xda8(0x08)

	bool QueryCanEquipPart(enum class EWeaponPartType Type, int32_t InWeaponID); // Function Solarland.SolarPlayerNormalWeapon.QueryCanEquipPart // (Final|Native|Public) // @ game+0x2874350
	bool GetEquippedScopeTypeAndLevel(enum class EWeaponPartType& Type, int32_t& Level); // Function Solarland.SolarPlayerNormalWeapon.GetEquippedScopeTypeAndLevel // (Native|Public|HasOutParms) // @ game+0x2870ef0
	int32_t GetEquippedPartLevel(enum class EWeaponPartType Type); // Function Solarland.SolarPlayerNormalWeapon.GetEquippedPartLevel // (Native|Public) // @ game+0x2870e60
	void GameStatisticsWeaponAddExp(float newExp, float AddExp, int32_t OldLevel, int32_t NewLevel, int32_t reason); // Function Solarland.SolarPlayerNormalWeapon.GameStatisticsWeaponAddExp // (Final|Native|Protected) // @ game+0x28708a0
	bool CanEquipPart(enum class EWeaponPartType Type); // Function Solarland.SolarPlayerNormalWeapon.CanEquipPart // (Native|Public) // @ game+0x2870110
};

// Class Solarland.SolarPlayerSensitivitys
// Size: 0x70 (Inherited: 0x28)
struct USolarPlayerSensitivitys : UObject {
	char pad_28[0x48]; // 0x28(0x48)

	void InitPlayerSensitivity(); // Function Solarland.SolarPlayerSensitivitys.InitPlayerSensitivity // (Final|Native|Public|BlueprintCallable) // @ game+0x2871ff0
};

// Class Solarland.SinglePlayerShieldModel
// Size: 0xa0 (Inherited: 0x30)
struct USinglePlayerShieldModel : USingleCharacterModelBase {
	char pad_30[0x70]; // 0x30(0x70)

	void ShieldValueChanged(enum class EShieldWidgetState InWidgetState, float InCurValue, float InChangeValue, enum class EShieldRechargeState InRechargeState, bool bInFixPreAdd); // Function Solarland.SinglePlayerShieldModel.ShieldValueChanged // (Final|Native|Private) // @ game+0x2875410
	void ShieldChanged(bool bInAvailable, float InCurValue, float InMaxValue, int32_t InQualityColor, bool bInIsAdvancedShield); // Function Solarland.SinglePlayerShieldModel.ShieldChanged // (Final|Native|Private) // @ game+0x2875270
};

// Class Solarland.SolarPlayersShieldModel
// Size: 0x78 (Inherited: 0x78)
struct USolarPlayersShieldModel : USolarCharactersModelBase {
};

// Class Solarland.SolarPlayerStart
// Size: 0x2d0 (Inherited: 0x258)
struct ASolarPlayerStart : APlayerStart {
	char pad_258[0x8]; // 0x258(0x08)
	float Distance; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
	struct FString Side; // 0x268(0x10)
	struct FString Job; // 0x278(0x10)
	struct FString ElementID; // 0x288(0x10)
	enum class ESGameMode_ElementType Type; // 0x298(0x01)
	enum class EElementStateType State; // 0x299(0x01)
	enum class EElementVisibilityType Visibility; // 0x29a(0x01)
	char pad_29B[0x1]; // 0x29b(0x01)
	struct FName ElementTypeName; // 0x29c(0x08)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct FString GroupKey; // 0x2a8(0x10)
	struct TArray<struct FVector> PlayerLocations; // 0x2b8(0x10)
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void SetElementVisibility(enum class EElementVisibilityType NewType); // Function Solarland.SolarPlayerStart.SetElementVisibility // (Native|Public|BlueprintCallable) // @ game+0x2874f30
	enum class EElementStateType SetElementState(enum class EElementStateType NewState); // Function Solarland.SolarPlayerStart.SetElementState // (Native|Public|BlueprintCallable) // @ game+0x270ee60
	void OnElementVisibilityChanged(enum class EElementVisibilityType CurrentVisibility); // Function Solarland.SolarPlayerStart.OnElementVisibilityChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnElementStateChanged(enum class EElementStateType CurrentState); // Function Solarland.SolarPlayerStart.OnElementStateChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarPoolActorInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarPoolActorInterface : UInterface {
};

// Class Solarland.SolarPoolObjectInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarPoolObjectInterface : UInterface {

	void OnPreDestroy(); // Function Solarland.SolarPoolObjectInterface.OnPreDestroy // (Native|Event|Public|BlueprintEvent) // @ game+0x28795b0
	void OnDeactivated(); // Function Solarland.SolarPoolObjectInterface.OnDeactivated // (Native|Event|Public|BlueprintEvent) // @ game+0xcb49b0
	void OnActivated(); // Function Solarland.SolarPoolObjectInterface.OnActivated // (Native|Event|Public|BlueprintEvent) // @ game+0x273b9b0
	int32_t GetDefaultPoolLimit(struct FName Tag); // Function Solarland.SolarPoolObjectInterface.GetDefaultPoolLimit // (Native|Event|Public|BlueprintEvent) // @ game+0x28788b0
};

// Class Solarland.SolarPopPanelManager
// Size: 0x38 (Inherited: 0x30)
struct USolarPopPanelManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarPreloadAssetCollection
// Size: 0x50 (Inherited: 0x30)
struct USolarPreloadAssetCollection : UPrimaryDataAsset {
	struct TArray<struct UObject*> PreloadRes; // 0x30(0x10)
	struct TArray<struct UObject*> PreloadClass; // 0x40(0x10)
};

// Class Solarland.SolarPreservedBotManager
// Size: 0x2f8 (Inherited: 0x28)
struct USolarPreservedBotManager : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TMap<struct ASolarPlayerState*, enum class EPreservedBotType> PreservedBots; // 0x38(0x50)
	struct TArray<struct ASolarPlayerState*> FailedBots; // 0x88(0x10)
	struct TMap<int32_t, struct FVector> SilenceLocationInDiffMap; // 0x98(0x50)
	float MinDetectDistance; // 0xe8(0x04)
	char pad_EC[0x1c]; // 0xec(0x1c)
	struct TArray<struct USolarPreservedBotPopTask*> PopTasks; // 0x108(0x10)
	struct FEQSParametrizedQueryExecutionRequest DefaultPopQuery; // 0x118(0x48)
	struct TMap<enum class EPopLocationType, struct FEQSParametrizedQueryExecutionRequest> PopQueryMap; // 0x160(0x50)
	struct UEnvQuery* SeparateQuery; // 0x1b0(0x08)
	enum class EEnvQueryRunMode SeparateEQSRunMode; // 0x1b8(0x01)
	char pad_1B9[0x7]; // 0x1b9(0x07)
	struct FSolarBotTimelineAIItemSetting DefaultItemTemplate; // 0x1c0(0xf0)
	float TimeBetweenDyingAndDead; // 0x2b0(0x04)
	char pad_2B4[0xc]; // 0x2b4(0x0c)
	struct FMulticastInlineDelegate OnSendBotsSuccess; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnSendBotsFail; // 0x2d0(0x10)
	char pad_2E0[0x18]; // 0x2e0(0x18)

	void TryUpdateEquipment(struct UObject* Context, struct FSolarBotTimelineAIItemSetting& ItemSetting); // Function Solarland.SolarPreservedBotManager.TryUpdateEquipment // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2879f50
	bool TryPopBotByNum(struct UObject* Context, int32_t PopNum, struct FPopParameter& InPopParam); // Function Solarland.SolarPreservedBotManager.TryPopBotByNum // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2879dd0
	void TryPopAllBotByGuarantee(struct UObject* Context, struct FVector& PopLocation); // Function Solarland.SolarPreservedBotManager.TryPopAllBotByGuarantee // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2879d10
	void TryPopAllBot(struct UObject* Context, struct FPopParameter& InPopParam); // Function Solarland.SolarPreservedBotManager.TryPopAllBot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2879bf0
	void TryKillOneBot(); // Function Solarland.SolarPreservedBotManager.TryKillOneBot // (Final|Native|Public|BlueprintCallable) // @ game+0x2879bd0
	void TryAddPreservedBot(struct ASolarPlayerState* InBot, float DelayTime); // Function Solarland.SolarPreservedBotManager.TryAddPreservedBot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2879b10
	void OnPopSingleBotSuccess(struct USolarPreservedBotPopTask* InTask); // Function Solarland.SolarPreservedBotManager.OnPopSingleBotSuccess // (Final|Native|Protected) // @ game+0x2879520
	void OnPopBotsFinished(struct USolarPreservedBotPopTask* InTask); // Function Solarland.SolarPreservedBotManager.OnPopBotsFinished // (Final|Native|Protected) // @ game+0x2879490
	void OnGetFinalTeleportLocSuccess(struct USolarPreservedBotPopTask* InTask, struct ASolarPlayerState* BotPS, struct FVector& TeleportLoc); // Function Solarland.SolarPreservedBotManager.OnGetFinalTeleportLocSuccess // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x28792e0
	void OnGetFinalTeleportLocFail(struct USolarPreservedBotPopTask* InTask, struct ASolarPlayerState* BotPS); // Function Solarland.SolarPreservedBotManager.OnGetFinalTeleportLocFail // (Final|Native|Protected) // @ game+0x26a9650
	void OnCharacterDeath(struct ASolarPlayerController* InPlayer); // Function Solarland.SolarPreservedBotManager.OnCharacterDeath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28791b0
	void InitBotPreservedManager(char InActivePlayerNum, int32_t GameModeId); // Function Solarland.SolarPreservedBotManager.InitBotPreservedManager // (Final|Native|Public|BlueprintCallable) // @ game+0x2878d60
	struct USolarPreservedBotManager* Get(struct UObject* Context); // Function Solarland.SolarPreservedBotManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28787b0
};

// Class Solarland.SolarPreservedBotPopTask
// Size: 0xb0 (Inherited: 0x28)
struct USolarPreservedBotPopTask : UObject {
	int32_t CurrentTaskID; // 0x28(0x04)
	char pad_2C[0x14]; // 0x2c(0x14)
	struct TArray<struct FVector> PickedTeleportCenters; // 0x40(0x10)
	struct TArray<struct ASolarPlayerState*> FailedBots; // 0x50(0x10)
	struct TArray<struct ASolarBotAIController*> PendingSeparateBots; // 0x60(0x10)
	struct FMulticastInlineDelegate OnGetTeleportLocationSuccess; // 0x70(0x10)
	struct FMulticastInlineDelegate OnPopBotsFinished; // 0x80(0x10)
	struct FMulticastInlineDelegate OnGetFinalTeleportLocSuccess; // 0x90(0x10)
	struct FMulticastInlineDelegate OnGetFinalTeleportLocFail; // 0xa0(0x10)

	struct FVector GetWarmTargetTraceCenter(); // Function Solarland.SolarPreservedBotPopTask.GetWarmTargetTraceCenter // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2878c30
	struct FVector GetWarmTargetLocation(); // Function Solarland.SolarPreservedBotPopTask.GetWarmTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2878bf0
	struct TArray<struct AActor*> GetWarmTargetActors(); // Function Solarland.SolarPreservedBotPopTask.GetWarmTargetActors // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2878b70
};

// Class Solarland.SolarPreviewBlueCircle
// Size: 0x228 (Inherited: 0x228)
struct ASolarPreviewBlueCircle : AActor {
};

// Class Solarland.SolarPrimaryAssetDirectoryLabel
// Size: 0x60 (Inherited: 0x30)
struct USolarPrimaryAssetDirectoryLabel : UPrimaryDataAsset {
	struct FPrimaryAssetRules Rules; // 0x30(0x0c)
	char bIsRuntimeLabel : 1; // 0x3c(0x01)
	char pad_3C_1 : 7; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	struct TArray<struct FDirectoryPath> ExplicitDirectories; // 0x40(0x10)
	struct TArray<struct TSoftObjectPtr<UObject>> ExplicitAssets; // 0x50(0x10)
};

// Class Solarland.SolarProgressiveInteractButton
// Size: 0x4b0 (Inherited: 0x400)
struct USolarProgressiveInteractButton : USolarUserWidget {
	struct FMulticastInlineDelegate OnCompleteDelegate; // 0x400(0x10)
	struct FMulticastInlineDelegate OnCancelDelegate; // 0x410(0x10)
	struct FMulticastInlineDelegate OnStartInteract; // 0x420(0x10)
	char pad_430[0x2c]; // 0x430(0x2c)
	char bIsInCD : 1; // 0x45c(0x01)
	char pad_45C_1 : 7; // 0x45c(0x01)
	char pad_45D[0xb]; // 0x45d(0x0b)
	struct UGaugeImage* Image_GameProgressBar; // 0x468(0x08)
	struct USolarTextBlock* Text_GameProgressTime; // 0x470(0x08)
	struct UButton* BTN_GameProgressCancel; // 0x478(0x08)
	struct UTextBlock* Text_GameProgressTips; // 0x480(0x08)
	struct UHorizontalBox* HorizontalBox_Cancel; // 0x488(0x08)
	struct UHUDPassiveHeadWidget* Panel_PassiveBuff; // 0x490(0x08)
	struct UOverlay* Overlay_CD; // 0x498(0x08)
	struct UGaugeImage* Image_CD; // 0x4a0(0x08)
	struct USolarTextBlock* Txt_CDTime; // 0x4a8(0x08)

	void UpdateGameProgressTipsText(int32_t InTextId); // Function Solarland.SolarProgressiveInteractButton.UpdateGameProgressTipsText // (Final|Native|Protected) // @ game+0x287a490
	void UpdateGameProgressText(); // Function Solarland.SolarProgressiveInteractButton.UpdateGameProgressText // (Final|Native|Protected) // @ game+0x287a470
	void UpdateGameProgressBarPercent(float InPercent); // Function Solarland.SolarProgressiveInteractButton.UpdateGameProgressBarPercent // (Final|Native|Protected) // @ game+0x287a3f0
	void UpdateGameProgress(float InAddition); // Function Solarland.SolarProgressiveInteractButton.UpdateGameProgress // (Final|Native|Protected) // @ game+0x287a370
	void TryCancelInteraction(); // Function Solarland.SolarProgressiveInteractButton.TryCancelInteraction // (Final|Native|Public|BlueprintCallable) // @ game+0x2879190
	void StopGameProgress(int32_t InActionID); // Function Solarland.SolarProgressiveInteractButton.StopGameProgress // (Final|Native|Protected) // @ game+0x2879a80
	void StopCountDownProgress(int32_t InActionID); // Function Solarland.SolarProgressiveInteractButton.StopCountDownProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x28799f0
	void StartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarProgressiveInteractButton.StartCountDownProgress // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28798b0
	void SimpleDynamicMulticastDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarProgressiveInteractButton.SimpleDynamicMulticastDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void ShowPassiveBuff(int32_t CharacterId, int32_t LocalTextId); // Function Solarland.SolarProgressiveInteractButton.ShowPassiveBuff // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshToPreInteract(); // Function Solarland.SolarProgressiveInteractButton.RefreshToPreInteract // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshToNonCancellableInteracting(); // Function Solarland.SolarProgressiveInteractButton.RefreshToNonCancellableInteracting // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshToCancellableInteracting(); // Function Solarland.SolarProgressiveInteractButton.RefreshToCancellableInteracting // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnSteamCancelCountDown(); // Function Solarland.SolarProgressiveInteractButton.OnSteamCancelCountDown // (Final|Native|Protected) // @ game+0x9043b0
	void OnParentVisibilityChanged(bool bVisible); // Function Solarland.SolarProgressiveInteractButton.OnParentVisibilityChanged // (Final|Native|Public) // @ game+0x2879400
	void OnCompleteInternal(); // Function Solarland.SolarProgressiveInteractButton.OnCompleteInternal // (Final|Native|Protected) // @ game+0x28792c0
	void OnCancelButtonClicked(); // Function Solarland.SolarProgressiveInteractButton.OnCancelButtonClicked // (Final|Native|Protected) // @ game+0x2879190
	void HidePassiveBuff(); // Function Solarland.SolarProgressiveInteractButton.HidePassiveBuff // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void EnterCD(float TotalTime, float StartTime); // Function Solarland.SolarProgressiveInteractButton.EnterCD // (Final|Native|Public|BlueprintCallable) // @ game+0x28786e0
	void BP_UpdateStateView(enum class ECountDownState InState); // Function Solarland.SolarProgressiveInteractButton.BP_UpdateStateView // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarProjBullet
// Size: 0x528 (Inherited: 0x388)
struct ASolarProjBullet : ASolarBullet {
	char pad_388[0x18]; // 0x388(0x18)
	struct UShapeComponent* CollisionComp; // 0x3a0(0x08)
	struct UProjectileMovementComponent* MovementComp; // 0x3a8(0x08)
	char pad_3B0[0xa0]; // 0x3b0(0xa0)
	struct FVector SpawnedLocation; // 0x450(0x0c)
	char pad_45C[0x5c]; // 0x45c(0x5c)
	struct UAkComponent* AkAudioComponent; // 0x4b8(0x08)
	struct UParticleSystemComponent* CurrentTrajectoryParticle; // 0x4c0(0x08)
	bool bProjectileStopped; // 0x4c8(0x01)
	char pad_4C9[0xf]; // 0x4c9(0x0f)
	bool bAttachToActorOnStop; // 0x4d8(0x01)
	char pad_4D9[0x3]; // 0x4d9(0x03)
	float DeferExplodeTime; // 0x4dc(0x04)
	float FlySoundPlayDistance; // 0x4e0(0x04)
	bool bForceExplodeOnLifeSpanExpired; // 0x4e4(0x01)
	char pad_4E5[0x3]; // 0x4e5(0x03)
	struct TArray<struct AActor*> HitActorImmediateExplodeArray; // 0x4e8(0x10)
	struct UParticleSystem* ExplosionParticle; // 0x4f8(0x08)
	struct FString ExplosionSoundName; // 0x500(0x10)
	float DeferReleaseTrajectoryParticleTime; // 0x510(0x04)
	float ServerWaitClientTime; // 0x514(0x04)
	struct UGameplayAbility* BulletGameplayAbilityClass; // 0x518(0x08)
	char pad_520[0x8]; // 0x520(0x08)

	void StopSound(enum class EShootingSoundOpt Opt); // Function Solarland.SolarProjBullet.StopSound // (Final|Native|Protected|BlueprintCallable) // @ game+0x2880ee0
	void StartSound(enum class EShootingSoundOpt Opt); // Function Solarland.SolarProjBullet.StartSound // (Final|Native|Protected|BlueprintCallable) // @ game+0x2880e60
	void ReleaseTrajectoryParticle(); // Function Solarland.SolarProjBullet.ReleaseTrajectoryParticle // (Final|Native|Protected) // @ game+0x2880bc0
	void OnTeamIgnoreCollisionActorChange(bool bAdd, struct AActor* InActor, char TeamID); // Function Solarland.SolarProjBullet.OnTeamIgnoreCollisionActorChange // (Final|Native|Protected) // @ game+0x2880990
	void OnStop(struct FHitResult& HitResult); // Function Solarland.SolarProjBullet.OnStop // (Final|Native|Protected|HasOutParms) // @ game+0x28808b0
	void OnRep_ProjectileStopped(); // Function Solarland.SolarProjBullet.OnRep_ProjectileStopped // (Final|Native|Protected) // @ game+0x2880870
	void OnAttachedActorDestroyed(struct AActor* Other); // Function Solarland.SolarProjBullet.OnAttachedActorDestroyed // (Final|Native|Protected) // @ game+0x28800d0
	void K2_OnExplode(); // Function Solarland.SolarProjBullet.K2_OnExplode // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarProjBoxBullet
// Size: 0x530 (Inherited: 0x528)
struct ASolarProjBoxBullet : ASolarProjBullet {
	int32_t BoxBulletIndex; // 0x528(0x04)
	char pad_52C[0x4]; // 0x52c(0x04)
};

// Class Solarland.SolarProjectileMovementComponent
// Size: 0x1d0 (Inherited: 0x1d0)
struct USolarProjectileMovementComponent : UProjectileMovementComponent {
};

// Class Solarland.SolarQuickSummonProxy
// Size: 0x28 (Inherited: 0x28)
struct USolarQuickSummonProxy : UObject {

	bool TryGetSummonHitResult(struct FHitResult& OutHitResult, struct AActor* InSummoner, struct USolarSummonDetectionConfig* InSummonConfig); // Function Solarland.SolarQuickSummonProxy.TryGetSummonHitResult // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2881030
	bool CanSummonForward(struct FHitResult& OutHitResult, struct AActor* InSummoner, struct USolarSummonDetectionConfig* InSummonConfig, struct TArray<float> InDistanceArray, float InUpHeight, float InDownHeight); // Function Solarland.SolarQuickSummonProxy.CanSummonForward // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x287fc30
	bool CanSummonFootDown(struct FHitResult& OutHitResult, struct AActor* InSummoner, struct USolarSummonDetectionConfig* InSummonConfig, float InUpHeight, float InDownHeight); // Function Solarland.SolarQuickSummonProxy.CanSummonFootDown // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x287fa40
	bool CanSummonAround(struct FHitResult& OutHitResult, struct AActor* InSummoner, struct USolarSummonDetectionConfig* InSummonConfig, int32_t InCheckNum, float InRadius, float InUpHeight, float InDownHeight); // Function Solarland.SolarQuickSummonProxy.CanSummonAround // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x287f7d0
};

// Class Solarland.SolarRadarBase
// Size: 0x3f8 (Inherited: 0x228)
struct ASolarRadarBase : AActor {
	enum class ERadarType RadarType; // 0x228(0x01)
	bool bSuperRadar; // 0x229(0x01)
	char SuperRadarMaxCount; // 0x22a(0x01)
	char pad_22B[0x1]; // 0x22b(0x01)
	float EffectRadius; // 0x22c(0x04)
	struct FVector2D EffectSize; // 0x230(0x08)
	bool bTeamShare; // 0x238(0x01)
	bool bNotifyEnemy; // 0x239(0x01)
	char pad_23A[0x2]; // 0x23a(0x02)
	struct FGameplayTag RadarImmunityTag; // 0x23c(0x08)
	char pad_244[0x4]; // 0x244(0x04)
	struct UGameplayEffect* DebuffEffctClass; // 0x248(0x08)
	bool bUniqueExist; // 0x250(0x01)
	bool bDisplayOnMap; // 0x251(0x01)
	char pad_252[0x6]; // 0x252(0x06)
	struct TArray<enum class EActorRegisterType> ScanTargetTypes; // 0x258(0x10)
	bool bShowTowards; // 0x268(0x01)
	bool bMarkPlayer; // 0x269(0x01)
	char pad_26A[0x2]; // 0x26a(0x02)
	float DisplayTime; // 0x26c(0x04)
	float ScanFrequency; // 0x270(0x04)
	char pad_274[0x4]; // 0x274(0x04)
	struct TMap<struct AActor*, struct FRadarDelegateHandle> ProcessingActorsImmunityTagsHandleMap; // 0x278(0x50)
	char pad_2C8[0x50]; // 0x2c8(0x50)
	struct FGameplayAbilitySpecHandle RadarHandle; // 0x318(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)
	bool bPerspectiveInScene; // 0x320(0x01)
	bool bAddWorldMark; // 0x321(0x01)
	char pad_322[0x2]; // 0x322(0x02)
	struct FGameplayCueTag CharacterPerspectiveCueTag; // 0x324(0x08)
	struct FGameplayCueTag CharacterPerspectiveInSmokeCueTag; // 0x32c(0x08)
	char pad_334[0x4]; // 0x334(0x04)
	struct TArray<struct AActor*> PerspectiveedActors; // 0x338(0x10)
	struct TMap<struct AActor*, struct FPerspectiveActorInfo> ProcessingActors; // 0x348(0x50)
	struct TArray<struct FString> OneTimeScannedPlayerIDs; // 0x398(0x10)
	struct TMap<struct ASolarCharacter*, struct FActiveGameplayEffectHandle> ScanNotifiedPlayers; // 0x3a8(0x50)

	void UpdatePerspectiveActor(); // Function Solarland.SolarRadarBase.UpdatePerspectiveActor // (Final|Native|Private) // @ game+0x2881260
	void ToggleWorldMarkByActor(struct AActor* InTargetActor, bool bInAdd); // Function Solarland.SolarRadarBase.ToggleWorldMarkByActor // (Final|Native|Private) // @ game+0x2880f60
	struct FTransform ServerSpawningRadar(struct APawn* RadarOwner, struct ASolarCharacter* RadarInstigator, struct FGameplayAbilitySpecHandle& InRadarHandle, float InLifeTime); // Function Solarland.SolarRadarBase.ServerSpawningRadar // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2880cb0
	void ServerOneTimeScanStart(); // Function Solarland.SolarRadarBase.ServerOneTimeScanStart // (Final|Native|Private) // @ game+0x2880c90
	void RemovePerspectivedCharacter(struct ASolarCharacter* InTargetCharacter); // Function Solarland.SolarRadarBase.RemovePerspectivedCharacter // (Final|Native|Private) // @ game+0x2880be0
	void PerspectOneTimeScannedActor(struct AActor* InActor); // Function Solarland.SolarRadarBase.PerspectOneTimeScannedActor // (Final|Native|Private) // @ game+0x2880aa0
	void PerspectiveTargetCharacter(struct ASolarCharacter* InTargetCharacter); // Function Solarland.SolarRadarBase.PerspectiveTargetCharacter // (Final|Native|Private) // @ game+0x2880b30
	void OnRep_OneTimeScannedPlayerIDs(); // Function Solarland.SolarRadarBase.OnRep_OneTimeScannedPlayerIDs // (Final|Native|Private) // @ game+0x2880850
	void OnPlayerDeath(struct ASolarCharacter* InPlayer); // Function Solarland.SolarRadarBase.OnPlayerDeath // (Final|Native|Private) // @ game+0x28803b0
	void AddPerspectiveDatas(struct AActor* InActor, struct UMeshComponent* InMesh); // Function Solarland.SolarRadarBase.AddPerspectiveDatas // (Final|Native|Private) // @ game+0x287f6d0
};

// Class Solarland.SolarRadarComponent
// Size: 0x1b8 (Inherited: 0xb0)
struct USolarRadarComponent : UActorComponent {
	char pad_B0[0x18]; // 0xb0(0x18)
	struct URadarScanSoundDataAsset* RadarScanSoundDataAsset; // 0xc8(0x08)
	struct UUserWidget* ScannedScreenUIClass; // 0xd0(0x08)
	struct FName ScannedEffectID; // 0xd8(0x08)
	char pad_E0[0x20]; // 0xe0(0x20)
	struct UUserWidget* CreatedScreenUI; // 0x100(0x08)
	struct FTimerHandle DetectedTimerHandle; // 0x108(0x08)
	int32_t TimerHandleCounter; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct TMap<int32_t, struct FTimerHandle> DetectedTimerHandles; // 0x118(0x50)
	struct ASolarCharacter* CharacterOwner; // 0x168(0x08)
	struct TArray<struct FScannedInfo> CurrentScanResults; // 0x170(0x10)
	float CurrentSpanTimer; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct TArray<struct FName> ActivedRadarTags; // 0x188(0x10)
	struct FMaterialChangeHandle DetectedMaterialHandle; // 0x198(0x08)
	char pad_1A0[0x18]; // 0x1a0(0x18)

	void WarningByRadarNotifation(float InRemainingTime); // Function Solarland.SolarRadarComponent.WarningByRadarNotifation // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnRecivedScanResults(); // Function Solarland.SolarRadarComponent.OnRecivedScanResults // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnRecieveOnceScanStart(int32_t ScanedNum, bool bSuperRader); // Function Solarland.SolarRadarComponent.OnRecieveOnceScanStart // (Final|Native|Public) // @ game+0x2880740
	void OnRadarScanStart(struct FRadarDataSpec& RadarDataSpec); // Function Solarland.SolarRadarComponent.OnRadarScanStart // (Final|Native|Public|HasOutParms) // @ game+0x2880660
	void OnRadarScanEnd(struct FRadarDataSpec& RadarDataSpec); // Function Solarland.SolarRadarComponent.OnRadarScanEnd // (Final|Native|Public|HasOutParms) // @ game+0x28805a0
	void OnRadarImmunityTagChanged(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarRadarComponent.OnRadarImmunityTagChanged // (Final|Native|Public) // @ game+0x28804d0
	void OnPlayerDeath(struct ASolarCharacter* InPlayer); // Function Solarland.SolarRadarComponent.OnPlayerDeath // (Final|Native|Public) // @ game+0x2880440
	void OnDetectedByRadar(bool bOnceScan, float InDetectedTime, struct FGameplayTag& InRadarImmunityTag, bool bSuperRader); // Function Solarland.SolarRadarComponent.OnDetectedByRadar // (Final|Native|Public|HasOutParms) // @ game+0x2880160
	void OnceScanSuccessNotifation(int32_t ScanedNum); // Function Solarland.SolarRadarComponent.OnceScanSuccessNotifation // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnceScanFailedNotifation(); // Function Solarland.SolarRadarComponent.OnceScanFailedNotifation // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnAllRadarRemoved(); // Function Solarland.SolarRadarComponent.OnAllRadarRemoved // (Final|Native|Public) // @ game+0x28800b0
	void MarkedByOnceScanNotifation(); // Function Solarland.SolarRadarComponent.MarkedByOnceScanNotifation // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct FString GetModuleName_Implementation(); // Function Solarland.SolarRadarComponent.GetModuleName_Implementation // (Native|Public|Const) // @ game+0x2880000
	void ExposedByRadarNotifation(); // Function Solarland.SolarRadarComponent.ExposedByRadarNotifation // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ChangeDetectedMaterial(bool bInDetected); // Function Solarland.SolarRadarComponent.ChangeDetectedMaterial // (Final|Native|Public) // @ game+0x287fee0
};

// Class Solarland.RadarScanSoundDataAsset
// Size: 0x90 (Inherited: 0x30)
struct URadarScanSoundDataAsset : UDataAsset {
	struct FString RadarScan_Loop_Start; // 0x30(0x10)
	struct FString RadarScan_Loop_End; // 0x40(0x10)
	struct FString RadarScan_Once_Success; // 0x50(0x10)
	struct FString RadarScan_Once_Failed; // 0x60(0x10)
	struct FString SuperRadarScan_FoundEnemy; // 0x70(0x10)
	struct FString SuperRadarScan_FoundByEnemy; // 0x80(0x10)
};

// Class Solarland.SolarRadarStation
// Size: 0x290 (Inherited: 0x238)
struct ASolarRadarStation : ASolarInteractableActor {
	bool bEnable; // 0x238(0x01)
	char pad_239[0x3]; // 0x239(0x03)
	int32_t Zone; // 0x23c(0x04)
	float MaxTirggerDistance; // 0x240(0x04)
	float MaxTirggerAngle; // 0x244(0x04)
	struct FGameplayTag CDTag; // 0x248(0x08)
	bool bBroken; // 0x250(0x01)
	bool bInCD; // 0x251(0x01)
	char pad_252[0x2]; // 0x252(0x02)
	float CoolDownTime; // 0x254(0x04)
	float CostEnergy; // 0x258(0x04)
	float RemainCDTime; // 0x25c(0x04)
	struct USphereComponent* CollisionComp; // 0x260(0x08)
	struct UStaticMeshComponent* NormalMesh; // 0x268(0x08)
	struct USolarObjAbilitySystemComponent* ObjAbilitySystemComp; // 0x270(0x08)
	struct USolarObjGameplayAbility* ObjAbilityClass; // 0x278(0x08)
	struct FGameplayAbilitySpecHandle ObjAbilityHandle; // 0x280(0x04)
	char pad_284[0xc]; // 0x284(0x0c)

	bool TryTriggerRadarStation(struct ASolarCharacter* InUser); // Function Solarland.SolarRadarStation.TryTriggerRadarStation // (Final|Native|Public) // @ game+0x28811c0
	void ServerInitailizeAbility(); // Function Solarland.SolarRadarStation.ServerInitailizeAbility // (Final|Native|Protected) // @ game+0x2880c70
	void OnResetCD(); // Function Solarland.SolarRadarStation.OnResetCD // (Final|Native|Protected) // @ game+0x2880890
	void OnRep_Broken(); // Function Solarland.SolarRadarStation.OnRep_Broken // (Final|Native|Protected) // @ game+0x2880830
	void OnRep_BInCD(); // Function Solarland.SolarRadarStation.OnRep_BInCD // (Final|Native|Protected) // @ game+0x2880810
	void OnRadarStationCDChanged(); // Function Solarland.SolarRadarStation.OnRadarStationCDChanged // (Final|Native|Protected) // @ game+0x2880720
	void OnPlayStartScanEffect(); // Function Solarland.SolarRadarStation.OnPlayStartScanEffect // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnGameplayTagChanged(struct FGameplayTag Tag, bool bAdd); // Function Solarland.SolarRadarStation.OnGameplayTagChanged // (Final|Native|Protected) // @ game+0x28802e0
	void OnClientStartScan(); // Function Solarland.SolarRadarStation.OnClientStartScan // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1ae50f0
	void OnBrokenChanged(bool InBroken); // Function Solarland.SolarRadarStation.OnBrokenChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void InitailizeAbilityParams(); // Function Solarland.SolarRadarStation.InitailizeAbilityParams // (Final|Native|Protected) // @ game+0x2880090
	float GetAbilityReaminingCD(); // Function Solarland.SolarRadarStation.GetAbilityReaminingCD // (Final|Native|Public) // @ game+0x287ffd0
	float GetAbilityCostEnergy(); // Function Solarland.SolarRadarStation.GetAbilityCostEnergy // (Final|Native|Public) // @ game+0x287ffa0
	float GetAbilityCooldown(); // Function Solarland.SolarRadarStation.GetAbilityCooldown // (Final|Native|Public) // @ game+0x287ff70
	bool CanActivateNow(); // Function Solarland.SolarRadarStation.CanActivateNow // (Final|Native|Public) // @ game+0x287f7a0
};

// Class Solarland.SolarRedHintManager
// Size: 0x38 (Inherited: 0x30)
struct USolarRedHintManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarRenderParametersBasedOnDifferentStates
// Size: 0x230 (Inherited: 0x228)
struct ASolarRenderParametersBasedOnDifferentStates : AActor {
	struct UDataTable* StreamingDistanceDataTable; // 0x228(0x08)

	void SetRelativeStreamingDistanceScale(enum class ECharacterSkydivingState InCharacterSkydivingState); // Function Solarland.SolarRenderParametersBasedOnDifferentStates.SetRelativeStreamingDistanceScale // (Final|Native|Public|BlueprintCallable) // @ game+0x2889690
};

// Class Solarland.SolarReplayAutoDirectorComponent
// Size: 0x450 (Inherited: 0xb0)
struct USolarReplayAutoDirectorComponent : UActorComponent {
	char pad_B0[0x40]; // 0xb0(0x40)
	struct TMap<enum class EAutoDirectorActivityType, float> AutoDirectorActivityEventScoreSetting; // 0xf0(0x50)
	char pad_140[0xf8]; // 0x140(0xf8)
	struct TSet<struct ASolarPlayerState*> CurrentAllPlayerInAreaRadius; // 0x238(0x50)
	char pad_288[0x120]; // 0x288(0x120)
	struct TSet<struct FString> NarrateInfoEventIDSet; // 0x3a8(0x50)
	char pad_3F8[0x10]; // 0x3f8(0x10)
	struct TArray<struct FNarrateEventInfoResult> NarrateResultArray; // 0x408(0x10)
	int32_t NextPlayNarrateIndex; // 0x418(0x04)
	char pad_41C[0x4]; // 0x41c(0x04)
	struct FTimerHandle NarratePlayingTimerHandle; // 0x420(0x08)
	char pad_428[0x8]; // 0x428(0x08)
	struct FString CurrentBattleFilePath; // 0x430(0x10)
	struct UMediaSoundComponent* MediaSoundComponent; // 0x440(0x08)
	char pad_448[0x8]; // 0x448(0x08)

	void UpdatePlayingNarrateActivityEvent(); // Function Solarland.SolarReplayAutoDirectorComponent.UpdatePlayingNarrateActivityEvent // (Final|Native|Private) // @ game+0x2889aa0
	void UpdateCamera(); // Function Solarland.SolarReplayAutoDirectorComponent.UpdateCamera // (Final|Native|Private) // @ game+0x2889a60
	void TryPlayNextNode(); // Function Solarland.SolarReplayAutoDirectorComponent.TryPlayNextNode // (Final|Native|Private) // @ game+0x2889a40
	void SetCommentActive(bool bNewActive); // Function Solarland.SolarReplayAutoDirectorComponent.SetCommentActive // (Final|Native|Public) // @ game+0x2889450
	void OnScrubStart(); // Function Solarland.SolarReplayAutoDirectorComponent.OnScrubStart // (Final|Native|Private) // @ game+0x2888c00
	void OnScrubFinished(); // Function Solarland.SolarReplayAutoDirectorComponent.OnScrubFinished // (Final|Native|Private) // @ game+0x2888be0
	void OnScoutPlayerWorkComplete(); // Function Solarland.SolarReplayAutoDirectorComponent.OnScoutPlayerWorkComplete // (Final|Native|Private) // @ game+0x2888bc0
	void OnReplayCameraBlocked(); // Function Solarland.SolarReplayAutoDirectorComponent.OnReplayCameraBlocked // (Final|Native|Private) // @ game+0x2888ae0
	void OnReceiveKillInfoNotify(struct ASolarPlayerState* SourcePlayerState, struct ASolarPlayerState* TargetPlayerState, struct FSolarPointDamageEvent& PointDamageEvent); // Function Solarland.SolarReplayAutoDirectorComponent.OnReceiveKillInfoNotify // (Final|Native|Public|HasOutParms) // @ game+0x2888990
	void OnPreFreeCameraFinished(); // Function Solarland.SolarReplayAutoDirectorComponent.OnPreFreeCameraFinished // (Final|Native|Private) // @ game+0x2888970
	void OnPlayingPause(); // Function Solarland.SolarReplayAutoDirectorComponent.OnPlayingPause // (Final|Native|Private) // @ game+0x2888910
	void OnPlayingContinue(); // Function Solarland.SolarReplayAutoDirectorComponent.OnPlayingContinue // (Final|Native|Private) // @ game+0x2888840
	void OnPlayerTakeDamage(struct ASolarPlayerState* SourcePlayerState, struct ASolarPlayerState* TargetPlayerState, struct FSolarPointDamageEvent& DamageEvent); // Function Solarland.SolarReplayAutoDirectorComponent.OnPlayerTakeDamage // (Final|Native|Public|HasOutParms) // @ game+0x2888660
	void OnPlayerStartSkydive(struct ASolarCharacter* Character, enum class ESkydiveStage LastStage, enum class ESkydiveStage CurrentStage); // Function Solarland.SolarReplayAutoDirectorComponent.OnPlayerStartSkydive // (Final|Native|Public) // @ game+0x28883b0
	void OnPlayerResurrectTeammate(struct ASolarCharacter* ImplementResurrectionCharacter); // Function Solarland.SolarReplayAutoDirectorComponent.OnPlayerResurrectTeammate // (Final|Native|Public) // @ game+0x2888320
	void OnPlayerRescueTeammate(struct ASolarCharacter* ImplementRescueCharacter, struct ASolarCharacter* BeingRescuedCharacter); // Function Solarland.SolarReplayAutoDirectorComponent.OnPlayerRescueTeammate // (Final|Native|Public) // @ game+0x2888250
	void OnPlayerPickupItem(struct ASolarCharacter* Character, struct AActor* PickupItem); // Function Solarland.SolarReplayAutoDirectorComponent.OnPlayerPickupItem // (Final|Native|Public) // @ game+0x2888180
	void OnPlayerActiveRoleAbility(struct ASolarCharacter* Character, char AbilityIndex); // Function Solarland.SolarReplayAutoDirectorComponent.OnPlayerActiveRoleAbility // (Final|Native|Public) // @ game+0x28880b0
	void OnGameVictoryChanged(); // Function Solarland.SolarReplayAutoDirectorComponent.OnGameVictoryChanged // (Final|Native|Public) // @ game+0x2887f90
	void OnCheckPlayerOut(struct ASCMPlayerState* PlayerState, enum class ESCMPlayerOutType OutType); // Function Solarland.SolarReplayAutoDirectorComponent.OnCheckPlayerOut // (Final|Native|Public) // @ game+0x2887ec0
	void OnCharacterGetOnVehicle(struct ASolarCharacter* Character, struct APawn* Vehicle); // Function Solarland.SolarReplayAutoDirectorComponent.OnCharacterGetOnVehicle // (Final|Native|Public) // @ game+0x2887df0
	void EnumerateAutoDirectorNodeInfo(); // Function Solarland.SolarReplayAutoDirectorComponent.EnumerateAutoDirectorNodeInfo // (Final|Native|Private) // @ game+0x2887560
};

// Class Solarland.SolarReplayCameraMovementFree
// Size: 0x50 (Inherited: 0x28)
struct USolarReplayCameraMovementFree : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct ASolarSpectatorPawn* SpectatorPawn; // 0x30(0x08)
	char pad_38[0x18]; // 0x38(0x18)
};

// Class Solarland.SolarReplayCameraMovementLock
// Size: 0x48 (Inherited: 0x28)
struct USolarReplayCameraMovementLock : UObject {
	char pad_28[0x20]; // 0x28(0x20)
};

// Class Solarland.SolarReplayCameraBase
// Size: 0x30 (Inherited: 0x28)
struct USolarReplayCameraBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.SolarReplayCameraFocusSinglePlayer
// Size: 0x50 (Inherited: 0x30)
struct USolarReplayCameraFocusSinglePlayer : USolarReplayCameraBase {
	struct FReplayFindSpectateTargetParams FindSpectateTargetParams; // 0x30(0x18)
	struct ASolarPlayerState* Target; // 0x48(0x08)
};

// Class Solarland.SolarReplayCameraThirdPerson
// Size: 0x50 (Inherited: 0x50)
struct USolarReplayCameraThirdPerson : USolarReplayCameraFocusSinglePlayer {
};

// Class Solarland.SolarReplayCameraLock
// Size: 0x58 (Inherited: 0x50)
struct USolarReplayCameraLock : USolarReplayCameraFocusSinglePlayer {
	struct USolarReplayCameraMovementLock* Movement; // 0x50(0x08)
};

// Class Solarland.SolarReplayCameraFreeLookAt
// Size: 0x68 (Inherited: 0x50)
struct USolarReplayCameraFreeLookAt : USolarReplayCameraFocusSinglePlayer {
	struct USolarReplayCameraMovementFree* Movement; // 0x50(0x08)
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Solarland.SolarReplayCameraFree
// Size: 0x38 (Inherited: 0x30)
struct USolarReplayCameraFree : USolarReplayCameraBase {
	struct USolarReplayCameraMovementFree* Movement; // 0x30(0x08)
};

// Class Solarland.SolarReplayCameraLookAtMovablePoint
// Size: 0x90 (Inherited: 0x30)
struct USolarReplayCameraLookAtMovablePoint : USolarReplayCameraBase {
	char pad_30[0x40]; // 0x30(0x40)
	struct TArray<struct FSolarActorGroupOfReplayCamera> ActorGroups; // 0x70(0x10)
	char pad_80[0x10]; // 0x80(0x10)
};

// Class Solarland.SolarReplayCameraLookAt
// Size: 0xa0 (Inherited: 0x90)
struct USolarReplayCameraLookAt : USolarReplayCameraLookAtMovablePoint {
	char pad_90[0x10]; // 0x90(0x10)
};

// Class Solarland.SolarReplayCameraCircular
// Size: 0x98 (Inherited: 0x90)
struct USolarReplayCameraCircular : USolarReplayCameraLookAtMovablePoint {
	char pad_90[0x8]; // 0x90(0x08)
};

// Class Solarland.SolarReplayCameraControlComp
// Size: 0x1a0 (Inherited: 0xb0)
struct USolarReplayCameraControlComp : UActorComponent {
	struct FMulticastInlineDelegate OnReplayCameraModeChanged; // 0xb0(0x10)
	char pad_C0[0x30]; // 0xc0(0x30)
	struct ASolarSpectateInfo* ReplayPCSpectateInfo; // 0xf0(0x08)
	float DefaultSpeed; // 0xf8(0x04)
	float MoveSpeedChangeStep; // 0xfc(0x04)
	float MoveSpeedMin; // 0x100(0x04)
	float MoveSpeedMax; // 0x104(0x04)
	float SpeedUpScale; // 0x108(0x04)
	float DefaultTurnRate; // 0x10c(0x04)
	float TurnRateChangeStep; // 0x110(0x04)
	float TurnSpeedMin; // 0x114(0x04)
	float TurnSpeedMax; // 0x118(0x04)
	float DistanceChangeStep; // 0x11c(0x04)
	struct USolarReplayCameraBase* ReplayCamera; // 0x120(0x08)
	char pad_128[0x8]; // 0x128(0x08)
	struct ASolarPlayerState* LastTarget; // 0x130(0x08)
	char pad_138[0x10]; // 0x138(0x10)
	struct TMap<enum class EReplayCameraMode, struct USolarReplayCameraBase*> CacheCameras; // 0x148(0x50)
	char pad_198[0x8]; // 0x198(0x08)

	void OnStreamingReadied(); // Function Solarland.SolarReplayCameraControlComp.OnStreamingReadied // (Final|Native|Private) // @ game+0x2888cb0
	void OnSpectateInfoRep(struct ASolarSpectateInfo* InSpecInfo); // Function Solarland.SolarReplayCameraControlComp.OnSpectateInfoRep // (Final|Native|Private) // @ game+0x2888c20
	void OnReplayCameraModeChanged__DelegateSignature(enum class EReplayCameraMode OldMode, enum class EReplayCameraMode CurMode); // DelegateFunction Solarland.SolarReplayCameraControlComp.OnReplayCameraModeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnPlayingScrubStart(); // Function Solarland.SolarReplayCameraControlComp.OnPlayingScrubStart // (Final|Native|Private) // @ game+0x2888950
	void OnPlayingScrubCharactersCreated(); // Function Solarland.SolarReplayCameraControlComp.OnPlayingScrubCharactersCreated // (Final|Native|Private) // @ game+0x2888930
	void OnPlayingFirstScrubFinished(); // Function Solarland.SolarReplayCameraControlComp.OnPlayingFirstScrubFinished // (Final|Native|Private) // @ game+0x28888f0
	enum class EReplayCameraMode GetReplayCameraMode(); // Function Solarland.SolarReplayCameraControlComp.GetReplayCameraMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28876f0
	void ChangeLockSpectatorModeDistance(float val); // Function Solarland.SolarReplayCameraControlComp.ChangeLockSpectatorModeDistance // (Final|Native|Public) // @ game+0x28873a0
};

// Class Solarland.SolarReplayHighlightComponent
// Size: 0x130 (Inherited: 0xb0)
struct USolarReplayHighlightComponent : UActorComponent {
	char pad_B0[0x38]; // 0xb0(0x38)
	float RecordAfterSettled; // 0xe8(0x04)
	float SlowMoStartTime; // 0xec(0x04)
	float SlowMoEndTime; // 0xf0(0x04)
	float SlowMoMultiplier; // 0xf4(0x04)
	float KillEffectTime; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct UOBHighlightOverviewWidget* HighlightOverviewWidget; // 0x100(0x08)
	char pad_108[0x28]; // 0x108(0x28)

	void ReceiveHighlightOverviewData(struct FPlayerHighlightOverview& OverviewData); // Function Solarland.SolarReplayHighlightComponent.ReceiveHighlightOverviewData // (Final|Native|Private|HasOutParms) // @ game+0x2889250
	void ReceiveHighlightData(struct FString PlayerId, struct FReplayActivityHeatFragment& NewFragment); // Function Solarland.SolarReplayHighlightComponent.ReceiveHighlightData // (Final|Native|Private|HasOutParms) // @ game+0x2889130
	void OnReplayWidgetTranslatePlayEndOver(); // Function Solarland.SolarReplayHighlightComponent.OnReplayWidgetTranslatePlayEndOver // (Final|Native|Private) // @ game+0x2888ba0
	void OnReplayWidgetTranslatePlayBeginOver(); // Function Solarland.SolarReplayHighlightComponent.OnReplayWidgetTranslatePlayBeginOver // (Final|Native|Private) // @ game+0x2888b80
	void OnReplayWidgetOverviewPlayEnd(); // Function Solarland.SolarReplayHighlightComponent.OnReplayWidgetOverviewPlayEnd // (Final|Native|Private) // @ game+0x2888b60
	void OnReplayWidgetHighlightPlayEnd(); // Function Solarland.SolarReplayHighlightComponent.OnReplayWidgetHighlightPlayEnd // (Final|Native|Private) // @ game+0x2888b40
	void OnReplayScrubStarted(); // Function Solarland.SolarReplayHighlightComponent.OnReplayScrubStarted // (Final|Native|Private) // @ game+0x2888b20
	void OnReplayScrubFinished(); // Function Solarland.SolarReplayHighlightComponent.OnReplayScrubFinished // (Final|Native|Private) // @ game+0x2888b00
	void OnReplayPaused(); // Function Solarland.SolarReplayHighlightComponent.OnReplayPaused // (Final|Native|Private) // @ game+0x9043b0
	void OnReplayContinued(); // Function Solarland.SolarReplayHighlightComponent.OnReplayContinued // (Final|Native|Private) // @ game+0x9043b0
	struct UUISubsystem* GetUISubSystem(); // Function Solarland.SolarReplayHighlightComponent.GetUISubSystem // (Final|Native|Private|Const) // @ game+0x28877b0
	struct USolarReplayManager* GetReplayManager(); // Function Solarland.SolarReplayHighlightComponent.GetReplayManager // (Final|Native|Private|Const) // @ game+0x2887720
	void CalcMarkType(float& Score, enum class EPlayerHighlightMarkType& OutType, struct FString& OutName); // Function Solarland.SolarReplayHighlightComponent.CalcMarkType // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887250
};

// Class Solarland.SolarReplayManager
// Size: 0x5c0 (Inherited: 0x28)
struct USolarReplayManager : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	struct FSoftObjectPath WaitingOBMap; // 0x40(0x18)
	struct FSoftClassPath WaitingReplayStartUIClass; // 0x58(0x18)
	struct FSoftClassPath OBModeSpectatorPawnClass; // 0x70(0x18)
	struct FSoftClassPath OBModeHUDClass; // 0x88(0x18)
	struct FSoftClassPath OBHeadInfoWidgetClass; // 0xa0(0x18)
	struct FGameplayCueTag PerspectiveCueTag; // 0xb8(0x08)
	struct FGameplayCueTag PerspectiveInSmokeCueTag; // 0xc0(0x08)
	struct FSoftObjectPath PerspectiveMaterial; // 0xc8(0x18)
	struct FAddMultiplePassMaterialChangeParams PerspectiveMaterialParams; // 0xe0(0x40)
	struct FSoftClassPath DirectorModeSpectatorPawnClass; // 0x120(0x18)
	struct FName DirectorModeInputModeName; // 0x138(0x08)
	float UpdateDistanceInterval; // 0x140(0x04)
	float OBTeamListNearbyDistance; // 0x144(0x04)
	float OBHeadInfoNearDistance; // 0x148(0x04)
	float OBHeadInfoFarDistance; // 0x14c(0x04)
	float OBDamageTextHideDistance; // 0x150(0x04)
	float OBDelayTimeForTournament; // 0x154(0x04)
	float OBLivePreDownloadTime; // 0x158(0x04)
	float OBSkipBeginningTime; // 0x15c(0x04)
	struct TArray<float> OBPlaybackSpeedList; // 0x160(0x10)
	char OBPlaybackSpeedDefaultIndex; // 0x170(0x01)
	char OBLiveDelayChunkCount; // 0x171(0x01)
	char pad_172[0x2]; // 0x172(0x02)
	struct FName OBLockCameraBindBoneName; // 0x174(0x08)
	struct FVector OBLockCameraBindBoneOffset; // 0x17c(0x0c)
	float OBInitLockDistance; // 0x188(0x04)
	float OBMinLockDistance; // 0x18c(0x04)
	float OBMaxLockDistance; // 0x190(0x04)
	float OBMinLockPitch; // 0x194(0x04)
	float OBMaxLockPitch; // 0x198(0x04)
	float OBPitchAdjustTriggerFloor; // 0x19c(0x04)
	float OBPitchAdjustValue; // 0x1a0(0x04)
	int32_t ReplayCacheFileRetentionTimeInSeconds; // 0x1a4(0x04)
	int32_t HighlightFileRetentionTimeInSeconds; // 0x1a8(0x04)
	int32_t HighlightFileMaxCount; // 0x1ac(0x04)
	int32_t HighlightMinimalDiskSpaceInMB; // 0x1b0(0x04)
	char pad_1B4[0x4]; // 0x1b4(0x04)
	struct TArray<int32_t> EnableHighlightModeGroups; // 0x1b8(0x10)
	struct FSoftClassPath AutoDirectorComponentClass; // 0x1c8(0x18)
	char pad_1E0[0x8]; // 0x1e0(0x08)
	struct FMulticastInlineDelegate OnPlayingStartedDelegate; // 0x1e8(0x10)
	struct FMulticastInlineDelegate OnPlayingLoadLevelsStartedDelegate; // 0x1f8(0x10)
	struct FMulticastInlineDelegate OnPlayingLevelLoadedDelegate; // 0x208(0x10)
	struct FMulticastInlineDelegate OnPlayingStreamReadiedDelegate; // 0x218(0x10)
	struct FMulticastInlineDelegate OnPlayingAtEndDelegate; // 0x228(0x10)
	struct FMulticastInlineDelegate OnPlayingFinishedDelegate; // 0x238(0x10)
	struct FMulticastInlineDelegate OnRecordingStartedDelegate; // 0x248(0x10)
	struct FMulticastInlineDelegate OnRecordingStartFailedDelegate; // 0x258(0x10)
	struct FMulticastInlineDelegate OnRecordingFinishedDelegate; // 0x268(0x10)
	struct FMulticastInlineDelegate OnPlayingScrubStartDelegate; // 0x278(0x10)
	struct FMulticastInlineDelegate OnPlayingPreScrubDelegate; // 0x288(0x10)
	struct FMulticastInlineDelegate OnPlayingFirstScrubFinishedDelegate; // 0x298(0x10)
	struct FMulticastInlineDelegate OnPlayingScrubFailedDelegate; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnPlayingScrubCharactersCreatedDelegate; // 0x2b8(0x10)
	struct FMulticastInlineDelegate OnPlayingPauseDelegate; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnPlayingContinueDelegate; // 0x2d8(0x10)
	struct FMulticastInlineDelegate OnPlaybackSpeedChangedDelegate; // 0x2e8(0x10)
	struct FMulticastInlineDelegate OnCheatersPlayerIDChanged; // 0x2f8(0x10)
	struct FMulticastInlineDelegate OnAutoPlaybackSpeedUpStart; // 0x308(0x10)
	struct FMulticastInlineDelegate OnAutoPlaybackSpeedUpStop; // 0x318(0x10)
	char pad_328[0x40]; // 0x328(0x40)
	struct FMulticastInlineDelegate OnHighlightListChanged; // 0x368(0x10)
	char pad_378[0xb0]; // 0x378(0xb0)
	struct UUserWidget* WaitingReplayStartUI; // 0x428(0x08)
	char pad_430[0x190]; // 0x430(0x190)

	void WriteHeaderData(struct TArray<struct FString>& OutHeaderData); // Function Solarland.SolarReplayManager.WriteHeaderData // (Native|Protected|HasOutParms) // @ game+0x2889ac0
	void UpdateHighlightInfos(); // Function Solarland.SolarReplayManager.UpdateHighlightInfos // (Final|Native|Private|BlueprintCallable) // @ game+0x2889a80
	void StopRecording(); // Function Solarland.SolarReplayManager.StopRecording // (Final|Native|Public|BlueprintCallable) // @ game+0x2889a20
	void StopPlayReplay(); // Function Solarland.SolarReplayManager.StopPlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x2889a00
	void StartRecording(struct FString SessionName, struct FString UploadUrl, enum class ERecordingType ForceRecordingType); // Function Solarland.SolarReplayManager.StartRecording // (Final|Native|Public|BlueprintCallable) // @ game+0x28898c0
	void StartRecordHighlightOfCurrentBattle(struct FString SessionNameOverride); // Function Solarland.SolarReplayManager.StartRecordHighlightOfCurrentBattle // (Final|Native|Public|BlueprintCallable) // @ game+0x2889820
	void SpeedUpTimeDilation(); // Function Solarland.SolarReplayManager.SpeedUpTimeDilation // (Final|Native|Public|BlueprintCallable) // @ game+0x2889800
	void SlowDownTimeDilation(); // Function Solarland.SolarReplayManager.SlowDownTimeDilation // (Final|Native|Public|BlueprintCallable) // @ game+0x28897e0
	bool ShouldShowProgressBar(); // Function Solarland.SolarReplayManager.ShouldShowProgressBar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28897b0
	void SetTimeDilation(float Dilation); // Function Solarland.SolarReplayManager.SetTimeDilation // (Final|Native|Public|BlueprintCallable) // @ game+0x2889730
	void SetStartSpectateTournamentTime(); // Function Solarland.SolarReplayManager.SetStartSpectateTournamentTime // (Final|Native|Public|BlueprintCallable) // @ game+0x2889710
	void SetRequestTryStrategy(float Interval, int32_t Times); // Function Solarland.SolarReplayManager.SetRequestTryStrategy // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetRecordingType(enum class ERecordingType InRecordingType); // Function Solarland.SolarReplayManager.SetRecordingType // (Final|Native|Private|BlueprintCallable) // @ game+0x2889610
	void SetReadyToRecord(bool bIsReady, struct TArray<struct FString>& OBPlayerIDs); // Function Solarland.SolarReplayManager.SetReadyToRecord // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetLiveWatchingPlayerForPlaying(struct FString BeWatchingPlayerID); // Function Solarland.SolarReplayManager.SetLiveWatchingPlayerForPlaying // (Final|Native|Protected|BlueprintCallable) // @ game+0x2889570
	void SetEnableCompressForHttpReplay(bool bEnable); // Function Solarland.SolarReplayManager.SetEnableCompressForHttpReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x28894e0
	void SendLiveWatchOnlyMsg(struct FString Msg); // Function Solarland.SolarReplayManager.SendLiveWatchOnlyMsg // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RetryPlayReplayFromServer(); // Function Solarland.SolarReplayManager.RetryPlayReplayFromServer // (Final|Native|Public|BlueprintCallable) // @ game+0x2889430
	void ResetTimeDilation(); // Function Solarland.SolarReplayManager.ResetTimeDilation // (Final|Native|Public|BlueprintCallable) // @ game+0x2889410
	void RequestWatchingLiveOfPlayer(struct FString SolarPlayerID); // Function Solarland.SolarReplayManager.RequestWatchingLiveOfPlayer // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RequestPlayReplayOfCurrentBattle(); // Function Solarland.SolarReplayManager.RequestPlayReplayOfCurrentBattle // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RequestPlayReplay(struct FString InBattleID, bool IsLive); // Function Solarland.SolarReplayManager.RequestPlayReplay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RequestCheckpointForLiveWatch(); // Function Solarland.SolarReplayManager.RequestCheckpointForLiveWatch // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void RequestBattleList(int32_t PageIndex, int32_t PageSize); // Function Solarland.SolarReplayManager.RequestBattleList // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReportHighlightConversion(struct FHighlightReportData HighlightReportData); // Function Solarland.SolarReplayManager.ReportHighlightConversion // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReplayManagerNoParamDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarReplayManager.ReplayManagerNoParamDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void RecordReplayInfosOnRecordingStarted(); // Function Solarland.SolarReplayManager.RecordReplayInfosOnRecordingStarted // (Final|Native|Private|BlueprintCallable) // @ game+0x28893f0
	void ReceivePlayingStartFailed(); // Function Solarland.SolarReplayManager.ReceivePlayingStartFailed // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool ReceivePlayingFinished(enum class EReplayPlayingFinishReason reason, char StreamerErrorCode, struct FString StreamerErrorMsg); // Function Solarland.SolarReplayManager.ReceivePlayingFinished // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveLiveWatchOnlyMsg(struct FLiveWatchOnlyMsg& Msg); // Function Solarland.SolarReplayManager.ReceiveLiveWatchOnlyMsg // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2889300
	void ProcessHeaderData(struct TArray<struct FString>& HeaderData, struct FString& Error); // Function Solarland.SolarReplayManager.ProcessHeaderData // (Native|Protected|HasOutParms) // @ game+0x2888ff0
	void PlayReplayFromServer(struct FString SessionName, struct FString DownloadUrl); // Function Solarland.SolarReplayManager.PlayReplayFromServer // (Final|Native|Public|BlueprintCallable) // @ game+0x2888ed0
	void PlayReplayFromLocal(struct FString ReplayFileName); // Function Solarland.SolarReplayManager.PlayReplayFromLocal // (Final|Native|Public|BlueprintCallable) // @ game+0x2888de0
	void PlayingFinishedInternal(); // Function Solarland.SolarReplayManager.PlayingFinishedInternal // (Final|Native|Private|BlueprintCallable) // @ game+0x2888fd0
	void PlayHighlight(struct FString InBattleID, enum class EPlayHighlightEntryType& EntryType); // Function Solarland.SolarReplayManager.PlayHighlight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2888cf0
	void PausePlayReplay(); // Function Solarland.SolarReplayManager.PausePlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x2888cd0
	void OnPlayingFinished(struct UWorld* World); // Function Solarland.SolarReplayManager.OnPlayingFinished // (Final|Native|Private) // @ game+0x2888860
	void OnPlayingAtEnd(struct UWorld* World); // Function Solarland.SolarReplayManager.OnPlayingAtEnd // (Final|Native|Private) // @ game+0x28887b0
	void OnPlayerStopWatchingLive(struct FString StopWatchingPlayerID); // Function Solarland.SolarReplayManager.OnPlayerStopWatchingLive // (Final|Native|Protected|BlueprintCallable) // @ game+0x28885c0
	void OnPlayerStartWatchingLive(struct FString RequestWatchingPlayerID, struct FString BeWatchingPlayerID); // Function Solarland.SolarReplayManager.OnPlayerStartWatchingLive // (Final|Native|Protected|BlueprintCallable) // @ game+0x28884c0
	void OnLocalStreamerFinishedWriting(struct FString StreamName, struct FString FullReplayFile); // Function Solarland.SolarReplayManager.OnLocalStreamerFinishedWriting // (Final|Native|Private) // @ game+0x2887fb0
	void OnLiveWatchTargetLost(); // Function Solarland.SolarReplayManager.OnLiveWatchTargetLost // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void NotifyTournamentSpectate(bool bIsInLiveReplay); // Function Solarland.SolarReplayManager.NotifyTournamentSpectate // (Final|Native|Public|BlueprintCallable) // @ game+0x2887d60
	bool NotifyBackendPlayReplayFinished(); // Function Solarland.SolarReplayManager.NotifyBackendPlayReplayFinished // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void LuaOnPostLoadMapWithWorld(struct FString LevelName); // Function Solarland.SolarReplayManager.LuaOnPostLoadMapWithWorld // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void LuaBindDelegates(); // Function Solarland.SolarReplayManager.LuaBindDelegates // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool IsTournament(); // Function Solarland.SolarReplayManager.IsTournament // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887d30
	bool IsScrubing(); // Function Solarland.SolarReplayManager.IsScrubing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887d00
	bool IsRequestingReplayDownloadInfo(); // Function Solarland.SolarReplayManager.IsRequestingReplayDownloadInfo // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool IsReplayLive(); // Function Solarland.SolarReplayManager.IsReplayLive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887cd0
	bool IsRecordingHighlight(); // Function Solarland.SolarReplayManager.IsRecordingHighlight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887ca0
	bool IsRecording(); // Function Solarland.SolarReplayManager.IsRecording // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887c70
	bool IsReady(); // Function Solarland.SolarReplayManager.IsReady // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool IsPlayingHighlight(); // Function Solarland.SolarReplayManager.IsPlayingHighlight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887c40
	bool IsPlaying(); // Function Solarland.SolarReplayManager.IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887c10
	bool IsPlayerBeWatching(struct FString SolarPlayerID); // Function Solarland.SolarReplayManager.IsPlayerBeWatching // (Final|Native|Public|BlueprintCallable) // @ game+0x2887b60
	bool IsPausing(); // Function Solarland.SolarReplayManager.IsPausing // (Final|Native|Public|BlueprintCallable) // @ game+0x2887b30
	bool IsLocal(); // Function Solarland.SolarReplayManager.IsLocal // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887b00
	bool IsLiveWatchOnly(); // Function Solarland.SolarReplayManager.IsLiveWatchOnly // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887ad0
	bool IsInState(enum class EReplayManagerState CheckState); // Function Solarland.SolarReplayManager.IsInState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887a40
	bool IsHighlightVersionOut(struct FString HighlightFileName); // Function Solarland.SolarReplayManager.IsHighlightVersionOut // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool IsAutoDirecting(); // Function Solarland.SolarReplayManager.IsAutoDirecting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887a10
	bool IsAutoDirectDataReady(); // Function Solarland.SolarReplayManager.IsAutoDirectDataReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28879e0
	bool IsACheater(struct FString PlayerId); // Function Solarland.SolarReplayManager.IsACheater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887930
	void IgnoreTournamentDelayTimeForNextPlay(); // Function Solarland.SolarReplayManager.IgnoreTournamentDelayTimeForNextPlay // (Final|Native|Public|BlueprintCallable) // @ game+0x2887910
	bool HasHighlight(struct FString InBattleID); // Function Solarland.SolarReplayManager.HasHighlight // (Final|Native|Public|BlueprintCallable) // @ game+0x2887860
	void GotoTimeInSecond(float Second); // Function Solarland.SolarReplayManager.GotoTimeInSecond // (Final|Native|Public|BlueprintCallable) // @ game+0x28877e0
	float GetTotalSessionTimeInSecond(); // Function Solarland.SolarReplayManager.GetTotalSessionTimeInSecond // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887780
	float GetTimeDilation(); // Function Solarland.SolarReplayManager.GetTimeDilation // (Final|Native|Public|BlueprintCallable) // @ game+0x2887750
	void GetStartRecordingParams(struct FStartRecordingParams& OutParams); // Function Solarland.SolarReplayManager.GetStartRecordingParams // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	enum class ERecordingType GetRecordingType(); // Function Solarland.SolarReplayManager.GetRecordingType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28876d0
	enum class EPlayHighlightEntryType GetHighlightEntryType(); // Function Solarland.SolarReplayManager.GetHighlightEntryType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28876b0
	float GetCurrentSessionTimeInSecond(); // Function Solarland.SolarReplayManager.GetCurrentSessionTimeInSecond // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887680
	struct FString GetCurrentSessionName(); // Function Solarland.SolarReplayManager.GetCurrentSessionName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28875c0
	struct FString GetBeWatchingPlayerID(); // Function Solarland.SolarReplayManager.GetBeWatchingPlayerID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2887580
	struct FString GetBattleIDByIndex(int32_t Index); // Function Solarland.SolarReplayManager.GetBattleIDByIndex // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void EnterSettlementStage(); // Function Solarland.SolarReplayManager.EnterSettlementStage // (Final|Native|Public|BlueprintCallable) // @ game+0x2887540
	void DestroyWaitingOBStartUI(); // Function Solarland.SolarReplayManager.DestroyWaitingOBStartUI // (Final|Native|Private|BlueprintCallable) // @ game+0x2887520
	void DebugAllPlayerIsBeWatching(bool bAllPlayerIsBeWatching); // Function Solarland.SolarReplayManager.DebugAllPlayerIsBeWatching // (Final|Native|Protected|BlueprintCallable) // @ game+0x2887490
	void CreateWaitingOBStartUI(); // Function Solarland.SolarReplayManager.CreateWaitingOBStartUI // (Final|Native|Private|BlueprintCallable) // @ game+0x2887470
	void ContinuePlayReplay(); // Function Solarland.SolarReplayManager.ContinuePlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x2887450
	bool CheckMemoryCanPlayReplay(); // Function Solarland.SolarReplayManager.CheckMemoryCanPlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x2887420
	void AppendCheatersPlayerID(struct TArray<struct FString>& InCheatersPlayerID); // Function Solarland.SolarReplayManager.AppendCheatersPlayerID // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x2887180
};

// Class Solarland.SolarReplayPerspectiveEffect
// Size: 0x1a8 (Inherited: 0x160)
struct USolarReplayPerspectiveEffect : UMaterialEffectBase {
	char pad_160[0x48]; // 0x160(0x48)
};

// Class Solarland.SolarReplayPerspectiveInSmokeEffect
// Size: 0x1a8 (Inherited: 0x1a8)
struct USolarReplayPerspectiveInSmokeEffect : USolarReplayPerspectiveEffect {
};

// Class Solarland.SolarReplayPlayerController
// Size: 0xf58 (Inherited: 0xe48)
struct ASolarReplayPlayerController : ASolarPlayerController {
	float WaitFirstTeamNumberInputTime; // 0xe48(0x04)
	float WaitTeamNumberInputTime; // 0xe4c(0x04)
	struct USolarReplayCameraControlComp* SolarReplayCameraControlComp; // 0xe50(0x08)
	struct USolarReplayHighlightComponent* SolarReplayHighlightComponent; // 0xe58(0x08)
	struct USolarReplayAutoDirectorComponent* SolarReplayAutoDirectorComponent; // 0xe60(0x08)
	struct FMulticastInlineDelegate OnEmitBulletDelegate; // 0xe68(0x10)
	struct TMap<struct FString, float> HorizontalDistanceBetweenPlayerAndOBCamera; // 0xe78(0x50)
	struct USolarReplayManager* ReplayManager; // 0xec8(0x08)
	struct UDemoNetDriver* DemoNetDriver; // 0xed0(0x08)
	char pad_ED8[0x20]; // 0xed8(0x20)
	struct TMap<char, struct UMaterialInstanceDynamic*> TeamNumToPerspectiveMaterialMap; // 0xef8(0x50)
	char pad_F48[0x10]; // 0xf48(0x10)

	void UpdateDistanceBetweenOBCamAndPlayer(); // Function Solarland.SolarReplayPlayerController.UpdateDistanceBetweenOBCamAndPlayer // (Final|Native|Private) // @ game+0x288e190
	void StopSpectatePlayer(); // Function Solarland.SolarReplayPlayerController.StopSpectatePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x288e080
	void StopPlayReplay(); // Function Solarland.SolarReplayPlayerController.StopPlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x288e060
	void SpectateVictim(); // Function Solarland.SolarReplayPlayerController.SpectateVictim // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x288e040
	void SpectatePlayerByPlayerID(struct FString SolarPlayerID); // Function Solarland.SolarReplayPlayerController.SpectatePlayerByPlayerID // (Final|Native|Public|BlueprintCallable) // @ game+0x288dfa0
	void SpectateAttacker(); // Function Solarland.SolarReplayPlayerController.SpectateAttacker // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x288df80
	void SolarGM_ToggleProgressControlButton(); // Function Solarland.SolarReplayPlayerController.SolarGM_ToggleProgressControlButton // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void SolarGM_SetWatchingLiveTarget(struct FString InPlayerID); // Function Solarland.SolarReplayPlayerController.SolarGM_SetWatchingLiveTarget // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x277cdc0
	void SolarGM_ReplayDebugLog(bool bOpenDebugLog); // Function Solarland.SolarReplayPlayerController.SolarGM_ReplayDebugLog // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x26446a0
	void ShowDamageText(struct TArray<struct FSolarDamageText>& InDamageTexts); // Function Solarland.SolarReplayPlayerController.ShowDamageText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x288ded0
	void SetUISettingHeadInfoStyle(enum class EOBPlayerHeadInfoWidgetStyle& InType); // Function Solarland.SolarReplayPlayerController.SetUISettingHeadInfoStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x288dd40
	void SetDamageTextVisible(bool bIsVisible); // Function Solarland.SolarReplayPlayerController.SetDamageTextVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x288d440
	void SetBattleOBHUDType(enum class EBattleOBHUDType& Type); // Function Solarland.SolarReplayPlayerController.SetBattleOBHUDType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x288d3b0
	void PauseReplay(); // Function Solarland.SolarReplayPlayerController.PauseReplay // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x288d220
	void OnReplayPlayingLevelLoaded(); // Function Solarland.SolarReplayPlayerController.OnReplayPlayingLevelLoaded // (Final|Native|Private) // @ game+0x288d200
	void OnReplayPlayingFirstScrubFinished(); // Function Solarland.SolarReplayPlayerController.OnReplayPlayingFirstScrubFinished // (Final|Native|Private) // @ game+0x288d1e0
	void OnReplayCameraLostTarget(); // Function Solarland.SolarReplayPlayerController.OnReplayCameraLostTarget // (Final|Native|Private) // @ game+0x288d1c0
	void OnPlayingFinished(); // Function Solarland.SolarReplayPlayerController.OnPlayingFinished // (Final|Native|Private) // @ game+0x9043b0
	void OnEmitBulletDelegate__DelegateSignature(struct FVector StartLoc, struct FVector AimLoc, struct FString SolarPlayerID); // DelegateFunction Solarland.SolarReplayPlayerController.OnEmitBulletDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasDefaults) // @ game+0x2d0d160
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.SolarReplayPlayerController.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x288d000
	bool IsSpectatingPlayer(); // Function Solarland.SolarReplayPlayerController.IsSpectatingPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288cfb0
	struct ASolarPlayerState* GetWatchingLiveTarget(); // Function Solarland.SolarReplayPlayerController.GetWatchingLiveTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288cf50
	struct TMap<struct FString, float> GetHorizontalDistanceBetweenPlayerAndOBCamera(); // Function Solarland.SolarReplayPlayerController.GetHorizontalDistanceBetweenPlayerAndOBCamera // (Final|Native|Public|BlueprintCallable) // @ game+0x288cd10
	struct FString GetCurrentSpectatePlayerID(); // Function Solarland.SolarReplayPlayerController.GetCurrentSpectatePlayerID // (Final|Native|Public|BlueprintCallable) // @ game+0x288cbb0
	enum class EBattleOBHUDType GetBattleOBHUDType(); // Function Solarland.SolarReplayPlayerController.GetBattleOBHUDType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288cb80
	void ExitDirectorMode(); // Function Solarland.SolarReplayPlayerController.ExitDirectorMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x288cb60
	void EnterDirectorMode(); // Function Solarland.SolarReplayPlayerController.EnterDirectorMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x288cb40
	void ContinueReplay(); // Function Solarland.SolarReplayPlayerController.ContinueReplay // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x288cb00
};

// Class Solarland.SolarReplicationGraph
// Size: 0x6d0 (Inherited: 0x500)
struct USolarReplicationGraph : UReplicationGraph {
	struct TArray<struct UObject*> SpatializedClasses; // 0x4f8(0x10)
	struct TArray<struct UObject*> NonSpatializedChildClasses; // 0x508(0x10)
	struct TArray<struct UObject*> AlwaysRelevantClasses; // 0x518(0x10)
	struct USolarReplicationGraphNode_ForceNetUpdate_ForRejoinConnection* RejoinNode; // 0x528(0x08)
	struct USolarReplicationGraphNode_GridSpatialization2D* GridNode; // 0x530(0x08)
	struct UReplicationGraphNode_ActorList* AlwaysRelevantNode; // 0x538(0x08)
	struct USolarReplicationGraphNode_CustomRelevancy* CustomRelevancyNode; // 0x540(0x08)
	char pad_550[0x48]; // 0x550(0x48)
	struct TMap<char, struct USolarReplicationGraphNode_AlwaysRelevant_ForTeam*> AlwaysRelevantForTeamNodes; // 0x598(0x50)
	char pad_5E8[0xe8]; // 0x5e8(0xe8)

	void UnbindActorToCharacterTeam(struct ASolarCharacter* Character, struct AActor* Actor); // Function Solarland.SolarReplicationGraph.UnbindActorToCharacterTeam // (Final|Native|Public) // @ game+0x288e0c0
	void BindActorToCharacterTeam(struct ASolarCharacter* Character, struct AActor* Actor); // Function Solarland.SolarReplicationGraph.BindActorToCharacterTeam // (Final|Native|Public) // @ game+0x288c9e0
};

// Class Solarland.SolarReplicationGraphNode_ForceNetUpdate_ForRejoinConnection
// Size: 0x178 (Inherited: 0xd0)
struct USolarReplicationGraphNode_ForceNetUpdate_ForRejoinConnection : UReplicationGraphNode_ActorList {
	struct TSet<struct UNetConnection*> PendingForceNetUpdateConnections; // 0xd0(0x50)
	struct TSet<struct AActor*> PendingForceNetUpdateActors; // 0x120(0x50)
	char pad_170[0x8]; // 0x170(0x08)
};

// Class Solarland.SolarReplicationGraphNode_CustomRelevancy
// Size: 0xe0 (Inherited: 0xd0)
struct USolarReplicationGraphNode_CustomRelevancy : UReplicationGraphNode_ActorList {
	char pad_D0[0x10]; // 0xd0(0x10)
};

// Class Solarland.SolarReplicationGraphNode_AlwaysRelevant_ForConnection
// Size: 0x298 (Inherited: 0x50)
struct USolarReplicationGraphNode_AlwaysRelevant_ForConnection : UReplicationGraphNode {
	char pad_50[0x228]; // 0x50(0x228)
	struct AActor* LastPawn; // 0x278(0x08)
	struct TArray<struct FAlwaysRelevantActorInfo> PastRelevantActors; // 0x280(0x10)
	char pad_290[0x8]; // 0x290(0x08)
};

// Class Solarland.SolarReplicationGraphNode_AlwaysRelevant_ForTeam
// Size: 0x88 (Inherited: 0x50)
struct USolarReplicationGraphNode_AlwaysRelevant_ForTeam : UReplicationGraphNode {
	struct TArray<struct AActor*> TeamActors; // 0x50(0x10)
	struct TArray<struct ASolarPlayerState*> Players; // 0x60(0x10)
	char pad_70[0x10]; // 0x70(0x10)
	struct AActor* LastPawn; // 0x80(0x08)
};

// Class Solarland.SolarReplicationGraphNode_AlwaysRelevant_ForSpectate
// Size: 0xb0 (Inherited: 0x50)
struct USolarReplicationGraphNode_AlwaysRelevant_ForSpectate : UReplicationGraphNode {
	char pad_50[0x60]; // 0x50(0x60)
};

// Class Solarland.SolarReplicationGraphNode_PlayerStateFrequencyLimiter
// Size: 0x78 (Inherited: 0x50)
struct USolarReplicationGraphNode_PlayerStateFrequencyLimiter : UReplicationGraphNode {
	char pad_50[0x28]; // 0x50(0x28)
};

// Class Solarland.SolarReplicationGraphNode_GridSpatialization2D
// Size: 0x2d0 (Inherited: 0x230)
struct USolarReplicationGraphNode_GridSpatialization2D : UReplicationGraphNode_GridSpatialization2D {
	struct TSet<struct AActor*> PendingForceNetUpdateActors; // 0x228(0x50)
	char pad_280[0x50]; // 0x280(0x50)
};

// Class Solarland.SolarReplicationGraphNode_GridCell
// Size: 0x130 (Inherited: 0x120)
struct USolarReplicationGraphNode_GridCell : UReplicationGraphNode_GridCell {
	struct UReplicationGraphNode_ActorList* ForceNetUpdateNode; // 0x120(0x08)
	char pad_128[0x8]; // 0x128(0x08)
};

// Class Solarland.SolarReplicationGraphDebugActor
// Size: 0x238 (Inherited: 0x238)
struct ASolarReplicationGraphDebugActor : AReplicationGraphDebugActor {

	void ServerSetClassNetCullDistance(struct UObject* Class, float CullDistance); // Function Solarland.SolarReplicationGraphDebugActor.ServerSetClassNetCullDistance // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x288d240
};

// Class Solarland.SolarResolutionSettings
// Size: 0x28 (Inherited: 0x28)
struct USolarResolutionSettings : UObject {

	void SetScreenModeByNum(int32_t InScreenMode); // Function Solarland.SolarResolutionSettings.SetScreenModeByNum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x288dc30
	void SetScreenMode(enum class EWindowMode InScreenMode); // Function Solarland.SolarResolutionSettings.SetScreenMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x288dbc0
	enum class EWindowMode GetScreenMode(); // Function Solarland.SolarResolutionSettings.GetScreenMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x288ce10
	bool CanViewportSetWindowedMode(); // Function Solarland.SolarResolutionSettings.CanViewportSetWindowedMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x288cab0
};

// Class Solarland.SolarResurrectionComponent
// Size: 0x150 (Inherited: 0xb0)
struct USolarResurrectionComponent : UActorComponent {
	char bEnableResurrection; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct ADeathTreasureBox* DeathBox; // 0xb8(0x08)
	struct FVector DeathBoxLoc; // 0xc0(0x0c)
	enum class EResurrectionState ResurrectionState; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)
	struct FMulticastInlineDelegate OnResurrectionStateChanged; // 0xd0(0x10)
	float CurrentCountDownStartTime; // 0xe0(0x04)
	float CountDownAccTime; // 0xe4(0x04)
	char pad_E8[0x8]; // 0xe8(0x08)
	float ConfigCountDownTime; // 0xf0(0x04)
	float ResurrectionClutchTime; // 0xf4(0x04)
	char pad_F8[0x8]; // 0xf8(0x08)
	char bIsTimeoutCountDownPaused : 1; // 0x100(0x01)
	char pad_100_1 : 7; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
	struct FMulticastInlineDelegate OnTimeoutCountDownStateChanged; // 0x108(0x10)
	struct TWeakObjectPtr<struct UWorldMark_ReviveTeammates> DeathBoxMark; // 0x118(0x08)
	struct UWorldMark_ReviveTeammates* DeathBoxMarkClass; // 0x120(0x08)
	struct TWeakObjectPtr<struct AActor> RebornLine; // 0x128(0x08)
	struct AActor* RebornLineClass; // 0x130(0x08)
	int32_t RemindTeammateRescueSoundID; // 0x138(0x04)
	char pad_13C[0x14]; // 0x13c(0x14)

	void TryContinueTimeoutCountDown(); // Function Solarland.SolarResurrectionComponent.TryContinueTimeoutCountDown // (Final|Native|Public|BlueprintCallable) // @ game+0x288e0a0
	void SetResurrectionState(enum class EResurrectionState NewState, bool bShouldNotifyOnServer); // Function Solarland.SolarResurrectionComponent.SetResurrectionState // (Final|Native|Public|BlueprintCallable) // @ game+0x288daf0
	void SetDeathBox(struct ADeathTreasureBox* InDeathBox); // Function Solarland.SolarResurrectionComponent.SetDeathBox // (Final|Native|Public|BlueprintCallable) // @ game+0x288d4d0
	void ServerNotifyTeammatesHelp(); // Function Solarland.SolarResurrectionComponent.ServerNotifyTeammatesHelp // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0xc69820
	void OnTimeoutCountDownStateChanged__DelegateSignature(bool bPaused); // DelegateFunction Solarland.SolarResurrectionComponent.OnTimeoutCountDownStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnReviveSelf(bool bOverrideLocation, struct FVector& ReviveLocation); // Function Solarland.SolarResurrectionComponent.OnReviveSelf // (Event|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnResurrectionStateChanged__DelegateSignature(enum class EResurrectionState NewState); // DelegateFunction Solarland.SolarResurrectionComponent.OnResurrectionStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRep_ResurrectionState(enum class EResurrectionState LastState); // Function Solarland.SolarResurrectionComponent.OnRep_ResurrectionState // (Final|Native|Public) // @ game+0x288d120
	void OnRep_DeathBox(struct ADeathTreasureBox* LastDeathBox); // Function Solarland.SolarResurrectionComponent.OnRep_DeathBox // (Final|Native|Public) // @ game+0x288d090
	void OnRep_bIsTimeoutCountDownPaused(); // Function Solarland.SolarResurrectionComponent.OnRep_bIsTimeoutCountDownPaused // (Final|Native|Protected) // @ game+0x288d1a0
	void MulticastPlayMarkNotify(); // Function Solarland.SolarResurrectionComponent.MulticastPlayMarkNotify // (Net|Native|Event|NetMulticast|Public) // @ game+0xc697e0
	void LazyPauseTimeoutCountDownByClutchTime(); // Function Solarland.SolarResurrectionComponent.LazyPauseTimeoutCountDownByClutchTime // (Final|Native|Public|BlueprintCallable) // @ game+0x288cfe0
	float GetWaitTimeRemaining(); // Function Solarland.SolarResurrectionComponent.GetWaitTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x288cf20
	struct ASolarCharacter* GetRevivingCharacter(); // Function Solarland.SolarResurrectionComponent.GetRevivingCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288cde0
	struct ASolarCharacter* GetOwnerCharacter(); // Function Solarland.SolarResurrectionComponent.GetOwnerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288cdb0
	struct FVector GetDeathBoxLoc(); // Function Solarland.SolarResurrectionComponent.GetDeathBoxLoc // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x288cc30
	void Event_OnRevivingComplete(struct FString PlayerId); // Function Solarland.SolarResurrectionComponent.Event_OnRevivingComplete // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void Event_OnRevivedComplete(); // Function Solarland.SolarResurrectionComponent.Event_OnRevivedComplete // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void Event_OnResurrectionStateChanged(enum class EResurrectionState LastState); // Function Solarland.SolarResurrectionComponent.Event_OnResurrectionStateChanged // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void EnterBuyResurrectionProcess(); // Function Solarland.SolarResurrectionComponent.EnterBuyResurrectionProcess // (Final|Native|Public|BlueprintCallable) // @ game+0x288cb20
};

// Class Solarland.SolarRichTextBlock
// Size: 0xad0 (Inherited: 0x160)
struct USolarRichTextBlock : UTextLayoutWidget {
	bool bEnableLocText; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)
	struct FText Text; // 0x168(0x18)
	int32_t LocTextID; // 0x180(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x184(0x01)
	char pad_185[0x3]; // 0x185(0x03)
	struct UDataTable* TextStyleSet; // 0x188(0x08)
	struct TArray<struct URichTextBlockDecorator*> DecoratorClasses; // 0x190(0x10)
	bool bOverrideDefaultStyle; // 0x1a0(0x01)
	char pad_1A1[0xf]; // 0x1a1(0x0f)
	struct FTextBlockStyle DefaultTextStyleOverride; // 0x1b0(0x460)
	float MinDesiredWidth; // 0x610(0x04)
	int32_t MaxRowCount; // 0x614(0x04)
	int32_t MinFontSize; // 0x618(0x04)
	bool bUsingAccurateScale; // 0x61c(0x01)
	char pad_61D[0x463]; // 0x61d(0x463)
	struct TArray<struct URichTextBlockDecorator*> InstanceDecorators; // 0xa80(0x10)
	char pad_A90[0x40]; // 0xa90(0x40)

	void SetWrapTextAt(float InWrapTextAt); // Function Solarland.SolarRichTextBlock.SetWrapTextAt // (Final|Native|Public|BlueprintCallable) // @ game+0x288ddd0
	void SetWrappingPolicy(enum class ETextWrappingPolicy InWrappingPolicy); // Function Solarland.SolarRichTextBlock.SetWrappingPolicy // (Final|Native|Public|BlueprintCallable) // @ game+0x288de50
	void SetTextStyleSet(struct UDataTable* NewTextStyleSet); // Function Solarland.SolarRichTextBlock.SetTextStyleSet // (Final|Native|Public|BlueprintCallable) // @ game+0x288dcb0
	void SetText(struct FText& InText); // Function Solarland.SolarRichTextBlock.SetText // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x26aa2c0
	void SetMinDesiredWidth(float InMinDesiredWidth); // Function Solarland.SolarRichTextBlock.SetMinDesiredWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x288da70
	void SetLocTextID(int32_t InLocTextID); // Function Solarland.SolarRichTextBlock.SetLocTextID // (Final|Native|Public|BlueprintCallable) // @ game+0x288d9e0
	void SetDefaultTextStyle(struct FTextBlockStyle& InDefaultTextStyle); // Function Solarland.SolarRichTextBlock.SetDefaultTextStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x288d930
	void SetDefaultStrikeBrush(struct FSlateBrush& InStrikeBrush); // Function Solarland.SolarRichTextBlock.SetDefaultStrikeBrush // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x288d880
	void SetDefaultShadowOffset(struct FVector2D InShadowOffset); // Function Solarland.SolarRichTextBlock.SetDefaultShadowOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x288d800
	void SetDefaultShadowColorAndOpacity(struct FLinearColor InShadowColorAndOpacity); // Function Solarland.SolarRichTextBlock.SetDefaultShadowColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x288d770
	void SetDefaultFont(struct FSlateFontInfo InFontInfo); // Function Solarland.SolarRichTextBlock.SetDefaultFont // (Final|Native|Public|BlueprintCallable) // @ game+0x288d650
	void SetDefaultColorAndOpacity(struct FSlateColor InColorAndOpacity); // Function Solarland.SolarRichTextBlock.SetDefaultColorAndOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x288d560
	void SetAutoWrapText(bool InAutoTextWrap); // Function Solarland.SolarRichTextBlock.SetAutoWrapText // (Final|Native|Public|BlueprintCallable) // @ game+0x288d320
	enum class ETextWrappingPolicy GetWrappingPolicy(); // Function Solarland.SolarRichTextBlock.GetWrappingPolicy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288cf80
	struct UDataTable* GetTextStyleSet(); // Function Solarland.SolarRichTextBlock.GetTextStyleSet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288cef0
	struct FText GetText(); // Function Solarland.SolarRichTextBlock.GetText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x288ce50
	struct URichTextBlockDecorator* GetDecoratorByClass(struct URichTextBlockDecorator* DecoratorClass); // Function Solarland.SolarRichTextBlock.GetDecoratorByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x288cc70
	void ClearAllDefaultStyleOverrides(); // Function Solarland.SolarRichTextBlock.ClearAllDefaultStyleOverrides // (Final|Native|Public) // @ game+0x288cae0
};

// Class Solarland.SolarRichTextBlockDecorator
// Size: 0x28 (Inherited: 0x28)
struct USolarRichTextBlockDecorator : UObject {
};

// Class Solarland.SolarRichTextBlockImageDecorator
// Size: 0x30 (Inherited: 0x28)
struct USolarRichTextBlockImageDecorator : USolarRichTextBlockDecorator {
	struct UDataTable* ImageSet; // 0x28(0x08)
};

// Class Solarland.SolarRichTextBlockInlineTextDecorator
// Size: 0x30 (Inherited: 0x28)
struct USolarRichTextBlockInlineTextDecorator : USolarRichTextBlockDecorator {
	struct UDataTable* InlineTextStyleSet; // 0x28(0x08)
};

// Class Solarland.SolarRocketVehicleAnimInstance
// Size: 0x490 (Inherited: 0x400)
struct USolarRocketVehicleAnimInstance : USolarLeggedVehicleAnimInstance {
	bool bInEquipState; // 0x3f8(0x01)
	float FootTargetTraceLength; // 0x3fc(0x04)
	struct TArray<struct FVector> FootTargetTraceStartLocations; // 0x400(0x10)
	float FootTraceRadius; // 0x410(0x04)
	float FootTargetBlendSpeed; // 0x414(0x04)
	struct TArray<float> FootTargetOffsets; // 0x418(0x10)
	struct UAnimMontage* VehicleWeapoReloadMontage; // 0x428(0x08)
	bool bWeaponFiring; // 0x430(0x01)
	bool bInPrecisionShoot; // 0x431(0x01)
	float RocketBoneAlpha; // 0x434(0x04)
	struct TMap<struct FName, struct FVector> RocketBoneScales; // 0x438(0x50)
	char pad_48B[0x5]; // 0x48b(0x05)

	void ResetFootIkAlpha(); // Function Solarland.SolarRocketVehicleAnimInstance.ResetFootIkAlpha // (Final|Native|Protected|BlueprintCallable) // @ game+0x2892680
	void AnimNotify_EnterOpen(); // Function Solarland.SolarRocketVehicleAnimInstance.AnimNotify_EnterOpen // (Final|Native|Protected) // @ game+0x2891660
	void AnimNotify_EnterClose(); // Function Solarland.SolarRocketVehicleAnimInstance.AnimNotify_EnterClose // (Final|Native|Protected) // @ game+0x2891640
};

// Class Solarland.SolarRoleSkillDataConfig
// Size: 0x220 (Inherited: 0x30)
struct USolarRoleSkillDataConfig : UDataAsset {
	struct TSoftObjectPtr<UPassiveSkillDataAsset> ClassCommonPassiveSkill; // 0x30(0x28)
	struct TMap<enum class EClassType, struct FHeroClassConfig> HeroClassConfigs; // 0x58(0x50)
	struct UDataTable* RoleSkillDataTable; // 0xa8(0x08)
	struct UDataTable* BattleUpgradeEffectTypeDataTable; // 0xb0(0x08)
	int32_t RoleSkillCannotActiveNoticeID; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct FSoftClassPath UniqueSkillForbiddenGameplayEffect; // 0xc0(0x18)
	struct FSoftClassPath TacticalSkillForbiddenGameplayEffect; // 0xd8(0x18)
	struct FSoftClassPath InitCDValueGameplayEffect; // 0xf0(0x18)
	struct FSoftClassPath SuperSkillBlockGameplayEffect; // 0x108(0x18)
	struct FSoftClassPath TacticalSkillBlockGameplayEffect; // 0x120(0x18)
	struct FSoftClassPath SuperCanTriggerAgainGameplayEffect; // 0x138(0x18)
	struct FSoftClassPath TacticalCanTriggerAgainGameplayEffect; // 0x150(0x18)
	struct UGameplayEffect* UsingContinuousSkillStatusEffect; // 0x168(0x08)
	struct UGameplayEffect* HoldingSkillStatusEffect; // 0x170(0x08)
	struct UDataTable* WeaponUIStyleDataTable; // 0x178(0x08)
	struct TMap<int32_t, struct FString> CharacterUpgradeEffects; // 0x180(0x50)
	char pad_1D0[0x50]; // 0x1d0(0x50)

	enum class EClassLevelUpRewardType GetLevelUpRewardType(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpRewardType // (Final|Native|Public|BlueprintCallable) // @ game+0x2891fc0
	struct FSoftObjectPath GetLevelUpInnerIconPath(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpInnerIconPath // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2891e90
	struct FString GetLevelUpInnerDescription(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpInnerDescription // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2891d70
	struct TArray<struct FSoftObjectPath> GetLevelUpAllInnerIconPath(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpAllInnerIconPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2891bf0
	struct TArray<struct FString> GetLevelUpAllInnerDescription(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpAllInnerDescription // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2891a80
	struct FString GetEffectIdForCharacterUpgrade(int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetEffectIdForCharacterUpgrade // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28919a0
	enum class EClassType GetClassTypeForCharacter(int32_t CharacterId); // Function Solarland.SolarRoleSkillDataConfig.GetClassTypeForCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2891860
};

// Class Solarland.SolarRuntimeAssetsCollection
// Size: 0x38 (Inherited: 0x28)
struct USolarRuntimeAssetsCollection : URuntimeAssetsCollectionBase {
	struct TArray<struct FFilteredData> AssetFilters; // 0x28(0x10)
};

// Class Solarland.SolarPattern
// Size: 0x30 (Inherited: 0x28)
struct USolarPattern : UObject {
	bool bEnabled; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class Solarland.SolarPatternRuntime
// Size: 0x30 (Inherited: 0x28)
struct USolarPatternRuntime : UObject {
	struct USolarPattern* PattenData; // 0x28(0x08)
};

// Class Solarland.SolarIncreaseAndDecreasePattern
// Size: 0x38 (Inherited: 0x30)
struct USolarIncreaseAndDecreasePattern : USolarPattern {
	enum class EIncreaseAndDecreaseTransitionMode TransitionMode; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Solarland.SolarIncreaseAndDecreasePatternRuntime
// Size: 0x50 (Inherited: 0x30)
struct USolarIncreaseAndDecreasePatternRuntime : USolarPatternRuntime {
	char pad_30[0x20]; // 0x30(0x20)
};

// Class Solarland.SolarSaveGame
// Size: 0xf0 (Inherited: 0x28)
struct USolarSaveGame : USaveGame {
	bool HasShowNewPlayerGuide; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	int32_t EditorGameModeId; // 0x2c(0x04)
	struct TArray<struct FNeverShowCheckWindow> NeverShowCheckWindowList; // 0x30(0x10)
	bool HasReadSurvey; // 0x40(0x01)
	bool HasReadSurvey2; // 0x41(0x01)
	bool HasPlayedHuntMode; // 0x42(0x01)
	char MatchTimes; // 0x43(0x01)
	bool HasCompleteTeamUp; // 0x44(0x01)
	bool IsMorrowPlayer; // 0x45(0x01)
	bool bClickSocialEntranceBtnDiscord; // 0x46(0x01)
	bool bClickSocialEntranceBtnFacebook; // 0x47(0x01)
	bool bClickSocialEntranceBtnYouTube; // 0x48(0x01)
	bool bClickSocialEntranceBtnTikTok; // 0x49(0x01)
	bool bClickSocialEntranceBtnInstagram; // 0x4a(0x01)
	bool bClickSocialTip; // 0x4b(0x01)
	bool bClickLiveBroadcast; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	int64_t SocialLinkLastClickTime; // 0x50(0x08)
	bool bHasReportedOnline15min; // 0x58(0x01)
	bool bHasReportedOnline30min; // 0x59(0x01)
	bool bHasPlayedPackEnterAnimation; // 0x5a(0x01)
	bool bHasClickClanPermission; // 0x5b(0x01)
	bool bHasClickVipCard; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	int64_t PatFaceRefreshTimeStamp; // 0x60(0x08)
	struct TArray<struct FPatfaceShowTime> PatfaceShowTimeList; // 0x68(0x10)
	bool bAutoDownloadSepPkgsOnWifi; // 0x78(0x01)
	bool bHasLobbyDownloadSepPkgsRedDot; // 0x79(0x01)
	char pad_7A[0x6]; // 0x7a(0x06)
	int64_t bShowLobbyDownloadSepPkgsRedDotTimeStamp; // 0x80(0x08)
	bool bHasNoticeAvailableVoice; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
	struct FString LastLoginAccount; // 0x90(0x10)
	int32_t BattlePassID; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
	struct TArray<int32_t> MarkingPassTaskID; // 0xa8(0x10)
	struct TArray<int32_t> DisplayedProductIDs; // 0xb8(0x10)
	struct TArray<int32_t> ClickedPosterRecIDs; // 0xc8(0x10)
	char pad_D8[0x8]; // 0xd8(0x08)
	struct TArray<uint32_t> ReadMailIds; // 0xe0(0x10)

	bool ValidateNeverShowCheckWindow(int32_t TargetConfirmID); // Function Solarland.SolarSaveGame.ValidateNeverShowCheckWindow // (Final|Native|Public) // @ game+0x2892b40
	void UpdateNeverShowCheckWindow(int32_t TargetConfirmID, enum class ENeverShowDuration NewDuration); // Function Solarland.SolarSaveGame.UpdateNeverShowCheckWindow // (Final|Native|Public) // @ game+0x2892a70
	void UpdateMarkTask(int32_t InBattlePassID, int32_t TaskID, bool Add); // Function Solarland.SolarSaveGame.UpdateMarkTask // (Final|Native|Public) // @ game+0x2892960
	void UpdateDisplayedIDs(struct TArray<int32_t>& InIDs); // Function Solarland.SolarSaveGame.UpdateDisplayedIDs // (Final|Native|Public|HasOutParms) // @ game+0x28928b0
	void UpdateClickedPosterRecIDs(int32_t InID); // Function Solarland.SolarSaveGame.UpdateClickedPosterRecIDs // (Final|Native|Public) // @ game+0x2892820
	void SetMarkingTask(int32_t InBattlePassID, struct TArray<int32_t>& InTaskID); // Function Solarland.SolarSaveGame.SetMarkingTask // (Final|Native|Public|HasOutParms) // @ game+0x28926a0
	void PrintTwiceConfirmCheckWindowList(); // Function Solarland.SolarSaveGame.PrintTwiceConfirmCheckWindowList // (Final|Native|Public) // @ game+0x9043b0
	void GetMarkingTask(int32_t InBattlePassID, struct TArray<int32_t>& OutTaskID); // Function Solarland.SolarSaveGame.GetMarkingTask // (Final|Native|Public|HasOutParms) // @ game+0x2892090
	bool DeleteNeverShowCheckWindow(int32_t TargetConfirmID); // Function Solarland.SolarSaveGame.DeleteNeverShowCheckWindow // (Final|Native|Public) // @ game+0x28916c0
	void ClearPatfaceShowTimeList(); // Function Solarland.SolarSaveGame.ClearPatfaceShowTimeList // (Final|Native|Public) // @ game+0x28916a0
	void ClearDisplayIDs(); // Function Solarland.SolarSaveGame.ClearDisplayIDs // (Final|Native|Public) // @ game+0x2891680
	void AddPatfaceShowTimeList(int32_t InID, int64_t InCanShowTimeStamp); // Function Solarland.SolarSaveGame.AddPatfaceShowTimeList // (Final|Native|Public) // @ game+0x2891570
};

// Class Solarland.SolarSceneConfig
// Size: 0x60 (Inherited: 0x30)
struct USolarSceneConfig : UDataAsset {
	struct FSoftObjectPath MeshMapPath; // 0x30(0x18)
	struct FSoftObjectPath LightmapPath; // 0x48(0x18)
};

// Class Solarland.SolarScreenEffectWidget
// Size: 0x408 (Inherited: 0x400)
struct USolarScreenEffectWidget : USolarUserWidget {
	char pad_400[0x4]; // 0x400(0x04)
	bool bCanBeReused; // 0x404(0x01)
	char pad_405[0x3]; // 0x405(0x03)

	void StopPlayScreenEffect(); // Function Solarland.SolarScreenEffectWidget.StopPlayScreenEffect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void StartPlayScreenEffect(); // Function Solarland.SolarScreenEffectWidget.StartPlayScreenEffect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	bool ShouldEnablePoisonEffect(); // Function Solarland.SolarScreenEffectWidget.ShouldEnablePoisonEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x28974a0
	void PreAddToReuseCache(); // Function Solarland.SolarScreenEffectWidget.PreAddToReuseCache // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ad6e00
	void PostRemoveFromReuseCache(); // Function Solarland.SolarScreenEffectWidget.PostRemoveFromReuseCache // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ad6de0
	void NotifyScreenEffectComplete(); // Function Solarland.SolarScreenEffectWidget.NotifyScreenEffectComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x2896710
	bool IsInstantEffectComplete(); // Function Solarland.SolarScreenEffectWidget.IsInstantEffectComplete // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x268a4d0
	bool IsFadeOutFinished(); // Function Solarland.SolarScreenEffectWidget.IsFadeOutFinished // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2896570
	void FadeOutScreenEffect(); // Function Solarland.SolarScreenEffectWidget.FadeOutScreenEffect // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xbd9710
};

// Class Solarland.SolarShieldCreator
// Size: 0x6b0 (Inherited: 0x4b0)
struct ASolarShieldCreator : ASummonItemBase {
	float TestRadius; // 0x4b0(0x04)
	char pad_4B4[0xc]; // 0x4b4(0x0c)
	struct FSolarShieldCreatorEffect SpawnCreatorEffect; // 0x4c0(0x60)
	struct FSolarShieldCreatorEffect DestroyCreatorEffect; // 0x520(0x60)
	struct FSolarShieldCreatorEffect SpawnCoreEffect; // 0x580(0x60)
	struct FSolarShieldCreatorEffect DestroyCoreEffect; // 0x5e0(0x60)
	struct FSoftObjectPath MarkIconPath; // 0x640(0x18)
	float MarkLifeTime; // 0x658(0x04)
	char pad_65C[0x4]; // 0x65c(0x04)
	struct FString MarkVoiceID; // 0x660(0x10)
	struct FName SpawnSoundGroupName; // 0x670(0x08)
	struct FName DestroySoundGroupName; // 0x678(0x08)
	struct FName GiveShieldSoundGroupName; // 0x680(0x08)
	char pad_688[0x10]; // 0x688(0x10)
	struct UParticleSystemComponent* SpawnCoreEmitter; // 0x698(0x08)
	struct TArray<struct UObject*> CachedAssets; // 0x6a0(0x10)
};

// Class Solarland.SolarShieldDamageEffect
// Size: 0x1a0 (Inherited: 0x198)
struct USolarShieldDamageEffect : USolarAbilityEffect {
	float ShieldDamage; // 0x198(0x04)
	char pad_19C[0x4]; // 0x19c(0x04)

	float GetShieldDamage(); // Function Solarland.SolarShieldDamageEffect.GetShieldDamage // (Final|Native|Public|Const) // @ game+0x28963d0
};

// Class Solarland.SolarShieldProgressBoard
// Size: 0x2f8 (Inherited: 0x2b8)
struct USolarShieldProgressBoard : USolarAdvProgressBoard {
	float AutoRechargeSpeed; // 0x2b8(0x04)
	float RechargeTime; // 0x2bc(0x04)
	float PreChangeSpeed; // 0x2c0(0x04)
	char pad_2C4[0x34]; // 0x2c4(0x34)

	void UpdateCurrentValue(float Current); // Function Solarland.SolarShieldProgressBoard.UpdateCurrentValue // (Final|Native|Public|BlueprintCallable) // @ game+0x28974d0
	void SetSpeed(float NewSpeed); // Function Solarland.SolarShieldProgressBoard.SetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x2897420
	void SetProgressColorByID(struct FLinearColor& InColor, int32_t InID); // Function Solarland.SolarShieldProgressBoard.SetProgressColorByID // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	void SetPreAddColor(); // Function Solarland.SolarShieldProgressBoard.SetPreAddColor // (Final|Native|Public|BlueprintCallable) // @ game+0x2897400
	void PreAddValue(float InCurrentValue, float InChangeValue, enum class EShieldRechargeState RechargeState, bool bInFixPreAdd); // Function Solarland.SolarShieldProgressBoard.PreAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2897290
	void InitProgressBoard(float Current, float Max, int32_t Fragment); // Function Solarland.SolarShieldProgressBoard.InitProgressBoard // (Final|Native|Public|BlueprintCallable) // @ game+0x2896450
	void InitProgress(); // Function Solarland.SolarShieldProgressBoard.InitProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x2896430
	float GetSpeed(); // Function Solarland.SolarShieldProgressBoard.GetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x2896400
	void DoMinusValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarShieldProgressBoard.DoMinusValue // (Final|Native|Public|BlueprintCallable) // @ game+0x28962d0
	void DoAddValue(float InCurrentValue); // Function Solarland.SolarShieldProgressBoard.DoAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2896250
	void CancelAddValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarShieldProgressBoard.CancelAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2896180
};

// Class Solarland.SolarShieldUpgradeItemShop
// Size: 0x440 (Inherited: 0x238)
struct ASolarShieldUpgradeItemShop : ASolarInteractableActor {
	int32_t groupid; // 0x238(0x04)
	int32_t ServerActiveGroupID; // 0x23c(0x04)
	char pad_240[0x8]; // 0x240(0x08)
	int32_t UpgradeAnimStartFrame; // 0x248(0x04)
	int32_t UpgradeAnimEndFrame; // 0x24c(0x04)
	float UpgradeAnimDuration; // 0x250(0x04)
	int32_t MatPrimitiveDataIndex; // 0x254(0x04)
	struct UStaticMeshComponent* BodyMesh; // 0x258(0x08)
	struct USphereComponent* CollisionComp; // 0x260(0x08)
	struct UStaticMeshComponent* HeadUpIconMesh; // 0x268(0x08)
	struct UStaticMeshComponent* BodyScreenMesh; // 0x270(0x08)
	char pad_278[0x18]; // 0x278(0x18)
	int32_t UpgradeItemNum; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	struct TSoftObjectPtr<UParticleSystem> InteractionTriggeredEffect; // 0x298(0x28)
	struct FSolarIntArray InteractedPlayerIDList; // 0x2c0(0x130)
	int32_t Uid; // 0x3f0(0x04)
	char pad_3F4[0x1c]; // 0x3f4(0x1c)
	struct USphereComponent* AudioTriggerComp; // 0x410(0x08)
	struct FString SNameHint; // 0x418(0x10)
	struct FString SNameStopHint; // 0x428(0x10)
	char pad_438[0x8]; // 0x438(0x08)

	void OnRep_UID(); // Function Solarland.SolarShieldUpgradeItemShop.OnRep_UID // (Final|Native|Public) // @ game+0x28970d0
	void OnRep_InteractedPlayerIDList(); // Function Solarland.SolarShieldUpgradeItemShop.OnRep_InteractedPlayerIDList // (Final|Native|Public) // @ game+0x28970d0
	void OnRep_ActiveGroupID(); // Function Solarland.SolarShieldUpgradeItemShop.OnRep_ActiveGroupID // (Final|Native|Public) // @ game+0x2897090
	void OnOtherPlayerInteracted(); // Function Solarland.SolarShieldUpgradeItemShop.OnOtherPlayerInteracted // (Final|Native|Protected) // @ game+0x2897070
	void OnLocalPlayerSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarShieldUpgradeItemShop.OnLocalPlayerSpectateTargetChanged // (Final|Native|Protected) // @ game+0x2896ec0
	void OnBindLocalPlayerSpectateTargetChanged(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.SolarShieldUpgradeItemShop.OnBindLocalPlayerSpectateTargetChanged // (Final|Native|Protected) // @ game+0x2896e30
	void OnActorEndOverlapAudioSphere(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarShieldUpgradeItemShop.OnActorEndOverlapAudioSphere // (Final|Native|Protected) // @ game+0x2896cd0
	void OnActorEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarShieldUpgradeItemShop.OnActorEndOverlap // (Final|Native|Protected) // @ game+0x2896b70
	void OnActorBeginOverlapAudioSphere(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarShieldUpgradeItemShop.OnActorBeginOverlapAudioSphere // (Final|Native|Protected|HasOutParms) // @ game+0x2896950
	void OnActorBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarShieldUpgradeItemShop.OnActorBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x2896730
};

// Class Solarland.SolarWheeledVehicle
// Size: 0x13f0 (Inherited: 0x13c0)
struct ASolarWheeledVehicle : ASolarVehiclePawn {
	char pad_13C0[0x8]; // 0x13c0(0x08)
	struct USolarWheeledVehicleMovement* VehicleMovement; // 0x13c8(0x08)
	bool bReplicatedDrift; // 0x13d0(0x01)
	bool bReplicatedIsBurnout; // 0x13d1(0x01)
	char pad_13D2[0x2]; // 0x13d2(0x02)
	float PlatformDetachImpulse; // 0x13d4(0x04)
	char pad_13D8[0x18]; // 0x13d8(0x18)

	void StatVehicleAutoSteering(bool bInSameDirection); // Function Solarland.SolarWheeledVehicle.StatVehicleAutoSteering // (Net|Native|Event|Protected|NetServer) // @ game+0x2965790
	void ServerSetIsDrift(bool bInDrift, char InDriveType); // Function Solarland.SolarWheeledVehicle.ServerSetIsDrift // (Net|Native|Event|Protected|NetServer) // @ game+0x2965400
	void ServerSetIsBurnout(bool bInBurnout); // Function Solarland.SolarWheeledVehicle.ServerSetIsBurnout // (Net|Native|Event|Public|NetServer) // @ game+0x29a4190
	void OnRep_IsBurnout(); // Function Solarland.SolarWheeledVehicle.OnRep_IsBurnout // (Final|Native|Protected) // @ game+0x29a3d20
	void OnRep_Drift(); // Function Solarland.SolarWheeledVehicle.OnRep_Drift // (Final|Native|Protected) // @ game+0x29a3d00
};

// Class Solarland.SolarSiegeVehicle
// Size: 0x1440 (Inherited: 0x13f0)
struct ASolarSiegeVehicle : ASolarWheeledVehicle {
	struct TArray<struct FSiegeVehicleOpenTraceData> CheckOpenTraceBox; // 0x13e8(0x10)
	float CheckOffsetZ; // 0x13f8(0x04)
	struct USolarSiegeVehicleAnimInstance* SolarVehicleAnimInstance; // 0x1400(0x08)
	struct TArray<struct FName> HolerBoneNames; // 0x1408(0x10)
	struct UParticleSystem* SiegeWeaponFire; // 0x1418(0x08)
	char pad_1424[0x4]; // 0x1424(0x04)
	struct UCameraShake* OpenCameraShake; // 0x1428(0x08)
	float OpenCameraShakeSpeed; // 0x1430(0x04)
	char pad_1434[0x4]; // 0x1434(0x04)
	struct UParticleSystemComponent* MuzzlePSC; // 0x1438(0x08)

	bool IsSiegeWeaponOpened(); // Function Solarland.SolarSiegeVehicle.IsSiegeWeaponOpened // (Final|Native|Public) // @ game+0x28965a0
	char GetCurrentVehicleAnimation(); // Function Solarland.SolarSiegeVehicle.GetCurrentVehicleAnimation // (Final|Native|Public) // @ game+0x28963a0
};

// Class Solarland.SolarWheeledVehicleAnimInstance
// Size: 0x430 (Inherited: 0x340)
struct USolarWheeledVehicleAnimInstance : USolarVehicleAnimInstance {
	char pad_340[0x8]; // 0x340(0x08)
	struct FVector FLWheelBoneScale; // 0x348(0x0c)
	struct FVector FRWheelBoneScale; // 0x354(0x0c)
	struct FVector MLWheelBoneScale; // 0x360(0x0c)
	struct FVector MRWheelBoneScale; // 0x36c(0x0c)
	struct FVector BLWheelBoneScale; // 0x378(0x0c)
	struct FVector BRWheelBoneScale; // 0x384(0x0c)
	struct FVector FLWheelBoneLocation; // 0x390(0x0c)
	struct FVector FRWheelBoneLocation; // 0x39c(0x0c)
	struct FVector MLWheelBoneLocation; // 0x3a8(0x0c)
	struct FVector MRWheelBoneLocation; // 0x3b4(0x0c)
	struct FVector BLWheelBoneLocation; // 0x3c0(0x0c)
	struct FVector BRWheelBoneLocation; // 0x3cc(0x0c)
	struct FRotator FLWheelBoneRotation; // 0x3d8(0x0c)
	struct FRotator FRWheelBoneRotation; // 0x3e4(0x0c)
	struct FRotator MLWheelBoneRotation; // 0x3f0(0x0c)
	struct FRotator MRWheelBoneRotation; // 0x3fc(0x0c)
	struct FRotator BLWheelBoneRotation; // 0x408(0x0c)
	struct FRotator BRWheelBoneRotation; // 0x414(0x0c)
	char pad_420[0x10]; // 0x420(0x10)

	void AnimNotify_EnablePlatform(); // Function Solarland.SolarWheeledVehicleAnimInstance.AnimNotify_EnablePlatform // (Final|Native|Public) // @ game+0x29a3c40
	void AnimNotify_DisablePlatform(); // Function Solarland.SolarWheeledVehicleAnimInstance.AnimNotify_DisablePlatform // (Final|Native|Public) // @ game+0x29a3c20
	void AnimNotify_ClosePlatform(); // Function Solarland.SolarWheeledVehicleAnimInstance.AnimNotify_ClosePlatform // (Final|Native|Public) // @ game+0x29a3c00
};

// Class Solarland.SolarSiegeVehicleAnimInstance
// Size: 0x460 (Inherited: 0x430)
struct USolarSiegeVehicleAnimInstance : USolarWheeledVehicleAnimInstance {
	struct TArray<struct FVector> SiegeHolderLocations; // 0x428(0x10)
	float PreStopSpeed; // 0x43c(0x04)
	float WeaponFireAlphaF; // 0x440(0x04)
	float WeaponFireAlphaB; // 0x444(0x04)
	float WeaponFireAlphaR; // 0x448(0x04)
	float WeaponFireAlphaL; // 0x44c(0x04)
	float StopSoundMinSpeed; // 0x450(0x04)
	char pad_458[0x8]; // 0x458(0x08)

	void AnimNotify_StopLeft(); // Function Solarland.SolarSiegeVehicleAnimInstance.AnimNotify_StopLeft // (Final|Native|Public) // @ game+0x2896160
	void AnimNotify_CloseIdleLeft(); // Function Solarland.SolarSiegeVehicleAnimInstance.AnimNotify_CloseIdleLeft // (Final|Native|Public) // @ game+0x2896140
	void AnimNotify_CloseIdleEnter(); // Function Solarland.SolarSiegeVehicleAnimInstance.AnimNotify_CloseIdleEnter // (Final|Native|Public) // @ game+0x2896120
};

// Class Solarland.SolarSignificanceInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarSignificanceInterface : UInterface {

	void PostGroupIDChangedFunction(int32_t OldGroup, int32_t NewGroup); // Function Solarland.SolarSignificanceInterface.PostGroupIDChangedFunction // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x28971c0
};

// Class Solarland.SolarSignificanceManager
// Size: 0x1c0 (Inherited: 0x138)
struct USolarSignificanceManager : USignificanceManager {
	float CalculateSceneActorTickInterval; // 0x138(0x04)
	char pad_13C[0x1c]; // 0x13c(0x1c)
	struct TArray<struct AActor*> ManagedSceneActors; // 0x158(0x10)
	struct TSet<struct AActor*> ManagedSceneActorSet; // 0x168(0x50)
	char pad_1B8[0x8]; // 0x1b8(0x08)
};

// Class Solarland.SolarSkeletalMeshMergeUtil
// Size: 0x28 (Inherited: 0x28)
struct USolarSkeletalMeshMergeUtil : UBlueprintFunctionLibrary {

	struct USkeletalMesh* MergeMeshes(struct FSkeletalMeshMergeParams& Params); // Function Solarland.SolarSkeletalMeshMergeUtil.MergeMeshes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x28965d0
};

// Class Solarland.SummonItemTurret
// Size: 0x568 (Inherited: 0x4b0)
struct ASummonItemTurret : ASummonItemBase {
	float DetectableRadius; // 0x4b0(0x04)
	char pad_4B4[0x4]; // 0x4b4(0x04)
	struct TArray<enum class EObjectTypeQuery> DetectableCollisionTypes; // 0x4b8(0x10)
	float TurretYawRotateSpeed; // 0x4c8(0x04)
	char pad_4CC[0x4]; // 0x4cc(0x04)
	struct ASolarSummonWeapon* TurretWeaponBP; // 0x4d0(0x08)
	struct UParticleSystem* BoomEffect; // 0x4d8(0x08)
	float AimMaxAngle; // 0x4e0(0x04)
	char pad_4E4[0x4]; // 0x4e4(0x04)
	struct TArray<enum class EObjectTypeQuery> BlockShotObjectTypes; // 0x4e8(0x10)
	float BlockShotCheckRadius; // 0x4f8(0x04)
	float TestEnemyHeight; // 0x4fc(0x04)
	struct TArray<struct FName> PrioritizeTargetingBoneNames; // 0x500(0x10)
	float TurretTransformTime; // 0x510(0x04)
	float ForceResearchTargetTime; // 0x514(0x04)
	struct ASolarSummonWeapon* CurrentWeapon; // 0x518(0x08)
	struct FRotator LookAtTargetRotator; // 0x520(0x0c)
	char AnimationIndex; // 0x52c(0x01)
	char pad_52D[0x3]; // 0x52d(0x03)
	struct USkeletalMeshComponentBudgeted* TurretMesh; // 0x530(0x08)
	char pad_538[0x4]; // 0x538(0x04)
	struct FSpawnedActorHandle CachedTurretHandle; // 0x53c(0x04)
	char pad_540[0x28]; // 0x540(0x28)

	void OnTurretStandby(); // Function Solarland.SummonItemTurret.OnTurretStandby // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnTurretLocked(); // Function Solarland.SummonItemTurret.OnTurretLocked // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnTurretFire(); // Function Solarland.SummonItemTurret.OnTurretFire // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnTurretDead(); // Function Solarland.SummonItemTurret.OnTurretDead // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnTurretAppear(); // Function Solarland.SummonItemTurret.OnTurretAppear // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnRep_LookAtTargetRotator(); // Function Solarland.SummonItemTurret.OnRep_LookAtTargetRotator // (Final|Native|Protected) // @ game+0x29b4050
	void OnRep_AnimationIndex(); // Function Solarland.SummonItemTurret.OnRep_AnimationIndex // (Final|Native|Protected) // @ game+0x29b4030
	void NetMulticastDrawAimLine(struct FVector InStartLocation, struct TArray<struct FVector4> InEndLocationArray); // Function Solarland.SummonItemTurret.NetMulticastDrawAimLine // (Final|Net|Native|Event|NetMulticast|Private|HasDefaults) // @ game+0x29b3eb0
};

// Class Solarland.SolarSkill_AutomaticTurret
// Size: 0x580 (Inherited: 0x568)
struct ASolarSkill_AutomaticTurret : ASummonItemTurret {
	int32_t TestOverlapDestroyInterval; // 0x568(0x04)
	struct FVector TestOverlapDestroyBoxExtent; // 0x56c(0x0c)
	int32_t TestOverlapDestroyTimer; // 0x578(0x04)
	char pad_57C[0x4]; // 0x57c(0x04)
};

// Class Solarland.SolarSkill_Projectile
// Size: 0x650 (Inherited: 0x228)
struct ASolarSkill_Projectile : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct UProjectileMovementComponent* ProjectileMovementComponent; // 0x230(0x08)
	struct UPrimitiveComponent* DefaultUpdateComponent; // 0x238(0x08)
	struct FVector ProjectileVelocity; // 0x240(0x0c)
	char pad_24C[0x4]; // 0x24c(0x04)
	struct FGameplayEffectSpecHandle ToSelfGameplayEffectHandle; // 0x250(0x10)
	struct FGameplayEffectSpecHandle ToTargetGameplayEffectHandle; // 0x260(0x10)
	struct FHitResult ProjectileStopResult; // 0x270(0x88)
	struct FHitResult LocalProjectileStopResult; // 0x2f8(0x88)
	bool bDebug; // 0x380(0x01)
	bool bInstantStop; // 0x381(0x01)
	char pad_382[0x2]; // 0x382(0x02)
	float ForceStopTime; // 0x384(0x04)
	float DeferExplodeTime; // 0x388(0x04)
	char pad_38C[0x4]; // 0x38c(0x04)
	struct FSoftObjectPath ProjectileStopEffectPath; // 0x390(0x18)
	char pad_3A8[0x8]; // 0x3a8(0x08)
	struct FTransform ProjectileStopEffectTransform; // 0x3b0(0x30)
	struct FSoftObjectPath ProjectileExplosionEffectPath; // 0x3e0(0x18)
	char pad_3F8[0x8]; // 0x3f8(0x08)
	struct FTransform ProjectileExplosionEffectTransform; // 0x400(0x30)
	struct FSoftObjectPath ProjectileTrajectoryEffectPath; // 0x430(0x18)
	bool bDestroyOnExplode; // 0x448(0x01)
	char pad_449[0x3]; // 0x449(0x03)
	float DeferDestroyTime; // 0x44c(0x04)
	bool bHiddenOnStop; // 0x450(0x01)
	bool bHiddenOnExplode; // 0x451(0x01)
	char pad_452[0x6]; // 0x452(0x06)
	struct AActor* SpawnActorClassOnStop; // 0x458(0x08)
	struct AActor* SpawnActorClassOnExplode; // 0x460(0x08)
	bool bForbidSpawnActorOnHitSomeActor; // 0x468(0x01)
	char pad_469[0x7]; // 0x469(0x07)
	struct TArray<struct AActor*> ForbidSpawnActorArray; // 0x470(0x10)
	struct TArray<enum class ESolarIgnoreCollisionType> MovingIgnoreCollisionTypes; // 0x480(0x10)
	char pad_490[0xa0]; // 0x490(0xa0)
	struct UAkComponent* AkAudioComponent; // 0x530(0x08)
	struct FString SetProjectileVelocitySoundEvent1P; // 0x538(0x10)
	struct FString SetProjectileVelocitySoundEvent3P; // 0x548(0x10)
	struct FString SetProjectileVelocitySoundEvent3PEnemy; // 0x558(0x10)
	struct FString OnProjectileMovementStopSoundEvent1P; // 0x568(0x10)
	struct FString OnProjectileMovementStopSoundEvent3P; // 0x578(0x10)
	struct FString OnProjectileMovementStopSoundEvent3PEnemy; // 0x588(0x10)
	struct FString CommonHitSound1P; // 0x598(0x10)
	struct FString CommonHitSound3P; // 0x5a8(0x10)
	struct FString CommonHitSound3PEnemy; // 0x5b8(0x10)
	struct FString ExplosionSound1P; // 0x5c8(0x10)
	struct FString ExplosionSound3P; // 0x5d8(0x10)
	struct FString ExplosionSound3PEnemy; // 0x5e8(0x10)
	char pad_5F8[0x1]; // 0x5f8(0x01)
	bool bEnableCustomBounce; // 0x5f9(0x01)
	char pad_5FA[0x2]; // 0x5fa(0x02)
	struct FSolarProjectileCustomBounceData CustomBounceData; // 0x5fc(0x08)
	bool bEnableForceStopOnHitForBounce; // 0x604(0x01)
	char pad_605[0x3]; // 0x605(0x03)
	struct TArray<struct AActor*> ForceStopOnHitArrayForBounce; // 0x608(0x10)
	bool bEnableBounceHitSpecificActor; // 0x618(0x01)
	char pad_619[0x7]; // 0x619(0x07)
	struct TArray<struct AActor*> CanBounceSpecificActorArray; // 0x620(0x10)
	bool bJustAllyBounceOnForceStopBounce; // 0x630(0x01)
	char pad_631[0x7]; // 0x631(0x07)
	bool bAttachToHitActorOnStop; // 0x638(0x01)
	bool bDestroyOnAttachActorDestroy; // 0x639(0x01)
	char pad_63A[0x2]; // 0x63a(0x02)
	struct TWeakObjectPtr<struct AActor> AttachActor; // 0x63c(0x08)
	bool bReceiveAttachActorEndPlay; // 0x644(0x01)
	char pad_645[0xb]; // 0x645(0x0b)

	void ReceiveSetProjectileMovement(); // Function Solarland.SolarSkill_Projectile.ReceiveSetProjectileMovement // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveProjectileMovementStop(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.ReceiveProjectileMovementStop // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveExplosion(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.ReceiveExplosion // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveAttachActorEndPlay(struct AActor* InActor, enum class EEndPlayReason InEndPlayReason); // Function Solarland.SolarSkill_Projectile.ReceiveAttachActorEndPlay // (Native|Event|Protected|BlueprintEvent) // @ game+0x289b430
	void OnTypeIgnoreCollisionActorChange(bool bAdd, enum class ESolarIgnoreCollisionType Type, struct AActor* InActor); // Function Solarland.SolarSkill_Projectile.OnTypeIgnoreCollisionActorChange // (Final|Native|Protected) // @ game+0x289b1a0
	void OnTeamIgnoreCollisionActorChange(bool bAdd, struct AActor* InActor, char TeamID); // Function Solarland.SolarSkill_Projectile.OnTeamIgnoreCollisionActorChange // (Final|Native|Protected) // @ game+0x289b090
	void OnRep_ReceiveAttachActorEndPlay(); // Function Solarland.SolarSkill_Projectile.OnRep_ReceiveAttachActorEndPlay // (Native|Protected) // @ game+0x826920
	void OnRep_ProjectileVelocity(); // Function Solarland.SolarSkill_Projectile.OnRep_ProjectileVelocity // (Final|Native|Protected) // @ game+0x289a960
	void OnRep_ProjectileStopResult(); // Function Solarland.SolarSkill_Projectile.OnRep_ProjectileStopResult // (Final|Native|Protected) // @ game+0x289a940
	void OnRep_AttachActor(); // Function Solarland.SolarSkill_Projectile.OnRep_AttachActor // (Native|Protected) // @ game+0x8265e0
	void OnProjectileMovementStopInternal(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.OnProjectileMovementStopInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x289a860
	void OnProjectileMovementStop(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.OnProjectileMovementStop // (Native|Protected|HasOutParms) // @ game+0x289a780
	void OnProjectileBounce(struct FHitResult& InImpactResult, struct FVector& InImpactVelocity); // Function Solarland.SolarSkill_Projectile.OnProjectileBounce // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x289a650
	void OnChangeOwnerCharacterInternal(); // Function Solarland.SolarSkill_Projectile.OnChangeOwnerCharacterInternal // (Native|Event|Protected|BlueprintEvent) // @ game+0x8266a0
	void OnChangeOwnerCharacter(); // Function Solarland.SolarSkill_Projectile.OnChangeOwnerCharacter // (Final|Native|Protected) // @ game+0x289a560
	void OnAttachSummonItemDeath(struct ASummonItemBase* InSummonItem, enum class ESolarSummonDeathReason InReason); // Function Solarland.SolarSkill_Projectile.OnAttachSummonItemDeath // (Final|Native|Protected) // @ game+0x289a490
	void OnAttachActorEndPlay(struct AActor* InActor, enum class EEndPlayReason InEndPlayReason); // Function Solarland.SolarSkill_Projectile.OnAttachActorEndPlay // (Final|Native|Protected) // @ game+0x289a3c0
	void K2_PlaySound(struct FString InControlledOrSpectatedSoundName, struct FString InTeammateSoundName, struct FString InEnemySoundName); // Function Solarland.SolarSkill_Projectile.K2_PlaySound // (Final|Native|Protected|BlueprintCallable) // @ game+0x289a1e0
	struct ASolarCharacter* GetOwnerCharacter(); // Function Solarland.SolarSkill_Projectile.GetOwnerCharacter // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x289a1b0
	void ExplodeInternal(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.ExplodeInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x289a0a0
};

// Class Solarland.SolarSkill_Blink
// Size: 0x710 (Inherited: 0x650)
struct ASolarSkill_Blink : ASolarSkill_Projectile {
	bool bDrawDebug; // 0x648(0x01)
	struct UGameplayEffect* WaitingBlinkEffectClass; // 0x650(0x08)
	char pad_659[0xb7]; // 0x659(0xb7)

	void OnMoveStopped(struct FHitResult& ImpactResult); // Function Solarland.SolarSkill_Blink.OnMoveStopped // (Final|Native|Public|HasOutParms) // @ game+0x2896f90
};

// Class Solarland.SolarSkill_ClusterGrenade
// Size: 0x7c0 (Inherited: 0x650)
struct ASolarSkill_ClusterGrenade : ASolarSkill_Projectile {
	float Speed; // 0x648(0x04)
	float ThrowAngleOffset; // 0x64c(0x04)
	float ExplosionRadius; // 0x650(0x04)
	struct UStaticMeshComponent* ClusterGrenadeMesh; // 0x658(0x08)
	bool bIsLeader; // 0x660(0x01)
	float Damage; // 0x664(0x04)
	struct FRuntimeFloatCurve DamageScaleByDistanceCurve; // 0x668(0x88)
	struct TArray<enum class EObjectTypeQuery> CanDamageObjectTypes; // 0x6f0(0x10)
	float DelayDestroyTime; // 0x700(0x04)
	char pad_705[0x3]; // 0x705(0x03)
	struct TArray<struct FSolarSubClusterGrenadeData> SubClusterGrenades; // 0x708(0x10)
	bool bTeammateDamage; // 0x718(0x01)
	char pad_719[0x7]; // 0x719(0x07)
	struct TArray<struct TWeakObjectPtr<struct ASolarSkill_ClusterGrenade>> ClusterGrenadeIgnoreArray; // 0x720(0x10)
	struct FHitResult CachedExplodeHitResult; // 0x730(0x88)
	char pad_7B8[0x8]; // 0x7b8(0x08)
};

// Class Solarland.SolarSkill_EMP
// Size: 0x690 (Inherited: 0x650)
struct ASolarSkill_EMP : ASolarSkill_Projectile {
	float TestRadius; // 0x648(0x04)
	float DamageToShield; // 0x64c(0x04)
	float DamageToSummon; // 0x650(0x04)
	struct TArray<enum class EObjectTypeQuery> TestObjectTypes; // 0x658(0x10)
	float DelayDestroyTime; // 0x668(0x04)
	struct AActor* PerformActorClass; // 0x670(0x08)
	struct AActor* EnemyPerformActorClass; // 0x678(0x08)
	float PerformActorLifeTime; // 0x680(0x04)
	bool bSpawndPerformActor; // 0x684(0x01)
	char pad_685[0xb]; // 0x685(0x0b)
};

// Class Solarland.SolarSkill_EMPForceField
// Size: 0x630 (Inherited: 0x4b0)
struct ASolarSkill_EMPForceField : ASummonItemBase {
	struct TArray<enum class EActorRegisterType> TestTypes; // 0x4b0(0x10)
	struct FVector2D TestRange; // 0x4c0(0x08)
	struct FName CoreName; // 0x4c8(0x08)
	struct TMap<enum class ESolarEMPParticleType, struct FSolarEMPParticleInfo> EMPParticleTable; // 0x4d0(0x50)
	float ForceFieldReadyTime; // 0x520(0x04)
	float ForceFieldActiveTime; // 0x524(0x04)
	float ForceFieldEndTime; // 0x528(0x04)
	char pad_52C[0x4]; // 0x52c(0x04)
	struct FString EMPStartSoundName; // 0x530(0x10)
	struct FString EMPEndSoundName; // 0x540(0x10)
	struct FString DamageShiledSoundName; // 0x550(0x10)
	struct FSoftClassPath EffectActorClassPathForTeammate; // 0x560(0x18)
	struct FSoftClassPath EffectActorClassPathForEnemy; // 0x578(0x18)
	float DamageValueToCharacterShield; // 0x590(0x04)
	float DamageCharacterShieldInterval; // 0x594(0x04)
	float FixedDamageValueToCharacterShield; // 0x598(0x04)
	char pad_59C[0x4]; // 0x59c(0x04)
	struct TMap<struct TWeakObjectPtr<struct AActor>, struct FActiveGameplayEffectHandle> TestActorMap; // 0x5a0(0x50)
	struct TWeakObjectPtr<struct UShapeComponent> CoreComponent; // 0x5f0(0x08)
	struct TArray<struct UParticleSystemComponent*> ManualReleaseEmitterArray; // 0x5f8(0x10)
	char pad_608[0x1]; // 0x608(0x01)
	enum class ESolarEMPForceFieldState CurrentEMPState; // 0x609(0x01)
	char pad_60A[0x6]; // 0x60a(0x06)
	struct ASolarSkill_ForceFieldEffect* EffectActor; // 0x610(0x08)
	char pad_618[0x18]; // 0x618(0x18)

	void OnTestActorEndPlay(struct AActor* InActor, enum class EEndPlayReason InEndPlayReason); // Function Solarland.SolarSkill_EMPForceField.OnTestActorEndPlay // (Final|Native|Protected) // @ game+0x28970f0
	void OnRep_CurrentState(); // Function Solarland.SolarSkill_EMPForceField.OnRep_CurrentState // (Final|Native|Protected) // @ game+0x28970b0
	void MulticastOnDamagedCharacterShield(struct ASolarCharacter* InCharacter); // Function Solarland.SolarSkill_EMPForceField.MulticastOnDamagedCharacterShield // (Net|Native|Event|NetMulticast|Protected) // @ game+0x2896680
	void K2_OnDamagedCharacterShield(struct ASolarCharacter* InCharacter); // Function Solarland.SolarSkill_EMPForceField.K2_OnDamagedCharacterShield // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarSkill_ForceFieldEffect
// Size: 0x228 (Inherited: 0x228)
struct ASolarSkill_ForceFieldEffect : AActor {

	void PlayLoopAnimation(); // Function Solarland.SolarSkill_ForceFieldEffect.PlayLoopAnimation // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void PlayFadeOutAnimation(); // Function Solarland.SolarSkill_ForceFieldEffect.PlayFadeOutAnimation // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void PlayFadeInAnimation(); // Function Solarland.SolarSkill_ForceFieldEffect.PlayFadeInAnimation // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarSkill_Grenade
// Size: 0x6e0 (Inherited: 0x650)
struct ASolarSkill_Grenade : ASolarSkill_Projectile {
	struct FRuntimeFloatCurve DamageCurve; // 0x648(0x88)
	char pad_6D8[0x8]; // 0x6d8(0x08)
};

// Class Solarland.SolarSkill_Incendiary
// Size: 0x7e0 (Inherited: 0x650)
struct ASolarSkill_Incendiary : ASolarSkill_Projectile {
	struct FVector FireDecalSize; // 0x650(0x0c)
	char pad_65C[0x4]; // 0x65c(0x04)
	struct TSoftObjectPtr<UParticleSystem> FireParticle; // 0x660(0x28)
	struct TSoftObjectPtr<UMaterialInterface> FireDecalMaterial; // 0x688(0x28)
	struct TSoftObjectPtr<UParticleSystem> BuffParticle; // 0x6b0(0x28)
	struct FName BuffAttachPointName; // 0x6d8(0x08)
	float DelayDestroyTime; // 0x6e0(0x04)
	int32_t FireEffectCountMax; // 0x6e4(0x04)
	float BurnRamainTime; // 0x6e8(0x04)
	char pad_6EC[0x4]; // 0x6ec(0x04)
	struct TArray<enum class EObjectTypeQuery> DetectableObjectTypes; // 0x6f0(0x10)
	struct FName FireDecalFadeOutName; // 0x700(0x08)
	bool bTeammateDamage; // 0x708(0x01)
	bool bOnlyOne; // 0x709(0x01)
	bool bListenLandscape; // 0x70a(0x01)
	char pad_70B[0x5]; // 0x70b(0x05)
	struct TArray<struct UParticleSystemComponent*> FireParticleSystemComponents; // 0x710(0x10)
	struct UDecalComponent* FireDecalComponent; // 0x720(0x08)
	struct UStaticMeshComponent* IncendiaryMesh; // 0x728(0x08)
	struct UAkComponent* AkComponent; // 0x730(0x08)
	bool bInBuring; // 0x738(0x01)
	char pad_739[0x3]; // 0x739(0x03)
	int32_t CurrentFireEffectCount; // 0x73c(0x04)
	char pad_740[0x8]; // 0x740(0x08)
	struct UMaterialInstanceDynamic* FireDecalDynamicMaterial; // 0x748(0x08)
	float FireDecalFadeOutTimer; // 0x750(0x04)
	float BurnRadius; // 0x754(0x04)
	float BurnHeight; // 0x758(0x04)
	char pad_75C[0x4]; // 0x75c(0x04)
	struct TArray<enum class EObjectTypeQuery> QueryObjectTypeArray; // 0x760(0x10)
	struct TMap<struct AActor*, float> ClassTypeDamageValueMap; // 0x770(0x50)
	float DamageTimeInternal; // 0x7c0(0x04)
	char pad_7C4[0x1c]; // 0x7c4(0x1c)

	void ReceviceExplodeEvent(); // Function Solarland.SolarSkill_Incendiary.ReceviceExplodeEvent // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceviceDestroyEvent(); // Function Solarland.SolarSkill_Incendiary.ReceviceDestroyEvent // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceviceDamageActorEvent(struct AActor* InActor); // Function Solarland.SolarSkill_Incendiary.ReceviceDamageActorEvent // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void PostSoundEvent(struct FString InSoundEvent, bool InbHasCamp, struct AActor* InTarget); // Function Solarland.SolarSkill_Incendiary.PostSoundEvent // (Final|Native|Protected|BlueprintCallable) // @ game+0x289b2b0
	void MulticastOnDamagedActor(struct AActor* InActor); // Function Solarland.SolarSkill_Incendiary.MulticastOnDamagedActor // (Net|Native|Event|NetMulticast|Protected) // @ game+0x289a330
	struct UObject* GetClassType(); // Function Solarland.SolarSkill_Incendiary.GetClassType // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x289a180
};

// Class Solarland.SolarSkill_SkeletealMeshProjectile
// Size: 0x650 (Inherited: 0x650)
struct ASolarSkill_SkeletealMeshProjectile : ASolarSkill_Projectile {
};

// Class Solarland.SolarSkill_PenetrateGrenade
// Size: 0x960 (Inherited: 0x650)
struct ASolarSkill_PenetrateGrenade : ASolarSkill_SkeletealMeshProjectile {
	float OnStopDestroyTime; // 0x650(0x04)
	float TraceTestDistance; // 0x654(0x04)
	float ReadyTime; // 0x658(0x04)
	char pad_65C[0x4]; // 0x65c(0x04)
	struct FSolarEffectData FrontReadyEffectData; // 0x660(0x50)
	struct FSolarEffectData BackReadyEffectData; // 0x6b0(0x50)
	float StartDamageTime; // 0x700(0x04)
	bool bCanDamageTeamate; // 0x704(0x01)
	char pad_705[0x3]; // 0x705(0x03)
	float DamageInterval; // 0x708(0x04)
	float DefaultDamage; // 0x70c(0x04)
	struct TMap<struct AActor*, float> ClassTypeDamageMap; // 0x710(0x50)
	struct FSolarDamageShapeData FrontDamageData; // 0x760(0x90)
	struct FSolarDamageShapeData BackDamageData; // 0x7f0(0x90)
	struct TArray<enum class EObjectTypeQuery> DamageObjectTypeArray; // 0x880(0x10)
	struct FString StartHitLoopSoundName1P; // 0x890(0x10)
	struct FString StartHitLoopSoundName3P; // 0x8a0(0x10)
	struct FString StartHitLoopSoundName3PEnemy; // 0x8b0(0x10)
	struct FString StopHitLoopSoundName1P; // 0x8c0(0x10)
	struct FString StopHitLoopSoundName3P; // 0x8d0(0x10)
	struct FString StopHitLoopSoundName3PEnemy; // 0x8e0(0x10)
	struct FString HitLoopSoundSwitchGroupName; // 0x8f0(0x10)
	struct FString HitLoopSoundSwitchStateName; // 0x900(0x10)
	float OnStopHitLoopSoundSetSwitchBeforeTime; // 0x910(0x04)
	char pad_914[0x4]; // 0x914(0x04)
	struct UParticleSystemComponent* FrontEffectEmitter; // 0x918(0x08)
	struct UParticleSystemComponent* BackEffectEmitter; // 0x920(0x08)
	char pad_928[0x28]; // 0x928(0x28)
	struct FRotator OnLandscapeAdjustRotation; // 0x950(0x0c)
	char pad_95C[0x4]; // 0x95c(0x04)

	void OnStopDestroy(); // Function Solarland.SolarSkill_PenetrateGrenade.OnStopDestroy // (Final|Native|Protected) // @ game+0x289b070
	void OnPenetrateGrenadeStartDamage(); // Function Solarland.SolarSkill_PenetrateGrenade.OnPenetrateGrenadeStartDamage // (Final|Native|Protected) // @ game+0x289a630
	void OnPenetrateGrenadeReady(); // Function Solarland.SolarSkill_PenetrateGrenade.OnPenetrateGrenadeReady // (Final|Native|Protected) // @ game+0x289a610
	void OnGrenadeLand(float InServerPenetrateDistance, float InServerTime); // Function Solarland.SolarSkill_PenetrateGrenade.OnGrenadeLand // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1b0cc00
	void K2_OnStopDestroy(); // Function Solarland.SolarSkill_PenetrateGrenade.K2_OnStopDestroy // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnPenetrateGrenadeStartDamage(); // Function Solarland.SolarSkill_PenetrateGrenade.K2_OnPenetrateGrenadeStartDamage // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnPenetrateGrenadeReady(float InDeltaDistance); // Function Solarland.SolarSkill_PenetrateGrenade.K2_OnPenetrateGrenadeReady // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarSkill_CapsuleProjectile
// Size: 0x650 (Inherited: 0x650)
struct ASolarSkill_CapsuleProjectile : ASolarSkill_Projectile {
};

// Class Solarland.SolarSkill_SphereProjectile
// Size: 0x650 (Inherited: 0x650)
struct ASolarSkill_SphereProjectile : ASolarSkill_Projectile {
};

// Class Solarland.SolarSkill_BoxProjectile
// Size: 0x650 (Inherited: 0x650)
struct ASolarSkill_BoxProjectile : ASolarSkill_Projectile {
};

// Class Solarland.SolarSkill_StaticMeshProjectile
// Size: 0x650 (Inherited: 0x650)
struct ASolarSkill_StaticMeshProjectile : ASolarSkill_Projectile {
};

// Class Solarland.SolarSkill_ProjectileInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarSkill_ProjectileInterface : UInterface {

	void SetStartAndTargetTransform(struct FTransform& InStartTransform, struct FTransform& InTargetTransform); // Function Solarland.SolarSkill_ProjectileInterface.SetStartAndTargetTransform // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x289b840
	void SetProjectileVelocity(struct UProjectileMovementComponent* InProjectileMovementComponent, struct FVector& InVelocity, bool bCalculateVelocity, float InSpeed, float InVelocityPitchOffset); // Function Solarland.SolarSkill_ProjectileInterface.SetProjectileVelocity // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x289b670
	void SetGameplayEffectHandle(struct FGameplayEffectSpecHandle InGameplayEffectHandleToSelf, struct FGameplayEffectSpecHandle InGameplayEffectHandleToTarget); // Function Solarland.SolarSkill_ProjectileInterface.SetGameplayEffectHandle // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x289b500
	struct UProjectileMovementComponent* GetProjectileMovementComponent(); // Function Solarland.SolarSkill_ProjectileInterface.GetProjectileMovementComponent // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x27333e0
};

// Class Solarland.SolarSkillAndBuffDurationWidget
// Size: 0x490 (Inherited: 0x400)
struct USolarSkillAndBuffDurationWidget : USolarUserWidget {
	struct USolarSkillSubDurationWidget* UI_Skill_Duration_Super; // 0x400(0x08)
	struct USolarSkillSubDurationWidget* UI_Skill_Duration_Tactical; // 0x408(0x08)
	struct USolarSkillSubDurationWidget* UI_Skill_Duration_Tactical_2; // 0x410(0x08)
	struct USolarSkillSubDurationWidget* UI_Skill_Duration_Tactical_3; // 0x418(0x08)
	struct FBuffDurationInfo MainBuffInfo; // 0x420(0x60)
	struct TArray<struct FBuffDurationInfo> SubBuffInfo; // 0x480(0x10)

	void UpdateSubWidget(); // Function Solarland.SolarSkillAndBuffDurationWidget.UpdateSubWidget // (Final|Native|Private) // @ game+0x289b9b0
	void OnRoleAbilityBuffUpdate(struct FActiveGameplayEffectHandle& ActiveEffectHandle, float Duration, float RemainTime, bool bInPrePhase, float PreDuration, float PreRemainTime); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffUpdate // (Final|Native|Private|HasOutParms) // @ game+0x289ae80
	void OnRoleAbilityBuffResume(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffResume // (Final|Native|Private) // @ game+0x289ad70
	void OnRoleAbilityBuffRemoved(bool bIsMainDuration, struct FActiveGameplayEffectHandle& ActiveEffectHandle); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffRemoved // (Final|Native|Private|HasOutParms) // @ game+0x289ac90
	void OnRoleAbilityBuffPause(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffPause // (Final|Native|Private) // @ game+0x289ab80
	void OnRoleAbilityBuffApplied(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex, float Duration, float PreDuration, struct FActiveGameplayEffectHandle& ActiveEffectHandle); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffApplied // (Final|Native|Private|HasOutParms) // @ game+0x289a980
	void OnCharacterChange(int32_t InCharacterId); // Function Solarland.SolarSkillAndBuffDurationWidget.OnCharacterChange // (Final|Native|Private) // @ game+0x289a580
};

// Class Solarland.SolarSkillGA_SuperEMP
// Size: 0x6a0 (Inherited: 0x690)
struct USolarSkillGA_SuperEMP : USolarSkillGA_Summon {
	struct FString LocalActiveAbilityAudioName; // 0x688(0x10)
	int32_t EMPLevel; // 0x698(0x04)
};

// Class Solarland.SolarSkillGATA_Projectile
// Size: 0x430 (Inherited: 0x340)
struct ASolarSkillGATA_Projectile : AGameplayAbilityTargetActor {
	struct FSolarSkillProjectileData PredictData; // 0x340(0xd0)
	char pad_410[0x20]; // 0x410(0x20)
};

// Class Solarland.SolarSkillGATA_Spline
// Size: 0x460 (Inherited: 0x430)
struct ASolarSkillGATA_Spline : ASolarSkillGATA_Projectile {
	struct USceneComponent* SplineRoot; // 0x430(0x08)
	struct TArray<struct UStaticMeshComponent*> HitPointMeshes; // 0x438(0x10)
	struct TArray<struct USplineMeshComponent*> SplineMeshComponents; // 0x448(0x10)
	bool bVisibilityPropagateToChildren; // 0x458(0x01)
	char pad_459[0x7]; // 0x459(0x07)
};

// Class Solarland.SolarSkillGATA_Blink
// Size: 0x460 (Inherited: 0x460)
struct ASolarSkillGATA_Blink : ASolarSkillGATA_Spline {
};

// Class Solarland.SolarSkillGATA_ChaSocketLoc
// Size: 0x340 (Inherited: 0x340)
struct ASolarSkillGATA_ChaSocketLoc : AGameplayAbilityTargetActor {
	struct FName SocketName; // 0x338(0x08)
};

// Class Solarland.SolarSkillGATA_MissileSwarm
// Size: 0x380 (Inherited: 0x340)
struct ASolarSkillGATA_MissileSwarm : AGameplayAbilityTargetActor {
	struct ASolarCharacter* SourceCharacter; // 0x338(0x08)
	struct TArray<struct UStaticMeshComponent*> PreviewMeshes; // 0x340(0x10)
	struct UStaticMesh* PreviewMeshTemplate; // 0x350(0x08)
	struct UMaterialInterface* PreviewMaterial; // 0x358(0x08)
	struct UMissileSwarmConfig* SkillConfig; // 0x360(0x08)
	char pad_370[0x10]; // 0x370(0x10)
};

// Class Solarland.SolarSkillGATA_Summon
// Size: 0x510 (Inherited: 0x430)
struct ASolarSkillGATA_Summon : ASolarSkillGATA_Projectile {
	struct USceneComponent* PreviewRoot; // 0x430(0x08)
	struct USkeletalMeshComponent* PreviewSkeletalMeshComponent; // 0x438(0x08)
	struct UStaticMeshComponent* PreviewStaticMeshComponent; // 0x440(0x08)
	struct UStaticMeshComponent* PreviewCheckMeshComponent; // 0x448(0x08)
	struct FSoftObjectPath SummonConfigPath; // 0x450(0x18)
	struct USolarSummonDetectionConfig* SummonConfig; // 0x468(0x08)
	struct AActor* SummonActorClass; // 0x470(0x08)
	float KeyDownTime; // 0x478(0x04)
	bool bStopUpdatePreview; // 0x47c(0x01)
	char pad_47D[0x3]; // 0x47d(0x03)
	struct FHitResult StopPreviewHitResult; // 0x480(0x88)
	struct USplineMeshComponent* SplineComponent; // 0x508(0x08)

	void K2_UpdatePreview(bool bInCanPlace, struct FPredictProjectilePathResult& InPredictPathResult, int32_t InIndex); // Function Solarland.SolarSkillGATA_Summon.K2_UpdatePreview // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarSkillGATA_RainOfArrow
// Size: 0x540 (Inherited: 0x510)
struct ASolarSkillGATA_RainOfArrow : ASolarSkillGATA_Summon {
	float MinRange; // 0x510(0x04)
	char pad_514[0x4]; // 0x514(0x04)
	struct TArray<struct FVectorParameterValue> ValidSplineColors; // 0x518(0x10)
	struct TArray<struct FVectorParameterValue> InvalidSplineColors; // 0x528(0x10)
	char pad_538[0x8]; // 0x538(0x08)
};

// Class Solarland.SolarSkillGC_Freeze
// Size: 0x360 (Inherited: 0x298)
struct ASolarSkillGC_Freeze : AGameplayCueNotify_Actor {
	struct UParticleSystem* IceSmokeParticle; // 0x298(0x08)
	struct FName IceSmokeAttachPointName; // 0x2a0(0x08)
	char pad_2A8[0x8]; // 0x2a8(0x08)
	struct FTransform IceSmokeTransform; // 0x2b0(0x30)
	struct UParticleSystemComponent* IceSmokeParticleHandle; // 0x2e0(0x08)
	struct FString FreezeStartSoundName1P; // 0x2e8(0x10)
	struct FString FreezeStartSoundName3P; // 0x2f8(0x10)
	struct FString FreezeStartSoundName3PEnemy; // 0x308(0x10)
	struct FString FreezeEndSoundName1P; // 0x318(0x10)
	struct FString FreezeEndSoundName3P; // 0x328(0x10)
	struct FString FreezeEndSoundName3PEnemy; // 0x338(0x10)
	struct UMaterialSimpleEffect* FreezeMatEffectClass; // 0x348(0x08)
	char pad_350[0x10]; // 0x350(0x10)
};

// Class Solarland.SolarSkillGC_RapidBoost
// Size: 0x2b8 (Inherited: 0x298)
struct ASolarSkillGC_RapidBoost : AGameplayCueNotify_Actor {
	struct USolarAbilitySystemComponent* CachedAbilitySystemComponent; // 0x298(0x08)
	int32_t InBackpackFXHandle; // 0x2a0(0x04)
	struct FGameplayTag EffectTag; // 0x2a4(0x08)
	struct FName EffectName; // 0x2ac(0x08)
	char pad_2B4[0x4]; // 0x2b4(0x04)
};

// Class Solarland.SolarSkillGC_SurroundLightning
// Size: 0x2f8 (Inherited: 0x298)
struct ASolarSkillGC_SurroundLightning : AGameplayCueNotify_Actor {
	struct TMap<enum class ESolarSurroundLightningApplyType, struct FSolarSurroundLightningConfig> SurroundLightningApplyTypeConfigs; // 0x298(0x50)
	struct FName EMPEffectID; // 0x2e8(0x08)
	int32_t CharacterEffectHandle; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
};

// Class Solarland.SolarSkillSubDurationWidget
// Size: 0x4d0 (Inherited: 0x400)
struct USolarSkillSubDurationWidget : USolarUserWidget {
	struct USolarImage* Img_Skill; // 0x400(0x08)
	struct UProgressBar* Progress_Duration_L; // 0x408(0x08)
	struct UProgressBar* Progress_Duration_R; // 0x410(0x08)
	struct UProgressBar* Progress_Recharge; // 0x418(0x08)
	struct USolarInputButton* Btn_Cancel; // 0x420(0x08)
	struct UWidget* Panel_CancelAbility_KeyMapping; // 0x428(0x08)
	struct UWidgetAnimation* Enter_Anim; // 0x430(0x08)
	struct UWidgetAnimation* Exit_Anim; // 0x438(0x08)
	struct UWidgetAnimation* Prompt_Anim; // 0x440(0x08)
	struct UWidgetAnimation* Anim_Skill_Start; // 0x448(0x08)
	float ProgressUpdateInterval; // 0x450(0x04)
	float MainProgressDisableOpacity; // 0x454(0x04)
	char pad_458[0x78]; // 0x458(0x78)

	void UpdateWidget(); // Function Solarland.SolarSkillSubDurationWidget.UpdateWidget // (Final|Native|Private) // @ game+0x289f840
	void OnRoleAbilityBuffEnd(); // Function Solarland.SolarSkillSubDurationWidget.OnRoleAbilityBuffEnd // (Final|Native|Public) // @ game+0x289f240
	void OnRoleAbilityBuffContinous(struct FBuffDurationInfo& Info); // Function Solarland.SolarSkillSubDurationWidget.OnRoleAbilityBuffContinous // (Final|Native|Public|HasOutParms) // @ game+0x289f160
};

// Class Solarland.SolarSkillSubsystem
// Size: 0x178 (Inherited: 0x30)
struct USolarSkillSubsystem : UWorldSubsystem {
	char pad_30[0x20]; // 0x30(0x20)
	struct TArray<struct TWeakObjectPtr<struct UUserWidget>> FullScreenWidgetArray; // 0x50(0x10)
	char pad_60[0x118]; // 0x60(0x118)

	bool TryGetGeneralSummonHitResult(struct FHitResult& OutHitResult, struct AActor* InSummoner, struct USolarSummonDetectionConfig* InSummonConfig); // Function Solarland.SolarSkillSubsystem.TryGetGeneralSummonHitResult // (Final|Native|Public|HasOutParms) // @ game+0x289f6b0
	bool IsWithinQuickSummonTime(struct USolarSummonDetectionConfig* InSummonConfig, float InStartTime); // Function Solarland.SolarSkillSubsystem.IsWithinQuickSummonTime // (Final|Native|Public|BlueprintCallable) // @ game+0x289f090
	void HideSkillFullScreenWidget(struct UObject* InWidgetClass, enum class ESlateVisibility InSlateVisibility); // Function Solarland.SolarSkillSubsystem.HideSkillFullScreenWidget // (Final|Native|Public) // @ game+0x289eef0
	struct FRotator GetSummonPlaceOrientation(struct FVector& InPlaceLocation, struct FVector& InPlaceNormal, struct FRotator& InRotOffset); // Function Solarland.SolarSkillSubsystem.GetSummonPlaceOrientation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x289ed90
	struct UUserWidget* GetSkillFullScreenWidget(struct UObject* InWidgetClass); // Function Solarland.SolarSkillSubsystem.GetSkillFullScreenWidget // (Final|Native|Public) // @ game+0x289ecf0
	bool CanSummonPlaceSpace(struct FSolarSummonCondition& InCondition, struct FVector& InPlaceLocation, struct FVector& InPlaceNormal, struct FRotator& InPlaceOrientation, enum class ESolarSummonItemType InSummonItemType); // Function Solarland.SolarSkillSubsystem.CanSummonPlaceSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x289e950
	bool CanSummonPlaceAngle(struct FSolarSummonCondition& InCondition, struct FVector& InPlaceNormal); // Function Solarland.SolarSkillSubsystem.CanSummonPlaceAngle // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x289e800
	struct UUserWidget* AddSkillFullScreenWidgetToBattlePanel(struct UObject* InWidgetClass); // Function Solarland.SolarSkillSubsystem.AddSkillFullScreenWidgetToBattlePanel // (Final|Native|Public) // @ game+0x289e760
};

// Class Solarland.SolarSoundPlayer
// Size: 0x240 (Inherited: 0x228)
struct ASolarSoundPlayer : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct UAkComponent* AkAudioComponent; // 0x230(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x238(0x08)

	struct ASolarSoundPlayer* PostSoundEventAtLocation(struct UObject* WorldContextObject, struct FString EventName, struct FVector& Location, bool bAutoDestroy); // Function Solarland.SolarSoundPlayer.PostSoundEventAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x289f540
	void PostSoundEvent(struct FString EventName); // Function Solarland.SolarSoundPlayer.PostSoundEvent // (Final|Native|Public) // @ game+0x289f4a0
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarSoundPlayer.InitSolarAkGameObject // (Final|Native|Public) // @ game+0x289efc0
};

// Class Solarland.SolarSpawnAdjustConfig
// Size: 0x90 (Inherited: 0x30)
struct USolarSpawnAdjustConfig : UDataAsset {
	bool bDrawDebug; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<enum class EObjectTypeQuery> AdjustBlockTypes; // 0x38(0x10)
	struct FVector AdjustDetectBoxExtent; // 0x48(0x0c)
	struct FVector AdjustDetectBoxOffset; // 0x54(0x0c)
	bool bUseActorRotation; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	float AdjustVerticalDist; // 0x64(0x04)
	float AdjustHorizonDist; // 0x68(0x04)
	float AdjustFindStep; // 0x6c(0x04)
	float TraceUpLength; // 0x70(0x04)
	float TraceDownLength; // 0x74(0x04)
	float TraceZOffset; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct TArray<enum class EObjectTypeQuery> AdjustPlaceTypes; // 0x80(0x10)
};

// Class Solarland.SolarSpecABP_Skill
// Size: 0x2c0 (Inherited: 0x270)
struct USolarSpecABP_Skill : UAnimInstance {
	struct ASolarCharacter* SolarCharacterOwner; // 0x268(0x08)
	float ViewPitch; // 0x270(0x04)
	float ViewYaw; // 0x274(0x04)
	char pad_280[0x4]; // 0x280(0x04)
	float InputDirection; // 0x284(0x04)
	float Speed; // 0x288(0x04)
	char bIsWalking : 1; // 0x28c(0x01)
	char bIsCrouching : 1; // 0x28c(0x01)
	char bIsSixDirRunForward : 1; // 0x28c(0x01)
	char pad_28C_3 : 5; // 0x28c(0x01)
	enum class EWalkMode CurrentWalkMode; // 0x28d(0x01)
	enum class EIdleTurnType IdleTurnType; // 0x28e(0x01)
	char pad_28F[0x1]; // 0x28f(0x01)
	float TurnExplicitTime; // 0x290(0x04)
	float DamageDirection; // 0x294(0x04)
	float DamageReactionAlpha; // 0x298(0x04)
	float DamageNormalizedTime; // 0x29c(0x04)
	enum class EAirMoveMode CurrentAirMoveMode; // 0x2a0(0x01)
	enum class EAirMoveMode LastAirMoveMode; // 0x2a1(0x01)
	char pad_2A2[0xf]; // 0x2a2(0x0f)
	bool bNewJet; // 0x2b1(0x01)
	enum class ESkillAnimType CurrentSkillAnimType; // 0x2b2(0x01)
	enum class ESkillAnimRightHandType CurrentSkillAnimRightHandType; // 0x2b3(0x01)
	char pad_2B4[0xc]; // 0x2b4(0x0c)

	void SetLeftHandIKTransform(struct FTransform& RelativeTrans); // Function Solarland.SolarSpecABP_Skill.SetLeftHandIKTransform // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	struct FVector GetJetPackDashAnimationBlend(); // Function Solarland.SolarSpecABP_Skill.GetJetPackDashAnimationBlend // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x289ecb0
	struct FVector GetInputVector(); // Function Solarland.SolarSpecABP_Skill.GetInputVector // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x289ec70
	float GenJumpDirection(float InInputDirection); // Function Solarland.SolarSpecABP_Skill.GenJumpDirection // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x289ebd0
	bool CheckNewJetAndReset(); // Function Solarland.SolarSpecABP_Skill.CheckNewJetAndReset // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x289eba0
};

// Class Solarland.SolarSpecABP_Vehicle
// Size: 0x3b0 (Inherited: 0x270)
struct USolarSpecABP_Vehicle : UAnimInstance {
	struct ASolarCharacter* SolarCharacterOwner; // 0x268(0x08)
	float ViewPitch; // 0x270(0x04)
	float ViewYaw; // 0x274(0x04)
	enum class EInVehicleState InVehicleState; // 0x278(0x01)
	enum class EVehicleAnimationType CurrentVehicleAnimationType; // 0x279(0x01)
	float CurrentVehicleRotationValue; // 0x27c(0x04)
	struct FVector2D CurrentInputOnVehicle; // 0x280(0x08)
	float LeanTowardRightValue; // 0x288(0x04)
	bool bVehicleInAir; // 0x28c(0x01)
	float AngleBetweenViewAndVehicle; // 0x290(0x04)
	float RotateSpeed; // 0x294(0x04)
	float RotateSpeedForAiming; // 0x298(0x04)
	struct FVector2D CurrentVehicleMoveValue; // 0x29c(0x08)
	char pad_2A7[0x5]; // 0x2a7(0x05)
	float VehicleSpeed; // 0x2ac(0x04)
	enum class EDriveTurnType DriveIdleTurnType; // 0x2b0(0x01)
	char pad_2B1[0x3]; // 0x2b1(0x03)
	float SteeringRoatingratio; // 0x2b4(0x04)
	struct FVector LeftHandOnRudderLocation; // 0x2b8(0x0c)
	struct FVector RightHandOnRudderLocation; // 0x2c4(0x0c)
	enum class EWeaponStatus WeaponStatus; // 0x2d0(0x01)
	bool bIronManForceOutInVehicleState; // 0x2d1(0x01)
	char pad_2D2[0x2]; // 0x2d2(0x02)
	struct FVector2D CurrentIronManSprintInput; // 0x2d4(0x08)
	struct FVector IronManHandRIKLocation; // 0x2dc(0x0c)
	bool bIronManUseIK; // 0x2e8(0x01)
	bool bIronManPlayBrakeAnim; // 0x2e9(0x01)
	char pad_2EA[0x2]; // 0x2ea(0x02)
	float BrakeAnimBlendOutInputYThreshold; // 0x2ec(0x04)
	float IronManIKAlpha; // 0x2f0(0x04)
	bool bIronManCanFlyFlight; // 0x2f4(0x01)
	char pad_2F5[0x3]; // 0x2f5(0x03)
	float IronManIKOffsetDegree; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)
	struct TArray<struct FAnimBlendPointInfo> IronManFireAnimBlendDatas; // 0x300(0x10)
	int32_t IronManFireAnimPointIndexs[0x5]; // 0x310(0x14)
	char pad_324[0x4]; // 0x324(0x04)
	struct TArray<float> IronManFireAlphas; // 0x328(0x10)
	struct UCurveFloat* IronManAttackIKAlphaCurve; // 0x338(0x08)
	char pad_340[0x8]; // 0x340(0x08)
	struct TMap<enum class EAnimBlendDirection, struct FFloatRange> RotationTypeRangeMap; // 0x348(0x50)
	enum class EAnimBlendDirection CurrentRidingDirection; // 0x398(0x01)
	char pad_399[0x3]; // 0x399(0x03)
	float AimOffsetYaw; // 0x39c(0x04)
	char pad_3A0[0x10]; // 0x3a0(0x10)
};

// Class Solarland.SolarSpecialEffectsMgr
// Size: 0x30 (Inherited: 0x28)
struct USolarSpecialEffectsMgr : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.SolarSpectateInfo
// Size: 0x578 (Inherited: 0x228)
struct ASolarSpectateInfo : AActor {
	struct FMulticastInlineDelegate OnBeginUpdateSpectateInfo; // 0x228(0x10)
	struct FMulticastInlineDelegate OnStopUpdateSpectateInfo; // 0x238(0x10)
	struct FMulticastInlineDelegate OnOtherPlayerBeginSpectateMe; // 0x248(0x10)
	struct FMulticastInlineDelegate OnOtherPlayerStopSpectateMe; // 0x258(0x10)
	struct FMulticastInlineDelegate OnBeforeSpectateTargetChange; // 0x268(0x10)
	struct FMulticastInlineDelegate OnSpectateTargetChanged; // 0x278(0x10)
	struct FMulticastInlineDelegate OnSpectatePhaseChanged; // 0x288(0x10)
	struct FMulticastInlineDelegate OnSwitchSpectateTargetFailed; // 0x298(0x10)
	struct FMulticastInlineDelegate OnSpectatorOfMyTargetChanged; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnSpectateCharacterOfMyTargetReadied; // 0x2b8(0x10)
	enum class ESpectatePhase SpectatePhase; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
	struct ASolarPlayerState* SpectateTargetPlayerState; // 0x2d0(0x08)
	char pad_2D8[0x10]; // 0x2d8(0x10)
	struct TArray<struct ASolarPlayerState*> PlayersSpectatingMyTarget; // 0x2e8(0x10)
	struct TArray<struct ASolarPlayerState*> PlayersSpectatingMe; // 0x2f8(0x10)
	char pad_308[0x10]; // 0x308(0x10)
	bool bIsServerRecording; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)
	struct USolarReplayManager* ReplayManager; // 0x320(0x08)
	struct FSpectateConditions SpectateConditions; // 0x328(0x20)
	char pad_348[0x80]; // 0x348(0x80)
	struct TArray<struct FGiftSenderInfo> SendGiftPlayerInfo; // 0x3c8(0x10)
	struct FInteractiveTaskStatus TaskStatus; // 0x3d8(0x78)
	struct UDataTable* InteractiveTaskTable; // 0x450(0x08)
	struct FString TaskTablePath; // 0x458(0x10)
	struct ASolarPlayerState* LatestAttacker; // 0x468(0x08)
	struct ASolarPlayerState* LatestVictim; // 0x470(0x08)
	char pad_478[0x10]; // 0x478(0x10)
	float TotalCausedDamage; // 0x488(0x04)
	struct FRotator PlayerCameraRotation; // 0x48c(0x0c)
	struct TArray<struct FReplicateItemData> CharacterBackpackItems; // 0x498(0x10)
	struct TArray<struct FReplicateMaxPileData> CharacterBackpackItemMaxPiles; // 0x4a8(0x10)
	float CharacterVJetChargeTime; // 0x4b8(0x04)
	int32_t CharacterVJetTotalTimes; // 0x4bc(0x04)
	int32_t CharacterVJetRestTimes; // 0x4c0(0x04)
	int32_t CharacterVJetModuleLevel; // 0x4c4(0x04)
	float CharacterVJetStartChargeTime; // 0x4c8(0x04)
	float CharacterHJetChargeTime; // 0x4cc(0x04)
	int32_t CharacterHJetTotalTimes; // 0x4d0(0x04)
	int32_t CharacterHJetRestTimes; // 0x4d4(0x04)
	int32_t CharacterHJetModuleLevel; // 0x4d8(0x04)
	float CharacterHJetStartChargeTime; // 0x4dc(0x04)
	struct TArray<struct FCharacterRoleAbilityInfo> CharacterRoleAbilitiesInfo; // 0x4e0(0x10)
	float MassInvisibilityEffectRemainingTime; // 0x4f0(0x04)
	struct FRepCountdownData SpectateCountdownData; // 0x4f4(0x2c)
	struct TArray<struct FBattleUpgradeEffectParamData> BattleUpgradeEffectData; // 0x520(0x10)
	int32_t ExtraARMag; // 0x530(0x04)
	int32_t ExtraSGMag; // 0x534(0x04)
	bool bExposedByRadar; // 0x538(0x01)
	char pad_539[0x7]; // 0x539(0x07)
	struct FVehicleSpectateInfo VehicleSpectateInfo; // 0x540(0x30)
	char bShowBattlePrompt : 1; // 0x570(0x01)
	char pad_570_1 : 7; // 0x570(0x01)
	char pad_571[0x7]; // 0x571(0x07)

	void SetSpectateTargetForPlayingReplay(struct ASolarPlayerState* TargetPlayerState); // Function Solarland.SolarSpectateInfo.SetSpectateTargetForPlayingReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x28a4250
	void ServerStopSpectateOtherPlayer_Internal(); // Function Solarland.SolarSpectateInfo.ServerStopSpectateOtherPlayer_Internal // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1ae5650
	void ServerStopSpectateOtherPlayer(); // Function Solarland.SolarSpectateInfo.ServerStopSpectateOtherPlayer // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x28a4230
	void ServerSpectatePreviousPlayer(); // Function Solarland.SolarSpectateInfo.ServerSpectatePreviousPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x7cf130
	void ServerSpectateNextPlayer(); // Function Solarland.SolarSpectateInfo.ServerSpectateNextPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ae5570
	void ServerSetSpectateConditions_Internal(struct FSpectateConditions InSpectateConditions); // Function Solarland.SolarSpectateInfo.ServerSetSpectateConditions_Internal // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x28a4120
	void ServerSetSpectateConditions(struct FSpectateConditions& InSpectateConditions); // Function Solarland.SolarSpectateInfo.ServerSetSpectateConditions // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28a4010
	void ServerSetClientRecording(bool bInIsClientRecording); // Function Solarland.SolarSpectateInfo.ServerSetClientRecording // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x28a3f80
	void ServerSendGiftAction(int32_t GiftID, int32_t Num); // Function Solarland.SolarSpectateInfo.ServerSendGiftAction // (Net|Native|Event|Public|NetServer) // @ game+0x28a3eb0
	void ServerRequestSendTask(int32_t InTaskID); // Function Solarland.SolarSpectateInfo.ServerRequestSendTask // (Net|Native|Event|Public|NetServer) // @ game+0x28a3e20
	void ServerRequestIncreaseTargetTaskLevel(); // Function Solarland.SolarSpectateInfo.ServerRequestIncreaseTargetTaskLevel // (Net|Native|Event|Public|NetServer) // @ game+0x7ec1b0
	void ServerRequestAvailableTask(); // Function Solarland.SolarSpectateInfo.ServerRequestAvailableTask // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x8265e0
	void ServerChangeLikeValue(int32_t Value, int32_t AddInteractValue, enum class ESocialActionType ActionType); // Function Solarland.SolarSpectateInfo.ServerChangeLikeValue // (Net|Native|Event|Public|NetServer) // @ game+0x28a3d20
	void ServerBeginSpectateOtherPlayer_Internal(); // Function Solarland.SolarSpectateInfo.ServerBeginSpectateOtherPlayer_Internal // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1ae49f0
	void ServerBeginSpectateOtherPlayer(); // Function Solarland.SolarSpectateInfo.ServerBeginSpectateOtherPlayer // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x28a3d00
	bool SendTask(int32_t InTaskID); // Function Solarland.SolarSpectateInfo.SendTask // (Final|Native|Public) // @ game+0x28a3c60
	void SendGift(int32_t GiftID, int32_t Num); // Function Solarland.SolarSpectateInfo.SendGift // (Final|Native|Public) // @ game+0x28a3b90
	void RequestSendTask(int32_t InTaskID); // Function Solarland.SolarSpectateInfo.RequestSendTask // (Final|Native|Public) // @ game+0x28a3b00
	void RequestIncreaseTargetTaskLevel(); // Function Solarland.SolarSpectateInfo.RequestIncreaseTargetTaskLevel // (Final|Native|Public) // @ game+0x28a3ae0
	void RequestAvailableTask(); // Function Solarland.SolarSpectateInfo.RequestAvailableTask // (Final|Native|Public) // @ game+0x28a3ac0
	void OnTargetSpecInfoSetToItsPlayerState(struct ASolarSpectateInfo* TargetSpecInfo); // Function Solarland.SolarSpectateInfo.OnTargetSpecInfoSetToItsPlayerState // (Final|Native|Private) // @ game+0x28a3a30
	void OnSwitchSpectateTargetFailed__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnSwitchSpectateTargetFailed__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnStopUpdateSpectateInfo__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnStopUpdateSpectateInfo__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnStopRecordingReplay(); // Function Solarland.SolarSpectateInfo.OnStopRecordingReplay // (Final|Native|Public) // @ game+0x28a3a10
	void OnStartRecordingReplay(); // Function Solarland.SolarSpectateInfo.OnStartRecordingReplay // (Final|Native|Public) // @ game+0x28a39f0
	void OnSpectatorOfMyTargetChanged__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnSpectatorOfMyTargetChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSpectateTargetChanged__DelegateSignature(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnSpectateTargetChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSpectatePhaseChanged__DelegateSignature(enum class ESpectatePhase CurrentPhase); // DelegateFunction Solarland.SolarSpectateInfo.OnSpectatePhaseChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnSpectateCharacterOfMyTargetReadied__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnSpectateCharacterOfMyTargetReadied__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnRep_VehicleSpectateInfo(struct FVehicleSpectateInfo& PreviousVehicleSpectateInfo); // Function Solarland.SolarSpectateInfo.OnRep_VehicleSpectateInfo // (Final|Native|Protected|HasOutParms) // @ game+0x28a3900
	void OnRep_TotalCausedDamage(); // Function Solarland.SolarSpectateInfo.OnRep_TotalCausedDamage // (Final|Native|Public) // @ game+0x28a38e0
	void OnRep_TaskStatus(); // Function Solarland.SolarSpectateInfo.OnRep_TaskStatus // (Final|Native|Public) // @ game+0x28a38c0
	void OnRep_SpectateTargetPlayerState(struct ASolarPlayerState* LastTarget); // Function Solarland.SolarSpectateInfo.OnRep_SpectateTargetPlayerState // (Final|Native|Private) // @ game+0x28a3830
	void OnRep_SpectatePhase(); // Function Solarland.SolarSpectateInfo.OnRep_SpectatePhase // (Final|Native|Private) // @ game+0x28a3810
	void OnRep_SpectateCountdownData(); // Function Solarland.SolarSpectateInfo.OnRep_SpectateCountdownData // (Final|Native|Protected) // @ game+0x28a37f0
	void OnRep_PlayersSpectatingMyTarget(); // Function Solarland.SolarSpectateInfo.OnRep_PlayersSpectatingMyTarget // (Final|Native|Private) // @ game+0x28a37d0
	void OnRep_PlayersSpectatingMe(); // Function Solarland.SolarSpectateInfo.OnRep_PlayersSpectatingMe // (Final|Native|Private) // @ game+0x28a37b0
	void OnRep_ExposedByRadar(); // Function Solarland.SolarSpectateInfo.OnRep_ExposedByRadar // (Final|Native|Protected) // @ game+0x28a3790
	void OnRep_CharacterVJetTotalTimes(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterVJetTotalTimes // (Final|Native|Protected) // @ game+0x28a3770
	void OnRep_CharacterVJetRestTimes(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterVJetRestTimes // (Final|Native|Protected) // @ game+0x28a3750
	void OnRep_CharacterVJetModuleLevel(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterVJetModuleLevel // (Final|Native|Protected) // @ game+0x28a3730
	void OnRep_CharacterRoleAbilitiesInfo(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterRoleAbilitiesInfo // (Final|Native|Private) // @ game+0x28a3710
	void OnRep_CharacterHJetTotalTimes(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterHJetTotalTimes // (Final|Native|Protected) // @ game+0x28a36f0
	void OnRep_CharacterHJetRestTimes(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterHJetRestTimes // (Final|Native|Protected) // @ game+0x28a36d0
	void OnRep_CharacterHJetModuleLevel(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterHJetModuleLevel // (Final|Native|Protected) // @ game+0x28a36b0
	void OnRep_CharacterBackpackItems(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterBackpackItems // (Final|Native|Private) // @ game+0x28a3690
	void OnRep_bIsServerRecording(); // Function Solarland.SolarSpectateInfo.OnRep_bIsServerRecording // (Final|Native|Private) // @ game+0x28a39d0
	void OnRep_BattleUpgradeEffectData(); // Function Solarland.SolarSpectateInfo.OnRep_BattleUpgradeEffectData // (Final|Native|Protected) // @ game+0x28a3670
	void OnOtherPlayerStopSpectateMe__DelegateSignature(struct ASolarPlayerState* SpectatorPlayerState, struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnOtherPlayerStopSpectateMe__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnOtherPlayerBeginSpectateMe__DelegateSignature(struct ASolarPlayerState* SpectatorPlayerState, struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnOtherPlayerBeginSpectateMe__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnOpenAirBoxNum(enum class EStatisticsType InStatType); // Function Solarland.SolarSpectateInfo.OnOpenAirBoxNum // (Final|Native|Public) // @ game+0x28a35f0
	void OnLikeActionCalled(int32_t Value, int32_t AddInteractValue, enum class ESocialActionType ActionType); // Function Solarland.SolarSpectateInfo.OnLikeActionCalled // (Final|Native|Public) // @ game+0x28a34e0
	void OnIncreaseKillNumWithWeaponType(enum class EStatisticsType InStatType, int32_t InWeaponID); // Function Solarland.SolarSpectateInfo.OnIncreaseKillNumWithWeaponType // (Final|Native|Public) // @ game+0x28a3410
	void OnIncreaseKillNumWithPunch(enum class EStatisticsType InStatType); // Function Solarland.SolarSpectateInfo.OnIncreaseKillNumWithPunch // (Final|Native|Public) // @ game+0x28a3390
	void OnIncreaseKillNumWithAnyVehicle(enum class EStatisticsType InStatType); // Function Solarland.SolarSpectateInfo.OnIncreaseKillNumWithAnyVehicle // (Final|Native|Public) // @ game+0x28a3310
	void OnGiftActionCalled(int32_t GiftID, int32_t Num); // Function Solarland.SolarSpectateInfo.OnGiftActionCalled // (Final|Native|Public) // @ game+0x28a3240
	void OnDamageChanged__DelegateSignature(float Damage); // DelegateFunction Solarland.SolarSpectateInfo.OnDamageChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnCurrentPlayerCountChanged(); // Function Solarland.SolarSpectateInfo.OnCurrentPlayerCountChanged // (Final|Native|Public) // @ game+0x28a3220
	void OnBeginUpdateSpectateInfo__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnBeginUpdateSpectateInfo__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnBeforeSpectateTargetChange__DelegateSignature(struct ASolarPlayerState* NewTarget, struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnBeforeSpectateTargetChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnAvailableAirDropsNumChanged(); // Function Solarland.SolarSpectateInfo.OnAvailableAirDropsNumChanged // (Final|Native|Public) // @ game+0x28a3220
	bool NeedUpdateSpectateInfo(); // Function Solarland.SolarSpectateInfo.NeedUpdateSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28a31f0
	bool IsSpectatingOtherPlayer(); // Function Solarland.SolarSpectateInfo.IsSpectatingOtherPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28a31c0
	bool IsRecordingReplay(); // Function Solarland.SolarSpectateInfo.IsRecordingReplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28a31a0
	bool IsClientRecording(); // Function Solarland.SolarSpectateInfo.IsClientRecording // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28a3170
	bool IncreaseTaskLevel(struct ASolarPlayerState* SendPlayer); // Function Solarland.SolarSpectateInfo.IncreaseTaskLevel // (Final|Native|Public) // @ game+0x28a30d0
	struct TArray<struct ASolarPlayerState*> GetSpectatorsOfMyTarget(); // Function Solarland.SolarSpectateInfo.GetSpectatorsOfMyTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x28a3090
	struct TArray<struct ASolarPlayerState*> GetSpectatingMePlayerStates(); // Function Solarland.SolarSpectateInfo.GetSpectatingMePlayerStates // (Final|Native|Public|BlueprintCallable) // @ game+0x28a3050
	struct ASolarPlayerState* GetSpectateTargetPlayerState(); // Function Solarland.SolarSpectateInfo.GetSpectateTargetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x283d070
	struct ASolarCharacter* GetSpectateTargetCharacter(); // Function Solarland.SolarSpectateInfo.GetSpectateTargetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28a3010
	void GetSpectateReportInfo(struct FSpectateReportInfo& SpectateReportInfo, bool HasNextTarget); // Function Solarland.SolarSpectateInfo.GetSpectateReportInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28a2f10
	struct ASolarSpectateInfo* GetSpectateInfoOfMyTarget(); // Function Solarland.SolarSpectateInfo.GetSpectateInfoOfMyTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28a2ee0
	struct FSpectateConditions GetSpectateConditions(); // Function Solarland.SolarSpectateInfo.GetSpectateConditions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28a2da0
	struct ASolarPlayerState* GetSolarPlayerState(); // Function Solarland.SolarSpectateInfo.GetSolarPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28a2d70
	bool GetInteractiveTaskConfigByID(int32_t InTaskID, struct FInteractiveTaskConfig& OutConfig); // Function Solarland.SolarSpectateInfo.GetInteractiveTaskConfigByID // (Final|Native|Public|HasOutParms) // @ game+0x28a2c10
	struct TArray<int32_t> GetAvailableTaskByRandom(); // Function Solarland.SolarSpectateInfo.GetAvailableTaskByRandom // (Final|Native|Public) // @ game+0x28a2b90
	void GetAllInteractiveTaskConfigFromTable(struct TArray<struct FInteractiveTaskConfig>& OutAllConfig); // Function Solarland.SolarSpectateInfo.GetAllInteractiveTaskConfigFromTable // (Final|Native|Public|HasOutParms) // @ game+0x28a2a70
	struct TArray<struct ASolarPlayerState*> GetAllAlivePlayers(); // Function Solarland.SolarSpectateInfo.GetAllAlivePlayers // (Final|Native|Public) // @ game+0x28a29f0
	bool CostCurrencyByTaskAction(int32_t InTaskID, int32_t CurTasklevel); // Function Solarland.SolarSpectateInfo.CostCurrencyByTaskAction // (Final|Native|Public) // @ game+0x28a2920
	void ClientSetVehicleSpectateInfo(struct FVehicleSpectateInfo InSpectateInfo); // Function Solarland.SolarSpectateInfo.ClientSetVehicleSpectateInfo // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x28a2850
	void ClientNotifyTaskActionResult(enum class ESocialActionType ActionType, int32_t InTaskID, int32_t CurTasklevel, struct ASolarPlayerState* SendPlayer, struct ASolarPlayerState* ReceivePlayer, int32_t NowLikeValue); // Function Solarland.SolarSpectateInfo.ClientNotifyTaskActionResult // (Net|Native|Event|Public|NetClient) // @ game+0x28a2670
	void ClientNotifySelfTaskActionResult(enum class ESocialActionType ActionType, int32_t InTaskID, int32_t CurTasklevel, struct ASolarPlayerState* SendPlayer, struct ASolarPlayerState* ReceivePlayer, int32_t NowLikeValue); // Function Solarland.SolarSpectateInfo.ClientNotifySelfTaskActionResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x28a2490
	void ClientNotifySelfLikeValueChanged(enum class ESocialActionType ActionType, int32_t DeltaValue, int32_t NowValue, struct ASolarPlayerState* SendPlayer, struct ASolarPlayerState* ReceivePlayer, int32_t GiftID); // Function Solarland.SolarSpectateInfo.ClientNotifySelfLikeValueChanged // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x28a22b0
	void ClientNotifyLikeValueChanged(enum class ESocialActionType ActionType, int32_t DeltaValue, int32_t NowValue, struct ASolarPlayerState* SendPlayer, struct ASolarPlayerState* ReceivePlayer, int32_t GiftID); // Function Solarland.SolarSpectateInfo.ClientNotifyLikeValueChanged // (Net|Native|Event|Public|NetClient) // @ game+0x28a20d0
	void ClientNotifyAvailableTaskResult(struct TArray<int32_t> AvailableTask); // Function Solarland.SolarSpectateInfo.ClientNotifyAvailableTaskResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x28a2030
	bool CheckIsCanSpectateOthers(); // Function Solarland.SolarSpectateInfo.CheckIsCanSpectateOthers // (Final|Native|Public) // @ game+0x28a2000
	bool CanISpectate(struct ASolarPlayerState* Target); // Function Solarland.SolarSpectateInfo.CanISpectate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28a1f60
};

// Class Solarland.TickWhenPauseCineCameraActor
// Size: 0x880 (Inherited: 0x880)
struct ATickWhenPauseCineCameraActor : ACineCameraActor {
};

// Class Solarland.SolarSpectateLevelSequenceActor
// Size: 0x350 (Inherited: 0x2b8)
struct ASolarSpectateLevelSequenceActor : ALevelSequenceActor {
	struct FSoftObjectPath SwitchTargetSequencePath; // 0x2b8(0x18)
	struct FString AtLeastPlayToMark; // 0x2d0(0x10)
	char pad_2E0[0x18]; // 0x2e0(0x18)
	struct ULevelSequence* SwitchTargetSequence; // 0x2f8(0x08)
	struct ACineCameraActor* SequenceCamera; // 0x300(0x08)
	struct ACameraRig_Crane* SequenceCameraRigCrane; // 0x308(0x08)
	char pad_310[0x40]; // 0x310(0x40)

	void OnSequenceStoped(); // Function Solarland.SolarSpectateLevelSequenceActor.OnSequenceStoped // (Final|Native|Private) // @ game+0x28a7fc0
	void OnSequenceFinished(); // Function Solarland.SolarSpectateLevelSequenceActor.OnSequenceFinished // (Final|Native|Private) // @ game+0x28a7fa0
};

// Class Solarland.SolarSpectatorPawn
// Size: 0x2d0 (Inherited: 0x2b0)
struct ASolarSpectatorPawn : ASpectatorPawn {
	struct USpringArmComponent* SpringArmComponent; // 0x2b0(0x08)
	struct UCameraComponent* CameraComponent; // 0x2b8(0x08)
	struct USolarInputActionContext* InputActionContext; // 0x2c0(0x08)
	char pad_2C8[0x8]; // 0x2c8(0x08)
};

// Class Solarland.SolarSplineMovementComponent
// Size: 0x128 (Inherited: 0xf0)
struct USolarSplineMovementComponent : UMovementComponent {
	struct USplineComponent* SplineComponent; // 0xf0(0x08)
	struct FMulticastInlineDelegate OnSolarSplineMovementComponentStop; // 0xf8(0x10)
	float SplineLengthRatio; // 0x108(0x04)
	struct FRotator SplineRotation; // 0x10c(0x0c)
	char pad_118[0x10]; // 0x118(0x10)
};

// Class Solarland.SolarState
// Size: 0x40 (Inherited: 0x28)
struct USolarState : UObject {
	struct UObject* StateMachineOwner; // 0x28(0x08)
	struct USolarStateMachine* OwnerStateMachine; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)

	void ReceiveUpdateState(float DeltaTime); // Function Solarland.SolarState.ReceiveUpdateState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveInitializeState(); // Function Solarland.SolarState.ReceiveInitializeState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveEndState(struct USolarState* NextState); // Function Solarland.SolarState.ReceiveEndState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveBeginState(); // Function Solarland.SolarState.ReceiveBeginState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct USolarState* K2_CreateSolarState(struct USolarStateMachine* StateMachine, struct USolarState* StateClass, struct FName Name); // Function Solarland.SolarState.K2_CreateSolarState // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x28a7c00
	void GotoState(); // Function Solarland.SolarState.GotoState // (Native|Public|BlueprintCallable) // @ game+0x28a7a60
	struct USolarState* GetState(struct FName& StateClassName); // Function Solarland.SolarState.GetState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28a79c0
};

// Class Solarland.SolarStateMachine
// Size: 0x98 (Inherited: 0x28)
struct USolarStateMachine : UObject {
	struct TMap<struct FName, struct USolarState*> StateMap; // 0x28(0x50)
	struct USolarState* CurrentState; // 0x78(0x08)
	struct USolarState* PreviousState; // 0x80(0x08)
	char pad_88[0x10]; // 0x88(0x10)

	bool IsInState(struct FName& StateName); // Function Solarland.SolarStateMachine.IsInState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28a7b60
	void AddState(struct USolarState* NewState, struct FName& StateName); // Function Solarland.SolarStateMachine.AddState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28a7850
};

// Class Solarland.SolarSummonDetectionConfig
// Size: 0x108 (Inherited: 0x30)
struct USolarSummonDetectionConfig : UDataAsset {
	struct FSolarSummonPreview SummonPreview; // 0x30(0x18)
	bool bEnableQuickSummon; // 0x48(0x01)
	bool bEnableQuickSummonInAir; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
	struct USolarQuickSummonProxy* QuickSummonClass; // 0x50(0x08)
	float QuickSummonTime; // 0x58(0x04)
	bool bEnableCheckCondition; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	struct FSolarSummonCondition SummonCondition; // 0x60(0x80)
	struct FRotator SummonRotOffset; // 0xe0(0x0c)
	enum class ESolarSummonItemType SummonItemType; // 0xec(0x01)
	bool bServerCheck; // 0xed(0x01)
	char pad_EE[0x2]; // 0xee(0x02)
	float ServerSummonMaxDistance; // 0xf0(0x04)
	struct FVector ServerCheckSize; // 0xf4(0x0c)
	float DynamicHeight; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
};

// Class Solarland.SolarSummonEnergyWall
// Size: 0x7e8 (Inherited: 0x790)
struct ASolarSummonEnergyWall : ASolarEnergyShield {
	float HitLocationLifeTime; // 0x790(0x04)
	char pad_794[0x4]; // 0x794(0x04)
	struct TMap<struct FName, struct FSolarSummonTimer> HitLocations; // 0x798(0x50)

	void OnReceiveHitResult(bool InbVisible, struct FName InHitLocationName, struct FHitResult& InHitResult); // Function Solarland.SolarSummonEnergyWall.OnReceiveHitResult // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void HandleHitResult(struct FHitResult& InHitResult); // Function Solarland.SolarSummonEnergyWall.HandleHitResult // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x28a7a80
};

// Class Solarland.SolarSummonInvisibleZone
// Size: 0x5d8 (Inherited: 0x4b0)
struct ASolarSummonInvisibleZone : ASummonItemBase {
	float CylinderRadius; // 0x4b0(0x04)
	float CylinderHeight; // 0x4b4(0x04)
	float CheckCooldown; // 0x4b8(0x04)
	float SetInvisibleDelay; // 0x4bc(0x04)
	struct TArray<struct FInvisibleZoneParticleInfo> BeginParticleInfo; // 0x4c0(0x10)
	struct TArray<struct FInvisibleZoneParticleInfo> DisappearParticleInfo; // 0x4d0(0x10)
	struct UGameplayAbility* InvisibleByZoneAbilityClass; // 0x4e0(0x08)
	struct UGameplayEffect* InvisibleByZoneContinuousEffect; // 0x4e8(0x08)
	struct FString BeginSound; // 0x4f0(0x10)
	struct FString DisappearSound; // 0x500(0x10)
	char pad_510[0xa0]; // 0x510(0xa0)
	struct TArray<struct UParticleSystemComponent*> BeginParticleHandles; // 0x5b0(0x10)
	struct TArray<struct UParticleSystemComponent*> DisappearParticleHandles; // 0x5c0(0x10)
	char pad_5D0[0x8]; // 0x5d0(0x08)
};

// Class Solarland.SolarSummonItemLauncher
// Size: 0x300 (Inherited: 0x228)
struct ASolarSummonItemLauncher : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct USceneComponent* Root; // 0x230(0x08)
	struct USceneComponent* PathRoot; // 0x238(0x08)
	struct USplineComponent* StandardPath; // 0x240(0x08)
	struct USplineComponent* MovePath; // 0x248(0x08)
	struct UAkComponent* AkComponent; // 0x250(0x08)
	struct UStaticMeshComponent* MoveMesh; // 0x258(0x08)
	struct FVector MoveMeshEndLocation; // 0x260(0x0c)
	float LaunchSpeed; // 0x26c(0x04)
	struct AActor* OnEndSpawnActorClass; // 0x270(0x08)
	float DelaySpawnActorTime; // 0x278(0x04)
	struct FName TrajectorySoundGroupName; // 0x27c(0x08)
	char pad_284[0x7c]; // 0x284(0x7c)

	void SpawnActorAndDestroy(); // Function Solarland.SolarSummonItemLauncher.SpawnActorAndDestroy // (Final|Native|Protected) // @ game+0x28a7fe0
	void OnRep_MoveMeshEndLocation(); // Function Solarland.SolarSummonItemLauncher.OnRep_MoveMeshEndLocation // (Final|Native|Protected) // @ game+0x28a7f80
	void K2_PlaySoundGroup(struct FName& InSoundGroupName, struct FSoundGroupPlayContextByCharacter& InContext); // Function Solarland.SolarSummonItemLauncher.K2_PlaySoundGroup // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28a7da0
	void K2_PlaySound(struct FString InEventName); // Function Solarland.SolarSummonItemLauncher.K2_PlaySound // (Final|Native|Public|BlueprintCallable) // @ game+0x28a7d00
	void K2_OnMoveStart(); // Function Solarland.SolarSummonItemLauncher.K2_OnMoveStart // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnMoveEnd(); // Function Solarland.SolarSummonItemLauncher.K2_OnMoveEnd // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarSummonJumpPad
// Size: 0x588 (Inherited: 0x4b0)
struct ASolarSummonJumpPad : ASummonItemBase {
	char pad_4B0[0x58]; // 0x4b0(0x58)
	struct USkeletalMeshComponent* Mesh; // 0x508(0x08)
	struct UAnimSequence* SpawnAnim; // 0x510(0x08)
	struct UAnimSequence* LaunchAnim; // 0x518(0x08)
	float HorizantalSpeedMultipleFac; // 0x520(0x04)
	float MaxHorizantalSpeed; // 0x524(0x04)
	float VerticalSpeed; // 0x528(0x04)
	char pad_52C[0x4]; // 0x52c(0x04)
	struct UGameplayEffect* LaunchCDEffect; // 0x530(0x08)
	struct FName SpawnSound; // 0x538(0x08)
	struct FName DestroySound; // 0x540(0x08)
	struct FName HitSoundAttacker2D; // 0x548(0x08)
	struct FName HitSound; // 0x550(0x08)
	struct FName LaunchSound; // 0x558(0x08)
	struct UParticleSystem* SmokeFX; // 0x560(0x08)
	struct UParticleSystem* DestroyFX; // 0x568(0x08)
	int32_t LaunchCount; // 0x570(0x04)
	int32_t HitCount; // 0x574(0x04)
	float VehicleHitCheckInterval; // 0x578(0x04)
	char pad_57C[0x4]; // 0x57c(0x04)
	struct TWeakObjectPtr<struct UShapeComponent> VehicleCheckShape; // 0x580(0x08)

	void OnRep_LaunchCount(); // Function Solarland.SolarSummonJumpPad.OnRep_LaunchCount // (Final|Native|Protected) // @ game+0x28a7f60
	void OnRep_HitCount(); // Function Solarland.SolarSummonJumpPad.OnRep_HitCount // (Final|Native|Protected) // @ game+0x28a7f40
	void OnCharacterEndOverlap(struct ASolarCharacter* OtherCharacter); // Function Solarland.SolarSummonJumpPad.OnCharacterEndOverlap // (Native|Protected|BlueprintCallable) // @ game+0x28a7eb0
	void OnCharacterBeginOverlap(struct ASolarCharacter* OtherCharacter); // Function Solarland.SolarSummonJumpPad.OnCharacterBeginOverlap // (Native|Protected|BlueprintCallable) // @ game+0x2896680
};

// Class Solarland.SolarSummonLifeCycleComponent
// Size: 0xc8 (Inherited: 0xb0)
struct USolarSummonLifeCycleComponent : UActorComponent {
	struct FMulticastSparseDelegate OnLifeCycleEnd; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	float AliveTimeMax; // 0xb4(0x04)
	float AliveTimer; // 0xb8(0x04)
	float HealthPointsMax; // 0xbc(0x04)
	float HealthPoints; // 0xc0(0x04)
	float HealthPointsDwindle; // 0xc4(0x04)

	void UpdateDwindleHealthPoints(float InDeltaTime); // Function Solarland.SolarSummonLifeCycleComponent.UpdateDwindleHealthPoints // (Final|Native|Protected|BlueprintCallable) // @ game+0x28aba80
	void UpdateAliveTime(float InDeltaTime); // Function Solarland.SolarSummonLifeCycleComponent.UpdateAliveTime // (Final|Native|Protected|BlueprintCallable) // @ game+0x28aba00
	void SetHealthPointsMax(float InMaxHealthPoints); // Function Solarland.SolarSummonLifeCycleComponent.SetHealthPointsMax // (Final|Native|Public|BlueprintCallable) // @ game+0x28ab960
	void SetHealthPointsDwindle(float InDwindleHealthPoints); // Function Solarland.SolarSummonLifeCycleComponent.SetHealthPointsDwindle // (Final|Native|Public|BlueprintCallable) // @ game+0x28ab8e0
	void SetHealthPoints(float InHealthPoints); // Function Solarland.SolarSummonLifeCycleComponent.SetHealthPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x28ab860
	void SetAliveTimeMax(float InMaxAliveTime); // Function Solarland.SolarSummonLifeCycleComponent.SetAliveTimeMax // (Final|Native|Public|BlueprintCallable) // @ game+0x28ab7e0
	void SetAliveTime(float InAliveTime); // Function Solarland.SolarSummonLifeCycleComponent.SetAliveTime // (Final|Native|Public|BlueprintCallable) // @ game+0x28ab760
	void LifeCycleEnd(); // Function Solarland.SolarSummonLifeCycleComponent.LifeCycleEnd // (Final|Native|Protected|BlueprintCallable) // @ game+0x28ab060
	float GetHealthPointsMax(); // Function Solarland.SolarSummonLifeCycleComponent.GetHealthPointsMax // (Final|Native|Public|BlueprintCallable) // @ game+0x28aad30
	float GetHealthPointsDwindle(); // Function Solarland.SolarSummonLifeCycleComponent.GetHealthPointsDwindle // (Final|Native|Public|BlueprintCallable) // @ game+0x28aad00
	float GetHealthPoints(); // Function Solarland.SolarSummonLifeCycleComponent.GetHealthPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x28aacd0
	float GetAliveTimeMax(); // Function Solarland.SolarSummonLifeCycleComponent.GetAliveTimeMax // (Final|Native|Public|BlueprintCallable) // @ game+0x28aaca0
	float GetAliveTime(); // Function Solarland.SolarSummonLifeCycleComponent.GetAliveTime // (Final|Native|Public|BlueprintCallable) // @ game+0x28aac70
	void DestroyOwner(); // Function Solarland.SolarSummonLifeCycleComponent.DestroyOwner // (Final|Native|Public|BlueprintCallable) // @ game+0x28aac50
	void AddHealthPoints(float InExtraHealthPoints); // Function Solarland.SolarSummonLifeCycleComponent.AddHealthPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x28aab40
	void AddAliveTime(float InExtraAliveTime); // Function Solarland.SolarSummonLifeCycleComponent.AddAliveTime // (Final|Native|Public|BlueprintCallable) // @ game+0x28aaac0
};

// Class Solarland.SolarSummonRainOfArrow
// Size: 0x3b0 (Inherited: 0x300)
struct ASolarSummonRainOfArrow : ASolarSummonItemLauncher {
	float DamageChance; // 0x2f8(0x04)
	float DamageInterval; // 0x2fc(0x04)
	float Damage; // 0x300(0x04)
	float UnpackPercent; // 0x304(0x04)
	float UnpackDuration; // 0x308(0x04)
	float UnpackRange; // 0x30c(0x04)
	struct FVector UnpackMeshScale; // 0x310(0x0c)
	struct FVector UnpackFXScale; // 0x31c(0x0c)
	struct FSoftObjectPath UnpackMesh; // 0x328(0x18)
	struct FSoftObjectPath UnpackFX; // 0x340(0x18)
	struct FSoftObjectPath InRangeFX; // 0x358(0x18)
	float InRangeFXRadius; // 0x370(0x04)
	struct USphereComponent* RangeSphere; // 0x378(0x08)
	char pad_384[0x14]; // 0x384(0x14)
	struct UParticleSystemComponent* UnpackFXComp; // 0x398(0x08)
	struct UParticleSystemComponent* InRangeFXComp; // 0x3a0(0x08)
	char pad_3A8[0x8]; // 0x3a8(0x08)

	void OnEndOverlapRangeSphere(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarSummonRainOfArrow.OnEndOverlapRangeSphere // (Final|Native|Protected) // @ game+0x28ab4c0
	void OnBeginOverlapRangeSphere(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarSummonRainOfArrow.OnBeginOverlapRangeSphere // (Final|Native|Protected|HasOutParms) // @ game+0x28ab2a0
};

// Class Solarland.SolarSummonTower
// Size: 0x7b0 (Inherited: 0x4b0)
struct ASolarSummonTower : ASummonItemBase {
	char pad_4B0[0x8]; // 0x4b0(0x08)
	bool bShowDebug; // 0x4b8(0x01)
	char pad_4B9[0x3]; // 0x4b9(0x03)
	float TowerMoveAnimLength; // 0x4bc(0x04)
	struct FName TowerTopTag; // 0x4c0(0x08)
	struct FName TowerDownTag; // 0x4c8(0x08)
	struct FName TowerDownFillTag; // 0x4d0(0x08)
	struct FName BoxCollisionTag; // 0x4d8(0x08)
	struct FName StuckCheckCollisionTag; // 0x4e0(0x08)
	struct FName ChaAdjustDetectCollisionTag; // 0x4e8(0x08)
	struct FName ShowSequenceTag; // 0x4f0(0x08)
	float TowerInitHeight; // 0x4f8(0x04)
	float TraceGroundZOffset; // 0x4fc(0x04)
	float NeedDownFillDegree; // 0x500(0x04)
	float DelayToOpenPhysicsAfterStop; // 0x504(0x04)
	bool bEnableDamageDistance; // 0x508(0x01)
	char pad_509[0x7]; // 0x509(0x07)
	struct FString BeginSound; // 0x510(0x10)
	struct FString BeginLoopSound; // 0x520(0x10)
	struct FString EndSound; // 0x530(0x10)
	struct FString EndLoopSound; // 0x540(0x10)
	struct TArray<struct FTowerParticleInfo> BeginParticleInfo; // 0x550(0x10)
	struct TArray<struct FTowerParticleInfo> DisappearParticleInfo; // 0x560(0x10)
	char pad_570[0x1]; // 0x570(0x01)
	bool bServerMoveStop; // 0x571(0x01)
	char pad_572[0x6]; // 0x572(0x06)
	struct UBoxComponent* BoxCollision; // 0x578(0x08)
	struct UStaticMeshComponent* TowerTopMesh; // 0x580(0x08)
	struct UStaticMeshComponent* TowerDownMesh; // 0x588(0x08)
	struct UStaticMeshComponent* TowerDownFillMesh; // 0x590(0x08)
	struct UActorComponent* ShowSequenceComponent; // 0x598(0x08)
	struct TArray<struct UParticleSystemComponent*> BeginParticleHandles; // 0x5a0(0x10)
	struct TArray<struct UParticleSystemComponent*> DisappearParticleHandles; // 0x5b0(0x10)
	char pad_5C0[0x8]; // 0x5c0(0x08)
	struct TArray<enum class EObjectTypeQuery> LandscapeEffectObjTypes; // 0x5c8(0x10)
	float LandscapeEffectZOffset; // 0x5d8(0x04)
	float LandscapeEffectHeight; // 0x5dc(0x04)
	float LandscapeEffectRadius; // 0x5e0(0x04)
	char pad_5E4[0x14]; // 0x5e4(0x14)
	bool bEnableDealCharacterStuck; // 0x5f8(0x01)
	char pad_5F9[0x3]; // 0x5f9(0x03)
	float DealCharacterStuckInterval; // 0x5fc(0x04)
	float HorizonAdjustOffset; // 0x600(0x04)
	float VerticalAdjustOffset; // 0x604(0x04)
	struct TArray<struct UPrimitiveComponent*> StuckCheckCollisionArray; // 0x608(0x10)
	struct UPrimitiveComponent* ChaAdjustDetectCollision; // 0x618(0x08)
	char pad_620[0x8]; // 0x620(0x08)
	struct FSoftClassPath EnergyShieldClassPath; // 0x628(0x18)
	struct TArray<struct FTransform> EnergyShieldTransforms; // 0x640(0x10)
	struct TArray<struct ASolarEnergyShield*> EnergyShields; // 0x650(0x10)
	struct FSoftClassPath TowerPadClassPath; // 0x660(0x18)
	char pad_678[0x8]; // 0x678(0x08)
	struct FTransform TowerPadTransform; // 0x680(0x30)
	struct ASolarSummonTowerPad* TowerPad; // 0x6b0(0x08)
	struct TMap<int32_t, float> VehicleOffsetOnZ; // 0x6b8(0x50)
	struct TMap<int32_t, float> VehicleImpulse; // 0x708(0x50)
	struct TMap<int32_t, float> HeightThresholdForVehicle; // 0x758(0x50)
	char pad_7A8[0x8]; // 0x7a8(0x08)

	void PlayShowSequence(bool bJumpToEnd); // Function Solarland.SolarSummonTower.PlayShowSequence // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnOpenPhysics(); // Function Solarland.SolarSummonTower.OnOpenPhysics // (Final|Native|Private) // @ game+0x28ab620
};

// Class Solarland.SolarSummonTowerPad
// Size: 0x2d8 (Inherited: 0x228)
struct ASolarSummonTowerPad : AActor {
	struct TArray<struct FTowerPadEffect> PadEffects; // 0x228(0x10)
	struct FName TriggerCollisionTag; // 0x238(0x08)
	struct UGameplayEffect* LaunchingTowerEffect; // 0x240(0x08)
	float CoolDownPerCharacter; // 0x248(0x04)
	float LaunchVelocityZ; // 0x24c(0x04)
	float StartPullToTowerZLoc; // 0x250(0x04)
	float PullInterval; // 0x254(0x04)
	float PullForceMagnification; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct FString LaunchCharacterSound; // 0x260(0x10)
	struct UPrimitiveComponent* TriggerCollision; // 0x270(0x08)
	char pad_278[0x60]; // 0x278(0x60)

	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarSummonTowerPad.OnEndOverlap // (Native|Protected) // @ game+0x27fc300
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarSummonTowerPad.OnBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x28ab080
	void MultiPlayLaunchSound(struct FVector_NetQuantize InLaunchLocation); // Function Solarland.SolarSummonTowerPad.MultiPlayLaunchSound // (Net|Native|Event|NetMulticast|Protected) // @ game+0x27f3a90
};

// Class Solarland.SolarSummonVehicleSpawner
// Size: 0x2b8 (Inherited: 0x228)
struct ASolarSummonVehicleSpawner : AActor {
	int32_t VehicleID; // 0x228(0x04)
	struct FName EffectMeshTagName; // 0x22c(0x08)
	struct FName EffectMaterialParameterName; // 0x234(0x08)
	float EffectDuration; // 0x23c(0x04)
	struct FString SpawnSoundName1P; // 0x240(0x10)
	struct FString SpawnSoundName3P; // 0x250(0x10)
	struct FString SpawnSoundName3PEnemy; // 0x260(0x10)
	struct UAkComponent* AkComponent; // 0x270(0x08)
	struct TArray<struct UStaticMeshComponent*> EffectMeshComponentArray; // 0x278(0x10)
	char pad_288[0x30]; // 0x288(0x30)
};

// Class Solarland.SolarSummonWall
// Size: 0x4e0 (Inherited: 0x4b0)
struct ASolarSummonWall : ASummonItemBase {
	struct FSoftClassPath EnergyBarrierClassPath; // 0x4b0(0x18)
	struct FVector EnergyBarrierLocationOffset; // 0x4c8(0x0c)
	char pad_4D4[0x4]; // 0x4d4(0x04)
	struct ASummonItemBase* EnergyBarrier; // 0x4d8(0x08)

	void SpawnEnergyBarrier(); // Function Solarland.SolarSummonWall.SpawnEnergyBarrier // (Final|Native|Public|BlueprintCallable) // @ game+0x28ab9e0
};

// Class Solarland.SolarSummonWeapon
// Size: 0x940 (Inherited: 0x910)
struct ASolarSummonWeapon : ASolarWeapon {
	struct TWeakObjectPtr<struct ASolarCharacter> SummonWeaponHolder; // 0x908(0x08)
	struct TWeakObjectPtr<struct ASummonItemTurret> SummonWeaponOwner; // 0x910(0x08)
	struct FVector ShotDirection; // 0x918(0x0c)
	struct UGameplayEffect* WeaponCanUseEffect; // 0x928(0x08)
	char pad_934[0xc]; // 0x934(0x0c)
};

// Class Solarland.SolarSummonWeapon_Vehicle
// Size: 0xe30 (Inherited: 0xda0)
struct ASolarSummonWeapon_Vehicle : ASolarPlayerItemWeapon {
	char pad_DA0[0x8]; // 0xda0(0x08)
	struct FSoftObjectPath SummonConfigPath; // 0xda8(0x18)
	struct ASolarSummonVehicleSpawner* SummonVehicleSpawnerClass; // 0xdc0(0x08)
	struct FVector VehicleSpawnOffset; // 0xdc8(0x0c)
	char pad_DD4[0x5c]; // 0xdd4(0x5c)

	void ServerRequestSummon(struct FVector InLocation, struct FVector InNormal, struct FRotator InOrientation); // Function Solarland.SolarSummonWeapon_Vehicle.ServerRequestSummon // (Net|NetReliableNative|Event|Protected|NetServer|HasDefaults) // @ game+0x28ab660
	void ClientResponseSummonResult(bool bInSuccess); // Function Solarland.SolarSummonWeapon_Vehicle.ClientResponseSummonResult // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x28aabc0
};

// Class Solarland.SolarSwitchTargetCameraControlComp
// Size: 0xf0 (Inherited: 0xb0)
struct USolarSwitchTargetCameraControlComp : UActorComponent {
	char pad_B0[0x34]; // 0xb0(0x34)
	struct TWeakObjectPtr<struct AActor> IntermediateEndTarget; // 0xe4(0x08)
	char pad_EC[0x4]; // 0xec(0x04)

	void OnScoutPlayerWorkComplete(); // Function Solarland.SolarSwitchTargetCameraControlComp.OnScoutPlayerWorkComplete // (Final|Native|Private) // @ game+0x28ab640
};

// Class Solarland.SolarSyncComponent
// Size: 0xb8 (Inherited: 0xb0)
struct USolarSyncComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)

	void SendSyncAxisRotMessage(struct FString Type, struct FRotator& Value); // Function Solarland.SolarSyncComponent.SendSyncAxisRotMessage // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	void SendSyncAxisMoveMessage(struct FString Type, float Value, struct FVector& Location); // Function Solarland.SolarSyncComponent.SendSyncAxisMoveMessage // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	void SendSyncAxisMessage(struct FString Type, float Value); // Function Solarland.SolarSyncComponent.SendSyncAxisMessage // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SendPlayerMoveMessage(struct FServerMoveData& MoveData); // Function Solarland.SolarSyncComponent.SendPlayerMoveMessage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void SendActionMessage(struct FString Type, struct FString Value); // Function Solarland.SolarSyncComponent.SendActionMessage // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RegisterActor(struct AActor* AC); // Function Solarland.SolarSyncComponent.RegisterActor // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarSyncPlayerControllerComponent
// Size: 0x108 (Inherited: 0xb8)
struct USolarSyncPlayerControllerComponent : USolarSyncComponent {
	char pad_B8[0x50]; // 0xb8(0x50)

	void InputTurnRate(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputTurnRate // (Final|Native|Public|BlueprintCallable) // @ game+0xb67d60
	void InputTurn(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputTurn // (Final|Native|Public|BlueprintCallable) // @ game+0xb67d60
	void InputSecondWeaponReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputSecondWeaponReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28ab040
	void InputSecondWeaponPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputSecondWeaponPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28ab020
	void InputReloadReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputReloadReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28ab000
	void InputReloadPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputReloadPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28aafe0
	void InputPrimaryWeaponReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputPrimaryWeaponReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28aafc0
	void InputPrimaryWeaponPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputPrimaryWeaponPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28aafa0
	void InputOutVehicleReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputOutVehicleReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28aaf80
	void InputOutVehiclePressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputOutVehiclePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28aaf60
	void InputMoveRight(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputMoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0xb67d60
	void InputMoveForward(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputMoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0xb67d60
	void InputMapReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputMapReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28aaf40
	void InputMapPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputMapPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28aaf20
	void InputLookUpRate(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputLookUpRate // (Final|Native|Public|BlueprintCallable) // @ game+0xb67d60
	void InputLookUp(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputLookUp // (Final|Native|Public|BlueprintCallable) // @ game+0xb67d60
	void InputJumpReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJumpReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void InputJumpPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJumpPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void InputJetVerticalReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJetVerticalReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void InputJetVerticalPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJetVerticalPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void InputJetHorizontalReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJetHorizontalReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void InputJetHorizontalPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJetHorizontalPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void InputInteractReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputInteractReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28aaf00
	void InputInteractPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputInteractPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28aaee0
	void InputInteractAlternativeReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputInteractAlternativeReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28aaec0
	void InputInteractAlternativePressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputInteractAlternativePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28aaea0
	void InputGunsightReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputGunsightReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28aae80
	void InputGunsightPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputGunsightPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28aae60
	void InputFreeLookReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputFreeLookReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void InputFreeLookPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputFreeLookPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void InputFireReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28aae40
	void InputFirePressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28aae20
	void InputEquip2Released(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEquip2Released // (Final|Native|Public|BlueprintCallable) // @ game+0x28aae00
	void InputEquip2Pressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEquip2Pressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28aade0
	void InputEquip1Released(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEquip1Released // (Final|Native|Public|BlueprintCallable) // @ game+0x28aadc0
	void InputEquip1Pressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEquip1Pressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28aada0
	void InputEjectReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEjectReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void InputEjectPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEjectPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void InputCrouchReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputCrouchReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void InputCrouchPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputCrouchPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void InputAltFireReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputAltFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28aad80
	void InputAltFirePressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputAltFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28aad60
};

// Class Solarland.SolarSyncRemoteController
// Size: 0x380 (Inherited: 0x348)
struct ASolarSyncRemoteController : AAIController {
	char pad_348[0x38]; // 0x348(0x38)

	void TakeWeapon(struct FString Cmd); // Function Solarland.SolarSyncRemoteController.TakeWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x28b2620
	void OnReceivedServerMoveData(struct FServerMoveData& MoveData); // Function Solarland.SolarSyncRemoteController.OnReceivedServerMoveData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28b23b0
	void InputTurnRate(struct FRotator& Rot); // Function Solarland.SolarSyncRemoteController.InputTurnRate // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x28b1e20
	void InputTurn(struct FRotator& Rot); // Function Solarland.SolarSyncRemoteController.InputTurn // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x28b1e20
	void InputSecondWeaponReleased(); // Function Solarland.SolarSyncRemoteController.InputSecondWeaponReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1e00
	void InputSecondWeaponPressed(); // Function Solarland.SolarSyncRemoteController.InputSecondWeaponPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1de0
	void InputReloadReleased(); // Function Solarland.SolarSyncRemoteController.InputReloadReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1dc0
	void InputReloadPressed(); // Function Solarland.SolarSyncRemoteController.InputReloadPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1da0
	void InputPrimaryWeaponReleased(); // Function Solarland.SolarSyncRemoteController.InputPrimaryWeaponReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1d80
	void InputPrimaryWeaponPressed(); // Function Solarland.SolarSyncRemoteController.InputPrimaryWeaponPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1d60
	void InputOutVehicleReleased(); // Function Solarland.SolarSyncRemoteController.InputOutVehicleReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1d40
	void InputOutVehiclePressed(); // Function Solarland.SolarSyncRemoteController.InputOutVehiclePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1d20
	void InputMoveRight(struct FSolarSyncMoveMessageParams& Params); // Function Solarland.SolarSyncRemoteController.InputMoveRight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28b1c90
	void InputMoveForward(struct FSolarSyncMoveMessageParams& Params); // Function Solarland.SolarSyncRemoteController.InputMoveForward // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28b1c00
	void InputMapReleased(); // Function Solarland.SolarSyncRemoteController.InputMapReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1be0
	void InputMapPressed(); // Function Solarland.SolarSyncRemoteController.InputMapPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1bc0
	void InputLookUpRate(struct FRotator& Rot); // Function Solarland.SolarSyncRemoteController.InputLookUpRate // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x28b1b30
	void InputLookUp(struct FRotator& Rot); // Function Solarland.SolarSyncRemoteController.InputLookUp // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x28b1b30
	void InputJumpReleased(); // Function Solarland.SolarSyncRemoteController.InputJumpReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1b10
	void InputJumpPressed(); // Function Solarland.SolarSyncRemoteController.InputJumpPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1af0
	void InputJetVerticalReleased(); // Function Solarland.SolarSyncRemoteController.InputJetVerticalReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1ad0
	void InputJetVerticalPressed(); // Function Solarland.SolarSyncRemoteController.InputJetVerticalPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1ab0
	void InputJetHorizontalReleased(); // Function Solarland.SolarSyncRemoteController.InputJetHorizontalReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1a90
	void InputJetHorizontalPressed(); // Function Solarland.SolarSyncRemoteController.InputJetHorizontalPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1a70
	void InputInteractReleased(); // Function Solarland.SolarSyncRemoteController.InputInteractReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1a50
	void InputInteractPressed(); // Function Solarland.SolarSyncRemoteController.InputInteractPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1a30
	void InputInteractAlternativeReleased(); // Function Solarland.SolarSyncRemoteController.InputInteractAlternativeReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1a10
	void InputInteractAlternativePressed(); // Function Solarland.SolarSyncRemoteController.InputInteractAlternativePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b19f0
	void InputGunsightReleased(); // Function Solarland.SolarSyncRemoteController.InputGunsightReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b19d0
	void InputGunsightPressed(); // Function Solarland.SolarSyncRemoteController.InputGunsightPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b19b0
	void InputFreeLookReleased(); // Function Solarland.SolarSyncRemoteController.InputFreeLookReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1990
	void InputFreeLookPressed(); // Function Solarland.SolarSyncRemoteController.InputFreeLookPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1970
	void InputFireReleased(); // Function Solarland.SolarSyncRemoteController.InputFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1950
	void InputFirePressed(); // Function Solarland.SolarSyncRemoteController.InputFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1930
	void InputEquip2Released(); // Function Solarland.SolarSyncRemoteController.InputEquip2Released // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1910
	void InputEquip2Pressed(); // Function Solarland.SolarSyncRemoteController.InputEquip2Pressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b18f0
	void InputEquip1Released(); // Function Solarland.SolarSyncRemoteController.InputEquip1Released // (Final|Native|Public|BlueprintCallable) // @ game+0x28b18d0
	void InputEquip1Pressed(); // Function Solarland.SolarSyncRemoteController.InputEquip1Pressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b18b0
	void InputEjectReleased(); // Function Solarland.SolarSyncRemoteController.InputEjectReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1890
	void InputEjectPressed(); // Function Solarland.SolarSyncRemoteController.InputEjectPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1870
	void InputCrouchReleased(); // Function Solarland.SolarSyncRemoteController.InputCrouchReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1850
	void InputCrouchPressed(); // Function Solarland.SolarSyncRemoteController.InputCrouchPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1830
	void InputAltFireReleased(); // Function Solarland.SolarSyncRemoteController.InputAltFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1810
	void InputAltFirePressed(); // Function Solarland.SolarSyncRemoteController.InputAltFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x28b17f0
	void Fire(bool Activate); // Function Solarland.SolarSyncRemoteController.Fire // (Final|Native|Public|BlueprintCallable) // @ game+0x28b02b0
};

// Class Solarland.SolarTabControlList
// Size: 0x410 (Inherited: 0x400)
struct USolarTabControlList : USolarUserWidget {
	struct USolarTreeView* TabList; // 0x400(0x08)
	int32_t CompoundStyleFlags; // 0x408(0x04)
	int32_t LeafStyleFlags; // 0x40c(0x04)

	bool IsMatchStyle(int32_t InStyleFlags, int32_t BitMask); // Function Solarland.SolarTabControlList.IsMatchStyle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28b1f70
};

// Class Solarland.SolarTabControlListSlot
// Size: 0x408 (Inherited: 0x400)
struct USolarTabControlListSlot : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)

	bool BP_IsItemSelectableChanged(); // Function Solarland.SolarTabControlListSlot.BP_IsItemSelectableChanged // (Event|Protected|BlueprintEvent|Const) // @ game+0x2d0d160
};

// Class Solarland.SolarTableManager
// Size: 0x40 (Inherited: 0x28)
struct USolarTableManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	enum class ESolarSupportLanguages SystemLang; // 0x30(0x01)
	char pad_31[0xf]; // 0x31(0x0f)

	void SetIMInitFlag(bool Flag); // Function Solarland.SolarTableManager.SetIMInitFlag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28b25a0
	void SetCurrentLangEnum(enum class ESolarSupportLanguages InLang); // Function Solarland.SolarTableManager.SetCurrentLangEnum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28b2530
	void SetCurrentLang(struct FString InLang); // Function Solarland.SolarTableManager.SetCurrentLang // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28b24a0
	void ReceiveInit(); // Function Solarland.SolarTableManager.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0xb66830
	void OnSetCurrentLang(struct FString InLang); // Function Solarland.SolarTableManager.OnSetCurrentLang // (Event|Protected|BlueprintEvent) // @ game+0xb66830
	void MakeUpperLocalTextWithLang(struct FString& OutLocalText, enum class ESolarSupportLanguages InLang); // Function Solarland.SolarTableManager.MakeUpperLocalTextWithLang // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x28b22c0
	void MakeUpperLocalText(struct FString& OutLocalText); // Function Solarland.SolarTableManager.MakeUpperLocalText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x28b2220
	void MakeLowerLocalTextWithLang(struct FString& OutLocalText, enum class ESolarSupportLanguages InLang); // Function Solarland.SolarTableManager.MakeLowerLocalTextWithLang // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x28b2130
	void MakeLowerLocalText(struct FString& OutLocalText); // Function Solarland.SolarTableManager.MakeLowerLocalText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x28b2090
	bool IsLocalTextIDValid(int32_t ID); // Function Solarland.SolarTableManager.IsLocalTextIDValid // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28b1ee0
	struct FString GetLocalTextWithLang(int32_t ID, enum class ESolarSupportLanguages InLang, bool bMakeUpperText); // Function Solarland.SolarTableManager.GetLocalTextWithLang // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28b0680
	struct FString GetLocalText(int32_t ID, bool bMakeUpperText); // Function Solarland.SolarTableManager.GetLocalText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x28b0570
	bool GetIMInitFlag(); // Function Solarland.SolarTableManager.GetIMInitFlag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28b0510
	enum class ESolarSupportLanguages GetCurrentLangEnum(); // Function Solarland.SolarTableManager.GetCurrentLangEnum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28b04b0
	struct FString GetCurrentLang(); // Function Solarland.SolarTableManager.GetCurrentLang // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28b0430
	enum class ESolarSupportLanguages ConvertLangNameToEnum(struct FString LangName); // Function Solarland.SolarTableManager.ConvertLangNameToEnum // (Final|Native|Static|Public) // @ game+0x28b01f0
};

// Class Solarland.SolarTables
// Size: 0x2ee0 (Inherited: 0x28)
struct USolarTables : UObject {
	struct FSolarTables_Tables Tables; // 0x28(0x2e88)
	struct USolarTables_TablesReader* TablesReader; // 0x2eb0(0x08)
	struct FMulticastInlineDelegate OnJsonTableReloadComplete; // 0x2eb8(0x10)
	char pad_2EC8[0x18]; // 0x2ec8(0x18)

	void UnloadTables(); // Function Solarland.SolarTables.UnloadTables // (Final|Native|Public|BlueprintCallable) // @ game+0x28b2b40
	void UnitTest(); // Function Solarland.SolarTables.UnitTest // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void ReloadTablesAsync_Internal(); // Function Solarland.SolarTables.ReloadTablesAsync_Internal // (Final|Native|Public|BlueprintCallable) // @ game+0x28b2480
	void ReloadTablesAsync(); // Function Solarland.SolarTables.ReloadTablesAsync // (Final|Native|Public|BlueprintCallable) // @ game+0x28b2460
	void ReloadTables(); // Function Solarland.SolarTables.ReloadTables // (Final|Native|Public|BlueprintCallable) // @ game+0x28b2440
	void LoadTables(); // Function Solarland.SolarTables.LoadTables // (Final|Native|Public|BlueprintCallable) // @ game+0x28b2070
	bool IsReloadTablesComplete(); // Function Solarland.SolarTables.IsReloadTablesComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x28b2040
	bool IsInstanceValid(); // Function Solarland.SolarTables.IsInstanceValid // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28b1eb0
	bool Hotfix_FixValue(struct FString TableName, struct FString RowKey, struct FString ColKey, struct FString NewValue, struct FString& ErrorMsg); // Function Solarland.SolarTables.Hotfix_FixValue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28b15d0
	bool Hotfix_FixRow(struct FString TableName, struct FString RowKey, struct FString NewRowValue, struct FString& ErrorMsg); // Function Solarland.SolarTables.Hotfix_FixRow // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x28b1410
	bool HasTableName(struct FString TableName); // Function Solarland.SolarTables.HasTableName // (Final|Native|Public|BlueprintCallable) // @ game+0x28b1360
	struct USolarTables* GetInstance(); // Function Solarland.SolarTables.GetInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28b0540
	void DestroyInstance(); // Function Solarland.SolarTables.DestroyInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x28b0290
};

// Class Solarland.SolarTableReaderBase
// Size: 0x30 (Inherited: 0x28)
struct USolarTableReaderBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	int32_t RandomRangeInt(struct FSolarTablesRangeInt& InData); // Function Solarland.SolarTableReaderBase.RandomRangeInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x295c030
	float RandomRangeFloat(struct FSolarTablesRangeFloat& InData); // Function Solarland.SolarTableReaderBase.RandomRangeFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x295bf90
	bool IsReaderValid(); // Function Solarland.SolarTableReaderBase.IsReaderValid // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x295bb90
	struct FString GetLocText(struct FSolarTablesLocalText& InData); // Function Solarland.SolarTableReaderBase.GetLocText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x295b7b0
	struct FString GetDeviceRes(struct FSolarTablesDeviceRes& InData); // Function Solarland.SolarTableReaderBase.GetDeviceRes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x295b6c0
	bool ContainsRangeInt(struct FSolarTablesRangeInt& InData, int32_t In, bool bEqualMin, bool bEqualMax); // Function Solarland.SolarTableReaderBase.ContainsRangeInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x295b400
	bool ContainsRangeFloat(struct FSolarTablesRangeFloat& InData, float In, bool bEqualMin, bool bEqualMax); // Function Solarland.SolarTableReaderBase.ContainsRangeFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x295b290
};

// Class Solarland.SolarTables_Reader_AccountFixedExp
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_AccountFixedExp : USolarTableReaderBase {

	struct FSolarTablesData_AccountFixedExp TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_AccountFixedExp.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b26c0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_AccountFixedExp.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1080
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_AccountFixedExp.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0db0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0ae0
	struct FSolarTablesData_AccountFixedExp GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0370
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_AccountFlag
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_AccountFlag : USolarTableReaderBase {

	struct FSolarTablesData_AccountFlag TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_AccountFlag.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b28a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_AccountFlag.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1170
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_AccountFlag.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0ea0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_AccountFlag.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_AccountFlag.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0ba0
	struct FSolarTablesData_AccountFlag GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_AccountFlag.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b08e0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_AccountFlag.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_AccountFlag.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_AccountFlag.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b03b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_AccountFlag.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Achievement
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Achievement : USolarTableReaderBase {

	struct FSolarTablesData_Achievement TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Achievement.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b29f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Achievement.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1260
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Achievement.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0f90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Achievement.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Achievement.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0c60
	struct FSolarTablesData_Achievement GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Achievement.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b09f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Achievement.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Achievement.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Achievement.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b03f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Achievement.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Airline
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Airline : USolarTableReaderBase {

	struct FSolarTablesData_Airline TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Airline.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb2a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Airline.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28baec0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Airline.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba920
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Airline.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Airline.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba4a0
	struct FSolarTablesData_Airline GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Airline.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b9fd0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Airline.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Airline.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Airline.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b9e50
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Airline.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_ArmorProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ArmorProperty : USolarTableReaderBase {

	struct FSolarTablesData_ArmorProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ArmorProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb3f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ArmorProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bafb0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ArmorProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28baa10
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ArmorProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba560
	struct FSolarTablesData_ArmorProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ArmorProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba0c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b9e90
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Armory
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Armory : USolarTableReaderBase {

	struct FSolarTablesData_Armory TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Armory.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb540
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Armory.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb0b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Armory.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bab00
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Armory.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Armory.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba620
	struct FSolarTablesData_Armory GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Armory.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba1b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Armory.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Armory.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Armory.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b9ed0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Armory.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_AutoDirector
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_AutoDirector : USolarTableReaderBase {

	struct FSolarTablesData_AutoDirector TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_AutoDirector.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb690
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_AutoDirector.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb1b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_AutoDirector.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28babf0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_AutoDirector.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_AutoDirector.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba6e0
	struct FSolarTablesData_AutoDirector GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_AutoDirector.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba2a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_AutoDirector.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_AutoDirector.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_AutoDirector.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b9f10
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_AutoDirector.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_AutoDirectorActivityScore
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_AutoDirectorActivityScore : USolarTableReaderBase {

	struct FSolarTablesData_AutoDirectorActivityScore TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_AutoDirectorActivityScore.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb8b0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_AutoDirectorActivityScore.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1080
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_AutoDirectorActivityScore.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bace0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_AutoDirectorActivityScore.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_AutoDirectorActivityScore.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba7a0
	struct FSolarTablesData_AutoDirectorActivityScore GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_AutoDirectorActivityScore.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_AutoDirectorActivityScore.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_AutoDirectorActivityScore.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_AutoDirectorActivityScore.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b9f50
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_AutoDirectorActivityScore.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_BackpackProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BackpackProperty : USolarTableReaderBase {

	struct FSolarTablesData_BackpackProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BackpackProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bba90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BackpackProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1260
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BackpackProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28badd0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BackpackProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba860
	struct FSolarTablesData_BackpackProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BackpackProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba3b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b9f90
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_BackpackTrailProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BackpackTrailProperty : USolarTableReaderBase {

	struct FSolarTablesData_BackpackTrailProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c35c0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3110
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2b70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c27b0
	struct FSolarTablesData_BackpackTrailProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c21c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2040
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_BattleEndRankSettlement
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleEndRankSettlement : USolarTableReaderBase {

	struct FSolarTablesData_BattleEndRankSettlement TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3710
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb1b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2c60
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba6e0
	struct FSolarTablesData_BattleEndRankSettlement GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c22b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2080
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_BattleRoyaleMode
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleRoyaleMode : USolarTableReaderBase {

	struct FSolarTablesData_BattleRoyaleMode TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3830
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3200
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2d50
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2870
	struct FSolarTablesData_BattleRoyaleMode GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c23b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c20c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_BattleUpgradeContent
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleUpgradeContent : USolarTableReaderBase {

	struct FSolarTablesData_BattleUpgradeContent TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3980
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c32f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2e40
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2930
	struct FSolarTablesData_BattleUpgradeContent GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c24a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2100
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_BattleUpgradeEffect
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleUpgradeEffect : USolarTableReaderBase {

	struct FSolarTablesData_BattleUpgradeEffect TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3ad0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c33e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2f30
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c29f0
	struct FSolarTablesData_BattleUpgradeEffect GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c25b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2140
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_BattleUpgradeEffectPool
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleUpgradeEffectPool : USolarTableReaderBase {

	struct FSolarTablesData_BattleUpgradeEffectPool TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3cd0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c34d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3020
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2ab0
	struct FSolarTablesData_BattleUpgradeEffectPool GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c26b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2180
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Behavior
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Behavior : USolarTableReaderBase {

	struct FSolarTablesData_Behavior TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Behavior.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28cad50
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Behavior.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1170
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Behavior.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca5c0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Behavior.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Behavior.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca2c0
	struct FSolarTablesData_Behavior GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Behavior.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c9dd0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Behavior.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Behavior.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Behavior.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c9c50
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Behavior.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_BpAward
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BpAward : USolarTableReaderBase {

	struct FSolarTablesData_BpAward TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BpAward.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28cae90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BpAward.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3200
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BpAward.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca6b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BpAward.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BpAward.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca380
	struct FSolarTablesData_BpAward GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BpAward.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c9ef0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BpAward.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BpAward.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BpAward.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c9c90
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BpAward.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_CapsuleProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CapsuleProperty : USolarTableReaderBase {

	struct FSolarTablesData_CapsuleProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CapsuleProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28cafc0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CapsuleProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3110
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CapsuleProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca7a0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c27b0
	struct FSolarTablesData_CapsuleProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c21c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c9cd0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_CaseToggleAlphabet
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CaseToggleAlphabet : USolarTableReaderBase {

	struct FSolarTablesData_CaseToggleAlphabet TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28cb110
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28cab60
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca890
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca440
	struct FSolarTablesData_CaseToggleAlphabet GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c9fe0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c9d10
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CaseToggleAlphabet.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_CharacterAbility
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CharacterAbility : USolarTableReaderBase {

	struct FSolarTablesData_CharacterAbility TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CharacterAbility.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28cb620
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterAbility.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28cac60
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CharacterAbility.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca980
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CharacterAbility.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca500
	struct FSolarTablesData_CharacterAbility GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterAbility.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca0d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c9d50
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_CharacterPassiveAbility
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CharacterPassiveAbility : USolarTableReaderBase {

	struct FSolarTablesData_CharacterPassiveAbility TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28cb760
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c34d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28caa70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2ab0
	struct FSolarTablesData_CharacterPassiveAbility GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca1c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c9d90
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_CharacterVoiceover
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CharacterVoiceover : USolarTableReaderBase {

	struct FSolarTablesData_CharacterVoiceover TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CharacterVoiceover.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2ef0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterVoiceover.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1170
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CharacterVoiceover.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2860
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca2c0
	struct FSolarTablesData_CharacterVoiceover GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d21c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2000
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Chest
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Chest : USolarTableReaderBase {

	struct FSolarTablesData_Chest TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Chest.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d3030
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Chest.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb0b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Chest.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2950
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Chest.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Chest.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d26e0
	struct FSolarTablesData_Chest GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Chest.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d22d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Chest.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Chest.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Chest.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2040
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Chest.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_ChestSpawn
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ChestSpawn : USolarTableReaderBase {

	struct FSolarTablesData_ChestSpawn TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ChestSpawn.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d3180
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ChestSpawn.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c32f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ChestSpawn.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2a40
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ChestSpawn.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2930
	struct FSolarTablesData_ChestSpawn GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ChestSpawn.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d23c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2080
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_ChestSpawnGroup
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ChestSpawnGroup : USolarTableReaderBase {

	struct FSolarTablesData_ChestSpawnGroup TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d32d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c34d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2b30
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2ab0
	struct FSolarTablesData_ChestSpawnGroup GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c26b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d20c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ChestSpawnGroup.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_CircularCameras
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CircularCameras : USolarTableReaderBase {

	struct FSolarTablesData_CircularCameras TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CircularCameras.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d33f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CircularCameras.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb1b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CircularCameras.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2c20
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CircularCameras.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CircularCameras.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d27a0
	struct FSolarTablesData_CircularCameras GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CircularCameras.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba2a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CircularCameras.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CircularCameras.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CircularCameras.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2100
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CircularCameras.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_ClanFlag
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ClanFlag : USolarTableReaderBase {

	struct FSolarTablesData_ClanFlag TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ClanFlag.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d3620
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ClanFlag.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1170
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ClanFlag.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2d10
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ClanFlag.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ClanFlag.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca2c0
	struct FSolarTablesData_ClanFlag GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ClanFlag.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d24e0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ClanFlag.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ClanFlag.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ClanFlag.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2140
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ClanFlag.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Collect
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Collect : USolarTableReaderBase {

	struct FSolarTablesData_Collect TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Collect.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d3770
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Collect.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1260
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Collect.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2e00
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Collect.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Collect.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba860
	struct FSolarTablesData_Collect GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Collect.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d25f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Collect.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Collect.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Collect.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d2180
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Collect.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Dance
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Dance : USolarTableReaderBase {

	struct FSolarTablesData_Dance TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Dance.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28da470
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Dance.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1260
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Dance.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d9ec0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Dance.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Dance.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0c60
	struct FSolarTablesData_Dance GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Dance.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d9910
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Dance.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Dance.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Dance.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d97d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Dance.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_DayAndNight
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_DayAndNight : USolarTableReaderBase {

	struct FSolarTablesData_DayAndNight TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_DayAndNight.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28da5c0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_DayAndNight.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c33e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_DayAndNight.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d9fb0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_DayAndNight.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_DayAndNight.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c29f0
	struct FSolarTablesData_DayAndNight GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_DayAndNight.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d9a00
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_DayAndNight.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_DayAndNight.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_DayAndNight.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d9810
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_DayAndNight.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_DsVariableRange
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_DsVariableRange : USolarTableReaderBase {

	struct FSolarTablesData_DsVariableRange TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_DsVariableRange.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28da7c0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_DsVariableRange.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c32f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_DsVariableRange.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28da0a0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_DsVariableRange.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2930
	struct FSolarTablesData_DsVariableRange GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_DsVariableRange.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d9b00
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d9850
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Emote
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Emote : USolarTableReaderBase {

	struct FSolarTablesData_Emote TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Emote.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28da910
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Emote.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28da370
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Emote.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28da190
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Emote.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Emote.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d9e00
	struct FSolarTablesData_Emote GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Emote.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d9c20
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Emote.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Emote.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Emote.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d9890
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Emote.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_EnergyProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EnergyProperty : USolarTableReaderBase {

	struct FSolarTablesData_EnergyProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EnergyProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28daba0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EnergyProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1260
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EnergyProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28da280
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EnergyProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba860
	struct FSolarTablesData_EnergyProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EnergyProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d9d10
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d98d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_EscapeExp
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EscapeExp : USolarTableReaderBase {

	struct FSolarTablesData_EscapeExp TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EscapeExp.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e26f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EscapeExp.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1170
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EscapeExp.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1d20
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EscapeExp.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EscapeExp.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca2c0
	struct FSolarTablesData_EscapeExp GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EscapeExp.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e15a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EscapeExp.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EscapeExp.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EscapeExp.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1210
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EscapeExp.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_EShop
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShop : USolarTableReaderBase {

	struct FSolarTablesData_EShop TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShop.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e2000
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShop.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c32f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShop.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1870
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShop.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShop.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2930
	struct FSolarTablesData_EShop GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShop.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1290
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShop.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShop.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShop.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e10d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShop.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_EShopDemoModel
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShopDemoModel : USolarTableReaderBase {

	struct FSolarTablesData_EShopDemoModel TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShopDemoModel.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e2150
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShopDemoModel.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1080
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShopDemoModel.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1960
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba7a0
	struct FSolarTablesData_EShopDemoModel GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1110
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_EShopGoodsPool
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShopGoodsPool : USolarTableReaderBase {

	struct FSolarTablesData_EShopGoodsPool TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShopGoodsPool.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e2330
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShopGoodsPool.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28cac60
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShopGoodsPool.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1a50
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca500
	struct FSolarTablesData_EShopGoodsPool GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e13a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1150
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_EShopGoodsPoolGroup
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShopGoodsPoolGroup : USolarTableReaderBase {

	struct FSolarTablesData_EShopGoodsPoolGroup TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e2480
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c34d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1b40
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2ab0
	struct FSolarTablesData_EShopGoodsPoolGroup GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c26b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1190
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_EShopSpawn
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShopSpawn : USolarTableReaderBase {

	struct FSolarTablesData_EShopSpawn TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShopSpawn.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e25a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShopSpawn.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1170
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShopSpawn.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1c30
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShopSpawn.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca2c0
	struct FSolarTablesData_EShopSpawn GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShopSpawn.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1490
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e11d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_ExtraEnergyProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ExtraEnergyProperty : USolarTableReaderBase {

	struct FSolarTablesData_ExtraEnergyProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e2830
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1f00
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1e10
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e17b0
	struct FSolarTablesData_ExtraEnergyProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e16c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1250
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_GameMap
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GameMap : USolarTableReaderBase {

	struct FSolarTablesData_GameMap TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GameMap.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eb5a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GameMap.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eb2b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GameMap.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ead10
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GameMap.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GameMap.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eaad0
	struct FSolarTablesData_GameMap GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GameMap.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ea5b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GameMap.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GameMap.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GameMap.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ea430
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GameMap.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_GameModeGroup
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GameModeGroup : USolarTableReaderBase {

	struct FSolarTablesData_GameModeGroup TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GameModeGroup.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eb860
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GameModeGroup.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb0b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GameModeGroup.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eae00
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GameModeGroup.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d26e0
	struct FSolarTablesData_GameModeGroup GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GameModeGroup.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ea6a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ea470
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_GameModeMain
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GameModeMain : USolarTableReaderBase {

	struct FSolarTablesData_GameModeMain TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GameModeMain.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eb9d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GameModeMain.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eb3b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GameModeMain.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eaef0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GameModeMain.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GameModeMain.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eab90
	struct FSolarTablesData_GameModeMain GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GameModeMain.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ea790
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GameModeMain.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GameModeMain.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GameModeMain.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ea4b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GameModeMain.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_GameTimeLine
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GameTimeLine : USolarTableReaderBase {

	struct FSolarTablesData_GameTimeLine TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GameTimeLine.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ebbd0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GameTimeLine.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3200
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GameTimeLine.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eafe0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GameTimeLine.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2870
	struct FSolarTablesData_GameTimeLine GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GameTimeLine.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ea880
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ea4f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_GetPoint
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GetPoint : USolarTableReaderBase {

	struct FSolarTablesData_GetPoint TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GetPoint.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ebd30
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GetPoint.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c33e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GetPoint.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eb0d0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GetPoint.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GetPoint.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c29f0
	struct FSolarTablesData_GetPoint GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GetPoint.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d9a00
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GetPoint.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GetPoint.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GetPoint.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ea530
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GetPoint.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_GlobalOutcome
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GlobalOutcome : USolarTableReaderBase {

	struct FSolarTablesData_GlobalOutcome TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GlobalOutcome.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ebe30
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GlobalOutcome.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eb4b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GlobalOutcome.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eb1c0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eac50
	struct FSolarTablesData_GlobalOutcome GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ea9b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ea570
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_GlobalSensitivity
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GlobalSensitivity : USolarTableReaderBase {

	struct FSolarTablesData_GlobalSensitivity TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GlobalSensitivity.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f2a90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GlobalSensitivity.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f2720
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GlobalSensitivity.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f2180
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f1f20
	struct FSolarTablesData_GlobalSensitivity GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f1960
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f17e0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_GunProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GunProperty : USolarTableReaderBase {

	struct FSolarTablesData_GunProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GunProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f2d30
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GunProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f2820
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GunProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f2270
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GunProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GunProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f1fe0
	struct FSolarTablesData_GunProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GunProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f1a50
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GunProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GunProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GunProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f1820
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GunProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_HeroPowerFormula
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_HeroPowerFormula : USolarTableReaderBase {

	struct FSolarTablesData_HeroPowerFormula TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_HeroPowerFormula.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f2fb0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_HeroPowerFormula.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c34d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_HeroPowerFormula.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f2360
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_HeroPowerFormula.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_HeroPowerFormula.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2ab0
	struct FSolarTablesData_HeroPowerFormula GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_HeroPowerFormula.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f1b40
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_HeroPowerFormula.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_HeroPowerFormula.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_HeroPowerFormula.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f1860
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_HeroPowerFormula.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_HighlightRating
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_HighlightRating : USolarTableReaderBase {

	struct FSolarTablesData_HighlightRating TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_HighlightRating.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f31d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_HighlightRating.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb1b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_HighlightRating.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f2450
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_HighlightRating.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_HighlightRating.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d27a0
	struct FSolarTablesData_HighlightRating GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_HighlightRating.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f1c50
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_HighlightRating.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_HighlightRating.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_HighlightRating.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f18a0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_HighlightRating.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_HotSpot
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_HotSpot : USolarTableReaderBase {

	struct FSolarTablesData_HotSpot TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_HotSpot.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f32f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_HotSpot.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb1b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_HotSpot.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f2540
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_HotSpot.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_HotSpot.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba6e0
	struct FSolarTablesData_HotSpot GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_HotSpot.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f1c50
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_HotSpot.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_HotSpot.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_HotSpot.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f18e0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_HotSpot.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_InputAction
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_InputAction : USolarTableReaderBase {

	struct FSolarTablesData_InputAction TryGetRowData(struct FString Key, bool& HasKey); // Function Solarland.SolarTables_Reader_InputAction.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f3410
	bool HasRowKey(struct FString Key); // Function Solarland.SolarTables_Reader_InputAction.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f2920
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_InputAction.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f2630
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_InputAction.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<struct FString>& OutKeys); // Function Solarland.SolarTables_Reader_InputAction.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f20a0
	struct FSolarTablesData_InputAction GetRowData(struct FString Key); // Function Solarland.SolarTables_Reader_InputAction.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f1d50
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_InputAction.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_InputAction.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_InputAction.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28f1920
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_InputAction.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_InputMapping
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_InputMapping : USolarTableReaderBase {

	struct FSolarTablesData_InputMapping TryGetRowData(struct FString Key, bool& HasKey); // Function Solarland.SolarTables_Reader_InputMapping.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fb4b0
	bool HasRowKey(struct FString Key); // Function Solarland.SolarTables_Reader_InputMapping.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fb140
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_InputMapping.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28faba0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_InputMapping.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<struct FString>& OutKeys); // Function Solarland.SolarTables_Reader_InputMapping.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fa940
	struct FSolarTablesData_InputMapping GetRowData(struct FString Key); // Function Solarland.SolarTables_Reader_InputMapping.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fa3f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_InputMapping.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_InputMapping.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_InputMapping.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fa270
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_InputMapping.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Item
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Item : USolarTableReaderBase {

	struct FSolarTablesData_Item TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Item.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fb830
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Item.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3200
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Item.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fac90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Item.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Item.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2870
	struct FSolarTablesData_Item GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Item.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fa580
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Item.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Item.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Item.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fa2b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Item.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_ItemBehavior
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemBehavior : USolarTableReaderBase {

	struct FSolarTablesData_ItemBehavior TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemBehavior.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fb960
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemBehavior.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fb2b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemBehavior.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fad80
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemBehavior.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28faa20
	struct FSolarTablesData_ItemBehavior GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemBehavior.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fa670
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fa2f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_ItemCustomType
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemCustomType : USolarTableReaderBase {

	struct FSolarTablesData_ItemCustomType TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemCustomType.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fbab0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemCustomType.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c34d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemCustomType.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fae70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemCustomType.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2ab0
	struct FSolarTablesData_ItemCustomType GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemCustomType.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c26b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fa330
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_ItemInBattle
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemInBattle : USolarTableReaderBase {

	struct FSolarTablesData_ItemInBattle TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemInBattle.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fbbd0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemInBattle.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fb2b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemInBattle.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28faf60
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemInBattle.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemInBattle.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28faa20
	struct FSolarTablesData_ItemInBattle GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemInBattle.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fa760
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemInBattle.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemInBattle.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemInBattle.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fa370
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemInBattle.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_ItemQuality
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemQuality : USolarTableReaderBase {

	struct FSolarTablesData_ItemQuality TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemQuality.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fbd20
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemQuality.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fb3b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemQuality.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fb050
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemQuality.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemQuality.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28faae0
	struct FSolarTablesData_ItemQuality GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemQuality.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fa850
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemQuality.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemQuality.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemQuality.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fa3b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemQuality.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_ItemSound
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemSound : USolarTableReaderBase {

	struct FSolarTablesData_ItemSound TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemSound.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902e70
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemSound.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902b10
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemSound.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902570
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemSound.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemSound.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902250
	struct FSolarTablesData_ItemSound GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemSound.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2901cc0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemSound.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemSound.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemSound.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2901b40
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemSound.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_ItemWeaponParts
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemWeaponParts : USolarTableReaderBase {

	struct FSolarTablesData_ItemWeaponParts TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemWeaponParts.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902fd0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemWeaponParts.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bafb0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemWeaponParts.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902660
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902310
	struct FSolarTablesData_ItemWeaponParts GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2901dd0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2901b80
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_JetPackModuleProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_JetPackModuleProperty : USolarTableReaderBase {

	struct FSolarTablesData_JetPackModuleProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2903250
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1f00
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902750
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e17b0
	struct FSolarTablesData_JetPackModuleProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e16c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2901bc0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_KillNotify
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_KillNotify : USolarTableReaderBase {

	struct FSolarTablesData_KillNotify TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_KillNotify.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29034d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_KillNotify.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902c00
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_KillNotify.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902840
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_KillNotify.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_KillNotify.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29023d0
	struct FSolarTablesData_KillNotify GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_KillNotify.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2901ec0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_KillNotify.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_KillNotify.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_KillNotify.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2901c00
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_KillNotify.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_LanguageSwitcher
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_LanguageSwitcher : USolarTableReaderBase {

	struct FSolarTablesData_LanguageSwitcher TryGetRowData(struct FString Key, bool& HasKey); // Function Solarland.SolarTables_Reader_LanguageSwitcher.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29036d0
	bool HasRowKey(struct FString Key); // Function Solarland.SolarTables_Reader_LanguageSwitcher.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902d00
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_LanguageSwitcher.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902930
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<struct FString>& OutKeys); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902490
	struct FSolarTablesData_LanguageSwitcher GetRowData(struct FString Key); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2901fb0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2901c40
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_LobbyAutoDownload
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_LobbyAutoDownload : USolarTableReaderBase {

	struct FSolarTablesData_LobbyAutoDownload TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2903b60
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c33e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902a20
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c29f0
	struct FSolarTablesData_LobbyAutoDownload GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902140
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2901c80
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Localization
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization : USolarTableReaderBase {

	struct FSolarTablesData_Localization TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29081f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29080f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907c40
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907b80
	struct FSolarTablesData_Localization GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907a90
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907950
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Localization_BattleUI
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_BattleUI : USolarTableReaderBase {

	struct FSolarTablesData_Localization_BattleUI TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_BattleUI.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29083f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_BattleUI.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29080f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_BattleUI.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907d30
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907b80
	struct FSolarTablesData_Localization_BattleUI GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907a90
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907990
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Localization_EventSystem
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_EventSystem : USolarTableReaderBase {

	struct FSolarTablesData_Localization_EventSystem TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_EventSystem.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29085f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_EventSystem.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29080f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_EventSystem.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907e20
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907b80
	struct FSolarTablesData_Localization_EventSystem GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907a90
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29079d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Localization_General
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_General : USolarTableReaderBase {

	struct FSolarTablesData_Localization_General TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_General.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29087f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_General.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29080f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_General.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907f10
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_General.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_General.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907b80
	struct FSolarTablesData_Localization_General GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_General.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907a90
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_General.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_General.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_General.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907a10
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_General.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Localization_Heroes
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_Heroes : USolarTableReaderBase {

	struct FSolarTablesData_Localization_Heroes TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_Heroes.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29089f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Heroes.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29080f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_Heroes.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2908000
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907b80
	struct FSolarTablesData_Localization_Heroes GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907a90
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907a50
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Localization_Item
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_Item : USolarTableReaderBase {

	struct FSolarTablesData_Localization_Item TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_Item.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x290e600
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Item.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29080f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_Item.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290e060
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_Item.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_Item.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907b80
	struct FSolarTablesData_Localization_Item GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Item.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907a90
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_Item.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_Item.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_Item.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290dbf0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_Item.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Localization_Tournament
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_Tournament : USolarTableReaderBase {

	struct FSolarTablesData_Localization_Tournament TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_Tournament.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x290e800
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Tournament.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29080f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_Tournament.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290e150
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907b80
	struct FSolarTablesData_Localization_Tournament GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907a90
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290dc30
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Localization_Uncategorized
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_Uncategorized : USolarTableReaderBase {

	struct FSolarTablesData_Localization_Uncategorized TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x290ea00
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29080f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290e240
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907b80
	struct FSolarTablesData_Localization_Uncategorized GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907a90
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290dc70
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_LookAtCameras
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_LookAtCameras : USolarTableReaderBase {

	struct FSolarTablesData_LookAtCameras TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_LookAtCameras.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x290ec00
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_LookAtCameras.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb1b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_LookAtCameras.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290e330
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_LookAtCameras.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_LookAtCameras.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d27a0
	struct FSolarTablesData_LookAtCameras GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_LookAtCameras.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290dd70
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_LookAtCameras.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_LookAtCameras.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_LookAtCameras.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290dcb0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_LookAtCameras.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_MapMarkIcon
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_MapMarkIcon : USolarTableReaderBase {

	struct FSolarTablesData_MapMarkIcon TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_MapMarkIcon.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x290ee20
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_MapMarkIcon.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1170
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_MapMarkIcon.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290e420
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca2c0
	struct FSolarTablesData_MapMarkIcon GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290de80
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290dcf0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_MatchRule
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_MatchRule : USolarTableReaderBase {

	struct FSolarTablesData_MatchRule TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_MatchRule.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x290ef50
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_MatchRule.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3110
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_MatchRule.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290e510
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_MatchRule.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_MatchRule.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c27b0
	struct FSolarTablesData_MatchRule GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_MatchRule.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290df70
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_MatchRule.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_MatchRule.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_MatchRule.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x290dd30
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_MatchRule.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_MaterialProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_MaterialProperty : USolarTableReaderBase {

	struct FSolarTablesData_MaterialProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_MaterialProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2915e30
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_MaterialProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28baec0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_MaterialProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2915890
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_MaterialProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba4a0
	struct FSolarTablesData_MaterialProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_MaterialProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29151c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2915040
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_NameCardBackground
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_NameCardBackground : USolarTableReaderBase {

	struct FSolarTablesData_NameCardBackground TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_NameCardBackground.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2915f60
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_NameCardBackground.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902b10
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_NameCardBackground.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2915980
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_NameCardBackground.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29157d0
	struct FSolarTablesData_NameCardBackground GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_NameCardBackground.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29152b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2915080
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_NameCardPose
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_NameCardPose : USolarTableReaderBase {

	struct FSolarTablesData_NameCardPose TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_NameCardPose.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29160c0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_NameCardPose.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fb2b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_NameCardPose.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2915a70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_NameCardPose.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_NameCardPose.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28faa20
	struct FSolarTablesData_NameCardPose GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_NameCardPose.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29153d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_NameCardPose.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_NameCardPose.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_NameCardPose.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29150c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_NameCardPose.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_ObGift
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ObGift : USolarTableReaderBase {

	struct FSolarTablesData_ObGift TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ObGift.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29164a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ObGift.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3110
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ObGift.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2915d40
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ObGift.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ObGift.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c27b0
	struct FSolarTablesData_ObGift GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ObGift.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29156e0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ObGift.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ObGift.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ObGift.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2915180
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ObGift.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_OBSubtitle_Action2Feature
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_OBSubtitle_Action2Feature : USolarTableReaderBase {

	struct FSolarTablesData_OBSubtitle_Action2Feature TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_OBSubtitle_Action2Feature.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2916220
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_OBSubtitle_Action2Feature.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902b10
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_OBSubtitle_Action2Feature.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2915b60
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_OBSubtitle_Action2Feature.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_OBSubtitle_Action2Feature.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29157d0
	struct FSolarTablesData_OBSubtitle_Action2Feature GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_OBSubtitle_Action2Feature.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29154c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_OBSubtitle_Action2Feature.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_OBSubtitle_Action2Feature.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_OBSubtitle_Action2Feature.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2915100
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_OBSubtitle_Action2Feature.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_OBSubtitle_Emotion2Pattern
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_OBSubtitle_Emotion2Pattern : USolarTableReaderBase {

	struct FSolarTablesData_OBSubtitle_Emotion2Pattern TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_OBSubtitle_Emotion2Pattern.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2916380
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_OBSubtitle_Emotion2Pattern.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c34d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_OBSubtitle_Emotion2Pattern.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2915c50
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_OBSubtitle_Emotion2Pattern.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_OBSubtitle_Emotion2Pattern.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2ab0
	struct FSolarTablesData_OBSubtitle_Emotion2Pattern GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_OBSubtitle_Emotion2Pattern.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29155e0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_OBSubtitle_Emotion2Pattern.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_OBSubtitle_Emotion2Pattern.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_OBSubtitle_Emotion2Pattern.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2915140
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_OBSubtitle_Emotion2Pattern.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_OBSubtitle_Feature2Emotion
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_OBSubtitle_Feature2Emotion : USolarTableReaderBase {

	struct FSolarTablesData_OBSubtitle_Feature2Emotion TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_OBSubtitle_Feature2Emotion.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x291cc10
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_OBSubtitle_Feature2Emotion.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1170
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_OBSubtitle_Feature2Emotion.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291c580
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_OBSubtitle_Feature2Emotion.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_OBSubtitle_Feature2Emotion.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca2c0
	struct FSolarTablesData_OBSubtitle_Feature2Emotion GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_OBSubtitle_Feature2Emotion.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291bfb0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_OBSubtitle_Feature2Emotion.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_OBSubtitle_Feature2Emotion.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_OBSubtitle_Feature2Emotion.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291bdf0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_OBSubtitle_Feature2Emotion.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_OBSubtitle_Pattern2Subtitle
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_OBSubtitle_Pattern2Subtitle : USolarTableReaderBase {

	struct FSolarTablesData_OBSubtitle_Pattern2Subtitle TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_OBSubtitle_Pattern2Subtitle.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x291cd60
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_OBSubtitle_Pattern2Subtitle.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1170
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_OBSubtitle_Pattern2Subtitle.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291c670
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_OBSubtitle_Pattern2Subtitle.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_OBSubtitle_Pattern2Subtitle.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca2c0
	struct FSolarTablesData_OBSubtitle_Pattern2Subtitle GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_OBSubtitle_Pattern2Subtitle.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291c0c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_OBSubtitle_Pattern2Subtitle.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_OBSubtitle_Pattern2Subtitle.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_OBSubtitle_Pattern2Subtitle.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291be30
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_OBSubtitle_Pattern2Subtitle.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Outcome
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Outcome : USolarTableReaderBase {

	struct FSolarTablesData_Outcome TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Outcome.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x291ce90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Outcome.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3110
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Outcome.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291c760
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Outcome.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Outcome.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c27b0
	struct FSolarTablesData_Outcome GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Outcome.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291c1b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Outcome.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Outcome.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Outcome.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291be70
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Outcome.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_OutcomeContent
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_OutcomeContent : USolarTableReaderBase {

	struct FSolarTablesData_OutcomeContent TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_OutcomeContent.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x291cff0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_OutcomeContent.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c32f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_OutcomeContent.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291c850
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_OutcomeContent.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2930
	struct FSolarTablesData_OutcomeContent GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_OutcomeContent.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291c2a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291beb0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_OutcomeSet
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_OutcomeSet : USolarTableReaderBase {

	struct FSolarTablesData_OutcomeSet TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_OutcomeSet.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x291d140
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_OutcomeSet.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1170
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_OutcomeSet.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291c940
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_OutcomeSet.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca2c0
	struct FSolarTablesData_OutcomeSet GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_OutcomeSet.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1490
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291bef0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_PickupPriorityItem
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_PickupPriorityItem : USolarTableReaderBase {

	struct FSolarTablesData_PickupPriorityItem TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_PickupPriorityItem.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x291d290
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_PickupPriorityItem.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c33e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_PickupPriorityItem.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291ca30
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x291c4c0
	struct FSolarTablesData_PickupPriorityItem GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291c3c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291bf30
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_PickupPriorityWeaponPart
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_PickupPriorityWeaponPart : USolarTableReaderBase {

	struct FSolarTablesData_PickupPriorityWeaponPart TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x291d480
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1080
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291cb20
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0ae0
	struct FSolarTablesData_PickupPriorityWeaponPart GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291bf70
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_PlayerOperationListLayout
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_PlayerOperationListLayout : USolarTableReaderBase {

	struct FSolarTablesData_PlayerOperationListLayout TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2924a10
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902b10
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2924370
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2902250
	struct FSolarTablesData_PlayerOperationListLayout GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2923ce0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2923b60
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_QuickChat
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_QuickChat : USolarTableReaderBase {

	struct FSolarTablesData_QuickChat TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_QuickChat.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2924cb0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_QuickChat.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2924910
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_QuickChat.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2924460
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_QuickChat.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_QuickChat.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29242b0
	struct FSolarTablesData_QuickChat GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_QuickChat.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2923e00
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_QuickChat.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_QuickChat.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_QuickChat.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2923ba0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_QuickChat.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_QuickVoice
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_QuickVoice : USolarTableReaderBase {

	struct FSolarTablesData_QuickVoice TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_QuickVoice.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2924eb0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_QuickVoice.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c3110
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_QuickVoice.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2924550
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_QuickVoice.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_QuickVoice.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c27b0
	struct FSolarTablesData_QuickVoice GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_QuickVoice.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2923ef0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_QuickVoice.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_QuickVoice.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_QuickVoice.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2923be0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_QuickVoice.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_RankLevel
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_RankLevel : USolarTableReaderBase {

	struct FSolarTablesData_RankLevel TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_RankLevel.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2925000
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_RankLevel.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1260
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_RankLevel.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2924640
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_RankLevel.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_RankLevel.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba860
	struct FSolarTablesData_RankLevel GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_RankLevel.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2923fe0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_RankLevel.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_RankLevel.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_RankLevel.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2923c20
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_RankLevel.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_RankMatch
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_RankMatch : USolarTableReaderBase {

	struct FSolarTablesData_RankMatch TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_RankMatch.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2925150
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_RankMatch.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28cac60
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_RankMatch.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2924730
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_RankMatch.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_RankMatch.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca500
	struct FSolarTablesData_RankMatch GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_RankMatch.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29240d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_RankMatch.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_RankMatch.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_RankMatch.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2923c60
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_RankMatch.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Rescue
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Rescue : USolarTableReaderBase {

	struct FSolarTablesData_Rescue TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Rescue.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2925280
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Rescue.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28baec0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Rescue.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2924820
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Rescue.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Rescue.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba4a0
	struct FSolarTablesData_Rescue GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Rescue.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29241c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Rescue.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Rescue.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Rescue.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2923ca0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Rescue.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_SecondMode
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_SecondMode : USolarTableReaderBase {

	struct FSolarTablesData_SecondMode TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_SecondMode.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2932e70
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_SecondMode.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c34d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_SecondMode.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2932aa0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_SecondMode.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_SecondMode.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c2ab0
	struct FSolarTablesData_SecondMode GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_SecondMode.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2932700
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_SecondMode.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_SecondMode.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_SecondMode.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2932640
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_SecondMode.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_ShieldProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ShieldProperty : USolarTableReaderBase {

	struct FSolarTablesData_ShieldProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ShieldProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29330a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ShieldProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2932d70
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ShieldProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2932b90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ShieldProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29329e0
	struct FSolarTablesData_ShieldProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ShieldProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2932800
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2932680
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Skin
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Skin : USolarTableReaderBase {

	struct FSolarTablesData_Skin TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Skin.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2933320
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Skin.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fb3b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Skin.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2932c80
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Skin.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Skin.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28faae0
	struct FSolarTablesData_Skin GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Skin.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29328f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Skin.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Skin.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Skin.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29326c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Skin.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_TablesReader
// Size: 0x408 (Inherited: 0x28)
struct USolarTables_TablesReader : UObject {
	struct USolarTables_Reader_AccountFixedExp* AccountFixedExp; // 0x28(0x08)
	struct USolarTables_Reader_AccountFlag* AccountFlag; // 0x30(0x08)
	struct USolarTables_Reader_Airline* Airline; // 0x38(0x08)
	struct USolarTables_Reader_Armory* Armory; // 0x40(0x08)
	struct USolarTables_Reader_BattleUpgradeContent* BattleUpgradeContent; // 0x48(0x08)
	struct USolarTables_Reader_BattleUpgradeEffect* BattleUpgradeEffect; // 0x50(0x08)
	struct USolarTables_Reader_BattleUpgradeEffectPool* BattleUpgradeEffectPool; // 0x58(0x08)
	struct USolarTables_Reader_BattleEndRankSettlement* BattleEndRankSettlement; // 0x60(0x08)
	struct USolarTables_Reader_BpAward* BpAward; // 0x68(0x08)
	struct USolarTables_Reader_Behavior* Behavior; // 0x70(0x08)
	struct USolarTables_Reader_EscapeExp* EscapeExp; // 0x78(0x08)
	struct USolarTables_Reader_CaseToggleAlphabet* CaseToggleAlphabet; // 0x80(0x08)
	struct USolarTables_Reader_UnitCharacter* UnitCharacter; // 0x88(0x08)
	struct USolarTables_Reader_CharacterAbility* CharacterAbility; // 0x90(0x08)
	struct USolarTables_Reader_CharacterPassiveAbility* CharacterPassiveAbility; // 0x98(0x08)
	struct USolarTables_Reader_GetPoint* GetPoint; // 0xa0(0x08)
	struct USolarTables_Reader_ChestSpawn* ChestSpawn; // 0xa8(0x08)
	struct USolarTables_Reader_ChestSpawnGroup* ChestSpawnGroup; // 0xb0(0x08)
	struct USolarTables_Reader_ClanFlag* ClanFlag; // 0xb8(0x08)
	struct USolarTables_Reader_DayAndNight* DayAndNight; // 0xc0(0x08)
	struct USolarTables_Reader_DsVariableRange* DsVariableRange; // 0xc8(0x08)
	struct USolarTables_Reader_EShop* EShop; // 0xd0(0x08)
	struct USolarTables_Reader_EShopDemoModel* EShopDemoModel; // 0xd8(0x08)
	struct USolarTables_Reader_EShopGoodsPool* EShopGoodsPool; // 0xe0(0x08)
	struct USolarTables_Reader_EShopGoodsPoolGroup* EShopGoodsPoolGroup; // 0xe8(0x08)
	struct USolarTables_Reader_EShopSpawn* EShopSpawn; // 0xf0(0x08)
	struct USolarTables_Reader_BattleRoyaleMode* BattleRoyaleMode; // 0xf8(0x08)
	struct USolarTables_Reader_GameModeGroup* GameModeGroup; // 0x100(0x08)
	struct USolarTables_Reader_GameModeMain* GameModeMain; // 0x108(0x08)
	struct USolarTables_Reader_OutcomeSet* OutcomeSet; // 0x110(0x08)
	struct USolarTables_Reader_GameTimeLine* GameTimeLine; // 0x118(0x08)
	struct USolarTables_Reader_GlobalOutcome* GlobalOutcome; // 0x120(0x08)
	struct USolarTables_Reader_GlobalSensitivity* GlobalSensitivity; // 0x128(0x08)
	struct USolarTables_Reader_HeroPowerFormula* HeroPowerFormula; // 0x130(0x08)
	struct USolarTables_Reader_InputAction* InputAction; // 0x138(0x08)
	struct USolarTables_Reader_InputMapping* InputMapping; // 0x140(0x08)
	struct USolarTables_Reader_Item* Item; // 0x148(0x08)
	struct USolarTables_Reader_BackpackProperty* BackpackProperty; // 0x150(0x08)
	struct USolarTables_Reader_BackpackTrailProperty* BackpackTrailProperty; // 0x158(0x08)
	struct USolarTables_Reader_CapsuleProperty* CapsuleProperty; // 0x160(0x08)
	struct USolarTables_Reader_Dance* Dance; // 0x168(0x08)
	struct USolarTables_Reader_Emote* Emote; // 0x170(0x08)
	struct USolarTables_Reader_KillNotify* KillNotify; // 0x178(0x08)
	struct USolarTables_Reader_MaterialProperty* MaterialProperty; // 0x180(0x08)
	struct USolarTables_Reader_VehicleSkinProperty* VehicleSkinProperty; // 0x188(0x08)
	struct USolarTables_Reader_Voice* Voice; // 0x190(0x08)
	struct USolarTables_Reader_WeaponSkinProperty* WeaponSkinProperty; // 0x198(0x08)
	struct USolarTables_Reader_ItemCustomType* ItemCustomType; // 0x1a0(0x08)
	struct USolarTables_Reader_ItemInBattle* ItemInBattle; // 0x1a8(0x08)
	struct USolarTables_Reader_ArmorProperty* ArmorProperty; // 0x1b0(0x08)
	struct USolarTables_Reader_Chest* Chest; // 0x1b8(0x08)
	struct USolarTables_Reader_Collect* Collect; // 0x1c0(0x08)
	struct USolarTables_Reader_EnergyProperty* EnergyProperty; // 0x1c8(0x08)
	struct USolarTables_Reader_ExtraEnergyProperty* ExtraEnergyProperty; // 0x1d0(0x08)
	struct USolarTables_Reader_GunProperty* GunProperty; // 0x1d8(0x08)
	struct USolarTables_Reader_ItemBehavior* ItemBehavior; // 0x1e0(0x08)
	struct USolarTables_Reader_ItemWeaponParts* ItemWeaponParts; // 0x1e8(0x08)
	struct USolarTables_Reader_JetPackModuleProperty* JetPackModuleProperty; // 0x1f0(0x08)
	struct USolarTables_Reader_ShieldProperty* ShieldProperty; // 0x1f8(0x08)
	struct USolarTables_Reader_ItemQuality* ItemQuality; // 0x200(0x08)
	struct USolarTables_Reader_ItemSound* ItemSound; // 0x208(0x08)
	struct USolarTables_Reader_LobbyAutoDownload* LobbyAutoDownload; // 0x210(0x08)
	struct USolarTables_Reader_LanguageSwitcher* LanguageSwitcher; // 0x218(0x08)
	struct USolarTables_Reader_Localization* Localization; // 0x220(0x08)
	struct USolarTables_Reader_Localization_BattleUI* Localization_BattleUI; // 0x228(0x08)
	struct USolarTables_Reader_Localization_EventSystem* Localization_EventSystem; // 0x230(0x08)
	struct USolarTables_Reader_Localization_General* Localization_General; // 0x238(0x08)
	struct USolarTables_Reader_Localization_Heroes* Localization_Heroes; // 0x240(0x08)
	struct USolarTables_Reader_Localization_Item* Localization_Item; // 0x248(0x08)
	struct USolarTables_Reader_Localization_Tournament* Localization_Tournament; // 0x250(0x08)
	struct USolarTables_Reader_Localization_Uncategorized* Localization_Uncategorized; // 0x258(0x08)
	struct USolarTables_Reader_GameMap* GameMap; // 0x260(0x08)
	struct USolarTables_Reader_MapMarkIcon* MapMarkIcon; // 0x268(0x08)
	struct USolarTables_Reader_MatchRule* MatchRule; // 0x270(0x08)
	struct USolarTables_Reader_RankMatch* RankMatch; // 0x278(0x08)
	struct USolarTables_Reader_NameCardBackground* NameCardBackground; // 0x280(0x08)
	struct USolarTables_Reader_NameCardPose* NameCardPose; // 0x288(0x08)
	struct USolarTables_Reader_ObGift* ObGift; // 0x290(0x08)
	struct USolarTables_Reader_OBSubtitle_Action2Feature* OBSubtitle_Action2Feature; // 0x298(0x08)
	struct USolarTables_Reader_OBSubtitle_Feature2Emotion* OBSubtitle_Feature2Emotion; // 0x2a0(0x08)
	struct USolarTables_Reader_OBSubtitle_Emotion2Pattern* OBSubtitle_Emotion2Pattern; // 0x2a8(0x08)
	struct USolarTables_Reader_OBSubtitle_Pattern2Subtitle* OBSubtitle_Pattern2Subtitle; // 0x2b0(0x08)
	struct USolarTables_Reader_Outcome* Outcome; // 0x2b8(0x08)
	struct USolarTables_Reader_OutcomeContent* OutcomeContent; // 0x2c0(0x08)
	struct USolarTables_Reader_PickupPriorityItem* PickupPriorityItem; // 0x2c8(0x08)
	struct USolarTables_Reader_PickupPriorityWeaponPart* PickupPriorityWeaponPart; // 0x2d0(0x08)
	struct USolarTables_Reader_CharacterVoiceover* CharacterVoiceover; // 0x2d8(0x08)
	struct USolarTables_Reader_QuickChat* QuickChat; // 0x2e0(0x08)
	struct USolarTables_Reader_QuickVoice* QuickVoice; // 0x2e8(0x08)
	struct USolarTables_Reader_VODownload* VODownload; // 0x2f0(0x08)
	struct USolarTables_Reader_RankLevel* RankLevel; // 0x2f8(0x08)
	struct USolarTables_Reader_AutoDirector* AutoDirector; // 0x300(0x08)
	struct USolarTables_Reader_AutoDirectorActivityScore* AutoDirectorActivityScore; // 0x308(0x08)
	struct USolarTables_Reader_CircularCameras* CircularCameras; // 0x310(0x08)
	struct USolarTables_Reader_HighlightRating* HighlightRating; // 0x318(0x08)
	struct USolarTables_Reader_HotSpot* HotSpot; // 0x320(0x08)
	struct USolarTables_Reader_LookAtCameras* LookAtCameras; // 0x328(0x08)
	struct USolarTables_Reader_Rescue* Rescue; // 0x330(0x08)
	struct USolarTables_Reader_Skin* Skin; // 0x338(0x08)
	struct USolarTables_Reader_Achievement* Achievement; // 0x340(0x08)
	struct USolarTables_Reader_TaskProgress* TaskProgress; // 0x348(0x08)
	struct USolarTables_Reader_TaskSystem* TaskSystem; // 0x350(0x08)
	struct USolarTables_Reader_PlayerOperationListLayout* PlayerOperationListLayout; // 0x358(0x08)
	struct USolarTables_Reader_Variables* Variables; // 0x360(0x08)
	struct USolarTables_Reader_Vehicle* Vehicle; // 0x368(0x08)
	struct USolarTables_Reader_VehicleSkin* VehicleSkin; // 0x370(0x08)
	struct USolarTables_Reader_VehicleType* VehicleType; // 0x378(0x08)
	struct USolarTables_Reader_VehicleSpawn* VehicleSpawn; // 0x380(0x08)
	struct USolarTables_Reader_VehicleSpawnGroup* VehicleSpawnGroup; // 0x388(0x08)
	struct USolarTables_Reader_WarmGame* WarmGame; // 0x390(0x08)
	struct USolarTables_Reader_WarmGameMode* WarmGameMode; // 0x398(0x08)
	struct USolarTables_Reader_WeaponDamage* WeaponDamage; // 0x3a0(0x08)
	struct USolarTables_Reader_Weapon* Weapon; // 0x3a8(0x08)
	struct USolarTables_Reader_WeaponAmmo* WeaponAmmo; // 0x3b0(0x08)
	struct USolarTables_Reader_WeaponBattleUpgrade* WeaponBattleUpgrade; // 0x3b8(0x08)
	struct USolarTables_Reader_WeaponDefault* WeaponDefault; // 0x3c0(0x08)
	struct USolarTables_Reader_WeaponKillTip* WeaponKillTip; // 0x3c8(0x08)
	struct USolarTables_Reader_WeaponParts* WeaponParts; // 0x3d0(0x08)
	struct USolarTables_Reader_WeaponPartsOp* WeaponPartsOp; // 0x3d8(0x08)
	struct USolarTables_Reader_WeaponQuality* WeaponQuality; // 0x3e0(0x08)
	struct USolarTables_Reader_SecondMode* SecondMode; // 0x3e8(0x08)
	struct USolarTables_Reader_WeaponSkin* WeaponSkin; // 0x3f0(0x08)
	struct USolarTables_Reader_WeaponSound* WeaponSound; // 0x3f8(0x08)
	struct USolarTables_Reader_WeaponStatu* WeaponStatu; // 0x400(0x08)
};

// Class Solarland.SolarTables_Reader_TaskProgress
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_TaskProgress : USolarTableReaderBase {

	struct FSolarTablesData_TaskProgress TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_TaskProgress.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x293a1c0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_TaskProgress.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1080
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_TaskProgress.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29399a0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_TaskProgress.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_TaskProgress.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba7a0
	struct FSolarTablesData_TaskProgress GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_TaskProgress.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_TaskProgress.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_TaskProgress.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_TaskProgress.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29390f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_TaskProgress.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_TaskSystem
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_TaskSystem : USolarTableReaderBase {

	struct FSolarTablesData_TaskSystem TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_TaskSystem.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x293a3a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_TaskSystem.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1f00
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_TaskSystem.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939a90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_TaskSystem.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_TaskSystem.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e17b0
	struct FSolarTablesData_TaskSystem GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_TaskSystem.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939270
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_TaskSystem.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_TaskSystem.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_TaskSystem.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939130
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_TaskSystem.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_UnitCharacter
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_UnitCharacter : USolarTableReaderBase {

	struct FSolarTablesData_UnitCharacter TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_UnitCharacter.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x293a510
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_UnitCharacter.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939f40
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_UnitCharacter.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939b80
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_UnitCharacter.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939800
	struct FSolarTablesData_UnitCharacter GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_UnitCharacter.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939360
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939170
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Variables
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Variables : USolarTableReaderBase {

	struct FSolarTablesData_Variables TryGetRowData(struct FString Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Variables.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x293a720
	bool HasRowKey(struct FString Key); // Function Solarland.SolarTables_Reader_Variables.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x293a040
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Variables.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939c70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Variables.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<struct FString>& OutKeys); // Function Solarland.SolarTables_Reader_Variables.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29398c0
	struct FSolarTablesData_Variables GetRowData(struct FString Key); // Function Solarland.SolarTables_Reader_Variables.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939450
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Variables.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Variables.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Variables.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29391b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Variables.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Vehicle
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Vehicle : USolarTableReaderBase {

	struct FSolarTablesData_Vehicle TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Vehicle.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x293aab0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Vehicle.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb1b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Vehicle.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939d60
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Vehicle.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Vehicle.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d27a0
	struct FSolarTablesData_Vehicle GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Vehicle.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939600
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Vehicle.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Vehicle.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Vehicle.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29391f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Vehicle.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_VehicleSkin
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleSkin : USolarTableReaderBase {

	struct FSolarTablesData_VehicleSkin TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleSkin.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x293abe0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSkin.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bafb0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleSkin.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939e50
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleSkin.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba560
	struct FSolarTablesData_VehicleSkin GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSkin.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939710
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2939230
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_VehicleSkinProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleSkinProperty : USolarTableReaderBase {

	struct FSolarTablesData_VehicleSkinProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2940da0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28fb2b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2940670
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28faa20
	struct FSolarTablesData_VehicleSkinProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2940100
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x293fea0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_VehicleSpawn
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleSpawn : USolarTableReaderBase {

	struct FSolarTablesData_VehicleSpawn TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleSpawn.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2940ee0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSpawn.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1170
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleSpawn.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2940760
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca2c0
	struct FSolarTablesData_VehicleSpawn GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28e1490
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x293fee0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_VehicleSpawnGroup
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleSpawnGroup : USolarTableReaderBase {

	struct FSolarTablesData_VehicleSpawnGroup TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2941030
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28cab60
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2940850
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca440
	struct FSolarTablesData_VehicleSpawnGroup GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29401f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x293ff20
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_VehicleType
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleType : USolarTableReaderBase {

	struct FSolarTablesData_VehicleType TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleType.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29415b0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleType.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2940b20
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleType.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2940940
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleType.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleType.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29404c0
	struct FSolarTablesData_VehicleType GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleType.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29402e0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleType.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleType.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleType.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x293ff60
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleType.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_VODownload
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VODownload : USolarTableReaderBase {

	struct FSolarTablesData_VODownload TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VODownload.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2940c20
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VODownload.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eb4b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VODownload.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2940580
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VODownload.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VODownload.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28eac50
	struct FSolarTablesData_VODownload GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VODownload.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x293ffe0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VODownload.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VODownload.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VODownload.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x293fe60
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VODownload.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Voice
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Voice : USolarTableReaderBase {

	struct FSolarTablesData_Voice TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Voice.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29417b0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Voice.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28cac60
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Voice.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2940a30
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Voice.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Voice.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca500
	struct FSolarTablesData_Voice GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Voice.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29403d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Voice.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Voice.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Voice.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x293ffa0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Voice.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WarmGame
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WarmGame : USolarTableReaderBase {

	struct FSolarTablesData_WarmGame TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WarmGame.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2948a30
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WarmGame.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1260
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WarmGame.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2948580
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WarmGame.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WarmGame.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba860
	struct FSolarTablesData_WarmGame GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WarmGame.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2948100
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WarmGame.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WarmGame.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WarmGame.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2948000
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WarmGame.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WarmGameMode
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WarmGameMode : USolarTableReaderBase {

	struct FSolarTablesData_WarmGameMode TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WarmGameMode.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2948b80
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WarmGameMode.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28baec0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WarmGameMode.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2948670
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WarmGameMode.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba4a0
	struct FSolarTablesData_WarmGameMode GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WarmGameMode.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29481f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2948040
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_Weapon
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Weapon : USolarTableReaderBase {

	struct FSolarTablesData_Weapon TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Weapon.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2948e30
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Weapon.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2948940
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Weapon.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2948760
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Weapon.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Weapon.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29484c0
	struct FSolarTablesData_Weapon GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Weapon.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29482e0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Weapon.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Weapon.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Weapon.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2948080
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Weapon.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WeaponAmmo
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponAmmo : USolarTableReaderBase {

	struct FSolarTablesData_WeaponAmmo TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponAmmo.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2948f50
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponAmmo.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29080f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponAmmo.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2948850
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2907b80
	struct FSolarTablesData_WeaponAmmo GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29483d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29480c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WeaponBattleUpgrade
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponBattleUpgrade : USolarTableReaderBase {

	struct FSolarTablesData_WeaponBattleUpgrade TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x294e450
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c33e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294ddb0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c29f0
	struct FSolarTablesData_WeaponBattleUpgrade GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28d9a00
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294d880
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WeaponDamage
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponDamage : USolarTableReaderBase {

	struct FSolarTablesData_WeaponDamage TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponDamage.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x294e650
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponDamage.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c33e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponDamage.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294dea0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponDamage.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28c29f0
	struct FSolarTablesData_WeaponDamage GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponDamage.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x291c3c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294d8c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WeaponDefault
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponDefault : USolarTableReaderBase {

	struct FSolarTablesData_WeaponDefault TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponDefault.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x294e850
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponDefault.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bafb0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponDefault.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294df90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponDefault.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba560
	struct FSolarTablesData_WeaponDefault GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponDefault.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294da00
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294d900
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WeaponKillTip
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponKillTip : USolarTableReaderBase {

	struct FSolarTablesData_WeaponKillTip TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponKillTip.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x294e9b0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponKillTip.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1170
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponKillTip.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294e080
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ca2c0
	struct FSolarTablesData_WeaponKillTip GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294daf0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294d940
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WeaponParts
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponParts : USolarTableReaderBase {

	struct FSolarTablesData_WeaponParts TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponParts.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x294eaf0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponParts.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294e350
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponParts.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294e170
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponParts.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponParts.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x294dcf0
	struct FSolarTablesData_WeaponParts GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponParts.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294dc00
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponParts.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponParts.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponParts.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294d980
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponParts.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WeaponPartsOp
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponPartsOp : USolarTableReaderBase {

	struct FSolarTablesData_WeaponPartsOp TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponPartsOp.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x294ed00
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponPartsOp.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1080
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponPartsOp.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294e260
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba7a0
	struct FSolarTablesData_WeaponPartsOp GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x294d9c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WeaponQuality
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponQuality : USolarTableReaderBase {

	struct FSolarTablesData_WeaponQuality TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponQuality.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2955120
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponQuality.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1080
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponQuality.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2954b70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponQuality.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba7a0
	struct FSolarTablesData_WeaponQuality GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponQuality.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29546a0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WeaponSkin
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponSkin : USolarTableReaderBase {

	struct FSolarTablesData_WeaponSkin TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponSkin.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2955300
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSkin.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b1260
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponSkin.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2954c60
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponSkin.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0c60
	struct FSolarTablesData_WeaponSkin GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSkin.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29547e0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29546e0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WeaponSkinProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponSkinProperty : USolarTableReaderBase {

	struct FSolarTablesData_WeaponSkinProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2955450
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28baec0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2954d50
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba4a0
	struct FSolarTablesData_WeaponSkinProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29548d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2954720
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WeaponSound
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponSound : USolarTableReaderBase {

	struct FSolarTablesData_WeaponSound TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponSound.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2955590
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSound.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2955020
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponSound.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2954e40
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponSound.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponSound.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2954ab0
	struct FSolarTablesData_WeaponSound GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSound.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29549c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponSound.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponSound.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponSound.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2954760
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponSound.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTables_Reader_WeaponStatu
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponStatu : USolarTableReaderBase {

	struct FSolarTablesData_WeaponStatu TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponStatu.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2955790
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponStatu.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28bb1b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponStatu.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2954f30
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0d20
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponStatu.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba6e0
	struct FSolarTablesData_WeaponStatu GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponStatu.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28ba2a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b07c0
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b04e0
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29547a0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x28b0340
};

// Class Solarland.SolarTacticalPropsInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarTacticalPropsInterface : UInterface {

	int32_t K2_GetTacticalPropsQuality(); // Function Solarland.SolarTacticalPropsInterface.K2_GetTacticalPropsQuality // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct FSoftObjectPath K2_GetTacticalPropsIconPath(); // Function Solarland.SolarTacticalPropsInterface.K2_GetTacticalPropsIconPath // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarTacticalPropsWidget
// Size: 0x430 (Inherited: 0x400)
struct USolarTacticalPropsWidget : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct UImage* img_Prop; // 0x410(0x08)
	struct UImage* img_Bg_Border; // 0x418(0x08)
	char pad_420[0x8]; // 0x420(0x08)
	struct UTexture2D* CachedIcon; // 0x428(0x08)

	void K2_SetTacticalProps(struct AActor* InTacticalProps); // Function Solarland.SolarTacticalPropsWidget.K2_SetTacticalProps // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.TaskFormula
// Size: 0x230 (Inherited: 0x228)
struct ATaskFormula : AInfo {
	struct USolarTaskComponent* TaskSystem; // 0x228(0x08)

	void SetTaskProgress(int64_t InTaskID, int64_t ProgressValue, bool bOverrideLastMatch); // Function Solarland.TaskFormula.SetTaskProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x295c1a0
	void IncreaseTaskProgress(int64_t InTaskID, int64_t ProgressValue); // Function Solarland.TaskFormula.IncreaseTaskProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x295ba90
	int32_t GetTaskConditionValue(int64_t InTaskID, int64_t Index); // Function Solarland.TaskFormula.GetTaskConditionValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x295b9c0
};

// Class Solarland.SolarTaskComponent
// Size: 0x1a8 (Inherited: 0xb0)
struct USolarTaskComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FMulticastInlineDelegate TaskUpdateDelegate; // 0xb8(0x10)
	struct FMulticastInlineDelegate TaskCompoleteDelegate; // 0xc8(0x10)
	struct FMulticastInlineDelegate MarkingTaskChangedDelegate; // 0xd8(0x10)
	struct FMulticastInlineDelegate ClientTaskUpdatedDelegate; // 0xe8(0x10)
	struct FMulticastInlineDelegate ClientBattlePassTimeInfoDelegate; // 0xf8(0x10)
	struct UDataTable* TaskTypeHandleConfig; // 0x108(0x08)
	struct ATaskFormula* TaskFormula; // 0x110(0x08)
	struct ATaskFormula* FormulaInst; // 0x118(0x08)
	struct TArray<int64_t> MarkingTask; // 0x120(0x10)
	struct FBattlePassTimeInfo BattlePassTimeInfo; // 0x130(0x18)
	struct TArray<struct FTaskBriefData> tasks; // 0x148(0x10)
	char pad_158[0x50]; // 0x158(0x50)

	void ServerEnableMarkTask(int64_t InTaskID, bool bMarking); // Function Solarland.SolarTaskComponent.ServerEnableMarkTask // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x295c0d0
	void OnRep_Tasks(); // Function Solarland.SolarTaskComponent.OnRep_Tasks // (Final|Native|Public) // @ game+0x295bf50
	void OnRep_MarkingTask(); // Function Solarland.SolarTaskComponent.OnRep_MarkingTask // (Final|Native|Public) // @ game+0x295bf30
	void OnRep_BattlePassTimeInfo(); // Function Solarland.SolarTaskComponent.OnRep_BattlePassTimeInfo // (Final|Native|Public) // @ game+0x295bf10
	bool IsMaxLevel(); // Function Solarland.SolarTaskComponent.IsMaxLevel // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool IsEnable(); // Function Solarland.SolarTaskComponent.IsEnable // (Final|BlueprintCosmetic|Native|Public) // @ game+0x295bb60
	struct FBattlePassTimeInfo GetBattlePassTimeInfo(); // Function Solarland.SolarTaskComponent.GetBattlePassTimeInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x295b690
	struct TArray<struct FTaskBriefData> GetAllTaskBriefData(); // Function Solarland.SolarTaskComponent.GetAllTaskBriefData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x295b660
	struct TArray<int64_t> GetAllMarkTask(); // Function Solarland.SolarTaskComponent.GetAllMarkTask // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x295b630
	void EnableMarkTask(int64_t InTaskID, bool bMarking); // Function Solarland.SolarTaskComponent.EnableMarkTask // (Final|Native|Public|BlueprintCallable) // @ game+0x295b560
	void ClientNotifyTaskComplete(struct FTaskBriefData InTaskInfo); // Function Solarland.SolarTaskComponent.ClientNotifyTaskComplete // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x295b1f0
};

// Class Solarland.SolarTcpNetworkManager
// Size: 0x578 (Inherited: 0x28)
struct USolarTcpNetworkManager : UObject {
	char pad_28[0x21]; // 0x28(0x21)
	bool bIsSsmMatchEnd; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
	struct ASolarTCPSocketClient* SocketClient; // 0x50(0x08)
	struct USCMMatchChannelAction* MatchChannelAction; // 0x58(0x08)
	bool IsSsm; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct FString EncryptKeyClientTCPDynamic; // 0x68(0x10)
	bool bEncrypt; // 0x78(0x01)
	bool bCompression; // 0x79(0x01)
	char pad_7A[0x2]; // 0x7a(0x02)
	struct FDelegate DisconnectedDelegate; // 0x7c(0x10)
	struct FDelegate ConnectedDelegate; // 0x8c(0x10)
	struct FDelegate MessageReceivedDelegate; // 0x9c(0x10)
	char pad_AC[0x4]; // 0xac(0x04)
	struct FSolarPlayerReport MyReport; // 0xb0(0x498)
	char pad_548[0x30]; // 0x548(0x30)

	void UpdateTeamRank(char TeamID, int32_t Rank); // Function Solarland.SolarTcpNetworkManager.UpdateTeamRank // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void UpdateTeamMVPPlayer(char TeamID, struct FString InPlayerID); // Function Solarland.SolarTcpNetworkManager.UpdateTeamMVPPlayer // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void UpdatePlayerData(struct FString PlayerId, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarTcpNetworkManager.UpdatePlayerData // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void UpdatePlayerBattleInfo(struct ASolarPlayerState* ps); // Function Solarland.SolarTcpNetworkManager.UpdatePlayerBattleInfo // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool UpdateBotAIData(struct ASolarPlayerState* PlayerState); // Function Solarland.SolarTcpNetworkManager.UpdateBotAIData // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void TryEndBattle(); // Function Solarland.SolarTcpNetworkManager.TryEndBattle // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void SyncSsmDataToGameState(); // Function Solarland.SolarTcpNetworkManager.SyncSsmDataToGameState // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void SsmDSSendGiftRequest(int32_t GiftID, int32_t Num, struct FString SendPlayerId, struct FString RecivePlayerId, struct ASolarPlayerState* SendPlayer); // Function Solarland.SolarTcpNetworkManager.SsmDSSendGiftRequest // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void SsmDSChangeRoleIDRequest(struct FString InPlayerID, int32_t InRoleID); // Function Solarland.SolarTcpNetworkManager.SsmDSChangeRoleIDRequest // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void SetKnockoutPoints(struct FString InClanId, int32_t InKnockoutPoints); // Function Solarland.SolarTcpNetworkManager.SetKnockoutPoints // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void SendSceenshot2Server(struct FString UserId, struct FString PlayerId, struct FString BattleID, int64_t ScreenshotTime, int32_t ImageSize, int32_t ImageWidth, int32_t ImageHeight, struct FString ImageType, struct FString ImageBuffer); // Function Solarland.SolarTcpNetworkManager.SendSceenshot2Server // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void SendInputDeviceChangedWrapper(enum class ECommonInputType NowInputType); // Function Solarland.SolarTcpNetworkManager.SendInputDeviceChangedWrapper // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void RequestOpenMatchChannel(int32_t InMatchType, struct TArray<int32_t>& InPlayerStructure, int32_t InMaxMatchTime); // Function Solarland.SolarTcpNetworkManager.RequestOpenMatchChannel // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0xb66830
	void ReportTournamentSpectate(struct TMap<struct FString, struct FString>& TournamentSpectateData); // Function Solarland.SolarTcpNetworkManager.ReportTournamentSpectate // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xb66830
	void ReportPlayerBattleInfo(struct ASolarPlayerState* ps); // Function Solarland.SolarTcpNetworkManager.ReportPlayerBattleInfo // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void RemovePlayerData(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.RemovePlayerData // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void RecordLastUsedVehicle(); // Function Solarland.SolarTcpNetworkManager.RecordLastUsedVehicle // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void PlayerRequireToChangeGold(int32_t InChangedGoldType, int32_t InGoldNum, struct FString InPlayerID, struct ASolarPlayerState* InPlayer); // Function Solarland.SolarTcpNetworkManager.PlayerRequireToChangeGold // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void PlayerCancelJoinRequest(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.PlayerCancelJoinRequest // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void PlayerCancelJoin(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.PlayerCancelJoin // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void OpenSupplement(int32_t MaxSecond); // Function Solarland.SolarTcpNetworkManager.OpenSupplement // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnStartBattleResponse(); // Function Solarland.SolarTcpNetworkManager.OnStartBattleResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x295bf70
	void OnRecvData(struct TArray<char>& Data); // Function Solarland.SolarTcpNetworkManager.OnRecvData // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xb66830
	void OnRecordBattleStartTime(float InStartTime); // Function Solarland.SolarTcpNetworkManager.OnRecordBattleStartTime // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool OnReceivedTeamPreJoinRequest(struct TArray<struct FString>& PlayerIds, int32_t TeamID); // Function Solarland.SolarTcpNetworkManager.OnReceivedTeamPreJoinRequest // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x295bdf0
	void OnReceivedPlayerJoinData(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.OnReceivedPlayerJoinData // (Final|Native|Public|BlueprintCallable) // @ game+0x295bd50
	void OnReceivedPlayerCancelJoin(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.OnReceivedPlayerCancelJoin // (Final|Native|Public|BlueprintCallable) // @ game+0x295bcb0
	void OnPostLoadMapWithWorld(struct UWorld* World); // Function Solarland.SolarTcpNetworkManager.OnPostLoadMapWithWorld // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void OnPlayerLogin(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.OnPlayerLogin // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void OnMessageReceived(int32_t ConnId, struct TArray<char>& Message); // Function Solarland.SolarTcpNetworkManager.OnMessageReceived // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x295bbc0
	void OnDisconnected(int32_t ConnId); // Function Solarland.SolarTcpNetworkManager.OnDisconnected // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void OnConnected(int32_t ConnId); // Function Solarland.SolarTcpNetworkManager.OnConnected // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void NotifyTournamentSpectateState(bool bIsEnterReplay, struct FString& BattleID); // Function Solarland.SolarTcpNetworkManager.NotifyTournamentSpectateState // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0xb66830
	void NotifyRoomDataChanged(struct FCustomRoomData& CustomRoomData); // Function Solarland.SolarTcpNetworkManager.NotifyRoomDataChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xb66830
	void NotifyPlayerReward_CustomMode(struct FSCustomMode_PlayerReport& Report); // Function Solarland.SolarTcpNetworkManager.NotifyPlayerReward_CustomMode // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xb66830
	void NotifyPlayerReward(); // Function Solarland.SolarTcpNetworkManager.NotifyPlayerReward // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void NotifyPlayerOffline(struct ASolarPlayerController* PC); // Function Solarland.SolarTcpNetworkManager.NotifyPlayerOffline // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void NotifyPlayerEnterBattle(struct ASolarPlayerController* PC); // Function Solarland.SolarTcpNetworkManager.NotifyPlayerEnterBattle // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void NotifyOBPlayersChanged(struct TArray<struct FString>& PlayerIds); // Function Solarland.SolarTcpNetworkManager.NotifyOBPlayersChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xb66830
	void NotifyEquipCharacterSkinRequest(struct FString PlayerId, int32_t CharacterId, int32_t SkinId); // Function Solarland.SolarTcpNetworkManager.NotifyEquipCharacterSkinRequest // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void NotifyClientBattleStateFish(); // Function Solarland.SolarTcpNetworkManager.NotifyClientBattleStateFish // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void NotifyBattleGroupResultRequest(char TeamID, int32_t Rank); // Function Solarland.SolarTcpNetworkManager.NotifyBattleGroupResultRequest // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool IsEnableAITeamManager(); // Function Solarland.SolarTcpNetworkManager.IsEnableAITeamManager // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool IsAllowReconnectGame(); // Function Solarland.SolarTcpNetworkManager.IsAllowReconnectGame // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void HandlePlayerLogoutInPreparatoryPhase(struct AController* PC); // Function Solarland.SolarTcpNetworkManager.HandlePlayerLogoutInPreparatoryPhase // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void HandlePlayerLogoutInBattlePhase(struct AController* PC); // Function Solarland.SolarTcpNetworkManager.HandlePlayerLogoutInBattlePhase // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void GetWeaponUpgradeSlotByWeaponID(struct TArray<struct FUpgradeSlotStruct>& OutData, struct FString PlayerId, int32_t weaponid); // Function Solarland.SolarTcpNetworkManager.GetWeaponUpgradeSlotByWeaponID // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xb66830
	int32_t GetWeaponSkinIDByWeaponID(struct FString PlayerId, int32_t weaponid); // Function Solarland.SolarTcpNetworkManager.GetWeaponSkinIDByWeaponID // (Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetTournamentID(); // Function Solarland.SolarTcpNetworkManager.GetTournamentID // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FSolarGameModeInfo GetSolarGameModeInfo(); // Function Solarland.SolarTcpNetworkManager.GetSolarGameModeInfo // (Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetRuleID(); // Function Solarland.SolarTcpNetworkManager.GetRuleID // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void GetReportWeaponExpIds(struct TArray<int32_t>& OutWeaponExpIds); // Function Solarland.SolarTcpNetworkManager.GetReportWeaponExpIds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x295b910
	int32_t GetPort(); // Function Solarland.SolarTcpNetworkManager.GetPort // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<int32_t> GetPlayerUsableTailFlameIds(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.GetPlayerUsableTailFlameIds // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct TArray<int32_t> GetPlayerUsableJetpackIds(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.GetPlayerUsableJetpackIds // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct TArray<char> GetPlayerTeamIDs(); // Function Solarland.SolarTcpNetworkManager.GetPlayerTeamIDs // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct TArray<struct FString> GetPlayerRoleAndOpenIDs(); // Function Solarland.SolarTcpNetworkManager.GetPlayerRoleAndOpenIDs // (Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetPlayerCount(); // Function Solarland.SolarTcpNetworkManager.GetPlayerCount // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FString GetPlayerClanID(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.GetPlayerClanID // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void GetPlayerBattleRequestInfo(struct FString InSolarPlayerID, struct FPlayerBattleRequestInfo& OutResult); // Function Solarland.SolarTcpNetworkManager.GetPlayerBattleRequestInfo // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xb66830
	struct TArray<int32_t> GetMLRelatedAIDataMLRatio(); // Function Solarland.SolarTcpNetworkManager.GetMLRelatedAIDataMLRatio // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct TArray<int32_t> GetMLRelatedAIDataMLFeature(); // Function Solarland.SolarTcpNetworkManager.GetMLRelatedAIDataMLFeature // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool GetMLRelatedAIDataMLClosed(); // Function Solarland.SolarTcpNetworkManager.GetMLRelatedAIDataMLClosed // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FString GetLocalPlayerID(); // Function Solarland.SolarTcpNetworkManager.GetLocalPlayerID // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FString GetLocalIPAddress(); // Function Solarland.SolarTcpNetworkManager.GetLocalIPAddress // (Final|Native|Public|BlueprintCallable) // @ game+0x295b890
	struct FKnockoutParams GetKnockoutPointParams(); // Function Solarland.SolarTcpNetworkManager.GetKnockoutPointParams // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool GetIsCloseMatch(); // Function Solarland.SolarTcpNetworkManager.GetIsCloseMatch // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool GetHasMonster(); // Function Solarland.SolarTcpNetworkManager.GetHasMonster // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool GetHasMachineLearning(); // Function Solarland.SolarTcpNetworkManager.GetHasMachineLearning // (Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetCurrentMatchBotTeamPresetID(); // Function Solarland.SolarTcpNetworkManager.GetCurrentMatchBotTeamPresetID // (Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetClientRuleID(); // Function Solarland.SolarTcpNetworkManager.GetClientRuleID // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct TArray<int32_t> GetClientMatchingMapIds(); // Function Solarland.SolarTcpNetworkManager.GetClientMatchingMapIds // (Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetClientGameModeGroupId(); // Function Solarland.SolarTcpNetworkManager.GetClientGameModeGroupId // (Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetClientEntryID(); // Function Solarland.SolarTcpNetworkManager.GetClientEntryID // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FString GetClientBattleID(); // Function Solarland.SolarTcpNetworkManager.GetClientBattleID // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct TMap<int32_t, int32_t> GetAILevelConfig(); // Function Solarland.SolarTcpNetworkManager.GetAILevelConfig // (Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetAIAccompanyTimelineID(); // Function Solarland.SolarTcpNetworkManager.GetAIAccompanyTimelineID // (Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetAboutToEnterPlayerCount(); // Function Solarland.SolarTcpNetworkManager.GetAboutToEnterPlayerCount // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void FreeBotAIData(struct ASolarPlayerState* PlayerState); // Function Solarland.SolarTcpNetworkManager.FreeBotAIData // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void FakePlayerJoin(struct FString PlayerId, int32_t TeamID); // Function Solarland.SolarTcpNetworkManager.FakePlayerJoin // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void DebugData_SetPlayerDataOnLogin(struct ASolarPlayerState* PlayerState); // Function Solarland.SolarTcpNetworkManager.DebugData_SetPlayerDataOnLogin // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void CloseSupplement(); // Function Solarland.SolarTcpNetworkManager.CloseSupplement // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xb66830
	bool CheckPlayerLeave(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.CheckPlayerLeave // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool CheckJoinToken(struct FString Token, struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.CheckJoinToken // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool CheckIfPlayerHasJoined(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.CheckIfPlayerHasJoined // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void CheckBattleOver(); // Function Solarland.SolarTcpNetworkManager.CheckBattleOver // (Event|Public|BlueprintEvent) // @ game+0xb66830
};

// Class Solarland.SolarTeamInfoComponent
// Size: 0x260 (Inherited: 0xb0)
struct USolarTeamInfoComponent : UActorComponent {
	int32_t KillDownCount; // 0xb0(0x04)
	int32_t AssistCount; // 0xb4(0x04)
	int32_t DeathCount; // 0xb8(0x04)
	int32_t SaveCount; // 0xbc(0x04)
	struct FSolarTeamAttributeSet TeamAttributeSet; // 0xc0(0x78)
	struct FWorldMarkDataDetails WorldMarkDatas; // 0x138(0x128)

	void OnWorldMarkAttachedActorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarTeamInfoComponent.OnWorldMarkAttachedActorEndPlay // (Final|Native|Public) // @ game+0x295fd60
};

// Class Solarland.SolarTeamInfoModel
// Size: 0x50 (Inherited: 0x28)
struct USolarTeamInfoModel : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	struct FMulticastInlineDelegate OnTeamInfoReplicated; // 0x40(0x10)

	void SimpleTeamInfoDelegate__DelegateSignature(struct ASolarTeamInfo* PreTeamInfo, struct ASolarTeamInfo* NowTeamInfo); // DelegateFunction Solarland.SolarTeamInfoModel.SimpleTeamInfoDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnMyTeamInfoReplicated(struct ASolarTeamInfo* InPreTeamInfo, struct ASolarTeamInfo* InMyTeamInfo); // Function Solarland.SolarTeamInfoModel.OnMyTeamInfoReplicated // (Final|Native|Public) // @ game+0x295fa30
};

// Class Solarland.SolarTeammateHUDWidgetComponent
// Size: 0x740 (Inherited: 0x6a0)
struct USolarTeammateHUDWidgetComponent : UWidgetComponent {
	char pad_6A0[0x8]; // 0x6a0(0x08)
	float CheckHUDDistanceToCenter; // 0x6a8(0x04)
	float HUDTranslucentValue; // 0x6ac(0x04)
	float LocationUpdateTolerance; // 0x6b0(0x04)
	float InterpolationTimeRatio; // 0x6b4(0x04)
	float InterpolationSpeed; // 0x6b8(0x04)
	float InterpolationEaseInOutExp; // 0x6bc(0x04)
	struct UCurveFloat* DistanceToScaleCurve; // 0x6c0(0x08)
	bool bUseDistanceToCharacterForScale; // 0x6c8(0x01)
	char pad_6C9[0x7]; // 0x6c9(0x07)
	struct UWorldMark_ReviveTeammatesFalling* DyingMarkClass; // 0x6d0(0x08)
	struct TWeakObjectPtr<struct UWorldMark_ReviveTeammatesFalling> DyingMark; // 0x6d8(0x08)
	struct UWorldMark_HUDTeammateOffScreen* TeammateHUDOffScreenClass; // 0x6e0(0x08)
	struct TWeakObjectPtr<struct UWorldMark_HUDTeammateOffScreen> OffScreenWorldMark; // 0x6e8(0x08)
	char pad_6F0[0x4]; // 0x6f0(0x04)
	struct FVector TargetWorldLocation; // 0x6f4(0x0c)
	char pad_700[0x20]; // 0x700(0x20)
	struct FString NotifyHelpSoundName; // 0x720(0x10)
	char pad_730[0x10]; // 0x730(0x10)

	void SetHUDVisibilityByGameState(bool bVis); // Function Solarland.SolarTeammateHUDWidgetComponent.SetHUDVisibilityByGameState // (Final|Native|Public) // @ game+0x2960420
	void SetHUDVisibility(bool bVis); // Function Solarland.SolarTeammateHUDWidgetComponent.SetHUDVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x2960420
	void SelectHeroStateChangedEvent(bool bHUDVisible); // Function Solarland.SolarTeammateHUDWidgetComponent.SelectHeroStateChangedEvent // (Final|Native|Public) // @ game+0x2960020
	void RemindTeammateRescueHelp(struct ASolarPlayerState* SolarPlayerState); // Function Solarland.SolarTeammateHUDWidgetComponent.RemindTeammateRescueHelp // (Final|Native|Public) // @ game+0x295fee0
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.SolarTeammateHUDWidgetComponent.OnSpecTargetChanged // (Final|Native|Public) // @ game+0x295fc90
	void OnRescueStateChanged(enum class ERescueState CurrentRescueState); // Function Solarland.SolarTeammateHUDWidgetComponent.OnRescueStateChanged // (Final|Native|Public) // @ game+0x295fc10
	void OnRefreshHUDShouldShowOffScreen(); // Function Solarland.SolarTeammateHUDWidgetComponent.OnRefreshHUDShouldShowOffScreen // (Final|Native|Public) // @ game+0x295fbd0
	void OnGameUserOffScreenChanged(); // Function Solarland.SolarTeammateHUDWidgetComponent.OnGameUserOffScreenChanged // (Final|Native|Public) // @ game+0x295fa10
};

// Class Solarland.SolarTeamRescueComponent
// Size: 0x100 (Inherited: 0xb0)
struct USolarTeamRescueComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct ASolarCharacter* OwnerChara; // 0xb8(0x08)
	char pad_C0[0x14]; // 0xc0(0x14)
	float TempReqTime; // 0xd4(0x04)
	float RequestTimeout; // 0xd8(0x04)
	bool bSendRequest; // 0xdc(0x01)
	bool bLastRescueBtnVisibility; // 0xdd(0x01)
	char pad_DE[0x2]; // 0xde(0x02)
	struct ASolarCharacter* ClosestTarget; // 0xe0(0x08)
	char pad_E8[0x8]; // 0xe8(0x08)
	struct TArray<struct TWeakObjectPtr<struct ASolarCharacter>> NearByDeathVergeTeamMates; // 0xf0(0x10)

	void TryRescueClosestTeammateLuaCall(); // Function Solarland.SolarTeamRescueComponent.TryRescueClosestTeammateLuaCall // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void TryRescueClosestTeammate(); // Function Solarland.SolarTeamRescueComponent.TryRescueClosestTeammate // (Final|Native|Public) // @ game+0x2960ee0
	void ShowTeamRescueToUI(bool IsShow); // Function Solarland.SolarTeamRescueComponent.ShowTeamRescueToUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetRescueBtnVisibility(bool bIsVisible); // Function Solarland.SolarTeamRescueComponent.SetRescueBtnVisibility // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x2960950
	void ReqStartTeamRescue(struct ASolarCharacter* TargetCharacter); // Function Solarland.SolarTeamRescueComponent.ReqStartTeamRescue // (Final|Native|Public) // @ game+0x295ff90
	void ReqCancelTeamRescure(); // Function Solarland.SolarTeamRescueComponent.ReqCancelTeamRescure // (Final|Native|Public) // @ game+0x295ff70
	void OnRescueStateChangeInternal(); // Function Solarland.SolarTeamRescueComponent.OnRescueStateChangeInternal // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnRescueStateChange(); // Function Solarland.SolarTeamRescueComponent.OnRescueStateChange // (Final|Native|Public) // @ game+0x295fbf0
	void DetectRescueTeammate(float DeltaTime); // Function Solarland.SolarTeamRescueComponent.DetectRescueTeammate // (Final|Native|Protected) // @ game+0x295f0e0
	bool CanRescue(struct ASolarCharacter* Player, bool bStart); // Function Solarland.SolarTeamRescueComponent.CanRescue // (Final|Native|Public) // @ game+0x295ef80
};

// Class Solarland.SolarTestActor
// Size: 0x228 (Inherited: 0x228)
struct ASolarTestActor : AActor {
};

// Class Solarland.SolarTextBlock
// Size: 0x480 (Inherited: 0x160)
struct USolarTextBlock : UTextLayoutWidget {
	bool bEnableLocText; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)
	struct FText Text; // 0x168(0x18)
	int32_t LocTextID; // 0x180(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x184(0x01)
	bool bCapitalsLock; // 0x185(0x01)
	char pad_186[0x2]; // 0x186(0x02)
	struct FVector2D CalcSize; // 0x188(0x08)
	struct FDelegate TextDelegate; // 0x190(0x10)
	struct FSlateColor ColorAndOpacity; // 0x1a0(0x28)
	struct FDelegate ColorAndOpacityDelegate; // 0x1c8(0x10)
	struct FSlateFontInfo Font; // 0x1d8(0x60)
	struct FSlateFontSizeForLang SpecialLangFont; // 0x238(0x18)
	struct FSlateBrush StrikeBrush; // 0x250(0xe0)
	struct FSlateBrush BackgroundBrush; // 0x330(0xe0)
	struct FVector2D ShadowOffset; // 0x410(0x08)
	struct FLinearColor ShadowColorAndOpacity; // 0x418(0x10)
	struct FDelegate ShadowColorAndOpacityDelegate; // 0x428(0x10)
	float MinDesiredWidth; // 0x438(0x04)
	int32_t MaxRowCount; // 0x43c(0x04)
	int32_t MinFontSize; // 0x440(0x04)
	bool bWrapWithInvalidationPanel; // 0x444(0x01)
	bool bAutoWrapText; // 0x445(0x01)
	bool bUsingAccurateScale; // 0x446(0x01)
	bool bEnableCacheSize; // 0x447(0x01)
	bool bSimpleTextMode; // 0x448(0x01)
	bool bNeverResize; // 0x449(0x01)
	char pad_44A[0x36]; // 0x44a(0x36)

	void SetWrapTextAt(float InWrapTextAt); // Function Solarland.SolarTextBlock.SetWrapTextAt // (Native|Public|BlueprintCallable) // @ game+0x2960d50
	void SetWrappingPolicy(enum class ETextWrappingPolicy InWrappingPolicy); // Function Solarland.SolarTextBlock.SetWrappingPolicy // (Native|Public|BlueprintCallable) // @ game+0x2960de0
	void SetText(struct FText InText); // Function Solarland.SolarTextBlock.SetText // (Native|Public|BlueprintCallable) // @ game+0x2960ba0
	void SetStrikeBrush(struct FSlateBrush InStrikeBrush); // Function Solarland.SolarTextBlock.SetStrikeBrush // (Native|Public|BlueprintCallable) // @ game+0x2960af0
	void SetShadowOffset(struct FVector2D InShadowOffset); // Function Solarland.SolarTextBlock.SetShadowOffset // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2960a70
	void SetShadowColorAndOpacity(struct FLinearColor InShadowColorAndOpacity); // Function Solarland.SolarTextBlock.SetShadowColorAndOpacity // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x29609e0
	void SetOpacity(float InOpacity); // Function Solarland.SolarTextBlock.SetOpacity // (Native|Public|BlueprintCallable) // @ game+0x29608c0
	void SetMinDesiredWidth(float InMinDesiredWidth); // Function Solarland.SolarTextBlock.SetMinDesiredWidth // (Native|Public|BlueprintCallable) // @ game+0x2960830
	void SetMargin(struct FMargin InMargin); // Function Solarland.SolarTextBlock.SetMargin // (Native|Public|BlueprintCallable) // @ game+0x29607a0
	void SetLocTextID(int32_t InLocTextID); // Function Solarland.SolarTextBlock.SetLocTextID // (Native|Public|BlueprintCallable) // @ game+0x2960710
	void SetLocLangTextData(struct FText InText, bool InEnableLocText, int32_t InLocTextID, enum class ESolarSupportLanguages InPreviewLang, struct FSlateFontSizeForLang InSlateFontSizeForLang); // Function Solarland.SolarTextBlock.SetLocLangTextData // (Native|Public|BlueprintCallable) // @ game+0x29604b0
	void SetLineHeightPercentage(float InLineHeightPercentage); // Function Solarland.SolarTextBlock.SetLineHeightPercentage // (Native|Public|BlueprintCallable) // @ game+0x1aeeb30
	void SetFont(struct FSlateFontInfo InFontInfo); // Function Solarland.SolarTextBlock.SetFont // (Native|Public|BlueprintCallable) // @ game+0x29602f0
	void SetColorAndOpacity(struct FSlateColor InColorAndOpacity); // Function Solarland.SolarTextBlock.SetColorAndOpacity // (Native|Public|BlueprintCallable) // @ game+0x29601f0
	void SetBackgroundBrush(struct FSlateBrush InBackgroundBrush); // Function Solarland.SolarTextBlock.SetBackgroundBrush // (Native|Public|BlueprintCallable) // @ game+0x2960140
	void SetAutoWrapText(bool InAutoTextWrap); // Function Solarland.SolarTextBlock.SetAutoWrapText // (Native|Public|BlueprintCallable) // @ game+0x29600b0
	struct FVector2D GetTextSize(); // Function Solarland.SolarTextBlock.GetTextSize // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x295f400
	struct FText GetText(); // Function Solarland.SolarTextBlock.GetText // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x295f360
	struct UMaterialInstanceDynamic* GetDynamicOutlineMaterial(); // Function Solarland.SolarTextBlock.GetDynamicOutlineMaterial // (Native|Public|BlueprintCallable) // @ game+0x295f1c0
	struct UMaterialInstanceDynamic* GetDynamicFontMaterial(); // Function Solarland.SolarTextBlock.GetDynamicFontMaterial // (Native|Public|BlueprintCallable) // @ game+0x295f190
};

// Class Solarland.SolarTimeLineManager
// Size: 0x288 (Inherited: 0x228)
struct ASolarTimeLineManager : AActor {
	char pad_228[0x60]; // 0x228(0x60)

	void NotifyWeatherCHange(int32_t ID); // Function Solarland.SolarTimeLineManager.NotifyWeatherCHange // (Final|Native|Private) // @ game+0x295f980
	void NotifyPoisonShrink(int32_t ID); // Function Solarland.SolarTimeLineManager.NotifyPoisonShrink // (Final|Native|Private) // @ game+0x295f8f0
	void NotifyBombing(struct TArray<int32_t> Ids); // Function Solarland.SolarTimeLineManager.NotifyBombing // (Final|Native|Private) // @ game+0x295f800
	void NotifyAirDrops(int32_t ChestSpawnID); // Function Solarland.SolarTimeLineManager.NotifyAirDrops // (Final|Native|Private) // @ game+0x295f770
	void Exec_NotifyBombing(int32_t ZoneId); // Function Solarland.SolarTimeLineManager.Exec_NotifyBombing // (Exec|Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarTimerManager
// Size: 0x38 (Inherited: 0x28)
struct USolarTimerManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	bool bFullCleanup; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)

	void UnPauseTimerInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.UnPauseTimerInternal // (Final|Native|Public) // @ game+0x2960f00
	void TimerCallbackToLuaInternal(struct FString CallbackKey); // Function Solarland.SolarTimerManager.TimerCallbackToLuaInternal // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FTimerHandle SetTimerForNextTickInternal(struct FString CallbackKey); // Function Solarland.SolarTimerManager.SetTimerForNextTickInternal // (Final|Native|Public) // @ game+0x2960c90
	void PauseTimerInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.PauseTimerInternal // (Final|Native|Public) // @ game+0x295fe30
	void OnLuaContextCleanup(bool InBFullCleanup); // Function Solarland.SolarTimerManager.OnLuaContextCleanup // (Event|Public|BlueprintEvent) // @ game+0xb66830
	bool IsValidTimerInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.IsValidTimerInternal // (Final|Native|Public) // @ game+0x295f6d0
	bool IsTimerActiveInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.IsTimerActiveInternal // (Final|Native|Public) // @ game+0x295f630
	void ClearTimerInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.ClearTimerInternal // (Final|Native|Public) // @ game+0x295f050
	struct FTimerHandle AddTimerInternal(struct FString CallbackKey, float Rate, bool IsLoop, float InitialStartDelay); // Function Solarland.SolarTimerManager.AddTimerInternal // (Final|Native|Public) // @ game+0x295ed50
};

// Class Solarland.SolarTitanVehicle
// Size: 0x1420 (Inherited: 0x1400)
struct ASolarTitanVehicle : ASolarLeggedVehicle {
	struct TArray<struct FTitanWeaponSetting> TitanWeaponSettings; // 0x1400(0x10)
	int32_t CurrentTitanWeaponIndex; // 0x1410(0x04)
	char pad_1414[0xc]; // 0x1414(0x0c)

	void TryEquipTitanWepaon(int32_t Index); // Function Solarland.SolarTitanVehicle.TryEquipTitanWepaon // (Final|Native|Public|BlueprintCallable) // @ game+0x2965840
	void SimulativelySetNewTitanWeapon(int32_t InWeaponIndex); // Function Solarland.SolarTitanVehicle.SimulativelySetNewTitanWeapon // (Net|Native|Event|NetMulticast|Public) // @ game+0x29656e0
	void ServerSetNewTitanWeapon(int32_t InWeaponIndex); // Function Solarland.SolarTitanVehicle.ServerSetNewTitanWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x29654d0
	void ServerSetAbilityChargingTime(float InTime); // Function Solarland.SolarTitanVehicle.ServerSetAbilityChargingTime // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2965370
	void ReceiveActionPrimaryReleased(); // Function Solarland.SolarTitanVehicle.ReceiveActionPrimaryReleased // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveActionPrimaryPressed(); // Function Solarland.SolarTitanVehicle.ReceiveActionPrimaryPressed // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarTransformerVehicle
// Size: 0x1560 (Inherited: 0x13c0)
struct ASolarTransformerVehicle : ASolarVehiclePawn {
	char pad_13C0[0x8]; // 0x13c0(0x08)
	struct USolarWheeledVehicleMovement* WheeledMovement; // 0x13c8(0x08)
	struct USolarLeggedVehicleMovement* LeggedMovement; // 0x13d0(0x08)
	float AdditionalVelocityOnZToLeg; // 0x13d8(0x04)
	float MaxVelocityOnXYToWheel; // 0x13dc(0x04)
	struct FTransformerSetting TransformerSettings[0x2]; // 0x13e0(0x130)
	struct FVehicleLocomotionData BrakingLocomotionData; // 0x1510(0x1c)
	enum class ETransformerType CurrentTransformerType; // 0x152c(0x01)
	char pad_152D[0x3]; // 0x152d(0x03)
	struct UCapsuleComponent* VehicleCapsule; // 0x1530(0x08)
	bool bReplicatedDrift; // 0x1538(0x01)
	char pad_1539[0x17]; // 0x1539(0x17)
	int32_t LeggedHealthUIID; // 0x1550(0x04)
	char pad_1554[0xc]; // 0x1554(0x0c)

	void StatVehicleAutoSteering(bool bInSameDirection); // Function Solarland.SolarTransformerVehicle.StatVehicleAutoSteering // (Net|Native|Event|Protected|NetServer) // @ game+0x2965790
	void SetCurrentWeaponActive(); // Function Solarland.SolarTransformerVehicle.SetCurrentWeaponActive // (Final|Native|Public|BlueprintCallable) // @ game+0x29656c0
	void SetBrakingLocomotionData(bool bReset); // Function Solarland.SolarTransformerVehicle.SetBrakingLocomotionData // (Final|Native|Public|BlueprintCallable) // @ game+0x2965630
	void ServerSetIsDrift(bool bInDrift, char InDriveType); // Function Solarland.SolarTransformerVehicle.ServerSetIsDrift // (Net|Native|Event|Protected|NetServer) // @ game+0x2965400
	void OnTransformingFinished(); // Function Solarland.SolarTransformerVehicle.OnTransformingFinished // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnRep_Drift(); // Function Solarland.SolarTransformerVehicle.OnRep_Drift // (Final|Native|Protected) // @ game+0x2965260
	void OnRep_CurrentTransformerType(enum class ETransformerType PreviousType); // Function Solarland.SolarTransformerVehicle.OnRep_CurrentTransformerType // (Final|Native|Protected) // @ game+0x29651e0
};

// Class Solarland.SolarTransformerVehicleAnim
// Size: 0x490 (Inherited: 0x340)
struct USolarTransformerVehicleAnim : USolarVehicleAnimInstance {
	char pad_340[0x10]; // 0x340(0x10)
	enum class ETransformerType TransformerType; // 0x350(0x01)
	char pad_351[0x3]; // 0x351(0x03)
	float UpdateWeaponRotatorAlpha; // 0x354(0x04)
	bool bBrakingState; // 0x358(0x01)
	char pad_359[0x3]; // 0x359(0x03)
	struct FRotator BrakingWeaponYawRot; // 0x35c(0x0c)
	struct FVector FLWheelBoneScale; // 0x368(0x0c)
	struct FVector FRWheelBoneScale; // 0x374(0x0c)
	struct FVector BLWheelBoneScale; // 0x380(0x0c)
	struct FVector BRWheelBoneScale; // 0x38c(0x0c)
	struct FVector FLWheelBoneLocation; // 0x398(0x0c)
	struct FVector FRWheelBoneLocation; // 0x3a4(0x0c)
	struct FVector BLWheelBoneLocation; // 0x3b0(0x0c)
	struct FVector BRWheelBoneLocation; // 0x3bc(0x0c)
	struct FRotator FLWheelBoneRotation; // 0x3c8(0x0c)
	struct FRotator FRWheelBoneRotation; // 0x3d4(0x0c)
	struct FRotator BLWheelBoneRotation; // 0x3e0(0x0c)
	struct FRotator BRWheelBoneRotation; // 0x3ec(0x0c)
	float LeaningDegree; // 0x3f8(0x04)
	float YawDifference; // 0x3fc(0x04)
	enum class EVehicleRotateAnimationType VehicleRotateType; // 0x400(0x01)
	char pad_401[0x3]; // 0x401(0x03)
	struct FVector RotationBlend; // 0x404(0x0c)
	struct FVector FLFootIKEffectorLocation; // 0x410(0x0c)
	struct FVector FRFootIKEffectorLocation; // 0x41c(0x0c)
	struct FVector BLFootIKEffectorLocation; // 0x428(0x0c)
	struct FVector BRFootIKEffectorLocation; // 0x434(0x0c)
	float FLFootIKAlpha; // 0x440(0x04)
	float FRFootIKAlpha; // 0x444(0x04)
	float BLFootIKAlpha; // 0x448(0x04)
	float BRFootIKAlpha; // 0x44c(0x04)
	struct TArray<float> FootRotatorOffsets; // 0x450(0x10)
	float LeftFootLocationX; // 0x460(0x04)
	float RightFootLocationX; // 0x464(0x04)
	struct FVector BodyRelativeLocation; // 0x468(0x0c)
	struct FRotator BodyRelativeRotator; // 0x474(0x0c)
	float ProceduralWalkingAlhpa; // 0x480(0x04)
	char pad_484[0xc]; // 0x484(0x0c)

	struct ASolarTransformerVehicle* GetTransformerVehicle(); // Function Solarland.SolarTransformerVehicleAnim.GetTransformerVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2964c30
};

// Class Solarland.SolarTreasureBoxSpawner
// Size: 0x430 (Inherited: 0x390)
struct ASolarTreasureBoxSpawner : ASolarItemSpawner {
	int32_t ChestSpawnID; // 0x390(0x04)
	enum class ETreasureBoxSpawnType TreasureBoxSpawnType; // 0x394(0x01)
	char pad_395[0x3]; // 0x395(0x03)
	struct TArray<struct FSpawonTreasureBoxIdAndWeight> SpawnTreasureBox; // 0x398(0x10)
	char pad_3A8[0x1c]; // 0x3a8(0x1c)
	struct FRandomStream ItemStream; // 0x3c4(0x08)
	char pad_3CC[0x58]; // 0x3cc(0x58)
	struct FSpawnedActorHandle CachedActorHandle; // 0x424(0x04)
	char pad_428[0x8]; // 0x428(0x08)

	int32_t GetTargetTreasureBoxID(); // Function Solarland.SolarTreasureBoxSpawner.GetTargetTreasureBoxID // (Final|Native|Public) // @ game+0x2964c00
	int32_t GetOutcomeIdTreasureBoxId(int32_t ItemID); // Function Solarland.SolarTreasureBoxSpawner.GetOutcomeIdTreasureBoxId // (Final|Native|Public) // @ game+0x2964b60
	struct FSolarItemData CreateItemDataByKey(int32_t ItemID); // Function Solarland.SolarTreasureBoxSpawner.CreateItemDataByKey // (Final|Native|Public) // @ game+0x29648b0
};

// Class Solarland.SolarTreatmentComponent
// Size: 0xe0 (Inherited: 0xb0)
struct USolarTreatmentComponent : UActorComponent {
	struct FMulticastInlineDelegate OnCharacterHealthLow; // 0xb0(0x10)
	char pad_C0[0x10]; // 0xc0(0x10)
	struct ASolarCharacter* OwnerCharacter; // 0xd0(0x08)
	char pad_D8[0x8]; // 0xd8(0x08)

	void TryStopTreatment(); // Function Solarland.SolarTreatmentComponent.TryStopTreatment // (Final|Native|Public) // @ game+0x2965910
	void TryStatisticsTreatedTimes(); // Function Solarland.SolarTreatmentComponent.TryStatisticsTreatedTimes // (Final|Native|Public) // @ game+0x29658f0
	void TryStartTreatment(); // Function Solarland.SolarTreatmentComponent.TryStartTreatment // (Final|Native|Public) // @ game+0x29658d0
	void StopProgress(); // Function Solarland.SolarTreatmentComponent.StopProgress // (Final|Native|Public) // @ game+0x2965820
	void StartProgress(); // Function Solarland.SolarTreatmentComponent.StartProgress // (Final|Native|Public) // @ game+0x2965770
	bool IsMedicineEnough(); // Function Solarland.SolarTreatmentComponent.IsMedicineEnough // (Final|Native|Public|Const) // @ game+0x29650c0
	bool IsFullHealth(); // Function Solarland.SolarTreatmentComponent.IsFullHealth // (Final|Native|Public|Const) // @ game+0x2965090
	bool IsAbleToContinueTreatment(); // Function Solarland.SolarTreatmentComponent.IsAbleToContinueTreatment // (Final|Native|Public|Const) // @ game+0x2965030
	void IncreaseTreatedTimes(); // Function Solarland.SolarTreatmentComponent.IncreaseTreatedTimes // (Final|Native|Public) // @ game+0x2964f40
	bool CanStartTreatment(); // Function Solarland.SolarTreatmentComponent.CanStartTreatment // (Event|Public|BlueprintEvent|Const) // @ game+0x2d0d160
	bool CanBeTreated(); // Function Solarland.SolarTreatmentComponent.CanBeTreated // (Final|Native|Public|Const) // @ game+0x2964880
};

// Class Solarland.SolarTreeView
// Size: 0xc50 (Inherited: 0xc50)
struct USolarTreeView : UTreeView {
};

// Class Solarland.TutorialGlobalConfig
// Size: 0xd0 (Inherited: 0x30)
struct UTutorialGlobalConfig : UDataAsset {
	bool bSwitch; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TMap<struct FString, enum class ETutorialStage> MapName2TutorialStage; // 0x38(0x50)
	float SubtitleDisappearTime; // 0x88(0x04)
	float AsyncLoadUIDelayTime; // 0x8c(0x04)
	float SameConditionCheckInterval; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
	struct FTutorialLevelConfig TutorialLevelConfig; // 0x98(0x38)

	enum class ETutorialStage GetTutorialStageByLevelName(struct FString LevelName); // Function Solarland.TutorialGlobalConfig.GetTutorialStageByLevelName // (Final|Native|Public|BlueprintCallable) // @ game+0x2964e90
	struct FString GetTutorialLevelMainMapPath(); // Function Solarland.TutorialGlobalConfig.GetTutorialLevelMainMapPath // (Final|Native|Public|BlueprintCallable) // @ game+0x2964e10
	struct FString GetTutorialLevelMainMapName(); // Function Solarland.TutorialGlobalConfig.GetTutorialLevelMainMapName // (Final|Native|Public|BlueprintCallable) // @ game+0x2964d90
	struct FTutorialLevelConfigData GetTutorialLevelConfigDataByName(struct FString LevelName); // Function Solarland.TutorialGlobalConfig.GetTutorialLevelConfigDataByName // (Final|Native|Public|BlueprintCallable) // @ game+0x2964c60
};

// Class Solarland.SolarTutorialManager
// Size: 0x498 (Inherited: 0x30)
struct USolarTutorialManager : USolarGameManager {
	char pad_30[0x20]; // 0x30(0x20)
	enum class ETutorialStage CurrentTutorialStage; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct FMulticastInlineDelegate OnRegisterEvent; // 0x58(0x10)
	struct FMulticastInlineDelegate OnStepActionBegan; // 0x68(0x10)
	struct FMulticastInlineDelegate OnStepActionEnded; // 0x78(0x10)
	struct FMulticastInlineDelegate OnStepActionReset; // 0x88(0x10)
	struct FMulticastInlineDelegate OnStepActionDisposed; // 0x98(0x10)
	char pad_A8[0x70]; // 0xa8(0x70)
	struct UTutorialGlobalConfig* TutorialGlobalConfig; // 0x118(0x08)
	struct TMap<int32_t, struct FTutorialTableRow> TutorialTableMapRows; // 0x120(0x50)
	struct TArray<struct FTutorialActionTableRow> ActionTableRows; // 0x170(0x10)
	struct TMap<int32_t, struct FTutorialConditionTableRow> ConditionTableMapRows; // 0x180(0x50)
	struct TMap<int32_t, struct UTutorial*> Tutorials; // 0x1d0(0x50)
	char pad_220[0x110]; // 0x220(0x110)
	char bIsConditionCheckCodeParsed : 1; // 0x330(0x01)
	char pad_330_1 : 7; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	struct FString TutorialDataTablePath; // 0x338(0x10)
	struct FString ActionDataTablePath; // 0x348(0x10)
	struct FString ConditionDataTablePath; // 0x358(0x10)
	struct FString TutorialGlobalConfigPath; // 0x368(0x10)
	struct TMap<uint16_t, struct FName> OriginCheckFuncNames; // 0x378(0x50)
	struct TMap<uint16_t, struct UFunction*> CheckFuncs; // 0x3c8(0x50)
	char pad_418[0x10]; // 0x418(0x10)
	struct TMap<struct FString, struct FCacheConditionInfo> CacheRanConditions; // 0x428(0x50)
	char pad_478[0x10]; // 0x478(0x10)
	struct UTutorialLevelSaveGame* CurrentTutorialLevelSaveGame; // 0x488(0x08)
	char pad_490[0x8]; // 0x490(0x08)

	struct TArray<struct FString> TriggerWidgetClicked(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerWidgetClicked // (Final|Native|Private|HasOutParms) // @ game+0x296cd50
	struct TArray<struct FString> TriggerWeaponSlotHasSpecifiedItem(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerWeaponSlotHasSpecifiedItem // (Final|Native|Private|HasOutParms) // @ game+0x296cc20
	struct TArray<struct FString> TriggerUseSpecifiedWeaponAbility(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerUseSpecifiedWeaponAbility // (Final|Native|Private|HasOutParms) // @ game+0x296caf0
	struct TArray<struct FString> TriggerUseSpecifiedVehicleWeapon(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerUseSpecifiedVehicleWeapon // (Final|Native|Private|HasOutParms) // @ game+0x296c9c0
	struct TArray<struct FString> TriggerUseSpecifiedVehicleAbility(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerUseSpecifiedVehicleAbility // (Final|Native|Private|HasOutParms) // @ game+0x296c890
	struct TArray<struct FString> TriggerTutorialLevelDone(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerTutorialLevelDone // (Final|Native|Private|HasOutParms) // @ game+0x296c760
	void TriggerTutorialInternal(enum class ETutorialTriggerType TriggerID); // Function Solarland.SolarTutorialManager.TriggerTutorialInternal // (Final|Native|Protected) // @ game+0x296c6e0
	void TriggerTutorialEvents(struct TArray<enum class ETutorialTriggerType>& TriggerTypeArrays, bool bPostTrigger); // Function Solarland.SolarTutorialManager.TriggerTutorialEvents // (Final|Native|Public|HasOutParms) // @ game+0x296c5e0
	void TriggerTutorialEvent(enum class ETutorialTriggerType TriggerType, bool bPostTrigger); // Function Solarland.SolarTutorialManager.TriggerTutorialEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x296c510
	struct TArray<struct FString> TriggerSprintingContinuously(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerSprintingContinuously // (Final|Native|Private|HasOutParms) // @ game+0x296c3e0
	struct TArray<struct FString> TriggerSpecifiedPlayerProficiency(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerSpecifiedPlayerProficiency // (Final|Native|Private|HasOutParms) // @ game+0x296c2b0
	struct TArray<struct FString> TriggerShieldNotFull(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerShieldNotFull // (Final|Native|Private|HasOutParms) // @ game+0x296c180
	struct TArray<struct FString> TriggerRunningStep(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerRunningStep // (Final|Native|Private|HasOutParms) // @ game+0x296c050
	struct TArray<struct FString> TriggerPlayerUpgradeBattleLevel(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerPlayerUpgradeBattleLevel // (Final|Native|Private|HasOutParms) // @ game+0x296bf20
	struct TArray<struct FString> TriggerPlayerInTargetStage(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerPlayerInTargetStage // (Final|Native|Private|HasOutParms) // @ game+0x296bdf0
	struct TArray<struct FString> TriggerPlayerAcountLevel(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerPlayerAcountLevel // (Final|Native|Private|HasOutParms) // @ game+0x296bcc0
	struct TArray<struct FString> TriggerOpenTreasureBox(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerOpenTreasureBox // (Final|Native|Private|HasOutParms) // @ game+0x296bb90
	struct TArray<struct FString> TriggerOpenBigMapUMG(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerOpenBigMapUMG // (Final|Native|Private|HasOutParms) // @ game+0x296ba60
	struct TArray<struct FString> TriggerNearAirDropBox(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerNearAirDropBox // (Final|Native|Private|HasOutParms) // @ game+0x296b930
	struct TArray<struct FString> TriggerJumpBegin(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerJumpBegin // (Final|Native|Private|HasOutParms) // @ game+0x296b800
	struct TArray<struct FString> TriggerHasUIPanelOpened(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerHasUIPanelOpened // (Final|Native|Private|HasOutParms) // @ game+0x296b6d0
	struct TArray<struct FString> TriggerHasTakenDamage(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerHasTakenDamage // (Final|Native|Private|HasOutParms) // @ game+0x296b5a0
	struct TArray<struct FString> TriggerHasSpecifiedItem(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerHasSpecifiedItem // (Final|Native|Private|HasOutParms) // @ game+0x296b470
	struct TArray<struct FString> TriggerHasSpecifiedEquipmentByType(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerHasSpecifiedEquipmentByType // (Final|Native|Private|HasOutParms) // @ game+0x296b340
	struct TArray<struct FString> TriggerFeatureUnlock(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerFeatureUnlock // (Final|Native|Private|HasOutParms) // @ game+0x296b210
	struct TArray<struct FString> TriggerEquipSpecifiedWeapon(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerEquipSpecifiedWeapon // (Final|Native|Private|HasOutParms) // @ game+0x296b0e0
	struct TArray<struct FString> TriggerBotAIDying(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerBotAIDying // (Final|Native|Private|HasOutParms) // @ game+0x296afb0
	struct TArray<struct FString> TriggerApproachTreasureBox(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerApproachTreasureBox // (Final|Native|Private|HasOutParms) // @ game+0x296ae80
	struct TArray<struct FString> TriggerAlreadyTriggeredMaxCount(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerAlreadyTriggeredMaxCount // (Final|Native|Private|HasOutParms) // @ game+0x296ad50
	struct TArray<struct FString> TriggerAirDropBoxLanded(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerAirDropBoxLanded // (Final|Native|Private|HasOutParms) // @ game+0x296ac20
	void TickActivatedTutorials(); // Function Solarland.SolarTutorialManager.TickActivatedTutorials // (Final|Native|Protected) // @ game+0x296ac00
	void SetWidgetInteractionFlag(struct FString InWidgetName, enum class EWidgetInteractionFlag InWidgetInteractionFlag); // Function Solarland.SolarTutorialManager.SetWidgetInteractionFlag // (Final|Native|Private) // @ game+0x296ab20
	void SetTipsUIInteractionFlag(int32_t TutorialID, bool boolChange); // Function Solarland.SolarTutorialManager.SetTipsUIInteractionFlag // (Final|Native|Private) // @ game+0x296aa50
	void SetSignNameBool(struct FString SignName, bool InValue); // Function Solarland.SolarTutorialManager.SetSignNameBool // (Final|Native|Private) // @ game+0x296a970
	void SetFlagNameCount(struct FString FlagName, int32_t Num); // Function Solarland.SolarTutorialManager.SetFlagNameCount // (Final|Native|Private) // @ game+0x296a890
	void SetAirDropBoxLandedAddOneNum(int32_t Value); // Function Solarland.SolarTutorialManager.SetAirDropBoxLandedAddOneNum // (Final|Native|Public) // @ game+0x296a800
	void SaveTutorialLevelSaveGame(); // Function Solarland.SolarTutorialManager.SaveTutorialLevelSaveGame // (Final|Native|Public|BlueprintCallable) // @ game+0x296a7e0
	void SaveLevelTutorialID(struct FString InLevelName, int32_t InTutorialID); // Function Solarland.SolarTutorialManager.SaveLevelTutorialID // (Final|Native|Public|BlueprintCallable) // @ game+0x296a700
	void SaveLevelTutorialHasFinished(struct FString InLevelName, bool InFinished); // Function Solarland.SolarTutorialManager.SaveLevelTutorialHasFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x296a620
	void SaveLevelPlayerStartTag(struct FString InLevelName, struct FString InPlayerStartTag); // Function Solarland.SolarTutorialManager.SaveLevelPlayerStartTag // (Final|Native|Public|BlueprintCallable) // @ game+0x296a520
	void RequestAddTutorialProgress(int32_t TutorialID, int32_t Progress); // Function Solarland.SolarTutorialManager.RequestAddTutorialProgress // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveOnSingleTutorialStart(int32_t TutorialID); // Function Solarland.SolarTutorialManager.ReceiveOnSingleTutorialStart // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveOnSingleTutorialFinished(int32_t TutorialID); // Function Solarland.SolarTutorialManager.ReceiveOnSingleTutorialFinished // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveLoadTutorialLevelData(); // Function Solarland.SolarTutorialManager.ReceiveLoadTutorialLevelData // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveLoadData(); // Function Solarland.SolarTutorialManager.ReceiveLoadData // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveClearData(); // Function Solarland.SolarTutorialManager.ReceiveClearData // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnPostLoadMap(struct FString LevelName); // Function Solarland.SolarTutorialManager.OnPostLoadMap // (Final|Native|Private) // @ game+0x296a480
	bool IsInTutorialLevel(); // Function Solarland.SolarTutorialManager.IsInTutorialLevel // (Final|Native|Public|Const) // @ game+0x296a450
	void InitGuideActorByActionID(struct TArray<int32_t> ActionIDs, struct ATutorialLevelInteractableActor* TutorialGuideActor); // Function Solarland.SolarTutorialManager.InitGuideActorByActionID // (Final|Native|Public|BlueprintCallable) // @ game+0x296a320
	bool HasAnyTutorialPlaying(); // Function Solarland.SolarTutorialManager.HasAnyTutorialPlaying // (Final|Native|Public) // @ game+0x296a2f0
	bool HasAnyMandatoryTutorialPlaying(); // Function Solarland.SolarTutorialManager.HasAnyMandatoryTutorialPlaying // (Final|Native|Public) // @ game+0x296a2c0
	void GM_OpenUI(int32_t ID); // Function Solarland.SolarTutorialManager.GM_OpenUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void GM_CloseUI(int32_t ID); // Function Solarland.SolarTutorialManager.GM_CloseUI // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	enum class EWidgetInteractionFlag GetWidgetInteractionFlag(struct FString InWidgetName); // Function Solarland.SolarTutorialManager.GetWidgetInteractionFlag // (Final|Native|Private) // @ game+0x296a210
	int32_t GetTutorialSingleRoundTriggerMax(int32_t TutorialID); // Function Solarland.SolarTutorialManager.GetTutorialSingleRoundTriggerMax // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct UTutorialLevelSaveGame* GetTutorialLevelSaveGame(); // Function Solarland.SolarTutorialManager.GetTutorialLevelSaveGame // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x296a1e0
	bool GetTipsUIInteractionFlag(int32_t TutorialID); // Function Solarland.SolarTutorialManager.GetTipsUIInteractionFlag // (Final|Native|Private) // @ game+0x296a140
	bool GetSignNameBool(struct FString SignName); // Function Solarland.SolarTutorialManager.GetSignNameBool // (Final|Native|Private) // @ game+0x296a090
	struct UUserWidget* GetPanelUI(struct FString PanelName); // Function Solarland.SolarTutorialManager.GetPanelUI // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	int32_t GetLevelTutorialID(struct FString InLevelName, int32_t DefaultValue); // Function Solarland.SolarTutorialManager.GetLevelTutorialID // (Final|Native|Public|BlueprintCallable) // @ game+0x2969fa0
	bool GetLevelTutorialHasFinished(struct FString InLevelName, bool DefaultValue); // Function Solarland.SolarTutorialManager.GetLevelTutorialHasFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x2969eb0
	int32_t GetFlagNameCount(struct FString FlagName); // Function Solarland.SolarTutorialManager.GetFlagNameCount // (Final|Native|Private) // @ game+0x2969e00
	char GetCurrentPlayerLevel(); // Function Solarland.SolarTutorialManager.GetCurrentPlayerLevel // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct FTutorialActionTableRow GetActionDataByID(int32_t ActionDataID); // Function Solarland.SolarTutorialManager.GetActionDataByID // (Final|Native|Public) // @ game+0x2969d40
	struct UWidget* FindWidget(struct TArray<struct FName>& InWidgetLink); // Function Solarland.SolarTutorialManager.FindWidget // (Final|Native|Protected|HasOutParms) // @ game+0x2969c80
	void EnterTutorialLevel(struct FString LevelName, int32_t Proficiency); // Function Solarland.SolarTutorialManager.EnterTutorialLevel // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool CheckTutorialTipUIOnClick(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckTutorialTipUIOnClick // (Final|Native|Public|HasOutParms) // @ game+0x2969ba0
	bool CheckIfWidgetReleased(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWidgetReleased // (Final|Native|Public|HasOutParms) // @ game+0x2969ac0
	bool CheckIfWidgetPressed(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWidgetPressed // (Final|Native|Public|HasOutParms) // @ game+0x29699e0
	bool CheckIfWidgetPlayAnimationFinish(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWidgetPlayAnimationFinish // (Final|Native|Public|HasOutParms) // @ game+0x29699e0
	bool CheckIfWidgetClicked(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWidgetClicked // (Final|Native|Public|HasOutParms) // @ game+0x2969900
	bool CheckIfWeaponSlotHasSpecifiedItem(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWeaponSlotHasSpecifiedItem // (Final|Native|Public|HasOutParms) // @ game+0x2969820
	bool CheckIfUIPanelOpened(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfUIPanelOpened // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	bool CheckIfTutorialLevelDone(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfTutorialLevelDone // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	bool CheckIfTakeDamage(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfTakeDamage // (Final|Native|Public|HasOutParms) // @ game+0x2969740
	bool CheckIfSprintingContinuously(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfSprintingContinuously // (Final|Native|Public|HasOutParms) // @ game+0x2969660
	bool CheckIfSpecifiedPlayerProficiency(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfSpecifiedPlayerProficiency // (Final|Native|Public|HasOutParms) // @ game+0x2969580
	bool CheckIfShieldNotFull(); // Function Solarland.SolarTutorialManager.CheckIfShieldNotFull // (Final|Native|Public) // @ game+0x2969550
	bool CheckIfRunningStep(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfRunningStep // (Final|Native|Public|HasOutParms) // @ game+0x2969470
	bool CheckIfReloading(); // Function Solarland.SolarTutorialManager.CheckIfReloading // (Final|Native|Public) // @ game+0x2969440
	bool CheckIfRechargingShield(); // Function Solarland.SolarTutorialManager.CheckIfRechargingShield // (Final|Native|Public) // @ game+0x2969410
	bool CheckIfPlayerLevel(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfPlayerLevel // (Final|Native|Public|HasOutParms) // @ game+0x2969330
	bool CheckIfPlayerInTargetScene(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfPlayerInTargetScene // (Final|Native|Public|HasOutParms) // @ game+0x2969250
	bool CheckIfPlayerInBattling(); // Function Solarland.SolarTutorialManager.CheckIfPlayerInBattling // (Final|Native|Public) // @ game+0x2969220
	bool CheckIfPlayerBattleLevel(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfPlayerBattleLevel // (Final|Native|Public|HasOutParms) // @ game+0x2969140
	bool CheckIfOpenBigMapUMG(); // Function Solarland.SolarTutorialManager.CheckIfOpenBigMapUMG // (Final|Native|Public) // @ game+0x2969110
	bool CheckIfNearAirDropBox(); // Function Solarland.SolarTutorialManager.CheckIfNearAirDropBox // (Final|Native|Public) // @ game+0x29690e0
	bool CheckIfJumpBegin(); // Function Solarland.SolarTutorialManager.CheckIfJumpBegin // (Final|Native|Public) // @ game+0x29690b0
	bool CheckIfJetFlyingVertically(); // Function Solarland.SolarTutorialManager.CheckIfJetFlyingVertically // (Final|Native|Public) // @ game+0x2969080
	bool CheckIfJetFlyingHorizontally(); // Function Solarland.SolarTutorialManager.CheckIfJetFlyingHorizontally // (Final|Native|Public) // @ game+0x2969050
	bool CheckIfInWater(); // Function Solarland.SolarTutorialManager.CheckIfInWater // (Final|Native|Public) // @ game+0x2969020
	bool CheckIfInVehicle(); // Function Solarland.SolarTutorialManager.CheckIfInVehicle // (Final|Native|Public) // @ game+0x2968ff0
	bool CheckIfInAir(); // Function Solarland.SolarTutorialManager.CheckIfInAir // (Final|Native|Public) // @ game+0x2968fc0
	bool CheckIfHasSpecifiedItem(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfHasSpecifiedItem // (Final|Native|Public|HasOutParms) // @ game+0x2968ee0
	bool CheckIfHasSpecifiedEquipmentByType(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfHasSpecifiedEquipmentByType // (Final|Native|Public|HasOutParms) // @ game+0x2968e00
	bool CheckIfHasSpecifiedEquipmentById(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfHasSpecifiedEquipmentById // (Final|Native|Public|HasOutParms) // @ game+0x2968d20
	bool CheckIfHasShield(); // Function Solarland.SolarTutorialManager.CheckIfHasShield // (Final|Native|Public) // @ game+0x2968cf0
	bool CheckIfHasMatched(); // Function Solarland.SolarTutorialManager.CheckIfHasMatched // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool CheckIfGrowTaskInLevelReceivedAnimationFinish(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfGrowTaskInLevelReceivedAnimationFinish // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	bool CheckIfGrowLevelRewardIsInStatus(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfGrowLevelRewardIsInStatus // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	bool CheckIfFeatureUnlock(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfFeatureUnlock // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	bool CheckIfFeatureOpen(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfFeatureOpen // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	bool CheckIfEquipSpecifiedWeapon(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfEquipSpecifiedWeapon // (Final|Native|Public|HasOutParms) // @ game+0x2968c10
	bool CheckIfDying(); // Function Solarland.SolarTutorialManager.CheckIfDying // (Final|Native|Public) // @ game+0x2968be0
	bool CheckIfDead(); // Function Solarland.SolarTutorialManager.CheckIfDead // (Final|Native|Public) // @ game+0x2968bb0
	bool CheckIfCurrentWeaponAmmoFull(); // Function Solarland.SolarTutorialManager.CheckIfCurrentWeaponAmmoFull // (Final|Native|Public) // @ game+0x2968b80
	bool CheckIfConsumingMedicine(); // Function Solarland.SolarTutorialManager.CheckIfConsumingMedicine // (Final|Native|Public) // @ game+0x2968b50
	bool CheckIfClaimBattlePassLevelReward(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfClaimBattlePassLevelReward // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	bool CheckIfCanUseSpecifiedWeaponAbility(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfCanUseSpecifiedWeaponAbility // (Final|Native|Public|HasOutParms) // @ game+0x2968a70
	bool CheckIfCanUseSpecifiedVehicleWeapon(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfCanUseSpecifiedVehicleWeapon // (Final|Native|Public|HasOutParms) // @ game+0x2968990
	bool CheckIfCanUseSpecifiedVehicleAbility(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfCanUseSpecifiedVehicleAbility // (Final|Native|Public|HasOutParms) // @ game+0x29688b0
	bool CheckIfCanOpenTreasureBox(); // Function Solarland.SolarTutorialManager.CheckIfCanOpenTreasureBox // (Final|Native|Public) // @ game+0x2968880
	bool CheckIfCanJetFlyVertically(); // Function Solarland.SolarTutorialManager.CheckIfCanJetFlyVertically // (Final|Native|Public) // @ game+0x2968850
	bool CheckIfCanJetFlyHorizontally(); // Function Solarland.SolarTutorialManager.CheckIfCanJetFlyHorizontally // (Final|Native|Public) // @ game+0x2968820
	bool CheckIfBoughtBattlePass(); // Function Solarland.SolarTutorialManager.CheckIfBoughtBattlePass // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool CheckIfBotAIDying(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfBotAIDying // (Final|Native|Public|HasOutParms) // @ game+0x2968740
	bool CheckIfBattlePassLevelGreaterThan(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfBattlePassLevelGreaterThan // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	bool CheckIfApproachElectronicTreasureBox(); // Function Solarland.SolarTutorialManager.CheckIfApproachElectronicTreasureBox // (Final|Native|Public) // @ game+0x2968710
	bool CheckIfAlreadyTriggeredMaxCount(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfAlreadyTriggeredMaxCount // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	bool CheckIfAirDropBoxLanded(); // Function Solarland.SolarTutorialManager.CheckIfAirDropBoxLanded // (Final|Native|Public) // @ game+0x29686e0
	bool CheckConsumeItemButtonType(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckConsumeItemButtonType // (Final|Native|Public|HasOutParms) // @ game+0x2968600
	void AddTutorialProgress(int32_t TutorialID, int32_t Progress); // Function Solarland.SolarTutorialManager.AddTutorialProgress // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarUAV
// Size: 0x528 (Inherited: 0x4b0)
struct ASolarUAV : ASummonItemBase {
	bool bShowDebug; // 0x4b0(0x01)
	char pad_4B1[0x3]; // 0x4b1(0x03)
	float DebugLineThickness; // 0x4b4(0x04)
	struct USkeletalMeshComponent* Mesh; // 0x4b8(0x08)
	struct FName AttachCharacterSocketName; // 0x4c0(0x08)
	struct UAnimationAsset* AppearAnim; // 0x4c8(0x08)
	float AppearAnimLength; // 0x4d0(0x04)
	char pad_4D4[0x4]; // 0x4d4(0x04)
	struct UAnimationAsset* DisappearAnim; // 0x4d8(0x08)
	float DisppearAnimLength; // 0x4e0(0x04)
	char pad_4E4[0xc]; // 0x4e4(0x0c)
	bool bProbeCollisionConfig; // 0x4f0(0x01)
	char pad_4F1[0x3]; // 0x4f1(0x03)
	float ProbeCollisionInterval; // 0x4f4(0x04)
	float ProbeCollisionRadius; // 0x4f8(0x04)
	float AvoidCollisionMaxHeight; // 0x4fc(0x04)
	float AvoidCollisionOverTime; // 0x500(0x04)
	float AvoidCollisionCDTime; // 0x504(0x04)
	char pad_508[0x20]; // 0x508(0x20)

	void UAVDestroy(); // Function Solarland.SolarUAV.UAVDestroy // (Native|Public|BlueprintCallable) // @ game+0x1ae5cb0
	void OnCharacterInVehicleTag(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAV.OnCharacterInVehicleTag // (Final|Native|Protected) // @ game+0x29704b0
	void Disappear(); // Function Solarland.SolarUAV.Disappear // (Native|Public|BlueprintCallable) // @ game+0x1ae55d0
};

// Class Solarland.SolarUAVRescue
// Size: 0xa20 (Inherited: 0x528)
struct ASolarUAVRescue : ASolarUAV {
	char pad_528[0x21]; // 0x528(0x21)
	enum class EUAVRescueState NewState; // 0x549(0x01)
	char pad_54A[0x6]; // 0x54a(0x06)
	struct FGameplayTagContainer HideIfCharacterOwnTags; // 0x550(0x20)
	struct UAnimationAsset* SuspendAnim_Active_NotWork; // 0x570(0x08)
	struct UAnimationAsset* SuspendAnim_Active_Work; // 0x578(0x08)
	struct UAnimationAsset* SuspendAnim_Deactive; // 0x580(0x08)
	struct UAnimationAsset* ActiveAnim; // 0x588(0x08)
	struct UAnimationAsset* DeactiveAnim; // 0x590(0x08)
	struct UAnimationAsset* BeginWorkAnim; // 0x598(0x08)
	struct UAnimationAsset* EndWorkAnim; // 0x5a0(0x08)
	struct UAnimationAsset* ExplodeAnim; // 0x5a8(0x08)
	struct UParticleSystem* ActiveEffect; // 0x5b0(0x08)
	struct UParticleSystem* AppearBeginEffect; // 0x5b8(0x08)
	struct FName AppearBeginEffectSocket; // 0x5c0(0x08)
	struct UParticleSystem* JetEffect; // 0x5c8(0x08)
	struct FName JetEffectSocket; // 0x5d0(0x08)
	char pad_5D8[0x8]; // 0x5d8(0x08)
	struct FTransform JetEffectTrans; // 0x5e0(0x30)
	struct UParticleSystem* ActiveLoopEffect; // 0x610(0x08)
	struct UParticleSystem* ChaActiveEffect; // 0x618(0x08)
	struct UParticleSystem* ExplodeEffect; // 0x620(0x08)
	struct UParticleSystem* DeathVergeEffect; // 0x628(0x08)
	struct FName ChaActiveEffectSocket; // 0x630(0x08)
	float AppearEffectLength; // 0x638(0x04)
	char pad_63C[0x4]; // 0x63c(0x04)
	struct UMaterialInstance* MatAppearing; // 0x640(0x08)
	struct TArray<struct FMatAppearingData> MatAppearingData; // 0x648(0x10)
	struct UMaterialInstance* MatAppearEndBody; // 0x658(0x08)
	struct UMaterialInstance* MatAppearEndEye; // 0x660(0x08)
	struct FString BeginSound; // 0x668(0x10)
	struct FString EndSound; // 0x678(0x10)
	struct FString ActiveChaSound; // 0x688(0x10)
	struct FString ActiveAnimSound; // 0x698(0x10)
	struct FString BeginActiveLoopSound; // 0x6a8(0x10)
	struct FString EndActiveLoopSound; // 0x6b8(0x10)
	struct FString DeactiveAnimSound; // 0x6c8(0x10)
	struct FString ExplodeSound; // 0x6d8(0x10)
	struct FString BeginDeathVergeLoopSound; // 0x6e8(0x10)
	struct FString EndDeathVergeLoopSound; // 0x6f8(0x10)
	float ChaSpeedThreshold; // 0x708(0x04)
	float RotateSpeed; // 0x70c(0x04)
	float YawOffset; // 0x710(0x04)
	char pad_714[0x4]; // 0x714(0x04)
	struct UCurveFloat* ActivatingScaleCurve; // 0x718(0x08)
	struct UCurveFloat* DeactivatingScaleCurve; // 0x720(0x08)
	struct UCurveFloat* TargetSpeedByDistance; // 0x728(0x08)
	float Acceleration; // 0x730(0x04)
	float MaxDistance; // 0x734(0x04)
	char pad_738[0xc]; // 0x738(0x0c)
	struct FVector DefaultLocationOffset; // 0x744(0x0c)
	struct FVector CrouchLocationOffset; // 0x750(0x0c)
	float TargetLocationOffsetSpeed; // 0x75c(0x04)
	char pad_760[0x24]; // 0x760(0x24)
	float ActiveDuration; // 0x784(0x04)
	float ActiveEffectLength; // 0x788(0x04)
	float DeathVergeHealthThreshold; // 0x78c(0x04)
	struct FSoftObjectPath UAVIcon; // 0x790(0x18)
	char pad_7A8[0x10]; // 0x7a8(0x10)
	struct UParticleSystemComponent* DeathVergeEffectHandle; // 0x7b8(0x08)
	struct UParticleSystemComponent* ActiveLoopEffectHandle; // 0x7c0(0x08)
	bool bFollowCharacter; // 0x7c8(0x01)
	char pad_7C9[0x2]; // 0x7c9(0x02)
	bool bAppearEnd; // 0x7cb(0x01)
	char pad_7CC[0x64]; // 0x7cc(0x64)
	bool bActive; // 0x830(0x01)
	bool bPermanent; // 0x831(0x01)
	bool bExplodeEffect; // 0x832(0x01)
	char pad_833[0x25]; // 0x833(0x25)
	float HealTickInterval; // 0x858(0x04)
	float HealFirstTimeDelay; // 0x85c(0x04)
	float HealHealthAmount; // 0x860(0x04)
	float HealShieldAmount; // 0x864(0x04)
	struct UParticleSystem* HealLineEffect; // 0x868(0x08)
	struct FName HealMeshSocket; // 0x870(0x08)
	struct FString BeginHealSound; // 0x878(0x10)
	struct FString BeginHealLoopSound; // 0x888(0x10)
	struct FString EndHealSound; // 0x898(0x10)
	struct FString EndHealLoopSound; // 0x8a8(0x10)
	struct FString BeginHealHPLoopSound; // 0x8b8(0x10)
	struct FString EndHealHPLoopSound; // 0x8c8(0x10)
	struct FString BeginHealShieldLoopSound; // 0x8d8(0x10)
	struct FString EndHealShieldLoopSound; // 0x8e8(0x10)
	struct UParticleSystemComponent* HealLineEffectHandle; // 0x8f8(0x08)
	char pad_900[0x8]; // 0x900(0x08)
	struct UParticleSystem* RescueEffect; // 0x908(0x08)
	struct UParticleSystem* RescueEffect_Enermy; // 0x910(0x08)
	char pad_918[0x8]; // 0x918(0x08)
	struct FTransform RescueEffectTransform; // 0x920(0x30)
	struct FName RescueMeshSocket; // 0x950(0x08)
	float RescueTime; // 0x958(0x04)
	bool bCheckRescueBlock; // 0x95c(0x01)
	char pad_95D[0x3]; // 0x95d(0x03)
	float CheckRescueBlockInteval; // 0x960(0x04)
	char pad_964[0x4]; // 0x964(0x04)
	struct FString BeginRescueLoopSound; // 0x968(0x10)
	struct FString EndRescueLoopSound; // 0x978(0x10)
	struct FString CompleteRescueSound; // 0x988(0x10)
	struct UParticleSystemComponent* RescueEffectHandle; // 0x998(0x08)
	char pad_9A0[0x10]; // 0x9a0(0x10)
	struct UMaterialInstanceDynamic* MatInstanceAppearingBody; // 0x9b0(0x08)
	struct UMaterialInstanceDynamic* MatInstanceAppearingEye; // 0x9b8(0x08)
	bool bNavigateToOwner; // 0x9c0(0x01)
	char pad_9C1[0x3]; // 0x9c1(0x03)
	float RecordInterval; // 0x9c4(0x04)
	float NavigateInterval; // 0x9c8(0x04)
	float BeginNavigateDistance; // 0x9cc(0x04)
	float EndNavigateDistance; // 0x9d0(0x04)
	char pad_9D4[0x2c]; // 0x9d4(0x2c)
	struct UGameplayEffect* UAVHealBuffGameplayEffect; // 0xa00(0x08)
	struct UGameplayEffect* UAVRescueGameplayEffect; // 0xa08(0x08)
	char pad_A10[0x10]; // 0xa10(0x10)

	void TickRescue(float DeltaTime); // Function Solarland.SolarUAVRescue.TickRescue // (Native|Event|Protected|BlueprintEvent) // @ game+0x2971500
	void TickNavigate(float DeltaTime); // Function Solarland.SolarUAVRescue.TickNavigate // (Native|Event|Protected|BlueprintEvent) // @ game+0x2971470
	void TickHeal(float DeltaTime); // Function Solarland.SolarUAVRescue.TickHeal // (Native|Event|Protected|BlueprintEvent) // @ game+0x29713e0
	void ServerSetRescueBlocked(bool bBlocked); // Function Solarland.SolarUAVRescue.ServerSetRescueBlocked // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2970ca0
	void OnRescueComplete(); // Function Solarland.SolarUAVRescue.OnRescueComplete // (Final|Native|Private) // @ game+0x2970780
	void OnRep_NewState(); // Function Solarland.SolarUAVRescue.OnRep_NewState // (Final|Native|Protected) // @ game+0x2970760
	void OnRep_Active(); // Function Solarland.SolarUAVRescue.OnRep_Active // (Final|Native|Private) // @ game+0x2970740
	void OnCheckUAVHide(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAVRescue.OnCheckUAVHide // (Final|Native|Private) // @ game+0x2970650
	void OnCharacterEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarUAVRescue.OnCharacterEndPlay // (Final|Native|Protected) // @ game+0x2970580
	void OnCharacterDeathVergeStatusTag(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAVRescue.OnCharacterDeathVergeStatusTag // (Final|Native|Private) // @ game+0x29703e0
	void OnCharacterDeathStatusTag(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAVRescue.OnCharacterDeathStatusTag // (Final|Native|Private) // @ game+0x2970310
	float GetRescueTime(); // Function Solarland.SolarUAVRescue.GetRescueTime // (Final|Native|Public|Const) // @ game+0x296fc10
	void CompleteRescueImmediate(); // Function Solarland.SolarUAVRescue.CompleteRescueImmediate // (Final|Native|Public|BlueprintCallable) // @ game+0x296f6b0
};

// Class Solarland.SolarUAVShield
// Size: 0x590 (Inherited: 0x528)
struct ASolarUAVShield : ASolarUAV {
	struct ASolarEnergyShield* EnergyShieldClass; // 0x528(0x08)
	struct FTransform EnergyShieldSpawnTransform; // 0x530(0x30)
	struct FString StartSound; // 0x560(0x10)
	struct USpringArmComponent* SpringArm; // 0x570(0x08)
	char pad_578[0x10]; // 0x578(0x10)
	struct ASolarEnergyShield* EnergyShield; // 0x588(0x08)

	void OnCharacterDeathVergeStatusTag(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAVShield.OnCharacterDeathVergeStatusTag // (Final|Native|Private) // @ game+0x29704b0
};

// Class Solarland.SolarUDPManager
// Size: 0x50 (Inherited: 0x28)
struct USolarUDPManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	int32_t SendBufferSize; // 0x30(0x04)
	int32_t ReceiveBufferSize; // 0x34(0x04)
	char pad_38[0x18]; // 0x38(0x18)

	void OnMessageReceived(struct TArray<char>& Data); // Function Solarland.SolarUDPManager.OnMessageReceived // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xb66830
};

// Class Solarland.SolarUIRoot
// Size: 0x400 (Inherited: 0x400)
struct USolarUIRoot : USolarUserWidget {
};

// Class Solarland.SolarUnArmWeapon
// Size: 0x430 (Inherited: 0x228)
struct ASolarUnArmWeapon : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	float Angle; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct TArray<enum class EObjectTypeQuery> HitDetectableTypes; // 0x238(0x10)
	float Interval; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)
	struct UUserWidget* CrossHair; // 0x250(0x08)
	struct FSoftObjectPath FireIconPath; // 0x258(0x18)
	struct FGameplayCueTag HitCueTag; // 0x270(0x08)
	char pad_278[0x8]; // 0x278(0x08)
	struct FSlateBrush FireBtnBrush; // 0x280(0xe0)
	struct USolarAbilitySystemComponent* AbilitySystemComponent; // 0x360(0x08)
	char pad_368[0x8]; // 0x368(0x08)
	struct ASolarCharacterBase* AttackTargetCharacter; // 0x370(0x08)
	char pad_378[0x50]; // 0x378(0x50)
	struct FSolarDamageInfo DamageInfo; // 0x3c8(0x40)
	char pad_408[0x28]; // 0x408(0x28)

	void TryDealMeleeDamage(struct FVector& Location, float DetectSphereRadius); // Function Solarland.SolarUnArmWeapon.TryDealMeleeDamage // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2971590
	void ServerDealMeleeDamage(struct ASolarCharacterBase* Target, struct FVector ClientHitLoc, bool bHeavyPunch); // Function Solarland.SolarUnArmWeapon.ServerDealMeleeDamage // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x2970b30
	bool HitAnyCharacters(struct ASolarCharacterBase*& HitTarget, struct FVector& Location, float& DetectSphereRadius); // Function Solarland.SolarUnArmWeapon.HitAnyCharacters // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x296fe60
	struct FSlateBrush GetFireButtonBrush(); // Function Solarland.SolarUnArmWeapon.GetFireButtonBrush // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x296f970
	struct ASolarCharacterBase* GetAttackTargetCharacter(); // Function Solarland.SolarUnArmWeapon.GetAttackTargetCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x296f950
};

// Class Solarland.SolarUserLuaWidget
// Size: 0x400 (Inherited: 0x400)
struct USolarUserLuaWidget : USolarUserWidget {

	void OnInitWidgetLuaLogic(); // Function Solarland.SolarUserLuaWidget.OnInitWidgetLuaLogic // (Native|Event|Public|BlueprintEvent) // @ game+0x1ad6de0
	void InitWidgetLuaLogic(); // Function Solarland.SolarUserLuaWidget.InitWidgetLuaLogic // (Final|Native|Public|BlueprintCallable) // @ game+0x296ffa0
};

// Class Solarland.SolarUserWidgetSettings
// Size: 0x110 (Inherited: 0x38)
struct USolarUserWidgetSettings : UDeveloperSettings {
	struct FSoftObjectPath SolarImage_Mat_Normal_91; // 0x38(0x18)
	struct FSoftObjectPath SolarImage_Mat_Mirror_91; // 0x50(0x18)
	struct FSoftObjectPath SolarImage_Mat_Quarter_91; // 0x68(0x18)
	struct FSoftObjectPath SolarImage_Mat_Normal_181; // 0x80(0x18)
	struct FSoftObjectPath SolarImage_Mat_Mirror_181; // 0x98(0x18)
	struct FSoftObjectPath SolarImage_Mat_Quarter_181; // 0xb0(0x18)
	struct FSoftObjectPath SolarImage_Mat_Normal_361; // 0xc8(0x18)
	struct FSoftObjectPath SolarImage_Mat_Mirror_361; // 0xe0(0x18)
	struct FSoftObjectPath SolarImage_Mat_Quarter_361; // 0xf8(0x18)
};

// Class Solarland.SolarAyncTask
// Size: 0x38 (Inherited: 0x28)
struct USolarAyncTask : UObject {
	struct FMulticastInlineDelegate OnAsyncTask; // 0x28(0x10)
};

// Class Solarland.SolarHelper
// Size: 0x28 (Inherited: 0x28)
struct USolarHelper : UObject {

	void OnAsyncTask__DelegateSignature(); // DelegateFunction Solarland.SolarHelper.OnAsyncTask__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	struct FString GetUE4LogFilePath(); // Function Solarland.SolarHelper.GetUE4LogFilePath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9cffd0
	struct FString GetSavedPath(); // Function Solarland.SolarHelper.GetSavedPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x95ba30
	struct FString GetProjectPath(); // Function Solarland.SolarHelper.GetProjectPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9cff50
	struct FString GetGamePersistentDownloadDir(); // Function Solarland.SolarHelper.GetGamePersistentDownloadDir // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9cefd0
	struct FString GetFileText(struct FString Path); // Function Solarland.SolarHelper.GetFileText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x29745b0
	struct TArray<char> GetFileBinary(struct FString Path); // Function Solarland.SolarHelper.GetFileBinary // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x29744d0
	bool CleanAllCacheData(); // Function Solarland.SolarHelper.CleanAllCacheData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2974140
};

// Class Solarland.SolarUtils
// Size: 0x28 (Inherited: 0x28)
struct USolarUtils : UObject {

	struct UTextureRenderTarget2D* WidgetToTexture(struct UUserWidget* Widget, struct FVector2D& DrawSize); // Function Solarland.SolarUtils.WidgetToTexture // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2974f20
	struct FVector2D TransformScreenPositionToLocal(struct UObject* WorldContextObject, struct FVector2D& InScreenPositon, struct FVector2D AnchorsVector); // Function Solarland.SolarUtils.TransformScreenPositionToLocal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2974e00
	void PostAkEvent(struct UAkComponent* InAkComponent, struct ASolarCharacter* InCharacter, struct FString InControlledSoundName, struct FString InTeammateSoundName, struct FString InEnemySoundName); // Function Solarland.SolarUtils.PostAkEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2974af0
	bool NeedOptimizeShow(struct UObject* WorldContext, struct FVector Location, float Radius, float BackThreshold); // Function Solarland.SolarUtils.NeedOptimizeShow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x29748b0
	struct FString GetAndroidSavedPngPath(); // Function Solarland.SolarUtils.GetAndroidSavedPngPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2974450
	bool ExportRenderTarget2DAsPNG(struct UTextureRenderTarget2D* TexRT, struct FString TotalFileName); // Function Solarland.SolarUtils.ExportRenderTarget2DAsPNG // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2974300
	void ExportImageToSystemAlbum(struct FString InFilePath); // Function Solarland.SolarUtils.ExportImageToSystemAlbum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x273f5d0
};

// Class Solarland.SolarUWSettlementBase
// Size: 0x410 (Inherited: 0x400)
struct USolarUWSettlementBase : USolarUserWidget {
	int32_t MvpCharacterID; // 0x400(0x04)
	int32_t MvpSkinID; // 0x404(0x04)
	struct TWeakObjectPtr<struct USettlementStageManager> SettlementStageManager; // 0x408(0x08)

	void SetStageManager(struct USettlementStageManager* InStageManager); // Function Solarland.SolarUWSettlementBase.SetStageManager // (Final|Native|Public) // @ game+0x2974d70
	void PlayMvpCharacterVoice(); // Function Solarland.SolarUWSettlementBase.PlayMvpCharacterVoice // (Final|Native|Public) // @ game+0x2974ad0
};

// Class Solarland.SolarVaultSystemSettings
// Size: 0x2c8 (Inherited: 0x38)
struct USolarVaultSystemSettings : UDeveloperSettings {
	float MaxFacingAngle2D; // 0x38(0x04)
	float MinFallingVeloZ; // 0x3c(0x04)
	float MaxFallingVeloZ; // 0x40(0x04)
	float VaultFallingVeloAngleTolerance; // 0x44(0x04)
	bool bEnableAutoVaultWhileFalling; // 0x48(0x01)
	bool bPreventAutoVaultToFalling; // 0x49(0x01)
	char pad_4A[0x2]; // 0x4a(0x02)
	float AutoMaxFacingAngle2D; // 0x4c(0x04)
	float AutoVaultDistThreshold; // 0x50(0x04)
	float JoystickForwardRange; // 0x54(0x04)
	float JoystickBackwardRange; // 0x58(0x04)
	bool bEnableWallRun; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	struct FVector WallRunForce; // 0x60(0x0c)
	float WallRunDuration; // 0x6c(0x04)
	float MinWallRunTriggerHeight; // 0x70(0x04)
	float WallRunDistThreshold; // 0x74(0x04)
	float WallRunFallingVeloAngleTolerance; // 0x78(0x04)
	float WallRunLetralCheckOffset; // 0x7c(0x04)
	float MaxWallRunFailedAutoVaultHeight; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct TArray<struct FName> ForceWallRunTags; // 0x88(0x10)
	struct TArray<struct FName> IllegalWallProfileNames; // 0x98(0x10)
	bool bEnableAutoWallRun; // 0xa8(0x01)
	char pad_A9[0x3]; // 0xa9(0x03)
	float AutoWallRunDistThreshold; // 0xac(0x04)
	struct TMap<enum class EObstacleDetectorType, struct FDetectorShapeParams> DetectorShapeParams; // 0xb0(0x50)
	float PlatformNorAngleTolerance; // 0x100(0x04)
	float VaultWallNorAngleTolerance; // 0x104(0x04)
	float MinPlatformWidth; // 0x108(0x04)
	float EdgeOffset; // 0x10c(0x04)
	float TraceTolerance; // 0x110(0x04)
	float MaxIllegalCornerHeight; // 0x114(0x04)
	float MaxIllegalCornerWidth; // 0x118(0x04)
	float CancelDistFromWall; // 0x11c(0x04)
	float CapsuleHalfHeightScaler; // 0x120(0x04)
	float WallRunWallNorAngleTolerance; // 0x124(0x04)
	float WallRunWallNorNegAngleTolerance; // 0x128(0x04)
	float WallRunBumpMaxHeight; // 0x12c(0x04)
	float WallRunBumpAngle2D; // 0x130(0x04)
	float WallRunStuckThreshold; // 0x134(0x04)
	int32_t WallRunStuckCount; // 0x138(0x04)
	float VeloThreshold; // 0x13c(0x04)
	struct TMap<enum class EVaultType, struct FVector> WarpTargetOffsets; // 0x140(0x50)
	char pad_190[0x50]; // 0x190(0x50)
	struct FName LandWarpTargetName; // 0x1e0(0x08)
	struct FName HandWarpTargetName; // 0x1e8(0x08)
	struct FName FootWarpTargetName; // 0x1f0(0x08)
	float ServerDistThreshold; // 0x1f8(0x04)
	float TargetSelectRange; // 0x1fc(0x04)
	float TargetSelectAngle; // 0x200(0x04)
	float ChaseLowerLimit; // 0x204(0x04)
	float DistanceWeight; // 0x208(0x04)
	float AngleWeight; // 0x20c(0x04)
	struct FName EnemyWarpTargetName; // 0x210(0x08)
	struct TSoftClassPtr<UObject> TrackWidgetClass; // 0x218(0x28)
	float CapsuleShrinkScale; // 0x240(0x04)
	bool bAdjustMeshZForAdaptingCapsuleShrink; // 0x244(0x01)
	char pad_245[0x3]; // 0x245(0x03)
	float DurationToResetMeshZAdjustment; // 0x248(0x04)
	float GrapplingPlayerAccelLerpSpeed; // 0x24c(0x04)
	struct TSoftObjectPtr<UCurveFloat> GrapplingHookSpringCurve; // 0x250(0x28)
	int32_t GrapplingPointPickNum; // 0x278(0x04)
	int32_t MinGrapplingLineNum; // 0x27c(0x04)
	struct FVector2D GrapplingSelectScreenRange; // 0x280(0x08)
	float MaxGrapplingPinRadius; // 0x288(0x04)
	float GrapplingPathRadius; // 0x28c(0x04)
	float ServerMagThreshold; // 0x290(0x04)
	char MaxClientMagnitude; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	float FollowDanceRange; // 0x298(0x04)
	float FollowDanceCheckInterval; // 0x29c(0x04)
	char pad_2A0[0x28]; // 0x2a0(0x28)

	struct USolarVaultSystemSettings* Get(); // Function Solarland.SolarVaultSystemSettings.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x29743e0
};

// Class Solarland.SolarVehicleAbilitySystemComponent
// Size: 0x12f8 (Inherited: 0x12f8)
struct USolarVehicleAbilitySystemComponent : UAbilitySystemComponent {
};

// Class Solarland.SolarVehicleWeapon
// Size: 0x1120 (Inherited: 0x910)
struct ASolarVehicleWeapon : ASolarWeapon {
	char pad_910[0x8]; // 0x910(0x08)
	float MaxWeaponPitch; // 0x918(0x04)
	float MinWeaponPitch; // 0x91c(0x04)
	float MaxWeaponYaw; // 0x920(0x04)
	float MinWeaponYaw; // 0x924(0x04)
	float PitchFollowSpeed; // 0x928(0x04)
	float YawFollowSpeed; // 0x92c(0x04)
	float SimulationSmoothLerpSpeed; // 0x930(0x04)
	float SimulationSmoothLerpThreshold; // 0x934(0x04)
	bool bAbsoluteRotator; // 0x938(0x01)
	bool bHasScope; // 0x939(0x01)
	bool bHiddenMesh; // 0x93a(0x01)
	char pad_93B[0x1]; // 0x93b(0x01)
	struct FVector ScopeCameraOffset; // 0x93c(0x0c)
	struct FVector ScopeTargetOffset; // 0x948(0x0c)
	float ScopeCameraDistance; // 0x954(0x04)
	float ScopeBlendTime; // 0x958(0x04)
	char pad_95C[0x4]; // 0x95c(0x04)
	struct UVehicleCameraDataAsset* ScopeCameraData; // 0x960(0x08)
	float ScopeFOVSwitchSpeed; // 0x968(0x04)
	float QuickAdsFireDelay; // 0x96c(0x04)
	enum class EVehicleWeaponScopeType DefaultWeaponScopeType; // 0x970(0x01)
	char pad_971[0x7]; // 0x971(0x07)
	struct UVehicleWeaponScopeWidget* ScopeUI; // 0x978(0x08)
	float PitchCameraOffset; // 0x980(0x04)
	bool bCameraFocusWeapon; // 0x984(0x01)
	bool bUseNormalCameraMode; // 0x985(0x01)
	enum class EWeaponFireModeType FireType; // 0x986(0x01)
	char pad_987[0x1]; // 0x987(0x01)
	struct FName FireSocketName; // 0x988(0x08)
	float UpdateShotStartLocThreshold; // 0x990(0x04)
	enum class EAxis FireAixsType; // 0x994(0x01)
	char pad_995[0x3]; // 0x995(0x03)
	struct FName TurretVSocketName; // 0x998(0x08)
	struct FName TurretHSocketName; // 0x9a0(0x08)
	float ShootTolerance; // 0x9a8(0x04)
	char pad_9AC[0x4]; // 0x9ac(0x04)
	struct ASolarVehiclePawn* AttachedVehicle; // 0x9b0(0x08)
	struct ASolarCharacter* WeaponOwner; // 0x9b8(0x08)
	bool bVehicleWeaponScopeOpen; // 0x9c0(0x01)
	bool bActivedWeapon; // 0x9c1(0x01)
	char pad_9C2[0x2]; // 0x9c2(0x02)
	uint32_t RotationYawAndPitchPacket; // 0x9c4(0x04)
	char pad_9C8[0x18]; // 0x9c8(0x18)
	struct USkeletalMeshComponent* VehicleMesh; // 0x9e0(0x08)
	struct TSoftClassPtr<UObject> VehicleStencilClass; // 0x9e8(0x28)
	struct USkeletalMeshComponent* VehicleStencilNew; // 0xa10(0x08)
	struct FName AttachBoneName; // 0xa18(0x08)
	char pad_A20[0x200]; // 0xa20(0x200)
	char bUseAssistLock : 1; // 0xc20(0x01)
	char bShowAssistLockUI : 1; // 0xc20(0x01)
	char pad_C20_2 : 6; // 0xc20(0x01)
	char pad_C21[0x3]; // 0xc21(0x03)
	struct FVector2D AssistLockImageSize; // 0xc24(0x08)
	struct FVector2D PCAssistLockImageSize; // 0xc2c(0x08)
	char bAutoLockSpreadSwitch : 1; // 0xc34(0x01)
	char pad_C34_1 : 7; // 0xc34(0x01)
	char pad_C35[0x3]; // 0xc35(0x03)
	float AutoLockSpreadDecPerSecond; // 0xc38(0x04)
	float PreSelectProgress; // 0xc3c(0x04)
	struct FRuntimeFloatCurve ProgressUpgradeSpeedCurve; // 0xc40(0x88)
	enum class EAssistLockState AssistLockState; // 0xcc8(0x01)
	bool bSimulateWeaponFireSocket; // 0xcc9(0x01)
	char pad_CCA[0x2]; // 0xcca(0x02)
	float TriggerSmoothReticleDistance; // 0xccc(0x04)
	struct FVector2D SmoothReticleSpeed; // 0xcd0(0x08)
	char pad_CD8[0x8]; // 0xcd8(0x08)
	struct FTransform CachedWeaponRelativeTransform; // 0xce0(0x30)
	struct FTransform CachedFireMuzzleTransform; // 0xd10(0x30)
	struct FTransform CachedTurretVSocketTransform; // 0xd40(0x30)
	struct FTransform CachedTurretHSocketTransform; // 0xd70(0x30)
	float SimulateMuzzleDistanceThreshold; // 0xda0(0x04)
	char pad_DA4[0x5c]; // 0xda4(0x5c)
	struct ASolarBullet* VehicleWeaponPrimaryOverrideBulletClass; // 0xe00(0x08)
	struct ASolarBullet* VehicleWeaponSecondaryOverrideBulletClass; // 0xe08(0x08)
	struct ASolarBullet* VehicleWeaponPrimaryOverrideTraceBulletClass; // 0xe10(0x08)
	struct FGameplayTagContainer BlockVehicleWeaponFireTags; // 0xe18(0x20)
	char pad_E38[0x19]; // 0xe38(0x19)
	bool bEnablePreAimingLaser; // 0xe51(0x01)
	bool bNotOptTickIntervalPreAimingActive; // 0xe52(0x01)
	char pad_E53[0x1]; // 0xe53(0x01)
	struct FName PreAimingLaserLaunchScoket; // 0xe54(0x08)
	char pad_E5C[0x4]; // 0xe5c(0x04)
	struct TSoftObjectPtr<UParticleSystem> PreAimingLaserFX; // 0xe60(0x28)
	struct TSoftObjectPtr<UParticleSystem> PreAimingLaserEnermyFX; // 0xe88(0x28)
	int32_t PreAimingLaserChagringPhase; // 0xeb0(0x04)
	char pad_EB4[0x4]; // 0xeb4(0x04)
	struct UParticleSystemComponent* PreAimingLaserEffect; // 0xeb8(0x08)
	bool bEnableBackupAmmo; // 0xec0(0x01)
	char pad_EC1[0x3]; // 0xec1(0x03)
	int32_t BackupAmmoFireCost; // 0xec4(0x04)
	int32_t MaxBackupAmmo; // 0xec8(0x04)
	float ReloadBackupAmmoInterval; // 0xecc(0x04)
	int32_t ReloadBackupAmmoNum; // 0xed0(0x04)
	int32_t CurrentBackupAmmo; // 0xed4(0x04)
	char pad_ED8[0x8]; // 0xed8(0x08)
	bool bEnableRechamber; // 0xee0(0x01)
	char pad_EE1[0x3]; // 0xee1(0x03)
	float PlayRechamberFinishTime; // 0xee4(0x04)
	char pad_EE8[0x8]; // 0xee8(0x08)
	struct FString RechamberStartAndStopSound; // 0xef0(0x10)
	struct FString RechamberFinishSound; // 0xf00(0x10)
	struct FVehicleVFX RechamberAlertVFX; // 0xf10(0x90)
	int32_t RechamberAlertMaterialIndex; // 0xfa0(0x04)
	bool bKeepWeaponStateAfterUncontrolled; // 0xfa4(0x01)
	char pad_FA5[0x3]; // 0xfa5(0x03)
	struct FString ReloadSoundName1P; // 0xfa8(0x10)
	struct FString ReloadSoundName3P; // 0xfb8(0x10)
	struct FString ReloadSoundName3PEnemy; // 0xfc8(0x10)
	bool bReloadingAfterUncontrol; // 0xfd8(0x01)
	char pad_FD9[0x7]; // 0xfd9(0x07)
	struct USolarVehicleGameplayAbility* ReloadAbilityClass; // 0xfe0(0x08)
	bool bIsLargeCaliberWeapon; // 0xfe8(0x01)
	char pad_FE9[0x7]; // 0xfe9(0x07)
	struct TArray<struct FCameraShakeData> LargeCaliberHitCameraShakes; // 0xff0(0x10)
	struct TSoftObjectPtr<UParticleSystem> BulletTargetAreaInSameTeam; // 0x1000(0x28)
	struct TSoftObjectPtr<UMaterialInterface> BulletDecalMaterialInSameTeam; // 0x1028(0x28)
	struct TSoftObjectPtr<UParticleSystem> BulletTargetAreaInEnemy; // 0x1050(0x28)
	struct TSoftObjectPtr<UMaterialInterface> BulletDecalMaterialInEnemy; // 0x1078(0x28)
	float AreaParticleScale; // 0x10a0(0x04)
	struct FVector AreaDecalSize; // 0x10a4(0x0c)
	float AreaFadeOutTime; // 0x10b0(0x04)
	struct FName AreaFadeOutName; // 0x10b4(0x08)
	float ForceAreaDisplayRange; // 0x10bc(0x04)
	float AreaDisplayMaxRange; // 0x10c0(0x04)
	char pad_10C4[0x4]; // 0x10c4(0x04)
	struct TMap<struct FFireUniqueID, struct FBulletLandAreaData> BulletLandAreaMap; // 0x10c8(0x50)
	struct UWeaponRecoilComponent* RecoilComponent; // 0x1118(0x08)

	void VehicleWeaponOpenScope(); // Function Solarland.SolarVehicleWeapon.VehicleWeaponOpenScope // (Final|Native|Public) // @ game+0x2989480
	void VehicleWeaponCloseScope(); // Function Solarland.SolarVehicleWeapon.VehicleWeaponCloseScope // (Final|Native|Public) // @ game+0x2989460
	void ServerUpdateVehicleWeaponRotate(uint32_t PackedRotation); // Function Solarland.SolarVehicleWeapon.ServerUpdateVehicleWeaponRotate // (Net|Native|Event|Protected|NetServer) // @ game+0x2989210
	void ServerSendCurveShotHit(uint32_t SpawnID, float InTime, struct ASolarPlayerController* InPlayerController, struct FHitResult InHit); // Function Solarland.SolarVehicleWeapon.ServerSendCurveShotHit // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2989080
	void ServerCancelVehicleFireAbility(struct FGameplayAbilitySpecHandle InAbilityHandle); // Function Solarland.SolarVehicleWeapon.ServerCancelVehicleFireAbility // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2988ff0
	void ServerAddWeaponFireTagToCharacter(struct ASolarCharacter* InFiredCharacter); // Function Solarland.SolarVehicleWeapon.ServerAddWeaponFireTagToCharacter // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2988f60
	void ResetWeaponRotation(float DeltaTime); // Function Solarland.SolarVehicleWeapon.ResetWeaponRotation // (Final|Native|Public|BlueprintCallable) // @ game+0x2988e10
	void OnVehicleWeaponUnControlled(); // Function Solarland.SolarVehicleWeapon.OnVehicleWeaponUnControlled // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnVehicleWeaponControlled(); // Function Solarland.SolarVehicleWeapon.OnVehicleWeaponControlled // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnStencilLoaded(); // Function Solarland.SolarVehicleWeapon.OnStencilLoaded // (Final|Native|Public) // @ game+0x2988bd0
	void OnRep_BackupAmmoChanged(int32_t InOldAmmo); // Function Solarland.SolarVehicleWeapon.OnRep_BackupAmmoChanged // (Final|Native|Protected) // @ game+0x29889e0
	void LocallyVehicleWeaponTick(float DeltaTime); // Function Solarland.SolarVehicleWeapon.LocallyVehicleWeaponTick // (Final|Native|Protected) // @ game+0x2988960
	bool IsPlayerLocallyControlledWeapon(); // Function Solarland.SolarVehicleWeapon.IsPlayerLocallyControlledWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2988930
	void InitializeVehicleWeapon(struct ASolarVehiclePawn* VehicleWeaponOwner, struct FName& WeaponAttachSocket); // Function Solarland.SolarVehicleWeapon.InitializeVehicleWeapon // (Native|Protected|HasOutParms) // @ game+0x2988850
	struct FVector GetShotTargetLocation(); // Function Solarland.SolarVehicleWeapon.GetShotTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x29887f0
	enum class EWeaponFireModeType GetFireType(); // Function Solarland.SolarVehicleWeapon.GetFireType // (Final|Native|Public|Const) // @ game+0x29887d0
	struct FVector GetAimTargetLocation(); // Function Solarland.SolarVehicleWeapon.GetAimTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2988790
	void ClientWeaponReloadFailed(float InSpentTime, bool bWasCancelled); // Function Solarland.SolarVehicleWeapon.ClientWeaponReloadFailed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2988600
	void ClientSendBackupAmmo(int32_t InCurrentAmmo); // Function Solarland.SolarVehicleWeapon.ClientSendBackupAmmo // (Net|Native|Event|Protected|NetClient) // @ game+0x2988570
	void ClientFinishedWeaponReload(); // Function Solarland.SolarVehicleWeapon.ClientFinishedWeaponReload // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1ae4d30
	void ClientDrawDebugString(struct FVector TextLocation, struct FString Text, struct FColor TextColor, float Duration); // Function Solarland.SolarVehicleWeapon.ClientDrawDebugString // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x2988400
	bool CheckCanOpenScope(); // Function Solarland.SolarVehicleWeapon.CheckCanOpenScope // (Native|Public) // @ game+0x29883d0
	bool CanEnterFireState(); // Function Solarland.SolarVehicleWeapon.CanEnterFireState // (Native|Public) // @ game+0x29883a0
};

// Class Solarland.SolarVehicleAirPlaneWeapon
// Size: 0x1160 (Inherited: 0x1120)
struct ASolarVehicleAirPlaneWeapon : ASolarVehicleWeapon {
	struct USolarAirPlaneMissileConfig* MissileDataAsset; // 0x1120(0x08)
	float ProjectileGravityScale; // 0x1128(0x04)
	float ProjectileSpeed; // 0x112c(0x04)
	float ProjectileMaxRange; // 0x1130(0x04)
	float RandomConeHalfAngle; // 0x1134(0x04)
	int32_t ScatterProjectileCounter; // 0x1138(0x04)
	float BulletSplitMinTime; // 0x113c(0x04)
	float BulletSplitCheckDistance; // 0x1140(0x04)
	float HitEndDelayTime; // 0x1144(0x04)
	float ExpectEndTime; // 0x1148(0x04)
	char pad_114C[0x4]; // 0x114c(0x04)
	struct TArray<struct FClusterBombBullet> ClusterBombBullets; // 0x1150(0x10)

	void ServerClusterBombShot(struct FSpawnClusterBombParam InClusterBomb); // Function Solarland.SolarVehicleAirPlaneWeapon.ServerClusterBombShot // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2974cb0
	void MulticastDrawExplosionDebug(struct FHitResult DebugResult); // Function Solarland.SolarVehicleAirPlaneWeapon.MulticastDrawExplosionDebug // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x29747e0
	void ClientScatterBulletSpawn(struct TArray<struct FSolarVirtualBulletSpawnParameter> InSpawnParameters); // Function Solarland.SolarVehicleAirPlaneWeapon.ClientScatterBulletSpawn // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x2974230
	void ClientClusterBombShot(struct FSpawnClusterBombParam InClusterBomb); // Function Solarland.SolarVehicleAirPlaneWeapon.ClientClusterBombShot // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x2974170
};

// Class Solarland.WheeledVehicleAnim
// Size: 0x28 (Inherited: 0x28)
struct UWheeledVehicleAnim : UInterface {
};

// Class Solarland.LeggedVehicleAnim
// Size: 0x28 (Inherited: 0x28)
struct ULeggedVehicleAnim : UInterface {
};

// Class Solarland.SolarVehicleAttributeSet
// Size: 0xa0 (Inherited: 0x30)
struct USolarVehicleAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData CurrentVehicleHealth; // 0x30(0x10)
	struct FGameplayAttributeData MaxVehicleHealth; // 0x40(0x10)
	struct FGameplayAttributeData MaxBrokenHealth; // 0x50(0x10)
	struct FGameplayAttributeData StealthMaterialPercent; // 0x60(0x10)
	struct FGameplayAttributeData SpeedMultiplier; // 0x70(0x10)
	struct FGameplayAttributeData CurrentVehicleWholeShield; // 0x80(0x10)
	struct FGameplayAttributeData MaxVehicleWholeShield; // 0x90(0x10)

	void OnRep_StealthMaterialPercent(struct FGameplayAttributeData& OldStealthMaterialPercent); // Function Solarland.SolarVehicleAttributeSet.OnRep_StealthMaterialPercent // (Native|Protected|HasOutParms) // @ game+0x2694520
	void OnRep_SpeedMultiplier(struct FGameplayAttributeData& OldSpeedMultiplier); // Function Solarland.SolarVehicleAttributeSet.OnRep_SpeedMultiplier // (Native|Protected|HasOutParms) // @ game+0x2694320
	void OnRep_MaxVehicleWholeShield(struct FGameplayAttributeData& OldMaxVehicleWholeShield); // Function Solarland.SolarVehicleAttributeSet.OnRep_MaxVehicleWholeShield // (Native|Protected|HasOutParms) // @ game+0x2694470
	void OnRep_MaxVehicleHealth(struct FGameplayAttributeData& OldMaxVehicleHealth); // Function Solarland.SolarVehicleAttributeSet.OnRep_MaxVehicleHealth // (Native|Protected|HasOutParms) // @ game+0x265d880
	void OnRep_MaxBrokenHealth(struct FGameplayAttributeData& OldMaxBrokenHealth); // Function Solarland.SolarVehicleAttributeSet.OnRep_MaxBrokenHealth // (Native|Protected|HasOutParms) // @ game+0x265d930
	void OnRep_CurrentVehicleWholeShield(struct FGameplayAttributeData& OldVehicleWholeShield); // Function Solarland.SolarVehicleAttributeSet.OnRep_CurrentVehicleWholeShield // (Native|Protected|HasOutParms) // @ game+0x2693f40
	void OnRep_CurrentVehicleHealth(struct FGameplayAttributeData& OldVehicleHealth); // Function Solarland.SolarVehicleAttributeSet.OnRep_CurrentVehicleHealth // (Native|Protected|HasOutParms) // @ game+0x265d9e0
};

// Class Solarland.SolarVehicleCameraComponent
// Size: 0xa60 (Inherited: 0xa30)
struct USolarVehicleCameraComponent : USolarCameraComponent {
	struct ASolarVehiclePawn* Vehicle; // 0xa28(0x08)
	struct USolarVehicleSpringArmComponent* VehicleSpringArm; // 0xa30(0x08)
	char pad_A40[0x10]; // 0xa40(0x10)
	struct TArray<struct UVehicleCameraDataAsset*> CameraDataAssets; // 0xa50(0x10)
};

// Class Solarland.SolarVehicleFlameWeapon
// Size: 0x1130 (Inherited: 0x1120)
struct ASolarVehicleFlameWeapon : ASolarVehicleWeapon {
	float FlameCheckAngle; // 0x1120(0x04)
	float FlameCheckRange; // 0x1124(0x04)
	float MutiFlameDamageScale; // 0x1128(0x04)
	char pad_112C[0x4]; // 0x112c(0x04)

	void ServerFlameWeaponShot(struct FFlameHitData InHitData); // Function Solarland.SolarVehicleFlameWeapon.ServerFlameWeaponShot // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x297ebe0
	void ClientFlameWeaponShot(); // Function Solarland.SolarVehicleFlameWeapon.ClientFlameWeaponShot // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x1ae4990
};

// Class Solarland.SolarVehicleGameplayAbility
// Size: 0x4f0 (Inherited: 0x400)
struct USolarVehicleGameplayAbility : UGameplayAbility {
	bool bCancelAfterVacateSeat; // 0x400(0x01)
	bool bCancelManually; // 0x401(0x01)
	char pad_402[0x6]; // 0x402(0x06)
	struct FGameplayTagContainer GameplayCueTags; // 0x408(0x20)
	struct FString AbilityActivateVirationHeString; // 0x428(0x10)
	struct FString AbilityEndVirationHeString; // 0x438(0x10)
	bool bPressToActivate; // 0x448(0x01)
	bool bCheckInstigatorBeforeActivation; // 0x449(0x01)
	bool bActivateAbilityOnGranted; // 0x44a(0x01)
	char pad_44B[0x1]; // 0x44b(0x01)
	float DurationTime; // 0x44c(0x04)
	struct UGameplayEffect* ActivateEffect; // 0x450(0x08)
	char AbilityCount; // 0x458(0x01)
	char pad_459[0x3]; // 0x459(0x03)
	float AbilityCountRecoverTime; // 0x45c(0x04)
	struct TSoftObjectPtr<UTexture2D> AbilityIcon; // 0x460(0x28)
	struct TSoftObjectPtr<UTexture2D> AdditionalAbilityIcon; // 0x488(0x28)
	int32_t AbilityDescription; // 0x4b0(0x04)
	char pad_4B4[0x4]; // 0x4b4(0x04)
	struct FString AbilityTextType; // 0x4b8(0x10)
	float DamageToVehicle; // 0x4c8(0x04)
	float DamageToCharacter; // 0x4cc(0x04)
	struct UCameraShake* ActivateCameraShake; // 0x4d0(0x08)
	char pad_4D8[0x18]; // 0x4d8(0x18)
};

// Class Solarland.SolarVehicleGA_Carpad
// Size: 0x508 (Inherited: 0x4f0)
struct USolarVehicleGA_Carpad : USolarVehicleGameplayAbility {
	float CarpadJumpVelocity; // 0x4f0(0x04)
	float PitchDegree; // 0x4f4(0x04)
	bool bControllableInLanding; // 0x4f8(0x01)
	char pad_4F9[0xf]; // 0x4f9(0x0f)

	void CarpadJumpLanding(struct FHitResult& LandedHit); // Function Solarland.SolarVehicleGA_Carpad.CarpadJumpLanding // (Final|Native|Protected|HasOutParms) // @ game+0x297e2b0
};

// Class Solarland.SolarVehicleGA_ChargeDash
// Size: 0x518 (Inherited: 0x4f0)
struct USolarVehicleGA_ChargeDash : USolarVehicleGameplayAbility {
	struct UCurveFloat* HorizontalDashSpeedCurve; // 0x4f0(0x08)
	struct UCurveFloat* VerticalDashSpeedCurve; // 0x4f8(0x08)
	float LandedDamageRadius; // 0x500(0x04)
	float LandedDamageHeight; // 0x504(0x04)
	float AbilityDuringTime; // 0x508(0x04)
	char pad_50C[0xc]; // 0x50c(0x0c)

	void ApplyDamageOnLanding(struct FHitResult& LandedHit); // Function Solarland.SolarVehicleGA_ChargeDash.ApplyDamageOnLanding // (Final|Native|Private|HasOutParms) // @ game+0x297e0f0
};

// Class Solarland.SolarVehicleGA_Dash
// Size: 0x500 (Inherited: 0x4f0)
struct USolarVehicleGA_Dash : USolarVehicleGameplayAbility {
	float HorizontalDashSpeed; // 0x4f0(0x04)
	float VerticalDashSpeed; // 0x4f4(0x04)
	int32_t FailToDashNotice; // 0x4f8(0x04)
	char pad_4FC[0x4]; // 0x4fc(0x04)
};

// Class Solarland.SolarVehicleGA_EMP
// Size: 0x508 (Inherited: 0x4f0)
struct USolarVehicleGA_EMP : USolarVehicleGameplayAbility {
	struct ASolarSkill_EMP* EMPActorClass; // 0x4f0(0x08)
	struct UGameplayEffect* ApplyToTargetGameplayEffectClass; // 0x4f8(0x08)
	int32_t EMPLevel; // 0x500(0x04)
	char pad_504[0x4]; // 0x504(0x04)
};

// Class Solarland.SolarVehicleGA_EquipWeapon
// Size: 0x548 (Inherited: 0x4f0)
struct USolarVehicleGA_EquipWeapon : USolarVehicleGameplayAbility {
	struct UVehicleCameraDataAsset* CameraDataAsset; // 0x4f0(0x08)
	float EquipDelayTimer; // 0x4f8(0x04)
	float MaxDegreeBetweenMeshUpAndGloblaUp; // 0x4fc(0x04)
	struct TArray<struct FVehicleEquipWeaponOverlapBox> EquipWeaponOverlapBoxes; // 0x500(0x10)
	struct TArray<struct FVehicleEquipWeaponOverlapCapsule> EquipWeaponOverlapCapsules; // 0x510(0x10)
	int32_t FailToEquipWeaponNotice; // 0x520(0x04)
	bool bSendMeshRelativeTransform; // 0x524(0x01)
	char pad_525[0x3]; // 0x525(0x03)
	int32_t WeaponSeatIndex; // 0x528(0x04)
	char pad_52C[0x1c]; // 0x52c(0x1c)

	void OnBaseActorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarVehicleGA_EquipWeapon.OnBaseActorEndPlay // (Final|Native|Protected) // @ game+0x297e480
};

// Class Solarland.SolarVehicleGA_HoverFly
// Size: 0x500 (Inherited: 0x4f0)
struct USolarVehicleGA_HoverFly : USolarVehicleGameplayAbility {
	char pad_4F0[0x10]; // 0x4f0(0x10)
};

// Class Solarland.SolarVehicleGA_HoverJump
// Size: 0x508 (Inherited: 0x4f0)
struct USolarVehicleGA_HoverJump : USolarVehicleGameplayAbility {
	float HoverJumpHeight; // 0x4f0(0x04)
	float OverrideGravity; // 0x4f4(0x04)
	float ServerEndTimerWhenNotReceiveBuffer; // 0x4f8(0x04)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct USolarVehicleAT_HoverJump* HoverJumpTask; // 0x500(0x08)
};

// Class Solarland.SolarVehicleAT_HoverJump
// Size: 0x90 (Inherited: 0x80)
struct USolarVehicleAT_HoverJump : UAbilityTask {
	char pad_80[0x10]; // 0x80(0x10)
};

// Class Solarland.SolarVehicleGA_HoverRolling
// Size: 0x5b8 (Inherited: 0x4f0)
struct USolarVehicleGA_HoverRolling : USolarVehicleGameplayAbility {
	float RollForwardDegree; // 0x4f0(0x04)
	float MinRollForwardAcceleration; // 0x4f4(0x04)
	struct FRuntimeFloatCurve RollForwardAccelerationMutiplierCurve; // 0x4f8(0x88)
	float RollBackDegree; // 0x580(0x04)
	float RollForwardDistance; // 0x584(0x04)
	float RollForwardDuration; // 0x588(0x04)
	float RollHorizontalDistance; // 0x58c(0x04)
	float RollHorizontalDuration; // 0x590(0x04)
	char pad_594[0x4]; // 0x594(0x04)
	struct UCameraShake* RollForwardCamearShake; // 0x598(0x08)
	struct UCameraShake* RollHorizontalCamearShake; // 0x5a0(0x08)
	struct UCameraShake* RollBackCamearShake; // 0x5a8(0x08)
	struct USolarInputActionContext* InputActionContext; // 0x5b0(0x08)
};

// Class Solarland.SolarVehicleGA_IronManLaser
// Size: 0x508 (Inherited: 0x4f0)
struct USolarVehicleGA_IronManLaser : USolarVehicleGameplayAbility {
	float TraceLength; // 0x4f0(0x04)
	float TraceLengthScaleOnServer; // 0x4f4(0x04)
	float MaxFadingLaserLifeTime; // 0x4f8(0x04)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct UGameplayEffect* EffectToDriver; // 0x500(0x08)
};

// Class Solarland.SolarVehicleAT_IronManLaser
// Size: 0xd0 (Inherited: 0x80)
struct USolarVehicleAT_IronManLaser : UAbilityTask {
	char pad_80[0x50]; // 0x80(0x50)

	void OnNotifyEndQueryActor(struct FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload); // Function Solarland.SolarVehicleAT_IronManLaser.OnNotifyEndQueryActor // (Final|Native|Private|HasOutParms) // @ game+0x297e950
	void OnNotifyBeginQueryActor(struct FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload); // Function Solarland.SolarVehicleAT_IronManLaser.OnNotifyBeginQueryActor // (Final|Native|Private|HasOutParms) // @ game+0x297e860
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Solarland.SolarVehicleAT_IronManLaser.OnMontageEnded // (Final|Native|Private) // @ game+0x297e790
};

// Class Solarland.SolarVehicleGA_Jump
// Size: 0x4f8 (Inherited: 0x4f0)
struct USolarVehicleGA_Jump : USolarVehicleGameplayAbility {
	float LandedDamageRadius; // 0x4f0(0x04)
	float LandedDamageHeight; // 0x4f4(0x04)

	void ApplyDamageOnLanding(struct FHitResult& LandedHit); // Function Solarland.SolarVehicleGA_Jump.ApplyDamageOnLanding // (Final|Native|Public|HasOutParms) // @ game+0x297e1d0
};

// Class Solarland.SolarVehicleGA_NOS
// Size: 0x520 (Inherited: 0x4f0)
struct USolarVehicleGA_NOS : USolarVehicleGameplayAbility {
	struct FName VerticalAxisName; // 0x4f0(0x08)
	struct FName HorizontalAxisName; // 0x4f8(0x08)
	float VerticalAxisValueForCancel; // 0x500(0x04)
	float JoyStickCancelDegree; // 0x504(0x04)
	float CancelTimeForInput; // 0x508(0x04)
	float CancelTimeForHit; // 0x50c(0x04)
	float CancelSpeedForHit; // 0x510(0x04)
	char pad_514[0x4]; // 0x514(0x04)
	struct USolarVehicleAT_NOS* NosTask; // 0x518(0x08)
};

// Class Solarland.SolarVehicleAT_NOS
// Size: 0x90 (Inherited: 0x80)
struct USolarVehicleAT_NOS : UAbilityTask {
	char pad_80[0x10]; // 0x80(0x10)

	void OnHitDuringNos(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarVehicleAT_NOS.OnHitDuringNos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x297e5b0
};

// Class Solarland.SolarVehicleGA_PrecisionShoot
// Size: 0x4f0 (Inherited: 0x4f0)
struct USolarVehicleGA_PrecisionShoot : USolarVehicleGameplayAbility {
};

// Class Solarland.SolarVehicleGA_Radar
// Size: 0x500 (Inherited: 0x4f0)
struct USolarVehicleGA_Radar : USolarVehicleGameplayAbility {
	struct ASolarRadarBase* RadarClass; // 0x4f0(0x08)
	char pad_4F8[0x8]; // 0x4f8(0x08)
};

// Class Solarland.SolarVehicleGA_SeatEject
// Size: 0x518 (Inherited: 0x4f0)
struct USolarVehicleGA_SeatEject : USolarVehicleGameplayAbility {
	struct FRotator EjectRotation; // 0x4f0(0x0c)
	struct FVehicleEjectParams EjectParams; // 0x4fc(0x10)
	struct FGameplayTag GameplayCueTag; // 0x50c(0x08)
	char pad_514[0x4]; // 0x514(0x04)
};

// Class Solarland.SolarVehicleGA_SelfHealing
// Size: 0x4f8 (Inherited: 0x4f0)
struct USolarVehicleGA_SelfHealing : USolarVehicleGameplayAbility {
	uint32_t FullHealthNotifyId; // 0x4f0(0x04)
	char pad_4F4[0x4]; // 0x4f4(0x04)
};

// Class Solarland.SolarVehicleGA_ShieldTrigger
// Size: 0x4f0 (Inherited: 0x4f0)
struct USolarVehicleGA_ShieldTrigger : USolarVehicleGameplayAbility {
};

// Class Solarland.SolarVehicleGA_Smoke
// Size: 0x4f8 (Inherited: 0x4f0)
struct USolarVehicleGA_Smoke : USolarVehicleGameplayAbility {
	struct ASolarVehicleSmoke* VehicleSmoke; // 0x4f0(0x08)
};

// Class Solarland.SolarVehicleGA_Stealth
// Size: 0x518 (Inherited: 0x4f0)
struct USolarVehicleGA_Stealth : USolarVehicleGameplayAbility {
	char pad_4F0[0x28]; // 0x4f0(0x28)

	void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarVehicleGA_Stealth.OnPlayerGetOnVehicle // (Final|Native|Private) // @ game+0x297eb10
	void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarVehicleGA_Stealth.OnPlayerGetOffVehicle // (Final|Native|Private) // @ game+0x297ea40
	void OnCancelStealthByPassenger(); // Function Solarland.SolarVehicleGA_Stealth.OnCancelStealthByPassenger // (Final|Native|Public) // @ game+0x297e550
};

// Class Solarland.SolarVehicleGA_WeaponFire
// Size: 0x508 (Inherited: 0x4f0)
struct USolarVehicleGA_WeaponFire : USolarVehicleGameplayAbility {
	char pad_4F0[0x18]; // 0x4f0(0x18)

	void OnFireTaskEnd(); // Function Solarland.SolarVehicleGA_WeaponFire.OnFireTaskEnd // (Final|Native|Private) // @ game+0x297e590
	void OnCtrlTaskEnd(); // Function Solarland.SolarVehicleGA_WeaponFire.OnCtrlTaskEnd // (Final|Native|Private) // @ game+0x297e570
	void DoFireTask(); // Function Solarland.SolarVehicleGA_WeaponFire.DoFireTask // (Final|Native|Private) // @ game+0x297e390
};

// Class Solarland.SolarVehicleGA_WeaponReload
// Size: 0x500 (Inherited: 0x4f0)
struct USolarVehicleGA_WeaponReload : USolarVehicleGameplayAbility {
	char pad_4F0[0x10]; // 0x4f0(0x10)
};

// Class Solarland.SolarVehicleGA_WheelTransform
// Size: 0x558 (Inherited: 0x4f0)
struct USolarVehicleGA_WheelTransform : USolarVehicleGameplayAbility {
	struct TArray<struct UGameplayEffect*> WheeledEffects; // 0x4f0(0x10)
	struct TArray<struct UGameplayEffect*> LeggedEffects; // 0x500(0x10)
	struct UGameplayEffect* ToWheeledCoolDown; // 0x510(0x08)
	struct UGameplayEffect* ToLeggedCoolDown; // 0x518(0x08)
	char pad_520[0x10]; // 0x520(0x10)
	int32_t InhibitTransformNoticeIDByBrokenWeakPointNums; // 0x530(0x04)
	bool bCheckBrokenWeakPointNumConfig; // 0x534(0x01)
	char pad_535[0x3]; // 0x535(0x03)
	int32_t InhibitTransformIfSurpassBrokenWeakPointNumConfig; // 0x538(0x04)
	int32_t InhibitTransformNoticeIDByBlock; // 0x53c(0x04)
	struct FVector TransformToWheelBoxExtent; // 0x540(0x0c)
	float TransformToWheelOverlapOffset; // 0x54c(0x04)
	float MaxFallingSpeedForTransformingWheel; // 0x550(0x04)
	int32_t InhibitTransformNoticeIDByFallingSpeed; // 0x554(0x04)
};

// Class Solarland.SolarVehicleGA_WholeShield
// Size: 0x508 (Inherited: 0x4f0)
struct USolarVehicleGA_WholeShield : USolarVehicleGameplayAbility {
	char pad_4F0[0x18]; // 0x4f0(0x18)
};

// Class Solarland.SolarVehicleGA_ZombieTruck
// Size: 0x4f8 (Inherited: 0x4f0)
struct USolarVehicleGA_ZombieTruck : USolarVehicleGameplayAbility {
	float PlatformAttachDegree; // 0x4f0(0x04)
	char pad_4F4[0x4]; // 0x4f4(0x04)
};

// Class Solarland.SolarVehicleGatlingWeapon
// Size: 0x1120 (Inherited: 0x1120)
struct ASolarVehicleGatlingWeapon : ASolarVehicleWeapon {
};

// Class Solarland.SolarVehicleGC_BrokenDanger
// Size: 0x80 (Inherited: 0x50)
struct USolarVehicleGC_BrokenDanger : UGameplayCueNotify_Static {
	struct TSoftObjectPtr<UMaterialInterface> SourceMaterial; // 0x50(0x28)
	char pad_78[0x8]; // 0x78(0x08)
};

// Class Solarland.SolarVehicleGC_Burning
// Size: 0x2f8 (Inherited: 0x298)
struct ASolarVehicleGC_Burning : AGameplayCueNotify_Actor {
	struct FName CharacterBurningEffectID; // 0x298(0x08)
	struct FName VehicleBurningEffectID; // 0x2a0(0x08)
	struct FName BurningScreenEffectID; // 0x2a8(0x08)
	struct FString PlayBurningSound3P; // 0x2b0(0x10)
	struct FString PlayBurningSound3PEnemy; // 0x2c0(0x10)
	struct FString StopBurningSound3P; // 0x2d0(0x10)
	struct FString StopBurningSound3PEnemy; // 0x2e0(0x10)
	int32_t BurningBuffHandle; // 0x2f0(0x04)
	int32_t BurningScreenHandle; // 0x2f4(0x04)
};

// Class Solarland.SolarVehicleGC_EquipWeapon
// Size: 0x50 (Inherited: 0x50)
struct USolarVehicleGC_EquipWeapon : UGameplayCueNotify_Static {
};

// Class Solarland.SolarVehicleGC_HoverJump
// Size: 0x60 (Inherited: 0x50)
struct USolarVehicleGC_HoverJump : UGameplayCueNotify_Static {
	struct TArray<struct FVehicleVFX> HoverJumpVFXes; // 0x50(0x10)
};

// Class Solarland.SolarVehicleGC_ZombieTruck
// Size: 0x50 (Inherited: 0x50)
struct USolarVehicleGC_ZombieTruck : UGameplayCueNotify_Static {
};

// Class Solarland.SolarVehicleGCNotify_Actor
// Size: 0x2a0 (Inherited: 0x298)
struct ASolarVehicleGCNotify_Actor : AGameplayCueNotify_Actor {
	char pad_298[0x8]; // 0x298(0x08)
};

// Class Solarland.SolarVehicleHealthWidget
// Size: 0x558 (Inherited: 0x400)
struct USolarVehicleHealthWidget : USolarUserWidget {
	struct TMap<int32_t, struct FVehicleHealthResource> VehicleHealthResourceMap; // 0x400(0x50)
	struct UProgressBar* ProgressBar_Health; // 0x450(0x08)
	struct UTextBlock* Txt_Health; // 0x458(0x08)
	struct UTextBlock* Txt_Health_percent; // 0x460(0x08)
	struct UImage* Img_Health; // 0x468(0x08)
	struct UCanvasPanel* UI_Vehicle_Health_Anim; // 0x470(0x08)
	struct UWidgetAnimation* CarHealth_Loop_Anim; // 0x478(0x08)
	struct TArray<struct UImage*> WeakPointImgs; // 0x480(0x10)
	struct FLinearColor VehicleNormalColor; // 0x490(0x10)
	struct FLinearColor VehicleDamageColor; // 0x4a0(0x10)
	struct FLinearColor VehicleBrokenColor; // 0x4b0(0x10)
	struct FLinearColor VehicleFillImageNormalColor; // 0x4c0(0x10)
	struct FLinearColor VehicleFillImageDamageColor; // 0x4d0(0x10)
	struct FLinearColor VehicleFillImageBrokenColor; // 0x4e0(0x10)
	struct FLinearColor WeakNormalColor; // 0x4f0(0x10)
	struct FLinearColor WeakDamageColor; // 0x500(0x10)
	struct FLinearColor WeakBrokenColor; // 0x510(0x10)
	struct FLinearColor RepairingColor; // 0x520(0x10)
	struct ASolarVehiclePawn* VehiclePawn; // 0x530(0x08)
	char pad_538[0x20]; // 0x538(0x20)

	void InitHealthUI(struct ASolarVehiclePawn* InVehiclePawn, bool bInDriveControl); // Function Solarland.SolarVehicleHealthWidget.InitHealthUI // (Final|Native|Public|BlueprintCallable) // @ game+0x297e3b0
};

// Class Solarland.SolarVehicleHoverWeapon
// Size: 0x1180 (Inherited: 0x1120)
struct ASolarVehicleHoverWeapon : ASolarVehicleWeapon {
	float MoveDelayTime; // 0x1120(0x04)
	float InterpSpeed; // 0x1124(0x04)
	struct FVector WeaponOpenOffset; // 0x1128(0x0c)
	char pad_1134[0x4]; // 0x1134(0x04)
	struct UCurveFloat* WeaponHoverOffsetCurve; // 0x1138(0x08)
	char pad_1140[0x40]; // 0x1140(0x40)
};

// Class Solarland.SolarVehicleInfoWidget
// Size: 0x598 (Inherited: 0x400)
struct USolarVehicleInfoWidget : USolarUserWidget {
	struct USolarVehicleHealthWidget* UI_Vehicle_Health; // 0x400(0x08)
	struct ASolarPlayerController* SolarPC; // 0x408(0x08)
	struct ASolarVehiclePawn* VehiclePawn; // 0x410(0x08)
	char pad_418[0x8]; // 0x418(0x08)
	struct FLinearColor TxtSpeedOriginColor; // 0x420(0x10)
	struct FLinearColor TxtSpeedFinalColor; // 0x430(0x10)
	struct UTextBlock* Txt_Speed_1; // 0x440(0x08)
	struct UTextBlock* Txt_Speed; // 0x448(0x08)
	struct USolarTextBlock* Txt_BrandName; // 0x450(0x08)
	struct UCommonLazyImage* LazyImg_Brand; // 0x458(0x08)
	struct UCanvasPanel* Panel_Speed; // 0x460(0x08)
	struct UProgressBar* ProgressBar_Speed; // 0x468(0x08)
	struct UCanvasPanel* Panel_Pointer; // 0x470(0x08)
	struct UImage* Img_Speed; // 0x478(0x08)
	char pad_480[0x8]; // 0x480(0x08)
	struct FFloatRange SpeedPointerAngleRange; // 0x488(0x10)
	struct FFloatRange SpeedImgProgressRange; // 0x498(0x10)
	struct UCanvasPanel* Panel_DMG; // 0x4a8(0x08)
	struct UImage* Img_DMG_BG_Light; // 0x4b0(0x08)
	struct UImage* Img_DMG_BG; // 0x4b8(0x08)
	struct USolarTextBlock* Txt_DMG; // 0x4c0(0x08)
	int32_t VehicleDamageTextLocalizationID; // 0x4c8(0x04)
	char pad_4CC[0x4]; // 0x4cc(0x04)
	struct TMap<int32_t, struct FVehicleDamageLevelColor> VehicleDamageLevelColors; // 0x4d0(0x50)
	char pad_520[0x8]; // 0x520(0x08)
	struct UCanvasPanel* Panel_Prep; // 0x528(0x08)
	struct UCanvasPanel* Panel_PrepEmpty; // 0x530(0x08)
	struct UProgressBar* ProgressBar_Prep; // 0x538(0x08)
	struct UTextBlock* Txt_Bullet_1; // 0x540(0x08)
	struct UTextBlock* Txt_Bullet; // 0x548(0x08)
	struct UWidgetAnimation* Anim_PrepEmpty; // 0x550(0x08)
	struct FLinearColor EmptyBulletColor; // 0x558(0x10)
	struct FLinearColor NomalBulletColor; // 0x568(0x10)
	struct UCanvasPanel* Panel_Seat; // 0x578(0x08)
	struct UCheckBoxGroup* SeatFlag; // 0x580(0x08)
	struct TArray<struct USolarCheckBox*> SeatCheckBoxs; // 0x588(0x10)

	void TriggerNoAmmoAlert(); // Function Solarland.SolarVehicleInfoWidget.TriggerNoAmmoAlert // (Final|Native|Protected) // @ game+0x2982e60
	void OnCharacterLevelUp(int32_t InNewLevel, int32_t InOldLevel); // Function Solarland.SolarVehicleInfoWidget.OnCharacterLevelUp // (Final|Native|Protected) // @ game+0x2982ae0
};

// Class Solarland.WheeledVehicleInterface
// Size: 0x28 (Inherited: 0x28)
struct UWheeledVehicleInterface : UInterface {
};

// Class Solarland.VehicleWeaponAnimInterface
// Size: 0x28 (Inherited: 0x28)
struct UVehicleWeaponAnimInterface : UInterface {
};

// Class Solarland.SolarVehicleIronManWeapon
// Size: 0x1190 (Inherited: 0x1120)
struct ASolarVehicleIronManWeapon : ASolarVehicleWeapon {
	struct UWeaponFireLaserCollector* LaserCollector; // 0x1120(0x08)
	char pad_1128[0x8]; // 0x1128(0x08)
	struct TSoftObjectPtr<UAnimMontage> DriverStandAttackRight; // 0x1130(0x28)
	struct TSoftObjectPtr<UAnimMontage> DriverLieAttackRight; // 0x1158(0x28)
	struct FName AttackSectionName; // 0x1180(0x08)
	char pad_1188[0x8]; // 0x1188(0x08)

	void ServerUpdateLaserInfo(struct FVector InTarget, struct AActor* InTargetActor); // Function Solarland.SolarVehicleIronManWeapon.ServerUpdateLaserInfo // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x2982d90
	void ServerLaserHit(struct TArray<struct FHitResult> Hits, float InActivateTime); // Function Solarland.SolarVehicleIronManWeapon.ServerLaserHit // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2982ca0
	void ServerInterruptLaser(); // Function Solarland.SolarVehicleIronManWeapon.ServerInterruptLaser // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ae4990
	void ServerActivateLaserShot(struct FVector InTarget, struct AActor* InTargetActor); // Function Solarland.SolarVehicleIronManWeapon.ServerActivateLaserShot // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x2982bd0
	struct USkeletalMeshComponent* GetDriverCharacterMesh(); // Function Solarland.SolarVehicleIronManWeapon.GetDriverCharacterMesh // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2982ab0
	void ClientUpdateLaserInfo(struct FVector InTarget, struct AActor* InTargetActor); // Function Solarland.SolarVehicleIronManWeapon.ClientUpdateLaserInfo // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x29829e0
	void ClientLaserHit(struct TArray<struct FHitResult> Hits, float InActivateTime); // Function Solarland.SolarVehicleIronManWeapon.ClientLaserHit // (Net|Native|Event|NetMulticast|Public) // @ game+0x29828f0
	void ClientInterruptLaser(); // Function Solarland.SolarVehicleIronManWeapon.ClientInterruptLaser // (Net|Native|Event|NetMulticast|Public) // @ game+0x1ae52f0
	void ClientActivateLaserShot(struct FVector InTarget, struct AActor* InTargetActor); // Function Solarland.SolarVehicleIronManWeapon.ClientActivateLaserShot // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x2982710
};

// Class Solarland.SolarVehicleLavaWeapon
// Size: 0x1250 (Inherited: 0x1120)
struct ASolarVehicleLavaWeapon : ASolarVehicleWeapon {
	struct USolarVehicleLavaWeaponConfig* LavaWeaponConfig; // 0x1120(0x08)
	struct TSoftObjectPtr<UParticleSystem> LavaHitEffect; // 0x1128(0x28)
	struct TSoftObjectPtr<UParticleSystem> LavaZoneParticle; // 0x1150(0x28)
	struct UGameplayEffect* LavaCharacterDebuffEffect; // 0x1178(0x08)
	struct UGameplayEffect* LavaVehicleDebuffEffect; // 0x1180(0x08)
	struct TArray<struct FSolarLavaBullet> LavaBulletArray; // 0x1188(0x10)
	struct TMap<struct FFireUniqueID, struct FSolarLavaZone> ClientLavaZoneMap; // 0x1198(0x50)
	struct TArray<struct FZoneServerValidate> LavaZoneServerDatas; // 0x11e8(0x10)
	char pad_11F8[0x58]; // 0x11f8(0x58)

	void OnRep_SpawnedLavaZone(); // Function Solarland.SolarVehicleLavaWeapon.OnRep_SpawnedLavaZone // (Final|Native|Private) // @ game+0x2982bb0
	void ClientDrawLavaZoneDebug(struct TArray<struct FZoneServerValidate> InServerDatas, int32_t InCounter); // Function Solarland.SolarVehicleLavaWeapon.ClientDrawLavaZoneDebug // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x29827e0
};

// Class Solarland.SolarVehicleLavaWeaponConfig
// Size: 0x1a8 (Inherited: 0x30)
struct USolarVehicleLavaWeaponConfig : UDataAsset {
	float ExpectEndTime; // 0x30(0x04)
	float EffectRemainTime; // 0x34(0x04)
	float MaxReboundAngle; // 0x38(0x04)
	int32_t MaxReboundCounter; // 0x3c(0x04)
	float DefaultReboundSpeed; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct TMap<enum class EPhysicalSurface, float> ReboundSpeedsByHitType; // 0x48(0x50)
	float LavaHitEffectOffset; // 0x98(0x04)
	float BaseLavaZoneExtent; // 0x9c(0x04)
	float DamageBoxHalfHeight; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
	struct FRuntimeFloatCurve LavaSpreadCurve; // 0xa8(0x88)
	float OverlapDelta; // 0x130(0x04)
	float LavaAreaLifeTime; // 0x134(0x04)
	float ServerCorrectDistance; // 0x138(0x04)
	float ServerCorrectTime; // 0x13c(0x04)
	float SpawnLocationCheckDistance; // 0x140(0x04)
	float MoveSpawnLocationDistance; // 0x144(0x04)
	float BottomCheckTraceLine; // 0x148(0x04)
	float DamageFrequency; // 0x14c(0x04)
	float DamageToApply; // 0x150(0x04)
	float VehicleDamageScale; // 0x154(0x04)
	struct FString LavaZoneSound3P; // 0x158(0x10)
	struct FString LavaZoneSound3PEnemy; // 0x168(0x10)
	struct FString BulletHitSound3P; // 0x178(0x10)
	struct FString BulletHitSound3PEnemy; // 0x188(0x10)
	struct FName ZoneSizeName; // 0x198(0x08)
	struct FName ZoneLifeName; // 0x1a0(0x08)
};

// Class Solarland.SolarVehicleLegTurretWeapon
// Size: 0x1180 (Inherited: 0x1120)
struct ASolarVehicleLegTurretWeapon : ASolarVehicleWeapon {
	struct TArray<struct FBoneIKPreset> TargetIKSettings; // 0x1120(0x10)
	float IKBlendSpeed; // 0x1130(0x04)
	struct FName LeftMuzzleName; // 0x1134(0x08)
	struct FName RightMuzzleName; // 0x113c(0x08)
	struct FVector TargetLeftBoneIK; // 0x1144(0x0c)
	struct FVector TargetRightBoneIK; // 0x1150(0x0c)
	struct FVector CurrentLeftBoneIK; // 0x115c(0x0c)
	struct FVector CurrentRightBoneIK; // 0x1168(0x0c)
	char pad_1174[0xc]; // 0x1174(0x0c)
};

// Class Solarland.SolarVehicleNosGCNotify_Actor
// Size: 0x2a0 (Inherited: 0x2a0)
struct ASolarVehicleNosGCNotify_Actor : ASolarVehicleGCNotify_Actor {
};

// Class Solarland.SolarVehicleOperationWidgetPC
// Size: 0x420 (Inherited: 0x400)
struct USolarVehicleOperationWidgetPC : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct USolarVehicleSkillWidget* UI_Vehicle_Skill_Desktop_1; // 0x410(0x08)
	struct USolarVehicleSkillWidget* UI_Vehicle_Skill_Desktop_2; // 0x418(0x08)

	void SetStateBPImplement(enum class ESolarITemHUDStyle InStyle); // Function Solarland.SolarVehicleOperationWidgetPC.SetStateBPImplement // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarVehicleRocketLauncherWeapon
// Size: 0x1420 (Inherited: 0x1120)
struct ASolarVehicleRocketLauncherWeapon : ASolarVehicleWeapon {
	bool bEnablePreparedRocket; // 0x1120(0x01)
	char pad_1121[0x3]; // 0x1121(0x03)
	int32_t PrepareSpawnRocketCounter; // 0x1124(0x04)
	struct TArray<struct FBombingAreaData> BombingAreaDatas; // 0x1128(0x10)
	enum class ERocketFireMode RocketFireMode; // 0x1138(0x01)
	char pad_1139[0x7]; // 0x1139(0x07)
	struct TMap<int32_t, struct FBombingAreaAsset> BombingAreaAssetMap; // 0x1140(0x50)
	char pad_1190[0x30]; // 0x1190(0x30)
	struct TArray<struct FSpawnedRocketData> SpawnedRocketDatas; // 0x11c0(0x10)
	char pad_11D0[0x30]; // 0x11d0(0x30)
	struct FBombingAreaAsset PreviewRangeAsset; // 0x1200(0x60)
	struct FBombingAreaAsset BombingAreaAimAsset; // 0x1260(0x60)
	struct FBombingAreaAsset BombingAreaWarningAsset; // 0x12c0(0x60)
	struct TSoftObjectPtr<UStaticMesh> AlertLineMeshClass; // 0x1320(0x28)
	struct TSoftObjectPtr<UParticleSystem> FireMuzzleParticle; // 0x1348(0x28)
	float BombingAreaBlendTime; // 0x1370(0x04)
	struct FFireModeSetting RocketFireModeSettings[0x2]; // 0x1374(0x70)
	float ResetOwnerTimer; // 0x13e4(0x04)
	float SpawnRocketHight; // 0x13e8(0x04)
	char pad_13EC[0x4]; // 0x13ec(0x04)
	struct TArray<struct FName> MuzzleSocketNames; // 0x13f0(0x10)
	struct FString RocketLaunchSound_1P; // 0x1400(0x10)
	struct FString RocketLaunchSound_3P; // 0x1410(0x10)

	void ServerRocketLauncherRealFire(int32_t InFireCounter); // Function Solarland.SolarVehicleRocketLauncherWeapon.ServerRocketLauncherRealFire // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2985750
	void ServerActivateRocketLauncherFire(struct FVector_NetQuantize InTargetLocation, int32_t InFireCount, bool bAutoActive); // Function Solarland.SolarVehicleRocketLauncherWeapon.ServerActivateRocketLauncherFire // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2985640
	void PrepareSpawnRocketFromAI(struct FVector& InTargetLocation); // Function Solarland.SolarVehicleRocketLauncherWeapon.PrepareSpawnRocketFromAI // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x29855b0
	void PrepareSpawnRocket(); // Function Solarland.SolarVehicleRocketLauncherWeapon.PrepareSpawnRocket // (Final|Native|Public|BlueprintCallable) // @ game+0x2985590
	void OnRocketLauncherRealFire(int32_t InFireCounter); // Function Solarland.SolarVehicleRocketLauncherWeapon.OnRocketLauncherRealFire // (Final|Native|Public) // @ game+0x2985500
	void OnRep_RocketSpawnerChanged(); // Function Solarland.SolarVehicleRocketLauncherWeapon.OnRep_RocketSpawnerChanged // (Final|Native|Protected) // @ game+0x29854c0
	void OnRep_RocketFireModeChanged(); // Function Solarland.SolarVehicleRocketLauncherWeapon.OnRep_RocketFireModeChanged // (Final|Native|Protected) // @ game+0x29854a0
	void OnLocallyActiveFire(int32_t InFireCount); // Function Solarland.SolarVehicleRocketLauncherWeapon.OnLocallyActiveFire // (Final|Native|Public) // @ game+0x2985410
	void MulticastRocketLauncherRealFire(int32_t InFireCounter); // Function Solarland.SolarVehicleRocketLauncherWeapon.MulticastRocketLauncherRealFire // (Net|Native|Event|NetMulticast|Public) // @ game+0x2985360
	void MulticastPrepareRocketSpawn(struct FVector_NetQuantize InLocation, enum class ERocketFireMode InFireMode); // Function Solarland.SolarVehicleRocketLauncherWeapon.MulticastPrepareRocketSpawn // (Net|Native|Event|NetMulticast|Protected) // @ game+0x29852a0
	void ActivePreparedRocket(); // Function Solarland.SolarVehicleRocketLauncherWeapon.ActivePreparedRocket // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ae5850
};

// Class Solarland.SolarVehicleSettings
// Size: 0x220 (Inherited: 0x38)
struct USolarVehicleSettings : UDeveloperSettings {
	float HpLowerLimitInNormalStatus; // 0x38(0x04)
	float HpLowerLimitInDamagedStatus; // 0x3c(0x04)
	float VehicleHitTimer; // 0x40(0x04)
	float ReplicatedDelayTimer; // 0x44(0x04)
	float WaterToDestoryTime; // 0x48(0x04)
	float MaxWarningTweenRate; // 0x4c(0x04)
	float MinWarningTweenRate; // 0x50(0x04)
	float MinDangerWarningOpacity; // 0x54(0x04)
	float MinProgressBarWarningOpacity; // 0x58(0x04)
	float VehicleBurningSpendTimer; // 0x5c(0x04)
	float VehicleBurningDeltaTime; // 0x60(0x04)
	float DisableOverlapTimer; // 0x64(0x04)
	float ResetOwnerTimer; // 0x68(0x04)
	int32_t MeshLodLevelForDefaultDeviceLocalPlayer; // 0x6c(0x04)
	int32_t MeshLodLevelForLowDeviceLocalPlayer; // 0x70(0x04)
	float AutoBrakeTimerWithoutDriver; // 0x74(0x04)
	struct FName WeakPointVFXParamterName; // 0x78(0x08)
	float WeakPointVFXDefaultValue; // 0x80(0x04)
	float WeakPointVFXStartValue; // 0x84(0x04)
	float WeakPointVFXTargetValue; // 0x88(0x04)
	float WeakPointVFXDuration; // 0x8c(0x04)
	struct FName LeftFootLocationXCurve; // 0x90(0x08)
	struct FName RightFootLocationXCurve; // 0x98(0x08)
	struct FName LeftFootLocationZCurve; // 0xa0(0x08)
	struct FName RightFootLocationZCurve; // 0xa8(0x08)
	float MaxDynamicBoneDeltaTime; // 0xb0(0x04)
	float WeaponMagnifiers[0x4]; // 0xb4(0x10)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct USolarVehicleGameplayAbility* FireAbilityClass; // 0xc8(0x08)
	float VehicleScopeFovBlendTime; // 0xd0(0x04)
	float VehicleOutShootFovCoefficients[0x8]; // 0xd4(0x20)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct TSoftObjectPtr<UMaterialInterface> VehiclePreviewDissolveMat; // 0xf8(0x28)
	struct TSoftObjectPtr<UMaterialInterface> VehiclePreviewFresnelMat; // 0x120(0x28)
	struct TSoftObjectPtr<UCurveVector> VehiclePreviewDissolveCurve; // 0x148(0x28)
	struct TSoftObjectPtr<UCurveVector> VehiclePreviewFresnelCurve; // 0x170(0x28)
	float VehiclePreviewDelayShowSeconds; // 0x198(0x04)
	int32_t VehiclePreviewMeshSortPriority; // 0x19c(0x04)
	int32_t VehiclePreviewMirrorMeshSortPriority; // 0x1a0(0x04)
	int32_t VehiclePreviewVFXSortPriority; // 0x1a4(0x04)
	int32_t VehiclePreviewMirrorVFXSortPriority; // 0x1a8(0x04)
	char VehiclePreviewPlayAnimSound[0xa]; // 0x1ac(0x0a)
	char pad_1B6[0x2]; // 0x1b6(0x02)
	struct TMap<enum class EWeaponVibrateFactor, float> VehicleVibrationMultiplier; // 0x1b8(0x50)
	float ForceUpdateProceduralAnimationToTargetTimeThreshold; // 0x208(0x04)
	int32_t ServerBufferCheckFrameInterval; // 0x20c(0x04)
	float ServerBufferCheckTimeInterval; // 0x210(0x04)
	int32_t ServerBufferCheckCount; // 0x214(0x04)
	bool bUsingCrowdManager; // 0x218(0x01)
	char pad_219[0x3]; // 0x219(0x03)
	float LifeSpanWhenHitByAirDrop; // 0x21c(0x04)

	struct USolarVehicleSettings* Get(); // Function Solarland.SolarVehicleSettings.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2985230
};

// Class Solarland.SolarVehicleSiegeWeapon
// Size: 0x1120 (Inherited: 0x1120)
struct ASolarVehicleSiegeWeapon : ASolarVehicleWeapon {
};

// Class Solarland.SolarVehicleSkillWidget
// Size: 0x4a0 (Inherited: 0x400)
struct USolarVehicleSkillWidget : USolarUserWidget {
	struct UCommonLazyImage* LazyImage_Skill; // 0x400(0x08)
	struct USolarTextBlock* Txt_Skill; // 0x408(0x08)
	struct UGaugeImage* Img_CD; // 0x410(0x08)
	struct UTextBlock* Txt_CD; // 0x418(0x08)
	struct UImage* Img_Disable; // 0x420(0x08)
	struct UCanvasPanel* Panel_Duration; // 0x428(0x08)
	struct UImage* Progress_Duration; // 0x430(0x08)
	struct UGaugeImage* Progress_Duration_Desktop; // 0x438(0x08)
	struct UCanvasPanel* Panel_ProgressGrid; // 0x440(0x08)
	struct UGaugeImage* Img_Count_Progress_Desktop; // 0x448(0x08)
	struct UImage* Img_Count_Progress; // 0x450(0x08)
	struct UWidgetAnimation* VehicleSkill_Refresh_Anim; // 0x458(0x08)
	struct UWidgetAnimation* VehicleSkill_Continued_Anim; // 0x460(0x08)
	struct ASolarPlayerController* SolarPC; // 0x468(0x08)
	struct ASolarVehiclePawn* VehiclePawn; // 0x470(0x08)
	struct USolarVehicleGameplayAbility* GameplayAbility; // 0x478(0x08)
	struct UMaterialInstanceDynamic* Progress_DurationMat; // 0x480(0x08)
	struct UMaterialInstanceDynamic* ImgCountProgressMat; // 0x488(0x08)
	char pad_490[0x10]; // 0x490(0x10)
};

// Class Solarland.SolarVehicleSmoke
// Size: 0x3e8 (Inherited: 0x228)
struct ASolarVehicleSmoke : AActor {
	float Duration; // 0x228(0x04)
	char pad_22C[0x4]; // 0x22c(0x04)
	struct FRuntimeFloatCurve AppearCurve; // 0x230(0x88)
	struct FRuntimeFloatCurve DisappearCurve; // 0x2b8(0x88)
	struct TSoftObjectPtr<UParticleSystem> SmokeEffect; // 0x340(0x28)
	struct UAkComponent* AkAudioComponent; // 0x368(0x08)
	struct FName SmokeFadeName; // 0x370(0x08)
	struct FString SoundBegin; // 0x378(0x10)
	struct FString SoundLoop; // 0x388(0x10)
	struct FString SoundLoopEnd; // 0x398(0x10)
	int32_t SmokeTranslucentSortPriority; // 0x3a8(0x04)
	char pad_3AC[0x4]; // 0x3ac(0x04)
	struct UParticleSystemComponent* SmokeEffectComp; // 0x3b0(0x08)
	char pad_3B8[0x8]; // 0x3b8(0x08)
	bool bSmokeWaitToDestory; // 0x3c0(0x01)
	char pad_3C1[0x27]; // 0x3c1(0x27)

	void OnRep_SmokeWaitToDestory(); // Function Solarland.SolarVehicleSmoke.OnRep_SmokeWaitToDestory // (Final|Native|Protected) // @ game+0x29854e0
	void OnEffectPlayOver(); // Function Solarland.SolarVehicleSmoke.OnEffectPlayOver // (Final|Native|Protected) // @ game+0x29853f0
};

// Class Solarland.SolarVehicleSoundDataAsset
// Size: 0x698 (Inherited: 0x30)
struct USolarVehicleSoundDataAsset : UDataAsset {
	struct FString Engine_3P; // 0x30(0x10)
	struct FString Engine_3P_Enemy; // 0x40(0x10)
	struct FString Engine_Down_3P; // 0x50(0x10)
	struct FString Engine_Down_3P_Enemy; // 0x60(0x10)
	struct FString Engine_RTPC; // 0x70(0x10)
	struct FString Engine_Stop_3P; // 0x80(0x10)
	struct FString Engine_Stop_3P_Enemy; // 0x90(0x10)
	struct FString Engine_Input_RTPC; // 0xa0(0x10)
	float MaxMoveSpeed; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct FString MoveSpeed_Acc_RTPC; // 0xb8(0x10)
	struct FString Tire_3P; // 0xc8(0x10)
	struct FString Tire_3P_Enemy; // 0xd8(0x10)
	struct FString Tire_End_3P; // 0xe8(0x10)
	struct FString Tire_End_3P_Enemy; // 0xf8(0x10)
	struct FString Tire_RTPC; // 0x108(0x10)
	struct FString Tire_Group; // 0x118(0x10)
	struct TMap<enum class EPhysicalSurface, struct FString> Tire_States; // 0x128(0x50)
	bool bUseEngineRpm; // 0x178(0x01)
	char pad_179[0x7]; // 0x179(0x07)
	struct FString Vehicle_Collision_3P; // 0x180(0x10)
	struct FString Vehicle_Collision_3P_Enemy; // 0x190(0x10)
	struct FString Vehicle_Collision_RTPC; // 0x1a0(0x10)
	struct FString Play_Booster_3P; // 0x1b0(0x10)
	struct FString Play_Booster_3P_Enemy; // 0x1c0(0x10)
	struct FString Stop_Booster_3P; // 0x1d0(0x10)
	struct FString Stop_Booster_3P_Enemy; // 0x1e0(0x10)
	struct FString Vehicle_Speedboard_1P; // 0x1f0(0x10)
	struct FString Vehicle_Speedboard_3P; // 0x200(0x10)
	struct FString Vehicle_Speedboard_3P_Enemy; // 0x210(0x10)
	struct FString Vehicle_Eject_1P; // 0x220(0x10)
	struct FString Vehicle_Eject_3P; // 0x230(0x10)
	struct FString Vehicle_Eject_3P_Enemy; // 0x240(0x10)
	struct FString Play_Vehicle_Destroyed; // 0x250(0x10)
	struct FString Weakpoint_Broken_3P; // 0x260(0x10)
	struct FString Weakpoint_Broken_3P_Enemy; // 0x270(0x10)
	struct FString Weakpoint_Fixed_3P; // 0x280(0x10)
	struct FString Weakpoint_Fixed_3P_Enemy; // 0x290(0x10)
	struct FString WeakPoint_Broken_1P_UI; // 0x2a0(0x10)
	struct TMap<enum class EHitSoundSourceType, struct FName> WeakPointHitSoundGroupNames; // 0x2b0(0x50)
	struct FString Engine_Start_3P; // 0x300(0x10)
	struct FString Engine_Start_3P_Enemy; // 0x310(0x10)
	struct FString Braking_Loop_RTPC; // 0x320(0x10)
	struct FString Play_Braking_Loop_3P; // 0x330(0x10)
	struct FString Play_Braking_Loop_3P_Enemy; // 0x340(0x10)
	struct FString Stop_Braking_Loop_3P; // 0x350(0x10)
	struct FString Stop_Braking_Loop_3P_Enemy; // 0x360(0x10)
	float BrakingLoopSoundDegree; // 0x370(0x04)
	float BrakingLoopSoundSpeed; // 0x374(0x04)
	struct FString Play_Reverse_Loop; // 0x378(0x10)
	struct FString Stop_Reverse_Loop; // 0x388(0x10)
	struct FString Drift_RTPC; // 0x398(0x10)
	struct FString Drift_Start; // 0x3a8(0x10)
	struct FString Drift_Stop; // 0x3b8(0x10)
	struct FString RPMRedLine_Start; // 0x3c8(0x10)
	struct FString RPMRedLine_Stop; // 0x3d8(0x10)
	char SpeedDifferenceInKmThresholdForHitSound; // 0x3e8(0x01)
	char pad_3E9[0x7]; // 0x3e9(0x07)
	struct FString Play_SelfHealing_3P; // 0x3f0(0x10)
	struct FString Stop_SelfHealing_3P; // 0x400(0x10)
	struct FString Play_vehicle_crash_ground_3P; // 0x410(0x10)
	struct FString Play_vehicle_crash_ground_3P_enemy; // 0x420(0x10)
	struct FString Vehicle_Crash_Ground_RTPC; // 0x430(0x10)
	float VehicleCrashGroundRtpcMultiplier; // 0x440(0x04)
	char pad_444[0x4]; // 0x444(0x04)
	struct FString Play_vehicle_crash_water_3P; // 0x448(0x10)
	struct FString Play_vehicle_crash_water_3P_enemy; // 0x458(0x10)
	struct FString Play_vehicle_fixing_weakpoint_3P; // 0x468(0x10)
	struct FString Stop_vehicle_fixing_weakpoint_3P; // 0x478(0x10)
	struct FString Play_VehicleWholdShieldBegin_Start_1P; // 0x488(0x10)
	struct FString Play_VehicleWholdShieldBegin_Loop_1P; // 0x498(0x10)
	struct FString Stop_VehicleWholdShieldBegin_Start_3P; // 0x4a8(0x10)
	struct FString Stop_VehicleWholdShieldBegin_Loop_3P; // 0x4b8(0x10)
	struct FString Play_VehicleWholdShieldEnd_Start_1P; // 0x4c8(0x10)
	struct FString Play_VehicleWholdShieldEnd_Loop_1P; // 0x4d8(0x10)
	struct FString Stop_VehicleWholdShieldEnd_Start_3P; // 0x4e8(0x10)
	struct FString Stop_VehicleWholdShieldEnd_Loop_3P; // 0x4f8(0x10)
	struct FString Play_HitVehicleWholdShield_1P; // 0x508(0x10)
	struct FString Play_HitVehicleWholdShield_3P; // 0x518(0x10)
	struct FString HoverJumpOnActive1P; // 0x528(0x10)
	struct FString HoverJumpOnActive3P; // 0x538(0x10)
	struct FString HoverJumpWhileActive1P; // 0x548(0x10)
	struct FString HoverJumpWhileActive3P; // 0x558(0x10)
	struct FString HoverJumpOnRemove1P; // 0x568(0x10)
	struct FString HoverJumpOnRemove3P; // 0x578(0x10)
	struct FString Play_VehicleTrumpet_1P; // 0x588(0x10)
	struct FString Play_VehicleTrumpet_3P; // 0x598(0x10)
	struct FString Stop_VehicleTrumpet_1P; // 0x5a8(0x10)
	struct FString Stop_VehicleTrumpet_3P; // 0x5b8(0x10)
	struct FString Play_vehicle_common_braking_loop_3P; // 0x5c8(0x10)
	struct FString Play_vehicle_common_braking_loop_3P_enemy; // 0x5d8(0x10)
	struct FString Stop_vehicle_common_braking_loop_3P; // 0x5e8(0x10)
	struct FString Stop_vehicle_common_braking_loop_3P_enemy; // 0x5f8(0x10)
	struct FString Play_Vehicle_UpShift_3P; // 0x608(0x10)
	struct FString Play_Vehicle_UpShift_3P_Enemy; // 0x618(0x10)
	struct FString Play_Vehicle_DownShift_3P; // 0x628(0x10)
	struct FString Play_Vehicle_DownShift_3P_Enemy; // 0x638(0x10)
	struct FString Play_IronMan_Laser_Hit; // 0x648(0x10)
	struct FString FootPlant; // 0x658(0x10)
	struct FString Landing_3P; // 0x668(0x10)
	struct FString Landing_3P_Enemy; // 0x678(0x10)
	bool bUseDoppler; // 0x688(0x01)
	char pad_689[0x3]; // 0x689(0x03)
	float AddDopplerIntensity; // 0x68c(0x04)
	float MinusDopplerIntensity; // 0x690(0x04)
	float UpdateDopplerTime; // 0x694(0x04)
};

// Class Solarland.SolarVehicleSpawnEffect
// Size: 0x260 (Inherited: 0x228)
struct ASolarVehicleSpawnEffect : AActor {
	struct UBoxComponent* BoxCollision; // 0x228(0x08)
	struct FName EffectMaterialParameterName; // 0x230(0x08)
	struct TArray<struct UStaticMeshComponent*> EffectMeshComponentArray; // 0x238(0x10)
	int32_t VehicleID; // 0x248(0x04)
	struct FVector BoxExtent; // 0x24c(0x0c)
	float EffectTime; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)

	struct UStaticMesh* GetVehicleMesh(int32_t InVehicleID); // Function Solarland.SolarVehicleSpawnEffect.GetVehicleMesh // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarVehicleSpawner
// Size: 0x3f0 (Inherited: 0x390)
struct ASolarVehicleSpawner : ASolarItemSpawner {
	int32_t SpawnID; // 0x390(0x04)
	enum class EVehicleSpawnType VehicleSpawnType; // 0x394(0x01)
	bool bVehicleRefresh; // 0x395(0x01)
	char pad_396[0x2]; // 0x396(0x02)
	int32_t VehicleRefreshSecond; // 0x398(0x04)
	bool bVehicleRefreshRand; // 0x39c(0x01)
	bool bVehicleRefreshWaitPreBroken; // 0x39d(0x01)
	char pad_39E[0x2]; // 0x39e(0x02)
	int64_t VehicleRefreshCheckRoleDisSquared; // 0x3a0(0x08)
	struct TArray<enum class EObjectTypeQuery> VehicleCheckObjectTypes; // 0x3a8(0x10)
	struct FVector VehicleCheckBoxSize; // 0x3b8(0x0c)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct TSoftClassPtr<UObject> VehicleSpawnEffectClass; // 0x3c8(0x28)
};

// Class Solarland.SolarVehicleSpawnerSets
// Size: 0x2e8 (Inherited: 0x228)
struct ASolarVehicleSpawnerSets : AActor {
	struct TArray<struct FVehicleSpawner> VehicleSpawnerSets; // 0x228(0x10)
	enum class ESpawnStage SpawnStage; // 0x238(0x01)
	char pad_239[0xaf]; // 0x239(0xaf)

	void OnSpawnVehicleDriverGetOn(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarVehicleSpawnerSets.OnSpawnVehicleDriverGetOn // (Final|Native|Public) // @ game+0x2988b00
	void OnSpawnVehicleDestroyed(struct AActor* DestroyedActor); // Function Solarland.SolarVehicleSpawnerSets.OnSpawnVehicleDestroyed // (Final|Native|Public) // @ game+0x2988a70
};

// Class Solarland.SolarVehicleSpringArmComponent
// Size: 0x440 (Inherited: 0x400)
struct USolarVehicleSpringArmComponent : USolarSpringArmComponent {
	struct USolarVehicleCameraComponent* VehicleCamera; // 0x3f8(0x08)
	struct ASolarVehiclePawn* VehiclePawn; // 0x400(0x08)
	char pad_410[0x30]; // 0x410(0x30)
};

// Class Solarland.SolarVehicleStateMachine
// Size: 0x98 (Inherited: 0x28)
struct USolarVehicleStateMachine : UObject {
	struct ASolarVehiclePawn* Owner; // 0x28(0x08)
	struct USolarLeggedVehicleMovement* MovementComponent; // 0x30(0x08)
	char pad_38[0x60]; // 0x38(0x60)
};

// Class Solarland.SolarVehicleSubsystem
// Size: 0xa0 (Inherited: 0x30)
struct USolarVehicleSubsystem : UWorldSubsystem {
	struct FMulticastInlineDelegate OnVehicleSpawned; // 0x30(0x10)
	struct FMulticastInlineDelegate OnVehicleDestroyed; // 0x40(0x10)
	char pad_50[0x50]; // 0x50(0x50)

	void GetActiveVehicleList(struct TArray<struct AActor*>& OutActiveVehicles); // Function Solarland.SolarVehicleSubsystem.GetActiveVehicleList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x29886e0
};

// Class Solarland.SolarVehicleWeakPointComponent
// Size: 0x600 (Inherited: 0x600)
struct USolarVehicleWeakPointComponent : UStaticMeshComponent {
};

// Class Solarland.SolarVibrateManager
// Size: 0x110 (Inherited: 0x30)
struct USolarVibrateManager : USolarGameManager {
	char pad_30[0x20]; // 0x30(0x20)
	struct UGameplayVibrateDataAsset* GameplayVibrateDataAsset; // 0x50(0x08)
	struct TMap<enum class EGameplayVibrateCategory, enum class EGameplayVibrateIntensity> CurrentVibrateCategoryIntensityMobile; // 0x58(0x50)
	struct TMap<enum class EGameplayVibrateCategory, enum class EGameplayVibrateIntensity> CurrentVibrateCategoryIntensityGamepad; // 0xa8(0x50)
	struct UDataTable* WeaponVibrateTable; // 0xf8(0x08)
	struct UVibrateConfig* VibrateConfig; // 0x100(0x08)
	enum class EWeaponVibrateFactor WeaponVibrateFactorMobile; // 0x108(0x01)
	enum class EWeaponVibrateFactor WeaponVibrateFactorGamepad; // 0x109(0x01)
	char pad_10A[0x2]; // 0x10a(0x02)
	float CacheWeaponChargeTime; // 0x10c(0x04)

	void Stop(); // Function Solarland.SolarVibrateManager.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x2989440
	void SetWeaponVibrateFactor(); // Function Solarland.SolarVibrateManager.SetWeaponVibrateFactor // (Final|Native|Public) // @ game+0x2989420
	void SetVibrateAbilityEnable(bool bOnEnable); // Function Solarland.SolarVibrateManager.SetVibrateAbilityEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x2989390
	void SetGameplayVibrateIntensityByUserSetting(); // Function Solarland.SolarVibrateManager.SetGameplayVibrateIntensityByUserSetting // (Final|Native|Protected) // @ game+0x2989370
	void SetGameplayVibrateIntensity(enum class EGameplayVibrateCategory Category, enum class EGameplayVibrateIntensity Intensity); // Function Solarland.SolarVibrateManager.SetGameplayVibrateIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x29892a0
	void SendLoopParam(int32_t Amplitude, int32_t Interval); // Function Solarland.SolarVibrateManager.SendLoopParam // (Final|Native|Public|BlueprintCallable) // @ game+0x2988e90
	void PlayWeaponVibrate(int32_t InWeaponID, enum class EWeaponVibrateType InType, float InChargeTime); // Function Solarland.SolarVibrateManager.PlayWeaponVibrate // (Final|Native|Public) // @ game+0x2988cf0
	void PlayByParams(struct FVibratePlayParams& Params, enum class EVibrateDeviceType DeviceType); // Function Solarland.SolarVibrateManager.PlayByParams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2988bf0
	bool GetVibrateAbilityEnable(); // Function Solarland.SolarVibrateManager.GetVibrateAbilityEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x2988820
};

// Class Solarland.SolarVirtualBulletAKComponent
// Size: 0x520 (Inherited: 0x520)
struct USolarVirtualBulletAKComponent : UAkComponent {
};

// Class Solarland.SolarVirtualBulletCollector
// Size: 0x140 (Inherited: 0xb0)
struct USolarVirtualBulletCollector : UActorComponent {
	struct ASolarWeapon* CacheWeapon; // 0xb0(0x08)
	struct ASolarCharacterBase* CacheCharacter; // 0xb8(0x08)
	struct UWorld* CacheWorld; // 0xc0(0x08)
	struct TArray<struct FSolarVirtualBullet> Bullets; // 0xc8(0x10)
	struct TArray<struct FSolarVirtualBullet> PendingBulletsInSimulated; // 0xd8(0x10)
	struct TArray<struct FSolarVirtualBullet> BulletsInSimulated; // 0xe8(0x10)
	struct TArray<struct FSolarVirtualBullet> BulletsInDedicatedServer; // 0xf8(0x10)
	char pad_108[0x30]; // 0x108(0x30)
	struct ASolarBullet* EffectBulletCDO; // 0x138(0x08)
};

// Class Solarland.SolarWarmGameComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USolarWarmGameComponent : UActorComponent {

	bool IsWarmGame(); // Function Solarland.SolarWarmGameComponent.IsWarmGame // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void GetAIPickResult(struct TArray<int32_t>& InCharactetIDs, int32_t& OutCharacterID, int32_t& OutSkinId); // Function Solarland.SolarWarmGameComponent.GetAIPickResult // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarWaterActorNew
// Size: 0x590 (Inherited: 0x228)
struct ASolarWaterActorNew : AActor {
	struct TSoftObjectPtr<UStaticMesh> VolumeMeshAsset; // 0x228(0x28)
	struct TSoftObjectPtr<UStaticMesh> SurfaceMeshAsset; // 0x250(0x28)
	struct TSoftObjectPtr<UMaterialInterface> WaterExtremeMaterial; // 0x278(0x28)
	struct TSoftObjectPtr<UMaterialInterface> WaterUltraMaterial; // 0x2a0(0x28)
	struct TSoftObjectPtr<UMaterialInterface> WaterHDRMaterial; // 0x2c8(0x28)
	struct TSoftObjectPtr<UMaterialInterface> WaterHDMaterial; // 0x2f0(0x28)
	struct TSoftObjectPtr<UMaterialInterface> WaterBalancedMaterial; // 0x318(0x28)
	struct TSoftObjectPtr<UMaterialInterface> WaterSmoothMaterial; // 0x340(0x28)
	struct TSoftObjectPtr<UMaterialInterface> WaterPerformanceMaterial; // 0x368(0x28)
	bool bUnderwater; // 0x390(0x01)
	char pad_391[0x7]; // 0x391(0x07)
	struct TSoftObjectPtr<UMaterialInterface> WaterScreenMaterial; // 0x398(0x28)
	struct TSoftObjectPtr<UMaterialInterface> WaterVolumeMaterial; // 0x3c0(0x28)
	struct UMaterialParameterCollection* WaterMPC; // 0x3e8(0x08)
	struct USolarPostProcessSettingItem* SolarPostAsset; // 0x3f0(0x08)
	bool bCutline; // 0x3f8(0x01)
	char pad_3F9[0x3]; // 0x3f9(0x03)
	struct FLinearColor CutlineColor; // 0x3fc(0x10)
	float CutlineOffset; // 0x40c(0x04)
	float CutlineFadeness; // 0x410(0x04)
	float CutlineThickness; // 0x414(0x04)
	struct TSoftObjectPtr<UTexture2D> NormalTexture; // 0x418(0x28)
	float Flatten; // 0x440(0x04)
	float Speed; // 0x444(0x04)
	float Tiling; // 0x448(0x04)
	float FarSpeed; // 0x44c(0x04)
	float FarTiling; // 0x450(0x04)
	bool bAddtationNormal; // 0x454(0x01)
	char pad_455[0x3]; // 0x455(0x03)
	struct TSoftObjectPtr<UTexture2D> AddtationAreaTexture; // 0x458(0x28)
	float AddtationSpeed; // 0x480(0x04)
	float AddtationTiling; // 0x484(0x04)
	float AddtationAreaDistribution; // 0x488(0x04)
	float SpecularIntensity; // 0x48c(0x04)
	float ReflectionDistortion; // 0x490(0x04)
	char pad_494[0x4]; // 0x494(0x04)
	struct TSoftObjectPtr<UTextureCube> ReflectionCubemap; // 0x498(0x28)
	bool bSSR; // 0x4c0(0x01)
	char pad_4C1[0x3]; // 0x4c1(0x03)
	float SSRFadeness; // 0x4c4(0x04)
	float SSRRaylength; // 0x4c8(0x04)
	bool bIridescence; // 0x4cc(0x01)
	char pad_4CD[0x3]; // 0x4cd(0x03)
	float IridescenceIOR; // 0x4d0(0x04)
	char pad_4D4[0x4]; // 0x4d4(0x04)
	struct TSoftObjectPtr<UTexture2D> IridescenceAreaTexture; // 0x4d8(0x28)
	bool bRefraction; // 0x500(0x01)
	char pad_501[0x3]; // 0x501(0x03)
	float RefractionIOR; // 0x504(0x04)
	struct FLinearColor ScatteringColor; // 0x508(0x10)
	float ScatteringScale; // 0x518(0x04)
	float ScatteringDensity; // 0x51c(0x04)
	float ScatteringAnisotropy; // 0x520(0x04)
	struct FLinearColor AbsorptionColor; // 0x524(0x10)
	float AbsorptionDistance; // 0x534(0x04)
	bool bAbsorptionFromTexture; // 0x538(0x01)
	char pad_539[0x7]; // 0x539(0x07)
	struct TSoftObjectPtr<UTexture2D> AbsorptionTexture; // 0x540(0x28)
	struct FSpawnedActorHandle CachedActorHandle; // 0x568(0x04)
	char pad_56C[0x4]; // 0x56c(0x04)
	struct USolarWaterMesh* VolumeMeshComponent; // 0x570(0x08)
	struct USolarWaterMesh* SurfaceMeshComponent; // 0x578(0x08)
	char pad_580[0x10]; // 0x580(0x10)

	void OnExitWaterSurface(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarWaterActorNew.OnExitWaterSurface // (Final|Native|Protected) // @ game+0x2993b00
	void OnEnterWaterSurface(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarWaterActorNew.OnEnterWaterSurface // (Final|Native|Protected|HasOutParms) // @ game+0x29938e0
	float GetWaterLineHeight(); // Function Solarland.SolarWaterActorNew.GetWaterLineHeight // (Final|Native|Public|Const) // @ game+0x2992820
};

// Class Solarland.SolarWaterMesh
// Size: 0x600 (Inherited: 0x600)
struct USolarWaterMesh : UStaticMeshComponent {
};

// Class Solarland.ParticleLoopListener
// Size: 0x40 (Inherited: 0x28)
struct UParticleLoopListener : UObject {
	char pad_28[0x18]; // 0x28(0x18)

	void OnParticleFinished(struct UParticleSystemComponent* ps); // Function Solarland.ParticleLoopListener.OnParticleFinished // (Final|Native|Public) // @ game+0x2993d80
};

// Class Solarland.SolarWeaponAbilityBlackHole
// Size: 0x800 (Inherited: 0x4b0)
struct ASolarWeaponAbilityBlackHole : ASummonItemBase {
	char pad_4B0[0x8]; // 0x4b0(0x08)
	struct USphereComponent* CoreComponent; // 0x4b8(0x08)
	struct TMap<struct TWeakObjectPtr<struct AActor>, struct FSolarBlackHoleTestActorInfo> TestActorMap; // 0x4c0(0x50)
	struct TMap<struct TWeakObjectPtr<struct AActor>, struct FSolarBlackHoleTestActorInfo> PerspectiveActorMap; // 0x510(0x50)
	struct FName CoreTag; // 0x560(0x08)
	struct TArray<enum class EActorRegisterType> TestTypes; // 0x568(0x10)
	float TestRadius; // 0x578(0x04)
	float ForbidAttractiveDistance; // 0x57c(0x04)
	float AttractiveSpeedWhenNoInput; // 0x580(0x04)
	float AttractiveSpeedFactorForCharacterInWater; // 0x584(0x04)
	struct FRuntimeFloatCurve MaxAttractiveSpeedReduceCurve; // 0x588(0x88)
	struct FRuntimeFloatCurve AttractiveSpeedReduceAngleWeightCurve; // 0x610(0x88)
	struct FGameplayEffectSpecHandle ToSelfGameplayEffectHandle; // 0x698(0x10)
	struct FGameplayEffectSpecHandle ToTargetGameplayEffectHandle; // 0x6a8(0x10)
	struct TMap<enum class ESolarBlackHoleParticle, struct FSolarBlackHoleParticleInfo> ParticleInfoTable; // 0x6b8(0x50)
	char pad_708[0x10]; // 0x708(0x10)
	enum class ESolarBlackHoleState CurrentBlackHoleState; // 0x718(0x01)
	char pad_719[0xb]; // 0x719(0x0b)
	float BlackHoleReadyDuration; // 0x724(0x04)
	float BlackHoleActiveDuration; // 0x728(0x04)
	float BlackHoleEndDuration; // 0x72c(0x04)
	struct UGameplayEffect* ZeroSpeedGameplayEffectClass; // 0x730(0x08)
	struct FGameplayTag ForceAttractiveTag; // 0x738(0x08)
	struct TMap<struct AActor*, float> ClassTypeDamageValueMap; // 0x740(0x50)
	struct UGameplayEffect* PerspectiveGameplayEffectClass; // 0x790(0x08)
	float PerspectiveRadius; // 0x798(0x04)
	char pad_79C[0x4]; // 0x79c(0x04)
	struct TArray<struct USplineComponent*> CardSplineArray; // 0x7a0(0x10)
	char pad_7B0[0x8]; // 0x7b0(0x08)
	struct TArray<struct AActor*> CardArray; // 0x7b8(0x10)
	char pad_7C8[0x8]; // 0x7c8(0x08)
	struct FVector CardStartLocation; // 0x7d0(0x0c)
	char pad_7DC[0xc]; // 0x7dc(0x0c)
	float CardSpeed; // 0x7e8(0x04)
	char pad_7EC[0x4]; // 0x7ec(0x04)
	struct AActor* CardClass; // 0x7f0(0x08)
	float DefaultCardPathLength; // 0x7f8(0x04)
	char pad_7FC[0x4]; // 0x7fc(0x04)

	void OnTestActorEndPlay(struct AActor* InActor, enum class EEndPlayReason InEndPlayReason); // Function Solarland.SolarWeaponAbilityBlackHole.OnTestActorEndPlay // (Final|Native|Protected) // @ game+0x299a230
	void OnPerspectiveActorEndPlay(struct AActor* InActor, enum class EEndPlayReason InEndPlayReason); // Function Solarland.SolarWeaponAbilityBlackHole.OnPerspectiveActorEndPlay // (Final|Native|Protected) // @ game+0x2999620
};

// Class Solarland.SolarWeaponAbilityTemp
// Size: 0x320 (Inherited: 0x310)
struct ASolarWeaponAbilityTemp : ASolarAbility {
	struct UGameplayAbility* GameplayAbilityClass; // 0x308(0x08)
	struct FGameplayAbilitySpecHandle GameplayAbilitySpecHandle; // 0x310(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)
};

// Class Solarland.SolarWeaponAT_TaskBase
// Size: 0xb0 (Inherited: 0x80)
struct USolarWeaponAT_TaskBase : USolarAbilityTask {
	struct FMulticastInlineDelegate OnTaskEnd; // 0x80(0x10)
	struct UGameplayAbility* OwnerAbility; // 0x90(0x08)
	struct ASolarCharacter* TaskCharacter; // 0x98(0x08)
	struct UWeaponSystemBase* TaskWeaponSysBase; // 0xa0(0x08)
	char pad_A8[0x8]; // 0xa8(0x08)

	struct USolarWeaponAT_TaskBase* CreateTaskDynamically(struct USolarWeaponAT_TaskBase* RealClass, struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct ASolarCharacter* InCharacter); // Function Solarland.SolarWeaponAT_TaskBase.CreateTaskDynamically // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x29990c0
};

// Class Solarland.SolarWeaponAT_CtrlFireBase
// Size: 0xc0 (Inherited: 0xb0)
struct USolarWeaponAT_CtrlFireBase : USolarWeaponAT_TaskBase {
	struct FMulticastInlineDelegate OnDoFire; // 0xb0(0x10)
};

// Class Solarland.SolarWeaponAT_CtrlFireCharge
// Size: 0xc0 (Inherited: 0xc0)
struct USolarWeaponAT_CtrlFireCharge : USolarWeaponAT_CtrlFireBase {
};

// Class Solarland.SolarWeaponAT_CtrlFireGatling
// Size: 0xc8 (Inherited: 0xc0)
struct USolarWeaponAT_CtrlFireGatling : USolarWeaponAT_CtrlFireBase {
	char pad_C0[0x8]; // 0xc0(0x08)
};

// Class Solarland.SolarWeaponAT_FireBase
// Size: 0xe0 (Inherited: 0xb0)
struct USolarWeaponAT_FireBase : USolarWeaponAT_TaskBase {
	char pad_B0[0x18]; // 0xb0(0x18)
	struct UAmmoConfig* Ammo; // 0xc8(0x08)
	char pad_D0[0x10]; // 0xd0(0x10)

	void K2_RequireEndFireTask(); // Function Solarland.SolarWeaponAT_FireBase.K2_RequireEndFireTask // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void K2_RealFireTick(float DeltaTime); // Function Solarland.SolarWeaponAT_FireBase.K2_RealFireTick // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void K2_PrepareRealFire(); // Function Solarland.SolarWeaponAT_FireBase.K2_PrepareRealFire // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void K2_ActivateRealFire(); // Function Solarland.SolarWeaponAT_FireBase.K2_ActivateRealFire // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarWeaponAT_FireBurst
// Size: 0x100 (Inherited: 0xe0)
struct USolarWeaponAT_FireBurst : USolarWeaponAT_FireBase {
	int32_t BurstMaxCount; // 0xe0(0x04)
	float BurstFireInterval; // 0xe4(0x04)
	float FireGroupInterval; // 0xe8(0x04)
	bool bAutoNextBurst; // 0xec(0x01)
	char pad_ED[0x13]; // 0xed(0x13)
};

// Class Solarland.WeaponFireLaserCollector
// Size: 0x240 (Inherited: 0xb0)
struct UWeaponFireLaserCollector : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct ASolarWeapon* OwnerWeapon; // 0xb8(0x08)
	struct UAkComponent* FireAkComponent; // 0xc0(0x08)
	struct UAkComponent* ImpactAkComponent; // 0xc8(0x08)
	struct FWeaponFireLaserElement ActElement; // 0xd0(0x48)
	struct TArray<struct FWeaponFireLaserElement> FadingElements; // 0x118(0x10)
	char pad_128[0x18]; // 0x128(0x18)
	struct UParticleSystem* ExplodeEffectParticle; // 0x140(0x08)
	struct UParticleSystem* DecalsEffectParticle; // 0x148(0x08)
	struct TArray<struct UParticleSystemComponent*> CacheParticles; // 0x150(0x10)
	char pad_160[0xe0]; // 0x160(0xe0)
};

// Class Solarland.SolarWeaponAT_FireLaser
// Size: 0x240 (Inherited: 0xe0)
struct USolarWeaponAT_FireLaser : USolarWeaponAT_FireBase {
	float LaserMaxTime; // 0xe0(0x04)
	int32_t DamageCount; // 0xe4(0x04)
	struct UGameplayEffect* VehicleBlockEffect; // 0xe8(0x08)
	struct UCurveFloat* LaserAttackCurve; // 0xf0(0x08)
	struct UParticleSystem* LaserEffectParticle; // 0xf8(0x08)
	struct UCurveFloat* LaserEffectCurve; // 0x100(0x08)
	struct UParticleSystem* ExplodeEffectParticle; // 0x108(0x08)
	struct FTransform ExplodeEffectTransform; // 0x110(0x30)
	struct UParticleSystem* DecalsEffectParticle; // 0x140(0x08)
	char pad_148[0x8]; // 0x148(0x08)
	struct FTransform DecalEffectTransform; // 0x150(0x30)
	float UpdateExplodeInterval; // 0x180(0x04)
	float UpdateSimInterval; // 0x184(0x04)
	float LaserEffectFadeSpeed; // 0x188(0x04)
	float MaxFadingLifeTime; // 0x18c(0x04)
	float UIAnimLength; // 0x190(0x04)
	char pad_194[0x4]; // 0x194(0x04)
	struct FString LaserFireSound; // 0x198(0x10)
	struct FString LaserStopSound; // 0x1a8(0x10)
	struct FString LaserBigSound; // 0x1b8(0x10)
	struct FString LaserImpactFireSound; // 0x1c8(0x10)
	struct FString LaserImpactStopSound; // 0x1d8(0x10)
	struct FString LaserImpactBigSound; // 0x1e8(0x10)
	bool bShowLaserDamageDebug; // 0x1f8(0x01)
	char pad_1F9[0x3]; // 0x1f9(0x03)
	struct FName BeamLifeTimeParamName; // 0x1fc(0x08)
	struct FName BeamSizeParamName; // 0x204(0x08)
	char pad_20C[0x4]; // 0x20c(0x04)
	struct ASolarVehicleIronManWeapon* IronManWeapon; // 0x210(0x08)
	char pad_218[0x28]; // 0x218(0x28)

	struct USolarWeaponAT_FireLaser* CreateTask(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct ASolarCharacter* InCharacter); // Function Solarland.SolarWeaponAT_FireLaser.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2998fc0
};

// Class Solarland.SolarWeaponAT_FireNormal
// Size: 0xe0 (Inherited: 0xe0)
struct USolarWeaponAT_FireNormal : USolarWeaponAT_FireBase {
};

// Class Solarland.SolarWeaponAT_FireRocket
// Size: 0x100 (Inherited: 0xe0)
struct USolarWeaponAT_FireRocket : USolarWeaponAT_FireBase {
	float PerRocketInterval; // 0xe0(0x04)
	float FireGroupInterval; // 0xe4(0x04)
	struct ASolarVehicleRocketLauncherWeapon* RocketLauncherWeapon; // 0xe8(0x08)
	char pad_F0[0x10]; // 0xf0(0x10)
};

// Class Solarland.SolarWeaponAT_FireSingle
// Size: 0xe8 (Inherited: 0xe0)
struct USolarWeaponAT_FireSingle : USolarWeaponAT_FireBase {
	bool bAutoNextFire; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
};

// Class Solarland.SolarWeaponAT_FireSkill
// Size: 0xe0 (Inherited: 0xe0)
struct USolarWeaponAT_FireSkill : USolarWeaponAT_FireBase {
};

// Class Solarland.SolarWeaponAT_FireSummon
// Size: 0xe8 (Inherited: 0xe0)
struct USolarWeaponAT_FireSummon : USolarWeaponAT_FireBase {
	char pad_E0[0x8]; // 0xe0(0x08)
};

// Class Solarland.SolarWeaponAT_WaitStateForEvent
// Size: 0xb8 (Inherited: 0x80)
struct USolarWeaponAT_WaitStateForEvent : USolarAbilityTask {
	char pad_80[0x38]; // 0x80(0x38)
};

// Class Solarland.SolarWeaponBattleWidgetMobile
// Size: 0x810 (Inherited: 0x400)
struct USolarWeaponBattleWidgetMobile : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct TArray<struct UUserWidget*> WeaponSlotWidgets; // 0x410(0x10)
	struct TMap<struct FString, struct UWidget*> ExcelLayoutWidgetMap; // 0x420(0x50)
	struct TMap<int32_t, struct FString> CharacterStateMap; // 0x470(0x50)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> CurrentActivedPlayerWeapon; // 0x4c0(0x08)
	char pad_4C8[0x98]; // 0x4c8(0x98)
	struct UExpWidget* WP_Exp; // 0x560(0x08)
	struct UWidgetSwitcher* WGS_Fire_Left; // 0x568(0x08)
	struct UButton* BT_Weapon_Exit; // 0x570(0x08)
	struct UButton* Btn_RoleAbility_Cancel; // 0x578(0x08)
	struct URoleSkillWidget* SuperSkill; // 0x580(0x08)
	struct URoleSkillWidget* TacticalSkill; // 0x588(0x08)
	struct UButton* BT_Fire_Left; // 0x590(0x08)
	struct UButton* BT_AutoScopeFire_Left; // 0x598(0x08)
	struct UButton* BT_Cancel_Left; // 0x5a0(0x08)
	struct UButton* BT_Cancel_Right; // 0x5a8(0x08)
	struct UButton* BT_Cancel_QuickAds; // 0x5b0(0x08)
	struct UButton* BT_Reload_2; // 0x5b8(0x08)
	struct USolarMovablePad* GunsightPad; // 0x5c0(0x08)
	struct UCheckBox* GunsightImageCheckBox; // 0x5c8(0x08)
	struct UCanvasPanel* Panel_Fire_Right; // 0x5d0(0x08)
	struct UCanvasPanel* Panel_QuickADS; // 0x5d8(0x08)
	struct UWidgetSwitcher* WGS_QuickAds; // 0x5e0(0x08)
	struct UWidgetSwitcher* WGS_Fire_Right; // 0x5e8(0x08)
	struct USolarMovablePad* QuickAdsFirePad; // 0x5f0(0x08)
	struct UCanvasPanel* Panel_Fire; // 0x5f8(0x08)
	struct UCanvasPanel* Panel_Reload; // 0x600(0x08)
	struct UCanvasPanel* Panel_Gunsight; // 0x608(0x08)
	struct UCanvasPanel* Panel_Weapon_2; // 0x610(0x08)
	struct UCanvasPanel* Panel_Weapon_3; // 0x618(0x08)
	struct UCanvasPanel* Panel_SuperSkill; // 0x620(0x08)
	struct UCanvasPanel* Panel_TacticalSkill; // 0x628(0x08)
	struct UImage* FireIconRight; // 0x630(0x08)
	struct UImage* FireIconLeft; // 0x638(0x08)
	struct USolarMovablePad* FirePadRight; // 0x640(0x08)
	struct USolarMovablePad* AutoScopeFirePadRight; // 0x648(0x08)
	struct USolarWeaponSlotWidgetMobile* WP_Slot0; // 0x650(0x08)
	struct USolarWeaponSlotWidgetMobile* WP_Slot1; // 0x658(0x08)
	struct USolarWeaponSlotWidgetMobile* WP_Slot2; // 0x660(0x08)
	struct UWidgetAnimation* Enter_Anim; // 0x668(0x08)
	struct UWidgetAnimation* Exit_Anim; // 0x670(0x08)
	struct UWidgetAnimation* Anim_ScopeList_Exit; // 0x678(0x08)
	struct UWidgetAnimation* Anim_ScopeList_Enter; // 0x680(0x08)
	struct UCanvasPanel* Weapon_UI; // 0x688(0x08)
	struct USolarTextBlock* Txt_NextLvDMG; // 0x690(0x08)
	struct UCanvasPanel* Panel_NextLv_Content; // 0x698(0x08)
	struct USolarTextBlock* Txt_Auto_Quick; // 0x6a0(0x08)
	struct USolarTextBlock* Txt_Auto_Right; // 0x6a8(0x08)
	char pad_6B0[0x8]; // 0x6b0(0x08)
	struct USolarAdapterWidget* Panel_Weapon_1_KeyMapping; // 0x6b8(0x08)
	struct USolarAdapterWidget* Panel_Weapon_2_KeyMapping; // 0x6c0(0x08)
	struct USolarAdapterWidget* Panel_Weapon_3_KeyMapping; // 0x6c8(0x08)
	struct TArray<struct USolarAdapterWidget*> WeaponKeyMappingArray; // 0x6d0(0x10)
	struct UButton* Btn_Scope; // 0x6e0(0x08)
	struct UCanvasPanel* Panel_ScopeList; // 0x6e8(0x08)
	struct USolarWeaponScopeSlot* Scope; // 0x6f0(0x08)
	struct USolarWeaponScopeSlot* Scope_2; // 0x6f8(0x08)
	struct USolarWeaponScopeSlot* Scope_3; // 0x700(0x08)
	struct UImage* Img_Scope_Border; // 0x708(0x08)
	struct USolarTextBlock* Txt_Scope; // 0x710(0x08)
	struct FLinearColor ImgColorClose; // 0x718(0x10)
	struct FLinearColor ImgColorOpen; // 0x728(0x10)
	struct FLinearColor TextColorClose; // 0x738(0x10)
	struct FLinearColor TextColorOpen; // 0x748(0x10)
	char pad_758[0xb8]; // 0x758(0xb8)

	void SetWidgetVisiblityByCharacterState(int32_t InCharacterState); // Function Solarland.SolarWeaponBattleWidgetMobile.SetWidgetVisiblityByCharacterState // (Final|Native|Public) // @ game+0x299ad70
	void SetWidgetVisiblityByActionID(int32_t InActionID, bool InbVisible); // Function Solarland.SolarWeaponBattleWidgetMobile.SetWidgetVisiblityByActionID // (Final|Native|Public) // @ game+0x299aca0
	void RefreshQuickScopeButtonState(); // Function Solarland.SolarWeaponBattleWidgetMobile.RefreshQuickScopeButtonState // (Final|Native|Private) // @ game+0x299ac80
	void OnWeaponUpgrade(struct ASolarPlayerWeapon* InPlayerWeapon); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponUpgrade // (Final|Native|Protected) // @ game+0x299abf0
	void OnWeaponSlotUpdateParts(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotUpdateParts // (Final|Native|Protected) // @ game+0x299ab60
	void OnWeaponSlotUpdateAmmo(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotUpdateAmmo // (Final|Native|Protected) // @ game+0x299aad0
	void OnWeaponSlotToggleOverload(int32_t InWeaponSlotID, bool InbEnter); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotToggleOverload // (Final|Native|Protected) // @ game+0x299aa00
	void OnWeaponSlotQuitReload(int32_t InWeaponSlotID, bool InbFinishReload); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotQuitReload // (Final|Native|Protected) // @ game+0x299a930
	void OnWeaponSlotInsufficientAmmo(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotInsufficientAmmo // (Final|Native|Protected) // @ game+0x299a8a0
	void OnWeaponSlotEquip(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotEquip // (Final|Native|Protected) // @ game+0x299a7d0
	void OnWeaponSlotEnterReload(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotEnterReload // (Final|Native|Protected) // @ game+0x299a740
	void OnWeaponSlotAddEXP(int32_t InWeaponSlotID, int32_t InExp); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotAddEXP // (Final|Native|Protected) // @ game+0x299a670
	void OnWeaponSlotActive(int32_t InWeaponSlotID, struct AActor* InActiveWeapon); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotActive // (Final|Native|Protected) // @ game+0x299a5a0
	void OnWeaponSetScopeButtonRotatableEvent(bool bInCanRotate); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSetScopeButtonRotatableEvent // (Final|Native|Protected) // @ game+0x299a510
	void OnWeaponSetAutoScopeFireButtonIcon(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSetAutoScopeFireButtonIcon // (Final|Native|Protected) // @ game+0x299a4f0
	void OnWeaponRefreshFireButtonState(struct UWeaponSystemPlayerBase* WeaponSys, bool bInForceRefresh); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponRefreshFireButtonState // (Final|Native|Protected) // @ game+0x299a420
	void OnWeaponChangeQuickScopeActivated(bool bActivated); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponChangeQuickScopeActivated // (Final|Native|Protected) // @ game+0x299a390
	void OnWeaponChangeAimIconState(bool bInOpenScope); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponChangeAimIconState // (Final|Native|Protected) // @ game+0x299a300
	void OnSwitchEMP(struct ASolarCharacter* InCharacter, bool InbSwitchOnEMP); // Function Solarland.SolarWeaponBattleWidgetMobile.OnSwitchEMP // (Final|Native|Protected) // @ game+0x299a160
	void OnRoleAbilityHideHUD(bool bHide); // Function Solarland.SolarWeaponBattleWidgetMobile.OnRoleAbilityHideHUD // (Final|Native|Protected) // @ game+0x299a0d0
	void OnReleasedSkillCancelButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedSkillCancelButton // (Final|Native|Protected) // @ game+0x299a0b0
	void OnReleasedRighrFireButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedRighrFireButton // (Final|Native|Protected|HasOutParms) // @ game+0x2999f10
	void OnReleasedReloadeButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedReloadeButton // (Final|Native|Protected) // @ game+0x2999ef0
	void OnReleasedQuickAdsButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedQuickAdsButton // (Final|Native|Protected|HasOutParms) // @ game+0x2999d50
	void OnReleasedLeftFireButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedLeftFireButton // (Final|Native|Protected) // @ game+0x2999d30
	void OnReleasedCancelRightButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedCancelRightButton // (Final|Native|Protected) // @ game+0x2999d10
	void OnReleasedCancelQuickAdsButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedCancelQuickAdsButton // (Final|Native|Protected) // @ game+0x2999cf0
	void OnReleasedCancelLeftButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedCancelLeftButton // (Final|Native|Protected) // @ game+0x2999cd0
	void OnReleasedAllFireButtons(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedAllFireButtons // (Final|Native|Protected) // @ game+0x2999cb0
	void OnPressedSkillCancelButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedSkillCancelButton // (Final|Native|Protected) // @ game+0x2999c90
	void OnPressedRightFireButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedRightFireButton // (Final|Native|Protected|HasOutParms) // @ game+0x2999af0
	void OnPressedReloadButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedReloadButton // (Final|Native|Protected) // @ game+0x2999ad0
	void OnPressedQuickScopeButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedQuickScopeButton // (Final|Native|Public) // @ game+0x2999ab0
	void OnPressedQuickAdsButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedQuickAdsButton // (Final|Native|Protected|HasOutParms) // @ game+0x2999910
	void OnPressedLeftFireButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedLeftFireButton // (Final|Native|Protected) // @ game+0x29998f0
	void OnPressedGunSightButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedGunSightButton // (Final|Native|Protected|HasOutParms) // @ game+0x2999750
	void OnPressedCancelRightButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedCancelRightButton // (Final|Native|Protected) // @ game+0x2999730
	void OnPressedCancelQuickAdsButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedCancelQuickAdsButton // (Final|Native|Protected) // @ game+0x2999710
	void OnPressedCancelLeftButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedCancelLeftButton // (Final|Native|Protected) // @ game+0x29996f0
	void OnGameUserItemHUDStyleChanged(enum class ESolarITemHUDStyle InStyle); // Function Solarland.SolarWeaponBattleWidgetMobile.OnGameUserItemHUDStyleChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnExitSpectateMode(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnExitSpectateMode // (Final|Native|Protected) // @ game+0x26c8f80
	void OnEnterSpectateMode(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnEnterSpectateMode // (Final|Native|Protected) // @ game+0x2661bb0
	void OnEnterParachuting(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnEnterParachuting // (Final|Native|Protected) // @ game+0x2999600
	void OnEnterCruising(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnEnterCruising // (Final|Native|Protected) // @ game+0x29995e0
	void OnControllerCharacterSet(struct ASolarCharacter* ControlledCharacter); // Function Solarland.SolarWeaponBattleWidgetMobile.OnControllerCharacterSet // (Final|Native|Protected) // @ game+0x2999550
	void OnChangeSkydiveFlyState(struct ASolarCharacter* InCharacter); // Function Solarland.SolarWeaponBattleWidgetMobile.OnChangeSkydiveFlyState // (Final|Native|Protected) // @ game+0x29994c0
	void OnChangeDriveState(enum class EDriveState InDriveState); // Function Solarland.SolarWeaponBattleWidgetMobile.OnChangeDriveState // (Final|Native|Protected) // @ game+0x2999440
	void OnChangeCharacterSwimState(bool InbSwmming); // Function Solarland.SolarWeaponBattleWidgetMobile.OnChangeCharacterSwimState // (Final|Native|Protected) // @ game+0x29993b0
	void OnAutoFireChanged(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnAutoFireChanged // (Final|Native|Protected) // @ game+0x2999390
	struct TArray<struct UUserWidget*> GetWeaponWidgets(); // Function Solarland.SolarWeaponBattleWidgetMobile.GetWeaponWidgets // (Native|Event|Protected|BlueprintEvent) // @ game+0x2999310
	bool GetFireButtonBrush(struct AActor* InWeapon, struct FSlateBrush& OutBrush); // Function Solarland.SolarWeaponBattleWidgetMobile.GetFireButtonBrush // (Final|Native|Protected|HasOutParms) // @ game+0x2999210
};

// Class Solarland.SolarWeaponBattleWidgetPC
// Size: 0x4e0 (Inherited: 0x400)
struct USolarWeaponBattleWidgetPC : USolarUserWidget {
	struct UUserWidget* UI_Component_Keyboard; // 0x400(0x08)
	struct USolarWeaponSlotWidgetPC* WP_Slot0; // 0x408(0x08)
	struct USolarWeaponSlotWidgetPC* WP_Slot1; // 0x410(0x08)
	struct USolarWeaponSlotWidgetPC* WP_Slot2; // 0x418(0x08)
	struct UHorizontalBox* Tips_Reload; // 0x420(0x08)
	struct USolarTextBlock* SolarTextBlock_2; // 0x428(0x08)
	float DisplayReloadTipAmmoRate; // 0x430(0x04)
	float DisplayReloadTipDuration; // 0x434(0x04)
	struct FSlateColor CanReloadTipColor; // 0x438(0x28)
	struct FSlateColor CannotReloadTipColor; // 0x460(0x28)
	char pad_488[0x30]; // 0x488(0x30)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> CurrentActiveWeapon; // 0x4b8(0x08)
	struct TArray<struct USolarWeaponSlotWidgetPC*> WeaponSlotWidgets; // 0x4c0(0x10)
	bool bCanDisplayReloadTip; // 0x4d0(0x01)
	char pad_4D1[0x7]; // 0x4d1(0x07)
	struct FTimerHandle ReloadTipTimerHandle; // 0x4d8(0x08)

	void OnUpdateWeaponParts(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetPC.OnUpdateWeaponParts // (Final|Native|Private) // @ game+0x299d920
	void OnUpdateAmmo(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetPC.OnUpdateAmmo // (Final|Native|Private) // @ game+0x299d890
	void OnQuitReload(int32_t InWeaponSlotID, bool InbFinishReload); // Function Solarland.SolarWeaponBattleWidgetPC.OnQuitReload // (Final|Native|Private) // @ game+0x299d7c0
	void OnEquipWeapon(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarWeaponBattleWidgetPC.OnEquipWeapon // (Final|Native|Private) // @ game+0x299d6f0
	void OnEnterReload(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetPC.OnEnterReload // (Final|Native|Private) // @ game+0x299d660
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.SolarWeaponBattleWidgetPC.OnDrivingStateChanged // (Final|Native|Private) // @ game+0x299d5e0
	void OnActiveWeapon(int32_t InWeaponSlotID, struct AActor* InActiveWeapon); // Function Solarland.SolarWeaponBattleWidgetPC.OnActiveWeapon // (Final|Native|Private) // @ game+0x299d510
};

// Class Solarland.SolarWeaponCrosshairPanelWidget
// Size: 0x4f8 (Inherited: 0x400)
struct USolarWeaponCrosshairPanelWidget : USolarUserWidget {
	struct UUserWidget* HUD_Reload; // 0x400(0x08)
	struct UImage* HUD_Forbid; // 0x408(0x08)
	struct UWidgetSwitcher* HUD_Overload; // 0x410(0x08)
	struct UUserWidget* HUD_ChargeProgress; // 0x418(0x08)
	struct UFeedbackWidget* HUD_Feedback; // 0x420(0x08)
	struct UCanvasPanel* Panel_CrosshairSlot; // 0x428(0x08)
	struct UCanvasPanel* Panel_BulletContainerSlot; // 0x430(0x08)
	struct USolarWeaponNoAmmoAlertWidget* HUD_NoAmmoAlert; // 0x438(0x08)
	struct USolarWeaponNoAmmoAlertWidget* HUD_RechamberHint; // 0x440(0x08)
	struct TMap<struct UUserWidget*, struct UUserWidget*> CrosshairWidgetPool; // 0x448(0x50)
	struct FSolarWeaponCrosshairData CurrentWeaponCrosshairData; // 0x498(0x38)
	struct UCrossHairWidget* ActiveCrosshair; // 0x4d0(0x08)
	struct USolarWeaponBulletContainerWidget* ActiveBulletContainer; // 0x4d8(0x08)
	struct USolarWeaponRechamberWidget* ActiveRechamberWidget; // 0x4e0(0x08)
	enum class ECrossHairState CurrentCrosshairState; // 0x4e8(0x01)
	enum class ECrossHairState LastCrosshairState; // 0x4e9(0x01)
	char pad_4EA[0xe]; // 0x4ea(0x0e)

	void RemoveWeaponWidget(struct UUserWidget* CrosshairWidgetToRemove, bool bInRemainCache); // Function Solarland.SolarWeaponCrosshairPanelWidget.RemoveWeaponWidget // (Final|Native|Public) // @ game+0x299da40
	void RemoveActiveWeaponWidget(bool bRemianCache); // Function Solarland.SolarWeaponCrosshairPanelWidget.RemoveActiveWeaponWidget // (Final|Native|Public) // @ game+0x299d9b0
	void ClearAllWeaponWidget(); // Function Solarland.SolarWeaponCrosshairPanelWidget.ClearAllWeaponWidget // (Final|Native|Public) // @ game+0x299d490
	struct UUserWidget* AddWeaponRechamberWidgetToPanel(struct UUserWidget* InWidgetClass); // Function Solarland.SolarWeaponCrosshairPanelWidget.AddWeaponRechamberWidgetToPanel // (Final|Native|Public) // @ game+0x299d3f0
	struct UUserWidget* AddWeaponCrosshairToPanel(struct UUserWidget* InWidgetClass); // Function Solarland.SolarWeaponCrosshairPanelWidget.AddWeaponCrosshairToPanel // (Final|Native|Public) // @ game+0x299d350
	void AddWeaponCrosshairAndBulletContainer(struct AActor* InWeapon, struct FSolarWeaponCrosshairData& InWeaponCrosshairData); // Function Solarland.SolarWeaponCrosshairPanelWidget.AddWeaponCrosshairAndBulletContainer // (Final|Native|Public|HasOutParms) // @ game+0x299d210
	struct UUserWidget* AddWeaponBulletContainerToPanel(struct UUserWidget* InWidgetClass); // Function Solarland.SolarWeaponCrosshairPanelWidget.AddWeaponBulletContainerToPanel // (Final|Native|Public) // @ game+0x299d170
};

// Class Solarland.SolarWeaponFireInputResolver
// Size: 0x90 (Inherited: 0x28)
struct USolarWeaponFireInputResolver : UObject {
	char pad_28[0x68]; // 0x28(0x68)

	enum class ESolarWeaponFireInputButtonState GetRightFireButtonState(); // Function Solarland.SolarWeaponFireInputResolver.GetRightFireButtonState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x299d4f0
	enum class ESolarWeaponFireInputButtonState GetQuickAdsButtonState(); // Function Solarland.SolarWeaponFireInputResolver.GetQuickAdsButtonState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x299d4d0
	enum class ESolarWeaponFireInputButtonState GetLeftFireButtonState(); // Function Solarland.SolarWeaponFireInputResolver.GetLeftFireButtonState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x299d4b0
};

// Class Solarland.SolarWeaponGA_Rocket
// Size: 0x4a8 (Inherited: 0x460)
struct USolarWeaponGA_Rocket : USolarCharacterGameplayAbility {
	struct FGameplayTag CueTag; // 0x460(0x08)
	float LifeTime; // 0x468(0x04)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct FTimerHandle LifeTimeEndTimerHandle; // 0x470(0x08)
	enum class ESkillAnimType SkillAnimType; // 0x478(0x01)
	char pad_479[0x3]; // 0x479(0x03)
	float DelayEndAbilityTime; // 0x47c(0x04)
	struct UUserWidget* InCrossHairClass; // 0x480(0x08)
	struct ASolarBurstRocketBullet* BurstBulletClass; // 0x488(0x08)
	struct ASolarBurstRocketBullet* CacheBurstBullet; // 0x490(0x08)
	char pad_498[0x8]; // 0x498(0x08)
	struct UCrossHairWidget* CrossHairWidget; // 0x4a0(0x08)

	void SetLifeTime(float InLifeTime); // Function Solarland.SolarWeaponGA_Rocket.SetLifeTime // (Final|Native|Public|BlueprintCallable) // @ game+0x299db10
	void OnStartRocketAbility(struct ASolarCharacter* Character); // Function Solarland.SolarWeaponGA_Rocket.OnStartRocketAbility // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnEndRocketAbility(struct ASolarCharacter* Character); // Function Solarland.SolarWeaponGA_Rocket.OnEndRocketAbility // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarWeaponGameplayAbility
// Size: 0x428 (Inherited: 0x418)
struct USolarWeaponGameplayAbility : USolarGameplayAbility {
	struct FGameplayTag CueTag; // 0x418(0x08)
	float LifeTime; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)

	void SetLifeTime(float InLifeTime); // Function Solarland.SolarWeaponGameplayAbility.SetLifeTime // (Final|Native|Public|BlueprintCallable) // @ game+0x29a1220
};

// Class Solarland.SolarWeaponInternalSetting
// Size: 0x158 (Inherited: 0x38)
struct USolarWeaponInternalSetting : UDeveloperSettings {
	struct FSoftObjectPath GlobalWeaponConfig; // 0x38(0x18)
	struct FSoftObjectPath GlobalHandheldWeaponConfig; // 0x50(0x18)
	struct FSoftObjectPath GlobalVehicleWeaponConfig; // 0x68(0x18)
	struct FSoftObjectPath UnArmWeaponClassPath; // 0x80(0x18)
	struct FSoftObjectPath WeaponDataTable; // 0x98(0x18)
	struct FSoftObjectPath WeaponAppearanceDataTable; // 0xb0(0x18)
	struct FSoftObjectPath DefaultProjectileSplineClassPath; // 0xc8(0x18)
	struct TSet<struct FSoftObjectPath> LobbyNoShowMaterials; // 0xe0(0x50)
	struct FSoftObjectPath LobbyEmptyMaterial; // 0x130(0x18)
	char pad_148[0x10]; // 0x148(0x10)
};

// Class Solarland.SolarWeaponMergeMeshManager
// Size: 0x38 (Inherited: 0x28)
struct USolarWeaponMergeMeshManager : UObject {
	struct TArray<struct FWeaponMergeMeshStruct> MergeMeshArray; // 0x28(0x10)
};

// Class Solarland.SolarWeaponNoAmmoAlertWidget
// Size: 0x450 (Inherited: 0x400)
struct USolarWeaponNoAmmoAlertWidget : USolarUserWidget {
	struct TMap<enum class EWeaponType, struct FSolarNoAmmoAlertWidgetLayout> NoAmmoAlertLayout; // 0x400(0x50)

	struct UWidgetAnimation* K2_GetAlertAnim(); // Function Solarland.SolarWeaponNoAmmoAlertWidget.K2_GetAlertAnim // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarWeaponPartEffectTipWidget
// Size: 0x440 (Inherited: 0x400)
struct USolarWeaponPartEffectTipWidget : USolarUserWidget {
	struct UWidgetAnimation* Anim_Bubble_UP; // 0x400(0x08)
	struct UWidgetAnimation* Anim_Bubble_Down; // 0x408(0x08)
	struct UWidgetAnimation* Anim_Exit_UP; // 0x410(0x08)
	struct UWidgetAnimation* Anim_Exit_Down; // 0x418(0x08)
	struct USolarTextBlock* Txt_Effect; // 0x420(0x08)
	struct USolarTextBlock* Txt_Percent; // 0x428(0x08)
	bool bTipToUp; // 0x430(0x01)
	char pad_431[0x3]; // 0x431(0x03)
	float TipDuration; // 0x434(0x04)
	float TipTimer; // 0x438(0x04)
	bool bContinueShowTip; // 0x43c(0x01)
	bool bPlayExitAnimation; // 0x43d(0x01)
	char pad_43E[0x2]; // 0x43e(0x02)

	void ChangeTipDirection(bool InbToUp); // Function Solarland.SolarWeaponPartEffectTipWidget.ChangeTipDirection // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarWeaponPenertrableInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarWeaponPenertrableInterface : UInterface {

	void ReceiveHitResult(struct FHitResult& InHitResult); // Function Solarland.SolarWeaponPenertrableInterface.ReceiveHitResult // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x29a1140
};

// Class Solarland.SolarWeaponProjectileSpline
// Size: 0x250 (Inherited: 0x228)
struct ASolarWeaponProjectileSpline : AActor {
	struct USplineComponent* Spline; // 0x228(0x08)
	char pad_230[0x8]; // 0x230(0x08)
	struct USplineMeshComponent* SplineMeshComponentCache; // 0x238(0x08)
	struct UStaticMeshComponent* PreviewedStaticMesh; // 0x240(0x08)
	struct USceneComponent* PreviewRoot; // 0x248(0x08)

	void ShowHitPointAt(struct FVector& Loc); // Function Solarland.SolarWeaponProjectileSpline.ShowHitPointAt // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2d0d160
	void SetPreviewTransform(struct FVector& PreviewLoc, struct FVector& PreviewUpDir, struct FVector& PreviewScale); // Function Solarland.SolarWeaponProjectileSpline.SetPreviewTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x29a1330
	void SetPoints(struct TArray<struct FVector>& Points); // Function Solarland.SolarWeaponProjectileSpline.SetPoints // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void SetNeedUpdateDisplayThrowTrajectory(bool Value); // Function Solarland.SolarWeaponProjectileSpline.SetNeedUpdateDisplayThrowTrajectory // (Final|Native|Public|BlueprintCallable) // @ game+0x29a12a0
	void K2_OnDisplaySummonPreview(); // Function Solarland.SolarWeaponProjectileSpline.K2_OnDisplaySummonPreview // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void HideHitPoint(); // Function Solarland.SolarWeaponProjectileSpline.HideHitPoint // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void HideAllSummonPreview(); // Function Solarland.SolarWeaponProjectileSpline.HideAllSummonPreview // (Native|Event|Public|BlueprintEvent) // @ game+0x1ae50f0
	void Hide(); // Function Solarland.SolarWeaponProjectileSpline.Hide // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct USplineMeshComponent* GetSplineMeshComponent(); // Function Solarland.SolarWeaponProjectileSpline.GetSplineMeshComponent // (Event|Protected|BlueprintEvent|Const) // @ game+0x2d0d160
	void DrawSplineMesh(struct TArray<struct FVector>& InPredictPoints); // Function Solarland.SolarWeaponProjectileSpline.DrawSplineMesh // (Final|Native|Public|HasOutParms) // @ game+0x29a05f0
	void ChangeSummonPreviewAttachParent(); // Function Solarland.SolarWeaponProjectileSpline.ChangeSummonPreviewAttachParent // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarWeaponPropertySlotWidget
// Size: 0x470 (Inherited: 0x400)
struct USolarWeaponPropertySlotWidget : USolarUserWidget {
	struct TArray<struct UWidget*> LockWidgetsCache; // 0x400(0x10)
	struct UImage* PropertyIconBackgroundCache; // 0x410(0x08)
	struct UImage* PropertyIconBorderCache; // 0x418(0x08)
	struct UImage* PropertyIconCache; // 0x420(0x08)
	struct FSoftObjectPath PropertyEmptyIconPath; // 0x428(0x18)
	struct FLinearColor PropertyIconBorderInvalidColor; // 0x440(0x10)
	struct FLinearColor PropertyIconBackgroundInvalidColor; // 0x450(0x10)
	struct FLinearColor PropertyIconBackgroundValidColor; // 0x460(0x10)

	void UpdatePropertySlot(struct FUpgradeSlotStruct& InSlotData); // Function Solarland.SolarWeaponPropertySlotWidget.UpdatePropertySlot // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x29a1520
	struct UImage* GetPropertyIconCache(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconCache // (Final|Native|Protected|BlueprintCallable) // @ game+0x29a0a80
	struct UImage* GetPropertyIconBorderCache(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconBorderCache // (Final|Native|Protected|BlueprintCallable) // @ game+0x29a0a50
	struct UImage* GetPropertyIconBorder(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconBorder // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct UImage* GetPropertyIconBackgroundCache(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconBackgroundCache // (Final|Native|Protected|BlueprintCallable) // @ game+0x29a0a20
	struct UImage* GetPropertyIconBackground(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconBackground // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct UImage* GetPropertyIcon(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIcon // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct TArray<struct UWidget*> GetLockWidgetsCache(); // Function Solarland.SolarWeaponPropertySlotWidget.GetLockWidgetsCache // (Final|Native|Protected|BlueprintCallable) // @ game+0x29a09a0
	struct TArray<struct UWidget*> GetLockWidgets(); // Function Solarland.SolarWeaponPropertySlotWidget.GetLockWidgets // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.SolarWeaponRechamberWidget
// Size: 0x418 (Inherited: 0x400)
struct USolarWeaponRechamberWidget : USolarUserWidget {
	struct UImage* img_FireCD; // 0x400(0x08)
	struct UWidgetAnimation* EmptyBullet_Anim; // 0x408(0x08)
	struct UMaterialInstanceDynamic* ProgressMaterial; // 0x410(0x08)
};

// Class Solarland.SolarWeaponScopeSlot
// Size: 0x488 (Inherited: 0x400)
struct USolarWeaponScopeSlot : USolarUserWidget {
	struct UImage* Img_Quality_BG; // 0x400(0x08)
	struct UImage* Img_Scope; // 0x408(0x08)
	struct UCanvasPanel* Panel_Scope_OtherSelected; // 0x410(0x08)
	struct UCanvasPanel* Panel_Scope_Selected; // 0x418(0x08)
	struct UButton* Btn_Scope; // 0x420(0x08)
	struct TMap<enum class EWeaponPartType, struct FSoftObjectPath> DefaultWeaponPartIconMaps; // 0x428(0x50)
	char pad_478[0x10]; // 0x478(0x10)

	void OnPressedQuickScopeButton(); // Function Solarland.SolarWeaponScopeSlot.OnPressedQuickScopeButton // (Final|Native|Private) // @ game+0x29a0f10
};

// Class Solarland.WidgetActiveControl
// Size: 0x500 (Inherited: 0x400)
struct UWidgetActiveControl : USolarUserWidget {
	struct UNamedSlot* ControlledWidget; // 0x400(0x08)
	struct UImage* Progress_Grid; // 0x408(0x08)
	struct UImage* BT_CD_Prompt; // 0x410(0x08)
	struct UImage* BT_Mask_Grid_Forbidden; // 0x418(0x08)
	struct UImage* BT_Icon_Grid_Forbidden; // 0x420(0x08)
	struct USolarTextBlock* BT_Txt_CD; // 0x428(0x08)
	struct UGaugeImage* Progress_CD_Mask; // 0x430(0x08)
	struct UCanvasPanel* LightAngel; // 0x438(0x08)
	struct UImage* img_Quick; // 0x440(0x08)
	struct UWidgetAnimation* Anim_BT_CD_Prompt; // 0x448(0x08)
	struct UWidgetAnimation* Anim_Loop_Lightning; // 0x450(0x08)
	struct UWidgetAnimation* Anim_Loop_Flicker; // 0x458(0x08)
	struct UMaterialInterface* GridSource; // 0x460(0x08)
	struct UObject* CDMaskSource; // 0x468(0x08)
	struct UMaterialInterface* PromptSource; // 0x470(0x08)
	struct UObject* ForbiddenIconSource; // 0x478(0x08)
	struct UObject* ForbiddenMaskSource; // 0x480(0x08)
	bool bUseEnableForActive; // 0x488(0x01)
	char pad_489[0x3]; // 0x489(0x03)
	int32_t GridNumber; // 0x48c(0x04)
	int32_t CDTimerPrecision; // 0x490(0x04)
	float GridConsumedEffectSpeed; // 0x494(0x04)
	struct FLinearColor CDTxtColorSpeedup; // 0x498(0x10)
	struct FLinearColor CDTxtColorNormal; // 0x4a8(0x10)
	struct UTextBlock* GridCountTextBlockCache; // 0x4b8(0x08)
	struct UCanvasPanel* PanelDisableCache; // 0x4c0(0x08)
	char pad_4C8[0x10]; // 0x4c8(0x10)
	bool bWidgetActive; // 0x4d8(0x01)
	char pad_4D9[0x7]; // 0x4d9(0x07)
	struct UMaterialInstanceDynamic* GridMaterial; // 0x4e0(0x08)
	bool bNeedUpdateGrid; // 0x4e8(0x01)
	bool bNeedUpdateGridEffect; // 0x4e9(0x01)
	char pad_4EA[0x2]; // 0x4ea(0x02)
	float GridPercent; // 0x4ec(0x04)
	float GridEffectPercent; // 0x4f0(0x04)
	bool bGridVisualForbidden; // 0x4f4(0x01)
	bool bNeedUpdateCD; // 0x4f5(0x01)
	char pad_4F6[0x2]; // 0x4f6(0x02)
	float CDPercent; // 0x4f8(0x04)
	bool bCDVisualForbidden; // 0x4fc(0x01)
	bool bPlayingCDAnim; // 0x4fd(0x01)
	char pad_4FE[0x2]; // 0x4fe(0x02)

	void UpdateGridPercent(float Percent); // Function Solarland.WidgetActiveControl.UpdateGridPercent // (Final|Native|Protected|BlueprintCallable) // @ game+0x29f6ed0
	void UpdateGridEffectPercent(float Percent); // Function Solarland.WidgetActiveControl.UpdateGridEffectPercent // (Final|Native|Protected|BlueprintCallable) // @ game+0x29f6e50
	void UpdateCDText(struct FString Value); // Function Solarland.WidgetActiveControl.UpdateCDText // (Final|Native|Public|BlueprintCallable) // @ game+0x29f6d20
	void UpdateCDFloatAsText(float Value); // Function Solarland.WidgetActiveControl.UpdateCDFloatAsText // (Final|Native|Protected|BlueprintCallable) // @ game+0x29f6ca0
	void UpdateCD(float Percent); // Function Solarland.WidgetActiveControl.UpdateCD // (Final|Native|Protected|BlueprintCallable) // @ game+0x29f6c20
	void StopUpdateGrid(); // Function Solarland.WidgetActiveControl.StopUpdateGrid // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1ad6d00
	void StopCD(bool bPlayPrompt); // Function Solarland.WidgetActiveControl.StopCD // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x29f6b30
	void StartUpdateGrid(); // Function Solarland.WidgetActiveControl.StartUpdateGrid // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1ad70a0
	void StartCD(); // Function Solarland.WidgetActiveControl.StartCD // (Final|Native|Public|BlueprintCallable) // @ game+0x29f6b10
	bool ShouldWidgetActive(); // Function Solarland.WidgetActiveControl.ShouldWidgetActive // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x29f6a30
	bool ShouldVisualForbiddenNew(); // Function Solarland.WidgetActiveControl.ShouldVisualForbiddenNew // (Final|Native|Public|BlueprintCallable) // @ game+0x29f6a00
	bool ShouldVisualForbidden(); // Function Solarland.WidgetActiveControl.ShouldVisualForbidden // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x29f69d0
	void SetTotalGrid(int32_t NewGridNum); // Function Solarland.WidgetActiveControl.SetTotalGrid // (Final|Native|Public|BlueprintCallable) // @ game+0x29f6940
	void SetGridNewPercent(float RestPercent); // Function Solarland.WidgetActiveControl.SetGridNewPercent // (Final|Native|Public|BlueprintCallable) // @ game+0x29f67a0
	void SetGridForbiddenVisualNew(bool bForbidden); // Function Solarland.WidgetActiveControl.SetGridForbiddenVisualNew // (Native|Protected|BlueprintCallable) // @ game+0x29f6710
	void SetGridForbiddenVisual(bool bForbidden); // Function Solarland.WidgetActiveControl.SetGridForbiddenVisual // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x26bd770
	void SetGridCountText(int32_t InCount); // Function Solarland.WidgetActiveControl.SetGridCountText // (Final|Native|Public|BlueprintCallable) // @ game+0x29f6680
	void SetCoolingDownVisual(bool bInCD); // Function Solarland.WidgetActiveControl.SetCoolingDownVisual // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x29b0c80
	void SetControlledWidgetActive(bool bActive); // Function Solarland.WidgetActiveControl.SetControlledWidgetActive // (Final|Native|Public|BlueprintCallable) // @ game+0x29f6560
	void PlayCooledDownAnim(); // Function Solarland.WidgetActiveControl.PlayCooledDownAnim // (Final|Native|Protected|BlueprintCallable) // @ game+0x29f5ee0
	bool IsEnoughOneGrid(); // Function Solarland.WidgetActiveControl.IsEnoughOneGrid // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x29f5be0
	bool IsCooledDown(); // Function Solarland.WidgetActiveControl.IsCooledDown // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x29f5ae0
	void HideCooledDownPrompt(); // Function Solarland.WidgetActiveControl.HideCooledDownPrompt // (Final|Native|Private) // @ game+0x29f5990
	struct UTextBlock* GetGridCountTextBlock(); // Function Solarland.WidgetActiveControl.GetGridCountTextBlock // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct UCanvasPanel* GetDisablePanel(); // Function Solarland.WidgetActiveControl.GetDisablePanel // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ForceStopCD(); // Function Solarland.WidgetActiveControl.ForceStopCD // (Final|Native|Public|BlueprintCallable) // @ game+0x29f5120
};

// Class Solarland.SolarWeaponSkillWidget
// Size: 0x528 (Inherited: 0x500)
struct USolarWeaponSkillWidget : UWidgetActiveControl {
	struct UWidgetAnimation* Anim_EMP_Exit; // 0x500(0x08)
	struct UWidgetAnimation* Anim_EMP_Enter; // 0x508(0x08)
	struct UImage* img_SkillBg; // 0x510(0x08)
	struct USolarTextBlock* Txt_SkillType; // 0x518(0x08)
	struct UOverlay* Panel_Skill; // 0x520(0x08)
};

// Class Solarland.SolarWeaponSlotWidgetMobile
// Size: 0x5d0 (Inherited: 0x400)
struct USolarWeaponSlotWidgetMobile : USolarUserWidget {
	int32_t SlotID; // 0x400(0x04)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> SlotOwnerPlayerWeapon; // 0x404(0x08)
	char pad_40C[0xc]; // 0x40c(0x0c)
	bool bHideWidgetWhenNoWeapon; // 0x418(0x01)
	char pad_419[0x7]; // 0x419(0x07)
	struct TArray<struct UUIWeaponPartWidget*> WeaponPartsWidgets; // 0x420(0x10)
	int32_t LevelTextLocalizationID; // 0x430(0x04)
	int32_t IncreaseDamageTextLocalizationID; // 0x434(0x04)
	int32_t LevelUpDamageTextLocalizationID; // 0x438(0x04)
	struct FLinearColor AmmoNotEnoughColor; // 0x43c(0x10)
	struct FLinearColor ExtraAmmoColor; // 0x44c(0x10)
	bool bOnEnterSpectateBindEvent; // 0x45c(0x01)
	char pad_45D[0x3]; // 0x45d(0x03)
	struct UWidgetAnimation* FX_Weapon_Reload_Progress; // 0x460(0x08)
	struct UWidgetAnimation* FX_Weapon_Reload; // 0x468(0x08)
	struct UWidgetAnimation* FX_Weapon_AmmoEmpty; // 0x470(0x08)
	struct UCheckBox* CheckBox_WP; // 0x478(0x08)
	struct UTextBlock* Text_WP_Bullte; // 0x480(0x08)
	struct UTextBlock* Text_WP_Clip; // 0x488(0x08)
	struct UImage* ShootWeaponIcon; // 0x490(0x08)
	struct UImage* ItemWeaponIcon; // 0x498(0x08)
	struct UCanvasPanel* Panel_WP_Unarm; // 0x4a0(0x08)
	struct UHorizontalBox* HorizontalBox_WP_Clip; // 0x4a8(0x08)
	struct UWidget* Panel_Part; // 0x4b0(0x08)
	struct UImage* Img_Bg; // 0x4b8(0x08)
	struct UOverlay* Overlay_Bg; // 0x4c0(0x08)
	struct UImage* img_NotSelect; // 0x4c8(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part; // 0x4d0(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_2; // 0x4d8(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_3; // 0x4e0(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_4; // 0x4e8(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_5; // 0x4f0(0x08)
	struct USolarTextBlock* Txt_SkillCD; // 0x4f8(0x08)
	struct UWidgetAnimation* LevelUp_Anim; // 0x500(0x08)
	struct UImage* Img_Frame_VX; // 0x508(0x08)
	struct UImage* Img_BG_Light; // 0x510(0x08)
	struct UImage* Img_BG_Light_2; // 0x518(0x08)
	struct UImage* MI_Frame_VX; // 0x520(0x08)
	struct UCanvasPanel* Panel_DMG; // 0x528(0x08)
	struct USolarTextBlock* Txt_WeaponDMG; // 0x530(0x08)
	struct UImage* IMG_DMG_BG_00; // 0x538(0x08)
	struct UImage* IMG_DMG_BG_01; // 0x540(0x08)
	struct UImage* IMG_DMG_BG_02; // 0x548(0x08)
	struct USolarTextBlock* Txt_Upgrade; // 0x550(0x08)
	struct UImage* FX_ReLoadA_001; // 0x558(0x08)
	struct UProgressBar* ProgressBar_128; // 0x560(0x08)
	struct UCanvasPanel* WP_Bullet; // 0x568(0x08)
	struct UScaleBox* ShootWeaponPanel; // 0x570(0x08)
	struct UScaleBox* ItemWeaponPanel; // 0x578(0x08)
	struct UImage* img_Bg_Border; // 0x580(0x08)
	struct UOverlay* Overlay_Weapon; // 0x588(0x08)
	struct UCanvasPanel* Panel_Bullet; // 0x590(0x08)
	float PartEffectTipDuration; // 0x598(0x04)
	char pad_59C[0x4]; // 0x59c(0x04)
	struct USolarWeaponPartEffectTipWidget* UI_Weapon_Update; // 0x5a0(0x08)
	struct UCanvasPanel* PartEffectPanelUp; // 0x5a8(0x08)
	struct UCanvasPanel* PartEffectPanelDown; // 0x5b0(0x08)
	struct TArray<struct FSolarWeaponPartEffectDesc> PartEffectTipArray; // 0x5b8(0x10)
	struct TWeakObjectPtr<struct USolarAdapterWidget> KeyboardTip; // 0x5c8(0x08)

	void SetWeaponSlotPartsVisibility(bool InbVisible); // Function Solarland.SolarWeaponSlotWidgetMobile.SetWeaponSlotPartsVisibility // (Final|Native|Protected|BlueprintCallable) // @ game+0x29a1490
	void SetWeaponSlotAmmoCount(); // Function Solarland.SolarWeaponSlotWidgetMobile.SetWeaponSlotAmmoCount // (Final|Native|Protected|BlueprintCallable) // @ game+0x29a1470
	void OnWeaponUpdateAmmoCount(int32_t InFireModeType, struct ASolarWeapon* InWeapon); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponUpdateAmmoCount // (Final|Native|Public) // @ game+0x29a1070
	void OnWeaponQuitReload(bool bInSuccess); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponQuitReload // (Native|Event|Public|BlueprintEvent) // @ game+0x29a0fe0
	void OnWeaponInsufficientAmmo(); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponInsufficientAmmo // (Native|Event|Public|BlueprintEvent) // @ game+0x1ad6e00
	void OnToggleCheckedState(bool InbChecked); // Function Solarland.SolarWeaponSlotWidgetMobile.OnToggleCheckedState // (Final|Native|Protected) // @ game+0x29a0f50
	void OnSpectateModeEntered(); // Function Solarland.SolarWeaponSlotWidgetMobile.OnSpectateModeEntered // (Final|Native|Protected) // @ game+0x29a0f30
	void OnCharacterSet(struct ASolarCharacter* InCharacter); // Function Solarland.SolarWeaponSlotWidgetMobile.OnCharacterSet // (Final|Native|Protected) // @ game+0x29a0e80
	void OnCharacterLevelUp(int32_t InNewLevel, int32_t InOldLevel); // Function Solarland.SolarWeaponSlotWidgetMobile.OnCharacterLevelUp // (Final|Native|Protected) // @ game+0x29a0db0
	void OnCharacterLevelChanged(int32_t InNewLevel); // Function Solarland.SolarWeaponSlotWidgetMobile.OnCharacterLevelChanged // (Final|Native|Protected) // @ game+0x29a0d20
	void K2_OnSetWeapon(struct ASolarPlayerWeapon* InPlayerWeapon); // Function Solarland.SolarWeaponSlotWidgetMobile.K2_OnSetWeapon // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnCharacterSet(struct ASolarCharacter* InCharacter); // Function Solarland.SolarWeaponSlotWidgetMobile.K2_OnCharacterSet // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnCharacterLevelUp(int32_t InLevel); // Function Solarland.SolarWeaponSlotWidgetMobile.K2_OnCharacterLevelUp // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnCharacterLevelChanged(int32_t InNewLevel); // Function Solarland.SolarWeaponSlotWidgetMobile.K2_OnCharacterLevelChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnActiveWeapon(bool bInActive); // Function Solarland.SolarWeaponSlotWidgetMobile.K2_OnActiveWeapon // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	bool IsDisplayCompleteInfo(); // Function Solarland.SolarWeaponSlotWidgetMobile.IsDisplayCompleteInfo // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x29a0cf0
	struct FText GetWeaponName(); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponName // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x29a0c50
	int32_t GetWeaponLevel(); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponLevel // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x29a0c20
	struct UTexture2D* GetWeaponIcon(); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponIcon // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x29a0bf0
	bool GetWeaponAmmoData(int32_t& OutClipAmmoCount, int32_t& OutExtraAmmoCount, int32_t& OutSpareAmmoCount); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponAmmoData // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x29a0ab0
	struct FString GetLocalizationDataByID(int32_t InLocalizationID); // Function Solarland.SolarWeaponSlotWidgetMobile.GetLocalizationDataByID // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x29a08c0
	void GetLevelText(int32_t InLocalizationLevelID, struct FString InReplaceText, struct FString& OutHeadText, struct FString& OutTailText); // Function Solarland.SolarWeaponSlotWidgetMobile.GetLevelText // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x29a06d0
	int32_t GetDamageBonus(); // Function Solarland.SolarWeaponSlotWidgetMobile.GetDamageBonus // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x29a06a0
};

// Class Solarland.SolarWeaponSlotWidgetPC
// Size: 0x5c8 (Inherited: 0x400)
struct USolarWeaponSlotWidgetPC : USolarUserWidget {
	struct FString KeyActionName; // 0x400(0x10)
	struct UImage* Img_WP; // 0x410(0x08)
	struct USolarComponentKeyWidget* UI_Component_Keyboard; // 0x418(0x08)
	struct UCanvasPanel* HorizontalBox_WP_Clip; // 0x420(0x08)
	struct UTextBlock* Text_WP_Clip; // 0x428(0x08)
	struct UTextBlock* Text_WP_Clip_2; // 0x430(0x08)
	struct UHorizontalBox* HorizontalBox_Lv; // 0x438(0x08)
	struct UTextBlock* Txt_Lvl_Head; // 0x440(0x08)
	struct UTextBlock* Txt_Level; // 0x448(0x08)
	struct UTextBlock* Txt_Lvl_Tail; // 0x450(0x08)
	struct USolarTextBlock* Txt_FireMode; // 0x458(0x08)
	struct UCanvasPanel* Panel_Part; // 0x460(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_2; // 0x468(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_3; // 0x470(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_4; // 0x478(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_5; // 0x480(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_6; // 0x488(0x08)
	struct UCanvasPanel* Panel_WP_Unarm; // 0x490(0x08)
	struct UImage* img_Bg_Border; // 0x498(0x08)
	struct UImage* img_Bg_Black; // 0x4a0(0x08)
	struct UImage* img_Bg_Gradient; // 0x4a8(0x08)
	struct UImage* img_NotSelect; // 0x4b0(0x08)
	struct UOverlay* Overlay_Bg; // 0x4b8(0x08)
	int32_t LevelLocalizationID; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)
	struct FString LevelVariate; // 0x4c8(0x10)
	struct TMap<enum class EShootingOpt, int32_t> ShootModeLocalizationIDMap; // 0x4d8(0x50)
	struct TArray<struct FLinearColor> WeaponQualityColors; // 0x528(0x10)
	struct TArray<struct FLinearColor> WeaponBGQualityColors; // 0x538(0x10)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> SlotWeapon; // 0x548(0x08)
	char pad_550[0x10]; // 0x550(0x10)
	struct FTimerHandle LoadWeaponIconTimerHandle; // 0x560(0x08)
	struct TArray<struct UUIWeaponPartWidget*> WeaponPartWidgets; // 0x568(0x10)
	struct TMap<int32_t, struct FSolarTablesData_ItemWeaponParts> WeaponPartsItemTableCache; // 0x578(0x50)

	void SetWeaponSlot(struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarWeaponSlotWidgetPC.SetWeaponSlot // (Final|Native|Public) // @ game+0x29a44f0
	void OnUpgradeWeapon(int32_t InLevel, uint32_t InWeaponUniqueID); // Function Solarland.SolarWeaponSlotWidgetPC.OnUpgradeWeapon // (Final|Native|Private) // @ game+0x29a3e10
	void OnUpdateAmmo(int32_t InFireModeType, struct ASolarWeapon* InWeapon); // Function Solarland.SolarWeaponSlotWidgetPC.OnUpdateAmmo // (Final|Native|Private) // @ game+0x29a3d40
	void ActiveWeaponSlot(bool InbActive); // Function Solarland.SolarWeaponSlotWidgetPC.ActiveWeaponSlot // (Final|Native|Public) // @ game+0x29a3b70
};

// Class Solarland.SolarWeaponSubsystem
// Size: 0x238 (Inherited: 0x30)
struct USolarWeaponSubsystem : UWorldSubsystem {
	char pad_30[0x168]; // 0x30(0x168)
	struct TMap<struct UObject*, struct ASolarWeaponProjectileSpline*> CacheSolarWeaponProjectileSplineMap; // 0x198(0x50)
	struct TMap<int32_t, struct FSolarTablesData_ItemWeaponParts> WeaponPartsItemTableCache; // 0x1e8(0x50)

	bool DiscardWeaponFromBackpack(struct ASolarWeapon* InPendingWeapon); // Function Solarland.SolarWeaponSubsystem.DiscardWeaponFromBackpack // (Final|Native|Public|BlueprintCallable) // @ game+0x29a3c60
};

// Class Solarland.SolarWheeledVehicleMovement
// Size: 0x910 (Inherited: 0x138)
struct USolarWheeledVehicleMovement : UPawnMovementComponent {
	float LowFrameRateDeltaTime; // 0x138(0x04)
	float MinLocationDiffForSuspensionTrace; // 0x13c(0x04)
	float Mass; // 0x140(0x04)
	float CenterOfMassOffsetOnZ; // 0x144(0x04)
	float CenterOfMassOffsetOnX; // 0x148(0x04)
	float SuspensionClampRatioInLowFrame; // 0x14c(0x04)
	struct FRuntimeFloatCurve AccelerationCurve; // 0x150(0x88)
	struct FRuntimeFloatCurve AccelerationCurveReverse; // 0x1d8(0x88)
	int32_t ReverseEvaluationAccuracy; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
	struct FRuntimeFloatCurve SteerAngleLimit; // 0x268(0x88)
	struct FRuntimeFloatCurve SteeringResetSpeed; // 0x2f0(0x88)
	struct FRuntimeFloatCurve SteeringSpeed; // 0x378(0x88)
	struct FRuntimeFloatCurve SteeringFraction; // 0x400(0x88)
	struct FRuntimeFloatCurve SteerAngleMutiplier; // 0x488(0x88)
	float LowSteeringSpeed; // 0x510(0x04)
	float LowSteeringSpeedAccelerationMultiplier; // 0x514(0x04)
	float LowSteeringSpeedAngleLimitMultiplier; // 0x518(0x04)
	float LowSpeedSteeringThresholdOnHorizontalInput; // 0x51c(0x04)
	float FlightStabilizationDamping; // 0x520(0x04)
	float LateralFrictionWhenOnlySteeringWheelsOnGround; // 0x524(0x04)
	struct TArray<struct FWheelData> Wheels; // 0x528(0x10)
	float DepenetrationForceMultiplierForVelocityUp; // 0x538(0x04)
	float RotationMinAngle; // 0x53c(0x04)
	float MaxPitchRotation; // 0x540(0x04)
	float MaxRollRotation; // 0x544(0x04)
	float RotationTimeLimit; // 0x548(0x04)
	bool bOpenTimeLimit; // 0x54c(0x01)
	char pad_54D[0x3]; // 0x54d(0x03)
	float PitchTorqueInDegree; // 0x550(0x04)
	float RollTorqueInDegree; // 0x554(0x04)
	float TorqueForUpsideDown; // 0x558(0x04)
	float MaxAngularVelocityInAir; // 0x55c(0x04)
	float TorqueLerpAcceleration; // 0x560(0x04)
	float BalanceAngularVelocityWheelsOnGround; // 0x564(0x04)
	struct UCurveFloat* DustEffectScaleCurve; // 0x568(0x08)
	struct TMap<enum class EPhysicalSurface, struct TSoftObjectPtr<UParticleSystem>> BrokenWheelDustEffect; // 0x570(0x50)
	float WheelDecelerationInBrakeLock; // 0x5c0(0x04)
	float WheelLerpSpeedInSlip; // 0x5c4(0x04)
	float GravityAcceleration; // 0x5c8(0x04)
	float GravityAccelerationInAir; // 0x5cc(0x04)
	float MinHeightForGravityAccelerationInAir; // 0x5d0(0x04)
	float MaxHeightForGravityAccelerationInAir; // 0x5d4(0x04)
	float GravityTransitionDuration; // 0x5d8(0x04)
	float MaxStaticDegree; // 0x5dc(0x04)
	struct FRuntimeFloatCurve GravityMultiplierForAcceleration; // 0x5e0(0x88)
	float DecelerationUnderWater; // 0x668(0x04)
	bool bAutoSteeringEnabled; // 0x66c(0x01)
	char pad_66D[0x3]; // 0x66d(0x03)
	float AutoSteeringThresholdTime; // 0x670(0x04)
	float AutoSteeringSpeedThreshold; // 0x674(0x04)
	float AutoSteeringTraceRadius; // 0x678(0x04)
	struct FVector LeftAutoSteeringTraceStart; // 0x67c(0x0c)
	struct FVector RightAutoSteeringTraceStart; // 0x688(0x0c)
	float LeftToRightTangentDegree; // 0x694(0x04)
	float AutoSteeringAngleLimit; // 0x698(0x04)
	float AutoSteeringSpeed; // 0x69c(0x04)
	float AutoSteeringResetSpeed; // 0x6a0(0x04)
	float AutoSteeringLimitInputY; // 0x6a4(0x04)
	struct UWheeledVehicleInputDataAsset* InputData; // 0x6a8(0x08)
	float SteeringLimitMultiplierInDrift; // 0x6b0(0x04)
	float AccelerationMultiplierInDrift; // 0x6b4(0x04)
	float AccelerationInDriftLerpSpeed; // 0x6b8(0x04)
	float AccelerationOutDriftLerpSpeed; // 0x6bc(0x04)
	float MinDriftSpeed; // 0x6c0(0x04)
	float DriftCompensationRate; // 0x6c4(0x04)
	float DriftCancelTimeWithoutInput; // 0x6c8(0x04)
	char pad_6CC[0x4]; // 0x6cc(0x04)
	struct TMap<enum class EPhysicalSurface, struct TSoftObjectPtr<UParticleSystem>> DriftParticles; // 0x6d0(0x50)
	float TimerForAntiStuck; // 0x720(0x04)
	float StuckAcceleration; // 0x724(0x04)
	float StuckAccelerationLerpSpeed; // 0x728(0x04)
	float MinAntiRollThreshold; // 0x72c(0x04)
	float MaxAntiRollThreshold; // 0x730(0x04)
	char pad_734[0x4]; // 0x734(0x04)
	struct TArray<struct FGearSetting> ForwardGears; // 0x738(0x10)
	float ReverseRpm; // 0x748(0x04)
	float SlipRpmMultiplier; // 0x74c(0x04)
	float RpmSlipSpeed; // 0x750(0x04)
	bool bCanInRPMRedLine; // 0x754(0x01)
	char pad_755[0x3]; // 0x755(0x03)
	float BurnoutDelayTime; // 0x758(0x04)
	float BurnoutSoundRatio; // 0x75c(0x04)
	char pad_760[0x168]; // 0x760(0x168)
	struct ASolarVehiclePawn* VehiclePawn; // 0x8c8(0x08)
	struct USkeletalMeshComponent* VehicleMesh; // 0x8d0(0x08)
	float InputVecXForRotateInAir; // 0x8d8(0x04)
	float InputVecYForRotateInAir; // 0x8dc(0x04)
	float BalanceRotateSpendTime; // 0x8e0(0x04)
	float InputRotateSpendTime; // 0x8e4(0x04)
	struct TArray<char> InAirWheelsIndex; // 0x8e8(0x10)
	char pad_8F8[0x10]; // 0x8f8(0x10)
	struct UAkComponent* AkAudioComponent; // 0x908(0x08)

	void SetIsDrift(bool bInDrift, bool bResetDrift); // Function Solarland.SolarWheeledVehicleMovement.SetIsDrift // (Final|Native|Public|BlueprintCallable) // @ game+0x29a4420
	void SetIsBurnout(bool bInBurnout); // Function Solarland.SolarWheeledVehicleMovement.SetIsBurnout // (Final|Native|Public) // @ game+0x29a4390
	void SetDriveType(enum class EWheeledVehicleDriveUserType InType); // Function Solarland.SolarWheeledVehicleMovement.SetDriveType // (Final|Native|Static|Public) // @ game+0x29a4320
	void SetCanAutoSteering(bool bCan); // Function Solarland.SolarWheeledVehicleMovement.SetCanAutoSteering // (Final|Native|Static|Public) // @ game+0x29a42a0
	void SetCanAdjustInAir(bool bCan); // Function Solarland.SolarWheeledVehicleMovement.SetCanAdjustInAir // (Final|Native|Static|Public) // @ game+0x29a4220
	void OnVehicleSkinSoundUpdate(struct USolarVehicleSoundDataAsset* OldVehicleSoundDataAsset, struct USolarVehicleSoundDataAsset* NewVehicleSoundDataAsset); // Function Solarland.SolarWheeledVehicleMovement.OnVehicleSkinSoundUpdate // (Final|Native|Protected) // @ game+0x29a40c0
	void OnVehicleHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarWheeledVehicleMovement.OnVehicleHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x29a3ee0
};

// Class Solarland.SolarWheeledVehicleStencilAnimInstance
// Size: 0x350 (Inherited: 0x270)
struct USolarWheeledVehicleStencilAnimInstance : UAnimInstance {
	struct FVector FLWheelBoneScale; // 0x268(0x0c)
	struct FVector FRWheelBoneScale; // 0x274(0x0c)
	struct FVector MLWheelBoneScale; // 0x280(0x0c)
	struct FVector MRWheelBoneScale; // 0x28c(0x0c)
	struct FVector BLWheelBoneScale; // 0x298(0x0c)
	struct FVector BRWheelBoneScale; // 0x2a4(0x0c)
	struct FVector FLWheelBoneLocation; // 0x2b0(0x0c)
	struct FVector FRWheelBoneLocation; // 0x2bc(0x0c)
	struct FVector MLWheelBoneLocation; // 0x2c8(0x0c)
	struct FVector MRWheelBoneLocation; // 0x2d4(0x0c)
	struct FVector BLWheelBoneLocation; // 0x2e0(0x0c)
	struct FVector BRWheelBoneLocation; // 0x2ec(0x0c)
	struct FRotator FLWheelBoneRotation; // 0x2f8(0x0c)
	struct FRotator FRWheelBoneRotation; // 0x304(0x0c)
	struct FRotator MLWheelBoneRotation; // 0x310(0x0c)
	struct FRotator MRWheelBoneRotation; // 0x31c(0x0c)
	struct FRotator BLWheelBoneRotation; // 0x328(0x0c)
	struct FRotator BRWheelBoneRotation; // 0x334(0x0c)
	struct TWeakObjectPtr<struct USolarWheeledVehicleAnimInstance> VehicleAnim; // 0x340(0x08)
};

// Class Solarland.SolarWidgetExitCallbackProxy
// Size: 0x40 (Inherited: 0x28)
struct USolarWidgetExitCallbackProxy : UObject {
	char pad_28[0x18]; // 0x28(0x18)

	void OnAnimationFinished(); // Function Solarland.SolarWidgetExitCallbackProxy.OnAnimationFinished // (Final|Native|Protected) // @ game+0x29a9cc0
};

// Class Solarland.SolarWorldSettings
// Size: 0x490 (Inherited: 0x420)
struct ASolarWorldSettings : AWorldSettings {
	int32_t MapID; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)
	struct FSoftObjectPath PreloadAssets; // 0x428(0x18)
	bool bAsyncPreload; // 0x440(0x01)
	bool bHoldAllMips; // 0x441(0x01)
	char pad_442[0x6]; // 0x442(0x06)
	struct USolarPostProcessSettingItem* PostProcessItem; // 0x448(0x08)
	int32_t CurrentActiveColorThemeIndex; // 0x450(0x04)
	int32_t SolarMapTypeValue; // 0x454(0x04)
	bool MapEnableLowMemoryGraphOpt; // 0x458(0x01)
	char pad_459[0x7]; // 0x459(0x07)
	struct FTransform SpectatorPawnStartPoint; // 0x460(0x30)
};

// Class Solarland.SolarZiplineObj
// Size: 0x2f0 (Inherited: 0x228)
struct ASolarZiplineObj : AActor {
	struct FGameplayTag ZipTriggerTag; // 0x228(0x08)
	struct FGameplayTag ZippingStatusTag; // 0x230(0x08)
	struct FName ZipActionName; // 0x238(0x08)
	struct FZiplineObjData ZiplineObjData; // 0x240(0x74)
	char pad_2B4[0x4]; // 0x2b4(0x04)
	struct UBoxComponent* ASideCollisionComp; // 0x2b8(0x08)
	struct UBoxComponent* BSideCollisionComp; // 0x2c0(0x08)
	struct UBoxComponent* CableCollisionComp; // 0x2c8(0x08)
	struct TWeakObjectPtr<struct ASolarCharacter> InstigateCharacter; // 0x2d0(0x08)
	struct TArray<struct ASolarCharacter*> SlidingCharacters; // 0x2d8(0x10)
	char pad_2E8[0x4]; // 0x2e8(0x04)
	enum class EZiplineSide BeginningSide; // 0x2ec(0x01)
	char pad_2ED[0x3]; // 0x2ed(0x03)

	void OnRep_SlidingCharacters(); // Function Solarland.SolarZiplineObj.OnRep_SlidingCharacters // (Final|Native|Protected) // @ game+0x9043b0
	void OnEndOverlap(struct AActor* OtherActor, enum class EZiplineSide InSide); // Function Solarland.SolarZiplineObj.OnEndOverlap // (Final|Native|Protected) // @ game+0x29aa4b0
	void OnCableEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarZiplineObj.OnCableEndOverlap // (Final|Native|Protected) // @ game+0x29aa350
	void OnCableBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarZiplineObj.OnCableBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x29aa130
	void OnBSideEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarZiplineObj.OnBSideEndOverlap // (Final|Native|Protected) // @ game+0x29a9f00
	void OnBSideBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarZiplineObj.OnBSideBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x29a9ce0
	void OnBeginOverlap(struct AActor* OtherActor, enum class EZiplineSide InSide); // Function Solarland.SolarZiplineObj.OnBeginOverlap // (Final|Native|Protected) // @ game+0x29aa060
	void OnASideEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarZiplineObj.OnASideEndOverlap // (Final|Native|Protected) // @ game+0x29a9b60
	void OnASideBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarZiplineObj.OnASideBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x29a9940
	void K2_OnZiplineEndOverlap(struct ASolarCharacter* InCharacter); // Function Solarland.SolarZiplineObj.K2_OnZiplineEndOverlap // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnZiplineBeginOverlap(struct ASolarCharacter* InCharacter); // Function Solarland.SolarZiplineObj.K2_OnZiplineBeginOverlap // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnGoZip(struct ASolarCharacter* InCharacter); // Function Solarland.SolarZiplineObj.K2_OnGoZip // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void GoZip(); // Function Solarland.SolarZiplineObj.GoZip // (Final|Native|Protected) // @ game+0x29a9580
};

// Class Solarland.SoundGroupSubsystem
// Size: 0x90 (Inherited: 0x30)
struct USoundGroupSubsystem : UWorldSubsystem {
	struct USoundGroupSettings* SoundGroupSettings; // 0x30(0x08)
	struct USoundPoolSettings* SoundPoolSettings; // 0x38(0x08)
	char pad_40[0x50]; // 0x40(0x50)

	bool K2_PlaySoundPoolByAkComponent(struct UAkComponent* AkComponent, struct FName SoundPoolName, bool bResetPoolState); // Function Solarland.SoundGroupSubsystem.K2_PlaySoundPoolByAkComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x29a9840
	bool K2_PlaySoundGroupByAkObject(struct USolarAkGameObject* AkObject, struct FName SoundGroupName, enum class ESoundGroupPlayContextEnum Context, struct FName SoundGroupCategory); // Function Solarland.SoundGroupSubsystem.K2_PlaySoundGroupByAkObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x29a96f0
	bool K2_PlaySoundGroupByAkComponent(struct UAkComponent* AkComponent, struct FName SoundGroupName, enum class ESoundGroupPlayContextEnum Context, struct FName SoundGroupCategory); // Function Solarland.SoundGroupSubsystem.K2_PlaySoundGroupByAkComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x29a95a0
};

// Class Solarland.SoundGroupWwiseParamsObject
// Size: 0x48 (Inherited: 0x28)
struct USoundGroupWwiseParamsObject : UObject {
	struct FSoundGroupWwiseParams WwiseParams; // 0x28(0x20)
};

// Class Solarland.SoundGroupBase
// Size: 0x28 (Inherited: 0x28)
struct USoundGroupBase : UObject {
};

// Class Solarland.SoundGroupShareParamsBase
// Size: 0x30 (Inherited: 0x28)
struct USoundGroupShareParamsBase : USoundGroupBase {
	struct USoundGroupWwiseParamsObject* WwiseParams; // 0x28(0x08)
};

// Class Solarland.SoundGroupSimple
// Size: 0x40 (Inherited: 0x30)
struct USoundGroupSimple : USoundGroupShareParamsBase {
	struct FString SoundEvent; // 0x30(0x10)
};

// Class Solarland.SoundGroupByTeammate
// Size: 0x60 (Inherited: 0x30)
struct USoundGroupByTeammate : USoundGroupShareParamsBase {
	struct FString SelfEvent; // 0x30(0x10)
	struct FString TeammateEvent; // 0x40(0x10)
	struct FString OtherEvent; // 0x50(0x10)
};

// Class Solarland.SoundGroupByBattle
// Size: 0x60 (Inherited: 0x30)
struct USoundGroupByBattle : USoundGroupShareParamsBase {
	struct FString IAttackOtherEvent; // 0x30(0x10)
	struct FString OtherAttackMeEvent; // 0x40(0x10)
	struct FString OtherEvent; // 0x50(0x10)
};

// Class Solarland.SoundGroupSimpleAdvanced
// Size: 0x58 (Inherited: 0x28)
struct USoundGroupSimpleAdvanced : USoundGroupBase {
	struct FSoundGroupSoundEvent SoundEvent; // 0x28(0x30)
};

// Class Solarland.SoundGroupByTeammateAdvanced
// Size: 0xb8 (Inherited: 0x28)
struct USoundGroupByTeammateAdvanced : USoundGroupBase {
	struct FSoundGroupSoundEvent SelfEvent; // 0x28(0x30)
	struct FSoundGroupSoundEvent TeammateEvent; // 0x58(0x30)
	struct FSoundGroupSoundEvent OtherEvent; // 0x88(0x30)
};

// Class Solarland.SoundGroupByBattleAdvanced
// Size: 0xb8 (Inherited: 0x28)
struct USoundGroupByBattleAdvanced : USoundGroupBase {
	struct FSoundGroupSoundEvent IAttackOtherEvent; // 0x28(0x30)
	struct FSoundGroupSoundEvent OtherAttackMeEvent; // 0x58(0x30)
	struct FSoundGroupSoundEvent OtherEvent; // 0x88(0x30)
};

// Class Solarland.SoundGroupDataAsset
// Size: 0x80 (Inherited: 0x30)
struct USoundGroupDataAsset : UDataAsset {
	struct TMap<struct FName, struct USoundGroupBase*> SoundGroupTable; // 0x30(0x50)
};

// Class Solarland.SoundGroupSettings
// Size: 0x80 (Inherited: 0x30)
struct USoundGroupSettings : UDataAsset {
	struct TMap<struct FName, struct FSoundGroupContainer> CategorizedSoundGroupContainers; // 0x30(0x50)
};

// Class Solarland.SoundPoolBase
// Size: 0x28 (Inherited: 0x28)
struct USoundPoolBase : UObject {
};

// Class Solarland.SoundPoolSimple
// Size: 0x40 (Inherited: 0x28)
struct USoundPoolSimple : USoundPoolBase {
	enum class ESoundPoolSimpleRule Rule; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct TArray<struct FString> SoundEvents; // 0x30(0x10)
};

// Class Solarland.SoundPoolDataAsset
// Size: 0x80 (Inherited: 0x30)
struct USoundPoolDataAsset : UDataAsset {
	struct TMap<struct FName, struct USoundPoolBase*> SoundPoolTable; // 0x30(0x50)
};

// Class Solarland.SoundPoolSettings
// Size: 0x40 (Inherited: 0x30)
struct USoundPoolSettings : UDataAsset {
	struct FSoundPoolContainer SoundPoolContainer; // 0x30(0x10)
};

// Class Solarland.SoundGroupSubsystemSettings
// Size: 0x88 (Inherited: 0x38)
struct USoundGroupSubsystemSettings : UDeveloperSettings {
	struct TSoftObjectPtr<USoundGroupSettings> SoundGroupSettings; // 0x38(0x28)
	struct TSoftObjectPtr<USoundPoolSettings> SoundPoolSettings; // 0x60(0x28)
};

// Class Solarland.SpatializeInfo
// Size: 0x230 (Inherited: 0x228)
struct ASpatializeInfo : AInfo {
	char pad_228[0x8]; // 0x228(0x08)
};

// Class Solarland.SpatializeInfoTrack
// Size: 0x478 (Inherited: 0x230)
struct ASpatializeInfoTrack : ASpatializeInfo {
	struct FTrackArray TrackArray; // 0x230(0x130)
	char pad_360[0x8c]; // 0x360(0x8c)
	float Timeout; // 0x3ec(0x04)
	float MinRevealDistance; // 0x3f0(0x04)
	int32_t MaxTrackNum; // 0x3f4(0x04)
	struct TMap<struct FTrackItem, struct A3DMeshWidgetTrack*> CurTrackWidgets; // 0x3f8(0x50)
	char pad_448[0x30]; // 0x448(0x30)

	void UpdateWidgets(bool bFromNetUpdate); // Function Solarland.SpatializeInfoTrack.UpdateWidgets // (Final|Native|Private) // @ game+0x29b1350
};

// Class Solarland.StripBulletContainer
// Size: 0x4b8 (Inherited: 0x470)
struct UStripBulletContainer : USolarWeaponBulletContainerWidget {
	struct UImage* AmmoGauge_BG; // 0x470(0x08)
	struct UGaugeImage* AmmoGauge; // 0x478(0x08)
	struct UImage* AmmoGauge_Empty; // 0x480(0x08)
	struct UImage* AmmoGauge_Light; // 0x488(0x08)
	struct UCanvasPanel* BulletLightSlot; // 0x490(0x08)
	struct UWidgetAnimation* Gauge_Anim; // 0x498(0x08)
	struct UWidgetAnimation* Battle_Light_Anim; // 0x4a0(0x08)
	struct UWidgetAnimation* Recharge_Empty_Anim; // 0x4a8(0x08)
	char pad_4B0[0x8]; // 0x4b0(0x08)

	void ReceiveUpdateBulletEvent(float AmmoProgress, bool bIsReloading, bool bIsFirstIn, bool bIsQuitReload); // Function Solarland.StripBulletContainer.ReceiveUpdateBulletEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x29b0d10
	void ReceiveUpdateAllBulletEvent(); // Function Solarland.StripBulletContainer.ReceiveUpdateAllBulletEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xbd9710
	void ReceiveReloadFinishEvent(bool bIsReloadSuccess); // Function Solarland.StripBulletContainer.ReceiveReloadFinishEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x29b0c80
};

// Class Solarland.SolarStrongholdNamesConfig
// Size: 0x80 (Inherited: 0x30)
struct USolarStrongholdNamesConfig : UDataAsset {
	struct TMap<struct FString, struct FVector4> NamesMap; // 0x30(0x50)
};

// Class Solarland.STutorialLevelGameMode
// Size: 0x5d8 (Inherited: 0x5d8)
struct ASTutorialLevelGameMode : ASBattleGameMode {

	void OnReady(); // Function Solarland.STutorialLevelGameMode.OnReady // (Final|Native|Private) // @ game+0x29b06f0
};

// Class Solarland.STutorialLevelGameState
// Size: 0x4c0 (Inherited: 0x4c0)
struct ASTutorialLevelGameState : ASolarGameState {
};

// Class Solarland.SubPoolOfHomeActor
// Size: 0x50 (Inherited: 0x28)
struct USubPoolOfHomeActor : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct ASolarHomeActor*> UseActors; // 0x30(0x10)
	struct TArray<struct ASolarHomeActor*> UnUseActors; // 0x40(0x10)
};

// Class Solarland.SummonItemHealPile
// Size: 0x6d0 (Inherited: 0x4b0)
struct ASummonItemHealPile : ASummonItemBase {
	struct TArray<struct FChargingInfo> ChargingInfoList; // 0x4b0(0x10)
	enum class EActorRegisterType ActorRegisterType; // 0x4c0(0x01)
	char pad_4C1[0x7]; // 0x4c1(0x07)
	struct USphereComponent* CollisionComp; // 0x4c8(0x08)
	struct UStaticMeshComponent* NormalMesh; // 0x4d0(0x08)
	float SphereRadius; // 0x4d8(0x04)
	int32_t OwnerTeam; // 0x4dc(0x04)
	struct FVector TestOverlapDestroyBoxExtent; // 0x4e0(0x0c)
	char pad_4EC[0x4]; // 0x4ec(0x04)
	struct UParticleSystemComponent* RangeLoopEffect; // 0x4f0(0x08)
	struct TArray<struct UParticleSystemComponent*> ChargeParticleEffects; // 0x4f8(0x10)
	float HealQuantity; // 0x508(0x04)
	float HealFrequency; // 0x50c(0x04)
	bool bHealAlly; // 0x510(0x01)
	char pad_511[0x7]; // 0x511(0x07)
	struct UMaterialInstanceDynamic* DynamicMatHealPile; // 0x518(0x08)
	struct FSoftObjectPath NormalMeshPath; // 0x520(0x18)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleStartPath; // 0x538(0x28)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleLoopPath; // 0x560(0x28)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleEndPath; // 0x588(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleStartPath; // 0x5b0(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleLoopPath; // 0x5d8(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleEndPath; // 0x600(0x28)
	struct FVector RangeEffectScale; // 0x628(0x0c)
	char pad_634[0x4]; // 0x634(0x04)
	struct FSoftObjectPath ChargeParticleEffectPath; // 0x638(0x18)
	struct FVector BeamStartPos; // 0x650(0x0c)
	char pad_65C[0x4]; // 0x65c(0x04)
	struct FSoftObjectPath OutlineMatPath; // 0x660(0x18)
	struct UParticleSystem* BoomEffect; // 0x678(0x08)
	float ServerCheckStateInterval; // 0x680(0x04)
	float ServerCheckStateFirstDelay; // 0x684(0x04)
	char pad_688[0x28]; // 0x688(0x28)
	struct USolarAkGameObject* SolarAkGameObject; // 0x6b0(0x08)
	char pad_6B8[0x8]; // 0x6b8(0x08)
	struct FTimerHandle ServerChargingTimerHandle; // 0x6c0(0x08)
	struct FTimerHandle ClientChargingTimerHandle; // 0x6c8(0x08)

	void TestDestroy(); // Function Solarland.SummonItemHealPile.TestDestroy // (Final|Native|Public) // @ game+0x29b1330
	void SetIsActivated(bool bActivated); // Function Solarland.SummonItemHealPile.SetIsActivated // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ServerSetHealingPile(bool bEnter, struct ASolarCharacter* ChargingCharacter); // Function Solarland.SummonItemHealPile.ServerSetHealingPile // (Final|Native|Public) // @ game+0x29b1140
	void RemoveChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SummonItemHealPile.RemoveChargeParticle // (Final|Native|Public|BlueprintCallable) // @ game+0x29b0ea0
	void RemoveAllEffects(); // Function Solarland.SummonItemHealPile.RemoveAllEffects // (Final|Native|Public|BlueprintCallable) // @ game+0x29b0e80
	void ReceiveNormalMeshLoadedEvent(); // Function Solarland.SummonItemHealPile.ReceiveNormalMeshLoadedEvent // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveChargingPileInitialize(); // Function Solarland.SummonItemHealPile.ReceiveChargingPileInitialize // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnUntrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SummonItemHealPile.OnUntrigger // (Final|Native|Public) // @ game+0x29b0aa0
	void OnTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SummonItemHealPile.OnTrigger // (Final|Native|Public|HasOutParms) // @ game+0x29b0880
	void OnRep_ChargingInfoListChanged(); // Function Solarland.SummonItemHealPile.OnRep_ChargingInfoListChanged // (Final|Native|Public) // @ game+0x29b0710
	bool IsOwnerTeammate(); // Function Solarland.SummonItemHealPile.IsOwnerTeammate // (Final|Native|Public|BlueprintCallable) // @ game+0x29b04d0
	void CreateChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SummonItemHealPile.CreateChargeParticle // (Final|Native|Public|BlueprintCallable) // @ game+0x29b0330
	void ClientRemoveChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SummonItemHealPile.ClientRemoveChargeParticle // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x29b02a0
	void ClientHealPileSound(struct ASolarCharacter* ChargingCharacter, enum class EPileHealingType HealingType); // Function Solarland.SummonItemHealPile.ClientHealPileSound // (Net|Native|Event|NetMulticast|Public|NetClient) // @ game+0x29b01d0
};

// Class Solarland.SummonItemTurretAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct USummonItemTurretAnimInstance : UAnimInstance {
	bool bReady; // 0x268(0x01)
	bool bLocking; // 0x269(0x01)
	bool bFiring; // 0x26a(0x01)
	struct FRotator AimRotate; // 0x26c(0x0c)
	char pad_27F[0x1]; // 0x27f(0x01)
};

// Class Solarland.WeaponAnimationComponent
// Size: 0x110 (Inherited: 0xb0)
struct UWeaponAnimationComponent : UActorComponent {
	struct UWeaponAnimInstance* WeaponAnimInstance; // 0xb0(0x08)
	struct ASolarWeapon* MyWeapon; // 0xb8(0x08)
	struct TMap<enum class EWeaponAnimState, struct UAnimSequence*> AnimSequenceMap; // 0xc0(0x50)

	void SRecieveProto_SwitchStateAction(struct FString paramters); // Function Solarland.WeaponAnimationComponent.SRecieveProto_SwitchStateAction // (Final|Native|Protected) // @ game+0x277cdc0
	void SetWeaponAnimState(enum class EWeaponAnimState InWeaponAnimState, float InAnimPlaySpeed); // Function Solarland.WeaponAnimationComponent.SetWeaponAnimState // (Final|Native|Public) // @ game+0x29d6860
	void PostWeaponAnimStateToSimulation(enum class EWeaponAnimState InWeaponAnimState, float InAnimPlaySpeed, bool bForceSetAnimState); // Function Solarland.WeaponAnimationComponent.PostWeaponAnimStateToSimulation // (Final|Native|Protected) // @ game+0x29d6b40
	void InternalSetWeaponAnimState(enum class EWeaponAnimState InWeaponAnimState, float InAnimPlaySpeed); // Function Solarland.WeaponAnimationComponent.InternalSetWeaponAnimState // (Final|Native|Protected) // @ game+0x29d6860
	void InitSkeletaMesh(struct USkeletalMeshComponent* Mesh); // Function Solarland.WeaponAnimationComponent.InitSkeletaMesh // (Native|Public) // @ game+0x29d67d0
	void GotoState(enum class EWeaponAnimState State, float Interval); // Function Solarland.WeaponAnimationComponent.GotoState // (Final|Native|Public) // @ game+0x29d66d0
	void CRecieveProto_SwitchStateAction(bool bAutonomous, struct FString paramters); // Function Solarland.WeaponAnimationComponent.CRecieveProto_SwitchStateAction // (Final|Native|Protected) // @ game+0x29d65b0
};

// Class Solarland.SummonWeaponAnimationComponent
// Size: 0x118 (Inherited: 0x110)
struct USummonWeaponAnimationComponent : UWeaponAnimationComponent {
	char pad_110[0x8]; // 0x110(0x08)
};

// Class Solarland.WeaponAnimInstance
// Size: 0x2d0 (Inherited: 0x270)
struct UWeaponAnimInstance : UAnimInstance {
	bool bInterrupt; // 0x268(0x01)
	bool bReload; // 0x269(0x01)
	bool bOverload; // 0x26a(0x01)
	bool bBolt; // 0x26b(0x01)
	struct TArray<struct FAnimMsgData> MsgArray; // 0x270(0x10)
	struct FAnimMsgData CurrentMsg; // 0x280(0x08)
	bool bCurrentMsgUsed; // 0x288(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	struct UAnimSequence* IdleAnim; // 0x290(0x08)
	struct UAnimSequence* FireAnim; // 0x298(0x08)
	struct UAnimSequence* AltFireAnim; // 0x2a0(0x08)
	struct UAnimSequence* ReloadAnim; // 0x2a8(0x08)
	struct UAnimSequence* OverloadAnim; // 0x2b0(0x08)
	struct UAnimSequence* OpenScopeAnim; // 0x2b8(0x08)
	struct UAnimSequence* CloseScopeAnim; // 0x2c0(0x08)
	struct UAnimSequence* BoltAnim; // 0x2c8(0x08)

	bool SwitchStateCheck(enum class EWeaponAnimState CheckState); // Function Solarland.WeaponAnimInstance.SwitchStateCheck // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29d7120
	void SetInterruptIsTrue(); // Function Solarland.WeaponAnimInstance.SetInterruptIsTrue // (Final|Native|Public) // @ game+0x29d6e90
	bool RouterNodeJudge(); // Function Solarland.WeaponAnimInstance.RouterNodeJudge // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29d6ca0
	void OnQuitState(enum class EWeaponAnimState State); // Function Solarland.WeaponAnimInstance.OnQuitState // (Final|Native|Public|BlueprintCallable) // @ game+0x29d6a30
	void OnEnterState(enum class EWeaponAnimState State); // Function Solarland.WeaponAnimInstance.OnEnterState // (Final|Native|Public|BlueprintCallable) // @ game+0x29d69b0
	void Interrupt(); // Function Solarland.WeaponAnimInstance.Interrupt // (Final|Native|Public|BlueprintCallable) // @ game+0x29d6930
	bool HasMsg(); // Function Solarland.WeaponAnimInstance.HasMsg // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29d67a0
	bool ConsumMsg(); // Function Solarland.WeaponAnimInstance.ConsumMsg // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29d66a0
	bool AddMsg(enum class EWeaponAnimState State, float Speed); // Function Solarland.WeaponAnimInstance.AddMsg // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29d64b0
};

// Class Solarland.SummonWeaponAnimInstance
// Size: 0x2e0 (Inherited: 0x2d0)
struct USummonWeaponAnimInstance : UWeaponAnimInstance {
	float ViewYaw; // 0x2d0(0x04)
	float ViewPitch; // 0x2d4(0x04)
	bool IsLocked; // 0x2d8(0x01)
	bool IsFire; // 0x2d9(0x01)
	bool bAppearCompleted; // 0x2da(0x01)
	bool bTransform; // 0x2db(0x01)
	char pad_2DC[0x4]; // 0x2dc(0x04)
};

// Class Solarland.SWarmUpGameMode
// Size: 0x790 (Inherited: 0x790)
struct ASWarmUpGameMode : ASCustomGameMode {
};

// Class Solarland.SWarmUpGameState
// Size: 0x688 (Inherited: 0x688)
struct ASWarmUpGameState : ASCustomGameState {
};

// Class Solarland.SwitchEffectStaticMeshComponent
// Size: 0x740 (Inherited: 0x600)
struct USwitchEffectStaticMeshComponent : UStaticMeshComponent {
	struct TSoftObjectPtr<UCurveVector> DissolveCurvePath; // 0x600(0x28)
	struct TSoftObjectPtr<UMaterialInterface> DissolveMatPath; // 0x628(0x28)
	struct TSoftObjectPtr<UCurveVector> FresnelCurvePath; // 0x650(0x28)
	struct TSoftObjectPtr<UMaterialInterface> FresnelMatPath; // 0x678(0x28)
	bool bIsShowSwitchParticleEffect; // 0x6a0(0x01)
	char pad_6A1[0x7]; // 0x6a1(0x07)
	struct TSoftObjectPtr<UParticleSystem> SwitchParticleEffectPath; // 0x6a8(0x28)
	char pad_6D0[0x8]; // 0x6d0(0x08)
	float SwitchEffectInterval; // 0x6d8(0x04)
	float SelfDelayShowSeconds; // 0x6dc(0x04)
	struct UStaticMeshComponent* DissovleMeshComponent; // 0x6e0(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> DissovleMaterials; // 0x6e8(0x10)
	struct UStaticMeshComponent* FresnelMeshComponent; // 0x6f8(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> FresnelMaterials; // 0x700(0x10)
	char pad_710[0x30]; // 0x710(0x30)

	void StopSwitchEffect(); // Function Solarland.SwitchEffectStaticMeshComponent.StopSwitchEffect // (Final|Native|Public) // @ game+0x29b4490
	void PlaySwitchEffect(); // Function Solarland.SwitchEffectStaticMeshComponent.PlaySwitchEffect // (Final|Native|Public) // @ game+0x29b4290
};

// Class Solarland.TalentDataAsset
// Size: 0xa0 (Inherited: 0x30)
struct UTalentDataAsset : UPrimaryDataAsset {
	struct FSoftClassPath TalentClassPath; // 0x30(0x18)
	struct FSoftObjectPath TalentIconPath; // 0x48(0x18)
	struct FText TalentName; // 0x60(0x18)
	int32_t NameTextID; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FText TalentDescription; // 0x80(0x18)
	int32_t DescriptionTextID; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.TeamBoostProjectile
// Size: 0x288 (Inherited: 0x228)
struct ATeamBoostProjectile : AActor {
	float BaseMoveSpeed; // 0x228(0x04)
	float MaxMoveSpeed; // 0x22c(0x04)
	float MoveAcceleration; // 0x230(0x04)
	float HeightOffset; // 0x234(0x04)
	float FinishDistance; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
	struct TArray<struct FActorParticleEffectSpawnInfo> ProjectileParticleSpawnInfos; // 0x240(0x10)
	struct TArray<struct UParticleSystemComponent*> ProjectileParticleComponents; // 0x250(0x10)
	struct TWeakObjectPtr<struct ASolarCharacter> TargetCharacter; // 0x260(0x08)
	char pad_268[0x20]; // 0x268(0x20)

	void OnRep_TargetCharacter(); // Function Solarland.TeamBoostProjectile.OnRep_TargetCharacter // (Final|Native|Private) // @ game+0x29b4070
};

// Class Solarland.TeammateHUD
// Size: 0x478 (Inherited: 0x400)
struct UTeammateHUD : USolarUserWidget {
	struct USolarTextBlock* Txt_Distance; // 0x400(0x08)
	struct USolarTextBlock* Txt_Distance_Unit; // 0x408(0x08)
	struct UTextBlock* Txt_NickName; // 0x410(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x418(0x08)
	struct UWidgetAnimation* Anim_Exit; // 0x420(0x08)
	struct FDelegate OnExitAnimationFinished; // 0x428(0x10)
	struct FDelegate OnEnterAnimationFinished; // 0x438(0x10)
	struct FString PlayerNameSeparator; // 0x448(0x10)
	char pad_458[0x20]; // 0x458(0x20)

	void UpdateName(struct FString InNickName); // Function Solarland.TeammateHUD.UpdateName // (Final|Native|Protected) // @ game+0x29b45b0
	void UpdateMemberNum(char PosInTeam); // Function Solarland.TeammateHUD.UpdateMemberNum // (Final|Native|Protected) // @ game+0x29b4530
	void UpdateDistance(float InDis); // Function Solarland.TeammateHUD.UpdateDistance // (Final|Native|Protected) // @ game+0x29b44b0
	void SetDodgeDisplay(bool bShow); // Function Solarland.TeammateHUD.SetDodgeDisplay // (Final|Native|Protected) // @ game+0x29b42b0
	void ResetAnimRenderOpacity(); // Function Solarland.TeammateHUD.ResetAnimRenderOpacity // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshPosInTeam(char PosInTeam, struct FTeamMemberColor& ColorConfig); // Function Solarland.TeammateHUD.RefreshPosInTeam // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OuterSetDistanceDisplay(bool bShown); // Function Solarland.TeammateHUD.OuterSetDistanceDisplay // (Final|Native|Protected) // @ game+0x29b4200
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.TeammateHUD.OnSpecTargetChanged // (Final|Native|Protected) // @ game+0x29b4130
	void OnSpecRefreshTeamHUD(); // Function Solarland.TeammateHUD.OnSpecRefreshTeamHUD // (Final|Native|Protected) // @ game+0x29b4110
	void OnRescueStateChanged(enum class ERescueState CurrentRescueState); // Function Solarland.TeammateHUD.OnRescueStateChanged // (Final|Native|Protected) // @ game+0x29b4090
	void OnRefreshTeamHUD(enum class ERefreshCause RefreshCause); // Function Solarland.TeammateHUD.OnRefreshTeamHUD // (Final|Native|Protected) // @ game+0x29b3fb0
	void OnBroadcastModeChanged(); // Function Solarland.TeammateHUD.OnBroadcastModeChanged // (Final|Native|Protected) // @ game+0x29b3f90
	void ExitAnimEnd(); // Function Solarland.TeammateHUD.ExitAnimEnd // (Final|Native|Protected) // @ game+0x29b3b60
	void EnterAnimEnd(); // Function Solarland.TeammateHUD.EnterAnimEnd // (Final|Native|Protected) // @ game+0x29b3b40
};

// Class Solarland.TeammatePerspectiveEffectController
// Size: 0x28 (Inherited: 0x28)
struct UTeammatePerspectiveEffectController : UActorEffectController {
};

// Class Solarland.TeammateTalentWidget
// Size: 0x430 (Inherited: 0x400)
struct UTeammateTalentWidget : USolarUserWidget {
	struct UImage* Img_Icon_Ability; // 0x400(0x08)
	struct UImage* Img_Icon_CD; // 0x408(0x08)
	struct UGaugeImage* Progress_CD_Mask; // 0x410(0x08)
	struct UWidgetAnimation* Anim_TalentShow; // 0x418(0x08)
	struct UWidgetAnimation* Anim_Cooldown; // 0x420(0x08)
	char pad_428[0x8]; // 0x428(0x08)

	void SetTalentState(enum class ETalentState InTalentUIState, float InAdditionalParam); // Function Solarland.TeammateTalentWidget.SetTalentState // (Final|Native|Public|BlueprintCallable) // @ game+0x29b43c0
	void SetTalentIconByID(char InTalentID); // Function Solarland.TeammateTalentWidget.SetTalentIconByID // (Final|Native|Public|BlueprintCallable) // @ game+0x29b4340
};

// Class Solarland.TechDesignUIOperationDispatcher
// Size: 0x1588 (Inherited: 0x13b8)
struct UTechDesignUIOperationDispatcher : UHUDDispatcherBase {
	struct FDelegate OnWidgetAddToBattleUIRequest; // 0x13b8(0x10)
	struct FDelegate OnWidgetAddToBackpackUIRequest; // 0x13c8(0x10)
	struct FDelegate OnWidgetAddToMapUIRequest; // 0x13d8(0x10)
	struct FDelegate OnClearBattleUISlotRequest; // 0x13e8(0x10)
	struct FDelegate OnClearBackpackUISlotRequest; // 0x13f8(0x10)
	struct FDelegate OnClearMapUISlotRequest; // 0x1408(0x10)
	struct FDelegate OnSetBattleUISubItemVisibilityByGameMode; // 0x1418(0x10)
	struct FDelegate RegisterCustomMapMarkToMiniMap; // 0x1428(0x10)
	struct FDelegate RegisterCustomMapMarkToBigMap; // 0x1438(0x10)
	struct FDelegate RemoveCustomMapMarkFromMiniMap; // 0x1448(0x10)
	struct FDelegate RemoveCustomMapMarkFromBigMap; // 0x1458(0x10)
	struct FDelegate RegisterCustomRotBarMark; // 0x1468(0x10)
	struct FDelegate RemoveCustomRotBarMark; // 0x1478(0x10)
	struct FMulticastInlineDelegate OnAllPlayerNavVisibilityChanged; // 0x1488(0x10)
	struct FMulticastInlineDelegate OnBattleUIVisibilityChanged; // 0x1498(0x10)
	struct FMulticastInlineDelegate OnPowerBarVisibilityChanged; // 0x14a8(0x10)
	struct FMulticastInlineDelegate OnRotationBarVisibilityChanged; // 0x14b8(0x10)
	struct FMulticastInlineDelegate OnMiniMapFovChangeRequested; // 0x14c8(0x10)
	struct FDelegate OnMiniMapInitMarkIconRequested; // 0x14d8(0x10)
	struct FDelegate OnBigMapAddDotLineRequested; // 0x14e8(0x10)
	struct FDelegate OnMiniMapAddDotLineRequested; // 0x14f8(0x10)
	struct FMulticastInlineDelegate OnBigMapRemoveDotLineRequested; // 0x1508(0x10)
	struct FMulticastInlineDelegate OnMiniMapRemoveDotLineRequested; // 0x1518(0x10)
	struct FDelegate RegisterPositionMark; // 0x1528(0x10)
	struct FDelegate RegisterActorMark; // 0x1538(0x10)
	struct FMulticastInlineDelegate OnBattleUIVisibilityHasChanged; // 0x1548(0x10)
	struct FDelegate OnGettingCanvasPositionOnBattleUI; // 0x1558(0x10)
	struct FDelegate OnGettingWidgetRenderTransOnBattleUI; // 0x1568(0x10)
	struct FDelegate OnGettingTextOnBackpackUI; // 0x1578(0x10)

	void SimpleTDDelegate__DelegateSignature(); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.SimpleTDDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	void OnWidgetVisibilityHasChanged__DelegateSignature(bool bVisible); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnWidgetVisibilityHasChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	struct FString OnWidgetAddToBattleUIRequest__DelegateSignature(struct UPanelSlot*& Result, struct UWidget* WidgetForAdd, struct FName& PanelNameToAdd, bool bReplaceOld); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnWidgetAddToBattleUIRequest__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x2d0d160
	struct FString OnSetBattleUISubItemVisibilityByGameMode__DelegateSignature(enum class ECustomGameModeTypeForUI GameModeType); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnSetBattleUISubItemVisibilityByGameMode__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	struct FString OnRegisterPositionMarkRequested__DelegateSignature(struct UActorMarkBase*& Result, struct UActorMarkBase* MarkClass, struct FVector& Position); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnRegisterPositionMarkRequested__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2d0d160
	struct FString OnRegisterActorMarkRequested__DelegateSignature(struct UActorMarkBase*& Result, struct UActorMarkBase* MarkClass, struct AActor* FollowActor); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnRegisterActorMarkRequested__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x2d0d160
	struct UMapMarkBase* OnMiniMapInitMarkIconRequested__DelegateSignature(struct UMapMarkBase* MapMarkClass, struct FVector2D& Pivot, int32_t ZOrder); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnMiniMapInitMarkIconRequested__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2d0d160
	void OnMiniMapFovChangeRequested__DelegateSignature(float TargetFOV, float PlayTime, bool bWithIconScale); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnMiniMapFovChangeRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	int32_t OnMapAddDotLineRequested__DelegateSignature(struct AActor* StartPointActor, struct AActor* EndPointActor, struct FLinearColor DotLineColor); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnMapAddDotLineRequested__DelegateSignature // (Public|Delegate|HasDefaults) // @ game+0x2d0d160
	struct FString OnGettingWidgetTransRequest__DelegateSignature(struct FWidgetTransform& Result, struct FName& WidgetName); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnGettingWidgetTransRequest__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x2d0d160
	struct FString OnGettingVector2DRequest__DelegateSignature(struct FVector2D& Result, struct FName& WidgetName); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnGettingVector2DRequest__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2d0d160
	struct FString OnGettingTextRequest__DelegateSignature(struct FText& Result, struct FName& TextBlockName); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnGettingTextRequest__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void OnCustomRotationBarMarkRemoved__DelegateSignature(struct URotationBarMarkWidget* MarkToRemove); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnCustomRotationBarMarkRemoved__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	struct URotationBarMarkWidget* OnCustomRotationBarMarkRegistered__DelegateSignature(struct URotationBarMarkWidget* RotationBarMarkClass, struct FVector& MarkPos, int32_t ZOrder); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnCustomRotationBarMarkRegistered__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2d0d160
	void OnCustomMapMarkRemoved__DelegateSignature(struct UMapMarkBase* MarkToRemove); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnCustomMapMarkRemoved__DelegateSignature // (Public|Delegate) // @ game+0x2d0d160
	struct UMapMarkBase* OnCustomMapMarkRegistered__DelegateSignature(struct UMapMarkBase* MapMarkClass, struct FVector2D& MarkPos, bool bSupportEdge, bool bSupportEdgeInBigMap, int32_t ZOrder); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnCustomMapMarkRegistered__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2d0d160
	struct FString OnClearBattleUISlotRequest__DelegateSignature(struct FName& PanelNameToClear); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnClearBattleUISlotRequest__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x2d0d160
	void IntTDDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.IntTDDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
	bool GetWidgetRenderTransOnBattleUI(struct FWidgetTransform& Result, struct FName WidgetName); // Function Solarland.TechDesignUIOperationDispatcher.GetWidgetRenderTransOnBattleUI // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29b3d80
	bool GetTextOnBackpackUI(struct FText& Result, struct FName TextBlockName); // Function Solarland.TechDesignUIOperationDispatcher.GetTextOnBackpackUI // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29b3c60
	bool GetCanvasPositionOnBattleUI(struct FVector2D& Result, struct FName ChildName); // Function Solarland.TechDesignUIOperationDispatcher.GetCanvasPositionOnBattleUI // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x29b3b80
	void BroadcastRotationBarVisibilityChanged(bool bVisible); // Function Solarland.TechDesignUIOperationDispatcher.BroadcastRotationBarVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29b3ab0
	void BroadcastPowerBarVisibilityChanged(bool bVisible); // Function Solarland.TechDesignUIOperationDispatcher.BroadcastPowerBarVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29b3a20
	void BroadcastBattleUIVisibilityChanged(bool bVisible); // Function Solarland.TechDesignUIOperationDispatcher.BroadcastBattleUIVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29b3990
	void BroadcastAllPlayerNavVisibilityChanged(bool bVisible); // Function Solarland.TechDesignUIOperationDispatcher.BroadcastAllPlayerNavVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x29b3900
	void BoolTDDelegate__DelegateSignature(bool bValue); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.BoolTDDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2d0d160
};

// Class Solarland.Temp_BigMap
// Size: 0x408 (Inherited: 0x400)
struct UTemp_BigMap : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)

	void OnBigMapVisibilitySet(bool bVisible); // Function Solarland.Temp_BigMap.OnBigMapVisibilitySet // (Final|Native|Protected|BlueprintCallable) // @ game+0x29b8c60
	struct FString ClearWidgetInPanel(struct FName& InPanelName); // Function Solarland.Temp_BigMap.ClearWidgetInPanel // (Final|Native|Protected|HasOutParms) // @ game+0x29b80e0
	struct FString AddWidgetToPanel(struct UPanelSlot*& OutResult, struct UWidget* InWidget, struct FName& InPanelName, bool bReplaceOld); // Function Solarland.Temp_BigMap.AddWidgetToPanel // (Final|Native|Protected|HasOutParms) // @ game+0x29b7ee0
};

// Class Solarland.Temp_Settings
// Size: 0x408 (Inherited: 0x400)
struct UTemp_Settings : USolarUserWidget {
	char pad_400[0x8]; // 0x400(0x08)

	void SaveAndQuit(); // Function Solarland.Temp_Settings.SaveAndQuit // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnSettingRequestOpened(int32_t InOwnerType); // Function Solarland.Temp_Settings.OnSettingRequestOpened // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.Temp_SolarBattleControl
// Size: 0x590 (Inherited: 0x400)
struct UTemp_SolarBattleControl : USolarUserWidget {
	char pad_400[0xc8]; // 0x400(0xc8)
	struct TMap<struct FString, struct UObject*> IconMap; // 0x4c8(0x50)
	char pad_518[0x8]; // 0x518(0x08)
	struct UUserWidget* UI_KillInfo_A; // 0x520(0x08)
	struct UUserWidget* UI_KillInfo_B; // 0x528(0x08)
	char pad_530[0x10]; // 0x530(0x10)
	struct FString RevengeIconName; // 0x540(0x10)
	struct USolarAdapterWidget* Panel_Shortcut; // 0x550(0x08)
	struct UImage* Image_UnderWater; // 0x558(0x08)
	struct UCanvasPanel* Panel_PickUp; // 0x560(0x08)
	struct USolarAdapterWidget* SolarAdapterWidget_Pickup; // 0x568(0x08)
	struct UUserWidget* Sperated_Pickup; // 0x570(0x08)
	struct FSoftClassPath SperatedPickupWidgetPath; // 0x578(0x18)

	struct FString SetBattleUISubItemVisibilityByGameMode(enum class ECustomGameModeTypeForUI GameModeType); // Function Solarland.Temp_SolarBattleControl.SetBattleUISubItemVisibilityByGameMode // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnToggleCursorVisibility(bool bIsVisible); // Function Solarland.Temp_SolarBattleControl.OnToggleCursorVisibility // (Final|Native|Protected) // @ game+0x29b8e50
	struct UUserWidget* OnHomeGetSelf(); // Function Solarland.Temp_SolarBattleControl.OnHomeGetSelf // (Final|Native|Protected) // @ game+0x29b8de0
	void OnHideFromLua(); // Function Solarland.Temp_SolarBattleControl.OnHideFromLua // (Final|Native|Protected) // @ game+0x29b8dc0
	void OnBattleUIVisibilityChanged(bool bVisible); // Function Solarland.Temp_SolarBattleControl.OnBattleUIVisibilityChanged // (Final|Native|Protected) // @ game+0x26fdaf0
	struct FString GetRenderTransPosition(struct FWidgetTransform& OutResult, struct FName& InPanelName); // Function Solarland.Temp_SolarBattleControl.GetRenderTransPosition // (Final|Native|Protected|HasOutParms) // @ game+0x29b8930
	struct FString GetCanvasPosition(struct FVector2D& OutResult, struct FName& ChildName); // Function Solarland.Temp_SolarBattleControl.GetCanvasPosition // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x29b8770
	struct FString ClearWidgetInPanel(struct FName& InPanelName); // Function Solarland.Temp_SolarBattleControl.ClearWidgetInPanel // (Final|Native|Protected|HasOutParms) // @ game+0x29b80e0
	struct FString AddWidgetToPanel(struct UPanelSlot*& OutResult, struct UWidget* InWidget, struct FName& InPanelName, bool bReplaceOld); // Function Solarland.Temp_SolarBattleControl.AddWidgetToPanel // (Final|Native|Protected|HasOutParms) // @ game+0x29b7ee0
};

// Class Solarland.TempInteractiveKeyListWidget
// Size: 0x450 (Inherited: 0x400)
struct UTempInteractiveKeyListWidget : USolarUserWidget {
	struct UHorizontalBox* Panel_Jump; // 0x400(0x08)
	struct UHorizontalBox* Panel_Drive; // 0x408(0x08)
	struct UHorizontalBox* Panel_GetIn; // 0x410(0x08)
	struct UHorizontalBox* Panel_Repair; // 0x418(0x08)
	struct UHorizontalBox* Panel_Emoji; // 0x420(0x08)
	struct UHorizontalBox* Panel_GetOff; // 0x428(0x08)
	struct UHorizontalBox* Panel_Eject; // 0x430(0x08)
	struct UHorizontalBox* Panel_ChangeSeats; // 0x438(0x08)
	struct UHorizontalBox* Panel_Trumpet; // 0x440(0x08)
	struct UHorizontalBox* Panel_Break; // 0x448(0x08)

	void OnCanSkilledJump(bool bValue); // Function Solarland.TempInteractiveKeyListWidget.OnCanSkilledJump // (Final|Native|Private) // @ game+0x29b8cf0
};

// Class Solarland.TimedEffectController
// Size: 0x40 (Inherited: 0x28)
struct UTimedEffectController : UActorEffectController {
	float FadeInTime; // 0x28(0x04)
	float KeepTime; // 0x2c(0x04)
	float FadeOutTime; // 0x30(0x04)
	char pad_34[0xc]; // 0x34(0x0c)
};

// Class Solarland.Tutorial
// Size: 0x130 (Inherited: 0x28)
struct UTutorial : UObject {
	char pad_28[0x38]; // 0x28(0x38)
	struct FTutorialTableRow Data; // 0x60(0x98)
	struct UTutorialTriggerCondition* TriggerConditionBP; // 0xf8(0x08)
	struct UTutorialTaskSequenceAction* TutorialTask; // 0x100(0x08)
	char pad_108[0x28]; // 0x108(0x28)

	void Stop(); // Function Solarland.Tutorial.Stop // (Final|Native|Public) // @ game+0x29b9590
	void OnSingleTaskFinish(); // Function Solarland.Tutorial.OnSingleTaskFinish // (Final|Native|Private) // @ game+0x29b8e30
	struct FTutorialTableRow GetTableRowData(); // Function Solarland.Tutorial.GetTableRowData // (Final|Native|Public|Const) // @ game+0x29b8ae0
	int32_t GetCurrentFinishNum(); // Function Solarland.Tutorial.GetCurrentFinishNum // (Final|Native|Public|Const) // @ game+0xbde000
};

// Class Solarland.TutorialCondition
// Size: 0x28 (Inherited: 0x28)
struct UTutorialCondition : UObject {

	struct FString GetWorldName(); // Function Solarland.TutorialCondition.GetWorldName // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x29b8b60
	struct ASolarCharacter* GetPlayer(); // Function Solarland.TutorialCondition.GetPlayer // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x29b8900
};

// Class Solarland.TutorialActionCondition
// Size: 0x1f8 (Inherited: 0x28)
struct UTutorialActionCondition : UTutorialCondition {
	struct FTutorialActionTableRow ActionData; // 0x28(0x1d0)

	void SpawnFixedAreaInteractActor(int32_t SpawnerID, struct ATutorialLevelInteractableActor*& OutActor); // Function Solarland.TutorialActionCondition.SpawnFixedAreaInteractActor // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x29b9480
	void OnReset(); // Function Solarland.TutorialActionCondition.OnReset // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnEnd(); // Function Solarland.TutorialActionCondition.OnEnd // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnBegin(); // Function Solarland.TutorialActionCondition.OnBegin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct USolarTutorialManager* GetSolarTutorialManager(); // Function Solarland.TutorialActionCondition.GetSolarTutorialManager // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x29b8ab0
	void GetBotAIsOnVehicle(struct TArray<int32_t> SpawnerIds, struct TArray<struct ASolarBotAIControllerOnVehicle*>& OutBotAI); // Function Solarland.TutorialActionCondition.GetBotAIsOnVehicle // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x29b8610
	void GetBotAIs(struct TArray<int32_t> SpawnerIds, struct TArray<struct ASolarBotAIControllerInGuide*>& OutBotAI); // Function Solarland.TutorialActionCondition.GetBotAIs // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x29b84b0
	void GetAllActorsOfClass(struct AActor* ActorClass, struct TArray<struct AActor*>& OutActors); // Function Solarland.TutorialActionCondition.GetAllActorsOfClass // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x29b83c0
	bool CheckSatisfy(); // Function Solarland.TutorialActionCondition.CheckSatisfy // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.TutorialLevelInteractableActor
// Size: 0x228 (Inherited: 0x228)
struct ATutorialLevelInteractableActor : AActor {

	void UnregisterEvent(); // Function Solarland.TutorialLevelInteractableActor.UnregisterEvent // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RegisterEvent(); // Function Solarland.TutorialLevelInteractableActor.RegisterEvent // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct USolarTutorialManager* GetSolarTutorialManager(); // Function Solarland.TutorialLevelInteractableActor.GetSolarTutorialManager // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x29b8ab0
};

// Class Solarland.TutorialLevelSaveGame
// Size: 0x80 (Inherited: 0x28)
struct UTutorialLevelSaveGame : USaveGame {
	struct TMap<struct FString, struct FTutorialLevelSaveData> TutorialLevelSaveDatas; // 0x28(0x50)
	enum class EPlayerProficiency PlayerProficiency; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Solarland.TutorialLevelSpawner
// Size: 0x250 (Inherited: 0x228)
struct ATutorialLevelSpawner : AActor {
	int32_t SpawnerID; // 0x228(0x04)
	struct FVector BoxExtent; // 0x22c(0x0c)
	bool bSpawnBeginPlay; // 0x238(0x01)
	char pad_239[0x3]; // 0x239(0x03)
	float DelayTime; // 0x23c(0x04)
	struct ATutorialLevelInteractableActor* InteractableActorClass; // 0x240(0x08)
	char pad_248[0x8]; // 0x248(0x08)

	struct ATutorialLevelInteractableActor* SpawnInteractActor(); // Function Solarland.TutorialLevelSpawner.SpawnInteractActor // (Final|Native|Public|BlueprintCallable) // @ game+0x29b9560
};

// Class Solarland.TutorialLevelSplineComponent
// Size: 0x6a0 (Inherited: 0x630)
struct UTutorialLevelSplineComponent : USplineComponent {
	struct TMap<enum class ESplineMeshType, struct FSplineMeshDetails> SplineMeshMap; // 0x630(0x50)
	struct UTutorialLevelSplineComponent* FollowingSpline; // 0x680(0x08)
	struct TArray<struct USplineMeshComponent*> SplineMeshComponents; // 0x688(0x10)
	char pad_698[0x8]; // 0x698(0x08)

	void SetMeshsVisibility(bool bNewVisibility, bool bPropagateToChildren); // Function Solarland.TutorialLevelSplineComponent.SetMeshsVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x29b9140
	void SetFollowingSpline(struct UTutorialLevelSplineComponent* InFollowingSpline); // Function Solarland.TutorialLevelSplineComponent.SetFollowingSpline // (Final|Native|Public|BlueprintCallable) // @ game+0x29b90b0
	void CreateSplineMesh(); // Function Solarland.TutorialLevelSplineComponent.CreateSplineMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x29b81c0
};

// Class Solarland.TutorialStepAction
// Size: 0x280 (Inherited: 0x70)
struct UTutorialStepAction : UActionNode {
	char pad_70[0x28]; // 0x70(0x28)
	int32_t OwnerTutorialID; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FTutorialActionTableRow Data; // 0xa0(0x1d0)
	struct UTutorialActionCondition* InterruptConditionBP; // 0x270(0x08)
	struct UTutorialActionCondition* EndConditionBP; // 0x278(0x08)

	void StartRepeatOperation(); // Function Solarland.TutorialStepAction.StartRepeatOperation // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void SpawnBotAIsOnVehicle(struct TArray<int32_t> SpawnerIds); // Function Solarland.TutorialStepAction.SpawnBotAIsOnVehicle // (Final|Native|Protected|BlueprintCallable) // @ game+0x29b9390
	void SpawnBotAIs(struct TArray<int32_t> SpawnerIds); // Function Solarland.TutorialStepAction.SpawnBotAIs // (Final|Native|Protected|BlueprintCallable) // @ game+0x29b92a0
	void ShowUI(); // Function Solarland.TutorialStepAction.ShowUI // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void RepeatOperation(); // Function Solarland.TutorialStepAction.RepeatOperation // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveTick(float DeltaTime); // Function Solarland.TutorialStepAction.ReceiveTick // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveSetupData(); // Function Solarland.TutorialStepAction.ReceiveSetupData // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveOnReset(); // Function Solarland.TutorialStepAction.ReceiveOnReset // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveOnEnd(); // Function Solarland.TutorialStepAction.ReceiveOnEnd // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveOnBegin(); // Function Solarland.TutorialStepAction.ReceiveOnBegin // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void ReceiveMinExecuteTimeUp(); // Function Solarland.TutorialStepAction.ReceiveMinExecuteTimeUp // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnResetEvent(); // Function Solarland.TutorialStepAction.OnResetEvent // (Final|Native|Private) // @ game+0x29b8e10
	void OnEndedEvent(); // Function Solarland.TutorialStepAction.OnEndedEvent // (Final|Native|Private) // @ game+0x29b8da0
	void OnDisposedEvent(); // Function Solarland.TutorialStepAction.OnDisposedEvent // (Final|Native|Private) // @ game+0x29b8d80
	void OnBeganEvent(); // Function Solarland.TutorialStepAction.OnBeganEvent // (Final|Native|Private) // @ game+0x29b8c40
	struct FTutorialActionTableRow GetTableRowData(); // Function Solarland.TutorialStepAction.GetTableRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29b8b20
	void DestoryBotAIsOnVehicle(struct TArray<int32_t> SpawnerIds); // Function Solarland.TutorialStepAction.DestoryBotAIsOnVehicle // (Final|Native|Protected|BlueprintCallable) // @ game+0x29b82d0
	void DestoryBotAIs(struct TArray<int32_t> SpawnerIds); // Function Solarland.TutorialStepAction.DestoryBotAIs // (Final|Native|Protected|BlueprintCallable) // @ game+0x29b81e0
};

// Class Solarland.TutorialTaskSequenceAction
// Size: 0x90 (Inherited: 0x90)
struct UTutorialTaskSequenceAction : USequenceNode {
};

// Class Solarland.TutorialTriggerCondition
// Size: 0x28 (Inherited: 0x28)
struct UTutorialTriggerCondition : UTutorialCondition {

	struct USolarTutorialManager* GetSolarTutorialManager(); // Function Solarland.TutorialTriggerCondition.GetSolarTutorialManager // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x29b8ab0
	bool CheckSatisfy(struct FTutorialTableRow& InData); // Function Solarland.TutorialTriggerCondition.CheckSatisfy // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.TweenBase
// Size: 0x2d8 (Inherited: 0x260)
struct UTweenBase : UUserWidget {
	bool AutoPlay; // 0x260(0x01)
	char pad_261[0x3]; // 0x261(0x03)
	float Interval; // 0x264(0x04)
	bool bLoop; // 0x268(0x01)
	bool bEndHide; // 0x269(0x01)
	char pad_26A[0x26]; // 0x26a(0x26)
	struct FMulticastInlineDelegate OnTweenStart; // 0x290(0x10)
	struct FMulticastInlineDelegate OnTweenStop; // 0x2a0(0x10)
	char pad_2B0[0x10]; // 0x2b0(0x10)
	struct UWidget* LinkWidget; // 0x2c0(0x08)
	char pad_2C8[0x4]; // 0x2c8(0x04)
	float Progress; // 0x2cc(0x04)
	char pad_2D0[0x8]; // 0x2d0(0x08)

	void Stop(); // Function Solarland.TweenBase.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x29b95b0
	void Reset(); // Function Solarland.TweenBase.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0x29b8f20
	void Play(); // Function Solarland.TweenBase.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x29b8ee0
	void InitAndPlay(); // Function Solarland.TweenBase.InitAndPlay // (Final|Native|Public|BlueprintCallable) // @ game+0x29b8c00
	void Init(); // Function Solarland.TweenBase.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x29b8be0
};

// Class Solarland.TweenImage
// Size: 0x3d0 (Inherited: 0x2d8)
struct UTweenImage : UTweenBase {
	struct UImage* TargetImg; // 0x2d8(0x08)
	struct FUIScaleTween ScaleTween; // 0x2e0(0x40)
	struct FUIPositionTween PostionTween; // 0x320(0x40)
	struct FImageColorTween ColorTween; // 0x360(0x48)
	struct FUIRenderOpacityTween OpacityTween; // 0x3a8(0x28)

	void InitImageTween(); // Function Solarland.TweenImage.InitImageTween // (Final|Native|Public|BlueprintCallable) // @ game+0x29b8c20
};

// Class Solarland.TweenText
// Size: 0x3a8 (Inherited: 0x2d8)
struct UTweenText : UTweenBase {
	struct UTextBlock* TargetText; // 0x2d8(0x08)
	struct FUIScaleTween ScaleTween; // 0x2e0(0x40)
	struct FUIPositionTween PostionTween; // 0x320(0x40)
	struct FTextColorTween ColorTween; // 0x360(0x48)
};

// Class Solarland.TweenWidget
// Size: 0x388 (Inherited: 0x2d8)
struct UTweenWidget : UTweenBase {
	struct UWidget* TargetWidget; // 0x2d8(0x08)
	struct FUIScaleTween ScaleTween; // 0x2e0(0x40)
	struct FUIPositionTween PostionTween; // 0x320(0x40)
	struct FUIRenderOpacityTween OpacityTween; // 0x360(0x28)
};

// Class Solarland.UIBackpackEquipmentWidget
// Size: 0x448 (Inherited: 0x400)
struct UUIBackpackEquipmentWidget : USolarUserWidget {
	enum class EPassiveTriggeredVoice VoiceType; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct UImage* Img_Empty_Bg; // 0x408(0x08)
	struct UImage* Img_Empty_Icon; // 0x410(0x08)
	struct UButton* Btn_Need; // 0x418(0x08)
	struct UImage* Img_Equip_Bg; // 0x420(0x08)
	struct UImage* Img_Border; // 0x428(0x08)
	struct UUIDragWidget* DragItem; // 0x430(0x08)
	struct UImage* Img_Quality_BG; // 0x438(0x08)
	struct UWidgetSwitcher* Switcher; // 0x440(0x08)

	void SetState(bool bIsEmpty); // Function Solarland.UIBackpackEquipmentWidget.SetState // (Final|Native|Public) // @ game+0x29b9210
	void SetNum(bool IsHaveNum); // Function Solarland.UIBackpackEquipmentWidget.SetNum // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetInfoText(int32_t InNum, int32_t InMaxNum); // Function Solarland.UIBackpackEquipmentWidget.SetInfoText // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetDragItemData(int32_t InID, int32_t InNum, int32_t InItemType, struct FString InItemName); // Function Solarland.UIBackpackEquipmentWidget.SetDragItemData // (Final|Native|Public) // @ game+0x29b8f40
	void SetBorder(enum class EItemQualityType Quality); // Function Solarland.UIBackpackEquipmentWidget.SetBorder // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void PlayCharacterVoice(); // Function Solarland.UIBackpackEquipmentWidget.PlayCharacterVoice // (Final|Native|Private) // @ game+0x29b8f00
	struct UImage* GetItemQualityBg(); // Function Solarland.UIBackpackEquipmentWidget.GetItemQualityBg // (Final|Native|Public) // @ game+0x29b88d0
	struct UUIDragWidget* GetDragItem(); // Function Solarland.UIBackpackEquipmentWidget.GetDragItem // (Final|Native|Public) // @ game+0x29b88a0
	void BindNeedActionVoice(); // Function Solarland.UIBackpackEquipmentWidget.BindNeedActionVoice // (Final|Native|Private) // @ game+0x29b80c0
};

// Class Solarland.UIBackpackItemWidget
// Size: 0x450 (Inherited: 0x400)
struct UUIBackpackItemWidget : USolarUserWidget {
	enum class EPassiveTriggeredVoice VoiceType; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct UImage* Img_Empty_Bg; // 0x408(0x08)
	struct UImage* Img_Empty_Icon; // 0x410(0x08)
	struct UButton* Btn_Need; // 0x418(0x08)
	struct UImage* Img_Equip_Bg; // 0x420(0x08)
	struct UImage* Img_Border; // 0x428(0x08)
	struct UUIDragWidget* DragItem; // 0x430(0x08)
	struct USolarTextBlock* Txt_Num; // 0x438(0x08)
	struct USolarTextBlock* Txt_Num_Max; // 0x440(0x08)
	struct UWidgetSwitcher* Switcher; // 0x448(0x08)

	void SetState(bool bIsEmpty); // Function Solarland.UIBackpackItemWidget.SetState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetInfoText(int32_t Num, int32_t MaxNum); // Function Solarland.UIBackpackItemWidget.SetInfoText // (Final|Native|Public) // @ game+0x29bcbd0
	void SetDragItemData(int32_t InID, int32_t InNum, int32_t InItemType, struct FString InItemName); // Function Solarland.UIBackpackItemWidget.SetDragItemData // (Final|Native|Public) // @ game+0x29b8f40
	void PlayCharacterVoice(); // Function Solarland.UIBackpackItemWidget.PlayCharacterVoice // (Final|Native|Private) // @ game+0x29b8f00
	void BindNeedActionVoice(); // Function Solarland.UIBackpackItemWidget.BindNeedActionVoice // (Final|Native|Private) // @ game+0x29bbc50
};

// Class Solarland.UIBackpackWeaponWidget
// Size: 0x5b0 (Inherited: 0x400)
struct UUIBackpackWeaponWidget : USolarUserWidget {
	struct UButton* BtnWeapon; // 0x400(0x08)
	struct UCanvasPanel* Panel_Empty; // 0x408(0x08)
	struct UCanvasPanel* Panel_Info; // 0x410(0x08)
	struct UCanvasPanel* Panel_Inhand; // 0x418(0x08)
	struct UHorizontalBox* HorizontalBox_Name; // 0x420(0x08)
	struct UHorizontalBox* HorizontalBox_Ammo; // 0x428(0x08)
	struct UImage* Img_Bg; // 0x430(0x08)
	struct UImage* Img_DragDetect; // 0x438(0x08)
	struct UUIDragWidget* Drag_Weapon; // 0x440(0x08)
	struct USolarTextBlock* Txt_Name; // 0x448(0x08)
	struct USolarTextBlock* Txt_BulletNum; // 0x450(0x08)
	struct USolarTextBlock* Txt_BulletSum; // 0x458(0x08)
	struct USolarTextBlock* Txt_Range; // 0x460(0x08)
	struct USolarTextBlock* Txt_Difficulty; // 0x468(0x08)
	struct UVerticalBox* Weapon_Detail; // 0x470(0x08)
	struct USolarTextBlock* Txt_Weapon_Type; // 0x478(0x08)
	struct USolarTextBlock* Txt_DMGNum; // 0x480(0x08)
	struct UImage* Img_BulletIcon; // 0x488(0x08)
	struct UHorizontalBox* Weapon_Parts_New; // 0x490(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Muzzle; // 0x498(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Grip; // 0x4a0(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Clip; // 0x4a8(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Scope; // 0x4b0(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_GunStock; // 0x4b8(0x08)
	int32_t weaponid; // 0x4c0(0x04)
	uint32_t WeaponUniqueID; // 0x4c4(0x04)
	int32_t WeaponSlot; // 0x4c8(0x04)
	int32_t WeaponAmmoNum; // 0x4cc(0x04)
	int32_t WeaponExtraAmmoNum; // 0x4d0(0x04)
	enum class EWidgetPassiveMode WeaponPassiveMode; // 0x4d4(0x01)
	char pad_4D5[0x3]; // 0x4d5(0x03)
	struct TMap<enum class EWeaponType, int32_t> WeaponType2TextIdMap; // 0x4d8(0x50)
	struct TMap<enum class EWeaponType, struct FSoftObjectPath> WeaponType2BulltSpMap; // 0x528(0x50)
	struct FVector2D ImgSkillSize; // 0x578(0x08)
	char pad_580[0x4]; // 0x580(0x04)
	struct TWeakObjectPtr<struct ASolarPlayerNormalWeapon> OwnerWeapon; // 0x584(0x08)
	char pad_58C[0x24]; // 0x58c(0x24)

	void UpdatePassiveMode(); // Function Solarland.UIBackpackWeaponWidget.UpdatePassiveMode // (Final|Native|Protected) // @ game+0x29bcdf0
	void SetWidgetPassiveMode(enum class EWidgetPassiveMode InMode); // Function Solarland.UIBackpackWeaponWidget.SetWidgetPassiveMode // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void SetWeaponSlot(int32_t InWeaponSlot); // Function Solarland.UIBackpackWeaponWidget.SetWeaponSlot // (Final|Native|Public) // @ game+0x29bcca0
	void RefreshBySlot(int32_t InWeaponSlot); // Function Solarland.UIBackpackWeaponWidget.RefreshBySlot // (Final|Native|Public) // @ game+0x29bc930
	void OnWeaponUpdateAmmoCount(int32_t InFireModeType, struct ASolarWeapon* InWeapon); // Function Solarland.UIBackpackWeaponWidget.OnWeaponUpdateAmmoCount // (Final|Native|Protected) // @ game+0x29bc820
	void OnWeaponSlotUpdateAmmo(int32_t InWeaponSlotID); // Function Solarland.UIBackpackWeaponWidget.OnWeaponSlotUpdateAmmo // (Final|Native|Protected) // @ game+0x29bc790
	void OnWeaponSlotQuitReload(int32_t InWeaponSlotID, bool InbFinishReload); // Function Solarland.UIBackpackWeaponWidget.OnWeaponSlotQuitReload // (Final|Native|Protected) // @ game+0x29bc6c0
	void OnWeaponSlotActive(int32_t InWeaponSlotID, struct AActor* InActiveWeapon); // Function Solarland.UIBackpackWeaponWidget.OnWeaponSlotActive // (Final|Native|Protected) // @ game+0x29bc5f0
	void OnWeaponPartChanged(int32_t InWeaponID); // Function Solarland.UIBackpackWeaponWidget.OnWeaponPartChanged // (Final|Native|Protected) // @ game+0x29bc560
	void OnWeaponAmmoChanged(int32_t InWeaponSlot, int32_t InCurrNum, int32_t MaxNum); // Function Solarland.UIBackpackWeaponWidget.OnWeaponAmmoChanged // (Final|Native|Protected) // @ game+0x29bc450
	void OnCharacterLevelChanged(int32_t NewLevel); // Function Solarland.UIBackpackWeaponWidget.OnCharacterLevelChanged // (Final|Native|Protected) // @ game+0x29bbf50
};

// Class Solarland.UIBackpackWidget
// Size: 0x5f8 (Inherited: 0x400)
struct UUIBackpackWidget : USolarUserWidget {
	struct UUIWeaponPartWidget* Weapon_Part_Muzzle; // 0x400(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Grip; // 0x408(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Clip; // 0x410(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Scope; // 0x418(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_GunStock; // 0x420(0x08)
	struct UUIBackpackWeaponWidget* Weapon_A; // 0x428(0x08)
	struct UUIBackpackWeaponWidget* Weapon_B; // 0x430(0x08)
	struct UCanvasPanel* PickupPosition; // 0x438(0x08)
	struct UButton* Button_Close; // 0x440(0x08)
	struct UUIDropMaskWidget* OnDropMask; // 0x448(0x08)
	struct UUIDropMaskWidget* OnDropMask_2; // 0x450(0x08)
	struct UUIEquipMaskWidget* EquipDragMask; // 0x458(0x08)
	struct UCanvasPanel* Panel_PickUp; // 0x460(0x08)
	struct USolarListView* PickupList; // 0x468(0x08)
	struct UImage* Img_PickupBG; // 0x470(0x08)
	struct UUIBackpackItemWidget* Item_Ammo_SMG; // 0x478(0x08)
	struct UUIBackpackItemWidget* Item_Ammo_Assult; // 0x480(0x08)
	struct UUIBackpackItemWidget* Item_Ammo_Sniper; // 0x488(0x08)
	struct UUIBackpackItemWidget* Item_Ammo_Shotgun; // 0x490(0x08)
	struct UUIBackpackItemWidget* Item_Medical; // 0x498(0x08)
	struct UUIBackpackItemWidget* Item_Shield; // 0x4a0(0x08)
	struct UUIBackpackItemWidget* Item_Shield_Large; // 0x4a8(0x08)
	struct UUIBackpackEquipmentWidget* Equipment_Armor; // 0x4b0(0x08)
	struct UUIBackpackEquipmentWidget* Equipment_Jet; // 0x4b8(0x08)
	struct UUIBackpackEquipmentWidget* Equipment_Fly; // 0x4c0(0x08)
	struct UUIBackpackEquipmentWidget* Equipment_Respawner; // 0x4c8(0x08)
	struct UUIBackpackEquipmentWidget* Weapon_Special; // 0x4d0(0x08)
	struct UUIBackpackEquipmentWidget* UI_Activity_Item_2; // 0x4d8(0x08)
	struct UUIBackpackEquipmentWidget* UI_Activity_Item_3; // 0x4e0(0x08)
	struct USolarCheckButton* Btn_Switcher; // 0x4e8(0x08)
	struct UCanvasPanel* Panel_CharacterInfo; // 0x4f0(0x08)
	struct FString EquipTexPrePath; // 0x4f8(0x10)
	bool bWeaponPartInit; // 0x508(0x01)
	char pad_509[0x7]; // 0x509(0x07)
	struct TArray<int32_t> ItemIDArray; // 0x510(0x10)
	struct TArray<struct UUIBackpackItemWidget*> ItemWidgetArray; // 0x520(0x10)
	struct TArray<struct UUIBackpackEquipmentWidget*> ActivityItemWidgetArray; // 0x530(0x10)
	struct TArray<int32_t> ActivityItemIDArray; // 0x540(0x10)
	struct TArray<enum class EItemType> EquipTypeArray; // 0x550(0x10)
	struct TArray<struct UUIBackpackEquipmentWidget*> EquipWidgetArray; // 0x560(0x10)
	struct TArray<struct UUIDragWidget*> EquipDragWidgetArray; // 0x570(0x10)
	struct TArray<struct UImage*> EquipBGArray; // 0x580(0x10)
	struct TArray<struct UImage*> EquipQualityBGArray; // 0x590(0x10)
	struct TArray<struct UImage*> EquipIconArray; // 0x5a0(0x10)
	struct TArray<struct UButton*> EquipBtnArray; // 0x5b0(0x10)
	int32_t MaxUpgradeLevel; // 0x5c0(0x04)
	enum class EBackpackInfoPageType CurrentInfoPageType; // 0x5c4(0x01)
	char pad_5C5[0x3]; // 0x5c5(0x03)
	struct FName ToggleBackpackLevelName; // 0x5c8(0x08)
	struct FName ToggleBackpackSkillName; // 0x5d0(0x08)
	struct FName ToggleBackpackInfoName; // 0x5d8(0x08)
	bool bCharacterInfoPanelOpen; // 0x5e0(0x01)
	char pad_5E1[0x3]; // 0x5e1(0x03)
	int32_t ActivityItemOutcomeID; // 0x5e4(0x04)
	char pad_5E8[0x10]; // 0x5e8(0x10)

	void UpdateReviveItemDisplay(); // Function Solarland.UIBackpackWidget.UpdateReviveItemDisplay // (Final|Native|Protected) // @ game+0x29bce10
	void UpdateLevelProgress(float Level); // Function Solarland.UIBackpackWidget.UpdateLevelProgress // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void ToggleCharacterInfoSkill(); // Function Solarland.UIBackpackWidget.ToggleCharacterInfoSkill // (Final|Native|Protected) // @ game+0x29bcdd0
	void ToggleCharacterInfoLevel(); // Function Solarland.UIBackpackWidget.ToggleCharacterInfoLevel // (Final|Native|Protected) // @ game+0x29bcdb0
	void ShowWeaponUI(); // Function Solarland.UIBackpackWidget.ShowWeaponUI // (Final|Native|Protected|BlueprintCallable) // @ game+0x29bcd90
	void ShowWeaponPartsUI(); // Function Solarland.UIBackpackWidget.ShowWeaponPartsUI // (Final|Native|Protected|BlueprintCallable) // @ game+0x29bcd70
	void ShowItemUI(); // Function Solarland.UIBackpackWidget.ShowItemUI // (Final|Native|Protected|BlueprintCallable) // @ game+0x29bcd50
	void ShowHomeItemUI(); // Function Solarland.UIBackpackWidget.ShowHomeItemUI // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void ShowEquipUI(); // Function Solarland.UIBackpackWidget.ShowEquipUI // (Final|Native|Protected|BlueprintCallable) // @ game+0x29bcd30
	void RefreshUpgradeRewardsDetail(int32_t Level, struct TArray<enum class EClassLevelUpRewardType>& RewardTypeArray, struct TArray<struct FSoftObjectPath>& IconPathArray, struct TArray<struct FString>& DescriptionArray); // Function Solarland.UIBackpackWidget.RefreshUpgradeRewardsDetail // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshTacticalSkillInfo(struct FString Name, struct FString Description, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.UIBackpackWidget.RefreshTacticalSkillInfo // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshSuperSkillInfo(struct FString Name, struct FString Description, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.UIBackpackWidget.RefreshSuperSkillInfo // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshSummonWeapon(); // Function Solarland.UIBackpackWidget.RefreshSummonWeapon // (Final|Native|Protected|BlueprintCallable) // @ game+0x29bcbb0
	void RefreshPassiveSkillInfo(struct FString Name, struct FString Description, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.UIBackpackWidget.RefreshPassiveSkillInfo // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshItemUI(); // Function Solarland.UIBackpackWidget.RefreshItemUI // (Final|Native|Protected) // @ game+0x29bcb90
	void RefreshCharacterNameAndIcon(struct FString Name, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.UIBackpackWidget.RefreshCharacterNameAndIcon // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshActivityItemUI(); // Function Solarland.UIBackpackWidget.RefreshActivityItemUI // (Final|Native|Protected) // @ game+0x29bc910
	void OnWeaponWidgetClicked(); // Function Solarland.UIBackpackWidget.OnWeaponWidgetClicked // (Final|Native|Protected|Const) // @ game+0x29bc8f0
	void OnSetDropMaskVisibility(bool bVisible); // Function Solarland.UIBackpackWidget.OnSetDropMaskVisibility // (Final|Native|Protected) // @ game+0x29bc3c0
	void OnPlayerStateRep(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.UIBackpackWidget.OnPlayerStateRep // (Final|Native|Protected) // @ game+0x29bc2f0
	void OnPickupSingleDataUpdated(struct UObject* InItemObj); // Function Solarland.UIBackpackWidget.OnPickupSingleDataUpdated // (Final|Native|Protected) // @ game+0x29bc260
	void OnPickupListDataUpdated(struct TArray<struct UObject*>& InPickupDataList, struct TArray<int32_t>& InThisIds); // Function Solarland.UIBackpackWidget.OnPickupListDataUpdated // (Final|Native|Protected|HasOutParms) // @ game+0x29bc140
	void OnClickedBtnSwither(int32_t Index); // Function Solarland.UIBackpackWidget.OnClickedBtnSwither // (Final|Native|Protected) // @ game+0x29bc0b0
	void OnCharacterLevelExpChanged(int32_t NewLevel, float NewExpRatio); // Function Solarland.UIBackpackWidget.OnCharacterLevelExpChanged // (Final|Native|Protected) // @ game+0x29bbfe0
	void OnCharacterIDSet(int32_t CharacterId); // Function Solarland.UIBackpackWidget.OnCharacterIDSet // (Final|Native|Protected) // @ game+0x29bbec0
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.UIBackpackWidget.OnCharacterDead // (Final|Native|Protected) // @ game+0x29bbe30
	void OnBtnCloseClicked(); // Function Solarland.UIBackpackWidget.OnBtnCloseClicked // (Final|Native|Protected) // @ game+0x29bbe10
	void OnBackpackVisibilitySet(bool bInVisible); // Function Solarland.UIBackpackWidget.OnBackpackVisibilitySet // (Final|Native|Protected) // @ game+0x29bbd80
	void OnBackpackTabChanged(struct FString TabKey); // Function Solarland.UIBackpackWidget.OnBackpackTabChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x29bbc90
	void InitDefaultWeaponPart(); // Function Solarland.UIBackpackWidget.InitDefaultWeaponPart // (Final|Native|Protected|BlueprintCallable) // @ game+0x29bbc70
	void HideUpgradeDetail(int32_t Level); // Function Solarland.UIBackpackWidget.HideUpgradeDetail // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	struct FString ClearWidgetInPanel(struct FName& InPanelName); // Function Solarland.UIBackpackWidget.ClearWidgetInPanel // (Final|Native|Protected|HasOutParms) // @ game+0x29b80e0
	void BindDelegates(); // Function Solarland.UIBackpackWidget.BindDelegates // (Final|Native|Protected) // @ game+0x29bbc30
	struct FString AddWidgetToPanel(struct UPanelSlot*& OutResult, struct UWidget* InWidget, struct FName& InPanelName, bool bReplaceOld); // Function Solarland.UIBackpackWidget.AddWidgetToPanel // (Final|Native|Protected|HasOutParms) // @ game+0x29b7ee0
};

// Class Solarland.UIComponentNationalFlag
// Size: 0x430 (Inherited: 0x400)
struct UUIComponentNationalFlag : USolarUserWidget {
	struct FVector2D NationalFlagSize; // 0x400(0x08)
	struct FVector2D ClanFlagSize; // 0x408(0x08)
	bool bIgnoreAccountFlagSwitch; // 0x410(0x01)
	char pad_411[0x7]; // 0x411(0x07)
	struct UImage* Img_FlagIcon; // 0x418(0x08)
	struct USolarImageURL* Img_ClanFlag; // 0x420(0x08)
	int32_t CurFlagId; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)

	void SetNationalFlagType(); // Function Solarland.UIComponentNationalFlag.SetNationalFlagType // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetDefaultNationalFlag(); // Function Solarland.UIComponentNationalFlag.SetDefaultNationalFlag // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetDefaultClanFlag(); // Function Solarland.UIComponentNationalFlag.SetDefaultClanFlag // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void SetClanFlagType(); // Function Solarland.UIComponentNationalFlag.SetClanFlagType // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void RefreshFlagByPath(struct FString TextureFullPath); // Function Solarland.UIComponentNationalFlag.RefreshFlagByPath // (Final|Native|Public|BlueprintCallable) // @ game+0x29bcaf0
	void RefreshFlag(int32_t InFlagID); // Function Solarland.UIComponentNationalFlag.RefreshFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x29bca60
	void RefreshClanFlagByPath(struct FString TextureFullPath); // Function Solarland.UIComponentNationalFlag.RefreshClanFlagByPath // (Final|Native|Public|BlueprintCallable) // @ game+0x29bc9c0
	void LoadClanFlagByUrl(); // Function Solarland.UIComponentNationalFlag.LoadClanFlagByUrl // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	bool IsExclusiveFlagId(int32_t InFlagID); // Function Solarland.UIComponentNationalFlag.IsExclusiveFlagId // (Event|Protected|BlueprintEvent|Const) // @ game+0x2d0d160
	bool IsBroadCastMode(); // Function Solarland.UIComponentNationalFlag.IsBroadCastMode // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.UIComponentPlayerName
// Size: 0x400 (Inherited: 0x400)
struct UUIComponentPlayerName : USolarUserWidget {

	void UpdatePlayerNameAndStyle(struct FString NickName, char VipType, bool bCheat, bool bKilled); // Function Solarland.UIComponentPlayerName.UpdatePlayerNameAndStyle // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetVip(char VipType); // Function Solarland.UIComponentPlayerName.SetVip // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetTextColorAndOpacity(struct FSlateColor InColor); // Function Solarland.UIComponentPlayerName.SetTextColorAndOpacity // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetText(struct FString Content); // Function Solarland.UIComponentPlayerName.SetText // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetStyle(char VipType, bool bCheat, bool bKilled); // Function Solarland.UIComponentPlayerName.SetStyle // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetDeath(bool bDeath); // Function Solarland.UIComponentPlayerName.SetDeath // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetCheater(bool bCheat); // Function Solarland.UIComponentPlayerName.SetCheater // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.UICustomNoticeLayerWidget
// Size: 0x5c8 (Inherited: 0x400)
struct UUICustomNoticeLayerWidget : USolarUserWidget {
	struct TMap<enum class ECustomNoticeType, struct UCanvasPanel*> NoticePanel; // 0x400(0x50)
	char pad_450[0xa0]; // 0x450(0xa0)
	struct TMap<enum class ECustomNoticeColor, struct FNoticeColorData> NoticeColor; // 0x4f0(0x50)
	struct UCustomNoticeTable* NoticeConfig; // 0x540(0x08)
	struct UCustomNoticeImageTable* NoticeImageConfig; // 0x548(0x08)
	struct FSoftObjectPath GlobalKillNoticeWidgetPath; // 0x550(0x18)
	int32_t GlobalKillMaxShowNum; // 0x568(0x04)
	int32_t GlobalKillNoticeBeginPosX; // 0x56c(0x04)
	int32_t GlobalKillNoticeBeginPosY; // 0x570(0x04)
	int32_t GlobalKillNoticeInterval; // 0x574(0x04)
	char pad_578[0x28]; // 0x578(0x28)
	struct TWeakObjectPtr<struct UBattleNoticePickup> PickUpNoticeNormalPtr; // 0x5a0(0x08)
	struct TWeakObjectPtr<struct UBattleNoticePickup> PickUpNoticeHomePtr; // 0x5a8(0x08)
	struct TWeakObjectPtr<struct UBattleNoticeEquipReplace> EquipReplaceNoticePtr; // 0x5b0(0x08)
	char pad_5B8[0x4]; // 0x5b8(0x04)
	int32_t SkydivingCaptainNoticeId; // 0x5bc(0x04)
	struct UWidgetAnimation* Anim_OBDesktopLayout; // 0x5c0(0x08)

	void UpdateGlobalKillNoticePosition(); // Function Solarland.UICustomNoticeLayerWidget.UpdateGlobalKillNoticePosition // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ad6de0
	void ShowWidgetAsync(struct FNoticeData& NoticeData); // Function Solarland.UICustomNoticeLayerWidget.ShowWidgetAsync // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x29c45f0
	void ShowGameNoticeCustom(struct FString NoticeText, enum class ECustomNoticeType NoticeType, struct UUINoticeBase* NoticeClass, float NoticeTime, enum class ECustomNoticeColor NoticeColor, struct UPaperSprite* NoticeIcon); // Function Solarland.UICustomNoticeLayerWidget.ShowGameNoticeCustom // (Final|Native|Public|BlueprintCallable) // @ game+0x29c43e0
	void ShowGameNoticeByID(int32_t NoticeId, struct TMap<struct FString, struct FString>& Param); // Function Solarland.UICustomNoticeLayerWidget.ShowGameNoticeByID // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x29c4290
	void OnSkydivingCaptainChanged(int32_t TeamIndex, struct FString playerName, bool IsLocalPlayer); // Function Solarland.UICustomNoticeLayerWidget.OnSkydivingCaptainChanged // (Final|Native|Protected) // @ game+0x29c2880
	void OnShowHUDGameNotice(int32_t InNoticeID, struct FHUDNoticeParams& InNoticeParams); // Function Solarland.UICustomNoticeLayerWidget.OnShowHUDGameNotice // (Final|Native|Protected|HasOutParms) // @ game+0x29c2730
	void OnPickUpNoticeAnimFinished(); // Function Solarland.UICustomNoticeLayerWidget.OnPickUpNoticeAnimFinished // (Final|Native|Private) // @ game+0x29c26f0
	void OnNoticeVisibilitySet(enum class ECustomNoticeType InNoticeType, bool InVisibility); // Function Solarland.UICustomNoticeLayerWidget.OnNoticeVisibilitySet // (Final|Native|Protected) // @ game+0x29c2620
	void InitNoticePanel(); // Function Solarland.UICustomNoticeLayerWidget.InitNoticePanel // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.UIDefenderPlaerShowWidget
// Size: 0x488 (Inherited: 0x400)
struct UUIDefenderPlaerShowWidget : USolarUserWidget {
	struct UScaleBox* ScaleBox_Card; // 0x400(0x08)
	struct FString playerName; // 0x408(0x10)
	int32_t Level; // 0x418(0x04)
	int32_t RankLevelID; // 0x41c(0x04)
	int32_t PlayerGender; // 0x420(0x04)
	bool bIsMyTeam; // 0x424(0x01)
	char pad_425[0x3]; // 0x425(0x03)
	int32_t PlayerSeat; // 0x428(0x04)
	bool bIsMySelf; // 0x42c(0x01)
	char pad_42D[0x3]; // 0x42d(0x03)
	int32_t CardPose; // 0x430(0x04)
	int32_t Cardbackground; // 0x434(0x04)
	struct TArray<struct FExpRankMedalData> AllExpRankMedalData; // 0x438(0x10)
	int32_t CharacterExp; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct TArray<struct FMedalInfo> TargetCardMedalArray; // 0x450(0x10)
	struct ASolarPlayerState* PlayerState; // 0x460(0x08)
	struct ASolarBusinessCardCharacter* RTCharacter; // 0x468(0x08)
	struct AActor* RTCharacterBackground; // 0x470(0x08)
	struct FVector RTLocation; // 0x478(0x0c)
	char pad_484[0x4]; // 0x484(0x04)

	void SetPlayerShowInfo(struct ASolarPlayerState* ps, bool bIsSelf, int32_t Seat, bool bIsSelfTeam, int32_t SelfLevel, struct FVector CardRTLocation); // Function Solarland.UIDefenderPlaerShowWidget.SetPlayerShowInfo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x29c39d0
	void SetPlayerBusinessInfo(struct ASolarPlayerState* ps, int32_t PlayerNumber, struct FExpRankMedalData ExpRankMedalData); // Function Solarland.UIDefenderPlaerShowWidget.SetPlayerBusinessInfo // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetCharacterSkin(); // Function Solarland.UIDefenderPlaerShowWidget.SetCharacterSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void SetBusinessCard(int32_t PoseId, int32_t BackgroundId, int32_t SkinId, struct UScaleBox* ParentPanel); // Function Solarland.UIDefenderPlaerShowWidget.SetBusinessCard // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnRefreshWidget(); // Function Solarland.UIDefenderPlaerShowWidget.OnRefreshWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x29c2710
	struct FString GetNameCardCharacterPathByCharacterIDAndCardPose(int32_t CharacterId, int32_t CardPoseID); // Function Solarland.UIDefenderPlaerShowWidget.GetNameCardCharacterPathByCharacterIDAndCardPose // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.UIDefenderTeamShowWidget
// Size: 0x520 (Inherited: 0x400)
struct UUIDefenderTeamShowWidget : USolarUserWidget {
	struct UUIDefenderPlaerShowWidget* Player_2; // 0x400(0x08)
	struct UUIDefenderPlaerShowWidget* Player_3; // 0x408(0x08)
	struct UUIDefenderPlaerShowWidget* Player_4; // 0x410(0x08)
	struct UUIDefenderPlaerShowWidget* Player_5; // 0x418(0x08)
	struct UWidgetAnimation* Exit_Anim; // 0x420(0x08)
	int32_t PlayerNum; // 0x428(0x04)
	bool bIsMyTeam; // 0x42c(0x01)
	char pad_42D[0x3]; // 0x42d(0x03)
	struct FName LevelName; // 0x430(0x08)
	struct FString ActorName_2; // 0x438(0x10)
	struct FString ActorName_3; // 0x448(0x10)
	struct FString ActorName_4; // 0x458(0x10)
	struct FString ActorName_5; // 0x468(0x10)
	struct FString CameraName_2; // 0x478(0x10)
	struct FString CameraName_3; // 0x488(0x10)
	struct FString CameraName_4; // 0x498(0x10)
	struct FString CameraName_5; // 0x4a8(0x10)
	struct TArray<struct ASolarPlayerState*> MyTeamPlayerState; // 0x4b8(0x10)
	struct TArray<struct ASolarPlayerState*> DefenderTeamPlayerState; // 0x4c8(0x10)
	struct TArray<struct UUIDefenderPlaerShowWidget*> ShowWidget; // 0x4d8(0x10)
	struct TArray<struct AActor*> OutActors; // 0x4e8(0x10)
	struct TArray<struct ASceneCapture2D*> OutSceneCapture2Ds; // 0x4f8(0x10)
	struct TArray<struct FWidgetTransform> Transforms; // 0x508(0x10)
	char pad_518[0x8]; // 0x518(0x08)

	void UpdateOpeningShow(enum class EDefenderTeamType TeamType); // Function Solarland.UIDefenderTeamShowWidget.UpdateOpeningShow // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SwitchTeamShow(enum class EDefenderTeamType TeamType); // Function Solarland.UIDefenderTeamShowWidget.SwitchTeamShow // (Final|Native|Public|BlueprintCallable) // @ game+0x29c4760
	void ShowPlayerInfo(); // Function Solarland.UIDefenderTeamShowWidget.ShowPlayerInfo // (Final|Native|Public) // @ game+0x29c45d0
	void SetMyTeamPlayerState(struct TArray<struct ASolarPlayerState*>& TeamPlayerState); // Function Solarland.UIDefenderTeamShowWidget.SetMyTeamPlayerState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x29c3920
	void SetDefenderTeamPlayerState(struct TArray<struct ASolarPlayerState*>& TeamPlayerState); // Function Solarland.UIDefenderTeamShowWidget.SetDefenderTeamPlayerState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x29c2cb0
	void CloseDefenderTeamShowWidget(); // Function Solarland.UIDefenderTeamShowWidget.CloseDefenderTeamShowWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x29c1360
};

// Class Solarland.UIDragWidget
// Size: 0x540 (Inherited: 0x400)
struct UUIDragWidget : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct UImage* ItemImage; // 0x410(0x08)
	struct USizeBox* WidgetSize; // 0x418(0x08)
	struct FSlateBrush ImageOuter; // 0x420(0xe0)
	struct FVector2D ImageOffset; // 0x500(0x08)
	struct FVector2D ImageSize; // 0x508(0x08)
	float DragImageScale; // 0x510(0x04)
	int32_t ItemID; // 0x514(0x04)
	int32_t ItemNum; // 0x518(0x04)
	enum class EItemType ItemType; // 0x51c(0x04)
	struct FString ItemName; // 0x520(0x10)
	int32_t WeaponSlot; // 0x530(0x04)
	struct FVector2D OffsetVec; // 0x534(0x08)
	bool bIsDrag; // 0x53c(0x01)
	char pad_53D[0x3]; // 0x53d(0x03)

	void SetDragWidgetSize(struct FVector2D InSize); // Function Solarland.UIDragWidget.SetDragWidgetSize // (Final|Native|Public|HasDefaults) // @ game+0x29c3160
	void SetDragWeaponSlot(int32_t InWeaponSlot); // Function Solarland.UIDragWidget.SetDragWeaponSlot // (Final|Native|Public) // @ game+0x29c30d0
	void SetDragItemData(int32_t InID, int32_t InNum, int32_t InItemType, struct FString InItemName); // Function Solarland.UIDragWidget.SetDragItemData // (Final|Native|Public) // @ game+0x29c2f60
	void SetDragImageRenderScale(struct FVector2D InScale); // Function Solarland.UIDragWidget.SetDragImageRenderScale // (Final|Native|Public|HasDefaults) // @ game+0x29c2ee0
	void SetDragImageBrushFromTexture(struct UTexture2D* InTexture2D, bool InMatchSize); // Function Solarland.UIDragWidget.SetDragImageBrushFromTexture // (Final|Native|Public) // @ game+0x29c2e10
	void SetDragImageBrush(struct FSlateBrush& InBrush); // Function Solarland.UIDragWidget.SetDragImageBrush // (Final|Native|Public|HasOutParms) // @ game+0x29c2d60
	void OnEndDragDropCall(bool InVisibility); // Function Solarland.UIDragWidget.OnEndDragDropCall // (Final|Native|Protected) // @ game+0x29c2570
	void BindDelegates(); // Function Solarland.UIDragWidget.BindDelegates // (Final|Native|Protected) // @ game+0x29c1190
};

// Class Solarland.UIDropMaskWidget
// Size: 0x408 (Inherited: 0x400)
struct UUIDropMaskWidget : USolarUserWidget {
	struct USolarDragDropOperation* OperationData; // 0x400(0x08)

	void OnDropMutiItem(int32_t InItemID, int32_t InTotalCount); // Function Solarland.UIDropMaskWidget.OnDropMutiItem // (Final|Native|Protected) // @ game+0x29c24a0
	void OnDropConfirmHandle(); // Function Solarland.UIDropMaskWidget.OnDropConfirmHandle // (Final|Native|Protected) // @ game+0x29c2480
};

// Class Solarland.UIEmojiContainer
// Size: 0x450 (Inherited: 0x400)
struct UUIEmojiContainer : USolarUserWidget {
	char pad_400[0x10]; // 0x400(0x10)
	struct UCanvasPanel* Panel; // 0x410(0x08)
	char pad_418[0x10]; // 0x418(0x10)
	struct USolarUserWidget* CommonEmojiBubbleSubClass; // 0x428(0x08)
	int32_t PreCreateEmojiNum; // 0x430(0x04)
	char pad_434[0x4]; // 0x434(0x04)
	struct FSoftObjectPath EmojiTablePath; // 0x438(0x18)
};

// Class Solarland.UIEquipMaskWidget
// Size: 0x410 (Inherited: 0x400)
struct UUIEquipMaskWidget : USolarUserWidget {
	struct USolarDragDropOperation* OperationData; // 0x400(0x08)
	struct UImage* img_Mask; // 0x408(0x08)
};

// Class Solarland.UIGlobalConfig
// Size: 0x120 (Inherited: 0x30)
struct UUIGlobalConfig : UDataAsset {
	struct TMap<char, struct FTeamMemberColor> TeamMemberColors; // 0x30(0x50)
	struct TMap<char, struct FItemQualityData> ItemQualityData; // 0x80(0x50)
	struct TMap<char, struct FOBTeamColor> OBTeamColors; // 0xd0(0x50)

	struct FOBTeamColor GetOBTeamColor(int32_t TeamNum); // Function Solarland.UIGlobalConfig.GetOBTeamColor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29c16b0
};

// Class Solarland.UIInputDevice
// Size: 0x400 (Inherited: 0x400)
struct UUIInputDevice : USolarUserWidget {

	void UpdateInputType(enum class ECommonInputType InputDevice); // Function Solarland.UIInputDevice.UpdateInputType // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.UILayerBase
// Size: 0x280 (Inherited: 0x260)
struct UUILayerBase : UUserWidget {
	struct UCanvasPanel* InGameBaseUILayer; // 0x260(0x08)
	struct UCanvasPanel* VirtualControllerLayer; // 0x268(0x08)
	struct UCanvasPanel* InGamePopupLayer; // 0x270(0x08)
	struct UCanvasPanel* OutGameUILayer; // 0x278(0x08)
};

// Class Solarland.UIManager
// Size: 0x140 (Inherited: 0x30)
struct UUIManager : USolarGameManager {
	char pad_30[0x40]; // 0x30(0x40)
	struct TArray<struct FDelegate> OnBigMapOpenDelegateGroup; // 0x70(0x10)
	struct TArray<struct FDelegate> OnBigMapVisibilityChangedDelegateGroup; // 0x80(0x10)
	struct UDataTable* BattleWidgetSettings; // 0x90(0x08)
	struct USolarUIRoot* SolarUIRoot; // 0x98(0x08)
	struct TArray<struct FDestroyObjectStruct> NeedToDestroyObjects; // 0xa0(0x10)
	char pad_B0[0x90]; // 0xb0(0x90)

	void WatchReference(); // Function Solarland.UIManager.WatchReference // (Final|Native|Public) // @ game+0x9043b0
	void WatchAllReference(); // Function Solarland.UIManager.WatchAllReference // (Final|Native|Public) // @ game+0x9043b0
	void UpdateButtonSprite(struct UButton* TargetButton, struct FString AtlasType, struct FString NormalSpName, struct FString PressedSpName, struct FString HoveredSpName, struct FString DisableSpName); // Function Solarland.UIManager.UpdateButtonSprite // (Final|Native|Static|Public) // @ game+0x29c4800
	void TriggerDelegate(); // Function Solarland.UIManager.TriggerDelegate // (Final|Native|Public) // @ game+0x29c47e0
	struct USolarUserWidget* ShowUIByName(struct FString InName, int32_t RootID); // Function Solarland.UIManager.ShowUIByName // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void SetWidgetLayout(struct UWidget* InWidget, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY); // Function Solarland.UIManager.SetWidgetLayout // (Final|Native|Static|Public) // @ game+0x29c3f50
	void SetWidgetChildrenLayout(struct UUserWidget* InRootWidget, struct FName& PanelAliasName, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY); // Function Solarland.UIManager.SetWidgetChildrenLayout // (Final|Native|Static|Public|HasOutParms) // @ game+0x29c3bc0
	struct USolarUserWidget* SetUIActive(struct USolarUserWidget* InWidget, bool Inactive); // Function Solarland.UIManager.SetUIActive // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetMaterialInstanceParams(struct UImage* Image, struct FString ParamName, float Value); // Function Solarland.UIManager.SetMaterialInstanceParams // (Final|Native|Static|Public) // @ game+0x29c3800
	void SetMaterialInstanceColor(struct UImage* Image, struct FString ParamName, struct FLinearColor& Value); // Function Solarland.UIManager.SetMaterialInstanceColor // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x29c36e0
	void SetLoadingUIByLevelAndDisplay(int32_t InModelID, int32_t InLevel, int32_t InMapIndex, bool InDisableCustomLoading); // Function Solarland.UIManager.SetLoadingUIByLevelAndDisplay // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void SetImageTintColor(struct UImage* Img, struct FLinearColor& InColor); // Function Solarland.UIManager.SetImageTintColor // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x29c3620
	void SetImageTexture(struct UImage* Img, struct UTexture2D* Texture); // Function Solarland.UIManager.SetImageTexture // (Final|Native|Static|Public) // @ game+0x29c3560
	void SetImageFromTextureOrSprite(struct UImage* DstImage, struct FSoftObjectPath& Path, bool bMatchSize); // Function Solarland.UIManager.SetImageFromTextureOrSprite // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x29c3430
	void SetImageColor(struct UImage* Img, float R, float G, float B, float A); // Function Solarland.UIManager.SetImageColor // (Final|Native|Static|Public) // @ game+0x29c32a0
	void SetFireInputStyle(struct UFireInputWidget* FireInput, struct USlateWidgetStyleAsset* Style); // Function Solarland.UIManager.SetFireInputStyle // (Final|Native|Static|Public) // @ game+0x29c31e0
	void SetCheckedState(struct UCheckBox* Box, enum class ECheckBoxState State); // Function Solarland.UIManager.SetCheckedState // (Final|Native|Static|Public) // @ game+0x29c2bf0
	void SetCheckboxStyle(struct UCheckBox* CheckBox, struct USlateWidgetStyleAsset* Style); // Function Solarland.UIManager.SetCheckboxStyle // (Final|Native|Static|Public) // @ game+0x29c2b30
	void SetCheckBoxIsChecked(struct UCheckBox* CheckBox, bool Checked); // Function Solarland.UIManager.SetCheckBoxIsChecked // (Final|Native|Static|Public) // @ game+0x29c2a70
	void SetButtonStyle(struct UButton* Btn, struct USlateWidgetStyleAsset* Style); // Function Solarland.UIManager.SetButtonStyle // (Final|Native|Static|Public) // @ game+0x29c29b0
	void RemoveAllWidgets(); // Function Solarland.UIManager.RemoveAllWidgets // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void OpenUIGM(struct FString UIID, int32_t RootID); // Function Solarland.UIManager.OpenUIGM // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void OpenConfirmUIInLua(int32_t ConfirmID); // Function Solarland.UIManager.OpenConfirmUIInLua // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void OnLuaHotReloadFileChanged(struct FString LuaSysPath, struct FString LuaPathName); // Function Solarland.UIManager.OnLuaHotReloadFileChanged // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void OnInitLuaHotReload(); // Function Solarland.UIManager.OnInitLuaHotReload // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void OnGameManagersInitialized(); // Function Solarland.UIManager.OnGameManagersInitialized // (Final|Native|Protected) // @ game+0x29c2600
	void OnClientStartGame(); // Function Solarland.UIManager.OnClientStartGame // (Final|Native|Protected) // @ game+0x29c2460
	void LuaCloseUI(struct FString MapName); // Function Solarland.UIManager.LuaCloseUI // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct UTexture2D* LoadTexture2DBySoftPath(struct FSoftObjectPath& Path); // Function Solarland.UIManager.LoadTexture2DBySoftPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x29c23b0
	struct UTexture2D* LoadTexture2DByPath(struct UObject* InOuter, struct FString FullPath); // Function Solarland.UIManager.LoadTexture2DByPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x29c22d0
	struct UTexture2D* LoadTexture2D(struct UObject* InOuter, struct FString TextureType, struct FString TexName); // Function Solarland.UIManager.LoadTexture2D // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x29c2190
	struct UTexture2D* LoadQualityBGPostfix(struct UObject* InOuter, int32_t InQuality, struct FString Postfix); // Function Solarland.UIManager.LoadQualityBGPostfix // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x29c2070
	struct UTexture2D* LoadQualityBG(struct UObject* InOuter, int32_t InQuality); // Function Solarland.UIManager.LoadQualityBG // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x29c1fa0
	struct UPaperSprite* LoadPaperSprite(struct UObject* InOuter, struct FString AtlasPath, struct FString SpName); // Function Solarland.UIManager.LoadPaperSprite // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x29c1e60
	struct UMaterialInterface* LoadMaterialInstance(struct UObject* InOuter, struct FString MaterialType, struct FString MaterialName); // Function Solarland.UIManager.LoadMaterialInstance // (Final|Native|Static|Public) // @ game+0x29c1d20
	bool IsWidgetVisibleForDisplay(struct UWidget* InWidget); // Function Solarland.UIManager.IsWidgetVisibleForDisplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x29c1c90
	void InvalidateWidgetPrepass(struct UWidget* InWidget); // Function Solarland.UIManager.InvalidateWidgetPrepass // (Final|Native|Static|Public) // @ game+0x29c1c10
	void InitLvlTextWidget(struct UTextBlock* InHeadTextWidget, struct UTextBlock* InTrailTextWidget); // Function Solarland.UIManager.InitLvlTextWidget // (Final|Native|Static|Public) // @ game+0x29c1b50
	struct ASolarCharacter* GetWidgetOwningCharacter(struct UWidget* InWidget); // Function Solarland.UIManager.GetWidgetOwningCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x29c1ac0
	struct FString GetWeaponTextureFullPath(struct FString& IconPath); // Function Solarland.UIManager.GetWeaponTextureFullPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x29c19d0
	struct UUserWidget* GetUIPanel(struct FString MapName); // Function Solarland.UIManager.GetUIPanel // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FString GetTexture2DFullPath(struct FString& PrePath, struct FString& IconPath); // Function Solarland.UIManager.GetTexture2DFullPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x29c1870
	struct FString GetQualityBGFullPath(int32_t InQuality, bool bWithSuffix); // Function Solarland.UIManager.GetQualityBGFullPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x29c1760
	struct UTexture2D* GetPlayerAvatarByID(int32_t PlayerAvatarID); // Function Solarland.UIManager.GetPlayerAvatarByID // (Event|Public|BlueprintEvent) // @ game+0xb66830
	int32_t GetLobbyID(); // Function Solarland.UIManager.GetLobbyID // (Event|Public|BlueprintEvent|Const) // @ game+0xb66830
	bool GetCheckBoxIsChecked(struct UCheckBox* CheckBox); // Function Solarland.UIManager.GetCheckBoxIsChecked // (Final|Native|Static|Public) // @ game+0x29c1620
	struct UCanvasPanelSlot* GetCanvasPanelSlotForWidget(struct UWidget* Widget); // Function Solarland.UIManager.GetCanvasPanelSlotForWidget // (Final|Native|Static|Public) // @ game+0x29c1590
	struct FCustomWidget_TableRow GetBattleWidgetSetting(struct FString ConfigName); // Function Solarland.UIManager.GetBattleWidgetSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x29c1410
	struct UUserWidget* GetBattleBackpackWidget(); // Function Solarland.UIManager.GetBattleBackpackWidget // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void ExitSpectateMode(); // Function Solarland.UIManager.ExitSpectateMode // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void EnterSpectateMode(); // Function Solarland.UIManager.EnterSpectateMode // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void DestroyWidget(struct UUserWidget* InWidget); // Function Solarland.UIManager.DestroyWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x29c1380
	void CloseUIGM(struct FString UIID); // Function Solarland.UIManager.CloseUIGM // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void CloseLoadingUI(); // Function Solarland.UIManager.CloseLoadingUI // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct FMargin ClampInScreenOffsets(struct UWidget* WorldContextObject, struct FMargin& Offsets, struct FAnchors& Anchors, struct FVector2D& Alignment); // Function Solarland.UIManager.ClampInScreenOffsets // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x29c11b0
};

// Class Solarland.UIMassDiscardWidget
// Size: 0x460 (Inherited: 0x400)
struct UUIMassDiscardWidget : USolarUserWidget {
	char pad_400[0x20]; // 0x400(0x20)
	struct UButton* Button_Increase; // 0x420(0x08)
	struct UButton* Button_Decrease; // 0x428(0x08)
	struct UComponentButtonBaseWidget* Button_Confirm; // 0x430(0x08)
	struct UComponentButtonBaseWidget* Button_Cancel; // 0x438(0x08)
	struct USlider* Slider_Quantity; // 0x440(0x08)
	struct UProgressBar* ProgressBar_Quantity; // 0x448(0x08)
	struct UTextBlock* Text_Quantity; // 0x450(0x08)
	struct UTextBlock* Text_Total; // 0x458(0x08)

	void SetDiscardItemData(int32_t InItemID, int32_t InTotalCount); // Function Solarland.UIMassDiscardWidget.SetDiscardItemData // (Final|Native|Protected) // @ game+0x29c8f10
	void OnSliderValueChanged(float InValue); // Function Solarland.UIMassDiscardWidget.OnSliderValueChanged // (Final|Native|Protected) // @ game+0x29c8b00
	void OnLongPressUpdate(); // Function Solarland.UIMassDiscardWidget.OnLongPressUpdate // (Final|Native|Protected) // @ game+0x29c89a0
	void OnDiscardItemNumChanged(); // Function Solarland.UIMassDiscardWidget.OnDiscardItemNumChanged // (Final|Native|Protected) // @ game+0x29c88f0
	void OnBtnIncreaseReleased(); // Function Solarland.UIMassDiscardWidget.OnBtnIncreaseReleased // (Final|Native|Protected) // @ game+0x29c8800
	void OnBtnIncreasePressed(); // Function Solarland.UIMassDiscardWidget.OnBtnIncreasePressed // (Final|Native|Protected) // @ game+0x29c8840
	void OnBtnIncreaseClicked(); // Function Solarland.UIMassDiscardWidget.OnBtnIncreaseClicked // (Final|Native|Protected) // @ game+0x29c8820
	void OnBtnDecreaseReleased(); // Function Solarland.UIMassDiscardWidget.OnBtnDecreaseReleased // (Final|Native|Protected) // @ game+0x29c8800
	void OnBtnDecreasePressed(); // Function Solarland.UIMassDiscardWidget.OnBtnDecreasePressed // (Final|Native|Protected) // @ game+0x29c87e0
	void OnBtnDecreaseClicked(); // Function Solarland.UIMassDiscardWidget.OnBtnDecreaseClicked // (Final|Native|Protected) // @ game+0x29c87c0
	void OnBtnConfirmClicked(); // Function Solarland.UIMassDiscardWidget.OnBtnConfirmClicked // (Final|Native|Protected) // @ game+0x29c87a0
	void OnBtnCancelClicked(); // Function Solarland.UIMassDiscardWidget.OnBtnCancelClicked // (Final|Native|Protected) // @ game+0x29c8780
	void OnBackpackHUDVisibilityChanged(bool bVisible); // Function Solarland.UIMassDiscardWidget.OnBackpackHUDVisibilityChanged // (Final|Native|Protected) // @ game+0x29c86f0
	void InitWidgets(); // Function Solarland.UIMassDiscardWidget.InitWidgets // (Final|Native|Protected) // @ game+0x29c8570
	void BindDelegates(); // Function Solarland.UIMassDiscardWidget.BindDelegates // (Final|Native|Protected) // @ game+0x29c8330
};

// Class Solarland.UINavigationManager
// Size: 0xc0 (Inherited: 0x30)
struct UUINavigationManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct TMap<struct FString, struct USolarUserWidget*> WidgetOpenedMap; // 0x38(0x50)
	struct TArray<struct UUserWidget*> TmpRemovedWidgets; // 0x88(0x10)
	struct TArray<struct TWeakObjectPtr<struct USolarUserWidget>> CachedCreatedWidgets; // 0x98(0x10)
	char pad_A8[0x10]; // 0xa8(0x10)
	struct USolarUIRoot* SolarUIRoot; // 0xb8(0x08)

	void UnbindCustomControlDefine(struct USolarUserWidget* PanelWidget, struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.UnbindCustomControlDefine // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct USolarUserWidget* ShowUIBySubClass(struct USolarUserWidget* SubClass, enum class EUIRoot RootID); // Function Solarland.UINavigationManager.ShowUIBySubClass // (Final|Native|Public) // @ game+0x29c9080
	bool ShowPanelUI(struct USolarUserWidget* createWidget, struct FString UniqueWidgetKey); // Function Solarland.UINavigationManager.ShowPanelUI // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void RemoveUserWidgetLuaRef(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.RemoveUserWidgetLuaRef // (Final|Native|Public) // @ game+0x29c8130
	void RemoveUIFromOpenedMap(struct FString UniqueWidgetKey); // Function Solarland.UINavigationManager.RemoveUIFromOpenedMap // (Final|Native|Public) // @ game+0x29c8c40
	void RemoveAllSolarWidgets(); // Function Solarland.UINavigationManager.RemoveAllSolarWidgets // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void PrePooledWidgetReset(struct UUserWidget* UserWidget); // Function Solarland.UINavigationManager.PrePooledWidgetReset // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void OnShowPanelUI(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.OnShowPanelUI // (Final|Native|Protected) // @ game+0x29c8a70
	void OnPostLoadMapInitUIRoot(struct UWorld* InWorld); // Function Solarland.UINavigationManager.OnPostLoadMapInitUIRoot // (Final|Native|Public) // @ game+0x92e240
	void OnOpenPanelUI(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.OnOpenPanelUI // (Final|Native|Protected) // @ game+0x29c89c0
	void OnHidePanelUI(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.OnHidePanelUI // (Final|Native|Protected) // @ game+0x29c8910
	void OnDisplayMetricsChanged(); // Function Solarland.UINavigationManager.OnDisplayMetricsChanged // (Event|Protected|BlueprintEvent) // @ game+0xb66830
	void OnClosePanelUI(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.OnClosePanelUI // (Final|Native|Protected) // @ game+0x29c8860
	bool IsUserWidgetInScope(struct USolarUserWidget*& Class, enum class EScope& OutCurScope, enum class EScope& OutDstScope); // Function Solarland.UINavigationManager.IsUserWidgetInScope // (Final|Native|Public|HasOutParms|Const) // @ game+0x29c8590
	struct USolarUserWidget* GetShowTopWidget(); // Function Solarland.UINavigationManager.GetShowTopWidget // (Event|Public|BlueprintEvent) // @ game+0xb66830
	struct UUserWidget* GetOpenedWidget(struct FString UniqueWidgetKey); // Function Solarland.UINavigationManager.GetOpenedWidget // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void CloseUIBySubClass(struct USolarUserWidget* SubClass); // Function Solarland.UINavigationManager.CloseUIBySubClass // (Final|Native|Public) // @ game+0x29c8460
	void ClosePanelUI(struct USolarUserWidget* closeWidget, struct FString UniqueWidgetKey); // Function Solarland.UINavigationManager.ClosePanelUI // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void ClearNonPersistentWidget(); // Function Solarland.UINavigationManager.ClearNonPersistentWidget // (Final|Native|Public) // @ game+0x29c8420
	void ClearAllOpenedWidget(); // Function Solarland.UINavigationManager.ClearAllOpenedWidget // (Final|Native|Public) // @ game+0x29c8400
	void BindWidgetVisibilityChangedEvent(struct FDelegate& VisibilityChangedEvent); // Function Solarland.UINavigationManager.BindWidgetVisibilityChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x29c8350
	void BindCustomControlDefine(struct USolarUserWidget* PanelWidget, struct USolarUserWidget* UserWidget, struct FString FullPath); // Function Solarland.UINavigationManager.BindCustomControlDefine // (Event|Public|BlueprintEvent) // @ game+0xb66830
	void BatchRemovedWidgets(bool bRemoveAll); // Function Solarland.UINavigationManager.BatchRemovedWidgets // (Final|Native|Public) // @ game+0x29c82a0
	void AddUIToOpenedMap(struct FString UniqueWidgetKey, struct USolarUserWidget* Widget); // Function Solarland.UINavigationManager.AddUIToOpenedMap // (Final|Native|Public) // @ game+0x29c81c0
	void AddBatchRemovedWidget(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.AddBatchRemovedWidget // (Final|Native|Public) // @ game+0x29c8130
};

// Class Solarland.UINotice_TaskComplete
// Size: 0x460 (Inherited: 0x428)
struct UUINotice_TaskComplete : UUINoticeBase {
	struct UWidgetAnimation* FinishTaskAnim; // 0x428(0x08)
	struct UWidgetAnimation* ExitTaskAnim; // 0x430(0x08)
	struct USolarTextBlock* Txt_TaskPercent; // 0x438(0x08)
	struct USolarTextBlock* Txt_TaskDescTex; // 0x440(0x08)
	struct UCanvasPanel* Normal; // 0x448(0x08)
	struct UCanvasPanel* Finish; // 0x450(0x08)
	char pad_458[0x8]; // 0x458(0x08)

	void OnTaskFinishedAnimEnd(); // Function Solarland.UINotice_TaskComplete.OnTaskFinishedAnimEnd // (Final|Native|Public) // @ game+0x29c8b80
};

// Class Solarland.UINoticeKill
// Size: 0x570 (Inherited: 0x428)
struct UUINoticeKill : UUINoticeBase {
	struct UUIComponentPlayerName* UIComponentKillerName; // 0x428(0x08)
	struct UUIComponentPlayerName* UIComponentVictimName; // 0x430(0x08)
	struct USolarImage* KillTypeWidget; // 0x438(0x08)
	struct UImage* WeaponTypeWidget; // 0x440(0x08)
	struct UImage* ImgeKillBar_Special; // 0x448(0x08)
	struct UImage* ImgeKillBar_Common; // 0x450(0x08)
	struct UUIComponentNationalFlag* KillerFlagWidget; // 0x458(0x08)
	struct UUIComponentNationalFlag* VictimFlagWidget; // 0x460(0x08)
	struct UUIInputDevice* UI_Input_Device_Left; // 0x468(0x08)
	struct UUIInputDevice* UI_Input_Device_Right; // 0x470(0x08)
	struct UUserWidget* KillerTeamNumb; // 0x478(0x08)
	struct UUserWidget* KilledTeamNumb; // 0x480(0x08)
	struct UContentWidget* RevengeContentWidget; // 0x488(0x08)
	struct UContentWidget* ShutDownContentWidget; // 0x490(0x08)
	struct UContentWidget* KillLeaderWidget; // 0x498(0x08)
	struct USolarTextBlock* Txt_PlayerID; // 0x4a0(0x08)
	struct UCanvasPanel* Panel_KillBar; // 0x4a8(0x08)
	struct UCanvasPanel* SpecialKillStyle; // 0x4b0(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Name; // 0x4b8(0x08)
	struct USolarRichTextBlock* Txt_PlayerName; // 0x4c0(0x08)
	struct TMap<struct FString, struct UKillReportWidget*> SpecialKillWidgetMap; // 0x4c8(0x50)
	struct TMap<struct FString, struct UKillReportWidget*> KillBackGroundWidgetMap; // 0x518(0x50)
	int32_t DefaultId; // 0x568(0x04)
	char pad_56C[0x4]; // 0x56c(0x04)

	void SetVictimVipType(char VictimVipType); // Function Solarland.UINoticeKill.SetVictimVipType // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetKillerVipType(char KillerVipType); // Function Solarland.UINoticeKill.SetKillerVipType // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	int32_t RefreshSwticher(); // Function Solarland.UINoticeKill.RefreshSwticher // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.UINoticeKillCombo
// Size: 0x480 (Inherited: 0x428)
struct UUINoticeKillCombo : UUINoticeBase {
	enum class ELocalNoticeType LocalNoticeType; // 0x428(0x01)
	char pad_429[0x7]; // 0x429(0x07)
	struct UWidgetSwitcher* WidgetSwitcher_1; // 0x430(0x08)
	struct UImage* Img_KillEffect; // 0x438(0x08)
	struct UCanvasPanel* Panel_KillEffectInfo; // 0x440(0x08)
	struct USolarTextBlock* Text_KillEffectInfo; // 0x448(0x08)
	struct USolarTextBlock* Text_ShutDownInfo; // 0x450(0x08)
	struct USolarTextBlock* Text_KillerName; // 0x458(0x08)
	struct USolarImage* Img_Killer; // 0x460(0x08)
	struct USolarTextBlock* Text_KilledName; // 0x468(0x08)
	struct USolarImage* Img_Killed; // 0x470(0x08)
	struct USolarRichTextBlock* Text_TerminatorName; // 0x478(0x08)
};

// Class Solarland.UINoticeKillLeader
// Size: 0x450 (Inherited: 0x428)
struct UUINoticeKillLeader : UUINoticeBase {
	bool bIsKillLeaderShutDown; // 0x428(0x01)
	char pad_429[0x7]; // 0x429(0x07)
	struct UWidgetSwitcher* WidgetSwitcher_1; // 0x430(0x08)
	struct USolarTextBlock* text_killleader; // 0x438(0x08)
	struct USolarTextBlock* Txt_shutdown_killleader; // 0x440(0x08)
	struct USolarTextBlock* Txt_death_name; // 0x448(0x08)
};

// Class Solarland.UINoticeKillLeaderInfo
// Size: 0x430 (Inherited: 0x428)
struct UUINoticeKillLeaderInfo : UUINoticeBase {
	struct USolarTextBlock* Text_KillLeaderInfo; // 0x428(0x08)
};

// Class Solarland.UINoticeKillTotal
// Size: 0x4f0 (Inherited: 0x428)
struct UUINoticeKillTotal : UUINoticeBase {
	struct UWidgetSwitcher* wgs_combo_phase; // 0x428(0x08)
	struct USolarTextBlock* Text_NickName; // 0x430(0x08)
	int32_t ActiveKillTotalWidgetIndex; // 0x438(0x04)
	char pad_43C[0x4]; // 0x43c(0x04)
	struct TMap<int32_t, int32_t> KillTotalTextMap; // 0x440(0x50)
	char pad_490[0x60]; // 0x490(0x60)
};

// Class Solarland.UINoticeReviveDisableHint
// Size: 0x448 (Inherited: 0x428)
struct UUINoticeReviveDisableHint : UUINoticeBase {
	struct USolarTextBlock* Text_CDData; // 0x428(0x08)
	struct UWidgetAnimation* Loop_Anim; // 0x430(0x08)
	char pad_438[0x10]; // 0x438(0x10)
};

// Class Solarland.UINoticeSkydivingCaptain
// Size: 0x428 (Inherited: 0x428)
struct UUINoticeSkydivingCaptain : UUINoticeBase {

	void RefreshContent(int32_t TeamIndex, struct FString playerName, bool IsLocalPlayer); // Function Solarland.UINoticeSkydivingCaptain.RefreshContent // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.UINoticeVictory
// Size: 0x4a0 (Inherited: 0x428)
struct UUINoticeVictory : UUINoticeBase {
	struct FMulticastInlineDelegate OnAppearAnimFinishedDelegate; // 0x428(0x10)
	struct FName BackToLobbyActionName; // 0x438(0x08)
	struct UWidgetAnimation* Appear_Anim; // 0x440(0x08)
	struct UWidgetAnimation* Loop_Anim; // 0x448(0x08)
	struct UWidgetAnimation* Exit_Anim; // 0x450(0x08)
	struct UButton* Btn_Return; // 0x458(0x08)
	struct USolarTextBlock* Txt_Exit; // 0x460(0x08)
	struct FDelegate EndAnimFinishedEvent; // 0x468(0x10)
	struct FDelegate AppearAnimFinishedEvent; // 0x478(0x10)
	char pad_488[0x18]; // 0x488(0x18)

	void PlayAppearAnim(float InTimeToEnd); // Function Solarland.UINoticeVictory.PlayAppearAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x29c8ba0
	void OnReturnBtnClick(); // Function Solarland.UINoticeVictory.OnReturnBtnClick // (Final|Native|Protected) // @ game+0x29c8a50
	void OnEndAnimFinish(); // Function Solarland.UINoticeVictory.OnEndAnimFinish // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ad6d00
	void OnAppearAnimFinished(); // Function Solarland.UINoticeVictory.OnAppearAnimFinished // (Final|Native|Protected) // @ game+0x29c86d0
};

// Class Solarland.UINoticeVipPlayerJoin
// Size: 0x448 (Inherited: 0x428)
struct UUINoticeVipPlayerJoin : UUINoticeBase {
	struct UUIComponentPlayerName* UI_Component_PlayerName; // 0x428(0x08)
	struct UUIInputDevice* UI_Input_Device; // 0x430(0x08)
	struct UTextBlock* Txt_Entrance_Info; // 0x438(0x08)
	struct UUIComponentNationalFlag* FlagWidget; // 0x440(0x08)

	void SetVipType(char VipType); // Function Solarland.UINoticeVipPlayerJoin.SetVipType // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.UIPanelConfig
// Size: 0x78 (Inherited: 0x28)
struct UUIPanelConfig : UObject {
	struct TMap<enum class EUIPanelName, struct FUIPanelConfigEntry> PanelConfigs; // 0x28(0x50)
};

// Class Solarland.UISubsystem
// Size: 0xb0 (Inherited: 0x30)
struct UUISubsystem : UGameInstanceSubsystem {
	struct UUIGlobalConfig* GlobalConfig; // 0x30(0x08)
	struct UUIPanelConfig* UIPanelConfig; // 0x38(0x08)
	struct TMap<struct FString, struct USolarUserWidget*> CacheWidgets; // 0x40(0x50)
	char pad_90[0x20]; // 0x90(0x20)

	void PostInitializeAfterPatch(); // Function Solarland.UISubsystem.PostInitializeAfterPatch // (Final|Native|Public) // @ game+0x29c8c20
};

// Class Solarland.UISystemSettings
// Size: 0xe0 (Inherited: 0x38)
struct UUISystemSettings : UDeveloperSettings {
	int32_t InGameWidgetPoolSize; // 0x38(0x04)
	int32_t VirtualControllerPoolSize; // 0x3c(0x04)
	int32_t InGamePopupPoolSize; // 0x40(0x04)
	int32_t OutGameWidgetPoolSize; // 0x44(0x04)
	struct FSoftObjectPath UIGlobalConfig; // 0x48(0x18)
	struct FSoftClassPath UILayer; // 0x60(0x18)
	struct FSoftClassPath UIPanelConfigClass; // 0x78(0x18)
	struct TMap<struct FGameplayTag, struct FInteractionButtonSpec> InteractionButtons; // 0x90(0x50)
};

// Class Solarland.UIWeaponPartWidget
// Size: 0x588 (Inherited: 0x400)
struct UUIWeaponPartWidget : USolarUserWidget {
	struct TMap<enum class EWeaponPartType, struct FSoftObjectPath> AnimIconsMap; // 0x400(0x50)
	struct UImage* Img_Icon; // 0x450(0x08)
	struct UImage* Img_LevelBg; // 0x458(0x08)
	struct UImage* Img_PartsBg; // 0x460(0x08)
	struct USizeBox* WidgetSize; // 0x468(0x08)
	struct UImage* Img_Scope_Icon; // 0x470(0x08)
	struct UWidgetAnimation* Anim_Scope_Equip; // 0x478(0x08)
	struct UWidgetAnimation* Anim_Scope_TakeOff; // 0x480(0x08)
	struct UWidgetAnimation* Anim_Scope_Change; // 0x488(0x08)
	struct UUserWidget* DragDropWidgetClass; // 0x490(0x08)
	struct FLinearColor ColorNotEquip; // 0x498(0x10)
	struct FLinearColor ColorDisable; // 0x4a8(0x10)
	struct FLinearColor ColorNormal; // 0x4b8(0x10)
	struct FLinearColor ColorQuality; // 0x4c8(0x10)
	int32_t ItemID; // 0x4d8(0x04)
	int32_t ItemNum; // 0x4dc(0x04)
	enum class EItemType ItemType; // 0x4e0(0x04)
	char pad_4E4[0x4]; // 0x4e4(0x04)
	struct FString ItemName; // 0x4e8(0x10)
	int32_t WeaponSlot; // 0x4f8(0x04)
	enum class EWeaponPartType WeaponPartType; // 0x4fc(0x01)
	char pad_4FD[0x3]; // 0x4fd(0x03)
	int32_t WeaponPartLevel; // 0x500(0x04)
	enum class EWeaponPartType EquippedPartType; // 0x504(0x01)
	enum class EUIWeaponPartState CurrentState; // 0x505(0x01)
	bool bIsable; // 0x506(0x01)
	bool bUseHUDIcon; // 0x507(0x01)
	struct FVector2D OffsetVec; // 0x508(0x08)
	struct TMap<int32_t, struct FString> DefaultWeaponPartIconMaps; // 0x510(0x50)
	struct FString WeaponPartPrePath; // 0x560(0x10)
	bool bApplyToWeaponSlot; // 0x570(0x01)
	char pad_571[0x3]; // 0x571(0x03)
	struct FLinearColor PartBGDefaultColor; // 0x574(0x10)
	char pad_584[0x4]; // 0x584(0x04)

	void UpdateWidgetByEnable(bool InIsable); // Function Solarland.UIWeaponPartWidget.UpdateWidgetByEnable // (Final|Native|Public) // @ game+0x29cd230
	void SetWidgetSize(struct FVector2D& InSize); // Function Solarland.UIWeaponPartWidget.SetWidgetSize // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x29cd160
	void SetWeaponSlot(int32_t InWeaponSlot); // Function Solarland.UIWeaponPartWidget.SetWeaponSlot // (Final|Native|Public) // @ game+0x29cd0d0
	void SetWeaponPartData(int32_t InID, int32_t InNumber); // Function Solarland.UIWeaponPartWidget.SetWeaponPartData // (Final|Native|Public) // @ game+0x29cd000
	void SetState(bool bIsEmpty); // Function Solarland.UIWeaponPartWidget.SetState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetIsEnable(bool InIsable); // Function Solarland.UIWeaponPartWidget.SetIsEnable // (Final|Native|Public) // @ game+0x29ccef0
	void SetBrushFromTexture(struct UTexture2D* InTextureAsset, bool InMatchSize); // Function Solarland.UIWeaponPartWidget.SetBrushFromTexture // (Final|Native|Protected) // @ game+0x29cce20
	void SetBorder(enum class EItemQualityType Quality); // Function Solarland.UIWeaponPartWidget.SetBorder // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void InitDefaultWeaponPart(enum class EWeaponPartType InWeaponPartType, bool InUseHUDIcon); // Function Solarland.UIWeaponPartWidget.InitDefaultWeaponPart // (Final|Native|Public) // @ game+0x29ccd30
	void ClearWeaponPartData(); // Function Solarland.UIWeaponPartWidget.ClearWeaponPartData // (Final|Native|Public) // @ game+0x29ccd10
};

// Class Solarland.UpdateChunkAssignDataCommandlet
// Size: 0x88 (Inherited: 0x80)
struct UUpdateChunkAssignDataCommandlet : UCommandlet {
	char pad_80[0x8]; // 0x80(0x08)
};

// Class Solarland.SolarBTT_NgaiBotBattle
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_NgaiBotBattle : UBTTask_BlackboardBase {
};

// Class Solarland.VehicleAIPath
// Size: 0x238 (Inherited: 0x228)
struct AVehicleAIPath : AActor {
	struct USplineComponent* PathComponent; // 0x228(0x08)
	int32_t PathId; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
};

// Class Solarland.VehicleAISpawnerInGuide
// Size: 0x280 (Inherited: 0x278)
struct AVehicleAISpawnerInGuide : ASpawnerInGuide {
	float NoDamageLeftHP; // 0x278(0x04)
	int32_t PathId; // 0x27c(0x04)
};

// Class Solarland.VehicleCameraDataAsset
// Size: 0x3c0 (Inherited: 0x30)
struct UVehicleCameraDataAsset : UDataAsset {
	struct FRuntimeFloatCurve TargetArmLengthCurve; // 0x30(0x88)
	float TargetArmLengthInterpSpeed; // 0xb8(0x04)
	struct FVector TargetOffset; // 0xbc(0x0c)
	struct FName TargetOffsetSocket; // 0xc8(0x08)
	bool bTargetOffsetIgnoreRoll; // 0xd0(0x01)
	bool bTargetOffsetIgnorePitch; // 0xd1(0x01)
	bool bCameraRollSameWithVehicleRoll; // 0xd2(0x01)
	char pad_D3[0x1]; // 0xd3(0x01)
	struct FVector SocketOffset; // 0xd4(0x0c)
	float MinPitch; // 0xe0(0x04)
	float MaxPitch; // 0xe4(0x04)
	float MinYaw; // 0xe8(0x04)
	float MaxYaw; // 0xec(0x04)
	struct FRuntimeFloatCurve CameraFovCurve; // 0xf0(0x88)
	float CameraFovInterpSpeed; // 0x178(0x04)
	bool bCameraFollowVehicle; // 0x17c(0x01)
	char pad_17D[0x3]; // 0x17d(0x03)
	float DefaultPitch; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct FRuntimeFloatCurve CameraFollowSpeedCurve; // 0x188(0x88)
	float CameraFollowTimeThreshold; // 0x210(0x04)
	float CameraResetFollowSpeed; // 0x214(0x04)
	float CameraFollowSpeedThreshold; // 0x218(0x04)
	bool bEnableCameraLag; // 0x21c(0x01)
	char pad_21D[0x3]; // 0x21d(0x03)
	struct FRuntimeFloatCurve CameraLagInterpSpeedCurve; // 0x220(0x88)
	struct FRuntimeFloatCurve CameraLagCurve; // 0x2a8(0x88)
	struct FRuntimeFloatCurve AdditionalTargetOffsetOnZ; // 0x330(0x88)
	float BlendTime; // 0x3b8(0x04)
	char pad_3BC[0x4]; // 0x3bc(0x04)
};

// Class Solarland.VehicleCollisionSubsystem
// Size: 0x80 (Inherited: 0x30)
struct UVehicleCollisionSubsystem : UEngineSubsystem {
	char pad_30[0x50]; // 0x30(0x50)
};

// Class Solarland.VehicleMoveWidget
// Size: 0x500 (Inherited: 0x1e0)
struct UVehicleMoveWidget : USolarJoyStick {
	struct FSlateBrush JoyStickThumb; // 0x1e0(0xe0)
	struct FSlateBrush JoyStickThumbPress; // 0x2c0(0xe0)
	struct FVector2D ThumbSize; // 0x3a0(0x08)
	char pad_3A8[0x8]; // 0x3a8(0x08)
	struct FSlateBrush SprintImage; // 0x3b0(0xe0)
	struct FVector2D SprintSize; // 0x490(0x08)
	float TriggerPressTime; // 0x498(0x04)
	float DistanceSprintImageToCenter; // 0x49c(0x04)
	float ShowLockSprintIconSectorAngle; // 0x4a0(0x04)
	struct FVector2D VisualSize; // 0x4a4(0x08)
	char pad_4AC[0x14]; // 0x4ac(0x14)
	struct FMulticastInlineDelegate OnSprintIconActive; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnSprintIconHide; // 0x4d0(0x10)
	struct FMulticastInlineDelegate OnSprintLockIconActive; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnSprintChangeToCenterState; // 0x4f0(0x10)

	void SetSprintToCenterDistance(float Distance); // Function Solarland.VehicleMoveWidget.SetSprintToCenterDistance // (Final|Native|Public) // @ game+0x29ccf80
	void ResetSprintState(); // Function Solarland.VehicleMoveWidget.ResetSprintState // (Final|Native|Public) // @ game+0x29cce00
};

// Class Solarland.VehiclePreviewActor
// Size: 0x540 (Inherited: 0x540)
struct AVehiclePreviewActor : APreviewActor {
};

// Class Solarland.SolarVehicleSkinData
// Size: 0x5d0 (Inherited: 0x30)
struct USolarVehicleSkinData : UDataAsset {
	struct UStaticMesh* VehicleRootMesh; // 0x30(0x08)
	struct USkeletalMesh* VehicleSkinMesh; // 0x38(0x08)
	struct USolarVehicleAnimInstance* VehicleAnimClass; // 0x40(0x08)
	struct TArray<struct UMaterialInterface*> SkinOverrideMaterials; // 0x48(0x10)
	struct TArray<float> CustomPrimitiveData; // 0x58(0x10)
	bool bBackLampData; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct FSolarVehicleMaterialData BackLampData; // 0x70(0x28)
	struct TArray<struct FSolarVehicleMaterialData> VehicleMaterialDataArray; // 0x98(0x10)
	struct TArray<int32_t> StealthHideMats; // 0xa8(0x10)
	bool bHealthUIID; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	int32_t HealthUIID; // 0xbc(0x04)
	struct UVehicleCameraDataAsset* CameraDataAsset; // 0xc0(0x08)
	struct USolarVehicleSoundDataAsset* VehicleSkinSoundData; // 0xc8(0x08)
	struct TArray<struct FVehicleSkinSeat> SkinSeatSetting; // 0xd0(0x10)
	struct TMap<enum class EPhysicalSurface, struct TSoftObjectPtr<UParticleSystem>> SkinRaiseDustEffects; // 0xe0(0x50)
	bool bWaterVFX; // 0x130(0x01)
	char pad_131[0x7]; // 0x131(0x07)
	struct TSoftObjectPtr<UParticleSystem> SkinEnterWaterVFX[0x4]; // 0x138(0xa0)
	bool bCameraVFX; // 0x1d8(0x01)
	char pad_1D9[0x7]; // 0x1d9(0x07)
	struct FVehicleVFX SkinGCCameraVFX; // 0x1e0(0x90)
	struct TArray<struct FVehicleVFX> SkinNosVFXes; // 0x270(0x10)
	bool bDamagedVFX; // 0x280(0x01)
	char pad_281[0xf]; // 0x281(0x0f)
	struct FVehicleVFX SkinDamagedVFXs[0x5]; // 0x290(0x2d0)
	struct TSoftObjectPtr<UStaticMesh> BrokenMesh; // 0x560(0x28)
	struct TArray<struct UMaterialInterface*> BrokenMeshOverrideMaterials; // 0x588(0x10)
	struct TArray<struct FVehicleSkinWeakPoint> VehicleWeakPointContainer; // 0x598(0x10)
	struct TArray<struct FVehicleVFXMesh> DriverOnVFXMeshes; // 0x5a8(0x10)
	struct TArray<struct FVehicleVFX> DriverOnVFXs; // 0x5b8(0x10)
	char pad_5C8[0x8]; // 0x5c8(0x08)
};

// Class Solarland.SolarWheeledVehicleSkinData
// Size: 0x670 (Inherited: 0x5d0)
struct USolarWheeledVehicleSkinData : USolarVehicleSkinData {
	struct TMap<enum class EPhysicalSurface, struct TSoftObjectPtr<UParticleSystem>> BrokenWheelDustEffect; // 0x5c8(0x50)
	struct UCurveFloat* DustEffectScaleCurve; // 0x618(0x08)
	struct TMap<enum class EPhysicalSurface, struct TSoftObjectPtr<UParticleSystem>> DriftParticles; // 0x620(0x50)
};

// Class Solarland.SolarHoverVehicleSkinData
// Size: 0x820 (Inherited: 0x5d0)
struct USolarHoverVehicleSkinData : USolarVehicleSkinData {
	struct TArray<struct FVehicleVFX> ThrusterParticles; // 0x5c8(0x10)
	bool bMovementParticle; // 0x5d8(0x01)
	struct FVehicleVFX MovementParticles[0x4]; // 0x5e0(0x240)
};

// Class Solarland.SolarLeggedVehicleSkinData
// Size: 0x5e0 (Inherited: 0x5d0)
struct USolarLeggedVehicleSkinData : USolarVehicleSkinData {
	bool bCapsuleHeight; // 0x5c8(0x01)
	float CapsuleHalfHeight; // 0x5cc(0x04)
	bool bCapsuleRadius; // 0x5d0(0x01)
	float CapsuleRadius; // 0x5d4(0x04)
	char pad_5DA[0x6]; // 0x5da(0x06)
};

// Class Solarland.SolarTransformerVehicleSkinData
// Size: 0x5e0 (Inherited: 0x5d0)
struct USolarTransformerVehicleSkinData : USolarVehicleSkinData {
	bool bTransformerWeapon; // 0x5c8(0x01)
	struct ASolarVehicleWeapon* TransformerSkinWeapon[0x2]; // 0x5d0(0x10)
};

// Class Solarland.SolarVehicleSkinPreviewData
// Size: 0x420 (Inherited: 0x30)
struct USolarVehicleSkinPreviewData : UDataAsset {
	struct FSolarVehicleSkinPreviewMeshInfo VehicleMeshInfo; // 0x30(0xc0)
	struct TArray<struct FSolarVehicleSkinPreviewMeshInfo> WeaponMeshInfos; // 0xf0(0x10)
	struct FSolarVehicleSkinPreviewMeshInfo MirrorMeshInfo; // 0x100(0xc0)
	struct TArray<struct FSolarVehicleSkinPreviewMeshInfo> MirrorWeaponMeshInfos; // 0x1c0(0x10)
	struct TArray<struct FVehicleVFX> VehicleVFXs; // 0x1d0(0x10)
	struct TSoftObjectPtr<UParticleSystem> SwitchParticleEffectPath; // 0x1e0(0x28)
	struct TArray<struct FSolarVehicleMaterialData> VehicleMaterialDataArray; // 0x208(0x10)
	char pad_218[0x8]; // 0x218(0x08)
	struct FTransform PageTransforms[0xa]; // 0x220(0x1e0)
	struct FSolarVehicleSkinPreviewPageInfo PageInfos[0xa]; // 0x400(0x14)
	char pad_414[0xc]; // 0x414(0x0c)
};

// Class Solarland.SolarVehiclePreview
// Size: 0x328 (Inherited: 0x228)
struct ASolarVehiclePreview : AActor {
	struct USkeletalMeshComponent* VehicleMesh; // 0x228(0x08)
	struct USkeletalMeshComponent* DissovleVehicleMesh; // 0x230(0x08)
	struct USkeletalMeshComponent* FresnelVehicleMesh; // 0x238(0x08)
	struct TArray<struct USkeletalMeshComponent*> WeaponMeshes; // 0x240(0x10)
	struct TArray<struct USkeletalMeshComponent*> DissovleWeaponMeshes; // 0x250(0x10)
	struct TArray<struct USkeletalMeshComponent*> FresnelWeaponMeshes; // 0x260(0x10)
	struct USkeletalMeshComponent* MirrorVehicleMesh; // 0x270(0x08)
	struct USkeletalMeshComponent* MirrorDissovleVehicleMesh; // 0x278(0x08)
	struct USkeletalMeshComponent* MirrorFresnelVehicleMesh; // 0x280(0x08)
	struct TArray<struct USkeletalMeshComponent*> MirrorWeaponMeshes; // 0x288(0x10)
	struct TArray<struct USkeletalMeshComponent*> MirrorDissovleWeaponMeshes; // 0x298(0x10)
	struct TArray<struct USkeletalMeshComponent*> MirrorFresnelWeaponMeshes; // 0x2a8(0x10)
	char pad_2B8[0x10]; // 0x2b8(0x10)
	float SwitchEffectInterval; // 0x2c8(0x04)
	char pad_2CC[0xc]; // 0x2cc(0x0c)
	struct TArray<struct FSwitchEffectInfo> DissovleEffectInfos; // 0x2d8(0x10)
	struct TArray<struct FSwitchEffectInfo> FresnelEffectInfos; // 0x2e8(0x10)
	char pad_2F8[0x30]; // 0x2f8(0x30)

	void StartPlayFresnelEffect(); // Function Solarland.SolarVehiclePreview.StartPlayFresnelEffect // (Final|Native|Public) // @ game+0x29cd210
	void StartPlayDissovleEffect(); // Function Solarland.SolarVehiclePreview.StartPlayDissovleEffect // (Final|Native|Public) // @ game+0x29cd1f0
};

// Class Solarland.VehicleSpeedScreenEffectWidget
// Size: 0x430 (Inherited: 0x408)
struct UVehicleSpeedScreenEffectWidget : USolarScreenEffectWidget {
	struct UOverlay* ScreenVFX; // 0x408(0x08)
	struct UImage* Left; // 0x410(0x08)
	struct UImage* Right; // 0x418(0x08)
	struct UMaterialInstanceDynamic* LeftMID; // 0x420(0x08)
	struct UMaterialInstanceDynamic* RightMID; // 0x428(0x08)
};

// Class Solarland.VehicleStealthGCNotify_Actor
// Size: 0x550 (Inherited: 0x2a0)
struct AVehicleStealthGCNotify_Actor : ASolarVehicleGCNotify_Actor {
	struct UMaterialInterface* StealthMaterial; // 0x2a0(0x08)
	struct FRuntimeFloatCurve NormalStealthCurve; // 0x2a8(0x88)
	char pad_330[0x8]; // 0x330(0x08)
	struct FRuntimeFloatCurve VehicleVelocityCurve; // 0x338(0x88)
	struct FRuntimeFloatCurve VehicleBeDamagedCurve; // 0x3c0(0x88)
	struct FName StealthMaterialParamPowerName; // 0x448(0x08)
	struct FName StealthMaterialParamDistanceName; // 0x450(0x08)
	float StealthMaterialParamDistanceValue; // 0x458(0x04)
	char pad_45C[0x4]; // 0x45c(0x04)
	struct TMap<enum class EStealthParamType, struct FStealthMaterialParams> VehicleStealthParamterSets; // 0x460(0x50)
	char pad_4B0[0x38]; // 0x4b0(0x38)
	struct FString EnterStealthEngine3p; // 0x4e8(0x10)
	struct FString EnterStealthEngine3pEnemy; // 0x4f8(0x10)
	struct FString CancelStealthEngine3p; // 0x508(0x10)
	struct FString CancelStealthEngine3pEnemy; // 0x518(0x10)
	float WarningOtherRange; // 0x528(0x04)
	float WarningOtherRangeOutThreshold; // 0x52c(0x04)
	char pad_530[0x10]; // 0x530(0x10)
	struct TArray<struct FCueContent> CueContents; // 0x540(0x10)

	void OnVehicleSkinUpdate(struct ASolarVehiclePawn* InVehiclePawn); // Function Solarland.VehicleStealthGCNotify_Actor.OnVehicleSkinUpdate // (Final|Native|Private) // @ game+0x29d0d60
	void OnToggleStealth(bool bInStealh); // Function Solarland.VehicleStealthGCNotify_Actor.OnToggleStealth // (Final|Native|Protected|BlueprintCallable) // @ game+0x29d0bb0
	void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.VehicleStealthGCNotify_Actor.OnPlayerGetOnVehicle // (Final|Native|Private) // @ game+0x29d0960
	void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.VehicleStealthGCNotify_Actor.OnPlayerGetOffVehicle // (Final|Native|Private) // @ game+0x29d07c0
};

// Class Solarland.VehicleStopArea
// Size: 0x228 (Inherited: 0x228)
struct AVehicleStopArea : AActor {
};

// Class Solarland.VehicleWeaponAnimInstance
// Size: 0x310 (Inherited: 0x2d0)
struct UVehicleWeaponAnimInstance : UWeaponAnimInstance {
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct FRotator VehicleWeaponPitchRot; // 0x2d8(0x0c)
	struct FRotator VehicleWeaponYawRot; // 0x2e4(0x0c)
	struct FVector LeftBoneIKOffset; // 0x2f0(0x0c)
	struct FVector RightBoneIKOffset; // 0x2fc(0x0c)
	bool bVehicleWeaponReloading; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
};

// Class Solarland.VehicleWeaponCrossHairWidget
// Size: 0x488 (Inherited: 0x300)
struct UVehicleWeaponCrossHairWidget : UCrossHairWidget {
	bool bUseSecondReticle; // 0x300(0x01)
	char pad_301[0x3]; // 0x301(0x03)
	float DirectionRadius; // 0x304(0x04)
	struct UCanvasPanel* SecondReticlePanel; // 0x308(0x08)
	struct UCanvasPanelSlot* SecondReticleSlot; // 0x310(0x08)
	struct UImage* ReticleDirectionImage; // 0x318(0x08)
	struct UCanvasPanelSlot* ReticleDirectionSlot; // 0x320(0x08)
	struct UImage* RangedImage; // 0x328(0x08)
	char pad_330[0x20]; // 0x330(0x20)
	struct USizeBox* AssistLockSizeBox; // 0x350(0x08)
	struct UCanvasPanel* ChangeNewAssistLockPawnPanel; // 0x358(0x08)
	struct UCanvasPanel* EnterLockPawnPanel; // 0x360(0x08)
	char pad_368[0x14]; // 0x368(0x14)
	struct TWeakObjectPtr<struct APawn> AssistLockPawn; // 0x37c(0x08)
	char pad_384[0x4]; // 0x384(0x04)
	struct UGlobalVehicleWeaponConfig* GVehicleWeaponConfig; // 0x388(0x08)
	struct ASolarPlayerController* SolarPlayerController; // 0x390(0x08)
	char pad_398[0x9c]; // 0x398(0x9c)
	float CurProgressOfPreEnterAssistLock; // 0x434(0x04)
	float PreEnterAssistLockSpeed; // 0x438(0x04)
	char pad_43C[0x10]; // 0x43c(0x10)
	float TimeIntervalToCheckBlock; // 0x44c(0x04)
	char pad_450[0x8]; // 0x450(0x08)
	struct UCanvasPanel* DynamicAimCanvas; // 0x458(0x08)
	struct UCanvasPanelSlot* DynamicAimCanvasSlot; // 0x460(0x08)
	float DynamicAimOccludeOpacity; // 0x468(0x04)
	struct FVector2D DynamicAimSmoothSpeed; // 0x46c(0x08)
	char pad_474[0xc]; // 0x474(0x0c)
	bool bAlwaysShowOverload; // 0x480(0x01)
	char pad_481[0x7]; // 0x481(0x07)

	struct FVector2D UpdateAssistLockUIScale(); // Function Solarland.VehicleWeaponCrossHairWidget.UpdateAssistLockUIScale // (BlueprintCosmetic|Native|Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x29d1120
	void UpdateAssistLockStateUI(enum class EAssistLockState InEAssistLockState); // Function Solarland.VehicleWeaponCrossHairWidget.UpdateAssistLockStateUI // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void SetWidgetResources(struct UCanvasPanel*& InSecondReticlePanel, struct UImage*& InReticleDirectionImage, struct UImage*& InRangedImage, struct USizeBox*& InAssistLockSizeBox, struct UCanvasPanel*& InChangeNewAssistLockPawnPanel, struct UCanvasPanel*& InEnterLockPawnPanel, struct UCanvasPanel*& InCanvas_Dynamic); // Function Solarland.VehicleWeaponCrossHairWidget.SetWidgetResources // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateVehicleRotationPitch(float InPitch); // Function Solarland.VehicleWeaponCrossHairWidget.OnUpdateVehicleRotationPitch // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateAimTargetDistance(float InDistance); // Function Solarland.VehicleWeaponCrossHairWidget.OnUpdateAimTargetDistance // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnTransformerWeaponChanged(enum class ETransformerType InType); // Function Solarland.VehicleWeaponCrossHairWidget.OnTransformerWeaponChanged // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnShowVehicleWeaponCrossHair(); // Function Solarland.VehicleWeaponCrossHairWidget.OnShowVehicleWeaponCrossHair // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	struct UCanvasPanel* GetSecondReticlePanel(); // Function Solarland.VehicleWeaponCrossHairWidget.GetSecondReticlePanel // (Event|Public|BlueprintEvent|Const) // @ game+0x2d0d160
	struct UImage* GetReticleDirectionImage(); // Function Solarland.VehicleWeaponCrossHairWidget.GetReticleDirectionImage // (Event|Public|BlueprintEvent|Const) // @ game+0x2d0d160
};

// Class Solarland.VehicleWeaponScopeWidget
// Size: 0x4a0 (Inherited: 0x400)
struct UVehicleWeaponScopeWidget : USolarUserWidget {
	enum class EVehicleWeaponScopeType PresetScopeType; // 0x400(0x01)
	char pad_401[0x7]; // 0x401(0x07)
	struct UImage* img_Vehicle; // 0x408(0x08)
	struct UImage* Img_Weapon; // 0x410(0x08)
	struct UCanvasPanel* Panel_Pitch; // 0x418(0x08)
	struct UWeaponScopeSliderWidget* Crosshair_Slider; // 0x420(0x08)
	struct USolarCheckBox* Btn_Pitch; // 0x428(0x08)
	struct UCanvasPanel* SecondReticlePanel; // 0x430(0x08)
	struct UCanvasPanel* Panel_BG; // 0x438(0x08)
	struct UCanvasPanel* Panel_Border; // 0x440(0x08)
	struct UImage* ReticleDirection; // 0x448(0x08)
	struct UCanvasPanel* Coredot; // 0x450(0x08)
	struct USolarWeaponRechamberWidget* HUD_CarFireCD_L; // 0x458(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x460(0x08)
	struct UCanvasPanelSlot* SecondReticleSlot; // 0x468(0x08)
	struct UCanvasPanelSlot* ReticleDirectionSlot; // 0x470(0x08)
	struct UImage* ProgressImage; // 0x478(0x08)
	struct UWidgetAnimation* ProgressAnima; // 0x480(0x08)
	struct UMaterialInstanceDynamic* ProgressMaterial; // 0x488(0x08)
	char pad_490[0x10]; // 0x490(0x10)

	void UpdateScopeUI(struct ASolarVehicleWeapon* VehicleWeapon, struct FVehicleWeaponCrossHairInfo& InCrossHairInfo); // Function Solarland.VehicleWeaponScopeWidget.UpdateScopeUI // (Final|Native|Public|HasOutParms) // @ game+0x29d1160
	void SetChargeProgress(struct UImage*& InProgressImage, struct UWidgetAnimation*& InProgressAnima); // Function Solarland.VehicleWeaponScopeWidget.SetChargeProgress // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateChargeProgress(bool InbCharging, int32_t InChargeMode, float InChargeProgress); // Function Solarland.VehicleWeaponScopeWidget.OnUpdateChargeProgress // (Final|Native|Protected) // @ game+0x29d0c40
	void OnScopeTriggerChanged(bool bChecked); // Function Solarland.VehicleWeaponScopeWidget.OnScopeTriggerChanged // (Final|Native|Protected) // @ game+0x29d0b20
	void OnScopeOpened(); // Function Solarland.VehicleWeaponScopeWidget.OnScopeOpened // (Final|Native|Public) // @ game+0x29d0b00
	void InitScopeUI(struct ASolarVehiclePawn* InVehicle, bool bSpectate); // Function Solarland.VehicleWeaponScopeWidget.InitScopeUI // (Final|Native|Public) // @ game+0x29d06f0
	void ApplyWeaponCrossHairToScope(struct FVehicleWeaponCrossHairInfo& InCrossHairInfo); // Function Solarland.VehicleWeaponScopeWidget.ApplyWeaponCrossHairToScope // (Final|Native|Protected|HasOutParms) // @ game+0x29d0550
};

// Class Solarland.VehicleWholeShieldGCNotify_Actor
// Size: 0x578 (Inherited: 0x2a0)
struct AVehicleWholeShieldGCNotify_Actor : ASolarVehicleGCNotify_Actor {
	struct TSoftObjectPtr<UMaterialInterface> TeammateWholeShieldMaterial; // 0x2a0(0x28)
	struct TSoftObjectPtr<UMaterialInterface> NoTeammateWholeShieldMaterial; // 0x2c8(0x28)
	struct FName StartShieldMaterialParam; // 0x2f0(0x08)
	struct FRuntimeFloatCurve StartShieldCurve; // 0x2f8(0x88)
	struct FName ShieldMaterialChangeParam; // 0x380(0x08)
	struct TMap<float, float> HighShieldChangeRateToMaterialValue; // 0x388(0x50)
	struct TMap<float, float> LowShieldChangeRateToMaterialValue; // 0x3d8(0x50)
	struct FName SphereParameterName; // 0x428(0x08)
	struct FName HitLocaitonParameterName; // 0x430(0x08)
	struct FRuntimeFloatCurve HitEffectDurationCurve; // 0x438(0x88)
	struct TSoftObjectPtr<UParticleSystem> TeammateBulletHitEffect; // 0x4c0(0x28)
	struct TSoftObjectPtr<UParticleSystem> NoTeammateBulletHitEffect; // 0x4e8(0x28)
	struct FVector BulletHitEffectScale; // 0x510(0x0c)
	char pad_51C[0x5c]; // 0x51c(0x5c)

	void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.VehicleWholeShieldGCNotify_Actor.OnPlayerGetOnVehicle // (Final|Native|Private) // @ game+0x29d0a30
	void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.VehicleWholeShieldGCNotify_Actor.OnPlayerGetOffVehicle // (Final|Native|Private) // @ game+0x29d0890
};

// Class Solarland.VerticalFOVComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UVerticalFOVComponent : UActorComponent {
	float VerticalFOV; // 0xb0(0x04)
	float AspectRatioThreshold; // 0xb4(0x04)
	float HorizontalFOV; // 0xb8(0x04)
	char pad_BC[0xc]; // 0xbc(0x0c)

	void RefreshHorizontalFOV(struct UGameViewportClient* Viewport); // Function Solarland.VerticalFOVComponent.RefreshHorizontalFOV // (Final|Native|Private) // @ game+0x29d1000
	struct UGameViewportClient* GetCurrentViewport(); // Function Solarland.VerticalFOVComponent.GetCurrentViewport // (Final|Native|Private|Const) // @ game+0x29d0620
};

// Class Solarland.VibrateConfig
// Size: 0xa0 (Inherited: 0x30)
struct UVibrateConfig : UDataAsset {
	struct UDataTable* dataTab; // 0x30(0x08)
	struct TMap<enum class EWeaponVibrateFactor, struct FVibrateWeaponFactorDeviceMap> WeaponVibrateFactorMap; // 0x38(0x50)
	struct FSoftObjectPath WeaponDataTabPath; // 0x88(0x18)
};

// Class Solarland.VisibilityFlagSettings
// Size: 0x50 (Inherited: 0x38)
struct UVisibilityFlagSettings : UDeveloperSettings {
	struct FGameplayTag DefaultVisibilityFlagTag; // 0x38(0x08)
	struct TArray<struct FGameplayTag> VisibilityFlagTags; // 0x40(0x10)

	int32_t StaticGetVisibilityFlag(struct FGameplayTag& Tag); // Function Solarland.VisibilityFlagSettings.StaticGetVisibilityFlag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x29d1090
	int32_t GetVisibilityFlag(struct FGameplayTag& Tag); // Function Solarland.VisibilityFlagSettings.GetVisibilityFlag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29d0650
};

// Class Solarland.VisualSoundConfig
// Size: 0x1b8 (Inherited: 0x30)
struct UVisualSoundConfig : UDataAsset {
	char ElemMaxCount; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float VehicleMoveDecidingSpeed; // 0x34(0x04)
	float IgnoredCheckRate; // 0x38(0x04)
	float IgnoredCheckAngle; // 0x3c(0x04)
	float IgnoredCheckDis_PlayerDefault; // 0x40(0x04)
	float IgnoredCheckDis_VehicleDefault; // 0x44(0x04)
	struct TMap<int32_t, float> IgnoredCheckDis_VehicleMap; // 0x48(0x50)
	struct FVisualSoundTagData SelfParentTagsData; // 0x98(0x40)
	struct TMap<enum class EBattlePromptType, struct FVisualSoundTagData> SelfTagsMap; // 0xd8(0x50)
	struct FVisualSoundTagData EnemyParentTagsData; // 0x128(0x40)
	struct TMap<enum class EBattlePromptType, struct FVisualSoundData> EnemyDataMap; // 0x168(0x50)
};

// Class Solarland.WalkWidgetNew
// Size: 0x8d0 (Inherited: 0x1e0)
struct UWalkWidgetNew : USolarJoyStick {
	struct FMulticastInlineDelegate OnSprintChangeToCenterState; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnSprintIconActive; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnSprintIconHide; // 0x200(0x10)
	struct FMulticastInlineDelegate OnSprintLockIconActive; // 0x210(0x10)
	struct FMulticastInlineDelegate OnStartSprintFree; // 0x220(0x10)
	struct FMulticastInlineDelegate OnTerminateSprintFree; // 0x230(0x10)
	struct FSlateBrush JoyStickThumb; // 0x240(0xe0)
	struct FSlateBrush JoyStickThumbPress; // 0x320(0xe0)
	struct FSlateBrush JoyStickBG; // 0x400(0xe0)
	struct FSlateBrush SprintImage; // 0x4e0(0xe0)
	struct FSlateBrush UsedSprintImage; // 0x5c0(0xe0)
	struct FSlateBrush SprintImageHovered; // 0x6a0(0xe0)
	struct FSlateBrush UsedSprintImageHovered; // 0x780(0xe0)
	struct FVector2D SprintSize; // 0x860(0x08)
	float TriggerDistanceToSprint; // 0x868(0x04)
	float TriggerDistanceToShowSprint; // 0x86c(0x04)
	float ShowSprintIconSectorAngle; // 0x870(0x04)
	float ShowLockSprintIconSectorAngle; // 0x874(0x04)
	bool bOpenLeftHalfTouch; // 0x878(0x01)
	bool bUseTouchStartOffset; // 0x879(0x01)
	char pad_87A[0x2]; // 0x87a(0x02)
	struct FVector2D VisualCenter; // 0x87c(0x08)
	struct FVector2D VisualSize; // 0x884(0x08)
	struct FVector2D ThumbSize; // 0x88c(0x08)
	struct FVector2D InputScale; // 0x894(0x08)
	float ActiveOpacity; // 0x89c(0x04)
	float InactiveOpacity; // 0x8a0(0x04)
	float TimeUntilDeactive; // 0x8a4(0x04)
	bool bPreventReCenter; // 0x8a8(0x01)
	char pad_8A9[0x27]; // 0x8a9(0x27)

	void SetSprintToCenterDistance(float Distance); // Function Solarland.WalkWidgetNew.SetSprintToCenterDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x29d70a0
	void SetNewSprintImageResource(struct UObject* NewResource, struct UObject* NewHoveredResource); // Function Solarland.WalkWidgetNew.SetNewSprintImageResource // (Final|Native|Public|BlueprintCallable) // @ game+0x29d6fd0
	void SetNewSprintImage(struct FSlateBrush& NewImage, struct FSlateBrush& NewHoveredImage); // Function Solarland.WalkWidgetNew.SetNewSprintImage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x29d6eb0
	void SetCustomizeVisualInfo(struct FVector2D& InPosition, float InScale, float InOpacity); // Function Solarland.WalkWidgetNew.SetCustomizeVisualInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x29d6d80
	void SetCanChangeSprintState(bool CanChange); // Function Solarland.WalkWidgetNew.SetCanChangeSprintState // (Final|Native|Public|BlueprintCallable) // @ game+0x29d6cf0
	void ResetSprintState(); // Function Solarland.WalkWidgetNew.ResetSprintState // (Final|Native|Public|BlueprintCallable) // @ game+0x29d6c80
	void ResetSprintImage(); // Function Solarland.WalkWidgetNew.ResetSprintImage // (Final|Native|Public|BlueprintCallable) // @ game+0x29d6c60
};

// Class Solarland.WarmGameHeroPickRule
// Size: 0x28 (Inherited: 0x28)
struct UWarmGameHeroPickRule : UHeroPickRuleBase {
};

// Class Solarland.WarmupMatchManager
// Size: 0x268 (Inherited: 0x228)
struct AWarmupMatchManager : AGameManagerBase {
	char pad_228[0x8]; // 0x228(0x08)
	struct FMulticastInlineDelegate MatchSuccessedDelegate; // 0x230(0x10)
	struct FMulticastInlineDelegate MatchInterruptDelegate; // 0x240(0x10)
	float AutoGoToTargetLevelTime; // 0x250(0x04)
	char pad_254[0x14]; // 0x254(0x14)

	void MatchSuccessed(); // Function Solarland.WarmupMatchManager.MatchSuccessed // (Final|Native|Public) // @ game+0x29d6990
	void MatchInterrupt(); // Function Solarland.WarmupMatchManager.MatchInterrupt // (Final|Native|Public) // @ game+0x29d6970
	void GotoMatchTargetLevel(); // Function Solarland.WarmupMatchManager.GotoMatchTargetLevel // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void AutoGotoMatchTargetLevel(); // Function Solarland.WarmupMatchManager.AutoGotoMatchTargetLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x29d6590
};

// Class Solarland.WeaponAssistAimWeaponConfig
// Size: 0x2d8 (Inherited: 0x30)
struct UWeaponAssistAimWeaponConfig : UDataAsset {
	float MaxTargetDetectionDistance; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct FBaseFollowSpeedByTag> BaseFollowSpeedByTags; // 0x38(0x10)
	struct FGameplayTagRequirements TargetVelocityFollowTagRequirements; // 0x48(0x50)
	float TargetVelocityFollowDeactivationDelay; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FRuntimeFloatCurve TargetVelocityFollowHorizontalRatioCurve; // 0xa0(0x88)
	struct FRuntimeFloatCurve TargetVelocityFollowVerticalRatioCurve; // 0x128(0x88)
	float TargetVelocityFollowHorizontalRatioCurveScale; // 0x1b0(0x04)
	float TargetVelocityFollowVerticalRatioCurveScale; // 0x1b4(0x04)
	float TargetVelocityFollowMaxHorizontalSpeed; // 0x1b8(0x04)
	float TargetVelocityFollowMaxVerticalSpeed; // 0x1bc(0x04)
	struct FRuntimeFloatCurve TargetVelocityFollowRatioScaleByDistanceCurve; // 0x1c0(0x88)
	struct FRuntimeFloatCurve GlobalSensitivityScaleCurve; // 0x248(0x88)
	float GlobalSensitivityScaleCurveScale; // 0x2d0(0x04)
	char pad_2D4[0x4]; // 0x2d4(0x04)
};

// Class Solarland.WeaponAssistAimConfig
// Size: 0x1a0 (Inherited: 0x30)
struct UWeaponAssistAimConfig : UDataAsset {
	char AssistAimTargetFlag; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<enum class EObjectTypeQuery> TargetDetectionBlockTypes; // 0x38(0x10)
	struct TArray<enum class EObjectTypeQuery> LockAimingBlockTypes; // 0x48(0x10)
	int32_t MaxAllowedTargetCandidateCount; // 0x58(0x04)
	float DistanceToAimCenterWeight; // 0x5c(0x04)
	float DistanceToLocalCharacterWeight; // 0x60(0x04)
	bool bEnableAssistFollow; // 0x64(0x01)
	bool bEnableGlobalSensitivityScale; // 0x65(0x01)
	char pad_66[0x2]; // 0x66(0x02)
	struct FWeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAll; // 0x68(0x60)
	struct FWeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAllGamepad; // 0xc8(0x60)
	bool bEnableAssistAimInSwitch; // 0x128(0x01)
	char pad_129[0x7]; // 0x129(0x07)
	struct FWeaponAssistAimWeaponConfigAll AssistAimWeaponConfigSwitch; // 0x130(0x60)
	struct TArray<struct FWeaponAssistAimByCharacterTag> AssistAimWeaponConfigsByCharacterTag; // 0x190(0x10)
};

// Class Solarland.WeaponCameraShakePattern
// Size: 0x30 (Inherited: 0x30)
struct UWeaponCameraShakePattern : USolarPattern {
};

// Class Solarland.WeaponCameraShakePatternRuntime
// Size: 0x30 (Inherited: 0x30)
struct UWeaponCameraShakePatternRuntime : USolarPatternRuntime {
};

// Class Solarland.NormalCameraShakePattern
// Size: 0x38 (Inherited: 0x30)
struct UNormalCameraShakePattern : UWeaponCameraShakePattern {
	struct UCameraShake* ShakeClass; // 0x30(0x08)
};

// Class Solarland.NormalCameraShakePatternRuntime
// Size: 0x30 (Inherited: 0x30)
struct UNormalCameraShakePatternRuntime : UWeaponCameraShakePatternRuntime {
};

// Class Solarland.CameraShakeWithCurvePattern
// Size: 0x48 (Inherited: 0x30)
struct UCameraShakeWithCurvePattern : UWeaponCameraShakePattern {
	struct UCameraShakeWithCurve* ShakeClass; // 0x30(0x08)
	struct UCameraShakeWithCurve* ShakeTemplate; // 0x38(0x08)
	int32_t RandomSeed; // 0x40(0x04)
	int32_t RandomStep; // 0x44(0x04)
};

// Class Solarland.CameraShakeWithCurvePatternRuntime
// Size: 0x30 (Inherited: 0x30)
struct UCameraShakeWithCurvePatternRuntime : UWeaponCameraShakePatternRuntime {
};

// Class Solarland.WeaponChosenWidget
// Size: 0x498 (Inherited: 0x400)
struct UWeaponChosenWidget : USolarUserWidget {
	struct USolarButton* Btn_Select; // 0x400(0x08)
	bool bEmpty; // 0x408(0x01)
	bool bSelect; // 0x409(0x01)
	char pad_40A[0x8e]; // 0x40a(0x8e)

	void SelectSlot(); // Function Solarland.WeaponChosenWidget.SelectSlot // (Final|Native|Protected|BlueprintCallable) // @ game+0x29d6cd0
	void OnScopeChanged(int32_t InNewScope); // Function Solarland.WeaponChosenWidget.OnScopeChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x29d6ab0
	void K2_OnSelected(bool InbSelected); // Function Solarland.WeaponChosenWidget.K2_OnSelected // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void K2_OnReset(); // Function Solarland.WeaponChosenWidget.K2_OnReset // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void K2_InitWidget(struct FChooseWeaponItemData& InData); // Function Solarland.WeaponChosenWidget.K2_InitWidget // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	enum class EWeaponEquipSlot K2_GetUsedSlot(); // Function Solarland.WeaponChosenWidget.K2_GetUsedSlot // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x29d6950
};

// Class Solarland.WeaponExtraAttributeSet
// Size: 0x100 (Inherited: 0x30)
struct UWeaponExtraAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData ExtraARMag; // 0x30(0x10)
	struct FGameplayAttributeData ExtraSMGMag; // 0x40(0x10)
	struct FGameplayAttributeData ExtraSGMag; // 0x50(0x10)
	struct FGameplayAttributeData ExtraSRMag; // 0x60(0x10)
	struct FGameplayAttributeData ARLoadSpeedMultiple; // 0x70(0x10)
	struct FGameplayAttributeData SMGLoadSpeedMultiple; // 0x80(0x10)
	struct FGameplayAttributeData SGLoadSpeedMultiple; // 0x90(0x10)
	struct FGameplayAttributeData SRLoadSpeedMultiple; // 0xa0(0x10)
	struct FGameplayAttributeData ARHeadshotDamageMultiple; // 0xb0(0x10)
	struct FGameplayAttributeData SMGHeadshotDamageMultiple; // 0xc0(0x10)
	struct FGameplayAttributeData SGHeadshotDamageMultiple; // 0xd0(0x10)
	struct FGameplayAttributeData SRHeadshotDamageMultiple; // 0xe0(0x10)
	struct FGameplayAttributeData WeaponSkillCDMultiple; // 0xf0(0x10)

	void OnRep_WeaponSkillCDMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_WeaponSkillCDMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x29db6b0
	void OnRep_SRLoadSpeedMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_SRLoadSpeedMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x29db610
	void OnRep_SMGLoadSpeedMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_SMGLoadSpeedMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x29db570
	void OnRep_SGLoadSpeedMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_SGLoadSpeedMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x29db4d0
	void OnRep_ExtraSRMag(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ExtraSRMag // (Final|Native|Protected|HasOutParms) // @ game+0x29db430
	void OnRep_ExtraSMGMag(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ExtraSMGMag // (Final|Native|Protected|HasOutParms) // @ game+0x29db390
	void OnRep_ExtraSGMag(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ExtraSGMag // (Final|Native|Protected|HasOutParms) // @ game+0x29db2f0
	void OnRep_ExtraARMag(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ExtraARMag // (Final|Native|Protected|HasOutParms) // @ game+0x29db250
	void OnRep_ARLoadSpeedMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ARLoadSpeedMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x29db1b0
};

// Class Solarland.WeaponGrowthManager
// Size: 0x30 (Inherited: 0x28)
struct UWeaponGrowthManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	struct FString GetWeaponBpPath(int32_t ID); // Function Solarland.WeaponGrowthManager.GetWeaponBpPath // (Final|Native|Public) // @ game+0x29da1a0
};

// Class Solarland.WeaponHandheldConfig
// Size: 0xb70 (Inherited: 0x720)
struct UWeaponHandheldConfig : USingleWeaponConfig {
	struct UWeaponShootConfig* WeaponShootConfig; // 0x718(0x08)
	bool bUseSpecialFireInputRespondConfig; // 0x720(0x01)
	struct FSolarWeaponFireInputRespondConfig FireInputRespondConfig; // 0x721(0x0b)
	float WeaponSwitchTime; // 0x72c(0x04)
	float WeaponUnequipTime; // 0x730(0x04)
	float AimOffsetReferenceAimDistance; // 0x734(0x04)
	struct FWeaponFireTPPAnimConfig TPPRecoilConfig; // 0x738(0x28)
	struct FWeaponFireFPPAnimConfig FPPRecoilConfigNoScope; // 0x760(0x70)
	struct FWeaponFireFPPAnimConfig FPPRecoilConfigWithScope; // 0x7d0(0x70)
	struct FAmmonVerticalRecoilStruct PitchRecoilStruct; // 0x840(0x30)
	struct FAmmonHorizontalRecoilStruct YawRecoilStruct; // 0x870(0x30)
	struct FAmmonRecoilRollStruct RollRecoilStruct; // 0x8a0(0x40)
	struct FAmmonRecoilScope ScopeRecoil; // 0x8e0(0xb8)
	float ADSRecoilCOP; // 0x998(0x04)
	struct TMap<struct FString, float> RecoilCOPMap; // 0x9a0(0x50)
	struct FName Socket; // 0x9f0(0x08)
	struct FName LeftHandIKTargetSocket; // 0x9f8(0x08)
	struct FName LeftHandIKTargetFemaleSocket; // 0xa00(0x08)
	struct FVector LeftHandIkEffectLocation; // 0xa08(0x0c)
	struct FVector LeftHandIkJointLocation; // 0xa14(0x0c)
	struct FVector LeftHandIkJointLocationForGunIdle; // 0xa20(0x0c)
	struct FVector LeftHandIkJointLocationForGunIdleWhenCrouch; // 0xa2c(0x0c)
	struct FVector RightHandIkEffectLocation; // 0xa38(0x0c)
	struct FVector RightHandIkJointLocation; // 0xa44(0x0c)
	struct FLeftHandGripConfig LeftHandGripRotationConfig; // 0xa50(0x84)
	struct FLeftHandGripConfig LeftHandGripRotationConfigForGunIdle; // 0xad4(0x84)
	struct FVector PrimaryVirtualSocketLocation; // 0xb58(0x0c)
	struct FVector SecondaryVirtualSocketLocation; // 0xb64(0x0c)

	void InitVerticalRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax); // Function Solarland.WeaponHandheldConfig.InitVerticalRecoilStruct // (Final|Native|Public) // @ game+0x29daf40
	void InitScopeRollRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax, float adscop); // Function Solarland.WeaponHandheldConfig.InitScopeRollRecoilStruct // (Final|Native|Public) // @ game+0x29dace0
	void InitScopeAndCrossHairVibration(float ScopeVMaxDistanceOffSet, float ScopeVVibrationDuration, float ScopeHMaxDistanceOffSet, float ScopeHVibrationDuration, float ScopeVContinuousFallingDuration, float ScopeVContinuousFallingPointIndex, float VMaxDistanceOffSetScale, float VVibrationDurationScale, float VSingleOffSetScale, float VContinuousOffSetScale, float HMaxDistanceOffSetScale, float HVibrationDurationScale, float HSingleOffSetScale, float HContinuousOffSetScale, float HOffSetProbabilityScale); // Function Solarland.WeaponHandheldConfig.InitScopeAndCrossHairVibration // (Final|Native|Public) // @ game+0x29da840
	void InitRollRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax, float adscop); // Function Solarland.WeaponHandheldConfig.InitRollRecoilStruct // (Final|Native|Public) // @ game+0x29da5e0
	void InitRecoilCOPMap(struct TArray<struct FString>& Keys, struct TArray<float>& Values); // Function Solarland.WeaponHandheldConfig.InitRecoilCOPMap // (Final|Native|Public|HasOutParms) // @ game+0x29da4a0
	void InitHorizontalRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax); // Function Solarland.WeaponHandheldConfig.InitHorizontalRecoilStruct // (Final|Native|Public) // @ game+0x29da280
};

// Class Solarland.WeaponHitAbility
// Size: 0x228 (Inherited: 0x228)
struct AWeaponHitAbility : AActor {
};

// Class Solarland.WeaponSkinData
// Size: 0x2f0 (Inherited: 0x30)
struct UWeaponSkinData : UDataAsset {
	enum class EWeaponSkinType WeaponSkinType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FWeaponBodyData WeaponData; // 0x38(0xb0)
	struct TArray<struct FWeaponSkinPartData> WeaponBarMap; // 0xe8(0x10)
	bool WeaponBarLocked; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
	struct TArray<struct FWeaponSkinPartData> WeaponClipMap; // 0x100(0x10)
	bool WeaponClipLocked; // 0x110(0x01)
	char pad_111[0x7]; // 0x111(0x07)
	struct TArray<struct FWeaponSkinPartData> WeaponGripMap; // 0x118(0x10)
	bool WeaponGripLocked; // 0x128(0x01)
	bool bUseGripIkSocket; // 0x129(0x01)
	char pad_12A[0x6]; // 0x12a(0x06)
	struct TArray<struct FWeaponSkinPartData> WeaponScopeMap; // 0x130(0x10)
	bool WeaponScopeLocked; // 0x140(0x01)
	char pad_141[0x7]; // 0x141(0x07)
	struct TArray<struct FWeaponSkinPartData> WeaponStockMap; // 0x148(0x10)
	bool WeaponStockLocked; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
	struct ASolarBullet* DedicatedBulletEffect; // 0x160(0x08)
	struct ASolarBullet* DedicatedSkillEffect; // 0x168(0x08)
	struct FSoftClassPath DedicatedBulletEffectPath; // 0x170(0x18)
	struct FSoftClassPath DedicatedSkillEffectPath; // 0x188(0x18)
	struct UParticleSystem* DedicatedKillEffect; // 0x1a0(0x08)
	struct FSoftObjectPath DedicatedKillEffectPath; // 0x1a8(0x18)
	struct FSoftObjectPath DedicatedSpecialEffectPath; // 0x1c0(0x18)
	char pad_1D8[0x8]; // 0x1d8(0x08)
	struct FWeaponMeshEffectData WeaponMeshEffectDataForFPP; // 0x1e0(0x60)
	struct FWeaponMeshEffectData WeaponMeshEffectDataForTPP; // 0x240(0x60)
	struct UActorEffect* DedicatedDissolvedDeathActorEffect; // 0x2a0(0x08)
	struct FSoftObjectPath DedicatedDissolvedDeathFXPath; // 0x2a8(0x18)
	struct USolarCharacterDeathShowConfig* DeathShowConfig; // 0x2c0(0x08)
	struct FString PlayAudioEventName; // 0x2c8(0x10)
	struct FString StopAudioEventName; // 0x2d8(0x10)
	struct UAnimSequence* OutsideAnimation; // 0x2e8(0x08)

	void ModifyResPath(); // Function Solarland.WeaponSkinData.ModifyResPath // (Final|Native|Public|BlueprintCallable) // @ game+0x29db190
	bool IsMeshReplace(); // Function Solarland.WeaponSkinData.IsMeshReplace // (Final|Native|Public) // @ game+0x29db160
	bool GetPartLockedInfoByType(enum class EWeaponPartType PartType); // Function Solarland.WeaponSkinData.GetPartLockedInfoByType // (Final|Native|Public|Const) // @ game+0x29da110
	bool GetPartDataArrayByType(enum class EWeaponPartType PartType, struct TArray<struct FWeaponSkinPartData>& PartDataMap); // Function Solarland.WeaponSkinData.GetPartDataArrayByType // (Final|Native|Public|HasOutParms|Const) // @ game+0x29d9fb0
};

// Class Solarland.WeaponPartStaticMeshComponent
// Size: 0x610 (Inherited: 0x600)
struct UWeaponPartStaticMeshComponent : UStaticMeshComponent {
	char pad_600[0x10]; // 0x600(0x10)
};

// Class Solarland.WeaponPartComp
// Size: 0x6d0 (Inherited: 0x610)
struct UWeaponPartComp : UWeaponPartStaticMeshComponent {
	int32_t PartID; // 0x608(0x04)
	struct UWeaponPartDataAsset* PartDataAsset; // 0x610(0x08)
	char pad_61C[0xb4]; // 0x61c(0xb4)
};

// Class Solarland.WeaponPartClipComp
// Size: 0x6d0 (Inherited: 0x6d0)
struct UWeaponPartClipComp : UWeaponPartComp {

	bool IsSupportExtract(); // Function Solarland.WeaponPartClipComp.IsSupportExtract // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29df840
	struct FRotator GetHandRotOffset(); // Function Solarland.WeaponPartClipComp.GetHandRotOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x29df200
	struct FVector GetHandLocOffset(); // Function Solarland.WeaponPartClipComp.GetHandLocOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x29df1c0
	float GetDropLifeSpan(); // Function Solarland.WeaponPartClipComp.GetDropLifeSpan // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29df110
	struct FName GetCharacterHandSocket(enum class EClipAttachType ClipAttachType); // Function Solarland.WeaponPartClipComp.GetCharacterHandSocket // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29df000
	struct FName GetCharacterHandInverseSocket(enum class EClipAttachType ClipAttachType); // Function Solarland.WeaponPartClipComp.GetCharacterHandInverseSocket // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29def60
};

// Class Solarland.WeaponPartDataAsset
// Size: 0x120 (Inherited: 0x30)
struct UWeaponPartDataAsset : UDataAsset {
	bool bOnlyData; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<int32_t> OnlyDataForWeaponSkinIDArray; // 0x38(0x10)
	struct FSoftObjectPath ViewStaticMeshPath; // 0x48(0x18)
	struct FTransform PreviewTransform; // 0x60(0x30)
	struct FSoftObjectPath FightStaticMeshPath; // 0x90(0x18)
	struct FSoftObjectPath PartIcon; // 0xa8(0x18)
	struct TMap<int32_t, struct FVector> SpecificScaleMap; // 0xc0(0x50)
	struct UWeaponPartWeaponAttributeDataAsset* WeaponAttributeConfig; // 0x110(0x08)
	char pad_118[0x8]; // 0x118(0x08)
};

// Class Solarland.WeaponPartClipDataAsset
// Size: 0x160 (Inherited: 0x120)
struct UWeaponPartClipDataAsset : UWeaponPartDataAsset {
	bool bSupportExtract; // 0x118(0x01)
	struct FVector HandLocOffsetVector; // 0x11c(0x0c)
	struct FRotator HandRotOffsetRotator; // 0x128(0x0c)
	float DropLifeSpan; // 0x134(0x04)
	struct FName CharacterLeftHandClipSocket; // 0x138(0x08)
	struct FName CharacterRightHandClipSocket; // 0x140(0x08)
	struct FName CharacterLeftHandInverseSocket; // 0x148(0x08)
	struct FName CharacterRightHandInverseSocket; // 0x150(0x08)
	char pad_15D[0x3]; // 0x15d(0x03)
};

// Class Solarland.WeaponPartWeaponAttributeDataAsset
// Size: 0x50 (Inherited: 0x30)
struct UWeaponPartWeaponAttributeDataAsset : UDataAsset {
	struct FWeaponAttributeModifierContainer AttributeModifiers; // 0x30(0x10)
	struct TArray<struct FWeaponPartWeaponAttributeByWeaponType> ModifiersByWeaponType; // 0x40(0x10)
};

// Class Solarland.WeaponPartGripComp
// Size: 0x6d0 (Inherited: 0x6d0)
struct UWeaponPartGripComp : UWeaponPartComp {
};

// Class Solarland.WeaponPartGripDataAsset
// Size: 0x170 (Inherited: 0x120)
struct UWeaponPartGripDataAsset : UWeaponPartDataAsset {
	struct TMap<enum class ECharacterBodyScaleType, struct FWeaponPartGripDataForCharacter> DataForCharacterMap; // 0x118(0x50)
};

// Class Solarland.WeaponPartGunStockComp
// Size: 0x6d0 (Inherited: 0x6d0)
struct UWeaponPartGunStockComp : UWeaponPartComp {
};

// Class Solarland.WeaponPartGunStockDataAsset
// Size: 0x120 (Inherited: 0x120)
struct UWeaponPartGunStockDataAsset : UWeaponPartDataAsset {
};

// Class Solarland.WeaponPartMuzzleComp
// Size: 0x6d0 (Inherited: 0x6d0)
struct UWeaponPartMuzzleComp : UWeaponPartComp {

	bool HasSilencer(); // Function Solarland.WeaponPartMuzzleComp.HasSilencer // (Final|Native|Public|Const) // @ game+0x29df5d0
	bool HasFlameArrester(); // Function Solarland.WeaponPartMuzzleComp.HasFlameArrester // (Final|Native|Public|Const) // @ game+0x29df5a0
};

// Class Solarland.WeaponPartMuzzleDataAsset
// Size: 0x120 (Inherited: 0x120)
struct UWeaponPartMuzzleDataAsset : UWeaponPartDataAsset {
	bool bSilencer; // 0x118(0x01)
	bool bFlameArrester; // 0x119(0x01)
};

// Class Solarland.WeaponPartsComponent
// Size: 0x148 (Inherited: 0xb0)
struct UWeaponPartsComponent : UActorComponent {
	char pad_B0[0x18]; // 0xb0(0x18)
	struct UWeaponPartScopeComp* ScopeComp; // 0xc8(0x08)
	struct UWeaponPartClipComp* ClipComp; // 0xd0(0x08)
	struct UWeaponPartMuzzleComp* MuzzleComp; // 0xd8(0x08)
	struct UWeaponPartGripComp* GripComp; // 0xe0(0x08)
	struct UWeaponPartGunStockComp* GunStockComp; // 0xe8(0x08)
	struct UStaticMeshComponent* CrossHairPlane; // 0xf0(0x08)
	struct UStaticMeshComponent* RedCrosshairPanel; // 0xf8(0x08)
	bool bQuickScope; // 0x100(0x01)
	char pad_101[0x3]; // 0x101(0x03)
	struct FName ScopeSocket; // 0x104(0x08)
	struct FName GripSocket; // 0x10c(0x08)
	struct FName ClipSocket; // 0x114(0x08)
	struct FName OldClipSocket; // 0x11c(0x08)
	struct FName MuzzleSocket; // 0x124(0x08)
	struct FName GunStockSocket; // 0x12c(0x08)
	char pad_134[0x4]; // 0x134(0x04)
	struct ASolarWeapon* MyWeaponActor; // 0x138(0x08)
	char pad_140[0x8]; // 0x140(0x08)

	void UpdateSinglePartHoldView(struct UWeaponPartComp* PartComp, bool bLocal); // Function Solarland.WeaponPartsComponent.UpdateSinglePartHoldView // (Final|Native|Protected) // @ game+0x29dfd30
	void ShowParts(bool Show, enum class EWeaponPartVisibilityChangeFlag Flag); // Function Solarland.WeaponPartsComponent.ShowParts // (Final|Native|Public) // @ game+0x29dfc60
	bool IsPartExist(int32_t ID); // Function Solarland.WeaponPartsComponent.IsPartExist // (Final|Native|Protected|Const) // @ game+0x29df770
	bool IsDefaultPart(int32_t PartID); // Function Solarland.WeaponPartsComponent.IsDefaultPart // (Final|Native|Public|Const) // @ game+0x29df6a0
	bool IsAmmoExist(int32_t ID); // Function Solarland.WeaponPartsComponent.IsAmmoExist // (Final|Native|Protected|Const) // @ game+0x29df600
	struct TArray<struct UWeaponPartComp*> GetValidWeaponParts(); // Function Solarland.WeaponPartsComponent.GetValidWeaponParts // (Final|Native|Public|Const) // @ game+0x29df450
};

// Class Solarland.WeaponPartScopeComp
// Size: 0x820 (Inherited: 0x6d0)
struct UWeaponPartScopeComp : UWeaponPartComp {
	bool bOpen; // 0x6c8(0x01)
	float FovValue; // 0x6cc(0x04)
	float HipToAdsTime; // 0x6d0(0x04)
	struct UCurveFloat* FovChangeCurve; // 0x6d8(0x08)
	float HitEffectScale; // 0x6e0(0x04)
	char pad_6E5[0x103]; // 0x6e5(0x103)
	struct UMaterialInstance* ScopeCrossHairMaterial; // 0x7e8(0x08)
	struct UStaticMesh* ScopeCrossHairMesh; // 0x7f0(0x08)
	struct UMaterialInstance* ScopeEnemyMakerMaterial; // 0x7f8(0x08)
	struct UStaticMesh* ScopeEnemyMakerMesh; // 0x800(0x08)
	struct UStaticMesh* ScopeMeshForFPP; // 0x808(0x08)
	struct UStaticMesh* ScopeMeshForTPP; // 0x810(0x08)
	char pad_818[0x8]; // 0x818(0x08)

	void OpenScope(float Time); // Function Solarland.WeaponPartScopeComp.OpenScope // (Final|Native|Public) // @ game+0x29df9a0
	bool IsOpened(); // Function Solarland.WeaponPartScopeComp.IsOpened // (Final|Native|Public|Const) // @ game+0x29df740
	enum class EWeaponScopeType GetScopeType(); // Function Solarland.WeaponPartScopeComp.GetScopeType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29df420
	struct FVector GetScopeAimCenterPoint(); // Function Solarland.WeaponPartScopeComp.GetScopeAimCenterPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x29df3e0
	struct FRotator GetFPPRotation(); // Function Solarland.WeaponPartScopeComp.GetFPPRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x29df180
	struct FVector GetFPPLocation(); // Function Solarland.WeaponPartScopeComp.GetFPPLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x29df140
	float GetDistanceToEyeWhenScope(); // Function Solarland.WeaponPartScopeComp.GetDistanceToEyeWhenScope // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29df0e0
	void CloseScope(); // Function Solarland.WeaponPartScopeComp.CloseScope // (Final|Native|Public) // @ game+0x29dee30
};

// Class Solarland.WeaponPartScopeDataAsset
// Size: 0x2f0 (Inherited: 0x120)
struct UWeaponPartScopeDataAsset : UWeaponPartDataAsset {
	enum class EWeaponScopeType TypeID; // 0x118(0x01)
	struct FVector FPPLocation; // 0x11c(0x0c)
	struct FRotator FPPRotation; // 0x128(0x0c)
	float DistanceToEyeWhenScope; // 0x134(0x04)
	bool bShoulderShootChangeScale; // 0x138(0x01)
	float ShoulderShootChangeScale; // 0x13c(0x04)
	struct FName CrosshairSocketName; // 0x140(0x08)
	struct FSoftObjectPath LodXMeshPath; // 0x148(0x18)
	struct FSoftObjectPath ScopeCrossHairMaterialPath; // 0x160(0x18)
	struct FSoftObjectPath ScopeCrossHairMeshPath; // 0x178(0x18)
	bool bVibration; // 0x190(0x01)
	char pad_193[0x5]; // 0x193(0x05)
	struct TMap<int32_t, struct FPartScopeCorrect> CorrectMapData; // 0x198(0x50)
	struct TMap<int32_t, struct FPartScopeCorrect> FPPMapForWeaponSkin; // 0x1e8(0x50)
	struct FSolarAmmoMeshData AmmoMeshData; // 0x238(0x48)
	bool bEnableEnemyMaker; // 0x280(0x01)
	char pad_281[0xf]; // 0x281(0x0f)
	struct FTransform EnemyMakerRelativeTransform; // 0x290(0x30)
	struct FSoftObjectPath ScopeCrossHairRedPointMaterialPath; // 0x2c0(0x18)
	struct FSoftObjectPath ScopeCrossHairRedPointMeshPath; // 0x2d8(0x18)
};

// Class Solarland.RecoverableRecoilPattern
// Size: 0x210 (Inherited: 0x38)
struct URecoverableRecoilPattern : USolarIncreaseAndDecreasePattern {
	bool bLimitMaxOffset; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FVector MaxOffset; // 0x3c(0x0c)
	bool bLimitRecoveryStopOffset; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FVector RecoveryStopOffset; // 0x4c(0x0c)
	float IncreaseTime; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct FRuntimeFloatCurve IncreaseCurve; // 0x60(0x88)
	struct FWeaponRecoilVectorGenerator OffsetGenerator; // 0xe8(0x18)
	struct FRuntimeFloatCurve DecreaseTimeCurve; // 0x100(0x88)
	struct FRuntimeFloatCurve DecreaseRatioCurve; // 0x188(0x88)
};

// Class Solarland.RecoverableRecoilPatternRuntime
// Size: 0x88 (Inherited: 0x50)
struct URecoverableRecoilPatternRuntime : USolarIncreaseAndDecreasePatternRuntime {
	char pad_50[0x38]; // 0x50(0x38)
};

// Class Solarland.WeaponRecoilPattern
// Size: 0x220 (Inherited: 0x210)
struct UWeaponRecoilPattern : URecoverableRecoilPattern {
	bool bEnableRecoveryCorrection; // 0x210(0x01)
	char pad_211[0x3]; // 0x211(0x03)
	struct FRangeFloat HoriRecoveryRangeWithCorrection; // 0x214(0x08)
	char pad_21C[0x4]; // 0x21c(0x04)
};

// Class Solarland.WeaponRecoilPatternRuntime
// Size: 0x98 (Inherited: 0x88)
struct UWeaponRecoilPatternRuntime : URecoverableRecoilPatternRuntime {
	char pad_88[0x10]; // 0x88(0x10)
};

// Class Solarland.WeaponTPPKickPattern
// Size: 0x118 (Inherited: 0x38)
struct UWeaponTPPKickPattern : USolarIncreaseAndDecreasePattern {
	struct FVector MaxOffset; // 0x38(0x0c)
	float IncreaseTime; // 0x44(0x04)
	struct UCurveVector* IncreaseCurve; // 0x48(0x08)
	struct FWeaponRecoilVectorGenerator OffsetGenerator; // 0x50(0x18)
	float DecreaseTime; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct FRuntimeFloatCurve DecreaseRatioCurve; // 0x70(0x88)
	struct UCurveVector* DecreaseOffsetCurve; // 0xf8(0x08)
	struct FWeaponRecoilVectorGenerator DecreaseOffsetGenerator; // 0x100(0x18)
};

// Class Solarland.WeaponTPPKickPatternRuntime
// Size: 0x80 (Inherited: 0x50)
struct UWeaponTPPKickPatternRuntime : USolarIncreaseAndDecreasePatternRuntime {
	char pad_50[0x30]; // 0x50(0x30)
};

// Class Solarland.WeaponGunKickPattern
// Size: 0x268 (Inherited: 0x38)
struct UWeaponGunKickPattern : USolarIncreaseAndDecreasePattern {
	struct FValueCurveBySprayingTime SprayingOffset; // 0x38(0x18)
	struct FValueCurveBySprayingTime SprayingRotation; // 0x50(0x18)
	float SprayingRestartSmoothTime; // 0x68(0x04)
	float SprayingRecoveryTime; // 0x6c(0x04)
	struct FRuntimeFloatCurve SprayingRecoveryRatioCurve; // 0x70(0x88)
	float IncreaseTime; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct FRuntimeFloatCurve IncreaseCurve; // 0x100(0x88)
	struct FVector MaxOffset; // 0x188(0x0c)
	char pad_194[0x4]; // 0x194(0x04)
	struct FWeaponRecoilVectorGenerator OffsetGenerator; // 0x198(0x18)
	struct FRotator MaxRotation; // 0x1b0(0x0c)
	char pad_1BC[0x4]; // 0x1bc(0x04)
	struct FWeaponRecoilRotatorGenerator RotationGenerator; // 0x1c0(0x18)
	float DecreaseTime; // 0x1d8(0x04)
	char pad_1DC[0x4]; // 0x1dc(0x04)
	struct FRuntimeFloatCurve DecreaseRatioCurve; // 0x1e0(0x88)
};

// Class Solarland.WeaponGunKickPatternRuntime
// Size: 0xd8 (Inherited: 0x50)
struct UWeaponGunKickPatternRuntime : USolarIncreaseAndDecreasePatternRuntime {
	char pad_50[0x88]; // 0x50(0x88)
};

// Class Solarland.WeaponRecoilValueGenerator
// Size: 0x28 (Inherited: 0x28)
struct UWeaponRecoilValueGenerator : UObject {
};

// Class Solarland.ConstantValueGenerator
// Size: 0x30 (Inherited: 0x28)
struct UConstantValueGenerator : UWeaponRecoilValueGenerator {
	float Value; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Solarland.RandomRangeValueGenerator
// Size: 0x40 (Inherited: 0x28)
struct URandomRangeValueGenerator : UWeaponRecoilValueGenerator {
	struct FSymmetricRangeFloat ValueRange; // 0x28(0x0c)
	int32_t RandomSeed; // 0x34(0x04)
	int32_t RandomStep; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Solarland.RandomByPerlinNoiseValueGenerator
// Size: 0x40 (Inherited: 0x28)
struct URandomByPerlinNoiseValueGenerator : UWeaponRecoilValueGenerator {
	struct FSymmetricRangeFloat ValueRange; // 0x28(0x0c)
	float NoiseBase; // 0x34(0x04)
	float NoiseFrequency; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Solarland.FixedCurveValueGenerator
// Size: 0xc0 (Inherited: 0x28)
struct UFixedCurveValueGenerator : UWeaponRecoilValueGenerator {
	struct FRuntimeFloatCurve ValueCurve; // 0x28(0x88)
	float ValueScale; // 0xb0(0x04)
	enum class EFixedValueMode ValueMode; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	int32_t RepeatStartIndex; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
};

// Class Solarland.FixedCurveValueByIndexGenerator
// Size: 0xc0 (Inherited: 0x28)
struct UFixedCurveValueByIndexGenerator : UWeaponRecoilValueGenerator {
	struct FRuntimeFloatCurve ValueCurve; // 0x28(0x88)
	float ValueScale; // 0xb0(0x04)
	enum class EFixedValueMode ValueMode; // 0xb4(0x01)
	bool bRepeatable; // 0xb5(0x01)
	char pad_B6[0x2]; // 0xb6(0x02)
	int32_t RepeatStartIndex; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
};

// Class Solarland.FixedPointsValueGenerator
// Size: 0x48 (Inherited: 0x28)
struct UFixedPointsValueGenerator : UWeaponRecoilValueGenerator {
	struct TArray<float> Values; // 0x28(0x10)
	float ValueScale; // 0x38(0x04)
	enum class EFixedValueMode ValueMode; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	int32_t RepeatStartIndex; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Solarland.FixedSectionValueGenerator
// Size: 0x40 (Inherited: 0x28)
struct UFixedSectionValueGenerator : UWeaponRecoilValueGenerator {
	struct TArray<struct FFixedSectionInfo> Sections; // 0x28(0x10)
	int32_t RepeatStartIndex; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Solarland.CompositeValueGenerator
// Size: 0x38 (Inherited: 0x28)
struct UCompositeValueGenerator : UWeaponRecoilValueGenerator {
	struct TArray<struct UWeaponRecoilValueGenerator*> Generators; // 0x28(0x10)
};

// Class Solarland.WeaponryPartBase
// Size: 0x7d0 (Inherited: 0x740)
struct UWeaponryPartBase : USwitchEffectStaticMeshComponent {
	char pad_740[0x8]; // 0x740(0x08)
	int32_t PartID; // 0x748(0x04)
	bool bDataAssetInit; // 0x74c(0x01)
	bool bMeshAssetsInit; // 0x74d(0x01)
	char pad_74E[0x2]; // 0x74e(0x02)
	struct FSoftObjectPath AssetPath; // 0x750(0x18)
	struct UWeaponPartDataAsset* OrginDataAsset; // 0x768(0x08)
	struct UWeaponPartDataAsset* SkinPartDataAsset; // 0x770(0x08)
	struct UStaticMesh* MyStaticMesh; // 0x778(0x08)
	struct UWeaponSkinData* WeaponSkin; // 0x780(0x08)
	struct FWeaponSkinPartData SkinMatchedPartData; // 0x788(0x40)
	char pad_7C8[0x8]; // 0x7c8(0x08)

	void ResetSkin(bool bShowHDMesh); // Function Solarland.WeaponryPartBase.ResetSkin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RefreshSpecificScale(); // Function Solarland.WeaponryPartBase.RefreshSpecificScale // (Final|Native|Public) // @ game+0x29e3d40
	void PartUninstall(int32_t ID); // Function Solarland.WeaponryPartBase.PartUninstall // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void PartInitialize(int32_t ID, bool bShowHDMesh, bool bDefault); // Function Solarland.WeaponryPartBase.PartInitialize // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void OnInitMeshAssets(); // Function Solarland.WeaponryPartBase.OnInitMeshAssets // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnInitDataAsset(); // Function Solarland.WeaponryPartBase.OnInitDataAsset // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	bool IsValidPart(); // Function Solarland.WeaponryPartBase.IsValidPart // (Native|Public) // @ game+0x29e3980
	bool HasInitialized(); // Function Solarland.WeaponryPartBase.HasInitialized // (Native|Public|Const) // @ game+0x29e3610
	struct TArray<struct FSoftObjectPath> GetSkinNeedLoadAssets(struct UWeaponSkinData* SkinData, bool bShowHDMesh); // Function Solarland.WeaponryPartBase.GetSkinNeedLoadAssets // (Final|Native|Public) // @ game+0x29e34d0
	enum class EWeaponPartType GetPartType(); // Function Solarland.WeaponryPartBase.GetPartType // (Native|Public|Const) // @ game+0x29e3360
	int32_t GetPartID(); // Function Solarland.WeaponryPartBase.GetPartID // (Native|Public|Const) // @ game+0x29e3330
	struct TArray<struct FSoftObjectPath> GetClientNeedLoadMesh(bool bShowHDMesh); // Function Solarland.WeaponryPartBase.GetClientNeedLoadMesh // (Native|Public) // @ game+0x29e31f0
	struct TArray<struct FSoftObjectPath> GetClientNeedLoadAssets(bool bShowHDMesh); // Function Solarland.WeaponryPartBase.GetClientNeedLoadAssets // (Final|Native|Public) // @ game+0x29e3110
};

// Class Solarland.WeaponryPartClip
// Size: 0x7d0 (Inherited: 0x7d0)
struct UWeaponryPartClip : UWeaponryPartBase {
};

// Class Solarland.WeaponryPartComponent
// Size: 0x110 (Inherited: 0xb0)
struct UWeaponryPartComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct UWeaponryPartScope* ScopeComp; // 0xb8(0x08)
	struct UWeaponryPartClip* ClipComp; // 0xc0(0x08)
	struct UWeaponryPartMuzzle* MuzzleComp; // 0xc8(0x08)
	struct UWeaponryPartGrip* GripComp; // 0xd0(0x08)
	struct UWeaponryPartGunStock* GunStockComp; // 0xd8(0x08)
	struct FName ScopeSocket; // 0xe0(0x08)
	struct FName GripSocket; // 0xe8(0x08)
	struct FName ClipSocket; // 0xf0(0x08)
	struct FName MuzzleSocket; // 0xf8(0x08)
	struct FName GunStockSocket; // 0x100(0x08)
	struct AWeaponryWeapon* MyWeaponActor; // 0x108(0x08)

	void UpdateSkin(struct UWeaponSkinData* SkinData, bool bShowHDMesh); // Function Solarland.WeaponryPartComponent.UpdateSkin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void UninstallWeaponPart(int32_t PartID); // Function Solarland.WeaponryPartComponent.UninstallWeaponPart // (Final|Native|Public) // @ game+0x29e42c0
	bool SinglePartHasInitilized(struct UWeaponryPartBase* part); // Function Solarland.WeaponryPartComponent.SinglePartHasInitilized // (Final|Native|Public) // @ game+0x29e4080
	void ShowParts(bool Show); // Function Solarland.WeaponryPartComponent.ShowParts // (Final|Native|Public|BlueprintCallable) // @ game+0x29e3ff0
	void SetSinglePartSkin(struct UWeaponryPartBase* part, struct UWeaponSkinData* SkinData); // Function Solarland.WeaponryPartComponent.SetSinglePartSkin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ResetSkin(bool bShowHDMesh); // Function Solarland.WeaponryPartComponent.ResetSkin // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	bool ReplaceWeaponPart(int32_t PartID, bool bReplaceRoute); // Function Solarland.WeaponryPartComponent.ReplaceWeaponPart // (Final|Native|Public) // @ game+0x29e3d80
	bool IsPartExist(int32_t ID); // Function Solarland.WeaponryPartComponent.IsPartExist // (Event|Public|BlueprintEvent|Const) // @ game+0x2d0d160
	void InitDefaultParts(bool bShowHDMesh); // Function Solarland.WeaponryPartComponent.InitDefaultParts // (Final|Native|Public) // @ game+0x29e3670
	bool HasInitilizeFinish(); // Function Solarland.WeaponryPartComponent.HasInitilizeFinish // (Final|Native|Public) // @ game+0x29e3640
	int32_t GetPartsTypeByID(int32_t ID); // Function Solarland.WeaponryPartComponent.GetPartsTypeByID // (Event|Public|BlueprintEvent|Const) // @ game+0x2d0d160
	void AttachToRightSocket(struct UWeaponryPartBase* PartComp); // Function Solarland.WeaponryPartComponent.AttachToRightSocket // (Final|Native|Public) // @ game+0x29e3060
};

// Class Solarland.WeaponryPartGrip
// Size: 0x7d0 (Inherited: 0x7d0)
struct UWeaponryPartGrip : UWeaponryPartBase {
};

// Class Solarland.WeaponryPartGunStock
// Size: 0x7d0 (Inherited: 0x7d0)
struct UWeaponryPartGunStock : UWeaponryPartBase {
};

// Class Solarland.WeaponryPartMuzzle
// Size: 0x7d0 (Inherited: 0x7d0)
struct UWeaponryPartMuzzle : UWeaponryPartBase {
};

// Class Solarland.WeaponryPartScope
// Size: 0x7d0 (Inherited: 0x7d0)
struct UWeaponryPartScope : UWeaponryPartBase {
};

// Class Solarland.WeaponrySkinComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UWeaponrySkinComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct UWeaponSkinData* SkinDataAsset; // 0xb8(0x08)
	struct AWeaponryWeapon* MyWeapon; // 0xc0(0x08)

	struct UWeaponSkinData* GetSkinData(); // Function Solarland.WeaponrySkinComponent.GetSkinData // (Final|Native|Public) // @ game+0x29e3390
};

// Class Solarland.WeaponryWeapon
// Size: 0x660 (Inherited: 0x228)
struct AWeaponryWeapon : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct FTransform PreviewTransform; // 0x230(0x30)
	struct FTransform ScoOffsetTransform; // 0x260(0x30)
	struct FTransform StoOffsetTransform; // 0x290(0x30)
	struct FTransform GriOffsetTransform; // 0x2c0(0x30)
	struct FTransform BarOffsetTransform; // 0x2f0(0x30)
	struct FTransform CliOffsetTransform; // 0x320(0x30)
	struct FTransform ShopPreviewTransform; // 0x350(0x30)
	struct FTransform BattlePassPreviewTransform; // 0x380(0x30)
	struct FTransform GetRewardTransform; // 0x3b0(0x30)
	struct FTransform GrowTaskTransform; // 0x3e0(0x30)
	struct FTransform LuckDrawTransform; // 0x410(0x30)
	struct FTransform CarouselDrawTransform; // 0x440(0x30)
	struct FTransform SupplyBoxDetailTransform; // 0x470(0x30)
	struct FTransform SupplyBoxRaffleTransform; // 0x4a0(0x30)
	struct USingleWeaponConfig* Config; // 0x4d0(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x4d8(0x08)
	char pad_4E0[0x1c]; // 0x4e0(0x1c)
	int32_t weaponid; // 0x4fc(0x04)
	struct FSoftObjectPath FightMeshPath; // 0x500(0x18)
	struct UParticleSystemComponent* SkinSpecialEffect; // 0x518(0x08)
	struct UWeaponryPartComponent* WeaponPartComponent; // 0x520(0x08)
	struct UWeaponrySkinComponent* WeaponSkinComponent; // 0x528(0x08)
	struct TSoftObjectPtr<UCurveVector> DissolveCurvePath; // 0x530(0x28)
	struct TSoftObjectPtr<UMaterialInterface> DissolveMatPath; // 0x558(0x28)
	struct TSoftObjectPtr<UCurveVector> FresnelCurvePath; // 0x580(0x28)
	struct TSoftObjectPtr<UMaterialInterface> FresnelMatPath; // 0x5a8(0x28)
	struct TSoftObjectPtr<UParticleSystem> SwitchParticleEffectPath; // 0x5d0(0x28)
	char pad_5F8[0x8]; // 0x5f8(0x08)
	float SwitchEffectInterval; // 0x600(0x04)
	float SelfDelayShowSeconds; // 0x604(0x04)
	struct FSwitchEffectInfo DissolveEffectInfo; // 0x608(0x18)
	struct FSwitchEffectInfo FresnelEffectInfo; // 0x620(0x18)
	char pad_638[0x28]; // 0x638(0x28)

	void TransformToMirror(struct FTransform OriginalTransform); // Function Solarland.WeaponryWeapon.TransformToMirror // (Final|Native|Public|HasDefaults) // @ game+0x29e41d0
	void StopTweenImmediately(struct FVector& DestPos); // Function Solarland.WeaponryWeapon.StopTweenImmediately // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x29e4140
	void SetWeaponSkin(struct UWeaponSkinData* SkinData); // Function Solarland.WeaponryWeapon.SetWeaponSkin // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void SetWeaponMeshVisibility(bool bIsVisible); // Function Solarland.WeaponryWeapon.SetWeaponMeshVisibility // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void SetWeaponMesh(struct USkeletalMesh* NewMesh, bool bWithSwitchEffect); // Function Solarland.WeaponryWeapon.SetWeaponMesh // (Final|Native|Protected) // @ game+0x29e3f20
	void SetIsDownloadHDModel(bool InValue); // Function Solarland.WeaponryWeapon.SetIsDownloadHDModel // (Final|Native|Public) // @ game+0x29e3e90
	void ResetSkinSpecialEffect(); // Function Solarland.WeaponryWeapon.ResetSkinSpecialEffect // (Final|Native|Public) // @ game+0x29e3e70
	void ResetMaterial(); // Function Solarland.WeaponryWeapon.ResetMaterial // (Final|Native|Protected) // @ game+0x29e3e50
	void PostUpdateAppearance(); // Function Solarland.WeaponryWeapon.PostUpdateAppearance // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void PlaySwitchEffect(); // Function Solarland.WeaponryWeapon.PlaySwitchEffect // (Final|Native|Protected) // @ game+0x29e3d20
	void OnWeaponSkinRefresh(bool bValid, int32_t SkinId); // Function Solarland.WeaponryWeapon.OnWeaponSkinRefresh // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void OnWeaponDataInitComplete(); // Function Solarland.WeaponryWeapon.OnWeaponDataInitComplete // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void MoveToSpecifiedPos(struct FVector& DestPos, bool IsDecMode, float BaseValue, float CurveValue); // Function Solarland.WeaponryWeapon.MoveToSpecifiedPos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x29e39b0
	struct UParticleSystemComponent* InternalPlayEffectAttached(struct UParticleSystem* ps, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FAttachedEffectParam Param); // Function Solarland.WeaponryWeapon.InternalPlayEffectAttached // (Final|Native|Protected) // @ game+0x29e37e0
	void InitWeaponConfig(int32_t weaponid, struct FVector DefaultLoc); // Function Solarland.WeaponryWeapon.InitWeaponConfig // (Final|Native|Public|HasDefaults) // @ game+0x29e3700
	int32_t GetWeaponID(); // Function Solarland.WeaponryWeapon.GetWeaponID // (Final|Native|Public) // @ game+0x29e35f0
	struct TArray<struct FSoftObjectPath> GetSkinNeedLoadAssets(struct UWeaponSkinData* SkinData, bool bLoadHDMesh); // Function Solarland.WeaponryWeapon.GetSkinNeedLoadAssets // (Native|Public) // @ game+0x29e33b0
	bool GetIsDownloadHDModel(); // Function Solarland.WeaponryWeapon.GetIsDownloadHDModel // (Final|Native|Public) // @ game+0x29e3300
	struct USingleWeaponConfig* GetCurrentConfig(); // Function Solarland.WeaponryWeapon.GetCurrentConfig // (Final|Native|Public|Const) // @ game+0x29e32d0
	void EnqueueUpdateAppearanceCmd(char Cmd, struct FString Params); // Function Solarland.WeaponryWeapon.EnqueueUpdateAppearanceCmd // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void EmptyMeshOverrideMaterials(); // Function Solarland.WeaponryWeapon.EmptyMeshOverrideMaterials // (Final|Native|Public) // @ game+0x29e30f0
};

// Class Solarland.WeaponScanAbility
// Size: 0x498 (Inherited: 0x428)
struct UWeaponScanAbility : USolarWeaponGameplayAbility {
	struct ASolarRadarBase* RadarClass; // 0x428(0x08)
	struct ASolarRadarBase* SpawnedRadar; // 0x430(0x08)
	float EffectRadius; // 0x438(0x04)
	float DelayDisplayTime; // 0x43c(0x04)
	struct UAnimMontage* ExecuteAnimMontage; // 0x440(0x08)
	struct UAnimMontage* ExecuteAnimMontageWithWeapon; // 0x448(0x08)
	bool bExecuteAnimMontageByWeaponStatus; // 0x450(0x01)
	bool bWaitMontageNotifyToSpawnRadar; // 0x451(0x01)
	char pad_452[0x2]; // 0x452(0x02)
	struct FName SpawnRadarMontageNotify; // 0x454(0x08)
	bool bWaitExecuteAnimCompletedSpawnRader; // 0x45c(0x01)
	char pad_45D[0x3]; // 0x45d(0x03)
	struct UGameplayEffect* WaitSpawnGameplayEffect; // 0x460(0x08)
	struct FActiveGameplayEffectHandle ActiveWaitSpawnEffectHandle; // 0x468(0x08)
	struct ASolarCharacter* EffectUser; // 0x470(0x08)
	char pad_478[0x10]; // 0x478(0x10)
	struct TWeakObjectPtr<struct AActor> InstigatorCache; // 0x488(0x08)
	char pad_490[0x8]; // 0x490(0x08)

	void SpawnRadar(); // Function Solarland.WeaponScanAbility.SpawnRadar // (Final|Native|Private) // @ game+0x29e4120
	void RemoveWaitSpawnEffect(); // Function Solarland.WeaponScanAbility.RemoveWaitSpawnEffect // (Final|Native|Private) // @ game+0x29e3d60
	void OnMontageNotify(struct FName NotifyName); // Function Solarland.WeaponScanAbility.OnMontageNotify // (Final|Native|Private) // @ game+0x29e3b70
	void OnExecuteAnimationCompleted(); // Function Solarland.WeaponScanAbility.OnExecuteAnimationCompleted // (Final|Native|Private) // @ game+0x29e3b50
	void OnCharacterReset(); // Function Solarland.WeaponScanAbility.OnCharacterReset // (Final|Native|Private) // @ game+0x29e3b30
	void AddWaitSpawnEffect(); // Function Solarland.WeaponScanAbility.AddWaitSpawnEffect // (Final|Native|Private) // @ game+0x29e3040
	void ActiveRader(); // Function Solarland.WeaponScanAbility.ActiveRader // (Final|Native|Private) // @ game+0x29e3020
};

// Class Solarland.WeaponScopeSliderWidget
// Size: 0x458 (Inherited: 0x400)
struct UWeaponScopeSliderWidget : USolarUserWidget {
	struct TArray<struct FScopeSliderData> ScopeSliderDatas; // 0x400(0x10)
	int32_t ScopeSliderType; // 0x410(0x04)
	float SliderAnimPlaySpeed; // 0x414(0x04)
	float SliderValueScale; // 0x418(0x04)
	char pad_41C[0x4]; // 0x41c(0x04)
	struct USlider* Slider_ADS; // 0x420(0x08)
	struct USolarTextBlock* Txt_Scope; // 0x428(0x08)
	struct UWidgetAnimation* Anim_Type0; // 0x430(0x08)
	struct UWidgetAnimation* Anim_Type1; // 0x438(0x08)
	struct UWidgetAnimation* AnimToPlay; // 0x440(0x08)
	char pad_448[0x10]; // 0x448(0x10)

	void OnSwitchToNextVehicleScope(); // Function Solarland.WeaponScopeSliderWidget.OnSwitchToNextVehicleScope // (Final|Native|Protected) // @ game+0x29e3d00
	void OnSliderValueChangedOnPC(float InValue); // Function Solarland.WeaponScopeSliderWidget.OnSliderValueChangedOnPC // (Final|Native|Protected) // @ game+0x29e3c80
	void OnSliderValueChanged(float InValue); // Function Solarland.WeaponScopeSliderWidget.OnSliderValueChanged // (Final|Native|Protected) // @ game+0x29e3c00
};

// Class Solarland.WeaponShootConfig
// Size: 0x440 (Inherited: 0x30)
struct UWeaponShootConfig : UDataAsset {
	bool bEnableNewShootSpeed; // 0x30(0x01)
	bool bEnableNewSpread; // 0x31(0x01)
	bool bEnableNewRecoil; // 0x32(0x01)
	bool bEnableNewWeaponAnim; // 0x33(0x01)
	bool bEnableNewCameraShake; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	float ShootOriginRange; // 0x38(0x04)
	float StandardShootDistance; // 0x3c(0x04)
	struct FVector RotationPivot; // 0x40(0x0c)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct TMap<enum class EWeaponScopeType, struct FVector> RotationPivotMap; // 0x50(0x50)
	struct UWeaponShootSpeedPattern* ShootSpeedPattern; // 0xa0(0x08)
	float BaseSpread; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
	struct FRuntimeFloatCurve SpreadDistributionCurve; // 0xb0(0x88)
	float AverageSpreadDistribution; // 0x138(0x04)
	char pad_13C[0x4]; // 0x13c(0x04)
	struct FRuntimeFloatCurve VisualSpreadScaleCurve; // 0x140(0x88)
	struct TArray<struct FWeaponAttributeModifiersByTag> ModifiersByOwnerTag; // 0x1c8(0x10)
	enum class ESprayingRecoveryMode SprayingRecoveryMode; // 0x1d8(0x01)
	char pad_1D9[0x7]; // 0x1d9(0x07)
	struct FRuntimeFloatCurve SprayingRecoveryCurve; // 0x1e0(0x88)
	struct UWeaponSpreadPattern* SpreadPattern; // 0x268(0x08)
	struct UWeaponRecoilPattern* RecoilPattern; // 0x270(0x08)
	struct UBlendSpace* TPPKickAnimBlendSpace; // 0x278(0x08)
	struct FVector TPPKickBlendSpaceMaxValue; // 0x280(0x0c)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct UWeaponTPPKickPattern* TPPKickPattern; // 0x290(0x08)
	struct TMap<enum class EWeaponScopeType, float> RecoilHoriRecRangeWithCoScaleMap; // 0x298(0x50)
	struct UWeaponGunKickPattern* GunKickPattern; // 0x2e8(0x08)
	struct TMap<enum class EWeaponScopeType, struct FGunKickScale> GunKickScaleMap; // 0x2f0(0x50)
	bool bEnableEndShake; // 0x340(0x01)
	bool bStopEndShakeOnShot; // 0x341(0x01)
	char pad_342[0x6]; // 0x342(0x06)
	struct UCurveVector* EndShakeOffsetCurve; // 0x348(0x08)
	struct UCurveVector* EndShakeRotationCurve; // 0x350(0x08)
	struct UCurveFloat* EndShakeScaleBySpeedCurve; // 0x358(0x08)
	struct UCurveVector* EndShakeScaleByVelocityCurve; // 0x360(0x08)
	float SkewOffsetSmoothSpeed; // 0x368(0x04)
	float SkewRotationSmoothSpeed; // 0x36c(0x04)
	struct TArray<struct FWeaponSkewAdjustment> SkewAdjustments; // 0x370(0x10)
	struct FCrossHairShootConfig DefaultCrossHairConfig; // 0x380(0x10)
	struct TMap<enum class EWeaponScopeType, struct FCrossHairShootConfig> CrossHairConfigMap; // 0x390(0x50)
	struct UWeaponCameraShakePattern* ShakePatternOnShot; // 0x3e0(0x08)
	struct UWeaponCameraShakePattern* ShakePatternOnScopeShot; // 0x3e8(0x08)
	struct TMap<enum class EWeaponScopeType, float> ShakeScaleMapOnScopeShot; // 0x3f0(0x50)
};

// Class Solarland.WeaponShootSpeedPattern
// Size: 0x30 (Inherited: 0x30)
struct UWeaponShootSpeedPattern : USolarPattern {
};

// Class Solarland.WeaponShootSpeedPatternRuntime
// Size: 0x30 (Inherited: 0x30)
struct UWeaponShootSpeedPatternRuntime : USolarPatternRuntime {
};

// Class Solarland.SimpleShootSpeedPattern
// Size: 0x38 (Inherited: 0x30)
struct USimpleShootSpeedPattern : UWeaponShootSpeedPattern {
	struct UWeaponRecoilValueGenerator* ShootIntervalGenerator; // 0x30(0x08)
};

// Class Solarland.SimpleShootSpeedPatternRuntime
// Size: 0x38 (Inherited: 0x30)
struct USimpleShootSpeedPatternRuntime : UWeaponShootSpeedPatternRuntime {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.WeaponSpreadAndRecoil
// Size: 0x148 (Inherited: 0x28)
struct UWeaponSpreadAndRecoil : UObject {
	struct ASolarWeapon* Weapon; // 0x28(0x08)
	char pad_30[0x8]; // 0x30(0x08)
	struct UWeaponShootSpeedPatternRuntime* ShootSpeedPattern; // 0x38(0x08)
	struct UWeaponSpreadPatternRuntime* SpreadPattern; // 0x40(0x08)
	struct UWeaponRecoilPatternRuntime* RecoilPattern; // 0x48(0x08)
	struct UWeaponTPPKickPatternRuntime* TPPKickPattern; // 0x50(0x08)
	struct UWeaponGunKickPatternRuntime* GunKickPattern; // 0x58(0x08)
	struct URecoverableRecoilPatternRuntime* CrossHairKickPattern; // 0x60(0x08)
	struct UWeaponCameraShakePatternRuntime* ShakePatternOnShot; // 0x68(0x08)
	struct UWeaponCameraShakePatternRuntime* ShakePatternOnScopeShot; // 0x70(0x08)
	char pad_78[0xd0]; // 0x78(0xd0)
};

// Class Solarland.WeaponSpreadPattern
// Size: 0x30 (Inherited: 0x30)
struct UWeaponSpreadPattern : USolarPattern {
};

// Class Solarland.WeaponSpreadPatternRuntime
// Size: 0x30 (Inherited: 0x30)
struct UWeaponSpreadPatternRuntime : USolarPatternRuntime {
};

// Class Solarland.SimpleSpreadPattern
// Size: 0x1f0 (Inherited: 0x30)
struct USimpleSpreadPattern : UWeaponSpreadPattern {
	struct TArray<struct FWeaponAttributeParam> SpreadModifiers; // 0x30(0x10)
	float SpreadScaleIncreaseTime; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct FRuntimeFloatCurve SpreadScaleIncreaseCurve; // 0x48(0x88)
	struct TArray<struct FSpreadScaleIncrease> SpreadScaleIncreases; // 0xd0(0x10)
	struct FRuntimeFloatCurve SpreadScaleDecreaseTimeCurve; // 0xe0(0x88)
	struct FRuntimeFloatCurve SpreadScaleDecreaseRatioCurve; // 0x168(0x88)
};

// Class Solarland.SimpleSpreadPatternRuntime
// Size: 0x68 (Inherited: 0x30)
struct USimpleSpreadPatternRuntime : UWeaponSpreadPatternRuntime {
	char pad_30[0x38]; // 0x30(0x38)
};

// Class Solarland.WeaponSystemAssistAim
// Size: 0x70 (Inherited: 0x28)
struct UWeaponSystemAssistAim : UObject {
	char pad_28[0x20]; // 0x28(0x20)
	struct UWeaponAssistAimWeaponConfig* CurrentAssistAimWpnCfg; // 0x48(0x08)
	char pad_50[0x20]; // 0x50(0x20)

	void RefreshCurrentWeapon(struct ASolarWeapon* Weapon); // Function Solarland.WeaponSystemAssistAim.RefreshCurrentWeapon // (Final|Native|Public) // @ game+0x29e9560
	bool Init(struct AActor* InWeaponHolder); // Function Solarland.WeaponSystemAssistAim.Init // (Final|Native|Public) // @ game+0x29e8480
	bool GetActive(); // Function Solarland.WeaponSystemAssistAim.GetActive // (Final|Native|Public) // @ game+0x29e8030
};

// Class Solarland.WeaponSystemAutoFire
// Size: 0xa8 (Inherited: 0x28)
struct UWeaponSystemAutoFire : UObject {
	char pad_28[0x80]; // 0x28(0x80)

	void OnWeaponFire(); // Function Solarland.WeaponSystemAutoFire.OnWeaponFire // (Final|Native|Private) // @ game+0x29e89f0
};

// Class Solarland.WeaponSystemBase
// Size: 0x180 (Inherited: 0xb0)
struct UWeaponSystemBase : UActorComponent {
	char pad_B0[0x48]; // 0xb0(0x48)
	struct UWeaponSystemAutoFire* WeaponSystemAutoFire; // 0xf8(0x08)
	struct USolarWeaponFireInputResolver* WeaponSystemFireInputResolver; // 0x100(0x08)
	struct UWeaponSystemAssistAim* WeaponSystemAssistAim; // 0x108(0x08)
	struct FWeaponSystemInteract WeaponSysIneract; // 0x110(0x50)
	char pad_160[0x10]; // 0x160(0x10)
	struct AActor* MyPossessPawn; // 0x170(0x08)
	char pad_178[0x8]; // 0x178(0x08)

	void WeaponAssistSystemTick(float InDeltaTime); // Function Solarland.WeaponSystemBase.WeaponAssistSystemTick // (Final|Native|Private) // @ game+0x29e9c30
	void SwitchSingleWeaponPressMode(); // Function Solarland.WeaponSystemBase.SwitchSingleWeaponPressMode // (Final|Native|Public|BlueprintCallable) // @ game+0x29e9c10
	void SwitchScopeButtonRotatableMode(); // Function Solarland.WeaponSystemBase.SwitchScopeButtonRotatableMode // (Final|Native|Public|BlueprintCallable) // @ game+0x29e9bf0
	void SwitchQuickScopeActivited(); // Function Solarland.WeaponSystemBase.SwitchQuickScopeActivited // (Final|Native|Public|BlueprintCallable) // @ game+0x29e9bd0
	void SwitchDoScopeMode(); // Function Solarland.WeaponSystemBase.SwitchDoScopeMode // (Final|Native|Public|BlueprintCallable) // @ game+0x9043b0
	void SwitchAutoScopeEnable(); // Function Solarland.WeaponSystemBase.SwitchAutoScopeEnable // (Native|Public|BlueprintCallable) // @ game+0x1ad70a0
	void SwitchAutoFire(bool BOpened); // Function Solarland.WeaponSystemBase.SwitchAutoFire // (Final|Native|Public) // @ game+0x29e9b40
	void SwitchAssistAim(bool bOn_Touch, bool bOn_Gamepad); // Function Solarland.WeaponSystemBase.SwitchAssistAim // (Final|Native|Public) // @ game+0x29e9a70
	void SetCurrentActiveWeapon(struct ASolarWeapon* Weapon); // Function Solarland.WeaponSystemBase.SetCurrentActiveWeapon // (Final|Native|Protected) // @ game+0x29e99e0
	void SetCrosshairVisible(bool InVisible); // Function Solarland.WeaponSystemBase.SetCrosshairVisible // (Native|Public|BlueprintCallable) // @ game+0x29e9950
	void SetAutoScope(bool bOpen); // Function Solarland.WeaponSystemBase.SetAutoScope // (Final|Native|Public) // @ game+0x29e98c0
	void ServerPlayNoAmmoSound(); // Function Solarland.WeaponSystemBase.ServerPlayNoAmmoSound // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0xc69820
	void ReceiveMsgFromPlayer(bool bClient, struct FPlayerWeaponMsg& Msg); // Function Solarland.WeaponSystemBase.ReceiveMsgFromPlayer // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x29e9120
	void OnTouchScreen(); // Function Solarland.WeaponSystemBase.OnTouchScreen // (Final|Native|Public) // @ game+0x9043b0
	void OnToggleAutoFire(); // Function Solarland.WeaponSystemBase.OnToggleAutoFire // (Final|Native|Protected) // @ game+0x29e87a0
	void OnToggleAssistAim(); // Function Solarland.WeaponSystemBase.OnToggleAssistAim // (Final|Native|Protected) // @ game+0x29e8780
	void OnOtherPlayerSpectateMyOwner(); // Function Solarland.WeaponSystemBase.OnOtherPlayerSpectateMyOwner // (Native|Public) // @ game+0x1ad6e60
	void NetMulticastPlayNoAmmoSound(); // Function Solarland.WeaponSystemBase.NetMulticastPlayNoAmmoSound // (Net|Native|Event|NetMulticast|Public) // @ game+0xc697e0
	bool IsUsingSpecialQuickAdsButton(); // Function Solarland.WeaponSystemBase.IsUsingSpecialQuickAdsButton // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29e85f0
	struct USolarWeaponFireInputResolver* GetFireInputResolver(); // Function Solarland.WeaponSystemBase.GetFireInputResolver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29e81e0
	void GetFireButtonInputState(enum class ESolarWeaponFireInputButtonState& OutLeftFireButton, enum class ESolarWeaponFireInputButtonState& OutRightFireButton, enum class ESolarWeaponFireInputButtonState& OutQuickAdsButton); // Function Solarland.WeaponSystemBase.GetFireButtonInputState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x29e80a0
	struct FWeaponSysStateStruct GetCurrentState(); // Function Solarland.WeaponSystemBase.GetCurrentState // (Final|Native|Public|BlueprintCallable) // @ game+0x29e8060
	bool CheckAutoFire(bool& canfire); // Function Solarland.WeaponSystemBase.CheckAutoFire // (Final|Native|Protected|HasOutParms) // @ game+0x29e7e90
};

// Class Solarland.WeaponSystemPlayerBase
// Size: 0x360 (Inherited: 0x180)
struct UWeaponSystemPlayerBase : UWeaponSystemBase {
	char pad_180[0x120]; // 0x180(0x120)
	bool bHasPrimarySlotWeapon; // 0x2a0(0x01)
	bool bHasSecondarySlotWeapon; // 0x2a1(0x01)
	bool bHasTertiarySlotWeapon; // 0x2a2(0x01)
	char pad_2A3[0x1]; // 0x2a3(0x01)
	struct TWeakObjectPtr<struct ASolarUnArmWeapon> Punch; // 0x2a4(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> PrimarySlotWeapon; // 0x2ac(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> SecondarySlotWeapon; // 0x2b4(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> TertiarySlotWeapon; // 0x2bc(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> LastHeldWeapon; // 0x2c4(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> HeldWeapon; // 0x2cc(0x08)
	char bSwapWeaponSlotBitMark : 1; // 0x2d4(0x01)
	char pad_2D4_1 : 7; // 0x2d4(0x01)
	char pad_2D5[0x8b]; // 0x2d5(0x8b)

	void TriggerBoltAnim(); // Function Solarland.WeaponSystemPlayerBase.TriggerBoltAnim // (Final|Native|Public) // @ game+0x9043b0
	void SpawnMeleeWeapon(); // Function Solarland.WeaponSystemPlayerBase.SpawnMeleeWeapon // (Final|Native|Protected) // @ game+0x29f6af0
	void ResetCurrentWeaponFireState(); // Function Solarland.WeaponSystemPlayerBase.ResetCurrentWeaponFireState // (Final|Native|Public) // @ game+0x29f6120
	void RefreshWeaponRelativeTransOnBackpack(enum class EWeaponSlotType WeaponSlot); // Function Solarland.WeaponSystemPlayerBase.RefreshWeaponRelativeTransOnBackpack // (Final|Native|Private) // @ game+0x29f5f90
	void PostBolt(); // Function Solarland.WeaponSystemPlayerBase.PostBolt // (Final|Native|Public) // @ game+0x9043b0
	void OpenScopeForSpectator(); // Function Solarland.WeaponSystemPlayerBase.OpenScopeForSpectator // (Native|Public) // @ game+0x1ae5150
	void OnRep_TertiarySlotWeapon(); // Function Solarland.WeaponSystemPlayerBase.OnRep_TertiarySlotWeapon // (Final|Native|Protected) // @ game+0x29f5db0
	void OnRep_SwapWeaponSlotBitMark(); // Function Solarland.WeaponSystemPlayerBase.OnRep_SwapWeaponSlotBitMark // (Native|Protected) // @ game+0x1ae5750
	void OnRep_SecondarySlotWeapon(); // Function Solarland.WeaponSystemPlayerBase.OnRep_SecondarySlotWeapon // (Final|Native|Protected) // @ game+0x29f5d90
	void OnRep_Punch(); // Function Solarland.WeaponSystemPlayerBase.OnRep_Punch // (Final|Native|Protected) // @ game+0x29f5d50
	void OnRep_PrimarySlotWeapon(); // Function Solarland.WeaponSystemPlayerBase.OnRep_PrimarySlotWeapon // (Final|Native|Protected) // @ game+0x29f5d70
	void OnRep_LastHeldWeapon(); // Function Solarland.WeaponSystemPlayerBase.OnRep_LastHeldWeapon // (Final|Native|Protected) // @ game+0x9043b0
	void OnRep_HeldWeapon(); // Function Solarland.WeaponSystemPlayerBase.OnRep_HeldWeapon // (Final|Native|Protected) // @ game+0x29f5d50
	struct ASolarPlayerWeapon* GetWeaponBySlot(int32_t InSlotType); // Function Solarland.WeaponSystemPlayerBase.GetWeaponBySlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x29f58c0
	struct ASolarUnArmWeapon* GetUnArmWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetUnArmWeapon // (Final|Native|Public|Const) // @ game+0x29f5890
	struct ASolarPlayerWeapon* GetPackSecondaryWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetPackSecondaryWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29f5830
	struct ASolarPlayerWeapon* GetPackPrimaryWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetPackPrimaryWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29f5800
	int32_t GetLastActiveWeaponSlot(); // Function Solarland.WeaponSystemPlayerBase.GetLastActiveWeaponSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29f57d0
	bool GetIsUnArm(); // Function Solarland.WeaponSystemPlayerBase.GetIsUnArm // (Final|Native|Public) // @ game+0x29f57a0
	float GetCurrentWeaponReloadTime(int32_t Mode); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeaponReloadTime // (Final|Native|Public) // @ game+0x29f53c0
	bool GetCurrentWeaponIsOverloading(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeaponIsOverloading // (Final|Native|Public) // @ game+0x29f5390
	struct UTexture2D* GetCurrentWeaponIcon(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeaponIcon // (Final|Native|Protected) // @ game+0x29f5360
	float GetCurrentWeaponBoltTime(int32_t Mode); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeaponBoltTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29f52c0
	struct ASolarPlayerWeapon* GetCurrentWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29f5290
	float GetCurrentSwitchWeaponTime(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentSwitchWeaponTime // (Final|Native|Public) // @ game+0x29f5230
	int32_t GetCurrentActiveSlot(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentActiveSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29f5200
	struct UStaticMesh* GetClipMeshOfCurrentWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetClipMeshOfCurrentWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x29f51d0
	void GameStatisticsWeaponSkill(int32_t InFireMode); // Function Solarland.WeaponSystemPlayerBase.GameStatisticsWeaponSkill // (Final|Native|Public) // @ game+0x29f5140
	void CrosshairQuitReload(); // Function Solarland.WeaponSystemPlayerBase.CrosshairQuitReload // (Native|Public) // @ game+0x1ae4e90
	void CrosshairEnterReload(); // Function Solarland.WeaponSystemPlayerBase.CrosshairEnterReload // (Native|Public) // @ game+0x1ae4910
	void CloseScopeForSpectator(); // Function Solarland.WeaponSystemPlayerBase.CloseScopeForSpectator // (Native|Public) // @ game+0x1ae5430
	void CleanWeaponSlotsUI(); // Function Solarland.WeaponSystemPlayerBase.CleanWeaponSlotsUI // (Final|Native|Public|BlueprintCallable) // @ game+0x29f5100
};

// Class Solarland.WeaponSystemPlayer
// Size: 0x3f0 (Inherited: 0x360)
struct UWeaponSystemPlayer : UWeaponSystemPlayerBase {
	char pad_360[0x54]; // 0x360(0x54)
	float ReloadBlockTimeMax; // 0x3b4(0x04)
	struct FString ReceviedReloadMessage; // 0x3b8(0x10)
	char pad_3C8[0x8]; // 0x3c8(0x08)
	struct AStaticMeshActor* DroppedClip; // 0x3d0(0x08)
	struct AStaticMeshActor* ExtractedClip; // 0x3d8(0x08)
	bool bHoldFire; // 0x3e0(0x01)
	char pad_3E1[0xf]; // 0x3e1(0x0f)

	void TakeOffEquipAttributes(struct ASolarPlayerWeapon* Weapon); // Function Solarland.WeaponSystemPlayer.TakeOffEquipAttributes // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void SwitchFireMode(); // Function Solarland.WeaponSystemPlayer.SwitchFireMode // (Native|Public) // @ game+0x1ae51d0
	void ServerSwitch(int8_t InTargetSlot, bool CurrentWeaponOnBackpackImmediately); // Function Solarland.WeaponSystemPlayer.ServerSwitch // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x29e97e0
	void ServerSwap(int8_t InSourceSlot, int8_t InTargetSlot); // Function Solarland.WeaponSystemPlayer.ServerSwap // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x29e9710
	bool ServerPackDropWeapon(int32_t Slot); // Function Solarland.WeaponSystemPlayer.ServerPackDropWeapon // (Native|Public) // @ game+0x29e9670
	void ServerGameStaticsWeaponSkill(int8_t InFireMode); // Function Solarland.WeaponSystemPlayer.ServerGameStaticsWeaponSkill // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x29e95f0
	void RecieveSafeAreaUpdateMsg(int32_t Num); // Function Solarland.WeaponSystemPlayer.RecieveSafeAreaUpdateMsg // (Final|Native|Protected|BlueprintCallable) // @ game+0x29e94d0
	void RecieveExpPackMsg(int32_t ItemID, int32_t Num); // Function Solarland.WeaponSystemPlayer.RecieveExpPackMsg // (Final|Native|Protected|BlueprintCallable) // @ game+0x29e9400
	void RecieveExpMsg(bool bClient, int32_t Type, int32_t Num, int32_t Slot); // Function Solarland.WeaponSystemPlayer.RecieveExpMsg // (Final|Native|Protected|BlueprintCallable) // @ game+0x29e92a0
	void RecieveAssistMsg(enum class ESolarCharacterType HitedCharacterType); // Function Solarland.WeaponSystemPlayer.RecieveAssistMsg // (Final|Native|Protected|BlueprintCallable) // @ game+0x29e9220
	void PutEquipAttributes(struct ASolarPlayerWeapon* Weapon); // Function Solarland.WeaponSystemPlayer.PutEquipAttributes // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void PostAddWeaponEXPMessageWhenKill(int32_t InWeaponSlot, enum class ESolarHitType InHitType, float InDamage, bool InbKillPlayer); // Function Solarland.WeaponSystemPlayer.PostAddWeaponEXPMessageWhenKill // (Final|Native|Protected|BlueprintCallable) // @ game+0x29e8fc0
	void OnWeaponUpgrade(int32_t InCurrentLevel, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponUpgrade // (Final|Native|Protected) // @ game+0x29e8ef0
	void OnWeaponUpdatePart(int32_t InNewPartId, int32_t InOldPartID, uint32_t InWeaponUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponUpdatePart // (Final|Native|Protected) // @ game+0x29e8de0
	void OnWeaponUpdateExp(float InTotalExp, float InCurrentExp, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponUpdateExp // (Final|Native|Protected) // @ game+0x29e8cc0
	void OnWeaponUpdateClipCapacity(int32_t InFireMode, struct ASolarWeapon* InWeapon); // Function Solarland.WeaponSystemPlayer.OnWeaponUpdateClipCapacity // (Final|Native|Protected) // @ game+0x29e8bf0
	void OnWeaponSwitchOverload(bool InbSwitchOn, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponSwitchOverload // (Final|Native|Protected) // @ game+0x29e8b20
	void OnWeaponQuitReload(int32_t InFireMode, bool InbReloadSuccess, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponQuitReload // (Final|Native|Protected) // @ game+0x29e8a10
	void OnWeaponEnterReload(int32_t InFireMode, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponEnterReload // (Final|Native|Protected) // @ game+0x29e8920
	void OnWeaponEnterFireCD(int32_t InFireMode, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponEnterFireCD // (Final|Native|Protected) // @ game+0x29e8850
	void OnWeaponControlled(struct ASolarWeapon* InWeapon); // Function Solarland.WeaponSystemPlayer.OnWeaponControlled // (Final|Native|Protected) // @ game+0x29e87c0
	void OnPlayerEnergyUpdate(); // Function Solarland.WeaponSystemPlayer.OnPlayerEnergyUpdate // (Final|Native|Protected) // @ game+0x9043b0
	void OnEnterBattleAction(enum class EEnterBattleType battleType); // Function Solarland.WeaponSystemPlayer.OnEnterBattleAction // (Final|Native|Protected) // @ game+0x26a9e90
	void OnCharacterAllReady(struct ASolarCharacter* Character); // Function Solarland.WeaponSystemPlayer.OnCharacterAllReady // (Final|Native|Public) // @ game+0x29e86f0
	bool IsWeaponAmmoUseEnergy(int32_t Slot, int32_t FireMode); // Function Solarland.WeaponSystemPlayer.IsWeaponAmmoUseEnergy // (Final|Native|Protected) // @ game+0x29e8620
	bool IsReloadBlock(); // Function Solarland.WeaponSystemPlayer.IsReloadBlock // (Final|Native|Protected|Const) // @ game+0x29e85c0
	bool IsCurrentWeapon(uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.IsCurrentWeapon // (Final|Native|Protected) // @ game+0x29e8520
	struct ASolarPlayerWeapon* GetWeaponByItemID(int32_t ItemInstanceId); // Function Solarland.WeaponSystemPlayer.GetWeaponByItemID // (Final|Native|Private) // @ game+0x29e83e0
	struct ASolarPlayerWeapon* GetWeaponByID(int32_t ID); // Function Solarland.WeaponSystemPlayer.GetWeaponByID // (Final|Native|Protected) // @ game+0x29e8340
	int32_t GetSlotByItemID(int64_t InItemThisID); // Function Solarland.WeaponSystemPlayer.GetSlotByItemID // (Final|Native|Protected) // @ game+0x29e82a0
	float GetRetrofitCost(int32_t Slot); // Function Solarland.WeaponSystemPlayer.GetRetrofitCost // (Final|Native|Public|BlueprintCallable) // @ game+0x29e8200
	void ClientRecieveExpMsg(int32_t Type, int32_t Num, int32_t Slot); // Function Solarland.WeaponSystemPlayer.ClientRecieveExpMsg // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x29e7f30
	void ClearWeapons(); // Function Solarland.WeaponSystemPlayer.ClearWeapons // (Native|Public) // @ game+0x1ad6e20
};

// Class Solarland.WeaponSystemPlayerAI
// Size: 0x360 (Inherited: 0x360)
struct UWeaponSystemPlayerAI : UWeaponSystemPlayerBase {

	bool IsCurrentWeapon(int32_t ID); // Function Solarland.WeaponSystemPlayerAI.IsCurrentWeapon // (Final|Native|Protected) // @ game+0x29f5b10
	void ClearWeapons(); // Function Solarland.WeaponSystemPlayerAI.ClearWeapons // (Native|Public) // @ game+0x1ad6e20
};

// Class Solarland.WeaponSystemVehicleComponent
// Size: 0x290 (Inherited: 0x180)
struct UWeaponSystemVehicleComponent : UWeaponSystemBase {
	struct FWeaponSystemInteract WeaponSystemInteract; // 0x180(0x50)
	char pad_1D0[0x18]; // 0x1d0(0x18)
	struct ASolarVehicleWeapon* CurrentWeapon; // 0x1e8(0x08)
	struct ASolarCharacter* MyPawn; // 0x1f0(0x08)
	char pad_1F8[0x1c]; // 0x1f8(0x1c)
	struct FWeaponAction WeaponEquipAction; // 0x214(0x08)
	struct FWeaponAction WeaponUnequipAction; // 0x21c(0x08)
	char pad_224[0x4]; // 0x224(0x04)
	struct TMap<struct FName, enum class EVehicleWeaponScopeType> SavedWeaponScopeMap; // 0x228(0x50)
	char pad_278[0x1]; // 0x278(0x01)
	bool bQuickAdsHolding; // 0x279(0x01)
	char pad_27A[0xe]; // 0x27a(0x0e)
	float QuickAdsPressedTime; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)

	void ServerStatVehicleWeaponFire(int32_t InFireMode); // Function Solarland.WeaponSystemVehicleComponent.ServerStatVehicleWeaponFire // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x29f6290
	void ServerReload(char ModeIndex, int32_t Need); // Function Solarland.WeaponSystemVehicleComponent.ServerReload // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x29f61c0
	void ServerChangeWeaponScopeType(enum class EVehicleWeaponScopeType InScopeType); // Function Solarland.WeaponSystemVehicleComponent.ServerChangeWeaponScopeType // (Net|Native|Event|Protected|NetServer) // @ game+0x29f6140
	void OnRep_WeaponUnequipAction(); // Function Solarland.WeaponSystemVehicleComponent.OnRep_WeaponUnequipAction // (Final|Native|Private) // @ game+0x29f5df0
	void OnRep_WeaponEquipAction(); // Function Solarland.WeaponSystemVehicleComponent.OnRep_WeaponEquipAction // (Final|Native|Private) // @ game+0x29f5dd0
	void OnRep_CurrentWeapon(struct ASolarVehicleWeapon* PreviousWeapon); // Function Solarland.WeaponSystemVehicleComponent.OnRep_CurrentWeapon // (Final|Native|Public) // @ game+0x29f5cc0
	void OnQuickAdsFire(); // Function Solarland.WeaponSystemVehicleComponent.OnQuickAdsFire // (Final|Native|Protected) // @ game+0x29f5ca0
	struct ASolarVehicleWeapon* GetCurrentVehicleWeapon(); // Function Solarland.WeaponSystemVehicleComponent.GetCurrentVehicleWeapon // (Final|Native|Public|Const) // @ game+0x29f5260
};

// Class Solarland.WeaponUIStyleSheet
// Size: 0xc8 (Inherited: 0xc8)
struct UWeaponUIStyleSheet : UDataTable {
};

// Class Solarland.WheeledVehicleInputDataAsset
// Size: 0x260 (Inherited: 0x30)
struct UWheeledVehicleInputDataAsset : UDataAsset {
	float BrakeDelayTime; // 0x30(0x04)
	float ThrottleReleaseDelayTime; // 0x34(0x04)
	float MicroThrottleInputThreshold; // 0x38(0x04)
	float MicroThrottleInputSpeed; // 0x3c(0x04)
	struct FRuntimeFloatCurve JoyStickSteeringInputCurve; // 0x40(0x88)
	struct FRuntimeFloatCurve KeyboardSteeringInputCurve; // 0xc8(0x88)
	struct FRuntimeFloatCurve GamepadThrottleInputCurve; // 0x150(0x88)
	struct FRuntimeFloatCurve GamepadBrakeInputCurve; // 0x1d8(0x88)
};

// Class Solarland.WidgetInputManager
// Size: 0x130 (Inherited: 0x28)
struct UWidgetInputManager : UObject {
	struct FDelegate OnTouchStartDetected; // 0x28(0x10)
	struct FDelegate OnTouchUpdate; // 0x38(0x10)
	struct FDelegate OnTouchEndDetected; // 0x48(0x10)
	struct FDelegate OnPointerStartDetected; // 0x58(0x10)
	struct FDelegate OnPointerUpdate; // 0x68(0x10)
	struct FDelegate OnPointerEndDetected; // 0x78(0x10)
	char pad_88[0x8]; // 0x88(0x08)
	struct TMap<int32_t, struct FVector2D> TouchedList; // 0x90(0x50)
	struct TMap<int32_t, struct FVector2D> PointerList; // 0xe0(0x50)

	struct UWidget* K2_GetManagedWidget(); // Function Solarland.WidgetInputManager.K2_GetManagedWidget // (Final|Native|Protected|BlueprintCallable) // @ game+0x29fabb0
	bool GetWidgetTouchedList(struct USolarUserWidget* InWidget, struct TMap<int32_t, struct FVector2D>& OutList); // Function Solarland.WidgetInputManager.GetWidgetTouchedList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x29fa880
	bool GetWidgetPointerList(struct USolarUserWidget* InWidget, struct TMap<int32_t, struct FVector2D>& OutList); // Function Solarland.WidgetInputManager.GetWidgetPointerList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x29fa6c0
};

// Class Solarland.WorldMark_HUDTeammateOffScreen
// Size: 0x4a8 (Inherited: 0x480)
struct UWorldMark_HUDTeammateOffScreen : UActorMarkBase {
	struct UCanvasPanel* Panel_Num; // 0x480(0x08)
	struct UCanvasPanel* Panel_Arrow; // 0x488(0x08)
	struct USolarTextBlock* Txt_Num; // 0x490(0x08)
	char pad_498[0x10]; // 0x498(0x10)

	void SetPlayerIDAndColor(struct FString PlayerId); // Function Solarland.WorldMark_HUDTeammateOffScreen.SetPlayerIDAndColor // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void RefreshPosInTeam(char PosInTeam); // Function Solarland.WorldMark_HUDTeammateOffScreen.RefreshPosInTeam // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d0d160
	void OnUpdateMemberNum(char PosInTeam); // Function Solarland.WorldMark_HUDTeammateOffScreen.OnUpdateMemberNum // (Final|Native|Public) // @ game+0x29fb2f0
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.WorldMark_HUDTeammateOffScreen.OnSpecTargetChanged // (Final|Native|Public) // @ game+0x29fb220
	void OnRescueStateChanged(enum class ERescueState CurrentRescueState); // Function Solarland.WorldMark_HUDTeammateOffScreen.OnRescueStateChanged // (Final|Native|Public) // @ game+0x29fb1a0
};

// Class Solarland.WorldMark_ReviveBase
// Size: 0x4e0 (Inherited: 0x480)
struct UWorldMark_ReviveBase : UActorMarkBase {
	struct UCurveFloat* ScaleChangeDistanceScaleCurve; // 0x480(0x08)
	float LerpSpeed; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)
	struct UWidgetAnimation* Occupy_Anim; // 0x490(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x498(0x08)
	struct UWidgetAnimation* Anim_Exit; // 0x4a0(0x08)
	struct FDelegate OnExitAnimationFinished; // 0x4a8(0x10)
	char pad_4B8[0x8]; // 0x4b8(0x08)
	struct FString StartNotifySoundName; // 0x4c0(0x10)
	struct FString NotifySoundName; // 0x4d0(0x10)

	void SetPlayerIDAndChangeColor(struct FString PlayerId); // Function Solarland.WorldMark_ReviveBase.SetPlayerIDAndChangeColor // (Event|Protected|BlueprintEvent) // @ game+0x2d0d160
	void InitBySolarPlayerState(struct ASolarPlayerState* PlayerState); // Function Solarland.WorldMark_ReviveBase.InitBySolarPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x29fab00
	void ExitAnimEnd(); // Function Solarland.WorldMark_ReviveBase.ExitAnimEnd // (Final|Native|Public) // @ game+0x29fa420
};

// Class Solarland.WorldMark_ReviveTeammates
// Size: 0x5b0 (Inherited: 0x4e0)
struct UWorldMark_ReviveTeammates : UWorldMark_ReviveBase {
	struct UCanvasPanel* Panel; // 0x4e0(0x08)
	struct UCanvasPanel* Panel_rotate; // 0x4e8(0x08)
	struct UScaleBox* ScaleBox_1; // 0x4f0(0x08)
	struct UImage* Img_Light_2; // 0x4f8(0x08)
	struct UImage* img_HeadBg_Shadow; // 0x500(0x08)
	struct UImage* img_PlayerHead; // 0x508(0x08)
	struct UImage* ProgressCD; // 0x510(0x08)
	struct USolarTextBlock* Txt_Recover; // 0x518(0x08)
	struct UTextBlock* Distance; // 0x520(0x08)
	struct USolarTextBlock* Txt_Recover_Off; // 0x528(0x08)
	struct UMaterialInstanceDynamic* CDMaterial; // 0x530(0x08)
	struct USolarResurrectionComponent* ResurrectionComp; // 0x538(0x08)
	struct FName ProgressParamName; // 0x540(0x08)
	struct FLinearColor ProgressParamDefaultValue; // 0x548(0x10)
	struct FString TimeParamName; // 0x558(0x10)
	int32_t DistanceLocalTextID; // 0x568(0x04)
	int32_t RecoverLocalTextID; // 0x56c(0x04)
	int32_t TimeFormatLocalTextID; // 0x570(0x04)
	float TickInterval; // 0x574(0x04)
	float TickDeltaTime; // 0x578(0x04)
	char pad_57C[0x34]; // 0x57c(0x34)

	void SetOutOfScreen(bool OutOfScreen); // Function Solarland.WorldMark_ReviveTeammates.SetOutOfScreen // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.WorldMark_ReviveTeammatesFalling
// Size: 0x560 (Inherited: 0x4e0)
struct UWorldMark_ReviveTeammatesFalling : UWorldMark_ReviveBase {
	struct UCanvasPanel* Panel; // 0x4e0(0x08)
	struct UCanvasPanel* Panel_rotate; // 0x4e8(0x08)
	struct UScaleBox* ScaleBox_2; // 0x4f0(0x08)
	struct UImage* Img_Light; // 0x4f8(0x08)
	struct UImage* img_HeadBg_Shadow; // 0x500(0x08)
	struct UImage* img_PlayerHead; // 0x508(0x08)
	struct UImage* ProgressCD; // 0x510(0x08)
	struct UMaterialInstanceDynamic* CDMaterial; // 0x518(0x08)
	struct FName ProgressParamName; // 0x520(0x08)
	struct FLinearColor ProgressParamDefaultValue; // 0x528(0x10)
	struct FString TimeParamName; // 0x538(0x10)
	int32_t TimeFormatLocalTextID; // 0x548(0x04)
	char pad_54C[0x14]; // 0x54c(0x14)

	void SetPlayerRescueState(bool InBeingRescue); // Function Solarland.WorldMark_ReviveTeammatesFalling.SetPlayerRescueState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
};

// Class Solarland.WorldMarkButton
// Size: 0x440 (Inherited: 0x400)
struct UWorldMarkButton : USolarUserWidget {
	struct UImage* Select_Arrow; // 0x400(0x08)
	struct UButton* WorldMarkBtn; // 0x408(0x08)
	struct UWidgetSwitcher* Switcher; // 0x410(0x08)
	char pad_418[0x1]; // 0x418(0x01)
	bool bButtonClicked; // 0x419(0x01)
	char pad_41A[0x2]; // 0x41a(0x02)
	float UnHoveredDis; // 0x41c(0x04)
	bool bIfTouchMoveout; // 0x420(0x01)
	bool bIfQuickChatWheelOpened; // 0x421(0x01)
	char pad_422[0x6]; // 0x422(0x06)
	struct ASolarHUDInGame* SolarHUDInGame; // 0x428(0x08)
	bool bIfChooseAnyMark; // 0x430(0x01)
	bool bIfPressed; // 0x431(0x01)
	char pad_432[0x2]; // 0x432(0x02)
	float LongPressDeltaTime; // 0x434(0x04)
	char pad_438[0x8]; // 0x438(0x08)

	void SetMarkButtonState(enum class EMarkButtonState NewState); // Function Solarland.WorldMarkButton.SetMarkButtonState // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void ResetButton(); // Function Solarland.WorldMarkButton.ResetButton // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct FEventReply ReleaseMouseCapture(); // Function Solarland.WorldMarkButton.ReleaseMouseCapture // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x29fb760
	void RefreshButtonState(bool IsAlreadyBeResponsed); // Function Solarland.WorldMarkButton.RefreshButtonState // (Final|Native|Public|BlueprintCallable) // @ game+0x29fb6b0
	void OnMarkButtonDragSelectEnded(); // Function Solarland.WorldMarkButton.OnMarkButtonDragSelectEnded // (Final|Native|Protected|BlueprintCallable) // @ game+0x29fb180
	void OnCustomGameStateChanged(enum class ESCMInGameState NewGameState); // Function Solarland.WorldMarkButton.OnCustomGameStateChanged // (Final|Native|Public) // @ game+0x29fb030
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.WorldMarkButton.OnCharacterDead // (Final|Native|Protected) // @ game+0x29fafa0
	void LongPressCheckBegin(); // Function Solarland.WorldMarkButton.LongPressCheckBegin // (Final|Native|Protected|BlueprintCallable) // @ game+0x29fabe0
	void ClearLongPressCheckTimer(); // Function Solarland.WorldMarkButton.ClearLongPressCheckTimer // (Final|Native|Protected|BlueprintCallable) // @ game+0x29f9cf0
	struct FEventReply CaptureMouse(); // Function Solarland.WorldMarkButton.CaptureMouse // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x29f9930
};

// Class Solarland.WorldMarkComponent
// Size: 0x288 (Inherited: 0xb0)
struct UWorldMarkComponent : UActorComponent {
	char pad_B0[0x18]; // 0xb0(0x18)
	struct ASolarCharacter* Owner; // 0xc8(0x08)
	uint32_t WorldMarkPoolOriginSize; // 0xd0(0x04)
	float MinCheckDistance; // 0xd4(0x04)
	float MaxCheckDistance; // 0xd8(0x04)
	bool AutoMarkIsCoolingDown; // 0xdc(0x01)
	char pad_DD[0x5b]; // 0xdd(0x5b)
	int32_t AttachedToCharacterNumLimit; // 0x138(0x04)
	char pad_13C[0x54]; // 0x13c(0x54)
	struct TArray<struct TWeakObjectPtr<struct UHUD_WorldMark>> ChosenMarksTable; // 0x190(0x10)
	struct TWeakObjectPtr<struct UHUD_WorldMark> CurrentChosenMark; // 0x1a0(0x08)
	char pad_1A8[0x30]; // 0x1a8(0x30)
	struct FHitResult CachedHitResult; // 0x1d8(0x88)
	char pad_260[0x18]; // 0x260(0x18)
	struct TArray<struct UHUD_WorldMark*> WorldMarkPool; // 0x278(0x10)

	void VehicleNotify(int32_t VehicleID, int32_t NameLocID, struct ASolarPlayerController* Controller); // Function Solarland.WorldMarkComponent.VehicleNotify // (Final|Native|Public) // @ game+0x29fbb90
	bool VagueMarkCharacter(); // Function Solarland.WorldMarkComponent.VagueMarkCharacter // (Final|Native|Public) // @ game+0x29fbb60
	void UpdateAttachedMarks(); // Function Solarland.WorldMarkComponent.UpdateAttachedMarks // (Final|Native|Public) // @ game+0x29fbb40
	void UnMarkItemByIDLuaCall(int64_t instanceID); // Function Solarland.WorldMarkComponent.UnMarkItemByIDLuaCall // (Final|Native|Public) // @ game+0x29fbab0
	void ResponseChosenMark(); // Function Solarland.WorldMarkComponent.ResponseChosenMark // (Final|Native|Public) // @ game+0x29fba90
	void RemoveWorldMark(int32_t PosInTeam, struct FWorldMarkData& InWorldMarkedData); // Function Solarland.WorldMarkComponent.RemoveWorldMark // (Final|Native|Public|HasOutParms) // @ game+0x29fb930
	void RemoveItemMarkWhenPlayerPicked(int64_t& InItemInstanceId); // Function Solarland.WorldMarkComponent.RemoveItemMarkWhenPlayerPicked // (Final|Native|Public|HasOutParms) // @ game+0x29fb8a0
	void RemoveAttachedMarkByActors(struct TArray<struct AActor*>& InActors); // Function Solarland.WorldMarkComponent.RemoveAttachedMarkByActors // (Final|Native|Public|HasOutParms) // @ game+0x29fb7f0
	void ReleaseWorldMarkPool(); // Function Solarland.WorldMarkComponent.ReleaseWorldMarkPool // (Final|Native|Public) // @ game+0x29fb7d0
	void RefreshChosenMark(); // Function Solarland.WorldMarkComponent.RefreshChosenMark // (Final|Native|Public) // @ game+0x29fb740
	void RecycleWorldMark(struct UHUD_WorldMark* WorldMark); // Function Solarland.WorldMarkComponent.RecycleWorldMark // (Final|Native|Public) // @ game+0x29fb620
	void PushBackQueueGroupMapWidget(enum class EWorldMarkType Type, int32_t PosInTeam, struct UHUD_WorldMark* Widget); // Function Solarland.WorldMarkComponent.PushBackQueueGroupMapWidget // (Final|Native|Public) // @ game+0x29fb510
	struct UHUD_WorldMark* PopQueueGroupMapWidget(enum class EWorldMarkType Type, int32_t PosInTeam); // Function Solarland.WorldMarkComponent.PopQueueGroupMapWidget // (Final|Native|Public) // @ game+0x29fb440
	void OnVehicleEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.WorldMarkComponent.OnVehicleEndPlay // (Final|Native|Public) // @ game+0x29fb370
	void OnMarkBeChosen(struct UHUD_WorldMark* MarkWidget, bool IfWasChosen); // Function Solarland.WorldMarkComponent.OnMarkBeChosen // (Final|Native|Public) // @ game+0x29fb0b0
	void NotifyThatToFarToMark(); // Function Solarland.WorldMarkComponent.NotifyThatToFarToMark // (Final|Native|Public) // @ game+0x29faf80
	void MarkWarningOnWorld(); // Function Solarland.WorldMarkComponent.MarkWarningOnWorld // (Final|Native|Public) // @ game+0x29faf60
	void MarkQuickChatOnWorld(int32_t QuickChatID); // Function Solarland.WorldMarkComponent.MarkQuickChatOnWorld // (Final|Native|Public) // @ game+0x29faed0
	void MarkPointOnWorld(); // Function Solarland.WorldMarkComponent.MarkPointOnWorld // (Final|Native|Public) // @ game+0x29faeb0
	void MarkOnWorldByMinimapPosition(int32_t PosInTeam, struct FVector2D& MinimapPos); // Function Solarland.WorldMarkComponent.MarkOnWorldByMinimapPosition // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x29fade0
	void MarkItemInPickupList(struct FVector& ItemLocation, struct FSolarItemData& ItemData); // Function Solarland.WorldMarkComponent.MarkItemInPickupList // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x29fac90
	void MarkActorByAttachToThem(struct AActor* InActor); // Function Solarland.WorldMarkComponent.MarkActorByAttachToThem // (Final|Native|Public) // @ game+0x29fac00
	void InteractTypeNotify(enum class EInteractableType Type, struct ASolarPlayerController* Controller); // Function Solarland.WorldMarkComponent.InteractTypeNotify // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	void InitWorldMarkPool(); // Function Solarland.WorldMarkComponent.InitWorldMarkPool // (Final|Native|Public) // @ game+0x29fab90
	void Init(struct ASolarCharacter* Character); // Function Solarland.WorldMarkComponent.Init // (Final|Native|Public) // @ game+0x29faa70
	struct UHUD_WorldMarkPanel* GetWorldMarkPanel(); // Function Solarland.WorldMarkComponent.GetWorldMarkPanel // (Final|Native|Public) // @ game+0x29faa40
	int32_t GetQuickVoiceLocalizationID(int32_t& VoiceID); // Function Solarland.WorldMarkComponent.GetQuickVoiceLocalizationID // (Final|Native|Public|HasOutParms) // @ game+0x29fa620
	struct FString GetQuickVoiceEventName(int32_t& VoiceID); // Function Solarland.WorldMarkComponent.GetQuickVoiceEventName // (Final|Native|Public|HasOutParms) // @ game+0x29fa540
	int32_t GetQueueGroupMapSize(enum class EWorldMarkType Type, int32_t PosInTeam); // Function Solarland.WorldMarkComponent.GetQueueGroupMapSize // (Final|Native|Public) // @ game+0x29fa470
	struct FString GetInvalidTypeDefaultIconPath(); // Function Solarland.WorldMarkComponent.GetInvalidTypeDefaultIconPath // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct FString GetInteractiveObjectsFullPath(enum class EInteractableType Type); // Function Solarland.WorldMarkComponent.GetInteractiveObjectsFullPath // (Event|Public|BlueprintEvent) // @ game+0x2d0d160
	struct UHUD_WorldMark* GetFreeWorldMark(); // Function Solarland.WorldMarkComponent.GetFreeWorldMark // (Final|Native|Public) // @ game+0x29fa440
	void CreateWorldMarkInternal(int32_t PosInTeam, struct FWorldMarkData& InWorldMarkedData, struct UObject* IconAsset); // Function Solarland.WorldMarkComponent.CreateWorldMarkInternal // (Final|Native|Public|HasOutParms) // @ game+0x29fa280
	void CreateWorldMark(int32_t PosInTeam, struct FWorldMarkData& InWorldMarkedData); // Function Solarland.WorldMarkComponent.CreateWorldMark // (Final|Native|Public|HasOutParms) // @ game+0x29fa120
	void CreateWarningWidget(struct FWorldMarkData& Data, bool NeedSendMessage); // Function Solarland.WorldMarkComponent.CreateWarningWidget // (Final|Native|Public|HasOutParms) // @ game+0x29f9fb0
	void CreateItemMarkWidget(struct FWorldMarkData& Data); // Function Solarland.WorldMarkComponent.CreateItemMarkWidget // (Final|Native|Public|HasOutParms) // @ game+0x29f9e80
	void CreateInvalidWidget(struct FWorldMarkData& Data, bool bShouldNotify); // Function Solarland.WorldMarkComponent.CreateInvalidWidget // (Final|Native|Public|HasOutParms) // @ game+0x29f9d10
	void ClearCachedWorldMarkLineTraceResult(); // Function Solarland.WorldMarkComponent.ClearCachedWorldMarkLineTraceResult // (Final|Native|Public) // @ game+0x29f9cd0
	bool CheckMarkPointIsOutOfMap(struct FVector& Location); // Function Solarland.WorldMarkComponent.CheckMarkPointIsOutOfMap // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x29f9c30
	bool CheckIfWorldPosValid(struct FWorldMarkData& Data, int32_t& PosInTeam); // Function Solarland.WorldMarkComponent.CheckIfWorldPosValid // (Final|Native|Public|HasOutParms) // @ game+0x29f9aa0
	bool CheckIfThisItemBeenMarkedInternal(int32_t instanceID, int32_t PosInTeam); // Function Solarland.WorldMarkComponent.CheckIfThisItemBeenMarkedInternal // (Final|Native|Public) // @ game+0x29f99d0
	bool CheckAutoMarkDamagingCharacter(); // Function Solarland.WorldMarkComponent.CheckAutoMarkDamagingCharacter // (Final|Native|Public) // @ game+0x29f99a0
	void CacheWorldMarkLineTraceResult(); // Function Solarland.WorldMarkComponent.CacheWorldMarkLineTraceResult // (Final|Native|Public) // @ game+0x29f9910
	void AutoMarkDamagingCharacter(); // Function Solarland.WorldMarkComponent.AutoMarkDamagingCharacter // (Final|Native|Public) // @ game+0x29f98f0
};

